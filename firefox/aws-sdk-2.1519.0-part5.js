AWS.apiLoader.services["kafka"] = {};

AWS.Kafka = AWS.Service.defineService("kafka", [ "2018-11-14" ]);

AWS.apiLoader.services["kafka"]["2018-11-14"] = {
    metadata: {
        apiVersion: "2018-11-14",
        endpointPrefix: "kafka",
        signingName: "kafka",
        serviceFullName: "Managed Streaming for Kafka",
        serviceAbbreviation: "Kafka",
        serviceId: "Kafka",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "kafka-2018-11-14",
        signatureVersion: "v4"
    },
    operations: {
        BatchAssociateScramSecret: {
            http: {
                requestUri: "/v1/clusters/{clusterArn}/scram-secrets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    SecretArnList: {
                        shape: "S3",
                        locationName: "secretArnList"
                    }
                },
                required: [ "ClusterArn", "SecretArnList" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    UnprocessedScramSecrets: {
                        shape: "S5",
                        locationName: "unprocessedScramSecrets"
                    }
                }
            }
        },
        CreateCluster: {
            http: {
                requestUri: "/v1/clusters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerNodeGroupInfo: {
                        shape: "S8",
                        locationName: "brokerNodeGroupInfo"
                    },
                    ClientAuthentication: {
                        shape: "Sp",
                        locationName: "clientAuthentication"
                    },
                    ClusterName: {
                        locationName: "clusterName"
                    },
                    ConfigurationInfo: {
                        shape: "Sw",
                        locationName: "configurationInfo"
                    },
                    EncryptionInfo: {
                        shape: "Sy",
                        locationName: "encryptionInfo"
                    },
                    EnhancedMonitoring: {
                        locationName: "enhancedMonitoring"
                    },
                    OpenMonitoring: {
                        shape: "S13",
                        locationName: "openMonitoring"
                    },
                    KafkaVersion: {
                        locationName: "kafkaVersion"
                    },
                    LoggingInfo: {
                        shape: "S18",
                        locationName: "loggingInfo"
                    },
                    NumberOfBrokerNodes: {
                        locationName: "numberOfBrokerNodes",
                        type: "integer"
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    },
                    StorageMode: {
                        locationName: "storageMode"
                    }
                },
                required: [ "BrokerNodeGroupInfo", "KafkaVersion", "NumberOfBrokerNodes", "ClusterName" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterName: {
                        locationName: "clusterName"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        CreateClusterV2: {
            http: {
                requestUri: "/api/v2/clusters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterName: {
                        locationName: "clusterName"
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    },
                    Provisioned: {
                        locationName: "provisioned",
                        type: "structure",
                        members: {
                            BrokerNodeGroupInfo: {
                                shape: "S8",
                                locationName: "brokerNodeGroupInfo"
                            },
                            ClientAuthentication: {
                                shape: "Sp",
                                locationName: "clientAuthentication"
                            },
                            ConfigurationInfo: {
                                shape: "Sw",
                                locationName: "configurationInfo"
                            },
                            EncryptionInfo: {
                                shape: "Sy",
                                locationName: "encryptionInfo"
                            },
                            EnhancedMonitoring: {
                                locationName: "enhancedMonitoring"
                            },
                            OpenMonitoring: {
                                shape: "S13",
                                locationName: "openMonitoring"
                            },
                            KafkaVersion: {
                                locationName: "kafkaVersion"
                            },
                            LoggingInfo: {
                                shape: "S18",
                                locationName: "loggingInfo"
                            },
                            NumberOfBrokerNodes: {
                                locationName: "numberOfBrokerNodes",
                                type: "integer"
                            },
                            StorageMode: {
                                locationName: "storageMode"
                            }
                        },
                        required: [ "BrokerNodeGroupInfo", "KafkaVersion", "NumberOfBrokerNodes" ]
                    },
                    Serverless: {
                        locationName: "serverless",
                        type: "structure",
                        members: {
                            VpcConfigs: {
                                shape: "S1l",
                                locationName: "vpcConfigs"
                            },
                            ClientAuthentication: {
                                shape: "S1n",
                                locationName: "clientAuthentication"
                            }
                        },
                        required: [ "VpcConfigs" ]
                    }
                },
                required: [ "ClusterName" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterName: {
                        locationName: "clusterName"
                    },
                    State: {
                        locationName: "state"
                    },
                    ClusterType: {
                        locationName: "clusterType"
                    }
                }
            }
        },
        CreateConfiguration: {
            http: {
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    KafkaVersions: {
                        shape: "S3",
                        locationName: "kafkaVersions"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ServerProperties: {
                        locationName: "serverProperties",
                        type: "blob"
                    }
                },
                required: [ "ServerProperties", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreationTime: {
                        shape: "S1u",
                        locationName: "creationTime"
                    },
                    LatestRevision: {
                        shape: "S1v",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        CreateReplicator: {
            http: {
                requestUri: "/replication/v1/replicators",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    KafkaClusters: {
                        locationName: "kafkaClusters",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AmazonMskCluster: {
                                    shape: "S21",
                                    locationName: "amazonMskCluster"
                                },
                                VpcConfig: {
                                    shape: "S22",
                                    locationName: "vpcConfig"
                                }
                            },
                            required: [ "VpcConfig", "AmazonMskCluster" ]
                        }
                    },
                    ReplicationInfoList: {
                        locationName: "replicationInfoList",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConsumerGroupReplication: {
                                    shape: "S25",
                                    locationName: "consumerGroupReplication"
                                },
                                SourceKafkaClusterArn: {
                                    locationName: "sourceKafkaClusterArn"
                                },
                                TargetCompressionType: {
                                    locationName: "targetCompressionType"
                                },
                                TargetKafkaClusterArn: {
                                    locationName: "targetKafkaClusterArn"
                                },
                                TopicReplication: {
                                    shape: "S29",
                                    locationName: "topicReplication"
                                }
                            },
                            required: [ "TargetCompressionType", "TopicReplication", "ConsumerGroupReplication", "SourceKafkaClusterArn", "TargetKafkaClusterArn" ]
                        }
                    },
                    ReplicatorName: {
                        locationName: "replicatorName"
                    },
                    ServiceExecutionRoleArn: {
                        locationName: "serviceExecutionRoleArn"
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    }
                },
                required: [ "ServiceExecutionRoleArn", "ReplicatorName", "ReplicationInfoList", "KafkaClusters" ]
            },
            output: {
                type: "structure",
                members: {
                    ReplicatorArn: {
                        locationName: "replicatorArn"
                    },
                    ReplicatorName: {
                        locationName: "replicatorName"
                    },
                    ReplicatorState: {
                        locationName: "replicatorState"
                    }
                }
            }
        },
        CreateVpcConnection: {
            http: {
                requestUri: "/v1/vpc-connection",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TargetClusterArn: {
                        locationName: "targetClusterArn"
                    },
                    Authentication: {
                        locationName: "authentication"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    },
                    ClientSubnets: {
                        shape: "S3",
                        locationName: "clientSubnets"
                    },
                    SecurityGroups: {
                        shape: "S3",
                        locationName: "securityGroups"
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    }
                },
                required: [ "TargetClusterArn", "Authentication", "VpcId", "ClientSubnets", "SecurityGroups" ]
            },
            output: {
                type: "structure",
                members: {
                    VpcConnectionArn: {
                        locationName: "vpcConnectionArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Authentication: {
                        locationName: "authentication"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    },
                    ClientSubnets: {
                        shape: "S3",
                        locationName: "clientSubnets"
                    },
                    SecurityGroups: {
                        shape: "S3",
                        locationName: "securityGroups"
                    },
                    CreationTime: {
                        shape: "S1u",
                        locationName: "creationTime"
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    }
                }
            }
        },
        DeleteCluster: {
            http: {
                method: "DELETE",
                requestUri: "/v1/clusters/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DeleteClusterPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/clusters/{clusterArn}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v1/configurations/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DeleteReplicator: {
            http: {
                method: "DELETE",
                requestUri: "/replication/v1/replicators/{replicatorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CurrentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    },
                    ReplicatorArn: {
                        location: "uri",
                        locationName: "replicatorArn"
                    }
                },
                required: [ "ReplicatorArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ReplicatorArn: {
                        locationName: "replicatorArn"
                    },
                    ReplicatorState: {
                        locationName: "replicatorState"
                    }
                }
            }
        },
        DeleteVpcConnection: {
            http: {
                method: "DELETE",
                requestUri: "/v1/vpc-connection/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    VpcConnectionArn: {
                        locationName: "vpcConnectionArn"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DescribeCluster: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterInfo: {
                        shape: "S2u",
                        locationName: "clusterInfo"
                    }
                }
            }
        },
        DescribeClusterV2: {
            http: {
                method: "GET",
                requestUri: "/api/v2/clusters/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterInfo: {
                        shape: "S34",
                        locationName: "clusterInfo"
                    }
                }
            }
        },
        DescribeClusterOperation: {
            http: {
                method: "GET",
                requestUri: "/v1/operations/{clusterOperationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterOperationArn: {
                        location: "uri",
                        locationName: "clusterOperationArn"
                    }
                },
                required: [ "ClusterOperationArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterOperationInfo: {
                        shape: "S39",
                        locationName: "clusterOperationInfo"
                    }
                }
            }
        },
        DescribeClusterOperationV2: {
            http: {
                method: "GET",
                requestUri: "/api/v2/operations/{clusterOperationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterOperationArn: {
                        location: "uri",
                        locationName: "clusterOperationArn"
                    }
                },
                required: [ "ClusterOperationArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterOperationInfo: {
                        locationName: "clusterOperationInfo",
                        type: "structure",
                        members: {
                            ClusterArn: {
                                locationName: "clusterArn"
                            },
                            ClusterType: {
                                locationName: "clusterType"
                            },
                            StartTime: {
                                shape: "S1u",
                                locationName: "startTime"
                            },
                            EndTime: {
                                shape: "S1u",
                                locationName: "endTime"
                            },
                            ErrorInfo: {
                                shape: "S3a",
                                locationName: "errorInfo"
                            },
                            OperationArn: {
                                locationName: "operationArn"
                            },
                            OperationState: {
                                locationName: "operationState"
                            },
                            OperationType: {
                                locationName: "operationType"
                            },
                            Provisioned: {
                                locationName: "provisioned",
                                type: "structure",
                                members: {
                                    OperationSteps: {
                                        shape: "S3b",
                                        locationName: "operationSteps"
                                    },
                                    SourceClusterInfo: {
                                        shape: "S3e",
                                        locationName: "sourceClusterInfo"
                                    },
                                    TargetClusterInfo: {
                                        shape: "S3e",
                                        locationName: "targetClusterInfo"
                                    },
                                    VpcConnectionInfo: {
                                        shape: "S3h",
                                        locationName: "vpcConnectionInfo"
                                    }
                                }
                            },
                            Serverless: {
                                locationName: "serverless",
                                type: "structure",
                                members: {
                                    VpcConnectionInfo: {
                                        locationName: "vpcConnectionInfo",
                                        type: "structure",
                                        members: {
                                            CreationTime: {
                                                shape: "S1u",
                                                locationName: "creationTime"
                                            },
                                            Owner: {
                                                locationName: "owner"
                                            },
                                            UserIdentity: {
                                                shape: "S3i",
                                                locationName: "userIdentity"
                                            },
                                            VpcConnectionArn: {
                                                locationName: "vpcConnectionArn"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreationTime: {
                        shape: "S1u",
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    KafkaVersions: {
                        shape: "S3",
                        locationName: "kafkaVersions"
                    },
                    LatestRevision: {
                        shape: "S1v",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DescribeConfigurationRevision: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{arn}/revisions/{revision}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    Revision: {
                        location: "uri",
                        locationName: "revision",
                        type: "long"
                    }
                },
                required: [ "Revision", "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreationTime: {
                        shape: "S1u",
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Revision: {
                        locationName: "revision",
                        type: "long"
                    },
                    ServerProperties: {
                        locationName: "serverProperties",
                        type: "blob"
                    }
                }
            }
        },
        DescribeReplicator: {
            http: {
                method: "GET",
                requestUri: "/replication/v1/replicators/{replicatorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReplicatorArn: {
                        location: "uri",
                        locationName: "replicatorArn"
                    }
                },
                required: [ "ReplicatorArn" ]
            },
            output: {
                type: "structure",
                members: {
                    CreationTime: {
                        shape: "S1u",
                        locationName: "creationTime"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    IsReplicatorReference: {
                        locationName: "isReplicatorReference",
                        type: "boolean"
                    },
                    KafkaClusters: {
                        locationName: "kafkaClusters",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AmazonMskCluster: {
                                    shape: "S21",
                                    locationName: "amazonMskCluster"
                                },
                                KafkaClusterAlias: {
                                    locationName: "kafkaClusterAlias"
                                },
                                VpcConfig: {
                                    shape: "S22",
                                    locationName: "vpcConfig"
                                }
                            }
                        }
                    },
                    ReplicationInfoList: {
                        locationName: "replicationInfoList",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConsumerGroupReplication: {
                                    shape: "S25",
                                    locationName: "consumerGroupReplication"
                                },
                                SourceKafkaClusterAlias: {
                                    locationName: "sourceKafkaClusterAlias"
                                },
                                TargetCompressionType: {
                                    locationName: "targetCompressionType"
                                },
                                TargetKafkaClusterAlias: {
                                    locationName: "targetKafkaClusterAlias"
                                },
                                TopicReplication: {
                                    shape: "S29",
                                    locationName: "topicReplication"
                                }
                            }
                        }
                    },
                    ReplicatorArn: {
                        locationName: "replicatorArn"
                    },
                    ReplicatorDescription: {
                        locationName: "replicatorDescription"
                    },
                    ReplicatorName: {
                        locationName: "replicatorName"
                    },
                    ReplicatorResourceArn: {
                        locationName: "replicatorResourceArn"
                    },
                    ReplicatorState: {
                        locationName: "replicatorState"
                    },
                    ServiceExecutionRoleArn: {
                        locationName: "serviceExecutionRoleArn"
                    },
                    StateInfo: {
                        locationName: "stateInfo",
                        type: "structure",
                        members: {
                            Code: {
                                locationName: "code"
                            },
                            Message: {
                                locationName: "message"
                            }
                        }
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeVpcConnection: {
            http: {
                method: "GET",
                requestUri: "/v1/vpc-connection/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    VpcConnectionArn: {
                        locationName: "vpcConnectionArn"
                    },
                    TargetClusterArn: {
                        locationName: "targetClusterArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Authentication: {
                        locationName: "authentication"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    },
                    Subnets: {
                        shape: "S3",
                        locationName: "subnets"
                    },
                    SecurityGroups: {
                        shape: "S3",
                        locationName: "securityGroups"
                    },
                    CreationTime: {
                        shape: "S1u",
                        locationName: "creationTime"
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    }
                }
            }
        },
        BatchDisassociateScramSecret: {
            http: {
                method: "PATCH",
                requestUri: "/v1/clusters/{clusterArn}/scram-secrets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    SecretArnList: {
                        shape: "S3",
                        locationName: "secretArnList"
                    }
                },
                required: [ "ClusterArn", "SecretArnList" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    UnprocessedScramSecrets: {
                        shape: "S5",
                        locationName: "unprocessedScramSecrets"
                    }
                }
            }
        },
        GetBootstrapBrokers: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/bootstrap-brokers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    BootstrapBrokerString: {
                        locationName: "bootstrapBrokerString"
                    },
                    BootstrapBrokerStringTls: {
                        locationName: "bootstrapBrokerStringTls"
                    },
                    BootstrapBrokerStringSaslScram: {
                        locationName: "bootstrapBrokerStringSaslScram"
                    },
                    BootstrapBrokerStringSaslIam: {
                        locationName: "bootstrapBrokerStringSaslIam"
                    },
                    BootstrapBrokerStringPublicTls: {
                        locationName: "bootstrapBrokerStringPublicTls"
                    },
                    BootstrapBrokerStringPublicSaslScram: {
                        locationName: "bootstrapBrokerStringPublicSaslScram"
                    },
                    BootstrapBrokerStringPublicSaslIam: {
                        locationName: "bootstrapBrokerStringPublicSaslIam"
                    },
                    BootstrapBrokerStringVpcConnectivityTls: {
                        locationName: "bootstrapBrokerStringVpcConnectivityTls"
                    },
                    BootstrapBrokerStringVpcConnectivitySaslScram: {
                        locationName: "bootstrapBrokerStringVpcConnectivitySaslScram"
                    },
                    BootstrapBrokerStringVpcConnectivitySaslIam: {
                        locationName: "bootstrapBrokerStringVpcConnectivitySaslIam"
                    }
                }
            }
        },
        GetCompatibleKafkaVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/compatible-kafka-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "querystring",
                        locationName: "clusterArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CompatibleKafkaVersions: {
                        locationName: "compatibleKafkaVersions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceVersion: {
                                    locationName: "sourceVersion"
                                },
                                TargetVersions: {
                                    shape: "S3",
                                    locationName: "targetVersions"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetClusterPolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    Policy: {
                        locationName: "policy"
                    }
                }
            }
        },
        ListClusterOperations: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/operations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterOperationInfoList: {
                        locationName: "clusterOperationInfoList",
                        type: "list",
                        member: {
                            shape: "S39"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListClusterOperationsV2: {
            http: {
                method: "GET",
                requestUri: "/api/v2/clusters/{clusterArn}/operations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterOperationInfoList: {
                        locationName: "clusterOperationInfoList",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ClusterArn: {
                                    locationName: "clusterArn"
                                },
                                ClusterType: {
                                    locationName: "clusterType"
                                },
                                StartTime: {
                                    shape: "S1u",
                                    locationName: "startTime"
                                },
                                EndTime: {
                                    shape: "S1u",
                                    locationName: "endTime"
                                },
                                OperationArn: {
                                    locationName: "operationArn"
                                },
                                OperationState: {
                                    locationName: "operationState"
                                },
                                OperationType: {
                                    locationName: "operationType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListClusters: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterNameFilter: {
                        location: "querystring",
                        locationName: "clusterNameFilter"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterInfoList: {
                        locationName: "clusterInfoList",
                        type: "list",
                        member: {
                            shape: "S2u"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListClustersV2: {
            http: {
                method: "GET",
                requestUri: "/api/v2/clusters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterNameFilter: {
                        location: "querystring",
                        locationName: "clusterNameFilter"
                    },
                    ClusterTypeFilter: {
                        location: "querystring",
                        locationName: "clusterTypeFilter"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterInfoList: {
                        locationName: "clusterInfoList",
                        type: "list",
                        member: {
                            shape: "S34"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListConfigurationRevisions: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{arn}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Revisions: {
                        locationName: "revisions",
                        type: "list",
                        member: {
                            shape: "S1v"
                        }
                    }
                }
            }
        },
        ListConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Configurations: {
                        locationName: "configurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CreationTime: {
                                    shape: "S1u",
                                    locationName: "creationTime"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                KafkaVersions: {
                                    shape: "S3",
                                    locationName: "kafkaVersions"
                                },
                                LatestRevision: {
                                    shape: "S1v",
                                    locationName: "latestRevision"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                State: {
                                    locationName: "state"
                                }
                            },
                            required: [ "Description", "LatestRevision", "CreationTime", "KafkaVersions", "Arn", "Name", "State" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListKafkaVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/kafka-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KafkaVersions: {
                        locationName: "kafkaVersions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Version: {
                                    locationName: "version"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListNodes: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/nodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    NodeInfoList: {
                        locationName: "nodeInfoList",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AddedToClusterTime: {
                                    locationName: "addedToClusterTime"
                                },
                                BrokerNodeInfo: {
                                    locationName: "brokerNodeInfo",
                                    type: "structure",
                                    members: {
                                        AttachedENIId: {
                                            locationName: "attachedENIId"
                                        },
                                        BrokerId: {
                                            locationName: "brokerId",
                                            type: "double"
                                        },
                                        ClientSubnet: {
                                            locationName: "clientSubnet"
                                        },
                                        ClientVpcIpAddress: {
                                            locationName: "clientVpcIpAddress"
                                        },
                                        CurrentBrokerSoftwareInfo: {
                                            shape: "S2v",
                                            locationName: "currentBrokerSoftwareInfo"
                                        },
                                        Endpoints: {
                                            shape: "S3",
                                            locationName: "endpoints"
                                        }
                                    }
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                NodeARN: {
                                    locationName: "nodeARN"
                                },
                                NodeType: {
                                    locationName: "nodeType"
                                },
                                ZookeeperNodeInfo: {
                                    locationName: "zookeeperNodeInfo",
                                    type: "structure",
                                    members: {
                                        AttachedENIId: {
                                            locationName: "attachedENIId"
                                        },
                                        ClientVpcIpAddress: {
                                            locationName: "clientVpcIpAddress"
                                        },
                                        Endpoints: {
                                            shape: "S3",
                                            locationName: "endpoints"
                                        },
                                        ZookeeperId: {
                                            locationName: "zookeeperId",
                                            type: "double"
                                        },
                                        ZookeeperVersion: {
                                            locationName: "zookeeperVersion"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListReplicators: {
            http: {
                method: "GET",
                requestUri: "/replication/v1/replicators",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ReplicatorNameFilter: {
                        location: "querystring",
                        locationName: "replicatorNameFilter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Replicators: {
                        locationName: "replicators",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreationTime: {
                                    shape: "S1u",
                                    locationName: "creationTime"
                                },
                                CurrentVersion: {
                                    locationName: "currentVersion"
                                },
                                IsReplicatorReference: {
                                    locationName: "isReplicatorReference",
                                    type: "boolean"
                                },
                                KafkaClustersSummary: {
                                    locationName: "kafkaClustersSummary",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AmazonMskCluster: {
                                                shape: "S21",
                                                locationName: "amazonMskCluster"
                                            },
                                            KafkaClusterAlias: {
                                                locationName: "kafkaClusterAlias"
                                            }
                                        }
                                    }
                                },
                                ReplicationInfoSummaryList: {
                                    locationName: "replicationInfoSummaryList",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            SourceKafkaClusterAlias: {
                                                locationName: "sourceKafkaClusterAlias"
                                            },
                                            TargetKafkaClusterAlias: {
                                                locationName: "targetKafkaClusterAlias"
                                            }
                                        }
                                    }
                                },
                                ReplicatorArn: {
                                    locationName: "replicatorArn"
                                },
                                ReplicatorName: {
                                    locationName: "replicatorName"
                                },
                                ReplicatorResourceArn: {
                                    locationName: "replicatorResourceArn"
                                },
                                ReplicatorState: {
                                    locationName: "replicatorState"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListScramSecrets: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/scram-secrets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SecretArnList: {
                        shape: "S3",
                        locationName: "secretArnList"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    }
                }
            }
        },
        ListClientVpcConnections: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/client-vpc-connections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClientVpcConnections: {
                        locationName: "clientVpcConnections",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Authentication: {
                                    locationName: "authentication"
                                },
                                CreationTime: {
                                    shape: "S1u",
                                    locationName: "creationTime"
                                },
                                State: {
                                    locationName: "state"
                                },
                                VpcConnectionArn: {
                                    locationName: "vpcConnectionArn"
                                },
                                Owner: {
                                    locationName: "owner"
                                }
                            },
                            required: [ "VpcConnectionArn" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListVpcConnections: {
            http: {
                method: "GET",
                requestUri: "/v1/vpc-connections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcConnections: {
                        locationName: "vpcConnections",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VpcConnectionArn: {
                                    locationName: "vpcConnectionArn"
                                },
                                TargetClusterArn: {
                                    locationName: "targetClusterArn"
                                },
                                CreationTime: {
                                    shape: "S1u",
                                    locationName: "creationTime"
                                },
                                Authentication: {
                                    locationName: "authentication"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                },
                                State: {
                                    locationName: "state"
                                }
                            },
                            required: [ "VpcConnectionArn", "TargetClusterArn" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        RejectClientVpcConnection: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/client-vpc-connection",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    VpcConnectionArn: {
                        locationName: "vpcConnectionArn"
                    }
                },
                required: [ "VpcConnectionArn", "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutClusterPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    Policy: {
                        locationName: "policy"
                    }
                },
                required: [ "ClusterArn", "Policy" ]
            },
            output: {
                type: "structure",
                members: {
                    CurrentVersion: {
                        locationName: "currentVersion"
                    }
                }
            }
        },
        RebootBroker: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/reboot-broker",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerIds: {
                        shape: "S3",
                        locationName: "brokerIds"
                    },
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn", "BrokerIds" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S1e",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        shape: "S3",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateBrokerCount: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/nodes/count",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetNumberOfBrokerNodes: {
                        locationName: "targetNumberOfBrokerNodes",
                        type: "integer"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion", "TargetNumberOfBrokerNodes" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateBrokerType: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/nodes/type",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetInstanceType: {
                        locationName: "targetInstanceType"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion", "TargetInstanceType" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateBrokerStorage: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/nodes/storage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetBrokerEBSVolumeInfo: {
                        shape: "S3f",
                        locationName: "targetBrokerEBSVolumeInfo"
                    }
                },
                required: [ "ClusterArn", "TargetBrokerEBSVolumeInfo", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v1/configurations/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ServerProperties: {
                        locationName: "serverProperties",
                        type: "blob"
                    }
                },
                required: [ "Arn", "ServerProperties" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    LatestRevision: {
                        shape: "S1v",
                        locationName: "latestRevision"
                    }
                }
            }
        },
        UpdateConnectivity: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/connectivity",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    ConnectivityInfo: {
                        shape: "Sh",
                        locationName: "connectivityInfo"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    }
                },
                required: [ "ClusterArn", "ConnectivityInfo", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateClusterConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    ConfigurationInfo: {
                        shape: "Sw",
                        locationName: "configurationInfo"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion", "ConfigurationInfo" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateClusterKafkaVersion: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/version",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    ConfigurationInfo: {
                        shape: "Sw",
                        locationName: "configurationInfo"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetKafkaVersion: {
                        locationName: "targetKafkaVersion"
                    }
                },
                required: [ "ClusterArn", "TargetKafkaVersion", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateMonitoring: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/monitoring",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    EnhancedMonitoring: {
                        locationName: "enhancedMonitoring"
                    },
                    OpenMonitoring: {
                        shape: "S13",
                        locationName: "openMonitoring"
                    },
                    LoggingInfo: {
                        shape: "S18",
                        locationName: "loggingInfo"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateReplicationInfo: {
            http: {
                method: "PUT",
                requestUri: "/replication/v1/replicators/{replicatorArn}/replication-info",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConsumerGroupReplication: {
                        locationName: "consumerGroupReplication",
                        type: "structure",
                        members: {
                            ConsumerGroupsToExclude: {
                                shape: "S26",
                                locationName: "consumerGroupsToExclude"
                            },
                            ConsumerGroupsToReplicate: {
                                shape: "S26",
                                locationName: "consumerGroupsToReplicate"
                            },
                            DetectAndCopyNewConsumerGroups: {
                                locationName: "detectAndCopyNewConsumerGroups",
                                type: "boolean"
                            },
                            SynchroniseConsumerGroupOffsets: {
                                locationName: "synchroniseConsumerGroupOffsets",
                                type: "boolean"
                            }
                        },
                        required: [ "ConsumerGroupsToReplicate", "ConsumerGroupsToExclude", "SynchroniseConsumerGroupOffsets", "DetectAndCopyNewConsumerGroups" ]
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    ReplicatorArn: {
                        location: "uri",
                        locationName: "replicatorArn"
                    },
                    SourceKafkaClusterArn: {
                        locationName: "sourceKafkaClusterArn"
                    },
                    TargetKafkaClusterArn: {
                        locationName: "targetKafkaClusterArn"
                    },
                    TopicReplication: {
                        locationName: "topicReplication",
                        type: "structure",
                        members: {
                            CopyAccessControlListsForTopics: {
                                locationName: "copyAccessControlListsForTopics",
                                type: "boolean"
                            },
                            CopyTopicConfigurations: {
                                locationName: "copyTopicConfigurations",
                                type: "boolean"
                            },
                            DetectAndCopyNewTopics: {
                                locationName: "detectAndCopyNewTopics",
                                type: "boolean"
                            },
                            TopicsToExclude: {
                                shape: "S2a",
                                locationName: "topicsToExclude"
                            },
                            TopicsToReplicate: {
                                shape: "S2a",
                                locationName: "topicsToReplicate"
                            }
                        },
                        required: [ "TopicsToReplicate", "TopicsToExclude", "CopyTopicConfigurations", "DetectAndCopyNewTopics", "CopyAccessControlListsForTopics" ]
                    }
                },
                required: [ "ReplicatorArn", "SourceKafkaClusterArn", "CurrentVersion", "TargetKafkaClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ReplicatorArn: {
                        locationName: "replicatorArn"
                    },
                    ReplicatorState: {
                        locationName: "replicatorState"
                    }
                }
            }
        },
        UpdateSecurity: {
            http: {
                method: "PATCH",
                requestUri: "/v1/clusters/{clusterArn}/security",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientAuthentication: {
                        shape: "Sp",
                        locationName: "clientAuthentication"
                    },
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    EncryptionInfo: {
                        shape: "Sy",
                        locationName: "encryptionInfo"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateStorage: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/storage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    ProvisionedThroughput: {
                        shape: "Sd",
                        locationName: "provisionedThroughput"
                    },
                    StorageMode: {
                        locationName: "storageMode"
                    },
                    VolumeSizeGB: {
                        locationName: "volumeSizeGB",
                        type: "integer"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {
                        locationName: "errorCode"
                    },
                    ErrorMessage: {
                        locationName: "errorMessage"
                    },
                    SecretArn: {
                        locationName: "secretArn"
                    }
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                BrokerAZDistribution: {
                    locationName: "brokerAZDistribution"
                },
                ClientSubnets: {
                    shape: "S3",
                    locationName: "clientSubnets"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                SecurityGroups: {
                    shape: "S3",
                    locationName: "securityGroups"
                },
                StorageInfo: {
                    locationName: "storageInfo",
                    type: "structure",
                    members: {
                        EbsStorageInfo: {
                            locationName: "ebsStorageInfo",
                            type: "structure",
                            members: {
                                ProvisionedThroughput: {
                                    shape: "Sd",
                                    locationName: "provisionedThroughput"
                                },
                                VolumeSize: {
                                    locationName: "volumeSize",
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                ConnectivityInfo: {
                    shape: "Sh",
                    locationName: "connectivityInfo"
                },
                ZoneIds: {
                    shape: "S3",
                    locationName: "zoneIds"
                }
            },
            required: [ "ClientSubnets", "InstanceType" ]
        },
        Sd: {
            type: "structure",
            members: {
                Enabled: {
                    locationName: "enabled",
                    type: "boolean"
                },
                VolumeThroughput: {
                    locationName: "volumeThroughput",
                    type: "integer"
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                PublicAccess: {
                    locationName: "publicAccess",
                    type: "structure",
                    members: {
                        Type: {
                            locationName: "type"
                        }
                    }
                },
                VpcConnectivity: {
                    locationName: "vpcConnectivity",
                    type: "structure",
                    members: {
                        ClientAuthentication: {
                            locationName: "clientAuthentication",
                            type: "structure",
                            members: {
                                Sasl: {
                                    locationName: "sasl",
                                    type: "structure",
                                    members: {
                                        Scram: {
                                            locationName: "scram",
                                            type: "structure",
                                            members: {
                                                Enabled: {
                                                    locationName: "enabled",
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        Iam: {
                                            locationName: "iam",
                                            type: "structure",
                                            members: {
                                                Enabled: {
                                                    locationName: "enabled",
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                Tls: {
                                    locationName: "tls",
                                    type: "structure",
                                    members: {
                                        Enabled: {
                                            locationName: "enabled",
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                Sasl: {
                    locationName: "sasl",
                    type: "structure",
                    members: {
                        Scram: {
                            locationName: "scram",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                }
                            }
                        },
                        Iam: {
                            shape: "Ss",
                            locationName: "iam"
                        }
                    }
                },
                Tls: {
                    locationName: "tls",
                    type: "structure",
                    members: {
                        CertificateAuthorityArnList: {
                            shape: "S3",
                            locationName: "certificateAuthorityArnList"
                        },
                        Enabled: {
                            locationName: "enabled",
                            type: "boolean"
                        }
                    }
                },
                Unauthenticated: {
                    locationName: "unauthenticated",
                    type: "structure",
                    members: {
                        Enabled: {
                            locationName: "enabled",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                Enabled: {
                    locationName: "enabled",
                    type: "boolean"
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Revision: {
                    locationName: "revision",
                    type: "long"
                }
            },
            required: [ "Revision", "Arn" ]
        },
        Sy: {
            type: "structure",
            members: {
                EncryptionAtRest: {
                    locationName: "encryptionAtRest",
                    type: "structure",
                    members: {
                        DataVolumeKMSKeyId: {
                            locationName: "dataVolumeKMSKeyId"
                        }
                    },
                    required: [ "DataVolumeKMSKeyId" ]
                },
                EncryptionInTransit: {
                    locationName: "encryptionInTransit",
                    type: "structure",
                    members: {
                        ClientBroker: {
                            locationName: "clientBroker"
                        },
                        InCluster: {
                            locationName: "inCluster",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                Prometheus: {
                    locationName: "prometheus",
                    type: "structure",
                    members: {
                        JmxExporter: {
                            locationName: "jmxExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        },
                        NodeExporter: {
                            locationName: "nodeExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        }
                    }
                }
            },
            required: [ "Prometheus" ]
        },
        S18: {
            type: "structure",
            members: {
                BrokerLogs: {
                    locationName: "brokerLogs",
                    type: "structure",
                    members: {
                        CloudWatchLogs: {
                            locationName: "cloudWatchLogs",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                },
                                LogGroup: {
                                    locationName: "logGroup"
                                }
                            },
                            required: [ "Enabled" ]
                        },
                        Firehose: {
                            locationName: "firehose",
                            type: "structure",
                            members: {
                                DeliveryStream: {
                                    locationName: "deliveryStream"
                                },
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                }
                            },
                            required: [ "Enabled" ]
                        },
                        S3: {
                            locationName: "s3",
                            type: "structure",
                            members: {
                                Bucket: {
                                    locationName: "bucket"
                                },
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                },
                                Prefix: {
                                    locationName: "prefix"
                                }
                            },
                            required: [ "Enabled" ]
                        }
                    }
                }
            },
            required: [ "BrokerLogs" ]
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SubnetIds: {
                        shape: "S3",
                        locationName: "subnetIds"
                    },
                    SecurityGroupIds: {
                        shape: "S3",
                        locationName: "securityGroupIds"
                    }
                },
                required: [ "SubnetIds" ]
            }
        },
        S1n: {
            type: "structure",
            members: {
                Sasl: {
                    locationName: "sasl",
                    type: "structure",
                    members: {
                        Iam: {
                            shape: "Ss",
                            locationName: "iam"
                        }
                    }
                }
            }
        },
        S1u: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1v: {
            type: "structure",
            members: {
                CreationTime: {
                    shape: "S1u",
                    locationName: "creationTime"
                },
                Description: {
                    locationName: "description"
                },
                Revision: {
                    locationName: "revision",
                    type: "long"
                }
            },
            required: [ "Revision", "CreationTime" ]
        },
        S21: {
            type: "structure",
            members: {
                MskClusterArn: {
                    locationName: "mskClusterArn"
                }
            },
            required: [ "MskClusterArn" ]
        },
        S22: {
            type: "structure",
            members: {
                SecurityGroupIds: {
                    shape: "S3",
                    locationName: "securityGroupIds"
                },
                SubnetIds: {
                    shape: "S3",
                    locationName: "subnetIds"
                }
            },
            required: [ "SubnetIds" ]
        },
        S25: {
            type: "structure",
            members: {
                ConsumerGroupsToExclude: {
                    shape: "S26",
                    locationName: "consumerGroupsToExclude"
                },
                ConsumerGroupsToReplicate: {
                    shape: "S26",
                    locationName: "consumerGroupsToReplicate"
                },
                DetectAndCopyNewConsumerGroups: {
                    locationName: "detectAndCopyNewConsumerGroups",
                    type: "boolean"
                },
                SynchroniseConsumerGroupOffsets: {
                    locationName: "synchroniseConsumerGroupOffsets",
                    type: "boolean"
                }
            },
            required: [ "ConsumerGroupsToReplicate" ]
        },
        S26: {
            type: "list",
            member: {}
        },
        S29: {
            type: "structure",
            members: {
                CopyAccessControlListsForTopics: {
                    locationName: "copyAccessControlListsForTopics",
                    type: "boolean"
                },
                CopyTopicConfigurations: {
                    locationName: "copyTopicConfigurations",
                    type: "boolean"
                },
                DetectAndCopyNewTopics: {
                    locationName: "detectAndCopyNewTopics",
                    type: "boolean"
                },
                TopicsToExclude: {
                    shape: "S2a",
                    locationName: "topicsToExclude"
                },
                TopicsToReplicate: {
                    shape: "S2a",
                    locationName: "topicsToReplicate"
                }
            },
            required: [ "TopicsToReplicate" ]
        },
        S2a: {
            type: "list",
            member: {}
        },
        S2u: {
            type: "structure",
            members: {
                ActiveOperationArn: {
                    locationName: "activeOperationArn"
                },
                BrokerNodeGroupInfo: {
                    shape: "S8",
                    locationName: "brokerNodeGroupInfo"
                },
                ClientAuthentication: {
                    shape: "Sp",
                    locationName: "clientAuthentication"
                },
                ClusterArn: {
                    locationName: "clusterArn"
                },
                ClusterName: {
                    locationName: "clusterName"
                },
                CreationTime: {
                    shape: "S1u",
                    locationName: "creationTime"
                },
                CurrentBrokerSoftwareInfo: {
                    shape: "S2v",
                    locationName: "currentBrokerSoftwareInfo"
                },
                CurrentVersion: {
                    locationName: "currentVersion"
                },
                EncryptionInfo: {
                    shape: "Sy",
                    locationName: "encryptionInfo"
                },
                EnhancedMonitoring: {
                    locationName: "enhancedMonitoring"
                },
                OpenMonitoring: {
                    shape: "S2w",
                    locationName: "openMonitoring"
                },
                LoggingInfo: {
                    shape: "S18",
                    locationName: "loggingInfo"
                },
                NumberOfBrokerNodes: {
                    locationName: "numberOfBrokerNodes",
                    type: "integer"
                },
                State: {
                    locationName: "state"
                },
                StateInfo: {
                    shape: "S30",
                    locationName: "stateInfo"
                },
                Tags: {
                    shape: "S1e",
                    locationName: "tags"
                },
                ZookeeperConnectString: {
                    locationName: "zookeeperConnectString"
                },
                ZookeeperConnectStringTls: {
                    locationName: "zookeeperConnectStringTls"
                },
                StorageMode: {
                    locationName: "storageMode"
                },
                CustomerActionStatus: {
                    locationName: "customerActionStatus"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                ConfigurationArn: {
                    locationName: "configurationArn"
                },
                ConfigurationRevision: {
                    locationName: "configurationRevision",
                    type: "long"
                },
                KafkaVersion: {
                    locationName: "kafkaVersion"
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                Prometheus: {
                    locationName: "prometheus",
                    type: "structure",
                    members: {
                        JmxExporter: {
                            locationName: "jmxExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        },
                        NodeExporter: {
                            locationName: "nodeExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        }
                    }
                }
            },
            required: [ "Prometheus" ]
        },
        S30: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        S34: {
            type: "structure",
            members: {
                ActiveOperationArn: {
                    locationName: "activeOperationArn"
                },
                ClusterType: {
                    locationName: "clusterType"
                },
                ClusterArn: {
                    locationName: "clusterArn"
                },
                ClusterName: {
                    locationName: "clusterName"
                },
                CreationTime: {
                    shape: "S1u",
                    locationName: "creationTime"
                },
                CurrentVersion: {
                    locationName: "currentVersion"
                },
                State: {
                    locationName: "state"
                },
                StateInfo: {
                    shape: "S30",
                    locationName: "stateInfo"
                },
                Tags: {
                    shape: "S1e",
                    locationName: "tags"
                },
                Provisioned: {
                    locationName: "provisioned",
                    type: "structure",
                    members: {
                        BrokerNodeGroupInfo: {
                            shape: "S8",
                            locationName: "brokerNodeGroupInfo"
                        },
                        CurrentBrokerSoftwareInfo: {
                            shape: "S2v",
                            locationName: "currentBrokerSoftwareInfo"
                        },
                        ClientAuthentication: {
                            shape: "Sp",
                            locationName: "clientAuthentication"
                        },
                        EncryptionInfo: {
                            shape: "Sy",
                            locationName: "encryptionInfo"
                        },
                        EnhancedMonitoring: {
                            locationName: "enhancedMonitoring"
                        },
                        OpenMonitoring: {
                            shape: "S13",
                            locationName: "openMonitoring"
                        },
                        LoggingInfo: {
                            shape: "S18",
                            locationName: "loggingInfo"
                        },
                        NumberOfBrokerNodes: {
                            locationName: "numberOfBrokerNodes",
                            type: "integer"
                        },
                        ZookeeperConnectString: {
                            locationName: "zookeeperConnectString"
                        },
                        ZookeeperConnectStringTls: {
                            locationName: "zookeeperConnectStringTls"
                        },
                        StorageMode: {
                            locationName: "storageMode"
                        },
                        CustomerActionStatus: {
                            locationName: "customerActionStatus"
                        }
                    },
                    required: [ "BrokerNodeGroupInfo", "NumberOfBrokerNodes" ]
                },
                Serverless: {
                    locationName: "serverless",
                    type: "structure",
                    members: {
                        VpcConfigs: {
                            shape: "S1l",
                            locationName: "vpcConfigs"
                        },
                        ClientAuthentication: {
                            shape: "S1n",
                            locationName: "clientAuthentication"
                        }
                    },
                    required: [ "VpcConfigs" ]
                }
            }
        },
        S39: {
            type: "structure",
            members: {
                ClientRequestId: {
                    locationName: "clientRequestId"
                },
                ClusterArn: {
                    locationName: "clusterArn"
                },
                CreationTime: {
                    shape: "S1u",
                    locationName: "creationTime"
                },
                EndTime: {
                    shape: "S1u",
                    locationName: "endTime"
                },
                ErrorInfo: {
                    shape: "S3a",
                    locationName: "errorInfo"
                },
                OperationArn: {
                    locationName: "operationArn"
                },
                OperationState: {
                    locationName: "operationState"
                },
                OperationSteps: {
                    shape: "S3b",
                    locationName: "operationSteps"
                },
                OperationType: {
                    locationName: "operationType"
                },
                SourceClusterInfo: {
                    shape: "S3e",
                    locationName: "sourceClusterInfo"
                },
                TargetClusterInfo: {
                    shape: "S3e",
                    locationName: "targetClusterInfo"
                },
                VpcConnectionInfo: {
                    shape: "S3h",
                    locationName: "vpcConnectionInfo"
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                ErrorCode: {
                    locationName: "errorCode"
                },
                ErrorString: {
                    locationName: "errorString"
                }
            }
        },
        S3b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StepInfo: {
                        locationName: "stepInfo",
                        type: "structure",
                        members: {
                            StepStatus: {
                                locationName: "stepStatus"
                            }
                        }
                    },
                    StepName: {
                        locationName: "stepName"
                    }
                }
            }
        },
        S3e: {
            type: "structure",
            members: {
                BrokerEBSVolumeInfo: {
                    shape: "S3f",
                    locationName: "brokerEBSVolumeInfo"
                },
                ConfigurationInfo: {
                    shape: "Sw",
                    locationName: "configurationInfo"
                },
                NumberOfBrokerNodes: {
                    locationName: "numberOfBrokerNodes",
                    type: "integer"
                },
                EnhancedMonitoring: {
                    locationName: "enhancedMonitoring"
                },
                OpenMonitoring: {
                    shape: "S2w",
                    locationName: "openMonitoring"
                },
                KafkaVersion: {
                    locationName: "kafkaVersion"
                },
                LoggingInfo: {
                    shape: "S18",
                    locationName: "loggingInfo"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                ClientAuthentication: {
                    shape: "Sp",
                    locationName: "clientAuthentication"
                },
                EncryptionInfo: {
                    shape: "Sy",
                    locationName: "encryptionInfo"
                },
                ConnectivityInfo: {
                    shape: "Sh",
                    locationName: "connectivityInfo"
                },
                StorageMode: {
                    locationName: "storageMode"
                }
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    KafkaBrokerNodeId: {
                        locationName: "kafkaBrokerNodeId"
                    },
                    ProvisionedThroughput: {
                        shape: "Sd",
                        locationName: "provisionedThroughput"
                    },
                    VolumeSizeGB: {
                        locationName: "volumeSizeGB",
                        type: "integer"
                    }
                },
                required: [ "KafkaBrokerNodeId" ]
            }
        },
        S3h: {
            type: "structure",
            members: {
                VpcConnectionArn: {
                    locationName: "vpcConnectionArn"
                },
                Owner: {
                    locationName: "owner"
                },
                UserIdentity: {
                    shape: "S3i",
                    locationName: "userIdentity"
                },
                CreationTime: {
                    shape: "S1u",
                    locationName: "creationTime"
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                Type: {
                    locationName: "type"
                },
                PrincipalId: {
                    locationName: "principalId"
                }
            }
        }
    },
    paginators: {
        ListClusters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterInfoList"
        },
        ListClustersV2: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterInfoList"
        },
        ListConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Configurations"
        },
        ListKafkaVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "KafkaVersions"
        },
        ListNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NodeInfoList"
        },
        ListClusterOperations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterOperationInfoList"
        },
        ListClusterOperationsV2: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterOperationInfoList"
        },
        ListConfigurationRevisions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Revisions"
        },
        ListReplicators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Replicators"
        },
        ListScramSecrets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SecretArnList"
        },
        ListVpcConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "VpcConnections"
        },
        ListClientVpcConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClientVpcConnections"
        }
    }
};

AWS.apiLoader.services["apigatewaymanagementapi"] = {};

AWS.ApiGatewayManagementApi = AWS.Service.defineService("apigatewaymanagementapi", [ "2018-11-29" ]);

AWS.apiLoader.services["apigatewaymanagementapi"]["2018-11-29"] = {
    metadata: {
        apiVersion: "2018-11-29",
        endpointPrefix: "execute-api",
        signingName: "execute-api",
        serviceFullName: "AmazonApiGatewayManagementApi",
        serviceId: "ApiGatewayManagementApi",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "apigatewaymanagementapi-2018-11-29",
        signatureVersion: "v4"
    },
    operations: {
        DeleteConnection: {
            http: {
                method: "DELETE",
                requestUri: "/@connections/{connectionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                },
                required: [ "ConnectionId" ]
            }
        },
        GetConnection: {
            http: {
                method: "GET",
                requestUri: "/@connections/{connectionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                },
                required: [ "ConnectionId" ]
            },
            output: {
                type: "structure",
                members: {
                    ConnectedAt: {
                        shape: "S5",
                        locationName: "connectedAt"
                    },
                    Identity: {
                        locationName: "identity",
                        type: "structure",
                        members: {
                            SourceIp: {
                                locationName: "sourceIp"
                            },
                            UserAgent: {
                                locationName: "userAgent"
                            }
                        },
                        required: [ "SourceIp", "UserAgent" ]
                    },
                    LastActiveAt: {
                        shape: "S5",
                        locationName: "lastActiveAt"
                    }
                }
            }
        },
        PostToConnection: {
            http: {
                requestUri: "/@connections/{connectionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Data: {
                        type: "blob"
                    },
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                },
                required: [ "ConnectionId", "Data" ],
                payload: "Data"
            }
        }
    },
    shapes: {
        S5: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {}
};

AWS.apiLoader.services["apigatewayv2"] = {};

AWS.ApiGatewayV2 = AWS.Service.defineService("apigatewayv2", [ "2018-11-29" ]);

AWS.apiLoader.services["apigatewayv2"]["2018-11-29"] = {
    metadata: {
        apiVersion: "2018-11-29",
        endpointPrefix: "apigateway",
        signingName: "apigateway",
        serviceFullName: "AmazonApiGatewayV2",
        serviceId: "ApiGatewayV2",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "apigatewayv2-2018-11-29",
        signatureVersion: "v4"
    },
    operations: {
        CreateApi: {
            http: {
                requestUri: "/v2/apis",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Target: {
                        locationName: "target"
                    },
                    Version: {
                        locationName: "version"
                    }
                },
                required: [ "ProtocolType", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        CreateApiMapping: {
            http: {
                requestUri: "/v2/domainnames/{domainName}/apimappings",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                },
                required: [ "DomainName", "Stage", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                }
            }
        },
        CreateAuthorizer: {
            http: {
                requestUri: "/v2/apis/{apiId}/authorizers",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                },
                required: [ "ApiId", "AuthorizerType", "IdentitySource", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/v2/apis/{apiId}/deployments",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    StageName: {
                        locationName: "stageName"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AutoDeployed: {
                        locationName: "autoDeployed",
                        type: "boolean"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    DeploymentStatus: {
                        locationName: "deploymentStatus"
                    },
                    DeploymentStatusMessage: {
                        locationName: "deploymentStatusMessage"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        CreateDomainName: {
            http: {
                requestUri: "/v2/domainnames",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S15",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiMappingSelectionExpression: {
                        locationName: "apiMappingSelectionExpression"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S17",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateIntegration: {
            http: {
                requestUri: "/v2/apis/{apiId}/integrations",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1j",
                        locationName: "tlsConfig"
                    }
                },
                required: [ "ApiId", "IntegrationType" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationResponseSelectionExpression: {
                        locationName: "integrationResponseSelectionExpression"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1l",
                        locationName: "tlsConfig"
                    }
                }
            }
        },
        CreateIntegrationResponse: {
            http: {
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                },
                required: [ "ApiId", "IntegrationId", "IntegrationResponseKey" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationResponseId: {
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                }
            }
        },
        CreateModel: {
            http: {
                requestUri: "/v2/apis/{apiId}/models",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                },
                required: [ "ApiId", "Schema", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                }
            }
        },
        CreateRoute: {
            http: {
                requestUri: "/v2/apis/{apiId}/routes",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                },
                required: [ "ApiId", "RouteKey" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                }
            }
        },
        CreateRouteResponse: {
            http: {
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                },
                required: [ "ApiId", "RouteId", "RouteResponseKey" ]
            },
            output: {
                type: "structure",
                members: {
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteResponseId: {
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                }
            }
        },
        CreateStage: {
            http: {
                requestUri: "/v2/apis/{apiId}/stages",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "ApiId", "StageName" ]
            },
            output: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    LastDeploymentStatusMessage: {
                        locationName: "lastDeploymentStatusMessage"
                    },
                    LastUpdatedDate: {
                        shape: "Sl",
                        locationName: "lastUpdatedDate"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateVpcLink: {
            http: {
                requestUri: "/v2/vpclinks",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "SubnetIds", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    VpcLinkId: {
                        locationName: "vpcLinkId"
                    },
                    VpcLinkStatus: {
                        locationName: "vpcLinkStatus"
                    },
                    VpcLinkStatusMessage: {
                        locationName: "vpcLinkStatusMessage"
                    },
                    VpcLinkVersion: {
                        locationName: "vpcLinkVersion"
                    }
                }
            }
        },
        DeleteAccessLogSettings: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}/accesslogsettings",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            }
        },
        DeleteApi: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                },
                required: [ "ApiId" ]
            }
        },
        DeleteApiMapping: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domainnames/{domainName}/apimappings/{apiMappingId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiMappingId: {
                        location: "uri",
                        locationName: "apiMappingId"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "ApiMappingId", "DomainName" ]
            }
        },
        DeleteAuthorizer: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/authorizers/{authorizerId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerId: {
                        location: "uri",
                        locationName: "authorizerId"
                    }
                },
                required: [ "AuthorizerId", "ApiId" ]
            }
        },
        DeleteCorsConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/cors",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                },
                required: [ "ApiId" ]
            }
        },
        DeleteDeployment: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/deployments/{deploymentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    DeploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                },
                required: [ "ApiId", "DeploymentId" ]
            }
        },
        DeleteDomainName: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domainnames/{domainName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "DomainName" ]
            }
        },
        DeleteIntegration: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    }
                },
                required: [ "ApiId", "IntegrationId" ]
            }
        },
        DeleteIntegrationResponse: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseId: {
                        location: "uri",
                        locationName: "integrationResponseId"
                    }
                },
                required: [ "ApiId", "IntegrationResponseId", "IntegrationId" ]
            }
        },
        DeleteModel: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/models/{modelId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            }
        },
        DeleteRoute: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "ApiId", "RouteId" ]
            }
        },
        DeleteRouteRequestParameter: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/requestparameters/{requestParameterKey}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RequestParameterKey: {
                        location: "uri",
                        locationName: "requestParameterKey"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "RequestParameterKey", "ApiId", "RouteId" ]
            }
        },
        DeleteRouteResponse: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseId: {
                        location: "uri",
                        locationName: "routeResponseId"
                    }
                },
                required: [ "RouteResponseId", "ApiId", "RouteId" ]
            }
        },
        DeleteRouteSettings: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteKey: {
                        location: "uri",
                        locationName: "routeKey"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "RouteKey", "ApiId" ]
            }
        },
        DeleteStage: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            }
        },
        DeleteVpcLink: {
            http: {
                method: "DELETE",
                requestUri: "/v2/vpclinks/{vpcLinkId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    VpcLinkId: {
                        location: "uri",
                        locationName: "vpcLinkId"
                    }
                },
                required: [ "VpcLinkId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ExportApi: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/exports/{specification}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ExportVersion: {
                        location: "querystring",
                        locationName: "exportVersion"
                    },
                    IncludeExtensions: {
                        location: "querystring",
                        locationName: "includeExtensions",
                        type: "boolean"
                    },
                    OutputType: {
                        location: "querystring",
                        locationName: "outputType"
                    },
                    Specification: {
                        location: "uri",
                        locationName: "specification"
                    },
                    StageName: {
                        location: "querystring",
                        locationName: "stageName"
                    }
                },
                required: [ "Specification", "OutputType", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    body: {
                        type: "blob"
                    }
                },
                payload: "body"
            }
        },
        ResetAuthorizersCache: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}/cache/authorizers",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            }
        },
        GetApi: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        GetApiMapping: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames/{domainName}/apimappings/{apiMappingId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiMappingId: {
                        location: "uri",
                        locationName: "apiMappingId"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "ApiMappingId", "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                }
            }
        },
        GetApiMappings: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames/{domainName}/apimappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiId: {
                                    locationName: "apiId"
                                },
                                ApiMappingId: {
                                    locationName: "apiMappingId"
                                },
                                ApiMappingKey: {
                                    locationName: "apiMappingKey"
                                },
                                Stage: {
                                    locationName: "stage"
                                }
                            },
                            required: [ "Stage", "ApiId" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetApis: {
            http: {
                method: "GET",
                requestUri: "/v2/apis",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiEndpoint: {
                                    locationName: "apiEndpoint"
                                },
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                ApiId: {
                                    locationName: "apiId"
                                },
                                ApiKeySelectionExpression: {
                                    locationName: "apiKeySelectionExpression"
                                },
                                CorsConfiguration: {
                                    shape: "S3",
                                    locationName: "corsConfiguration"
                                },
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                DisableSchemaValidation: {
                                    locationName: "disableSchemaValidation",
                                    type: "boolean"
                                },
                                DisableExecuteApiEndpoint: {
                                    locationName: "disableExecuteApiEndpoint",
                                    type: "boolean"
                                },
                                ImportInfo: {
                                    shape: "Sm",
                                    locationName: "importInfo"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                ProtocolType: {
                                    locationName: "protocolType"
                                },
                                RouteSelectionExpression: {
                                    locationName: "routeSelectionExpression"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                },
                                Version: {
                                    locationName: "version"
                                },
                                Warnings: {
                                    shape: "Sm",
                                    locationName: "warnings"
                                }
                            },
                            required: [ "RouteSelectionExpression", "Name", "ProtocolType" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetAuthorizer: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/authorizers/{authorizerId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerId: {
                        location: "uri",
                        locationName: "authorizerId"
                    }
                },
                required: [ "AuthorizerId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        GetAuthorizers: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/authorizers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AuthorizerCredentialsArn: {
                                    locationName: "authorizerCredentialsArn"
                                },
                                AuthorizerId: {
                                    locationName: "authorizerId"
                                },
                                AuthorizerPayloadFormatVersion: {
                                    locationName: "authorizerPayloadFormatVersion"
                                },
                                AuthorizerResultTtlInSeconds: {
                                    locationName: "authorizerResultTtlInSeconds",
                                    type: "integer"
                                },
                                AuthorizerType: {
                                    locationName: "authorizerType"
                                },
                                AuthorizerUri: {
                                    locationName: "authorizerUri"
                                },
                                EnableSimpleResponses: {
                                    locationName: "enableSimpleResponses",
                                    type: "boolean"
                                },
                                IdentitySource: {
                                    shape: "Ss",
                                    locationName: "identitySource"
                                },
                                IdentityValidationExpression: {
                                    locationName: "identityValidationExpression"
                                },
                                JwtConfiguration: {
                                    shape: "St",
                                    locationName: "jwtConfiguration"
                                },
                                Name: {
                                    locationName: "name"
                                }
                            },
                            required: [ "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/deployments/{deploymentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    DeploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                },
                required: [ "ApiId", "DeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    AutoDeployed: {
                        locationName: "autoDeployed",
                        type: "boolean"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    DeploymentStatus: {
                        locationName: "deploymentStatus"
                    },
                    DeploymentStatusMessage: {
                        locationName: "deploymentStatusMessage"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        GetDeployments: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoDeployed: {
                                    locationName: "autoDeployed",
                                    type: "boolean"
                                },
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                DeploymentId: {
                                    locationName: "deploymentId"
                                },
                                DeploymentStatus: {
                                    locationName: "deploymentStatus"
                                },
                                DeploymentStatusMessage: {
                                    locationName: "deploymentStatusMessage"
                                },
                                Description: {
                                    locationName: "description"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetDomainName: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames/{domainName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiMappingSelectionExpression: {
                        locationName: "apiMappingSelectionExpression"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S17",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        GetDomainNames: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiMappingSelectionExpression: {
                                    locationName: "apiMappingSelectionExpression"
                                },
                                DomainName: {
                                    locationName: "domainName"
                                },
                                DomainNameConfigurations: {
                                    shape: "S10",
                                    locationName: "domainNameConfigurations"
                                },
                                MutualTlsAuthentication: {
                                    shape: "S17",
                                    locationName: "mutualTlsAuthentication"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                }
                            },
                            required: [ "DomainName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIntegration: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    }
                },
                required: [ "ApiId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationResponseSelectionExpression: {
                        locationName: "integrationResponseSelectionExpression"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1l",
                        locationName: "tlsConfig"
                    }
                }
            }
        },
        GetIntegrationResponse: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseId: {
                        location: "uri",
                        locationName: "integrationResponseId"
                    }
                },
                required: [ "ApiId", "IntegrationResponseId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationResponseId: {
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                }
            }
        },
        GetIntegrationResponses: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "IntegrationId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContentHandlingStrategy: {
                                    locationName: "contentHandlingStrategy"
                                },
                                IntegrationResponseId: {
                                    locationName: "integrationResponseId"
                                },
                                IntegrationResponseKey: {
                                    locationName: "integrationResponseKey"
                                },
                                ResponseParameters: {
                                    shape: "S1e",
                                    locationName: "responseParameters"
                                },
                                ResponseTemplates: {
                                    shape: "S1f",
                                    locationName: "responseTemplates"
                                },
                                TemplateSelectionExpression: {
                                    locationName: "templateSelectionExpression"
                                }
                            },
                            required: [ "IntegrationResponseKey" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIntegrations: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                ConnectionId: {
                                    locationName: "connectionId"
                                },
                                ConnectionType: {
                                    locationName: "connectionType"
                                },
                                ContentHandlingStrategy: {
                                    locationName: "contentHandlingStrategy"
                                },
                                CredentialsArn: {
                                    locationName: "credentialsArn"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                IntegrationId: {
                                    locationName: "integrationId"
                                },
                                IntegrationMethod: {
                                    locationName: "integrationMethod"
                                },
                                IntegrationResponseSelectionExpression: {
                                    locationName: "integrationResponseSelectionExpression"
                                },
                                IntegrationSubtype: {
                                    locationName: "integrationSubtype"
                                },
                                IntegrationType: {
                                    locationName: "integrationType"
                                },
                                IntegrationUri: {
                                    locationName: "integrationUri"
                                },
                                PassthroughBehavior: {
                                    locationName: "passthroughBehavior"
                                },
                                PayloadFormatVersion: {
                                    locationName: "payloadFormatVersion"
                                },
                                RequestParameters: {
                                    shape: "S1e",
                                    locationName: "requestParameters"
                                },
                                RequestTemplates: {
                                    shape: "S1f",
                                    locationName: "requestTemplates"
                                },
                                ResponseParameters: {
                                    shape: "S1h",
                                    locationName: "responseParameters"
                                },
                                TemplateSelectionExpression: {
                                    locationName: "templateSelectionExpression"
                                },
                                TimeoutInMillis: {
                                    locationName: "timeoutInMillis",
                                    type: "integer"
                                },
                                TlsConfig: {
                                    shape: "S1l",
                                    locationName: "tlsConfig"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetModel: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/models/{modelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                }
            }
        },
        GetModelTemplate: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/models/{modelId}/template",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Value: {
                        locationName: "value"
                    }
                }
            }
        },
        GetModels: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/models",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContentType: {
                                    locationName: "contentType"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                ModelId: {
                                    locationName: "modelId"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                Schema: {
                                    locationName: "schema"
                                }
                            },
                            required: [ "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetRoute: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                }
            }
        },
        GetRouteResponse: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseId: {
                        location: "uri",
                        locationName: "routeResponseId"
                    }
                },
                required: [ "RouteResponseId", "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteResponseId: {
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                }
            }
        },
        GetRouteResponses: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "RouteId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelSelectionExpression: {
                                    locationName: "modelSelectionExpression"
                                },
                                ResponseModels: {
                                    shape: "S1u",
                                    locationName: "responseModels"
                                },
                                ResponseParameters: {
                                    shape: "S1v",
                                    locationName: "responseParameters"
                                },
                                RouteResponseId: {
                                    locationName: "routeResponseId"
                                },
                                RouteResponseKey: {
                                    locationName: "routeResponseKey"
                                }
                            },
                            required: [ "RouteResponseKey" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetRoutes: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                ApiKeyRequired: {
                                    locationName: "apiKeyRequired",
                                    type: "boolean"
                                },
                                AuthorizationScopes: {
                                    shape: "S1s",
                                    locationName: "authorizationScopes"
                                },
                                AuthorizationType: {
                                    locationName: "authorizationType"
                                },
                                AuthorizerId: {
                                    locationName: "authorizerId"
                                },
                                ModelSelectionExpression: {
                                    locationName: "modelSelectionExpression"
                                },
                                OperationName: {
                                    locationName: "operationName"
                                },
                                RequestModels: {
                                    shape: "S1u",
                                    locationName: "requestModels"
                                },
                                RequestParameters: {
                                    shape: "S1v",
                                    locationName: "requestParameters"
                                },
                                RouteId: {
                                    locationName: "routeId"
                                },
                                RouteKey: {
                                    locationName: "routeKey"
                                },
                                RouteResponseSelectionExpression: {
                                    locationName: "routeResponseSelectionExpression"
                                },
                                Target: {
                                    locationName: "target"
                                }
                            },
                            required: [ "RouteKey" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetStage: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    LastDeploymentStatusMessage: {
                        locationName: "lastDeploymentStatusMessage"
                    },
                    LastUpdatedDate: {
                        shape: "Sl",
                        locationName: "lastUpdatedDate"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        GetStages: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/stages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccessLogSettings: {
                                    shape: "S21",
                                    locationName: "accessLogSettings"
                                },
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                AutoDeploy: {
                                    locationName: "autoDeploy",
                                    type: "boolean"
                                },
                                ClientCertificateId: {
                                    locationName: "clientCertificateId"
                                },
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                DefaultRouteSettings: {
                                    shape: "S22",
                                    locationName: "defaultRouteSettings"
                                },
                                DeploymentId: {
                                    locationName: "deploymentId"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                LastDeploymentStatusMessage: {
                                    locationName: "lastDeploymentStatusMessage"
                                },
                                LastUpdatedDate: {
                                    shape: "Sl",
                                    locationName: "lastUpdatedDate"
                                },
                                RouteSettings: {
                                    shape: "S26",
                                    locationName: "routeSettings"
                                },
                                StageName: {
                                    locationName: "stageName"
                                },
                                StageVariables: {
                                    shape: "S27",
                                    locationName: "stageVariables"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                }
                            },
                            required: [ "StageName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTags: {
            http: {
                method: "GET",
                requestUri: "/v2/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        GetVpcLink: {
            http: {
                method: "GET",
                requestUri: "/v2/vpclinks/{vpcLinkId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    VpcLinkId: {
                        location: "uri",
                        locationName: "vpcLinkId"
                    }
                },
                required: [ "VpcLinkId" ]
            },
            output: {
                type: "structure",
                members: {
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    VpcLinkId: {
                        locationName: "vpcLinkId"
                    },
                    VpcLinkStatus: {
                        locationName: "vpcLinkStatus"
                    },
                    VpcLinkStatusMessage: {
                        locationName: "vpcLinkStatusMessage"
                    },
                    VpcLinkVersion: {
                        locationName: "vpcLinkVersion"
                    }
                }
            }
        },
        GetVpcLinks: {
            http: {
                method: "GET",
                requestUri: "/v2/vpclinks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                SecurityGroupIds: {
                                    shape: "S2b",
                                    locationName: "securityGroupIds"
                                },
                                SubnetIds: {
                                    shape: "S2c",
                                    locationName: "subnetIds"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                },
                                VpcLinkId: {
                                    locationName: "vpcLinkId"
                                },
                                VpcLinkStatus: {
                                    locationName: "vpcLinkStatus"
                                },
                                VpcLinkStatusMessage: {
                                    locationName: "vpcLinkStatusMessage"
                                },
                                VpcLinkVersion: {
                                    locationName: "vpcLinkVersion"
                                }
                            },
                            required: [ "VpcLinkId", "SecurityGroupIds", "SubnetIds", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ImportApi: {
            http: {
                method: "PUT",
                requestUri: "/v2/apis",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Basepath: {
                        location: "querystring",
                        locationName: "basepath"
                    },
                    Body: {
                        locationName: "body"
                    },
                    FailOnWarnings: {
                        location: "querystring",
                        locationName: "failOnWarnings",
                        type: "boolean"
                    }
                },
                required: [ "Body" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        ReimportApi: {
            http: {
                method: "PUT",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    Basepath: {
                        location: "querystring",
                        locationName: "basepath"
                    },
                    Body: {
                        locationName: "body"
                    },
                    FailOnWarnings: {
                        location: "querystring",
                        locationName: "failOnWarnings",
                        type: "boolean"
                    }
                },
                required: [ "ApiId", "Body" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v2/tags/{resource-arn}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v2/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "Sm",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "ResourceArn", "TagKeys" ]
            }
        },
        UpdateApi: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    },
                    Version: {
                        locationName: "version"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        UpdateApiMapping: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domainnames/{domainName}/apimappings/{apiMappingId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        location: "uri",
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                },
                required: [ "ApiMappingId", "ApiId", "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                }
            }
        },
        UpdateAuthorizer: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/authorizers/{authorizerId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        location: "uri",
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                },
                required: [ "AuthorizerId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        UpdateDeployment: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/deployments/{deploymentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    DeploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    }
                },
                required: [ "ApiId", "DeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    AutoDeployed: {
                        locationName: "autoDeployed",
                        type: "boolean"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    DeploymentStatus: {
                        locationName: "deploymentStatus"
                    },
                    DeploymentStatusMessage: {
                        locationName: "deploymentStatusMessage"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        UpdateDomainName: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domainnames/{domainName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S15",
                        locationName: "mutualTlsAuthentication"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiMappingSelectionExpression: {
                        locationName: "apiMappingSelectionExpression"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S17",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateIntegration: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1j",
                        locationName: "tlsConfig"
                    }
                },
                required: [ "ApiId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationResponseSelectionExpression: {
                        locationName: "integrationResponseSelectionExpression"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1l",
                        locationName: "tlsConfig"
                    }
                }
            }
        },
        UpdateIntegrationResponse: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseId: {
                        location: "uri",
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                },
                required: [ "ApiId", "IntegrationResponseId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationResponseId: {
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                }
            }
        },
        UpdateModel: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/models/{modelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                }
            }
        },
        UpdateRoute: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                },
                required: [ "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                }
            }
        },
        UpdateRouteResponse: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseId: {
                        location: "uri",
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                },
                required: [ "RouteResponseId", "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteResponseId: {
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                }
            }
        },
        UpdateStage: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    }
                },
                required: [ "StageName", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    LastDeploymentStatusMessage: {
                        locationName: "lastDeploymentStatusMessage"
                    },
                    LastUpdatedDate: {
                        shape: "Sl",
                        locationName: "lastUpdatedDate"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateVpcLink: {
            http: {
                method: "PATCH",
                requestUri: "/v2/vpclinks/{vpcLinkId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    VpcLinkId: {
                        location: "uri",
                        locationName: "vpcLinkId"
                    }
                },
                required: [ "VpcLinkId" ]
            },
            output: {
                type: "structure",
                members: {
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    VpcLinkId: {
                        locationName: "vpcLinkId"
                    },
                    VpcLinkStatus: {
                        locationName: "vpcLinkStatus"
                    },
                    VpcLinkStatusMessage: {
                        locationName: "vpcLinkStatusMessage"
                    },
                    VpcLinkVersion: {
                        locationName: "vpcLinkVersion"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                AllowCredentials: {
                    locationName: "allowCredentials",
                    type: "boolean"
                },
                AllowHeaders: {
                    shape: "S5",
                    locationName: "allowHeaders"
                },
                AllowMethods: {
                    locationName: "allowMethods",
                    type: "list",
                    member: {}
                },
                AllowOrigins: {
                    locationName: "allowOrigins",
                    type: "list",
                    member: {}
                },
                ExposeHeaders: {
                    shape: "S5",
                    locationName: "exposeHeaders"
                },
                MaxAge: {
                    locationName: "maxAge",
                    type: "integer"
                }
            }
        },
        S5: {
            type: "list",
            member: {}
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sm: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "list",
            member: {}
        },
        St: {
            type: "structure",
            members: {
                Audience: {
                    shape: "Sm",
                    locationName: "audience"
                },
                Issuer: {
                    locationName: "issuer"
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ApiGatewayDomainName: {
                        locationName: "apiGatewayDomainName"
                    },
                    CertificateArn: {
                        locationName: "certificateArn"
                    },
                    CertificateName: {
                        locationName: "certificateName"
                    },
                    CertificateUploadDate: {
                        shape: "Sl",
                        locationName: "certificateUploadDate"
                    },
                    DomainNameStatus: {
                        locationName: "domainNameStatus"
                    },
                    DomainNameStatusMessage: {
                        locationName: "domainNameStatusMessage"
                    },
                    EndpointType: {
                        locationName: "endpointType"
                    },
                    HostedZoneId: {
                        locationName: "hostedZoneId"
                    },
                    SecurityPolicy: {
                        locationName: "securityPolicy"
                    },
                    OwnershipVerificationCertificateArn: {
                        locationName: "ownershipVerificationCertificateArn"
                    }
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                TruststoreUri: {
                    locationName: "truststoreUri"
                },
                TruststoreVersion: {
                    locationName: "truststoreVersion"
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                TruststoreUri: {
                    locationName: "truststoreUri"
                },
                TruststoreVersion: {
                    locationName: "truststoreVersion"
                },
                TruststoreWarnings: {
                    shape: "Sm",
                    locationName: "truststoreWarnings"
                }
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S1f: {
            type: "map",
            key: {},
            value: {}
        },
        S1h: {
            type: "map",
            key: {},
            value: {
                shape: "S1e"
            }
        },
        S1j: {
            type: "structure",
            members: {
                ServerNameToVerify: {
                    locationName: "serverNameToVerify"
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                ServerNameToVerify: {
                    locationName: "serverNameToVerify"
                }
            }
        },
        S1s: {
            type: "list",
            member: {}
        },
        S1u: {
            type: "map",
            key: {},
            value: {}
        },
        S1v: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Required: {
                        locationName: "required",
                        type: "boolean"
                    }
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                DestinationArn: {
                    locationName: "destinationArn"
                },
                Format: {
                    locationName: "format"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                DataTraceEnabled: {
                    locationName: "dataTraceEnabled",
                    type: "boolean"
                },
                DetailedMetricsEnabled: {
                    locationName: "detailedMetricsEnabled",
                    type: "boolean"
                },
                LoggingLevel: {
                    locationName: "loggingLevel"
                },
                ThrottlingBurstLimit: {
                    locationName: "throttlingBurstLimit",
                    type: "integer"
                },
                ThrottlingRateLimit: {
                    locationName: "throttlingRateLimit",
                    type: "double"
                }
            }
        },
        S26: {
            type: "map",
            key: {},
            value: {
                shape: "S22"
            }
        },
        S27: {
            type: "map",
            key: {},
            value: {}
        },
        S2b: {
            type: "list",
            member: {}
        },
        S2c: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["docdb"] = {};

AWS.DocDB = AWS.Service.defineService("docdb", [ "2014-10-31" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    100: [ function(require, module, exports) {
        var AWS = require("../core");
        var rdsutil = require("./rdsutil");
        var crossRegionOperations = [ "createDBCluster", "copyDBClusterSnapshot" ];
        AWS.util.update(AWS.DocDB.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (crossRegionOperations.indexOf(request.operation) !== -1 && this.config.params && this.config.params.SourceRegion && request.params && !request.params.SourceRegion) {
                    request.params.SourceRegion = this.config.params.SourceRegion;
                }
                rdsutil.setupRequestListeners(this, request, crossRegionOperations);
            }
        });
    }, {
        "../core": 44,
        "./rdsutil": 113
    } ]
}, {}, [ 100 ]);

AWS.apiLoader.services["docdb"]["2014-10-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-10-31",
        endpointPrefix: "rds",
        protocol: "query",
        serviceAbbreviation: "Amazon DocDB",
        serviceFullName: "Amazon DocumentDB with MongoDB compatibility",
        serviceId: "DocDB",
        signatureVersion: "v4",
        signingName: "rds",
        uid: "docdb-2014-10-31",
        xmlNamespace: "http://rds.amazonaws.com/doc/2014-10-31/"
    },
    operations: {
        AddSourceIdentifierToSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "AddSourceIdentifierToSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        ApplyPendingMaintenanceAction: {
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ApplyAction", "OptInType" ],
                members: {
                    ResourceIdentifier: {},
                    ApplyAction: {},
                    OptInType: {}
                }
            },
            output: {
                resultWrapper: "ApplyPendingMaintenanceActionResult",
                type: "structure",
                members: {
                    ResourcePendingMaintenanceActions: {
                        shape: "Sd"
                    }
                }
            }
        },
        CopyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupDescription" ],
                members: {
                    SourceDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupDescription: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sj"
                    }
                }
            }
        },
        CopyDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterSnapshotIdentifier", "TargetDBClusterSnapshotIdentifier" ],
                members: {
                    SourceDBClusterSnapshotIdentifier: {},
                    TargetDBClusterSnapshotIdentifier: {},
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    CopyTags: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "So"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    DBClusterIdentifier: {},
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    DBSubnetGroupName: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    MasterUsername: {},
                    MasterUserPassword: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    Tags: {
                        shape: "S9"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    EnableCloudwatchLogsExports: {
                        shape: "St"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    GlobalClusterIdentifier: {},
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "CreateDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        CreateDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBClusterParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sj"
                    }
                }
            }
        },
        CreateDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "DBClusterIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    DBClusterIdentifier: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "DBInstanceClass", "Engine", "DBClusterIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    DBInstanceClass: {},
                    Engine: {},
                    AvailabilityZone: {},
                    PreferredMaintenanceWindow: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    DBClusterIdentifier: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    PromotionTier: {
                        type: "integer"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    CACertificateIdentifier: {}
                }
            },
            output: {
                resultWrapper: "CreateDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        CreateDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "DBSubnetGroupDescription", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S1m"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1c"
                    }
                }
            }
        },
        CreateEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SnsTopicArn" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S6"
                    },
                    SourceIds: {
                        shape: "S5"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    SourceDBClusterIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    DatabaseName: {},
                    StorageEncrypted: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1s"
                    }
                }
            }
        },
        DeleteDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        DeleteDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {}
                }
            }
        },
        DeleteDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        DeleteDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName" ],
                members: {
                    DBSubnetGroupName: {}
                }
            }
        },
        DeleteEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {}
                }
            },
            output: {
                resultWrapper: "DeleteEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1s"
                    }
                }
            }
        },
        DescribeCertificates: {
            input: {
                type: "structure",
                members: {
                    CertificateIdentifier: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCertificatesResult",
                type: "structure",
                members: {
                    Certificates: {
                        type: "list",
                        member: {
                            locationName: "Certificate",
                            type: "structure",
                            members: {
                                CertificateIdentifier: {},
                                CertificateType: {},
                                Thumbprint: {},
                                ValidFrom: {
                                    type: "timestamp"
                                },
                                ValidTill: {
                                    type: "timestamp"
                                },
                                CertificateArn: {}
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBClusterParameterGroupName: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterParameterGroups: {
                        type: "list",
                        member: {
                            shape: "Sj",
                            locationName: "DBClusterParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S2k"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterSnapshotAttributes: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotAttributesResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S2p"
                    }
                }
            }
        },
        DescribeDBClusterSnapshots: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterSnapshotIdentifier: {},
                    SnapshotType: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    IncludeShared: {
                        type: "boolean"
                    },
                    IncludePublic: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterSnapshots: {
                        type: "list",
                        member: {
                            shape: "Sn",
                            locationName: "DBClusterSnapshot"
                        }
                    }
                }
            }
        },
        DescribeDBClusters: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusters: {
                        type: "list",
                        member: {
                            shape: "Sw",
                            locationName: "DBCluster"
                        }
                    }
                }
            }
        },
        DescribeDBEngineVersions: {
            input: {
                type: "structure",
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DefaultOnly: {
                        type: "boolean"
                    },
                    ListSupportedCharacterSets: {
                        type: "boolean"
                    },
                    ListSupportedTimezones: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBEngineVersionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBEngineVersions: {
                        type: "list",
                        member: {
                            locationName: "DBEngineVersion",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBParameterGroupFamily: {},
                                DBEngineDescription: {},
                                DBEngineVersionDescription: {},
                                ValidUpgradeTarget: {
                                    type: "list",
                                    member: {
                                        locationName: "UpgradeTarget",
                                        type: "structure",
                                        members: {
                                            Engine: {},
                                            EngineVersion: {},
                                            Description: {},
                                            AutoUpgrade: {
                                                type: "boolean"
                                            },
                                            IsMajorVersionUpgrade: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                ExportableLogTypes: {
                                    shape: "St"
                                },
                                SupportsLogExportsToCloudwatchLogs: {
                                    type: "boolean"
                                },
                                SupportedCACertificateIdentifiers: {
                                    type: "list",
                                    member: {}
                                },
                                SupportsCertificateRotationWithoutRestart: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDBInstances: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBInstancesResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBInstances: {
                        type: "list",
                        member: {
                            shape: "S1a",
                            locationName: "DBInstance"
                        }
                    }
                }
            }
        },
        DescribeDBSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    DBSubnetGroupName: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSubnetGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S1c",
                            locationName: "DBSubnetGroup"
                        }
                    }
                }
            }
        },
        DescribeEngineDefaultClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultClusterParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        type: "structure",
                        members: {
                            DBParameterGroupFamily: {},
                            Marker: {},
                            Parameters: {
                                shape: "S2k"
                            }
                        },
                        wrapper: true
                    }
                }
            }
        },
        DescribeEventCategories: {
            input: {
                type: "structure",
                members: {
                    SourceType: {},
                    Filters: {
                        shape: "S29"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEventCategoriesResult",
                type: "structure",
                members: {
                    EventCategoriesMapList: {
                        type: "list",
                        member: {
                            locationName: "EventCategoriesMap",
                            type: "structure",
                            members: {
                                SourceType: {},
                                EventCategories: {
                                    shape: "S6"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionName: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventSubscriptionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    EventSubscriptionsList: {
                        type: "list",
                        member: {
                            shape: "S4",
                            locationName: "EventSubscription"
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    EventCategories: {
                        shape: "S6"
                    },
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            locationName: "Event",
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                EventCategories: {
                                    shape: "S6"
                                },
                                Date: {
                                    type: "timestamp"
                                },
                                SourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeGlobalClusters: {
            input: {
                type: "structure",
                members: {
                    GlobalClusterIdentifier: {},
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeGlobalClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    GlobalClusters: {
                        type: "list",
                        member: {
                            shape: "S1s",
                            locationName: "GlobalClusterMember"
                        }
                    }
                }
            }
        },
        DescribeOrderableDBInstanceOptions: {
            input: {
                type: "structure",
                required: [ "Engine" ],
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBInstanceClass: {},
                    LicenseModel: {},
                    Vpc: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S29"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeOrderableDBInstanceOptionsResult",
                type: "structure",
                members: {
                    OrderableDBInstanceOptions: {
                        type: "list",
                        member: {
                            locationName: "OrderableDBInstanceOption",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBInstanceClass: {},
                                LicenseModel: {},
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        shape: "S1f",
                                        locationName: "AvailabilityZone"
                                    }
                                },
                                Vpc: {
                                    type: "boolean"
                                },
                                StorageType: {}
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribePendingMaintenanceActions: {
            input: {
                type: "structure",
                members: {
                    ResourceIdentifier: {},
                    Filters: {
                        shape: "S29"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribePendingMaintenanceActionsResult",
                type: "structure",
                members: {
                    PendingMaintenanceActions: {
                        type: "list",
                        member: {
                            shape: "Sd",
                            locationName: "ResourcePendingMaintenanceActions"
                        }
                    },
                    Marker: {}
                }
            }
        },
        FailoverDBCluster: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    TargetDBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "FailoverDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {},
                    Filters: {
                        shape: "S29"
                    }
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    TagList: {
                        shape: "S9"
                    }
                }
            }
        },
        ModifyDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    NewDBClusterIdentifier: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    Port: {
                        type: "integer"
                    },
                    MasterUserPassword: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    CloudwatchLogsExportConfiguration: {
                        type: "structure",
                        members: {
                            EnableLogTypes: {
                                shape: "St"
                            },
                            DisableLogTypes: {
                                shape: "St"
                            }
                        }
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        ModifyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "Parameters" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Parameters: {
                        shape: "S2k"
                    }
                }
            },
            output: {
                shape: "S4a",
                resultWrapper: "ModifyDBClusterParameterGroupResult"
            }
        },
        ModifyDBClusterSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "AttributeName" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    AttributeName: {},
                    ValuesToAdd: {
                        shape: "S2s"
                    },
                    ValuesToRemove: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterSnapshotAttributeResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S2p"
                    }
                }
            }
        },
        ModifyDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    DBInstanceClass: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    PreferredMaintenanceWindow: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    NewDBInstanceIdentifier: {},
                    CACertificateIdentifier: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    PromotionTier: {
                        type: "integer"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    CertificateRotationRestart: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        ModifyDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1c"
                    }
                }
            }
        },
        ModifyEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S6"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        ModifyGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    NewGlobalClusterIdentifier: {},
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1s"
                    }
                }
            }
        },
        RebootDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    ForceFailover: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RebootDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        RemoveFromGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier", "DbClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    DbClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveFromGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1s"
                    }
                }
            }
        },
        RemoveSourceIdentifierFromSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveSourceIdentifierFromSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ResetDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S2k"
                    }
                }
            },
            output: {
                shape: "S4a",
                resultWrapper: "ResetDBClusterParameterGroupResult"
            }
        },
        RestoreDBClusterFromSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SnapshotIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "So"
                    },
                    DBClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    KmsKeyId: {},
                    EnableCloudwatchLogsExports: {
                        shape: "St"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    DBClusterParameterGroupName: {},
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterFromSnapshotResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        RestoreDBClusterToPointInTime: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SourceDBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    RestoreType: {},
                    SourceDBClusterIdentifier: {},
                    RestoreToTime: {
                        type: "timestamp"
                    },
                    UseLatestRestorableTime: {
                        type: "boolean"
                    },
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    KmsKeyId: {},
                    EnableCloudwatchLogsExports: {
                        shape: "St"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterToPointInTimeResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        StartDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StartDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        StopDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StopDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                CustomerAwsId: {},
                CustSubscriptionId: {},
                SnsTopicArn: {},
                Status: {},
                SubscriptionCreationTime: {},
                SourceType: {},
                SourceIdsList: {
                    shape: "S5"
                },
                EventCategoriesList: {
                    shape: "S6"
                },
                Enabled: {
                    type: "boolean"
                },
                EventSubscriptionArn: {}
            },
            wrapper: true
        },
        S5: {
            type: "list",
            member: {
                locationName: "SourceId"
            }
        },
        S6: {
            type: "list",
            member: {
                locationName: "EventCategory"
            }
        },
        S9: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                ResourceIdentifier: {},
                PendingMaintenanceActionDetails: {
                    type: "list",
                    member: {
                        locationName: "PendingMaintenanceAction",
                        type: "structure",
                        members: {
                            Action: {},
                            AutoAppliedAfterDate: {
                                type: "timestamp"
                            },
                            ForcedApplyDate: {
                                type: "timestamp"
                            },
                            OptInStatus: {},
                            CurrentApplyDate: {
                                type: "timestamp"
                            },
                            Description: {}
                        }
                    }
                }
            },
            wrapper: true
        },
        Sj: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBClusterParameterGroupArn: {}
            },
            wrapper: true
        },
        Sn: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "So"
                },
                DBClusterSnapshotIdentifier: {},
                DBClusterIdentifier: {},
                SnapshotCreateTime: {
                    type: "timestamp"
                },
                Engine: {},
                Status: {},
                Port: {
                    type: "integer"
                },
                VpcId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                EngineVersion: {},
                SnapshotType: {},
                PercentProgress: {
                    type: "integer"
                },
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DBClusterSnapshotArn: {},
                SourceDBClusterSnapshotArn: {},
                StorageType: {}
            },
            wrapper: true
        },
        So: {
            type: "list",
            member: {
                locationName: "AvailabilityZone"
            }
        },
        Ss: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupId"
            }
        },
        St: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "So"
                },
                BackupRetentionPeriod: {
                    type: "integer"
                },
                DBClusterIdentifier: {},
                DBClusterParameterGroup: {},
                DBSubnetGroup: {},
                Status: {},
                PercentProgress: {},
                EarliestRestorableTime: {
                    type: "timestamp"
                },
                Endpoint: {},
                ReaderEndpoint: {},
                MultiAZ: {
                    type: "boolean"
                },
                Engine: {},
                EngineVersion: {},
                LatestRestorableTime: {
                    type: "timestamp"
                },
                Port: {
                    type: "integer"
                },
                MasterUsername: {},
                PreferredBackupWindow: {},
                PreferredMaintenanceWindow: {},
                ReplicationSourceIdentifier: {},
                ReadReplicaIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaIdentifier"
                    }
                },
                DBClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "DBClusterMember",
                        type: "structure",
                        members: {
                            DBInstanceIdentifier: {},
                            IsClusterWriter: {
                                type: "boolean"
                            },
                            DBClusterParameterGroupStatus: {},
                            PromotionTier: {
                                type: "integer"
                            }
                        },
                        wrapper: true
                    }
                },
                VpcSecurityGroups: {
                    shape: "S10"
                },
                HostedZoneId: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbClusterResourceId: {},
                DBClusterArn: {},
                AssociatedRoles: {
                    type: "list",
                    member: {
                        locationName: "DBClusterRole",
                        type: "structure",
                        members: {
                            RoleArn: {},
                            Status: {}
                        }
                    }
                },
                CloneGroupId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                EnabledCloudwatchLogsExports: {
                    shape: "St"
                },
                DeletionProtection: {
                    type: "boolean"
                },
                StorageType: {}
            },
            wrapper: true
        },
        S10: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupMembership",
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                DBInstanceIdentifier: {},
                DBInstanceClass: {},
                Engine: {},
                DBInstanceStatus: {},
                Endpoint: {
                    type: "structure",
                    members: {
                        Address: {},
                        Port: {
                            type: "integer"
                        },
                        HostedZoneId: {}
                    }
                },
                InstanceCreateTime: {
                    type: "timestamp"
                },
                PreferredBackupWindow: {},
                BackupRetentionPeriod: {
                    type: "integer"
                },
                VpcSecurityGroups: {
                    shape: "S10"
                },
                AvailabilityZone: {},
                DBSubnetGroup: {
                    shape: "S1c"
                },
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        DBInstanceClass: {},
                        AllocatedStorage: {
                            type: "integer"
                        },
                        MasterUserPassword: {},
                        Port: {
                            type: "integer"
                        },
                        BackupRetentionPeriod: {
                            type: "integer"
                        },
                        MultiAZ: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        LicenseModel: {},
                        Iops: {
                            type: "integer"
                        },
                        DBInstanceIdentifier: {},
                        StorageType: {},
                        CACertificateIdentifier: {},
                        DBSubnetGroupName: {},
                        PendingCloudwatchLogsExports: {
                            type: "structure",
                            members: {
                                LogTypesToEnable: {
                                    shape: "St"
                                },
                                LogTypesToDisable: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                },
                LatestRestorableTime: {
                    type: "timestamp"
                },
                EngineVersion: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                PubliclyAccessible: {
                    type: "boolean"
                },
                StatusInfos: {
                    type: "list",
                    member: {
                        locationName: "DBInstanceStatusInfo",
                        type: "structure",
                        members: {
                            StatusType: {},
                            Normal: {
                                type: "boolean"
                            },
                            Status: {},
                            Message: {}
                        }
                    }
                },
                DBClusterIdentifier: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbiResourceId: {},
                CACertificateIdentifier: {},
                CopyTagsToSnapshot: {
                    type: "boolean"
                },
                PromotionTier: {
                    type: "integer"
                },
                DBInstanceArn: {},
                EnabledCloudwatchLogsExports: {
                    shape: "St"
                },
                CertificateDetails: {
                    type: "structure",
                    members: {
                        CAIdentifier: {},
                        ValidTill: {
                            type: "timestamp"
                        }
                    }
                }
            },
            wrapper: true
        },
        S1c: {
            type: "structure",
            members: {
                DBSubnetGroupName: {},
                DBSubnetGroupDescription: {},
                VpcId: {},
                SubnetGroupStatus: {},
                Subnets: {
                    type: "list",
                    member: {
                        locationName: "Subnet",
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                shape: "S1f"
                            },
                            SubnetStatus: {}
                        }
                    }
                },
                DBSubnetGroupArn: {}
            },
            wrapper: true
        },
        S1f: {
            type: "structure",
            members: {
                Name: {}
            },
            wrapper: true
        },
        S1m: {
            type: "list",
            member: {
                locationName: "SubnetIdentifier"
            }
        },
        S1s: {
            type: "structure",
            members: {
                GlobalClusterIdentifier: {},
                GlobalClusterResourceId: {},
                GlobalClusterArn: {},
                Status: {},
                Engine: {},
                EngineVersion: {},
                DatabaseName: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                DeletionProtection: {
                    type: "boolean"
                },
                GlobalClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "GlobalClusterMember",
                        type: "structure",
                        members: {
                            DBClusterArn: {},
                            Readers: {
                                type: "list",
                                member: {}
                            },
                            IsWriter: {
                                type: "boolean"
                            }
                        },
                        wrapper: true
                    }
                }
            },
            wrapper: true
        },
        S29: {
            type: "list",
            member: {
                locationName: "Filter",
                type: "structure",
                required: [ "Name", "Values" ],
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {
                            locationName: "Value"
                        }
                    }
                }
            }
        },
        S2k: {
            type: "list",
            member: {
                locationName: "Parameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {},
                    Description: {},
                    Source: {},
                    ApplyType: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {},
                    ApplyMethod: {}
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                DBClusterSnapshotIdentifier: {},
                DBClusterSnapshotAttributes: {
                    type: "list",
                    member: {
                        locationName: "DBClusterSnapshotAttribute",
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeValues: {
                                shape: "S2s"
                            }
                        }
                    }
                }
            },
            wrapper: true
        },
        S2s: {
            type: "list",
            member: {
                locationName: "AttributeValue"
            }
        },
        S4a: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {}
            }
        }
    },
    paginators: {
        DescribeCertificates: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Certificates"
        },
        DescribeDBClusterParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterParameterGroups"
        },
        DescribeDBClusterParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeDBClusterSnapshots: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterSnapshots"
        },
        DescribeDBClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusters"
        },
        DescribeDBEngineVersions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBEngineVersions"
        },
        DescribeDBInstances: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBInstances"
        },
        DescribeDBSubnetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSubnetGroups"
        },
        DescribeEventSubscriptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EventSubscriptionsList"
        },
        DescribeEvents: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Events"
        },
        DescribeGlobalClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "GlobalClusters"
        },
        DescribeOrderableDBInstanceOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OrderableDBInstanceOptions"
        },
        DescribePendingMaintenanceActions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "PendingMaintenanceActions"
        },
        ListTagsForResource: {
            result_key: "TagList"
        }
    },
    waiters: {
        DBInstanceAvailable: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        },
        DBInstanceDeleted: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "DBInstanceNotFound",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["backup"] = {};

AWS.Backup = AWS.Service.defineService("backup", [ "2018-11-15" ]);

AWS.apiLoader.services["backup"]["2018-11-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-15",
        endpointPrefix: "backup",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Backup",
        serviceId: "Backup",
        signatureVersion: "v4",
        uid: "backup-2018-11-15"
    },
    operations: {
        CancelLegalHold: {
            http: {
                method: "DELETE",
                requestUri: "/legal-holds/{legalHoldId}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "LegalHoldId", "CancelDescription" ],
                members: {
                    LegalHoldId: {
                        location: "uri",
                        locationName: "legalHoldId"
                    },
                    CancelDescription: {
                        location: "querystring",
                        locationName: "cancelDescription"
                    },
                    RetainRecordInDays: {
                        location: "querystring",
                        locationName: "retainRecordInDays",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateBackupPlan: {
            http: {
                method: "PUT",
                requestUri: "/backup/plans/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlan" ],
                members: {
                    BackupPlan: {
                        shape: "S6"
                    },
                    BackupPlanTags: {
                        shape: "Sg"
                    },
                    CreatorRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    VersionId: {},
                    AdvancedBackupSettings: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        CreateBackupSelection: {
            http: {
                method: "PUT",
                requestUri: "/backup/plans/{backupPlanId}/selections/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "BackupSelection" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    BackupSelection: {
                        shape: "Sw"
                    },
                    CreatorRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SelectionId: {},
                    BackupPlanId: {},
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateBackupVault: {
            http: {
                method: "PUT",
                requestUri: "/backup-vaults/{backupVaultName}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    BackupVaultTags: {
                        shape: "Sg"
                    },
                    EncryptionKeyArn: {},
                    CreatorRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateFramework: {
            http: {
                requestUri: "/audit/frameworks"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName", "FrameworkControls" ],
                members: {
                    FrameworkName: {},
                    FrameworkDescription: {},
                    FrameworkControls: {
                        shape: "S1e"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    FrameworkTags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FrameworkName: {},
                    FrameworkArn: {}
                }
            },
            idempotent: true
        },
        CreateLegalHold: {
            http: {
                requestUri: "/legal-holds/"
            },
            input: {
                type: "structure",
                required: [ "Title", "Description" ],
                members: {
                    Title: {},
                    Description: {},
                    IdempotencyToken: {},
                    RecoveryPointSelection: {
                        shape: "S1r"
                    },
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Title: {},
                    Status: {},
                    Description: {},
                    LegalHoldId: {},
                    LegalHoldArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    RecoveryPointSelection: {
                        shape: "S1r"
                    }
                }
            },
            idempotent: true
        },
        CreateLogicallyAirGappedBackupVault: {
            http: {
                method: "PUT",
                requestUri: "/logically-air-gapped-backup-vaults/{backupVaultName}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "MinRetentionDays", "MaxRetentionDays" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    BackupVaultTags: {
                        shape: "Sg"
                    },
                    CreatorRequestId: {},
                    MinRetentionDays: {
                        type: "long"
                    },
                    MaxRetentionDays: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    VaultState: {}
                }
            },
            idempotent: true
        },
        CreateReportPlan: {
            http: {
                requestUri: "/audit/report-plans"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName", "ReportDeliveryChannel", "ReportSetting" ],
                members: {
                    ReportPlanName: {},
                    ReportPlanDescription: {},
                    ReportDeliveryChannel: {
                        shape: "S23"
                    },
                    ReportSetting: {
                        shape: "S25"
                    },
                    ReportPlanTags: {
                        shape: "S1o"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlanName: {},
                    ReportPlanArn: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateRestoreTestingPlan: {
            http: {
                method: "PUT",
                requestUri: "/restore-testing/plans",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlan" ],
                members: {
                    CreatorRequestId: {},
                    RestoreTestingPlan: {
                        type: "structure",
                        required: [ "RecoveryPointSelection", "RestoreTestingPlanName", "ScheduleExpression" ],
                        members: {
                            RecoveryPointSelection: {
                                shape: "S2c"
                            },
                            RestoreTestingPlanName: {},
                            ScheduleExpression: {},
                            ScheduleExpressionTimezone: {},
                            StartWindowHours: {
                                type: "integer"
                            }
                        }
                    },
                    Tags: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreationTime", "RestoreTestingPlanArn", "RestoreTestingPlanName" ],
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    RestoreTestingPlanArn: {},
                    RestoreTestingPlanName: {}
                }
            },
            idempotent: true
        },
        CreateRestoreTestingSelection: {
            http: {
                method: "PUT",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}/selections",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlanName", "RestoreTestingSelection" ],
                members: {
                    CreatorRequestId: {},
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    },
                    RestoreTestingSelection: {
                        type: "structure",
                        required: [ "IamRoleArn", "ProtectedResourceType", "RestoreTestingSelectionName" ],
                        members: {
                            IamRoleArn: {},
                            ProtectedResourceArns: {
                                shape: "S26"
                            },
                            ProtectedResourceConditions: {
                                shape: "S2l"
                            },
                            ProtectedResourceType: {},
                            RestoreMetadataOverrides: {
                                shape: "S2g"
                            },
                            RestoreTestingSelectionName: {},
                            ValidationWindowHours: {
                                type: "integer"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreationTime", "RestoreTestingPlanArn", "RestoreTestingPlanName", "RestoreTestingSelectionName" ],
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    RestoreTestingPlanArn: {},
                    RestoreTestingPlanName: {},
                    RestoreTestingSelectionName: {}
                }
            },
            idempotent: true
        },
        DeleteBackupPlan: {
            http: {
                method: "DELETE",
                requestUri: "/backup/plans/{backupPlanId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    DeletionDate: {
                        type: "timestamp"
                    },
                    VersionId: {}
                }
            }
        },
        DeleteBackupSelection: {
            http: {
                method: "DELETE",
                requestUri: "/backup/plans/{backupPlanId}/selections/{selectionId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "SelectionId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    SelectionId: {
                        location: "uri",
                        locationName: "selectionId"
                    }
                }
            }
        },
        DeleteBackupVault: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            }
        },
        DeleteBackupVaultAccessPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/access-policy"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            idempotent: true
        },
        DeleteBackupVaultLockConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/vault-lock"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            idempotent: true
        },
        DeleteBackupVaultNotifications: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/notification-configuration"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            idempotent: true
        },
        DeleteFramework: {
            http: {
                method: "DELETE",
                requestUri: "/audit/frameworks/{frameworkName}"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName" ],
                members: {
                    FrameworkName: {
                        location: "uri",
                        locationName: "frameworkName"
                    }
                }
            }
        },
        DeleteRecoveryPoint: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteReportPlan: {
            http: {
                method: "DELETE",
                requestUri: "/audit/report-plans/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    }
                }
            },
            idempotent: true
        },
        DeleteRestoreTestingPlan: {
            http: {
                method: "DELETE",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlanName" ],
                members: {
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    }
                }
            },
            idempotent: true
        },
        DeleteRestoreTestingSelection: {
            http: {
                method: "DELETE",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}/selections/{RestoreTestingSelectionName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlanName", "RestoreTestingSelectionName" ],
                members: {
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    },
                    RestoreTestingSelectionName: {
                        location: "uri",
                        locationName: "RestoreTestingSelectionName"
                    }
                }
            },
            idempotent: true
        },
        DescribeBackupJob: {
            http: {
                method: "GET",
                requestUri: "/backup-jobs/{backupJobId}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "backupJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountId: {},
                    BackupJobId: {},
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    RecoveryPointArn: {},
                    ResourceArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CompletionDate: {
                        type: "timestamp"
                    },
                    State: {},
                    StatusMessage: {},
                    PercentDone: {},
                    BackupSizeInBytes: {
                        type: "long"
                    },
                    IamRoleArn: {},
                    CreatedBy: {
                        shape: "S35"
                    },
                    ResourceType: {},
                    BytesTransferred: {
                        type: "long"
                    },
                    ExpectedCompletionDate: {
                        type: "timestamp"
                    },
                    StartBy: {
                        type: "timestamp"
                    },
                    BackupOptions: {
                        shape: "Sq"
                    },
                    BackupType: {},
                    ParentJobId: {},
                    IsParent: {
                        type: "boolean"
                    },
                    NumberOfChildJobs: {
                        type: "long"
                    },
                    ChildJobsInState: {
                        type: "map",
                        key: {},
                        value: {
                            type: "long"
                        }
                    },
                    ResourceName: {},
                    InitiationDate: {
                        type: "timestamp"
                    },
                    MessageCategory: {}
                }
            },
            idempotent: true
        },
        DescribeBackupVault: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    BackupVaultAccountId: {
                        location: "querystring",
                        locationName: "backupVaultAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    VaultType: {},
                    EncryptionKeyArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CreatorRequestId: {},
                    NumberOfRecoveryPoints: {
                        type: "long"
                    },
                    Locked: {
                        type: "boolean"
                    },
                    MinRetentionDays: {
                        type: "long"
                    },
                    MaxRetentionDays: {
                        type: "long"
                    },
                    LockDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeCopyJob: {
            http: {
                method: "GET",
                requestUri: "/copy-jobs/{copyJobId}"
            },
            input: {
                type: "structure",
                required: [ "CopyJobId" ],
                members: {
                    CopyJobId: {
                        location: "uri",
                        locationName: "copyJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyJob: {
                        shape: "S3e"
                    }
                }
            },
            idempotent: true
        },
        DescribeFramework: {
            http: {
                method: "GET",
                requestUri: "/audit/frameworks/{frameworkName}"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName" ],
                members: {
                    FrameworkName: {
                        location: "uri",
                        locationName: "frameworkName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FrameworkName: {},
                    FrameworkArn: {},
                    FrameworkDescription: {},
                    FrameworkControls: {
                        shape: "S1e"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    DeploymentStatus: {},
                    FrameworkStatus: {},
                    IdempotencyToken: {}
                }
            }
        },
        DescribeGlobalSettings: {
            http: {
                method: "GET",
                requestUri: "/global-settings"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    GlobalSettings: {
                        shape: "S3l"
                    },
                    LastUpdateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeProtectedResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ResourceType: {},
                    LastBackupTime: {
                        type: "timestamp"
                    },
                    ResourceName: {},
                    LastBackupVaultArn: {},
                    LastRecoveryPointArn: {},
                    LatestRestoreExecutionTimeMinutes: {
                        type: "long"
                    },
                    LatestRestoreJobCreationDate: {
                        type: "timestamp"
                    },
                    LatestRestoreRecoveryPointCreationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeRecoveryPoint: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    },
                    BackupVaultAccountId: {
                        location: "querystring",
                        locationName: "backupVaultAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecoveryPointArn: {},
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    SourceBackupVaultArn: {},
                    ResourceArn: {},
                    ResourceType: {},
                    CreatedBy: {
                        shape: "S35"
                    },
                    IamRoleArn: {},
                    Status: {},
                    StatusMessage: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CompletionDate: {
                        type: "timestamp"
                    },
                    BackupSizeInBytes: {
                        type: "long"
                    },
                    CalculatedLifecycle: {
                        shape: "S3t"
                    },
                    Lifecycle: {
                        shape: "Se"
                    },
                    EncryptionKeyArn: {},
                    IsEncrypted: {
                        type: "boolean"
                    },
                    StorageClass: {},
                    LastRestoreTime: {
                        type: "timestamp"
                    },
                    ParentRecoveryPointArn: {},
                    CompositeMemberIdentifier: {},
                    IsParent: {
                        type: "boolean"
                    },
                    ResourceName: {},
                    VaultType: {}
                }
            },
            idempotent: true
        },
        DescribeRegionSettings: {
            http: {
                method: "GET",
                requestUri: "/account-settings"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ResourceTypeOptInPreference: {
                        shape: "S3x"
                    },
                    ResourceTypeManagementPreference: {
                        shape: "S3z"
                    }
                }
            }
        },
        DescribeReportJob: {
            http: {
                method: "GET",
                requestUri: "/audit/report-jobs/{reportJobId}"
            },
            input: {
                type: "structure",
                required: [ "ReportJobId" ],
                members: {
                    ReportJobId: {
                        location: "uri",
                        locationName: "reportJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportJob: {
                        shape: "S43"
                    }
                }
            }
        },
        DescribeReportPlan: {
            http: {
                method: "GET",
                requestUri: "/audit/report-plans/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlan: {
                        shape: "S47"
                    }
                }
            }
        },
        DescribeRestoreJob: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{restoreJobId}"
            },
            input: {
                type: "structure",
                required: [ "RestoreJobId" ],
                members: {
                    RestoreJobId: {
                        location: "uri",
                        locationName: "restoreJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountId: {},
                    RestoreJobId: {},
                    RecoveryPointArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CompletionDate: {
                        type: "timestamp"
                    },
                    Status: {},
                    StatusMessage: {},
                    PercentDone: {},
                    BackupSizeInBytes: {
                        type: "long"
                    },
                    IamRoleArn: {},
                    ExpectedCompletionTimeMinutes: {
                        type: "long"
                    },
                    CreatedResourceArn: {},
                    ResourceType: {},
                    RecoveryPointCreationDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "S4c"
                    },
                    ValidationStatus: {},
                    ValidationStatusMessage: {},
                    DeletionStatus: {},
                    DeletionStatusMessage: {}
                }
            },
            idempotent: true
        },
        DisassociateRecoveryPoint: {
            http: {
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/disassociate"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    }
                }
            }
        },
        DisassociateRecoveryPointFromParent: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/parentAssociation",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    }
                }
            }
        },
        ExportBackupPlanTemplate: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/toTemplate/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanTemplateJson: {}
                }
            }
        },
        GetBackupPlan: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlan: {
                        shape: "S4l"
                    },
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    VersionId: {},
                    CreatorRequestId: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    DeletionDate: {
                        type: "timestamp"
                    },
                    LastExecutionDate: {
                        type: "timestamp"
                    },
                    AdvancedBackupSettings: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        GetBackupPlanFromJSON: {
            http: {
                requestUri: "/backup/template/json/toPlan"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanTemplateJson" ],
                members: {
                    BackupPlanTemplateJson: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlan: {
                        shape: "S4l"
                    }
                }
            }
        },
        GetBackupPlanFromTemplate: {
            http: {
                method: "GET",
                requestUri: "/backup/template/plans/{templateId}/toPlan"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanTemplateId" ],
                members: {
                    BackupPlanTemplateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanDocument: {
                        shape: "S4l"
                    }
                }
            }
        },
        GetBackupSelection: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/selections/{selectionId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "SelectionId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    SelectionId: {
                        location: "uri",
                        locationName: "selectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupSelection: {
                        shape: "Sw"
                    },
                    SelectionId: {},
                    BackupPlanId: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CreatorRequestId: {}
                }
            },
            idempotent: true
        },
        GetBackupVaultAccessPolicy: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/access-policy"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    Policy: {}
                }
            },
            idempotent: true
        },
        GetBackupVaultNotifications: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/notification-configuration"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    SNSTopicArn: {},
                    BackupVaultEvents: {
                        shape: "S4z"
                    }
                }
            },
            idempotent: true
        },
        GetLegalHold: {
            http: {
                method: "GET",
                requestUri: "/legal-holds/{legalHoldId}/"
            },
            input: {
                type: "structure",
                required: [ "LegalHoldId" ],
                members: {
                    LegalHoldId: {
                        location: "uri",
                        locationName: "legalHoldId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Title: {},
                    Status: {},
                    Description: {},
                    CancelDescription: {},
                    LegalHoldId: {},
                    LegalHoldArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CancellationDate: {
                        type: "timestamp"
                    },
                    RetainRecordUntil: {
                        type: "timestamp"
                    },
                    RecoveryPointSelection: {
                        shape: "S1r"
                    }
                }
            },
            idempotent: true
        },
        GetRecoveryPointRestoreMetadata: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/restore-metadata"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    },
                    BackupVaultAccountId: {
                        location: "querystring",
                        locationName: "backupVaultAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultArn: {},
                    RecoveryPointArn: {},
                    RestoreMetadata: {
                        shape: "S55"
                    },
                    ResourceType: {}
                }
            },
            idempotent: true
        },
        GetRestoreJobMetadata: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{restoreJobId}/metadata"
            },
            input: {
                type: "structure",
                required: [ "RestoreJobId" ],
                members: {
                    RestoreJobId: {
                        location: "uri",
                        locationName: "restoreJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RestoreJobId: {},
                    Metadata: {
                        shape: "S55"
                    }
                }
            }
        },
        GetRestoreTestingInferredMetadata: {
            http: {
                method: "GET",
                requestUri: "/restore-testing/inferred-metadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultAccountId: {
                        location: "querystring",
                        locationName: "BackupVaultAccountId"
                    },
                    BackupVaultName: {
                        location: "querystring",
                        locationName: "BackupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "querystring",
                        locationName: "RecoveryPointArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InferredMetadata" ],
                members: {
                    InferredMetadata: {
                        shape: "S1o"
                    }
                }
            }
        },
        GetRestoreTestingPlan: {
            http: {
                method: "GET",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlanName" ],
                members: {
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RestoreTestingPlan" ],
                members: {
                    RestoreTestingPlan: {
                        type: "structure",
                        required: [ "CreationTime", "RecoveryPointSelection", "RestoreTestingPlanArn", "RestoreTestingPlanName", "ScheduleExpression" ],
                        members: {
                            CreationTime: {
                                type: "timestamp"
                            },
                            CreatorRequestId: {},
                            LastExecutionTime: {
                                type: "timestamp"
                            },
                            LastUpdateTime: {
                                type: "timestamp"
                            },
                            RecoveryPointSelection: {
                                shape: "S2c"
                            },
                            RestoreTestingPlanArn: {},
                            RestoreTestingPlanName: {},
                            ScheduleExpression: {},
                            ScheduleExpressionTimezone: {},
                            StartWindowHours: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        GetRestoreTestingSelection: {
            http: {
                method: "GET",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}/selections/{RestoreTestingSelectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlanName", "RestoreTestingSelectionName" ],
                members: {
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    },
                    RestoreTestingSelectionName: {
                        location: "uri",
                        locationName: "RestoreTestingSelectionName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RestoreTestingSelection" ],
                members: {
                    RestoreTestingSelection: {
                        type: "structure",
                        required: [ "CreationTime", "IamRoleArn", "ProtectedResourceType", "RestoreTestingPlanName", "RestoreTestingSelectionName" ],
                        members: {
                            CreationTime: {
                                type: "timestamp"
                            },
                            CreatorRequestId: {},
                            IamRoleArn: {},
                            ProtectedResourceArns: {
                                shape: "S26"
                            },
                            ProtectedResourceConditions: {
                                shape: "S2l"
                            },
                            ProtectedResourceType: {},
                            RestoreMetadataOverrides: {
                                shape: "S2g"
                            },
                            RestoreTestingPlanName: {},
                            RestoreTestingSelectionName: {},
                            ValidationWindowHours: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        GetSupportedResourceTypes: {
            http: {
                method: "GET",
                requestUri: "/supported-resource-types"
            },
            output: {
                type: "structure",
                members: {
                    ResourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListBackupJobSummaries: {
            http: {
                method: "GET",
                requestUri: "/audit/backup-job-summaries"
            },
            input: {
                type: "structure",
                members: {
                    AccountId: {
                        location: "querystring",
                        locationName: "AccountId"
                    },
                    State: {
                        location: "querystring",
                        locationName: "State"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "ResourceType"
                    },
                    MessageCategory: {
                        location: "querystring",
                        locationName: "MessageCategory"
                    },
                    AggregationPeriod: {
                        location: "querystring",
                        locationName: "AggregationPeriod"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Region: {},
                                AccountId: {},
                                State: {},
                                ResourceType: {},
                                MessageCategory: {},
                                Count: {
                                    type: "integer"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    AggregationPeriod: {},
                    NextToken: {}
                }
            }
        },
        ListBackupJobs: {
            http: {
                method: "GET",
                requestUri: "/backup-jobs/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    ByState: {
                        location: "querystring",
                        locationName: "state"
                    },
                    ByBackupVaultName: {
                        location: "querystring",
                        locationName: "backupVaultName"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    ByResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ByAccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    },
                    ByCompleteAfter: {
                        location: "querystring",
                        locationName: "completeAfter",
                        type: "timestamp"
                    },
                    ByCompleteBefore: {
                        location: "querystring",
                        locationName: "completeBefore",
                        type: "timestamp"
                    },
                    ByParentJobId: {
                        location: "querystring",
                        locationName: "parentJobId"
                    },
                    ByMessageCategory: {
                        location: "querystring",
                        locationName: "messageCategory"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                BackupJobId: {},
                                BackupVaultName: {},
                                BackupVaultArn: {},
                                RecoveryPointArn: {},
                                ResourceArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CompletionDate: {
                                    type: "timestamp"
                                },
                                State: {},
                                StatusMessage: {},
                                PercentDone: {},
                                BackupSizeInBytes: {
                                    type: "long"
                                },
                                IamRoleArn: {},
                                CreatedBy: {
                                    shape: "S35"
                                },
                                ExpectedCompletionDate: {
                                    type: "timestamp"
                                },
                                StartBy: {
                                    type: "timestamp"
                                },
                                ResourceType: {},
                                BytesTransferred: {
                                    type: "long"
                                },
                                BackupOptions: {
                                    shape: "Sq"
                                },
                                BackupType: {},
                                ParentJobId: {},
                                IsParent: {
                                    type: "boolean"
                                },
                                ResourceName: {},
                                InitiationDate: {
                                    type: "timestamp"
                                },
                                MessageCategory: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListBackupPlanTemplates: {
            http: {
                method: "GET",
                requestUri: "/backup/template/plans"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupPlanTemplatesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BackupPlanTemplateId: {},
                                BackupPlanTemplateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListBackupPlanVersions: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/versions/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupPlanVersionsList: {
                        type: "list",
                        member: {
                            shape: "S64"
                        }
                    }
                }
            },
            idempotent: true
        },
        ListBackupPlans: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    IncludeDeleted: {
                        location: "querystring",
                        locationName: "includeDeleted",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupPlansList: {
                        type: "list",
                        member: {
                            shape: "S64"
                        }
                    }
                }
            },
            idempotent: true
        },
        ListBackupSelections: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/selections/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupSelectionsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SelectionId: {},
                                SelectionName: {},
                                BackupPlanId: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CreatorRequestId: {},
                                IamRoleArn: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListBackupVaults: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/"
            },
            input: {
                type: "structure",
                members: {
                    ByVaultType: {
                        location: "querystring",
                        locationName: "vaultType"
                    },
                    ByShared: {
                        location: "querystring",
                        locationName: "shared",
                        type: "boolean"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BackupVaultName: {},
                                BackupVaultArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                EncryptionKeyArn: {},
                                CreatorRequestId: {},
                                NumberOfRecoveryPoints: {
                                    type: "long"
                                },
                                Locked: {
                                    type: "boolean"
                                },
                                MinRetentionDays: {
                                    type: "long"
                                },
                                MaxRetentionDays: {
                                    type: "long"
                                },
                                LockDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListCopyJobSummaries: {
            http: {
                method: "GET",
                requestUri: "/audit/copy-job-summaries"
            },
            input: {
                type: "structure",
                members: {
                    AccountId: {
                        location: "querystring",
                        locationName: "AccountId"
                    },
                    State: {
                        location: "querystring",
                        locationName: "State"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "ResourceType"
                    },
                    MessageCategory: {
                        location: "querystring",
                        locationName: "MessageCategory"
                    },
                    AggregationPeriod: {
                        location: "querystring",
                        locationName: "AggregationPeriod"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Region: {},
                                AccountId: {},
                                State: {},
                                ResourceType: {},
                                MessageCategory: {},
                                Count: {
                                    type: "integer"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    AggregationPeriod: {},
                    NextToken: {}
                }
            }
        },
        ListCopyJobs: {
            http: {
                method: "GET",
                requestUri: "/copy-jobs/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    ByState: {
                        location: "querystring",
                        locationName: "state"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    ByResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ByDestinationVaultArn: {
                        location: "querystring",
                        locationName: "destinationVaultArn"
                    },
                    ByAccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    },
                    ByCompleteBefore: {
                        location: "querystring",
                        locationName: "completeBefore",
                        type: "timestamp"
                    },
                    ByCompleteAfter: {
                        location: "querystring",
                        locationName: "completeAfter",
                        type: "timestamp"
                    },
                    ByParentJobId: {
                        location: "querystring",
                        locationName: "parentJobId"
                    },
                    ByMessageCategory: {
                        location: "querystring",
                        locationName: "messageCategory"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyJobs: {
                        type: "list",
                        member: {
                            shape: "S3e"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFrameworks: {
            http: {
                method: "GET",
                requestUri: "/audit/frameworks"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Frameworks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FrameworkName: {},
                                FrameworkArn: {},
                                FrameworkDescription: {},
                                NumberOfControls: {
                                    type: "integer"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                DeploymentStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLegalHolds: {
            http: {
                method: "GET",
                requestUri: "/legal-holds/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    LegalHolds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Title: {},
                                Status: {},
                                Description: {},
                                LegalHoldId: {},
                                LegalHoldArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CancellationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListProtectedResources: {
            http: {
                method: "GET",
                requestUri: "/resources/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        shape: "S6z"
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListProtectedResourcesByBackupVault: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/resources/"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    BackupVaultAccountId: {
                        location: "querystring",
                        locationName: "backupVaultAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        shape: "S6z"
                    },
                    NextToken: {}
                }
            }
        },
        ListRecoveryPointsByBackupVault: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    BackupVaultAccountId: {
                        location: "querystring",
                        locationName: "backupVaultAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    ByResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ByBackupPlanId: {
                        location: "querystring",
                        locationName: "backupPlanId"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    ByParentRecoveryPointArn: {
                        location: "querystring",
                        locationName: "parentRecoveryPointArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RecoveryPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecoveryPointArn: {},
                                BackupVaultName: {},
                                BackupVaultArn: {},
                                SourceBackupVaultArn: {},
                                ResourceArn: {},
                                ResourceType: {},
                                CreatedBy: {
                                    shape: "S35"
                                },
                                IamRoleArn: {},
                                Status: {},
                                StatusMessage: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CompletionDate: {
                                    type: "timestamp"
                                },
                                BackupSizeInBytes: {
                                    type: "long"
                                },
                                CalculatedLifecycle: {
                                    shape: "S3t"
                                },
                                Lifecycle: {
                                    shape: "Se"
                                },
                                EncryptionKeyArn: {},
                                IsEncrypted: {
                                    type: "boolean"
                                },
                                LastRestoreTime: {
                                    type: "timestamp"
                                },
                                ParentRecoveryPointArn: {},
                                CompositeMemberIdentifier: {},
                                IsParent: {
                                    type: "boolean"
                                },
                                ResourceName: {},
                                VaultType: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListRecoveryPointsByLegalHold: {
            http: {
                method: "GET",
                requestUri: "/legal-holds/{legalHoldId}/recovery-points"
            },
            input: {
                type: "structure",
                required: [ "LegalHoldId" ],
                members: {
                    LegalHoldId: {
                        location: "uri",
                        locationName: "legalHoldId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecoveryPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecoveryPointArn: {},
                                ResourceArn: {},
                                ResourceType: {},
                                BackupVaultName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListRecoveryPointsByResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{resourceArn}/recovery-points/"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RecoveryPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecoveryPointArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                Status: {},
                                StatusMessage: {},
                                EncryptionKeyArn: {},
                                BackupSizeBytes: {
                                    type: "long"
                                },
                                BackupVaultName: {},
                                IsParent: {
                                    type: "boolean"
                                },
                                ParentRecoveryPointArn: {},
                                ResourceName: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListReportJobs: {
            http: {
                method: "GET",
                requestUri: "/audit/report-jobs"
            },
            input: {
                type: "structure",
                members: {
                    ByReportPlanName: {
                        location: "querystring",
                        locationName: "ReportPlanName"
                    },
                    ByCreationBefore: {
                        location: "querystring",
                        locationName: "CreationBefore",
                        type: "timestamp"
                    },
                    ByCreationAfter: {
                        location: "querystring",
                        locationName: "CreationAfter",
                        type: "timestamp"
                    },
                    ByStatus: {
                        location: "querystring",
                        locationName: "Status"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportJobs: {
                        type: "list",
                        member: {
                            shape: "S43"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListReportPlans: {
            http: {
                method: "GET",
                requestUri: "/audit/report-plans"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlans: {
                        type: "list",
                        member: {
                            shape: "S47"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRestoreJobSummaries: {
            http: {
                method: "GET",
                requestUri: "/audit/restore-job-summaries"
            },
            input: {
                type: "structure",
                members: {
                    AccountId: {
                        location: "querystring",
                        locationName: "AccountId"
                    },
                    State: {
                        location: "querystring",
                        locationName: "State"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "ResourceType"
                    },
                    AggregationPeriod: {
                        location: "querystring",
                        locationName: "AggregationPeriod"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RestoreJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Region: {},
                                AccountId: {},
                                State: {},
                                ResourceType: {},
                                Count: {
                                    type: "integer"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    AggregationPeriod: {},
                    NextToken: {}
                }
            }
        },
        ListRestoreJobs: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByAccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    },
                    ByResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    ByStatus: {
                        location: "querystring",
                        locationName: "status"
                    },
                    ByCompleteBefore: {
                        location: "querystring",
                        locationName: "completeBefore",
                        type: "timestamp"
                    },
                    ByCompleteAfter: {
                        location: "querystring",
                        locationName: "completeAfter",
                        type: "timestamp"
                    },
                    ByRestoreTestingPlanArn: {
                        location: "querystring",
                        locationName: "restoreTestingPlanArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RestoreJobs: {
                        shape: "S7s"
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListRestoreJobsByProtectedResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{resourceArn}/restore-jobs/"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    ByStatus: {
                        location: "querystring",
                        locationName: "status"
                    },
                    ByRecoveryPointCreationDateAfter: {
                        location: "querystring",
                        locationName: "recoveryPointCreationDateAfter",
                        type: "timestamp"
                    },
                    ByRecoveryPointCreationDateBefore: {
                        location: "querystring",
                        locationName: "recoveryPointCreationDateBefore",
                        type: "timestamp"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RestoreJobs: {
                        shape: "S7s"
                    },
                    NextToken: {}
                }
            }
        },
        ListRestoreTestingPlans: {
            http: {
                method: "GET",
                requestUri: "/restore-testing/plans",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RestoreTestingPlans" ],
                members: {
                    NextToken: {},
                    RestoreTestingPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreationTime", "RestoreTestingPlanArn", "RestoreTestingPlanName", "ScheduleExpression" ],
                            members: {
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastExecutionTime: {
                                    type: "timestamp"
                                },
                                LastUpdateTime: {
                                    type: "timestamp"
                                },
                                RestoreTestingPlanArn: {},
                                RestoreTestingPlanName: {},
                                ScheduleExpression: {},
                                ScheduleExpressionTimezone: {},
                                StartWindowHours: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListRestoreTestingSelections: {
            http: {
                method: "GET",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}/selections",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlanName" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RestoreTestingSelections" ],
                members: {
                    NextToken: {},
                    RestoreTestingSelections: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreationTime", "IamRoleArn", "ProtectedResourceType", "RestoreTestingPlanName", "RestoreTestingSelectionName" ],
                            members: {
                                CreationTime: {
                                    type: "timestamp"
                                },
                                IamRoleArn: {},
                                ProtectedResourceType: {},
                                RestoreTestingPlanName: {},
                                RestoreTestingSelectionName: {},
                                ValidationWindowHours: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}/"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        PutBackupVaultAccessPolicy: {
            http: {
                method: "PUT",
                requestUri: "/backup-vaults/{backupVaultName}/access-policy"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    Policy: {}
                }
            },
            idempotent: true
        },
        PutBackupVaultLockConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/backup-vaults/{backupVaultName}/vault-lock"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    MinRetentionDays: {
                        type: "long"
                    },
                    MaxRetentionDays: {
                        type: "long"
                    },
                    ChangeableForDays: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        },
        PutBackupVaultNotifications: {
            http: {
                method: "PUT",
                requestUri: "/backup-vaults/{backupVaultName}/notification-configuration"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "SNSTopicArn", "BackupVaultEvents" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    SNSTopicArn: {},
                    BackupVaultEvents: {
                        shape: "S4z"
                    }
                }
            },
            idempotent: true
        },
        PutRestoreValidationResult: {
            http: {
                method: "PUT",
                requestUri: "/restore-jobs/{restoreJobId}/validations",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "RestoreJobId", "ValidationStatus" ],
                members: {
                    RestoreJobId: {
                        location: "uri",
                        locationName: "restoreJobId"
                    },
                    ValidationStatus: {},
                    ValidationStatusMessage: {}
                }
            },
            idempotent: true
        },
        StartBackupJob: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "ResourceArn", "IamRoleArn" ],
                members: {
                    BackupVaultName: {},
                    ResourceArn: {},
                    IamRoleArn: {},
                    IdempotencyToken: {},
                    StartWindowMinutes: {
                        type: "long"
                    },
                    CompleteWindowMinutes: {
                        type: "long"
                    },
                    Lifecycle: {
                        shape: "Se"
                    },
                    RecoveryPointTags: {
                        shape: "Sg"
                    },
                    BackupOptions: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupJobId: {},
                    RecoveryPointArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    IsParent: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        StartCopyJob: {
            http: {
                method: "PUT",
                requestUri: "/copy-jobs"
            },
            input: {
                type: "structure",
                required: [ "RecoveryPointArn", "SourceBackupVaultName", "DestinationBackupVaultArn", "IamRoleArn" ],
                members: {
                    RecoveryPointArn: {},
                    SourceBackupVaultName: {},
                    DestinationBackupVaultArn: {},
                    IamRoleArn: {},
                    IdempotencyToken: {},
                    Lifecycle: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyJobId: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    IsParent: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        StartReportJob: {
            http: {
                requestUri: "/audit/report-jobs/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportJobId: {}
                }
            },
            idempotent: true
        },
        StartRestoreJob: {
            http: {
                method: "PUT",
                requestUri: "/restore-jobs"
            },
            input: {
                type: "structure",
                required: [ "RecoveryPointArn", "Metadata" ],
                members: {
                    RecoveryPointArn: {},
                    Metadata: {
                        shape: "S55"
                    },
                    IamRoleArn: {},
                    IdempotencyToken: {},
                    ResourceType: {},
                    CopySourceTagsToRestoredResource: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RestoreJobId: {}
                }
            },
            idempotent: true
        },
        StopBackupJob: {
            http: {
                requestUri: "/backup-jobs/{backupJobId}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "backupJobId"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                requestUri: "/untag/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeyList" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeyList: {
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            idempotent: true
        },
        UpdateBackupPlan: {
            http: {
                requestUri: "/backup/plans/{backupPlanId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "BackupPlan" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    BackupPlan: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    VersionId: {},
                    AdvancedBackupSettings: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        UpdateFramework: {
            http: {
                method: "PUT",
                requestUri: "/audit/frameworks/{frameworkName}"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName" ],
                members: {
                    FrameworkName: {
                        location: "uri",
                        locationName: "frameworkName"
                    },
                    FrameworkDescription: {},
                    FrameworkControls: {
                        shape: "S1e"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FrameworkName: {},
                    FrameworkArn: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        UpdateGlobalSettings: {
            http: {
                method: "PUT",
                requestUri: "/global-settings"
            },
            input: {
                type: "structure",
                members: {
                    GlobalSettings: {
                        shape: "S3l"
                    }
                }
            }
        },
        UpdateRecoveryPointLifecycle: {
            http: {
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    },
                    Lifecycle: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultArn: {},
                    RecoveryPointArn: {},
                    Lifecycle: {
                        shape: "Se"
                    },
                    CalculatedLifecycle: {
                        shape: "S3t"
                    }
                }
            },
            idempotent: true
        },
        UpdateRegionSettings: {
            http: {
                method: "PUT",
                requestUri: "/account-settings"
            },
            input: {
                type: "structure",
                members: {
                    ResourceTypeOptInPreference: {
                        shape: "S3x"
                    },
                    ResourceTypeManagementPreference: {
                        shape: "S3z"
                    }
                }
            }
        },
        UpdateReportPlan: {
            http: {
                method: "PUT",
                requestUri: "/audit/report-plans/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    },
                    ReportPlanDescription: {},
                    ReportDeliveryChannel: {
                        shape: "S23"
                    },
                    ReportSetting: {
                        shape: "S25"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlanName: {},
                    ReportPlanArn: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        UpdateRestoreTestingPlan: {
            http: {
                method: "PUT",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlan", "RestoreTestingPlanName" ],
                members: {
                    RestoreTestingPlan: {
                        type: "structure",
                        members: {
                            RecoveryPointSelection: {
                                shape: "S2c"
                            },
                            ScheduleExpression: {},
                            ScheduleExpressionTimezone: {},
                            StartWindowHours: {
                                type: "integer"
                            }
                        }
                    },
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreationTime", "RestoreTestingPlanArn", "RestoreTestingPlanName", "UpdateTime" ],
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    RestoreTestingPlanArn: {},
                    RestoreTestingPlanName: {},
                    UpdateTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        UpdateRestoreTestingSelection: {
            http: {
                method: "PUT",
                requestUri: "/restore-testing/plans/{RestoreTestingPlanName}/selections/{RestoreTestingSelectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RestoreTestingPlanName", "RestoreTestingSelection", "RestoreTestingSelectionName" ],
                members: {
                    RestoreTestingPlanName: {
                        location: "uri",
                        locationName: "RestoreTestingPlanName"
                    },
                    RestoreTestingSelection: {
                        type: "structure",
                        members: {
                            IamRoleArn: {},
                            ProtectedResourceArns: {
                                shape: "S26"
                            },
                            ProtectedResourceConditions: {
                                shape: "S2l"
                            },
                            RestoreMetadataOverrides: {
                                shape: "S2g"
                            },
                            ValidationWindowHours: {
                                type: "integer"
                            }
                        }
                    },
                    RestoreTestingSelectionName: {
                        location: "uri",
                        locationName: "RestoreTestingSelectionName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreationTime", "RestoreTestingPlanArn", "RestoreTestingPlanName", "RestoreTestingSelectionName", "UpdateTime" ],
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    RestoreTestingPlanArn: {},
                    RestoreTestingPlanName: {},
                    RestoreTestingSelectionName: {},
                    UpdateTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "BackupPlanName", "Rules" ],
            members: {
                BackupPlanName: {},
                Rules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleName", "TargetBackupVaultName" ],
                        members: {
                            RuleName: {},
                            TargetBackupVaultName: {},
                            ScheduleExpression: {},
                            StartWindowMinutes: {
                                type: "long"
                            },
                            CompletionWindowMinutes: {
                                type: "long"
                            },
                            Lifecycle: {
                                shape: "Se"
                            },
                            RecoveryPointTags: {
                                shape: "Sg"
                            },
                            CopyActions: {
                                shape: "Sj"
                            },
                            EnableContinuousBackup: {
                                type: "boolean"
                            },
                            ScheduleExpressionTimezone: {}
                        }
                    }
                },
                AdvancedBackupSettings: {
                    shape: "Sn"
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                MoveToColdStorageAfterDays: {
                    type: "long"
                },
                DeleteAfterDays: {
                    type: "long"
                },
                OptInToArchiveForSupportedResources: {
                    type: "boolean"
                }
            }
        },
        Sg: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DestinationBackupVaultArn" ],
                members: {
                    Lifecycle: {
                        shape: "Se"
                    },
                    DestinationBackupVaultArn: {}
                }
            }
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    BackupOptions: {
                        shape: "Sq"
                    }
                }
            }
        },
        Sq: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            required: [ "SelectionName", "IamRoleArn" ],
            members: {
                SelectionName: {},
                IamRoleArn: {},
                Resources: {
                    shape: "Sz"
                },
                ListOfTags: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ConditionType", "ConditionKey", "ConditionValue" ],
                        members: {
                            ConditionType: {},
                            ConditionKey: {},
                            ConditionValue: {}
                        }
                    }
                },
                NotResources: {
                    shape: "Sz"
                },
                Conditions: {
                    type: "structure",
                    members: {
                        StringEquals: {
                            shape: "S16"
                        },
                        StringNotEquals: {
                            shape: "S16"
                        },
                        StringLike: {
                            shape: "S16"
                        },
                        StringNotLike: {
                            shape: "S16"
                        }
                    }
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ConditionKey: {},
                    ConditionValue: {}
                }
            }
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ControlName" ],
                members: {
                    ControlName: {},
                    ControlInputParameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterName: {},
                                ParameterValue: {}
                            }
                        }
                    },
                    ControlScope: {
                        type: "structure",
                        members: {
                            ComplianceResourceIds: {
                                type: "list",
                                member: {}
                            },
                            ComplianceResourceTypes: {
                                type: "list",
                                member: {}
                            },
                            Tags: {
                                shape: "S1o"
                            }
                        }
                    }
                }
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        },
        S1r: {
            type: "structure",
            members: {
                VaultNames: {
                    type: "list",
                    member: {}
                },
                ResourceIdentifiers: {
                    type: "list",
                    member: {}
                },
                DateRange: {
                    type: "structure",
                    required: [ "FromDate", "ToDate" ],
                    members: {
                        FromDate: {
                            type: "timestamp"
                        },
                        ToDate: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S23: {
            type: "structure",
            required: [ "S3BucketName" ],
            members: {
                S3BucketName: {},
                S3KeyPrefix: {},
                Formats: {
                    type: "list",
                    member: {}
                }
            }
        },
        S25: {
            type: "structure",
            required: [ "ReportTemplate" ],
            members: {
                ReportTemplate: {},
                FrameworkArns: {
                    shape: "S26"
                },
                NumberOfFrameworks: {
                    type: "integer"
                },
                Accounts: {
                    shape: "S26"
                },
                OrganizationUnits: {
                    shape: "S26"
                },
                Regions: {
                    shape: "S26"
                }
            }
        },
        S26: {
            type: "list",
            member: {}
        },
        S2c: {
            type: "structure",
            members: {
                Algorithm: {},
                ExcludeVaults: {
                    shape: "S26"
                },
                IncludeVaults: {
                    shape: "S26"
                },
                RecoveryPointTypes: {
                    type: "list",
                    member: {}
                },
                SelectionWindowDays: {
                    type: "integer"
                }
            }
        },
        S2g: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S2l: {
            type: "structure",
            members: {
                StringEquals: {
                    shape: "S2m"
                },
                StringNotEquals: {
                    shape: "S2m"
                }
            }
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                BackupPlanId: {},
                BackupPlanArn: {},
                BackupPlanVersion: {},
                BackupRuleId: {}
            }
        },
        S3e: {
            type: "structure",
            members: {
                AccountId: {},
                CopyJobId: {},
                SourceBackupVaultArn: {},
                SourceRecoveryPointArn: {},
                DestinationBackupVaultArn: {},
                DestinationRecoveryPointArn: {},
                ResourceArn: {},
                CreationDate: {
                    type: "timestamp"
                },
                CompletionDate: {
                    type: "timestamp"
                },
                State: {},
                StatusMessage: {},
                BackupSizeInBytes: {
                    type: "long"
                },
                IamRoleArn: {},
                CreatedBy: {
                    shape: "S35"
                },
                ResourceType: {},
                ParentJobId: {},
                IsParent: {
                    type: "boolean"
                },
                CompositeMemberIdentifier: {},
                NumberOfChildJobs: {
                    type: "long"
                },
                ChildJobsInState: {
                    type: "map",
                    key: {},
                    value: {
                        type: "long"
                    }
                },
                ResourceName: {},
                MessageCategory: {}
            }
        },
        S3l: {
            type: "map",
            key: {},
            value: {}
        },
        S3t: {
            type: "structure",
            members: {
                MoveToColdStorageAt: {
                    type: "timestamp"
                },
                DeleteAt: {
                    type: "timestamp"
                }
            }
        },
        S3x: {
            type: "map",
            key: {},
            value: {
                type: "boolean"
            }
        },
        S3z: {
            type: "map",
            key: {},
            value: {
                type: "boolean"
            }
        },
        S43: {
            type: "structure",
            members: {
                ReportJobId: {},
                ReportPlanArn: {},
                ReportTemplate: {},
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                Status: {},
                StatusMessage: {},
                ReportDestination: {
                    type: "structure",
                    members: {
                        S3BucketName: {},
                        S3Keys: {
                            shape: "S26"
                        }
                    }
                }
            }
        },
        S47: {
            type: "structure",
            members: {
                ReportPlanArn: {},
                ReportPlanName: {},
                ReportPlanDescription: {},
                ReportSetting: {
                    shape: "S25"
                },
                ReportDeliveryChannel: {
                    shape: "S23"
                },
                DeploymentStatus: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastAttemptedExecutionTime: {
                    type: "timestamp"
                },
                LastSuccessfulExecutionTime: {
                    type: "timestamp"
                }
            }
        },
        S4c: {
            type: "structure",
            members: {
                RestoreTestingPlanArn: {}
            }
        },
        S4l: {
            type: "structure",
            required: [ "BackupPlanName", "Rules" ],
            members: {
                BackupPlanName: {},
                Rules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleName", "TargetBackupVaultName" ],
                        members: {
                            RuleName: {},
                            TargetBackupVaultName: {},
                            ScheduleExpression: {},
                            StartWindowMinutes: {
                                type: "long"
                            },
                            CompletionWindowMinutes: {
                                type: "long"
                            },
                            Lifecycle: {
                                shape: "Se"
                            },
                            RecoveryPointTags: {
                                shape: "Sg"
                            },
                            RuleId: {},
                            CopyActions: {
                                shape: "Sj"
                            },
                            EnableContinuousBackup: {
                                type: "boolean"
                            },
                            ScheduleExpressionTimezone: {}
                        }
                    }
                },
                AdvancedBackupSettings: {
                    shape: "Sn"
                }
            }
        },
        S4z: {
            type: "list",
            member: {}
        },
        S55: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S64: {
            type: "structure",
            members: {
                BackupPlanArn: {},
                BackupPlanId: {},
                CreationDate: {
                    type: "timestamp"
                },
                DeletionDate: {
                    type: "timestamp"
                },
                VersionId: {},
                BackupPlanName: {},
                CreatorRequestId: {},
                LastExecutionDate: {
                    type: "timestamp"
                },
                AdvancedBackupSettings: {
                    shape: "Sn"
                }
            }
        },
        S6z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ResourceType: {},
                    LastBackupTime: {
                        type: "timestamp"
                    },
                    ResourceName: {},
                    LastBackupVaultArn: {},
                    LastRecoveryPointArn: {}
                }
            }
        },
        S7s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    RestoreJobId: {},
                    RecoveryPointArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CompletionDate: {
                        type: "timestamp"
                    },
                    Status: {},
                    StatusMessage: {},
                    PercentDone: {},
                    BackupSizeInBytes: {
                        type: "long"
                    },
                    IamRoleArn: {},
                    ExpectedCompletionTimeMinutes: {
                        type: "long"
                    },
                    CreatedResourceArn: {},
                    ResourceType: {},
                    RecoveryPointCreationDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "S4c"
                    },
                    ValidationStatus: {},
                    ValidationStatusMessage: {},
                    DeletionStatus: {},
                    DeletionStatusMessage: {}
                }
            }
        }
    },
    paginators: {
        ListBackupJobSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBackupJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BackupJobs"
        },
        ListBackupPlanTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BackupPlanTemplatesList"
        },
        ListBackupPlanVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BackupPlanVersionsList"
        },
        ListBackupPlans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BackupPlansList"
        },
        ListBackupSelections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BackupSelectionsList"
        },
        ListBackupVaults: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BackupVaultList"
        },
        ListCopyJobSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCopyJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CopyJobs"
        },
        ListFrameworks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLegalHolds: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LegalHolds"
        },
        ListProtectedResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Results"
        },
        ListProtectedResourcesByBackupVault: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Results"
        },
        ListRecoveryPointsByBackupVault: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RecoveryPoints"
        },
        ListRecoveryPointsByLegalHold: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RecoveryPoints"
        },
        ListRecoveryPointsByResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RecoveryPoints"
        },
        ListReportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListReportPlans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRestoreJobSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRestoreJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RestoreJobs"
        },
        ListRestoreJobsByProtectedResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RestoreJobs"
        },
        ListRestoreTestingPlans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RestoreTestingPlans"
        },
        ListRestoreTestingSelections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RestoreTestingSelections"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["worklink"] = {};

AWS.WorkLink = AWS.Service.defineService("worklink", [ "2018-09-25" ]);

AWS.apiLoader.services["worklink"]["2018-09-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-25",
        endpointPrefix: "worklink",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "WorkLink",
        serviceFullName: "Amazon WorkLink",
        serviceId: "WorkLink",
        signatureVersion: "v4",
        signingName: "worklink",
        uid: "worklink-2018-09-25"
    },
    operations: {
        AssociateDomain: {
            http: {
                requestUri: "/associateDomain"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName", "AcmCertificateArn" ],
                members: {
                    FleetArn: {},
                    DomainName: {},
                    DisplayName: {},
                    AcmCertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        AssociateWebsiteAuthorizationProvider: {
            http: {
                requestUri: "/associateWebsiteAuthorizationProvider"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "AuthorizationProviderType" ],
                members: {
                    FleetArn: {},
                    AuthorizationProviderType: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizationProviderId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        AssociateWebsiteCertificateAuthority: {
            http: {
                requestUri: "/associateWebsiteCertificateAuthority"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "Certificate" ],
                members: {
                    FleetArn: {},
                    Certificate: {},
                    DisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebsiteCaId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        CreateFleet: {
            http: {
                requestUri: "/createFleet"
            },
            input: {
                type: "structure",
                required: [ "FleetName" ],
                members: {
                    FleetName: {},
                    DisplayName: {},
                    OptimizeForEndUserLocation: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DeleteFleet: {
            http: {
                requestUri: "/deleteFleet"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeAuditStreamConfiguration: {
            http: {
                requestUri: "/describeAuditStreamConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuditStreamArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeCompanyNetworkConfiguration: {
            http: {
                requestUri: "/describeCompanyNetworkConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcId: {},
                    SubnetIds: {
                        shape: "St"
                    },
                    SecurityGroupIds: {
                        shape: "Sv"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeDevice: {
            http: {
                requestUri: "/describeDevice"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DeviceId" ],
                members: {
                    FleetArn: {},
                    DeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    Model: {},
                    Manufacturer: {},
                    OperatingSystem: {},
                    OperatingSystemVersion: {},
                    PatchLevel: {},
                    FirstAccessedTime: {
                        type: "timestamp"
                    },
                    LastAccessedTime: {
                        type: "timestamp"
                    },
                    Username: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeDevicePolicyConfiguration: {
            http: {
                requestUri: "/describeDevicePolicyConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceCaCertificate: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeDomain: {
            http: {
                requestUri: "/describeDomain"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainName: {},
                    DisplayName: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DomainStatus: {},
                    AcmCertificateArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeFleetMetadata: {
            http: {
                requestUri: "/describeFleetMetadata"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    FleetName: {},
                    DisplayName: {},
                    OptimizeForEndUserLocation: {
                        type: "boolean"
                    },
                    CompanyCode: {},
                    FleetStatus: {},
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeIdentityProviderConfiguration: {
            http: {
                requestUri: "/describeIdentityProviderConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityProviderType: {},
                    ServiceProviderSamlMetadata: {},
                    IdentityProviderSamlMetadata: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DescribeWebsiteCertificateAuthority: {
            http: {
                requestUri: "/describeWebsiteCertificateAuthority"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "WebsiteCaId" ],
                members: {
                    FleetArn: {},
                    WebsiteCaId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DisplayName: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DisassociateDomain: {
            http: {
                requestUri: "/disassociateDomain"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DisassociateWebsiteAuthorizationProvider: {
            http: {
                requestUri: "/disassociateWebsiteAuthorizationProvider"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "AuthorizationProviderId" ],
                members: {
                    FleetArn: {},
                    AuthorizationProviderId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        DisassociateWebsiteCertificateAuthority: {
            http: {
                requestUri: "/disassociateWebsiteCertificateAuthority"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "WebsiteCaId" ],
                members: {
                    FleetArn: {},
                    WebsiteCaId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        ListDevices: {
            http: {
                requestUri: "/listDevices"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceId: {},
                                DeviceStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        ListDomains: {
            http: {
                requestUri: "/listDomains"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DomainName", "CreatedTime", "DomainStatus" ],
                            members: {
                                DomainName: {},
                                DisplayName: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DomainStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        ListFleets: {
            http: {
                requestUri: "/listFleets"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FleetArn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                FleetName: {},
                                DisplayName: {},
                                CompanyCode: {},
                                FleetStatus: {},
                                Tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        ListWebsiteAuthorizationProviders: {
            http: {
                requestUri: "/listWebsiteAuthorizationProviders"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebsiteAuthorizationProviders: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AuthorizationProviderType" ],
                            members: {
                                AuthorizationProviderId: {},
                                AuthorizationProviderType: {},
                                DomainName: {},
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        ListWebsiteCertificateAuthorities: {
            http: {
                requestUri: "/listWebsiteCertificateAuthorities"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebsiteCertificateAuthorities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WebsiteCaId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DisplayName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        RestoreDomainAccess: {
            http: {
                requestUri: "/restoreDomainAccess"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        RevokeDomainAccess: {
            http: {
                requestUri: "/revokeDomainAccess"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        SignOutUser: {
            http: {
                requestUri: "/signOutUser"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "Username" ],
                members: {
                    FleetArn: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        UpdateAuditStreamConfiguration: {
            http: {
                requestUri: "/updateAuditStreamConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    AuditStreamArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        UpdateCompanyNetworkConfiguration: {
            http: {
                requestUri: "/updateCompanyNetworkConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "VpcId", "SubnetIds", "SecurityGroupIds" ],
                members: {
                    FleetArn: {},
                    VpcId: {},
                    SubnetIds: {
                        shape: "St"
                    },
                    SecurityGroupIds: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        UpdateDevicePolicyConfiguration: {
            http: {
                requestUri: "/updateDevicePolicyConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    DeviceCaCertificate: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        UpdateDomainMetadata: {
            http: {
                requestUri: "/updateDomainMetadata"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {},
                    DisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        UpdateFleetMetadata: {
            http: {
                requestUri: "/UpdateFleetMetadata"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    DisplayName: {},
                    OptimizeForEndUserLocation: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        },
        UpdateIdentityProviderConfiguration: {
            http: {
                requestUri: "/updateIdentityProviderConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "IdentityProviderType" ],
                members: {
                    FleetArn: {},
                    IdentityProviderType: {},
                    IdentityProviderSamlMetadata: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK."
        }
    },
    shapes: {
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFleets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWebsiteAuthorizationProviders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWebsiteCertificateAuthorities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["textract"] = {};

AWS.Textract = AWS.Service.defineService("textract", [ "2018-06-27" ]);

AWS.apiLoader.services["textract"]["2018-06-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-27",
        endpointPrefix: "textract",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Textract",
        serviceId: "Textract",
        signatureVersion: "v4",
        targetPrefix: "Textract",
        uid: "textract-2018-06-27"
    },
    operations: {
        AnalyzeDocument: {
            input: {
                type: "structure",
                required: [ "Document", "FeatureTypes" ],
                members: {
                    Document: {
                        shape: "S2"
                    },
                    FeatureTypes: {
                        shape: "S8"
                    },
                    HumanLoopConfig: {
                        type: "structure",
                        required: [ "HumanLoopName", "FlowDefinitionArn" ],
                        members: {
                            HumanLoopName: {},
                            FlowDefinitionArn: {},
                            DataAttributes: {
                                type: "structure",
                                members: {
                                    ContentClassifiers: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    },
                    QueriesConfig: {
                        shape: "Sg"
                    },
                    AdaptersConfig: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    Blocks: {
                        shape: "Sw"
                    },
                    HumanLoopActivationOutput: {
                        type: "structure",
                        members: {
                            HumanLoopArn: {},
                            HumanLoopActivationReasons: {
                                type: "list",
                                member: {}
                            },
                            HumanLoopActivationConditionsEvaluationResults: {
                                jsonvalue: true
                            }
                        }
                    },
                    AnalyzeDocumentModelVersion: {}
                }
            }
        },
        AnalyzeExpense: {
            input: {
                type: "structure",
                required: [ "Document" ],
                members: {
                    Document: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    ExpenseDocuments: {
                        shape: "S1m"
                    }
                }
            }
        },
        AnalyzeID: {
            input: {
                type: "structure",
                required: [ "DocumentPages" ],
                members: {
                    DocumentPages: {
                        type: "list",
                        member: {
                            shape: "S2"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityDocuments: {
                        type: "list",
                        member: {
                            shape: "S24"
                        }
                    },
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    AnalyzeIDModelVersion: {}
                }
            }
        },
        CreateAdapter: {
            input: {
                type: "structure",
                required: [ "AdapterName", "FeatureTypes" ],
                members: {
                    AdapterName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    FeatureTypes: {
                        shape: "S8"
                    },
                    AutoUpdate: {},
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdapterId: {}
                }
            },
            idempotent: true
        },
        CreateAdapterVersion: {
            input: {
                type: "structure",
                required: [ "AdapterId", "DatasetConfig", "OutputConfig" ],
                members: {
                    AdapterId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    DatasetConfig: {
                        shape: "S2k"
                    },
                    KMSKeyId: {},
                    OutputConfig: {
                        shape: "S2m"
                    },
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdapterId: {},
                    AdapterVersion: {}
                }
            },
            idempotent: true
        },
        DeleteAdapter: {
            input: {
                type: "structure",
                required: [ "AdapterId" ],
                members: {
                    AdapterId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAdapterVersion: {
            input: {
                type: "structure",
                required: [ "AdapterId", "AdapterVersion" ],
                members: {
                    AdapterId: {},
                    AdapterVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DetectDocumentText: {
            input: {
                type: "structure",
                required: [ "Document" ],
                members: {
                    Document: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    Blocks: {
                        shape: "Sw"
                    },
                    DetectDocumentTextModelVersion: {}
                }
            }
        },
        GetAdapter: {
            input: {
                type: "structure",
                required: [ "AdapterId" ],
                members: {
                    AdapterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AdapterId: {},
                    AdapterName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    FeatureTypes: {
                        shape: "S8"
                    },
                    AutoUpdate: {},
                    Tags: {
                        shape: "S2f"
                    }
                }
            }
        },
        GetAdapterVersion: {
            input: {
                type: "structure",
                required: [ "AdapterId", "AdapterVersion" ],
                members: {
                    AdapterId: {},
                    AdapterVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AdapterId: {},
                    AdapterVersion: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    FeatureTypes: {
                        shape: "S8"
                    },
                    Status: {},
                    StatusMessage: {},
                    DatasetConfig: {
                        shape: "S2k"
                    },
                    KMSKeyId: {},
                    OutputConfig: {
                        shape: "S2m"
                    },
                    EvaluationMetrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Baseline: {
                                    shape: "S33"
                                },
                                AdapterVersion: {
                                    shape: "S33"
                                },
                                FeatureType: {}
                            }
                        }
                    },
                    Tags: {
                        shape: "S2f"
                    }
                }
            }
        },
        GetDocumentAnalysis: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    JobStatus: {},
                    NextToken: {},
                    Blocks: {
                        shape: "Sw"
                    },
                    Warnings: {
                        shape: "S3a"
                    },
                    StatusMessage: {},
                    AnalyzeDocumentModelVersion: {}
                }
            }
        },
        GetDocumentTextDetection: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    JobStatus: {},
                    NextToken: {},
                    Blocks: {
                        shape: "Sw"
                    },
                    Warnings: {
                        shape: "S3a"
                    },
                    StatusMessage: {},
                    DetectDocumentTextModelVersion: {}
                }
            }
        },
        GetExpenseAnalysis: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    JobStatus: {},
                    NextToken: {},
                    ExpenseDocuments: {
                        shape: "S1m"
                    },
                    Warnings: {
                        shape: "S3a"
                    },
                    StatusMessage: {},
                    AnalyzeExpenseModelVersion: {}
                }
            }
        },
        GetLendingAnalysis: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    JobStatus: {},
                    NextToken: {},
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Page: {
                                    type: "integer"
                                },
                                PageClassification: {
                                    type: "structure",
                                    required: [ "PageType", "PageNumber" ],
                                    members: {
                                        PageType: {
                                            shape: "S3o"
                                        },
                                        PageNumber: {
                                            shape: "S3o"
                                        }
                                    }
                                },
                                Extractions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LendingDocument: {
                                                type: "structure",
                                                members: {
                                                    LendingFields: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {},
                                                                KeyDetection: {
                                                                    shape: "S3v"
                                                                },
                                                                ValueDetections: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3v"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    SignatureDetections: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Confidence: {
                                                                    type: "float"
                                                                },
                                                                Geometry: {
                                                                    shape: "S12"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            ExpenseDocument: {
                                                shape: "S1n"
                                            },
                                            IdentityDocument: {
                                                shape: "S24"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Warnings: {
                        shape: "S3a"
                    },
                    StatusMessage: {},
                    AnalyzeLendingModelVersion: {}
                }
            }
        },
        GetLendingAnalysisSummary: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Su"
                    },
                    JobStatus: {},
                    Summary: {
                        type: "structure",
                        members: {
                            DocumentGroups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        SplitDocuments: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Index: {
                                                        type: "integer"
                                                    },
                                                    Pages: {
                                                        type: "list",
                                                        member: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        DetectedSignatures: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Page: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        },
                                        UndetectedSignatures: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Page: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            UndetectedDocumentTypes: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    Warnings: {
                        shape: "S3a"
                    },
                    StatusMessage: {},
                    AnalyzeLendingModelVersion: {}
                }
            }
        },
        ListAdapterVersions: {
            input: {
                type: "structure",
                members: {
                    AdapterId: {},
                    AfterCreationTime: {
                        type: "timestamp"
                    },
                    BeforeCreationTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AdapterVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AdapterId: {},
                                AdapterVersion: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FeatureTypes: {
                                    shape: "S8"
                                },
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAdapters: {
            input: {
                type: "structure",
                members: {
                    AfterCreationTime: {
                        type: "timestamp"
                    },
                    BeforeCreationTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Adapters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AdapterId: {},
                                AdapterName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FeatureTypes: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2f"
                    }
                }
            }
        },
        StartDocumentAnalysis: {
            input: {
                type: "structure",
                required: [ "DocumentLocation", "FeatureTypes" ],
                members: {
                    DocumentLocation: {
                        shape: "S4o"
                    },
                    FeatureTypes: {
                        shape: "S8"
                    },
                    ClientRequestToken: {},
                    JobTag: {},
                    NotificationChannel: {
                        shape: "S4q"
                    },
                    OutputConfig: {
                        shape: "S2m"
                    },
                    KMSKeyId: {},
                    QueriesConfig: {
                        shape: "Sg"
                    },
                    AdaptersConfig: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartDocumentTextDetection: {
            input: {
                type: "structure",
                required: [ "DocumentLocation" ],
                members: {
                    DocumentLocation: {
                        shape: "S4o"
                    },
                    ClientRequestToken: {},
                    JobTag: {},
                    NotificationChannel: {
                        shape: "S4q"
                    },
                    OutputConfig: {
                        shape: "S2m"
                    },
                    KMSKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartExpenseAnalysis: {
            input: {
                type: "structure",
                required: [ "DocumentLocation" ],
                members: {
                    DocumentLocation: {
                        shape: "S4o"
                    },
                    ClientRequestToken: {},
                    JobTag: {},
                    NotificationChannel: {
                        shape: "S4q"
                    },
                    OutputConfig: {
                        shape: "S2m"
                    },
                    KMSKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartLendingAnalysis: {
            input: {
                type: "structure",
                required: [ "DocumentLocation" ],
                members: {
                    DocumentLocation: {
                        shape: "S4o"
                    },
                    ClientRequestToken: {},
                    JobTag: {},
                    NotificationChannel: {
                        shape: "S4q"
                    },
                    OutputConfig: {
                        shape: "S2m"
                    },
                    KMSKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAdapter: {
            input: {
                type: "structure",
                required: [ "AdapterId" ],
                members: {
                    AdapterId: {},
                    Description: {},
                    AdapterName: {},
                    AutoUpdate: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AdapterId: {},
                    AdapterName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    FeatureTypes: {
                        shape: "S8"
                    },
                    AutoUpdate: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                Bytes: {
                    type: "blob"
                },
                S3Object: {
                    shape: "S4"
                }
            }
        },
        S4: {
            type: "structure",
            members: {
                Bucket: {},
                Name: {},
                Version: {}
            }
        },
        S8: {
            type: "list",
            member: {}
        },
        Sg: {
            type: "structure",
            required: [ "Queries" ],
            members: {
                Queries: {
                    type: "list",
                    member: {
                        shape: "Si"
                    }
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "Text" ],
            members: {
                Text: {},
                Alias: {},
                Pages: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "Adapters" ],
            members: {
                Adapters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AdapterId", "Version" ],
                        members: {
                            AdapterId: {},
                            Pages: {
                                type: "list",
                                member: {}
                            },
                            Version: {}
                        }
                    }
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                Pages: {
                    type: "integer"
                }
            }
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    BlockType: {},
                    Confidence: {
                        type: "float"
                    },
                    Text: {},
                    TextType: {},
                    RowIndex: {
                        type: "integer"
                    },
                    ColumnIndex: {
                        type: "integer"
                    },
                    RowSpan: {
                        type: "integer"
                    },
                    ColumnSpan: {
                        type: "integer"
                    },
                    Geometry: {
                        shape: "S12"
                    },
                    Id: {},
                    Relationships: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Ids: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    EntityTypes: {
                        type: "list",
                        member: {}
                    },
                    SelectionStatus: {},
                    Page: {
                        type: "integer"
                    },
                    Query: {
                        shape: "Si"
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                BoundingBox: {
                    type: "structure",
                    members: {
                        Width: {
                            type: "float"
                        },
                        Height: {
                            type: "float"
                        },
                        Left: {
                            type: "float"
                        },
                        Top: {
                            type: "float"
                        }
                    }
                },
                Polygon: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            X: {
                                type: "float"
                            },
                            Y: {
                                type: "float"
                            }
                        }
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                shape: "S1n"
            }
        },
        S1n: {
            type: "structure",
            members: {
                ExpenseIndex: {
                    type: "integer"
                },
                SummaryFields: {
                    shape: "S1o"
                },
                LineItemGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            LineItemGroupIndex: {
                                type: "integer"
                            },
                            LineItems: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        LineItemExpenseFields: {
                                            shape: "S1o"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Blocks: {
                    shape: "Sw"
                }
            }
        },
        S1o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {
                        type: "structure",
                        members: {
                            Text: {},
                            Confidence: {
                                type: "float"
                            }
                        }
                    },
                    LabelDetection: {
                        shape: "S1r"
                    },
                    ValueDetection: {
                        shape: "S1r"
                    },
                    PageNumber: {
                        type: "integer"
                    },
                    Currency: {
                        type: "structure",
                        members: {
                            Code: {},
                            Confidence: {
                                type: "float"
                            }
                        }
                    },
                    GroupProperties: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Types: {
                                    type: "list",
                                    member: {}
                                },
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            members: {
                Text: {},
                Geometry: {
                    shape: "S12"
                },
                Confidence: {
                    type: "float"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                DocumentIndex: {
                    type: "integer"
                },
                IdentityDocumentFields: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Type: {
                                shape: "S27"
                            },
                            ValueDetection: {
                                shape: "S27"
                            }
                        }
                    }
                },
                Blocks: {
                    shape: "Sw"
                }
            }
        },
        S27: {
            type: "structure",
            required: [ "Text" ],
            members: {
                Text: {},
                NormalizedValue: {
                    type: "structure",
                    members: {
                        Value: {},
                        ValueType: {}
                    }
                },
                Confidence: {
                    type: "float"
                }
            }
        },
        S2f: {
            type: "map",
            key: {},
            value: {}
        },
        S2k: {
            type: "structure",
            members: {
                ManifestS3Object: {
                    shape: "S4"
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3Prefix: {}
            }
        },
        S33: {
            type: "structure",
            members: {
                F1Score: {
                    type: "float"
                },
                Precision: {
                    type: "float"
                },
                Recall: {
                    type: "float"
                }
            }
        },
        S3a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {},
                    Pages: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S3o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {},
                    Confidence: {
                        type: "float"
                    }
                }
            }
        },
        S3v: {
            type: "structure",
            members: {
                Text: {},
                SelectionStatus: {},
                Geometry: {
                    shape: "S12"
                },
                Confidence: {
                    type: "float"
                }
            }
        },
        S4o: {
            type: "structure",
            members: {
                S3Object: {
                    shape: "S4"
                }
            }
        },
        S4q: {
            type: "structure",
            required: [ "SNSTopicArn", "RoleArn" ],
            members: {
                SNSTopicArn: {},
                RoleArn: {}
            }
        }
    },
    paginators: {
        ListAdapterVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AdapterVersions"
        },
        ListAdapters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Adapters"
        }
    }
};

AWS.apiLoader.services["managedblockchain"] = {};

AWS.ManagedBlockchain = AWS.Service.defineService("managedblockchain", [ "2018-09-24" ]);

AWS.apiLoader.services["managedblockchain"]["2018-09-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-24",
        endpointPrefix: "managedblockchain",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "ManagedBlockchain",
        serviceFullName: "Amazon Managed Blockchain",
        serviceId: "ManagedBlockchain",
        signatureVersion: "v4",
        signingName: "managedblockchain",
        uid: "managedblockchain-2018-09-24"
    },
    operations: {
        CreateAccessor: {
            http: {
                requestUri: "/accessors"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "AccessorType" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    AccessorType: {},
                    Tags: {
                        shape: "S4"
                    },
                    NetworkType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessorId: {},
                    BillingToken: {},
                    NetworkType: {}
                }
            }
        },
        CreateMember: {
            http: {
                requestUri: "/networks/{networkId}/members"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "InvitationId", "NetworkId", "MemberConfiguration" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    InvitationId: {},
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberConfiguration: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberId: {}
                }
            }
        },
        CreateNetwork: {
            http: {
                requestUri: "/networks"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "Name", "Framework", "FrameworkVersion", "VotingPolicy", "MemberConfiguration" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Description: {},
                    Framework: {},
                    FrameworkVersion: {},
                    FrameworkConfiguration: {
                        type: "structure",
                        members: {
                            Fabric: {
                                type: "structure",
                                required: [ "Edition" ],
                                members: {
                                    Edition: {}
                                }
                            }
                        }
                    },
                    VotingPolicy: {
                        shape: "Sx"
                    },
                    MemberConfiguration: {
                        shape: "Sc"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkId: {},
                    MemberId: {}
                }
            }
        },
        CreateNode: {
            http: {
                requestUri: "/networks/{networkId}/nodes"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "NetworkId", "NodeConfiguration" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {},
                    NodeConfiguration: {
                        type: "structure",
                        required: [ "InstanceType" ],
                        members: {
                            InstanceType: {},
                            AvailabilityZone: {},
                            LogPublishingConfiguration: {
                                shape: "S17"
                            },
                            StateDB: {}
                        }
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NodeId: {}
                }
            }
        },
        CreateProposal: {
            http: {
                requestUri: "/networks/{networkId}/proposals"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "NetworkId", "MemberId", "Actions" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {},
                    Actions: {
                        shape: "S1c"
                    },
                    Description: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProposalId: {}
                }
            }
        },
        DeleteAccessor: {
            http: {
                method: "DELETE",
                requestUri: "/accessors/{AccessorId}"
            },
            input: {
                type: "structure",
                required: [ "AccessorId" ],
                members: {
                    AccessorId: {
                        location: "uri",
                        locationName: "AccessorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMember: {
            http: {
                method: "DELETE",
                requestUri: "/networks/{networkId}/members/{memberId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "MemberId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNode: {
            http: {
                method: "DELETE",
                requestUri: "/networks/{networkId}/nodes/{nodeId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "NodeId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "memberId"
                    },
                    NodeId: {
                        location: "uri",
                        locationName: "nodeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccessor: {
            http: {
                method: "GET",
                requestUri: "/accessors/{AccessorId}"
            },
            input: {
                type: "structure",
                required: [ "AccessorId" ],
                members: {
                    AccessorId: {
                        location: "uri",
                        locationName: "AccessorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accessor: {
                        type: "structure",
                        members: {
                            Id: {},
                            Type: {},
                            BillingToken: {},
                            Status: {},
                            CreationDate: {
                                shape: "S1t"
                            },
                            Arn: {},
                            Tags: {
                                shape: "S1u"
                            },
                            NetworkType: {}
                        }
                    }
                }
            }
        },
        GetMember: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/members/{memberId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "MemberId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Member: {
                        type: "structure",
                        members: {
                            NetworkId: {},
                            Id: {},
                            Name: {},
                            Description: {},
                            FrameworkAttributes: {
                                type: "structure",
                                members: {
                                    Fabric: {
                                        type: "structure",
                                        members: {
                                            AdminUsername: {},
                                            CaEndpoint: {}
                                        }
                                    }
                                }
                            },
                            LogPublishingConfiguration: {
                                shape: "Sj"
                            },
                            Status: {},
                            CreationDate: {
                                shape: "S1t"
                            },
                            Tags: {
                                shape: "S1u"
                            },
                            Arn: {},
                            KmsKeyArn: {}
                        }
                    }
                }
            }
        },
        GetNetwork: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Network: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Description: {},
                            Framework: {},
                            FrameworkVersion: {},
                            FrameworkAttributes: {
                                type: "structure",
                                members: {
                                    Fabric: {
                                        type: "structure",
                                        members: {
                                            OrderingServiceEndpoint: {},
                                            Edition: {}
                                        }
                                    },
                                    Ethereum: {
                                        type: "structure",
                                        members: {
                                            ChainId: {}
                                        }
                                    }
                                }
                            },
                            VpcEndpointServiceName: {},
                            VotingPolicy: {
                                shape: "Sx"
                            },
                            Status: {},
                            CreationDate: {
                                shape: "S1t"
                            },
                            Tags: {
                                shape: "S1u"
                            },
                            Arn: {}
                        }
                    }
                }
            }
        },
        GetNode: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/nodes/{nodeId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "NodeId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "memberId"
                    },
                    NodeId: {
                        location: "uri",
                        locationName: "nodeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Node: {
                        type: "structure",
                        members: {
                            NetworkId: {},
                            MemberId: {},
                            Id: {},
                            InstanceType: {},
                            AvailabilityZone: {},
                            FrameworkAttributes: {
                                type: "structure",
                                members: {
                                    Fabric: {
                                        type: "structure",
                                        members: {
                                            PeerEndpoint: {},
                                            PeerEventEndpoint: {}
                                        }
                                    },
                                    Ethereum: {
                                        type: "structure",
                                        members: {
                                            HttpEndpoint: {},
                                            WebSocketEndpoint: {}
                                        }
                                    }
                                }
                            },
                            LogPublishingConfiguration: {
                                shape: "S17"
                            },
                            StateDB: {},
                            Status: {},
                            CreationDate: {
                                shape: "S1t"
                            },
                            Tags: {
                                shape: "S1u"
                            },
                            Arn: {},
                            KmsKeyArn: {}
                        }
                    }
                }
            }
        },
        GetProposal: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/proposals/{proposalId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "ProposalId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    ProposalId: {
                        location: "uri",
                        locationName: "proposalId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proposal: {
                        type: "structure",
                        members: {
                            ProposalId: {},
                            NetworkId: {},
                            Description: {},
                            Actions: {
                                shape: "S1c"
                            },
                            ProposedByMemberId: {},
                            ProposedByMemberName: {},
                            Status: {},
                            CreationDate: {
                                shape: "S1t"
                            },
                            ExpirationDate: {
                                shape: "S1t"
                            },
                            YesVoteCount: {
                                type: "integer"
                            },
                            NoVoteCount: {
                                type: "integer"
                            },
                            OutstandingVoteCount: {
                                type: "integer"
                            },
                            Tags: {
                                shape: "S1u"
                            },
                            Arn: {}
                        }
                    }
                }
            }
        },
        ListAccessors: {
            http: {
                method: "GET",
                requestUri: "/accessors"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    NetworkType: {
                        location: "querystring",
                        locationName: "networkType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accessors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                Status: {},
                                CreationDate: {
                                    shape: "S1t"
                                },
                                Arn: {},
                                NetworkType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitations"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InvitationId: {},
                                CreationDate: {
                                    shape: "S1t"
                                },
                                ExpirationDate: {
                                    shape: "S1t"
                                },
                                Status: {},
                                NetworkSummary: {
                                    shape: "S2x"
                                },
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/members"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    IsOwned: {
                        location: "querystring",
                        locationName: "isOwned",
                        type: "boolean"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Description: {},
                                Status: {},
                                CreationDate: {
                                    shape: "S1t"
                                },
                                IsOwned: {
                                    type: "boolean"
                                },
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNetworks: {
            http: {
                method: "GET",
                requestUri: "/networks"
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    Framework: {
                        location: "querystring",
                        locationName: "framework"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Networks: {
                        type: "list",
                        member: {
                            shape: "S2x"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNodes: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/nodes"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "memberId"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Nodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Status: {},
                                CreationDate: {
                                    shape: "S1t"
                                },
                                AvailabilityZone: {},
                                InstanceType: {},
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProposalVotes: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/proposals/{proposalId}/votes"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "ProposalId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    ProposalId: {
                        location: "uri",
                        locationName: "proposalId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProposalVotes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Vote: {},
                                MemberName: {},
                                MemberId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProposals: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/proposals"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proposals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProposalId: {},
                                Description: {},
                                ProposedByMemberId: {},
                                ProposedByMemberName: {},
                                Status: {},
                                CreationDate: {
                                    shape: "S1t"
                                },
                                ExpirationDate: {
                                    shape: "S1t"
                                },
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1u"
                    }
                }
            }
        },
        RejectInvitation: {
            http: {
                method: "DELETE",
                requestUri: "/invitations/{invitationId}"
            },
            input: {
                type: "structure",
                required: [ "InvitationId" ],
                members: {
                    InvitationId: {
                        location: "uri",
                        locationName: "invitationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMember: {
            http: {
                method: "PATCH",
                requestUri: "/networks/{networkId}/members/{memberId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "MemberId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    },
                    LogPublishingConfiguration: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNode: {
            http: {
                method: "PATCH",
                requestUri: "/networks/{networkId}/nodes/{nodeId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "NodeId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {},
                    NodeId: {
                        location: "uri",
                        locationName: "nodeId"
                    },
                    LogPublishingConfiguration: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        VoteOnProposal: {
            http: {
                requestUri: "/networks/{networkId}/proposals/{proposalId}/votes"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "ProposalId", "VoterMemberId", "Vote" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    ProposalId: {
                        location: "uri",
                        locationName: "proposalId"
                    },
                    VoterMemberId: {},
                    Vote: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "structure",
            required: [ "Name", "FrameworkConfiguration" ],
            members: {
                Name: {},
                Description: {},
                FrameworkConfiguration: {
                    type: "structure",
                    members: {
                        Fabric: {
                            type: "structure",
                            required: [ "AdminUsername", "AdminPassword" ],
                            members: {
                                AdminUsername: {},
                                AdminPassword: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    }
                },
                LogPublishingConfiguration: {
                    shape: "Sj"
                },
                Tags: {
                    shape: "S4"
                },
                KmsKeyArn: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                Fabric: {
                    type: "structure",
                    members: {
                        CaLogs: {
                            shape: "Sl"
                        }
                    }
                }
            }
        },
        Sl: {
            type: "structure",
            members: {
                Cloudwatch: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                ApprovalThresholdPolicy: {
                    type: "structure",
                    members: {
                        ThresholdPercentage: {
                            type: "integer"
                        },
                        ProposalDurationInHours: {
                            type: "integer"
                        },
                        ThresholdComparator: {}
                    }
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                Fabric: {
                    type: "structure",
                    members: {
                        ChaincodeLogs: {
                            shape: "Sl"
                        },
                        PeerLogs: {
                            shape: "Sl"
                        }
                    }
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                Invitations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Principal" ],
                        members: {
                            Principal: {}
                        }
                    }
                },
                Removals: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "MemberId" ],
                        members: {
                            MemberId: {}
                        }
                    }
                }
            }
        },
        S1t: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1u: {
            type: "map",
            key: {},
            value: {}
        },
        S2x: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {},
                Framework: {},
                FrameworkVersion: {},
                Status: {},
                CreationDate: {
                    shape: "S1t"
                },
                Arn: {}
            }
        }
    },
    paginators: {
        ListAccessors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Accessors"
        },
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNetworks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProposalVotes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProposals: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mediapackagevod"] = {};

AWS.MediaPackageVod = AWS.Service.defineService("mediapackagevod", [ "2018-11-07" ]);

AWS.apiLoader.services["mediapackagevod"]["2018-11-07"] = {
    metadata: {
        apiVersion: "2018-11-07",
        endpointPrefix: "mediapackage-vod",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "MediaPackage Vod",
        serviceFullName: "AWS Elemental MediaPackage VOD",
        serviceId: "MediaPackage Vod",
        signatureVersion: "v4",
        signingName: "mediapackage-vod",
        uid: "mediapackage-vod-2018-11-07"
    },
    operations: {
        ConfigureLogs: {
            http: {
                method: "PUT",
                requestUri: "/packaging_groups/{id}/configure_logs",
                responseCode: 200
            },
            input: {
                members: {
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        CreateAsset: {
            http: {
                requestUri: "/assets",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        locationName: "id"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    ResourceId: {
                        locationName: "resourceId"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    },
                    SourceRoleArn: {
                        locationName: "sourceRoleArn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                required: [ "SourceArn", "Id", "PackagingGroupId", "SourceRoleArn" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EgressEndpoints: {
                        locationName: "egressEndpoints",
                        shape: "S9"
                    },
                    Id: {
                        locationName: "id"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    ResourceId: {
                        locationName: "resourceId"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    },
                    SourceRoleArn: {
                        locationName: "sourceRoleArn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        CreatePackagingConfiguration: {
            http: {
                requestUri: "/packaging_configurations",
                responseCode: 200
            },
            input: {
                members: {
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sc"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "Sq"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S10"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S13"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                required: [ "Id", "PackagingGroupId" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sc"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "Sq"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S10"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S13"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        CreatePackagingGroup: {
            http: {
                requestUri: "/packaging_groups",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        DeleteAsset: {
            http: {
                method: "DELETE",
                requestUri: "/assets/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeletePackagingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/packaging_configurations/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeletePackagingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/packaging_groups/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DescribeAsset: {
            http: {
                method: "GET",
                requestUri: "/assets/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EgressEndpoints: {
                        locationName: "egressEndpoints",
                        shape: "S9"
                    },
                    Id: {
                        locationName: "id"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    ResourceId: {
                        locationName: "resourceId"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    },
                    SourceRoleArn: {
                        locationName: "sourceRoleArn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        DescribePackagingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/packaging_configurations/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sc"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "Sq"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S10"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S13"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        DescribePackagingGroup: {
            http: {
                method: "GET",
                requestUri: "/packaging_groups/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    ApproximateAssetCount: {
                        locationName: "approximateAssetCount",
                        type: "integer"
                    },
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        ListAssets: {
            http: {
                method: "GET",
                requestUri: "/assets",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    PackagingGroupId: {
                        location: "querystring",
                        locationName: "packagingGroupId"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    Assets: {
                        locationName: "assets",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                PackagingGroupId: {
                                    locationName: "packagingGroupId"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                SourceArn: {
                                    locationName: "sourceArn"
                                },
                                SourceRoleArn: {
                                    locationName: "sourceRoleArn"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S6"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            }
        },
        ListPackagingConfigurations: {
            http: {
                method: "GET",
                requestUri: "/packaging_configurations",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    PackagingGroupId: {
                        location: "querystring",
                        locationName: "packagingGroupId"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    PackagingConfigurations: {
                        locationName: "packagingConfigurations",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CmafPackage: {
                                    locationName: "cmafPackage",
                                    shape: "Sc"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                DashPackage: {
                                    locationName: "dashPackage",
                                    shape: "Sq"
                                },
                                HlsPackage: {
                                    locationName: "hlsPackage",
                                    shape: "S10"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                MssPackage: {
                                    locationName: "mssPackage",
                                    shape: "S13"
                                },
                                PackagingGroupId: {
                                    locationName: "packagingGroupId"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S6"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    }
                },
                type: "structure"
            }
        },
        ListPackagingGroups: {
            http: {
                method: "GET",
                requestUri: "/packaging_groups",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    PackagingGroups: {
                        locationName: "packagingGroups",
                        member: {
                            members: {
                                ApproximateAssetCount: {
                                    locationName: "approximateAssetCount",
                                    type: "integer"
                                },
                                Arn: {
                                    locationName: "arn"
                                },
                                Authorization: {
                                    locationName: "authorization",
                                    shape: "S5"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                DomainName: {
                                    locationName: "domainName"
                                },
                                EgressAccessLogs: {
                                    locationName: "egressAccessLogs",
                                    shape: "S2"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S6"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    }
                },
                type: "structure"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ],
                type: "structure"
            },
            output: {
                members: {
                    Tags: {
                        locationName: "tags",
                        shape: "S21"
                    }
                },
                type: "structure"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S21"
                    }
                },
                required: [ "ResourceArn", "Tags" ],
                type: "structure"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        shape: "Si"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ],
                type: "structure"
            }
        },
        UpdatePackagingGroup: {
            http: {
                method: "PUT",
                requestUri: "/packaging_groups/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    ApproximateAssetCount: {
                        locationName: "approximateAssetCount",
                        type: "integer"
                    },
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        }
    },
    shapes: {
        S2: {
            members: {
                LogGroupName: {
                    locationName: "logGroupName"
                }
            },
            type: "structure"
        },
        S5: {
            members: {
                CdnIdentifierSecret: {
                    locationName: "cdnIdentifierSecret"
                },
                SecretsRoleArn: {
                    locationName: "secretsRoleArn"
                }
            },
            required: [ "SecretsRoleArn", "CdnIdentifierSecret" ],
            type: "structure"
        },
        S6: {
            key: {},
            type: "map",
            value: {}
        },
        S9: {
            member: {
                members: {
                    PackagingConfigurationId: {
                        locationName: "packagingConfigurationId"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Url: {
                        locationName: "url"
                    }
                },
                type: "structure"
            },
            type: "list"
        },
        Sc: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        ConstantInitializationVector: {
                            locationName: "constantInitializationVector"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    shape: "Sj"
                },
                IncludeEncoderConfigurationInSegments: {
                    locationName: "includeEncoderConfigurationInSegments",
                    type: "boolean"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                }
            },
            required: [ "HlsManifests" ],
            type: "structure"
        },
        Se: {
            members: {
                EncryptionContractConfiguration: {
                    locationName: "encryptionContractConfiguration",
                    members: {
                        PresetSpeke20Audio: {
                            locationName: "presetSpeke20Audio"
                        },
                        PresetSpeke20Video: {
                            locationName: "presetSpeke20Video"
                        }
                    },
                    required: [ "PresetSpeke20Audio", "PresetSpeke20Video" ],
                    type: "structure"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SystemIds: {
                    locationName: "systemIds",
                    shape: "Si"
                },
                Url: {
                    locationName: "url"
                }
            },
            required: [ "SystemIds", "Url", "RoleArn" ],
            type: "structure"
        },
        Si: {
            member: {},
            type: "list"
        },
        Sj: {
            member: {
                members: {
                    AdMarkers: {
                        locationName: "adMarkers"
                    },
                    IncludeIframeOnlyStream: {
                        locationName: "includeIframeOnlyStream",
                        type: "boolean"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    ProgramDateTimeIntervalSeconds: {
                        locationName: "programDateTimeIntervalSeconds",
                        type: "integer"
                    },
                    RepeatExtXKey: {
                        locationName: "repeatExtXKey",
                        type: "boolean"
                    },
                    StreamSelection: {
                        locationName: "streamSelection",
                        shape: "So"
                    }
                },
                type: "structure"
            },
            type: "list"
        },
        So: {
            members: {
                MaxVideoBitsPerSecond: {
                    locationName: "maxVideoBitsPerSecond",
                    type: "integer"
                },
                MinVideoBitsPerSecond: {
                    locationName: "minVideoBitsPerSecond",
                    type: "integer"
                },
                StreamOrder: {
                    locationName: "streamOrder"
                }
            },
            type: "structure"
        },
        Sq: {
            members: {
                DashManifests: {
                    locationName: "dashManifests",
                    member: {
                        members: {
                            ManifestLayout: {
                                locationName: "manifestLayout"
                            },
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            MinBufferTimeSeconds: {
                                locationName: "minBufferTimeSeconds",
                                type: "integer"
                            },
                            Profile: {
                                locationName: "profile"
                            },
                            ScteMarkersSource: {
                                locationName: "scteMarkersSource"
                            },
                            StreamSelection: {
                                locationName: "streamSelection",
                                shape: "So"
                            }
                        },
                        type: "structure"
                    },
                    type: "list"
                },
                Encryption: {
                    locationName: "encryption",
                    members: {
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                IncludeEncoderConfigurationInSegments: {
                    locationName: "includeEncoderConfigurationInSegments",
                    type: "boolean"
                },
                IncludeIframeOnlyStream: {
                    locationName: "includeIframeOnlyStream",
                    type: "boolean"
                },
                PeriodTriggers: {
                    locationName: "periodTriggers",
                    member: {},
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentTemplateFormat: {
                    locationName: "segmentTemplateFormat"
                }
            },
            required: [ "DashManifests" ],
            type: "structure"
        },
        S10: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        ConstantInitializationVector: {
                            locationName: "constantInitializationVector"
                        },
                        EncryptionMethod: {
                            locationName: "encryptionMethod"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    shape: "Sj"
                },
                IncludeDvbSubtitles: {
                    locationName: "includeDvbSubtitles",
                    type: "boolean"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                UseAudioRenditionGroup: {
                    locationName: "useAudioRenditionGroup",
                    type: "boolean"
                }
            },
            required: [ "HlsManifests" ],
            type: "structure"
        },
        S13: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                MssManifests: {
                    locationName: "mssManifests",
                    member: {
                        members: {
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            StreamSelection: {
                                locationName: "streamSelection",
                                shape: "So"
                            }
                        },
                        type: "structure"
                    },
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                }
            },
            required: [ "MssManifests" ],
            type: "structure"
        },
        S21: {
            key: {},
            type: "map",
            value: {}
        }
    },
    paginators: {
        ListAssets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Assets"
        },
        ListPackagingConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PackagingConfigurations"
        },
        ListPackagingGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PackagingGroups"
        }
    }
};

AWS.apiLoader.services["groundstation"] = {};

AWS.GroundStation = AWS.Service.defineService("groundstation", [ "2019-05-23" ]);

AWS.apiLoader.services["groundstation"]["2019-05-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-05-23",
        endpointPrefix: "groundstation",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Ground Station",
        serviceId: "GroundStation",
        signatureVersion: "v4",
        signingName: "groundstation",
        uid: "groundstation-2019-05-23"
    },
    operations: {
        CancelContact: {
            http: {
                method: "DELETE",
                requestUri: "/contact/{contactId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contactId" ],
                members: {
                    contactId: {
                        location: "uri",
                        locationName: "contactId"
                    }
                }
            },
            output: {
                shape: "S3"
            },
            idempotent: true
        },
        CreateConfig: {
            http: {
                requestUri: "/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configData", "name" ],
                members: {
                    configData: {
                        shape: "S5"
                    },
                    name: {},
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                shape: "Sz"
            }
        },
        CreateDataflowEndpointGroup: {
            http: {
                requestUri: "/dataflowEndpointGroup",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endpointDetails" ],
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    endpointDetails: {
                        shape: "S13"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                shape: "S1p"
            }
        },
        CreateEphemeris: {
            http: {
                requestUri: "/ephemeris",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "satelliteId" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    ephemeris: {
                        type: "structure",
                        members: {
                            oem: {
                                type: "structure",
                                members: {
                                    oemData: {},
                                    s3Object: {
                                        shape: "S1u"
                                    }
                                }
                            },
                            tle: {
                                type: "structure",
                                members: {
                                    s3Object: {
                                        shape: "S1u"
                                    },
                                    tleData: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "tleLine1", "tleLine2", "validTimeRange" ],
                                            members: {
                                                tleLine1: {},
                                                tleLine2: {},
                                                validTimeRange: {
                                                    type: "structure",
                                                    required: [ "endTime", "startTime" ],
                                                    members: {
                                                        endTime: {
                                                            type: "timestamp"
                                                        },
                                                        startTime: {
                                                            type: "timestamp"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    expirationTime: {
                        type: "timestamp"
                    },
                    kmsKeyArn: {},
                    name: {},
                    priority: {
                        type: "integer"
                    },
                    satelliteId: {},
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                shape: "S27"
            }
        },
        CreateMissionProfile: {
            http: {
                requestUri: "/missionprofile",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataflowEdges", "minimumViableContactDurationSeconds", "name", "trackingConfigArn" ],
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    dataflowEdges: {
                        shape: "S2a"
                    },
                    minimumViableContactDurationSeconds: {
                        type: "integer"
                    },
                    name: {},
                    streamsKmsKey: {
                        shape: "S2d"
                    },
                    streamsKmsRole: {},
                    tags: {
                        shape: "Sy"
                    },
                    trackingConfigArn: {}
                }
            },
            output: {
                shape: "S2g"
            }
        },
        DeleteConfig: {
            http: {
                method: "DELETE",
                requestUri: "/config/{configType}/{configId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configId", "configType" ],
                members: {
                    configId: {
                        location: "uri",
                        locationName: "configId"
                    },
                    configType: {
                        location: "uri",
                        locationName: "configType"
                    }
                }
            },
            output: {
                shape: "Sz"
            },
            idempotent: true
        },
        DeleteDataflowEndpointGroup: {
            http: {
                method: "DELETE",
                requestUri: "/dataflowEndpointGroup/{dataflowEndpointGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataflowEndpointGroupId" ],
                members: {
                    dataflowEndpointGroupId: {
                        location: "uri",
                        locationName: "dataflowEndpointGroupId"
                    }
                }
            },
            output: {
                shape: "S1p"
            },
            idempotent: true
        },
        DeleteEphemeris: {
            http: {
                method: "DELETE",
                requestUri: "/ephemeris/{ephemerisId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ephemerisId" ],
                members: {
                    ephemerisId: {
                        location: "uri",
                        locationName: "ephemerisId"
                    }
                }
            },
            output: {
                shape: "S27"
            },
            idempotent: true
        },
        DeleteMissionProfile: {
            http: {
                method: "DELETE",
                requestUri: "/missionprofile/{missionProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "missionProfileId" ],
                members: {
                    missionProfileId: {
                        location: "uri",
                        locationName: "missionProfileId"
                    }
                }
            },
            output: {
                shape: "S2g"
            },
            idempotent: true
        },
        DescribeContact: {
            http: {
                method: "GET",
                requestUri: "/contact/{contactId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contactId" ],
                members: {
                    contactId: {
                        location: "uri",
                        locationName: "contactId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactId: {},
                    contactStatus: {},
                    dataflowList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                destination: {
                                    type: "structure",
                                    members: {
                                        configDetails: {
                                            shape: "S2r"
                                        },
                                        configId: {},
                                        configType: {},
                                        dataflowDestinationRegion: {}
                                    }
                                },
                                errorMessage: {},
                                source: {
                                    type: "structure",
                                    members: {
                                        configDetails: {
                                            shape: "S2r"
                                        },
                                        configId: {},
                                        configType: {},
                                        dataflowSourceRegion: {}
                                    }
                                }
                            }
                        }
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    errorMessage: {},
                    groundStation: {},
                    maximumElevation: {
                        shape: "S2v"
                    },
                    missionProfileArn: {},
                    postPassEndTime: {
                        type: "timestamp"
                    },
                    prePassStartTime: {
                        type: "timestamp"
                    },
                    region: {},
                    satelliteArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        DescribeEphemeris: {
            http: {
                method: "GET",
                requestUri: "/ephemeris/{ephemerisId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ephemerisId" ],
                members: {
                    ephemerisId: {
                        location: "uri",
                        locationName: "ephemerisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        type: "timestamp"
                    },
                    enabled: {
                        type: "boolean"
                    },
                    ephemerisId: {},
                    invalidReason: {},
                    name: {},
                    priority: {
                        type: "integer"
                    },
                    satelliteId: {},
                    status: {},
                    suppliedData: {
                        type: "structure",
                        members: {
                            oem: {
                                shape: "S35"
                            },
                            tle: {
                                shape: "S35"
                            }
                        },
                        union: true
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        GetAgentConfiguration: {
            http: {
                method: "GET",
                requestUri: "/agent/{agentId}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    agentId: {},
                    taskingDocument: {}
                }
            }
        },
        GetConfig: {
            http: {
                method: "GET",
                requestUri: "/config/{configType}/{configId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configId", "configType" ],
                members: {
                    configId: {
                        location: "uri",
                        locationName: "configId"
                    },
                    configType: {
                        location: "uri",
                        locationName: "configType"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configArn", "configData", "configId", "name" ],
                members: {
                    configArn: {},
                    configData: {
                        shape: "S5"
                    },
                    configId: {},
                    configType: {},
                    name: {},
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        GetDataflowEndpointGroup: {
            http: {
                method: "GET",
                requestUri: "/dataflowEndpointGroup/{dataflowEndpointGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataflowEndpointGroupId" ],
                members: {
                    dataflowEndpointGroupId: {
                        location: "uri",
                        locationName: "dataflowEndpointGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    dataflowEndpointGroupArn: {},
                    dataflowEndpointGroupId: {},
                    endpointsDetails: {
                        shape: "S13"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        GetMinuteUsage: {
            http: {
                requestUri: "/minute-usage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "month", "year" ],
                members: {
                    month: {
                        type: "integer"
                    },
                    year: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    estimatedMinutesRemaining: {
                        type: "integer"
                    },
                    isReservedMinutesCustomer: {
                        type: "boolean"
                    },
                    totalReservedMinuteAllocation: {
                        type: "integer"
                    },
                    totalScheduledMinutes: {
                        type: "integer"
                    },
                    upcomingMinutesScheduled: {
                        type: "integer"
                    }
                }
            }
        },
        GetMissionProfile: {
            http: {
                method: "GET",
                requestUri: "/missionprofile/{missionProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "missionProfileId" ],
                members: {
                    missionProfileId: {
                        location: "uri",
                        locationName: "missionProfileId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    dataflowEdges: {
                        shape: "S2a"
                    },
                    minimumViableContactDurationSeconds: {
                        type: "integer"
                    },
                    missionProfileArn: {},
                    missionProfileId: {},
                    name: {},
                    region: {},
                    streamsKmsKey: {
                        shape: "S2d"
                    },
                    streamsKmsRole: {},
                    tags: {
                        shape: "Sy"
                    },
                    trackingConfigArn: {}
                }
            }
        },
        GetSatellite: {
            http: {
                method: "GET",
                requestUri: "/satellite/{satelliteId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "satelliteId" ],
                members: {
                    satelliteId: {
                        location: "uri",
                        locationName: "satelliteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    currentEphemeris: {
                        shape: "S3m"
                    },
                    groundStations: {
                        shape: "S3o"
                    },
                    noradSatelliteID: {
                        type: "integer"
                    },
                    satelliteArn: {},
                    satelliteId: {}
                }
            }
        },
        ListConfigs: {
            http: {
                method: "GET",
                requestUri: "/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    configList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                configArn: {},
                                configId: {},
                                configType: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContacts: {
            http: {
                requestUri: "/contacts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "startTime", "statusList" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    groundStation: {},
                    maxResults: {
                        type: "integer"
                    },
                    missionProfileArn: {},
                    nextToken: {},
                    satelliteArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    statusList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                contactId: {},
                                contactStatus: {},
                                endTime: {
                                    type: "timestamp"
                                },
                                errorMessage: {},
                                groundStation: {},
                                maximumElevation: {
                                    shape: "S2v"
                                },
                                missionProfileArn: {},
                                postPassEndTime: {
                                    type: "timestamp"
                                },
                                prePassStartTime: {
                                    type: "timestamp"
                                },
                                region: {},
                                satelliteArn: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sy"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataflowEndpointGroups: {
            http: {
                method: "GET",
                requestUri: "/dataflowEndpointGroup",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataflowEndpointGroupList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                dataflowEndpointGroupArn: {},
                                dataflowEndpointGroupId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEphemerides: {
            http: {
                requestUri: "/ephemerides",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "satelliteId", "startTime" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    satelliteId: {},
                    startTime: {
                        type: "timestamp"
                    },
                    statusList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ephemerides: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                enabled: {
                                    type: "boolean"
                                },
                                ephemerisId: {},
                                name: {},
                                priority: {
                                    type: "integer"
                                },
                                sourceS3Object: {
                                    shape: "S1u"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListGroundStations: {
            http: {
                method: "GET",
                requestUri: "/groundstation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    satelliteId: {
                        location: "querystring",
                        locationName: "satelliteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    groundStationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                groundStationId: {},
                                groundStationName: {},
                                region: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMissionProfiles: {
            http: {
                method: "GET",
                requestUri: "/missionprofile",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    missionProfileList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                missionProfileArn: {},
                                missionProfileId: {},
                                name: {},
                                region: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSatellites: {
            http: {
                method: "GET",
                requestUri: "/satellite",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    satellites: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                currentEphemeris: {
                                    shape: "S3m"
                                },
                                groundStations: {
                                    shape: "S3o"
                                },
                                noradSatelliteID: {
                                    type: "integer"
                                },
                                satelliteArn: {},
                                satelliteId: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        RegisterAgent: {
            http: {
                requestUri: "/agent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentDetails", "discoveryData" ],
                members: {
                    agentDetails: {
                        type: "structure",
                        required: [ "agentVersion", "componentVersions", "instanceId", "instanceType" ],
                        members: {
                            agentCpuCores: {
                                shape: "S4s"
                            },
                            agentVersion: {},
                            componentVersions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "componentType", "versions" ],
                                    members: {
                                        componentType: {},
                                        versions: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            instanceId: {},
                            instanceType: {},
                            reservedCpuCores: {
                                shape: "S4s"
                            }
                        }
                    },
                    discoveryData: {
                        type: "structure",
                        required: [ "capabilityArns", "privateIpAddresses", "publicIpAddresses" ],
                        members: {
                            capabilityArns: {
                                type: "list",
                                member: {}
                            },
                            privateIpAddresses: {
                                shape: "S53"
                            },
                            publicIpAddresses: {
                                shape: "S53"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    agentId: {}
                }
            }
        },
        ReserveContact: {
            http: {
                requestUri: "/contact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "groundStation", "missionProfileArn", "satelliteArn", "startTime" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    groundStation: {},
                    missionProfileArn: {},
                    satelliteArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                shape: "S3"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAgentStatus: {
            http: {
                method: "PUT",
                requestUri: "/agent/{agentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "aggregateStatus", "componentStatuses", "taskId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    aggregateStatus: {
                        type: "structure",
                        required: [ "status" ],
                        members: {
                            signatureMap: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "boolean"
                                }
                            },
                            status: {}
                        }
                    },
                    componentStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "capabilityArn", "componentType", "dataflowId", "status" ],
                            members: {
                                bytesReceived: {
                                    type: "long"
                                },
                                bytesSent: {
                                    type: "long"
                                },
                                capabilityArn: {},
                                componentType: {},
                                dataflowId: {},
                                packetsDropped: {
                                    type: "long"
                                },
                                status: {}
                            }
                        }
                    },
                    taskId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentId" ],
                members: {
                    agentId: {}
                }
            },
            idempotent: true
        },
        UpdateConfig: {
            http: {
                method: "PUT",
                requestUri: "/config/{configType}/{configId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configData", "configId", "configType", "name" ],
                members: {
                    configData: {
                        shape: "S5"
                    },
                    configId: {
                        location: "uri",
                        locationName: "configId"
                    },
                    configType: {
                        location: "uri",
                        locationName: "configType"
                    },
                    name: {}
                }
            },
            output: {
                shape: "Sz"
            },
            idempotent: true
        },
        UpdateEphemeris: {
            http: {
                method: "PUT",
                requestUri: "/ephemeris/{ephemerisId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "enabled", "ephemerisId" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    ephemerisId: {
                        location: "uri",
                        locationName: "ephemerisId"
                    },
                    name: {},
                    priority: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S27"
            },
            idempotent: true
        },
        UpdateMissionProfile: {
            http: {
                method: "PUT",
                requestUri: "/missionprofile/{missionProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "missionProfileId" ],
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    dataflowEdges: {
                        shape: "S2a"
                    },
                    minimumViableContactDurationSeconds: {
                        type: "integer"
                    },
                    missionProfileId: {
                        location: "uri",
                        locationName: "missionProfileId"
                    },
                    name: {},
                    streamsKmsKey: {
                        shape: "S2d"
                    },
                    streamsKmsRole: {},
                    trackingConfigArn: {}
                }
            },
            output: {
                shape: "S2g"
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                contactId: {}
            }
        },
        S5: {
            type: "structure",
            members: {
                antennaDownlinkConfig: {
                    type: "structure",
                    required: [ "spectrumConfig" ],
                    members: {
                        spectrumConfig: {
                            shape: "S7"
                        }
                    }
                },
                antennaDownlinkDemodDecodeConfig: {
                    type: "structure",
                    required: [ "decodeConfig", "demodulationConfig", "spectrumConfig" ],
                    members: {
                        decodeConfig: {
                            type: "structure",
                            required: [ "unvalidatedJSON" ],
                            members: {
                                unvalidatedJSON: {}
                            }
                        },
                        demodulationConfig: {
                            type: "structure",
                            required: [ "unvalidatedJSON" ],
                            members: {
                                unvalidatedJSON: {}
                            }
                        },
                        spectrumConfig: {
                            shape: "S7"
                        }
                    }
                },
                antennaUplinkConfig: {
                    type: "structure",
                    required: [ "spectrumConfig", "targetEirp" ],
                    members: {
                        spectrumConfig: {
                            type: "structure",
                            required: [ "centerFrequency" ],
                            members: {
                                centerFrequency: {
                                    shape: "Sb"
                                },
                                polarization: {}
                            }
                        },
                        targetEirp: {
                            type: "structure",
                            required: [ "units", "value" ],
                            members: {
                                units: {},
                                value: {
                                    type: "double"
                                }
                            }
                        },
                        transmitDisabled: {
                            type: "boolean"
                        }
                    }
                },
                dataflowEndpointConfig: {
                    type: "structure",
                    required: [ "dataflowEndpointName" ],
                    members: {
                        dataflowEndpointName: {},
                        dataflowEndpointRegion: {}
                    }
                },
                s3RecordingConfig: {
                    type: "structure",
                    required: [ "bucketArn", "roleArn" ],
                    members: {
                        bucketArn: {},
                        prefix: {},
                        roleArn: {}
                    }
                },
                trackingConfig: {
                    type: "structure",
                    required: [ "autotrack" ],
                    members: {
                        autotrack: {}
                    }
                },
                uplinkEchoConfig: {
                    type: "structure",
                    required: [ "antennaUplinkConfigArn", "enabled" ],
                    members: {
                        antennaUplinkConfigArn: {},
                        enabled: {
                            type: "boolean"
                        }
                    }
                }
            },
            union: true
        },
        S7: {
            type: "structure",
            required: [ "bandwidth", "centerFrequency" ],
            members: {
                bandwidth: {
                    type: "structure",
                    required: [ "units", "value" ],
                    members: {
                        units: {},
                        value: {
                            type: "double"
                        }
                    }
                },
                centerFrequency: {
                    shape: "Sb"
                },
                polarization: {}
            }
        },
        Sb: {
            type: "structure",
            required: [ "units", "value" ],
            members: {
                units: {},
                value: {
                    type: "double"
                }
            }
        },
        Sy: {
            type: "map",
            key: {},
            value: {}
        },
        Sz: {
            type: "structure",
            members: {
                configArn: {},
                configId: {},
                configType: {}
            }
        },
        S13: {
            type: "list",
            member: {
                shape: "S14"
            }
        },
        S14: {
            type: "structure",
            members: {
                awsGroundStationAgentEndpoint: {
                    type: "structure",
                    required: [ "egressAddress", "ingressAddress", "name" ],
                    members: {
                        agentStatus: {},
                        auditResults: {},
                        egressAddress: {
                            type: "structure",
                            required: [ "socketAddress" ],
                            members: {
                                mtu: {
                                    type: "integer"
                                },
                                socketAddress: {
                                    shape: "S1a"
                                }
                            }
                        },
                        ingressAddress: {
                            type: "structure",
                            required: [ "socketAddress" ],
                            members: {
                                mtu: {
                                    type: "integer"
                                },
                                socketAddress: {
                                    type: "structure",
                                    required: [ "name", "portRange" ],
                                    members: {
                                        name: {},
                                        portRange: {
                                            type: "structure",
                                            required: [ "maximum", "minimum" ],
                                            members: {
                                                maximum: {
                                                    type: "integer"
                                                },
                                                minimum: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        name: {}
                    }
                },
                endpoint: {
                    type: "structure",
                    members: {
                        address: {
                            shape: "S1a"
                        },
                        mtu: {
                            type: "integer"
                        },
                        name: {},
                        status: {}
                    }
                },
                healthReasons: {
                    type: "list",
                    member: {}
                },
                healthStatus: {},
                securityDetails: {
                    type: "structure",
                    required: [ "roleArn", "securityGroupIds", "subnetIds" ],
                    members: {
                        roleArn: {},
                        securityGroupIds: {
                            type: "list",
                            member: {}
                        },
                        subnetIds: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            required: [ "name", "port" ],
            members: {
                name: {},
                port: {
                    type: "integer"
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                dataflowEndpointGroupId: {}
            }
        },
        S1u: {
            type: "structure",
            members: {
                bucket: {},
                key: {},
                version: {}
            }
        },
        S27: {
            type: "structure",
            members: {
                ephemerisId: {}
            }
        },
        S2a: {
            type: "list",
            member: {
                type: "list",
                member: {}
            }
        },
        S2d: {
            type: "structure",
            members: {
                kmsAliasArn: {},
                kmsAliasName: {},
                kmsKeyArn: {}
            },
            union: true
        },
        S2g: {
            type: "structure",
            members: {
                missionProfileId: {}
            }
        },
        S2r: {
            type: "structure",
            members: {
                antennaDemodDecodeDetails: {
                    type: "structure",
                    members: {
                        outputNode: {}
                    }
                },
                endpointDetails: {
                    shape: "S14"
                },
                s3RecordingDetails: {
                    type: "structure",
                    members: {
                        bucketArn: {},
                        keyTemplate: {}
                    }
                }
            },
            union: true
        },
        S2v: {
            type: "structure",
            required: [ "unit", "value" ],
            members: {
                unit: {},
                value: {
                    type: "double"
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                ephemerisData: {},
                sourceS3Object: {
                    shape: "S1u"
                }
            }
        },
        S3m: {
            type: "structure",
            required: [ "source" ],
            members: {
                ephemerisId: {},
                epoch: {
                    type: "timestamp"
                },
                name: {},
                source: {}
            }
        },
        S3o: {
            type: "list",
            member: {}
        },
        S4s: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S53: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListConfigs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "configList"
        },
        ListContacts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contactList"
        },
        ListDataflowEndpointGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataflowEndpointGroupList"
        },
        ListEphemerides: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "ephemerides"
        },
        ListGroundStations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "groundStationList"
        },
        ListMissionProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "missionProfileList"
        },
        ListSatellites: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "satellites"
        }
    },
    waiters: {
        ContactScheduled: {
            description: "Waits until a contact has been scheduled",
            delay: 5,
            maxAttempts: 180,
            operation: "DescribeContact",
            acceptors: [ {
                matcher: "path",
                argument: "contactStatus",
                state: "failure",
                expected: "FAILED_TO_SCHEDULE"
            }, {
                matcher: "path",
                argument: "contactStatus",
                state: "success",
                expected: "SCHEDULED"
            } ]
        }
    }
};

AWS.apiLoader.services["iotthingsgraph"] = {};

AWS.IoTThingsGraph = AWS.Service.defineService("iotthingsgraph", [ "2018-09-06" ]);

AWS.apiLoader.services["iotthingsgraph"]["2018-09-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-06",
        endpointPrefix: "iotthingsgraph",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS IoT Things Graph",
        serviceId: "IoTThingsGraph",
        signatureVersion: "v4",
        signingName: "iotthingsgraph",
        targetPrefix: "IotThingsGraphFrontEndService",
        uid: "iotthingsgraph-2018-09-06"
    },
    operations: {
        AssociateEntityToThing: {
            input: {
                type: "structure",
                required: [ "thingName", "entityId" ],
                members: {
                    thingName: {},
                    entityId: {},
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        CreateFlowTemplate: {
            input: {
                type: "structure",
                required: [ "definition" ],
                members: {
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sb"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        CreateSystemInstance: {
            input: {
                type: "structure",
                required: [ "definition", "target" ],
                members: {
                    tags: {
                        shape: "Sf"
                    },
                    definition: {
                        shape: "S7"
                    },
                    target: {},
                    greengrassGroupName: {},
                    s3BucketName: {},
                    metricsConfiguration: {
                        shape: "Sm"
                    },
                    flowActionsRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sq"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        CreateSystemTemplate: {
            input: {
                type: "structure",
                required: [ "definition" ],
                members: {
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sw"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DeleteFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DeleteNamespace: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    namespaceArn: {},
                    namespaceName: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DeleteSystemInstance: {
            input: {
                type: "structure",
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DeleteSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DeploySystemInstance: {
            input: {
                type: "structure",
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "summary" ],
                members: {
                    summary: {
                        shape: "Sq"
                    },
                    greengrassDeploymentId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DeprecateFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DeprecateSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DescribeNamespace: {
            input: {
                type: "structure",
                members: {
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    namespaceArn: {},
                    namespaceName: {},
                    trackingNamespaceName: {},
                    trackingNamespaceVersion: {
                        type: "long"
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        DissociateEntityFromThing: {
            input: {
                type: "structure",
                required: [ "thingName", "entityType" ],
                members: {
                    thingName: {},
                    entityType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetEntities: {
            input: {
                type: "structure",
                required: [ "ids" ],
                members: {
                    ids: {
                        type: "list",
                        member: {}
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    descriptions: {
                        shape: "S1l"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    revisionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    description: {
                        type: "structure",
                        members: {
                            summary: {
                                shape: "Sb"
                            },
                            definition: {
                                shape: "S7"
                            },
                            validatedNamespaceVersion: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetFlowTemplateRevisions: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetNamespaceDeletionStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    namespaceArn: {},
                    namespaceName: {},
                    status: {},
                    errorCode: {},
                    errorMessage: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetSystemInstance: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    description: {
                        type: "structure",
                        members: {
                            summary: {
                                shape: "Sq"
                            },
                            definition: {
                                shape: "S7"
                            },
                            s3BucketName: {},
                            metricsConfiguration: {
                                shape: "Sm"
                            },
                            validatedNamespaceVersion: {
                                type: "long"
                            },
                            validatedDependencyRevisions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        id: {},
                                        revisionNumber: {
                                            type: "long"
                                        }
                                    }
                                }
                            },
                            flowActionsRoleArn: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    revisionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    description: {
                        type: "structure",
                        members: {
                            summary: {
                                shape: "Sw"
                            },
                            definition: {
                                shape: "S7"
                            },
                            validatedNamespaceVersion: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetSystemTemplateRevisions: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S2a"
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        GetUploadStatus: {
            input: {
                type: "structure",
                required: [ "uploadId" ],
                members: {
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "uploadId", "uploadStatus", "createdDate" ],
                members: {
                    uploadId: {},
                    uploadStatus: {},
                    namespaceArn: {},
                    namespaceName: {},
                    namespaceVersion: {
                        type: "long"
                    },
                    failureReason: {
                        type: "list",
                        member: {}
                    },
                    createdDate: {
                        type: "timestamp"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        ListFlowExecutionMessages: {
            input: {
                type: "structure",
                required: [ "flowExecutionId" ],
                members: {
                    flowExecutionId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                eventType: {},
                                timestamp: {
                                    type: "timestamp"
                                },
                                payload: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    resourceArn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sf"
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        SearchEntities: {
            input: {
                type: "structure",
                required: [ "entityTypes" ],
                members: {
                    entityTypes: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    descriptions: {
                        shape: "S1l"
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        SearchFlowExecutions: {
            input: {
                type: "structure",
                required: [ "systemInstanceId" ],
                members: {
                    systemInstanceId: {},
                    flowExecutionId: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                flowExecutionId: {},
                                status: {},
                                systemInstanceId: {},
                                flowTemplateId: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        SearchFlowTemplates: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        SearchSystemInstances: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        SearchSystemTemplates: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S2a"
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        SearchThings: {
            input: {
                type: "structure",
                required: [ "entityId" ],
                members: {
                    entityId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    things: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingArn: {},
                                thingName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        UndeploySystemInstance: {
            input: {
                type: "structure",
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sq"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        UpdateFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id", "definition" ],
                members: {
                    id: {},
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sb"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        UpdateSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id", "definition" ],
                members: {
                    id: {},
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sw"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        },
        UploadEntityDefinitions: {
            input: {
                type: "structure",
                members: {
                    document: {
                        shape: "S7"
                    },
                    syncWithPublicNamespace: {
                        type: "boolean"
                    },
                    deprecateExistingEntities: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "uploadId" ],
                members: {
                    uploadId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "since: 2022-08-30"
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "language", "text" ],
            members: {
                language: {},
                text: {}
            }
        },
        Sb: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                revisionNumber: {
                    type: "long"
                },
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                cloudMetricEnabled: {
                    type: "boolean"
                },
                metricRuleRoleArn: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                status: {},
                target: {},
                greengrassGroupName: {},
                createdAt: {
                    type: "timestamp"
                },
                updatedAt: {
                    type: "timestamp"
                },
                greengrassGroupId: {},
                greengrassGroupVersionId: {}
            }
        },
        Sw: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                revisionNumber: {
                    type: "long"
                },
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    type: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    definition: {
                        shape: "S7"
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                shape: "Sb"
            }
        },
        S2a: {
            type: "list",
            member: {
                shape: "Sw"
            }
        }
    },
    paginators: {
        GetFlowTemplateRevisions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        GetSystemTemplateRevisions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        ListFlowExecutionMessages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "messages"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "tags"
        },
        SearchEntities: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "descriptions"
        },
        SearchFlowExecutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchFlowTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchSystemInstances: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchSystemTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchThings: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "things"
        }
    }
};

AWS.apiLoader.services["iotevents"] = {};

AWS.IoTEvents = AWS.Service.defineService("iotevents", [ "2018-07-27" ]);

AWS.apiLoader.services["iotevents"]["2018-07-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-07-27",
        endpointPrefix: "iotevents",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Events",
        serviceId: "IoT Events",
        signatureVersion: "v4",
        signingName: "iotevents",
        uid: "iotevents-2018-07-27"
    },
    operations: {
        CreateAlarmModel: {
            http: {
                requestUri: "/alarm-models"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName", "roleArn", "alarmRule" ],
                members: {
                    alarmModelName: {},
                    alarmModelDescription: {},
                    roleArn: {},
                    tags: {
                        shape: "S5"
                    },
                    key: {},
                    severity: {
                        type: "integer"
                    },
                    alarmRule: {
                        shape: "Sb"
                    },
                    alarmNotification: {
                        shape: "Sg"
                    },
                    alarmEventActions: {
                        shape: "S13"
                    },
                    alarmCapabilities: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        type: "timestamp"
                    },
                    alarmModelArn: {},
                    alarmModelVersion: {},
                    lastUpdateTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        CreateDetectorModel: {
            http: {
                requestUri: "/detector-models"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName", "detectorModelDefinition", "roleArn" ],
                members: {
                    detectorModelName: {},
                    detectorModelDefinition: {
                        shape: "S2f"
                    },
                    detectorModelDescription: {},
                    key: {},
                    roleArn: {},
                    tags: {
                        shape: "S5"
                    },
                    evaluationMethod: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelConfiguration: {
                        shape: "S35"
                    }
                }
            }
        },
        CreateInput: {
            http: {
                requestUri: "/inputs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "inputName", "inputDefinition" ],
                members: {
                    inputName: {},
                    inputDescription: {},
                    inputDefinition: {
                        shape: "S3b"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inputConfiguration: {
                        shape: "S3f"
                    }
                }
            }
        },
        DeleteAlarmModel: {
            http: {
                method: "DELETE",
                requestUri: "/alarm-models/{alarmModelName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDetectorModel: {
            http: {
                method: "DELETE",
                requestUri: "/detector-models/{detectorModelName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInput: {
            http: {
                method: "DELETE",
                requestUri: "/inputs/{inputName}"
            },
            input: {
                type: "structure",
                required: [ "inputName" ],
                members: {
                    inputName: {
                        location: "uri",
                        locationName: "inputName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAlarmModel: {
            http: {
                method: "GET",
                requestUri: "/alarm-models/{alarmModelName}"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    alarmModelVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        type: "timestamp"
                    },
                    alarmModelArn: {},
                    alarmModelVersion: {},
                    lastUpdateTime: {
                        type: "timestamp"
                    },
                    status: {},
                    statusMessage: {},
                    alarmModelName: {},
                    alarmModelDescription: {},
                    roleArn: {},
                    key: {},
                    severity: {
                        type: "integer"
                    },
                    alarmRule: {
                        shape: "Sb"
                    },
                    alarmNotification: {
                        shape: "Sg"
                    },
                    alarmEventActions: {
                        shape: "S13"
                    },
                    alarmCapabilities: {
                        shape: "S23"
                    }
                }
            }
        },
        DescribeDetectorModel: {
            http: {
                method: "GET",
                requestUri: "/detector-models/{detectorModelName}"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    detectorModelVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModel: {
                        type: "structure",
                        members: {
                            detectorModelDefinition: {
                                shape: "S2f"
                            },
                            detectorModelConfiguration: {
                                shape: "S35"
                            }
                        }
                    }
                }
            }
        },
        DescribeDetectorModelAnalysis: {
            http: {
                method: "GET",
                requestUri: "/analysis/detector-models/{analysisId}"
            },
            input: {
                type: "structure",
                required: [ "analysisId" ],
                members: {
                    analysisId: {
                        location: "uri",
                        locationName: "analysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        DescribeInput: {
            http: {
                method: "GET",
                requestUri: "/inputs/{inputName}"
            },
            input: {
                type: "structure",
                required: [ "inputName" ],
                members: {
                    inputName: {
                        location: "uri",
                        locationName: "inputName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    input: {
                        type: "structure",
                        members: {
                            inputConfiguration: {
                                shape: "S3f"
                            },
                            inputDefinition: {
                                shape: "S3b"
                            }
                        }
                    }
                }
            }
        },
        DescribeLoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    loggingOptions: {
                        shape: "S43"
                    }
                }
            }
        },
        GetDetectorModelAnalysisResults: {
            http: {
                method: "GET",
                requestUri: "/analysis/detector-models/{analysisId}/results"
            },
            input: {
                type: "structure",
                required: [ "analysisId" ],
                members: {
                    analysisId: {
                        location: "uri",
                        locationName: "analysisId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    analysisResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                type: {},
                                level: {},
                                message: {},
                                locations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            path: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAlarmModelVersions: {
            http: {
                method: "GET",
                requestUri: "/alarm-models/{alarmModelName}/versions"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarmModelVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                alarmModelName: {},
                                alarmModelArn: {},
                                alarmModelVersion: {},
                                roleArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                statusMessage: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAlarmModels: {
            http: {
                method: "GET",
                requestUri: "/alarm-models"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarmModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                alarmModelDescription: {},
                                alarmModelName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectorModelVersions: {
            http: {
                method: "GET",
                requestUri: "/detector-models/{detectorModelName}/versions"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorModelName: {},
                                detectorModelVersion: {},
                                detectorModelArn: {},
                                roleArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                evaluationMethod: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectorModels: {
            http: {
                method: "GET",
                requestUri: "/detector-models"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorModelName: {},
                                detectorModelDescription: {},
                                creationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInputRoutings: {
            http: {
                requestUri: "/input-routings"
            },
            input: {
                type: "structure",
                required: [ "inputIdentifier" ],
                members: {
                    inputIdentifier: {
                        type: "structure",
                        members: {
                            iotEventsInputIdentifier: {
                                type: "structure",
                                required: [ "inputName" ],
                                members: {
                                    inputName: {}
                                }
                            },
                            iotSiteWiseInputIdentifier: {
                                type: "structure",
                                members: {
                                    iotSiteWiseAssetModelPropertyIdentifier: {
                                        type: "structure",
                                        required: [ "assetModelId", "propertyId" ],
                                        members: {
                                            assetModelId: {},
                                            propertyId: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    routedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInputs: {
            http: {
                method: "GET",
                requestUri: "/inputs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inputSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                inputName: {},
                                inputDescription: {},
                                inputArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5"
                    }
                }
            }
        },
        PutLoggingOptions: {
            http: {
                method: "PUT",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S43"
                    }
                }
            }
        },
        StartDetectorModelAnalysis: {
            http: {
                requestUri: "/analysis/detector-models/"
            },
            input: {
                type: "structure",
                required: [ "detectorModelDefinition" ],
                members: {
                    detectorModelDefinition: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    analysisId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAlarmModel: {
            http: {
                requestUri: "/alarm-models/{alarmModelName}"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName", "roleArn", "alarmRule" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    alarmModelDescription: {},
                    roleArn: {},
                    severity: {
                        type: "integer"
                    },
                    alarmRule: {
                        shape: "Sb"
                    },
                    alarmNotification: {
                        shape: "Sg"
                    },
                    alarmEventActions: {
                        shape: "S13"
                    },
                    alarmCapabilities: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        type: "timestamp"
                    },
                    alarmModelArn: {},
                    alarmModelVersion: {},
                    lastUpdateTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        UpdateDetectorModel: {
            http: {
                requestUri: "/detector-models/{detectorModelName}"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName", "detectorModelDefinition", "roleArn" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    detectorModelDefinition: {
                        shape: "S2f"
                    },
                    detectorModelDescription: {},
                    roleArn: {},
                    evaluationMethod: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelConfiguration: {
                        shape: "S35"
                    }
                }
            }
        },
        UpdateInput: {
            http: {
                method: "PUT",
                requestUri: "/inputs/{inputName}"
            },
            input: {
                type: "structure",
                required: [ "inputName", "inputDefinition" ],
                members: {
                    inputName: {
                        location: "uri",
                        locationName: "inputName"
                    },
                    inputDescription: {},
                    inputDefinition: {
                        shape: "S3b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inputConfiguration: {
                        shape: "S3f"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                simpleRule: {
                    type: "structure",
                    required: [ "inputProperty", "comparisonOperator", "threshold" ],
                    members: {
                        inputProperty: {},
                        comparisonOperator: {},
                        threshold: {}
                    }
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                notificationActions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "action" ],
                        members: {
                            action: {
                                type: "structure",
                                members: {
                                    lambdaAction: {
                                        shape: "Sk"
                                    }
                                }
                            },
                            smsConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "recipients" ],
                                    members: {
                                        senderId: {},
                                        additionalMessage: {},
                                        recipients: {
                                            shape: "Ss"
                                        }
                                    }
                                }
                            },
                            emailConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "from", "recipients" ],
                                    members: {
                                        from: {},
                                        content: {
                                            type: "structure",
                                            members: {
                                                subject: {},
                                                additionalMessage: {}
                                            }
                                        },
                                        recipients: {
                                            type: "structure",
                                            members: {
                                                to: {
                                                    shape: "Ss"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "functionArn" ],
            members: {
                functionArn: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "contentExpression", "type" ],
            members: {
                contentExpression: {},
                type: {}
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ssoIdentity: {
                        type: "structure",
                        required: [ "identityStoreId" ],
                        members: {
                            identityStoreId: {},
                            userId: {}
                        }
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                alarmActions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            sns: {
                                shape: "S16"
                            },
                            iotTopicPublish: {
                                shape: "S17"
                            },
                            lambda: {
                                shape: "Sk"
                            },
                            iotEvents: {
                                shape: "S19"
                            },
                            sqs: {
                                shape: "S1b"
                            },
                            firehose: {
                                shape: "S1e"
                            },
                            dynamoDB: {
                                shape: "S1h"
                            },
                            dynamoDBv2: {
                                shape: "S1n"
                            },
                            iotSiteWise: {
                                shape: "S1o"
                            }
                        }
                    }
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "targetArn" ],
            members: {
                targetArn: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S17: {
            type: "structure",
            required: [ "mqttTopic" ],
            members: {
                mqttTopic: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S19: {
            type: "structure",
            required: [ "inputName" ],
            members: {
                inputName: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "queueUrl" ],
            members: {
                queueUrl: {},
                useBase64: {
                    type: "boolean"
                },
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "deliveryStreamName" ],
            members: {
                deliveryStreamName: {},
                separator: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1h: {
            type: "structure",
            required: [ "hashKeyField", "hashKeyValue", "tableName" ],
            members: {
                hashKeyType: {},
                hashKeyField: {},
                hashKeyValue: {},
                rangeKeyType: {},
                rangeKeyField: {},
                rangeKeyValue: {},
                operation: {},
                payloadField: {},
                tableName: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "tableName" ],
            members: {
                tableName: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                entryId: {},
                assetId: {},
                propertyId: {},
                propertyAlias: {},
                propertyValue: {
                    type: "structure",
                    members: {
                        value: {
                            type: "structure",
                            members: {
                                stringValue: {},
                                integerValue: {},
                                doubleValue: {},
                                booleanValue: {}
                            }
                        },
                        timestamp: {
                            type: "structure",
                            required: [ "timeInSeconds" ],
                            members: {
                                timeInSeconds: {},
                                offsetInNanos: {}
                            }
                        },
                        quality: {}
                    }
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                initializationConfiguration: {
                    type: "structure",
                    required: [ "disabledOnInitialization" ],
                    members: {
                        disabledOnInitialization: {
                            type: "boolean"
                        }
                    }
                },
                acknowledgeFlow: {
                    type: "structure",
                    required: [ "enabled" ],
                    members: {
                        enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S2f: {
            type: "structure",
            required: [ "states", "initialStateName" ],
            members: {
                states: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "stateName" ],
                        members: {
                            stateName: {},
                            onInput: {
                                type: "structure",
                                members: {
                                    events: {
                                        shape: "S2k"
                                    },
                                    transitionEvents: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "eventName", "condition", "nextState" ],
                                            members: {
                                                eventName: {},
                                                condition: {},
                                                actions: {
                                                    shape: "S2o"
                                                },
                                                nextState: {}
                                            }
                                        }
                                    }
                                }
                            },
                            onEnter: {
                                type: "structure",
                                members: {
                                    events: {
                                        shape: "S2k"
                                    }
                                }
                            },
                            onExit: {
                                type: "structure",
                                members: {
                                    events: {
                                        shape: "S2k"
                                    }
                                }
                            }
                        }
                    }
                },
                initialStateName: {}
            }
        },
        S2k: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventName" ],
                members: {
                    eventName: {},
                    condition: {},
                    actions: {
                        shape: "S2o"
                    }
                }
            }
        },
        S2o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    setVariable: {
                        type: "structure",
                        required: [ "variableName", "value" ],
                        members: {
                            variableName: {},
                            value: {}
                        }
                    },
                    sns: {
                        shape: "S16"
                    },
                    iotTopicPublish: {
                        shape: "S17"
                    },
                    setTimer: {
                        type: "structure",
                        required: [ "timerName" ],
                        members: {
                            timerName: {},
                            seconds: {
                                deprecated: true,
                                deprecatedMessage: "seconds is deprecated. You can use durationExpression for SetTimerAction. The value of seconds can be used as a string expression for durationExpression.",
                                type: "integer"
                            },
                            durationExpression: {}
                        }
                    },
                    clearTimer: {
                        type: "structure",
                        required: [ "timerName" ],
                        members: {
                            timerName: {}
                        }
                    },
                    resetTimer: {
                        type: "structure",
                        required: [ "timerName" ],
                        members: {
                            timerName: {}
                        }
                    },
                    lambda: {
                        shape: "Sk"
                    },
                    iotEvents: {
                        shape: "S19"
                    },
                    sqs: {
                        shape: "S1b"
                    },
                    firehose: {
                        shape: "S1e"
                    },
                    dynamoDB: {
                        shape: "S1h"
                    },
                    dynamoDBv2: {
                        shape: "S1n"
                    },
                    iotSiteWise: {
                        shape: "S1o"
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                detectorModelName: {},
                detectorModelVersion: {},
                detectorModelDescription: {},
                detectorModelArn: {},
                roleArn: {},
                creationTime: {
                    type: "timestamp"
                },
                lastUpdateTime: {
                    type: "timestamp"
                },
                status: {},
                key: {},
                evaluationMethod: {}
            }
        },
        S3b: {
            type: "structure",
            required: [ "attributes" ],
            members: {
                attributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "jsonPath" ],
                        members: {
                            jsonPath: {}
                        }
                    }
                }
            }
        },
        S3f: {
            type: "structure",
            required: [ "inputName", "inputArn", "creationTime", "lastUpdateTime", "status" ],
            members: {
                inputName: {},
                inputDescription: {},
                inputArn: {},
                creationTime: {
                    type: "timestamp"
                },
                lastUpdateTime: {
                    type: "timestamp"
                },
                status: {}
            }
        },
        S43: {
            type: "structure",
            required: [ "roleArn", "level", "enabled" ],
            members: {
                roleArn: {},
                level: {},
                enabled: {
                    type: "boolean"
                },
                detectorDebugOptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "detectorModelName" ],
                        members: {
                            detectorModelName: {},
                            keyValue: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["ioteventsdata"] = {};

AWS.IoTEventsData = AWS.Service.defineService("ioteventsdata", [ "2018-10-23" ]);

AWS.apiLoader.services["ioteventsdata"]["2018-10-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-23",
        endpointPrefix: "data.iotevents",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Events Data",
        serviceId: "IoT Events Data",
        signatureVersion: "v4",
        signingName: "ioteventsdata",
        uid: "iotevents-data-2018-10-23"
    },
    operations: {
        BatchAcknowledgeAlarm: {
            http: {
                requestUri: "/alarms/acknowledge",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "acknowledgeActionRequests" ],
                members: {
                    acknowledgeActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchDeleteDetector: {
            http: {
                requestUri: "/detectors/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "detectors" ],
                members: {
                    detectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "messageId", "detectorModelName" ],
                            members: {
                                messageId: {},
                                detectorModelName: {},
                                keyValue: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchDeleteDetectorErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDisableAlarm: {
            http: {
                requestUri: "/alarms/disable",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "disableActionRequests" ],
                members: {
                    disableActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchEnableAlarm: {
            http: {
                requestUri: "/alarms/enable",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "enableActionRequests" ],
                members: {
                    enableActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchPutMessage: {
            http: {
                requestUri: "/inputs/messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "messages" ],
                members: {
                    messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "messageId", "inputName", "payload" ],
                            members: {
                                messageId: {},
                                inputName: {},
                                payload: {
                                    type: "blob"
                                },
                                timestamp: {
                                    type: "structure",
                                    members: {
                                        timeInMillis: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchPutMessageErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchResetAlarm: {
            http: {
                requestUri: "/alarms/reset",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "resetActionRequests" ],
                members: {
                    resetActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchSnoozeAlarm: {
            http: {
                requestUri: "/alarms/snooze",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "snoozeActionRequests" ],
                members: {
                    snoozeActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName", "snoozeDuration" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {},
                                snoozeDuration: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchUpdateDetector: {
            http: {
                requestUri: "/detectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "detectors" ],
                members: {
                    detectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "messageId", "detectorModelName", "state" ],
                            members: {
                                messageId: {},
                                detectorModelName: {},
                                keyValue: {},
                                state: {
                                    type: "structure",
                                    required: [ "stateName", "variables", "timers" ],
                                    members: {
                                        stateName: {},
                                        variables: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name", "value" ],
                                                members: {
                                                    name: {},
                                                    value: {}
                                                }
                                            }
                                        },
                                        timers: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name", "seconds" ],
                                                members: {
                                                    name: {},
                                                    seconds: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchUpdateDetectorErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeAlarm: {
            http: {
                method: "GET",
                requestUri: "/alarms/{alarmModelName}/keyValues/"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    keyValue: {
                        location: "querystring",
                        locationName: "keyValue"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarm: {
                        type: "structure",
                        members: {
                            alarmModelName: {},
                            alarmModelVersion: {},
                            keyValue: {},
                            alarmState: {
                                type: "structure",
                                members: {
                                    stateName: {},
                                    ruleEvaluation: {
                                        type: "structure",
                                        members: {
                                            simpleRuleEvaluation: {
                                                type: "structure",
                                                members: {
                                                    inputPropertyValue: {},
                                                    operator: {},
                                                    thresholdValue: {}
                                                }
                                            }
                                        }
                                    },
                                    customerAction: {
                                        type: "structure",
                                        members: {
                                            actionName: {},
                                            snoozeActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    snoozeDuration: {
                                                        type: "integer"
                                                    },
                                                    note: {}
                                                }
                                            },
                                            enableActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            },
                                            disableActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            },
                                            acknowledgeActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            },
                                            resetActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            }
                                        }
                                    },
                                    systemEvent: {
                                        type: "structure",
                                        members: {
                                            eventType: {},
                                            stateChangeConfiguration: {
                                                type: "structure",
                                                members: {
                                                    triggerType: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            severity: {
                                type: "integer"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeDetector: {
            http: {
                method: "GET",
                requestUri: "/detectors/{detectorModelName}/keyValues/"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    keyValue: {
                        location: "querystring",
                        locationName: "keyValue"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detector: {
                        type: "structure",
                        members: {
                            detectorModelName: {},
                            keyValue: {},
                            detectorModelVersion: {},
                            state: {
                                type: "structure",
                                required: [ "stateName", "variables", "timers" ],
                                members: {
                                    stateName: {},
                                    variables: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "name", "value" ],
                                            members: {
                                                name: {},
                                                value: {}
                                            }
                                        }
                                    },
                                    timers: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "name", "timestamp" ],
                                            members: {
                                                name: {},
                                                timestamp: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ListAlarms: {
            http: {
                method: "GET",
                requestUri: "/alarms/{alarmModelName}"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarmSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                alarmModelName: {},
                                alarmModelVersion: {},
                                keyValue: {},
                                stateName: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectors: {
            http: {
                method: "GET",
                requestUri: "/detectors/{detectorModelName}"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    stateName: {
                        location: "querystring",
                        locationName: "stateName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorModelName: {},
                                keyValue: {},
                                detectorModelVersion: {},
                                state: {
                                    type: "structure",
                                    members: {
                                        stateName: {}
                                    }
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    requestId: {},
                    errorCode: {},
                    errorMessage: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["personalize"] = {};

AWS.Personalize = AWS.Service.defineService("personalize", [ "2018-05-22" ]);

AWS.apiLoader.services["personalize"]["2018-05-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-22",
        endpointPrefix: "personalize",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Personalize",
        serviceId: "Personalize",
        signatureVersion: "v4",
        signingName: "personalize",
        targetPrefix: "AmazonPersonalize",
        uid: "personalize-2018-05-22"
    },
    operations: {
        CreateBatchInferenceJob: {
            input: {
                type: "structure",
                required: [ "jobName", "solutionVersionArn", "jobInput", "jobOutput", "roleArn" ],
                members: {
                    jobName: {},
                    solutionVersionArn: {},
                    filterArn: {},
                    numResults: {
                        type: "integer"
                    },
                    jobInput: {
                        shape: "S5"
                    },
                    jobOutput: {
                        shape: "S9"
                    },
                    roleArn: {},
                    batchInferenceJobConfig: {
                        shape: "Sb"
                    },
                    tags: {
                        shape: "Sf"
                    },
                    batchInferenceJobMode: {},
                    themeGenerationConfig: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchInferenceJobArn: {}
                }
            }
        },
        CreateBatchSegmentJob: {
            input: {
                type: "structure",
                required: [ "jobName", "solutionVersionArn", "jobInput", "jobOutput", "roleArn" ],
                members: {
                    jobName: {},
                    solutionVersionArn: {},
                    filterArn: {},
                    numResults: {
                        type: "integer"
                    },
                    jobInput: {
                        shape: "Sp"
                    },
                    jobOutput: {
                        shape: "Sq"
                    },
                    roleArn: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchSegmentJobArn: {}
                }
            }
        },
        CreateCampaign: {
            input: {
                type: "structure",
                required: [ "name", "solutionVersionArn" ],
                members: {
                    name: {},
                    solutionVersionArn: {},
                    minProvisionedTPS: {
                        type: "integer"
                    },
                    campaignConfig: {
                        shape: "Su"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaignArn: {}
                }
            },
            idempotent: true
        },
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "name", "schemaArn", "datasetGroupArn", "datasetType" ],
                members: {
                    name: {},
                    schemaArn: {},
                    datasetGroupArn: {},
                    datasetType: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetArn: {}
                }
            },
            idempotent: true
        },
        CreateDatasetExportJob: {
            input: {
                type: "structure",
                required: [ "jobName", "datasetArn", "roleArn", "jobOutput" ],
                members: {
                    jobName: {},
                    datasetArn: {},
                    ingestionMode: {},
                    roleArn: {},
                    jobOutput: {
                        shape: "S12"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetExportJobArn: {}
                }
            },
            idempotent: true
        },
        CreateDatasetGroup: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    roleArn: {},
                    kmsKeyArn: {},
                    domain: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    domain: {}
                }
            }
        },
        CreateDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "jobName", "datasetArn", "dataSource", "roleArn" ],
                members: {
                    jobName: {},
                    datasetArn: {},
                    dataSource: {
                        shape: "S18"
                    },
                    roleArn: {},
                    tags: {
                        shape: "Sf"
                    },
                    importMode: {},
                    publishAttributionMetricsToS3: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetImportJobArn: {}
                }
            }
        },
        CreateEventTracker: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn" ],
                members: {
                    name: {},
                    datasetGroupArn: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTrackerArn: {},
                    trackingId: {}
                }
            },
            idempotent: true
        },
        CreateFilter: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn", "filterExpression" ],
                members: {
                    name: {},
                    datasetGroupArn: {},
                    filterExpression: {
                        shape: "S1f"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    filterArn: {}
                }
            }
        },
        CreateMetricAttribution: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn", "metrics", "metricsOutputConfig" ],
                members: {
                    name: {},
                    datasetGroupArn: {},
                    metrics: {
                        shape: "S1i"
                    },
                    metricsOutputConfig: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricAttributionArn: {}
                }
            }
        },
        CreateRecommender: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn", "recipeArn" ],
                members: {
                    name: {},
                    datasetGroupArn: {},
                    recipeArn: {},
                    recommenderConfig: {
                        shape: "S1q"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommenderArn: {}
                }
            },
            idempotent: true
        },
        CreateSchema: {
            input: {
                type: "structure",
                required: [ "name", "schema" ],
                members: {
                    name: {},
                    schema: {},
                    domain: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    schemaArn: {}
                }
            },
            idempotent: true
        },
        CreateSolution: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn" ],
                members: {
                    name: {},
                    performHPO: {
                        type: "boolean"
                    },
                    performAutoML: {
                        type: "boolean"
                    },
                    recipeArn: {},
                    datasetGroupArn: {},
                    eventType: {},
                    solutionConfig: {
                        shape: "S20"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionArn: {}
                }
            }
        },
        CreateSolutionVersion: {
            input: {
                type: "structure",
                required: [ "solutionArn" ],
                members: {
                    name: {},
                    solutionArn: {},
                    trainingMode: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersionArn: {}
                }
            }
        },
        DeleteCampaign: {
            input: {
                type: "structure",
                required: [ "campaignArn" ],
                members: {
                    campaignArn: {}
                }
            },
            idempotent: true
        },
        DeleteDataset: {
            input: {
                type: "structure",
                required: [ "datasetArn" ],
                members: {
                    datasetArn: {}
                }
            },
            idempotent: true
        },
        DeleteDatasetGroup: {
            input: {
                type: "structure",
                required: [ "datasetGroupArn" ],
                members: {
                    datasetGroupArn: {}
                }
            },
            idempotent: true
        },
        DeleteEventTracker: {
            input: {
                type: "structure",
                required: [ "eventTrackerArn" ],
                members: {
                    eventTrackerArn: {}
                }
            },
            idempotent: true
        },
        DeleteFilter: {
            input: {
                type: "structure",
                required: [ "filterArn" ],
                members: {
                    filterArn: {}
                }
            }
        },
        DeleteMetricAttribution: {
            input: {
                type: "structure",
                required: [ "metricAttributionArn" ],
                members: {
                    metricAttributionArn: {}
                }
            },
            idempotent: true
        },
        DeleteRecommender: {
            input: {
                type: "structure",
                required: [ "recommenderArn" ],
                members: {
                    recommenderArn: {}
                }
            },
            idempotent: true
        },
        DeleteSchema: {
            input: {
                type: "structure",
                required: [ "schemaArn" ],
                members: {
                    schemaArn: {}
                }
            },
            idempotent: true
        },
        DeleteSolution: {
            input: {
                type: "structure",
                required: [ "solutionArn" ],
                members: {
                    solutionArn: {}
                }
            },
            idempotent: true
        },
        DescribeAlgorithm: {
            input: {
                type: "structure",
                required: [ "algorithmArn" ],
                members: {
                    algorithmArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    algorithm: {
                        type: "structure",
                        members: {
                            name: {},
                            algorithmArn: {},
                            algorithmImage: {
                                type: "structure",
                                required: [ "dockerURI" ],
                                members: {
                                    name: {},
                                    dockerURI: {}
                                }
                            },
                            defaultHyperParameters: {
                                shape: "Sc"
                            },
                            defaultHyperParameterRanges: {
                                type: "structure",
                                members: {
                                    integerHyperParameterRanges: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                minValue: {
                                                    type: "integer"
                                                },
                                                maxValue: {
                                                    type: "integer"
                                                },
                                                isTunable: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    },
                                    continuousHyperParameterRanges: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                minValue: {
                                                    type: "double"
                                                },
                                                maxValue: {
                                                    type: "double"
                                                },
                                                isTunable: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    },
                                    categoricalHyperParameterRanges: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                values: {
                                                    shape: "S2j"
                                                },
                                                isTunable: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            defaultResourceConfig: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            trainingInputMode: {},
                            roleArn: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeBatchInferenceJob: {
            input: {
                type: "structure",
                required: [ "batchInferenceJobArn" ],
                members: {
                    batchInferenceJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    batchInferenceJob: {
                        type: "structure",
                        members: {
                            jobName: {},
                            batchInferenceJobArn: {},
                            filterArn: {},
                            failureReason: {},
                            solutionVersionArn: {},
                            numResults: {
                                type: "integer"
                            },
                            jobInput: {
                                shape: "S5"
                            },
                            jobOutput: {
                                shape: "S9"
                            },
                            batchInferenceJobConfig: {
                                shape: "Sb"
                            },
                            roleArn: {},
                            batchInferenceJobMode: {},
                            themeGenerationConfig: {
                                shape: "Sk"
                            },
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeBatchSegmentJob: {
            input: {
                type: "structure",
                required: [ "batchSegmentJobArn" ],
                members: {
                    batchSegmentJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    batchSegmentJob: {
                        type: "structure",
                        members: {
                            jobName: {},
                            batchSegmentJobArn: {},
                            filterArn: {},
                            failureReason: {},
                            solutionVersionArn: {},
                            numResults: {
                                type: "integer"
                            },
                            jobInput: {
                                shape: "Sp"
                            },
                            jobOutput: {
                                shape: "Sq"
                            },
                            roleArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeCampaign: {
            input: {
                type: "structure",
                required: [ "campaignArn" ],
                members: {
                    campaignArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    campaign: {
                        type: "structure",
                        members: {
                            name: {},
                            campaignArn: {},
                            solutionVersionArn: {},
                            minProvisionedTPS: {
                                type: "integer"
                            },
                            campaignConfig: {
                                shape: "Su"
                            },
                            status: {},
                            failureReason: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            latestCampaignUpdate: {
                                type: "structure",
                                members: {
                                    solutionVersionArn: {},
                                    minProvisionedTPS: {
                                        type: "integer"
                                    },
                                    campaignConfig: {
                                        shape: "Su"
                                    },
                                    status: {},
                                    failureReason: {},
                                    creationDateTime: {
                                        type: "timestamp"
                                    },
                                    lastUpdatedDateTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "datasetArn" ],
                members: {
                    datasetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    dataset: {
                        type: "structure",
                        members: {
                            name: {},
                            datasetArn: {},
                            datasetGroupArn: {},
                            datasetType: {},
                            schemaArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            latestDatasetUpdate: {
                                type: "structure",
                                members: {
                                    schemaArn: {},
                                    status: {},
                                    failureReason: {},
                                    creationDateTime: {
                                        type: "timestamp"
                                    },
                                    lastUpdatedDateTime: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            trackingId: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetExportJob: {
            input: {
                type: "structure",
                required: [ "datasetExportJobArn" ],
                members: {
                    datasetExportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetExportJob: {
                        type: "structure",
                        members: {
                            jobName: {},
                            datasetExportJobArn: {},
                            datasetArn: {},
                            ingestionMode: {},
                            roleArn: {},
                            status: {},
                            jobOutput: {
                                shape: "S12"
                            },
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            failureReason: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetGroup: {
            input: {
                type: "structure",
                required: [ "datasetGroupArn" ],
                members: {
                    datasetGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetGroup: {
                        type: "structure",
                        members: {
                            name: {},
                            datasetGroupArn: {},
                            status: {},
                            roleArn: {},
                            kmsKeyArn: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            failureReason: {},
                            domain: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "datasetImportJobArn" ],
                members: {
                    datasetImportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetImportJob: {
                        type: "structure",
                        members: {
                            jobName: {},
                            datasetImportJobArn: {},
                            datasetArn: {},
                            dataSource: {
                                shape: "S18"
                            },
                            roleArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            failureReason: {},
                            importMode: {},
                            publishAttributionMetricsToS3: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeEventTracker: {
            input: {
                type: "structure",
                required: [ "eventTrackerArn" ],
                members: {
                    eventTrackerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTracker: {
                        type: "structure",
                        members: {
                            name: {},
                            eventTrackerArn: {},
                            accountId: {},
                            trackingId: {},
                            datasetGroupArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeFeatureTransformation: {
            input: {
                type: "structure",
                required: [ "featureTransformationArn" ],
                members: {
                    featureTransformationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    featureTransformation: {
                        type: "structure",
                        members: {
                            name: {},
                            featureTransformationArn: {},
                            defaultParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            status: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeFilter: {
            input: {
                type: "structure",
                required: [ "filterArn" ],
                members: {
                    filterArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    filter: {
                        type: "structure",
                        members: {
                            name: {},
                            filterArn: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            datasetGroupArn: {},
                            failureReason: {},
                            filterExpression: {
                                shape: "S1f"
                            },
                            status: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeMetricAttribution: {
            input: {
                type: "structure",
                required: [ "metricAttributionArn" ],
                members: {
                    metricAttributionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    metricAttribution: {
                        type: "structure",
                        members: {
                            name: {},
                            metricAttributionArn: {},
                            datasetGroupArn: {},
                            metricsOutputConfig: {
                                shape: "S1n"
                            },
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            failureReason: {}
                        }
                    }
                }
            }
        },
        DescribeRecipe: {
            input: {
                type: "structure",
                required: [ "recipeArn" ],
                members: {
                    recipeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recipe: {
                        type: "structure",
                        members: {
                            name: {},
                            recipeArn: {},
                            algorithmArn: {},
                            featureTransformationArn: {},
                            status: {},
                            description: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            recipeType: {},
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeRecommender: {
            input: {
                type: "structure",
                required: [ "recommenderArn" ],
                members: {
                    recommenderArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recommender: {
                        type: "structure",
                        members: {
                            recommenderArn: {},
                            datasetGroupArn: {},
                            name: {},
                            recipeArn: {},
                            recommenderConfig: {
                                shape: "S1q"
                            },
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            status: {},
                            failureReason: {},
                            latestRecommenderUpdate: {
                                type: "structure",
                                members: {
                                    recommenderConfig: {
                                        shape: "S1q"
                                    },
                                    creationDateTime: {
                                        type: "timestamp"
                                    },
                                    lastUpdatedDateTime: {
                                        type: "timestamp"
                                    },
                                    status: {},
                                    failureReason: {}
                                }
                            },
                            modelMetrics: {
                                shape: "S4w"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeSchema: {
            input: {
                type: "structure",
                required: [ "schemaArn" ],
                members: {
                    schemaArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    schema: {
                        type: "structure",
                        members: {
                            name: {},
                            schemaArn: {},
                            schema: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            domain: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeSolution: {
            input: {
                type: "structure",
                required: [ "solutionArn" ],
                members: {
                    solutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    solution: {
                        type: "structure",
                        members: {
                            name: {},
                            solutionArn: {},
                            performHPO: {
                                type: "boolean"
                            },
                            performAutoML: {
                                type: "boolean"
                            },
                            recipeArn: {},
                            datasetGroupArn: {},
                            eventType: {},
                            solutionConfig: {
                                shape: "S20"
                            },
                            autoMLResult: {
                                type: "structure",
                                members: {
                                    bestRecipeArn: {}
                                }
                            },
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            latestSolutionVersion: {
                                shape: "S56"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeSolutionVersion: {
            input: {
                type: "structure",
                required: [ "solutionVersionArn" ],
                members: {
                    solutionVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersion: {
                        type: "structure",
                        members: {
                            name: {},
                            solutionVersionArn: {},
                            solutionArn: {},
                            performHPO: {
                                type: "boolean"
                            },
                            performAutoML: {
                                type: "boolean"
                            },
                            recipeArn: {},
                            eventType: {},
                            datasetGroupArn: {},
                            solutionConfig: {
                                shape: "S20"
                            },
                            trainingHours: {
                                type: "double"
                            },
                            trainingMode: {},
                            tunedHPOParams: {
                                type: "structure",
                                members: {
                                    algorithmHyperParameters: {
                                        shape: "Sc"
                                    }
                                }
                            },
                            status: {},
                            failureReason: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        GetSolutionMetrics: {
            input: {
                type: "structure",
                required: [ "solutionVersionArn" ],
                members: {
                    solutionVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersionArn: {},
                    metrics: {
                        shape: "S4w"
                    }
                }
            }
        },
        ListBatchInferenceJobs: {
            input: {
                type: "structure",
                members: {
                    solutionVersionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchInferenceJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                batchInferenceJobArn: {},
                                jobName: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {},
                                solutionVersionArn: {},
                                batchInferenceJobMode: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListBatchSegmentJobs: {
            input: {
                type: "structure",
                members: {
                    solutionVersionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchSegmentJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                batchSegmentJobArn: {},
                                jobName: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {},
                                solutionVersionArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListCampaigns: {
            input: {
                type: "structure",
                members: {
                    solutionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaigns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                campaignArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetExportJobs: {
            input: {
                type: "structure",
                members: {
                    datasetArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datasetExportJobArn: {},
                                jobName: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetGroups: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                datasetGroupArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {},
                                domain: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetImportJobs: {
            input: {
                type: "structure",
                members: {
                    datasetArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datasetImportJobArn: {},
                                jobName: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {},
                                importMode: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasets: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                datasetArn: {},
                                datasetType: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListEventTrackers: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTrackers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                eventTrackerArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListFilters: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                filterArn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                datasetGroupArn: {},
                                failureReason: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListMetricAttributionMetrics: {
            input: {
                type: "structure",
                members: {
                    metricAttributionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metrics: {
                        shape: "S1i"
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListMetricAttributions: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricAttributions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                metricAttributionArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListRecipes: {
            input: {
                type: "structure",
                members: {
                    recipeProvider: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    domain: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recipes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                recipeArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                domain: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListRecommenders: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommenders: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                recommenderArn: {},
                                datasetGroupArn: {},
                                recipeArn: {},
                                recommenderConfig: {
                                    shape: "S1q"
                                },
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListSchemas: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                schemaArn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                domain: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListSolutionVersions: {
            input: {
                type: "structure",
                members: {
                    solutionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersions: {
                        type: "list",
                        member: {
                            shape: "S56"
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListSolutions: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    solutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                solutionArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                recipeArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        StartRecommender: {
            input: {
                type: "structure",
                required: [ "recommenderArn" ],
                members: {
                    recommenderArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recommenderArn: {}
                }
            },
            idempotent: true
        },
        StopRecommender: {
            input: {
                type: "structure",
                required: [ "recommenderArn" ],
                members: {
                    recommenderArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recommenderArn: {}
                }
            },
            idempotent: true
        },
        StopSolutionVersionCreation: {
            input: {
                type: "structure",
                required: [ "solutionVersionArn" ],
                members: {
                    solutionVersionArn: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCampaign: {
            input: {
                type: "structure",
                required: [ "campaignArn" ],
                members: {
                    campaignArn: {},
                    solutionVersionArn: {},
                    minProvisionedTPS: {
                        type: "integer"
                    },
                    campaignConfig: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaignArn: {}
                }
            },
            idempotent: true
        },
        UpdateDataset: {
            input: {
                type: "structure",
                required: [ "datasetArn", "schemaArn" ],
                members: {
                    datasetArn: {},
                    schemaArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetArn: {}
                }
            },
            idempotent: true
        },
        UpdateMetricAttribution: {
            input: {
                type: "structure",
                members: {
                    addMetrics: {
                        shape: "S1i"
                    },
                    removeMetrics: {
                        type: "list",
                        member: {}
                    },
                    metricsOutputConfig: {
                        shape: "S1n"
                    },
                    metricAttributionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    metricAttributionArn: {}
                }
            }
        },
        UpdateRecommender: {
            input: {
                type: "structure",
                required: [ "recommenderArn", "recommenderConfig" ],
                members: {
                    recommenderArn: {},
                    recommenderConfig: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommenderArn: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "s3DataSource" ],
            members: {
                s3DataSource: {
                    shape: "S6"
                }
            }
        },
        S6: {
            type: "structure",
            required: [ "path" ],
            members: {
                path: {},
                kmsKeyArn: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "s3DataDestination" ],
            members: {
                s3DataDestination: {
                    shape: "S6"
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                itemExplorationConfig: {
                    shape: "Sc"
                }
            }
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "tagKey", "tagValue" ],
                members: {
                    tagKey: {},
                    tagValue: {}
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "fieldsForThemeGeneration" ],
            members: {
                fieldsForThemeGeneration: {
                    type: "structure",
                    required: [ "itemName" ],
                    members: {
                        itemName: {}
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "s3DataSource" ],
            members: {
                s3DataSource: {
                    shape: "S6"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "s3DataDestination" ],
            members: {
                s3DataDestination: {
                    shape: "S6"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                itemExplorationConfig: {
                    shape: "Sc"
                },
                enableMetadataWithRecommendations: {
                    type: "boolean"
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "s3DataDestination" ],
            members: {
                s3DataDestination: {
                    shape: "S6"
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                dataLocation: {}
            }
        },
        S1f: {
            type: "string",
            sensitive: true
        },
        S1i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventType", "metricName", "expression" ],
                members: {
                    eventType: {},
                    metricName: {},
                    expression: {}
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "roleArn" ],
            members: {
                s3DataDestination: {
                    shape: "S6"
                },
                roleArn: {}
            }
        },
        S1q: {
            type: "structure",
            members: {
                itemExplorationConfig: {
                    shape: "Sc"
                },
                minRecommendationRequestsPerSecond: {
                    type: "integer"
                },
                trainingDataConfig: {
                    shape: "S1r"
                },
                enableMetadataWithRecommendations: {
                    type: "boolean"
                }
            }
        },
        S1r: {
            type: "structure",
            members: {
                excludedDatasetColumns: {
                    type: "map",
                    key: {},
                    value: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                eventValueThreshold: {},
                hpoConfig: {
                    type: "structure",
                    members: {
                        hpoObjective: {
                            type: "structure",
                            members: {
                                type: {},
                                metricName: {},
                                metricRegex: {}
                            }
                        },
                        hpoResourceConfig: {
                            type: "structure",
                            members: {
                                maxNumberOfTrainingJobs: {},
                                maxParallelTrainingJobs: {}
                            }
                        },
                        algorithmHyperParameterRanges: {
                            type: "structure",
                            members: {
                                integerHyperParameterRanges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            minValue: {
                                                type: "integer"
                                            },
                                            maxValue: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                continuousHyperParameterRanges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            minValue: {
                                                type: "double"
                                            },
                                            maxValue: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                categoricalHyperParameterRanges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            values: {
                                                shape: "S2j"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                algorithmHyperParameters: {
                    shape: "Sc"
                },
                featureTransformationParameters: {
                    type: "map",
                    key: {},
                    value: {}
                },
                autoMLConfig: {
                    type: "structure",
                    members: {
                        metricName: {},
                        recipeList: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                optimizationObjective: {
                    type: "structure",
                    members: {
                        itemAttribute: {},
                        objectiveSensitivity: {}
                    }
                },
                trainingDataConfig: {
                    shape: "S1r"
                }
            }
        },
        S2j: {
            type: "list",
            member: {}
        },
        S4w: {
            type: "map",
            key: {},
            value: {
                type: "double"
            }
        },
        S56: {
            type: "structure",
            members: {
                solutionVersionArn: {},
                status: {},
                creationDateTime: {
                    type: "timestamp"
                },
                lastUpdatedDateTime: {
                    type: "timestamp"
                },
                failureReason: {}
            }
        }
    },
    paginators: {
        ListBatchInferenceJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "batchInferenceJobs"
        },
        ListBatchSegmentJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "batchSegmentJobs"
        },
        ListCampaigns: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "campaigns"
        },
        ListDatasetExportJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasetExportJobs"
        },
        ListDatasetGroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasetGroups"
        },
        ListDatasetImportJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasetImportJobs"
        },
        ListDatasets: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasets"
        },
        ListEventTrackers: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "eventTrackers"
        },
        ListFilters: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "Filters"
        },
        ListMetricAttributionMetrics: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "metrics"
        },
        ListMetricAttributions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "metricAttributions"
        },
        ListRecipes: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "recipes"
        },
        ListRecommenders: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "recommenders"
        },
        ListSchemas: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "schemas"
        },
        ListSolutionVersions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "solutionVersions"
        },
        ListSolutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "solutions"
        }
    }
};

AWS.apiLoader.services["personalizeevents"] = {};

AWS.PersonalizeEvents = AWS.Service.defineService("personalizeevents", [ "2018-03-22" ]);

AWS.apiLoader.services["personalizeevents"]["2018-03-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-03-22",
        endpointPrefix: "personalize-events",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Personalize Events",
        serviceId: "Personalize Events",
        signatureVersion: "v4",
        signingName: "personalize",
        uid: "personalize-events-2018-03-22"
    },
    operations: {
        PutActionInteractions: {
            http: {
                requestUri: "/action-interactions"
            },
            input: {
                type: "structure",
                required: [ "trackingId", "actionInteractions" ],
                members: {
                    trackingId: {},
                    actionInteractions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "actionId", "sessionId", "timestamp", "eventType" ],
                            members: {
                                actionId: {
                                    shape: "S5"
                                },
                                userId: {
                                    shape: "S6"
                                },
                                sessionId: {},
                                timestamp: {
                                    type: "timestamp"
                                },
                                eventType: {},
                                eventId: {},
                                recommendationId: {},
                                impression: {
                                    type: "list",
                                    member: {
                                        shape: "S5"
                                    }
                                },
                                properties: {
                                    jsonvalue: true,
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    }
                }
            }
        },
        PutActions: {
            http: {
                requestUri: "/actions"
            },
            input: {
                type: "structure",
                required: [ "datasetArn", "actions" ],
                members: {
                    datasetArn: {},
                    actions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "actionId" ],
                            members: {
                                actionId: {},
                                properties: {
                                    jsonvalue: true,
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    }
                }
            }
        },
        PutEvents: {
            http: {
                requestUri: "/events"
            },
            input: {
                type: "structure",
                required: [ "trackingId", "sessionId", "eventList" ],
                members: {
                    trackingId: {},
                    userId: {
                        shape: "S6"
                    },
                    sessionId: {},
                    eventList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventType", "sentAt" ],
                            members: {
                                eventId: {},
                                eventType: {},
                                eventValue: {
                                    type: "float"
                                },
                                itemId: {
                                    shape: "Sk"
                                },
                                properties: {
                                    jsonvalue: true,
                                    type: "string",
                                    sensitive: true
                                },
                                sentAt: {
                                    type: "timestamp"
                                },
                                recommendationId: {},
                                impression: {
                                    type: "list",
                                    member: {
                                        shape: "Sk"
                                    }
                                },
                                metricAttribution: {
                                    type: "structure",
                                    required: [ "eventAttributionSource" ],
                                    members: {
                                        eventAttributionSource: {}
                                    }
                                }
                            },
                            sensitive: true
                        }
                    }
                }
            }
        },
        PutItems: {
            http: {
                requestUri: "/items"
            },
            input: {
                type: "structure",
                required: [ "datasetArn", "items" ],
                members: {
                    datasetArn: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "itemId" ],
                            members: {
                                itemId: {},
                                properties: {
                                    jsonvalue: true,
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    }
                }
            }
        },
        PutUsers: {
            http: {
                requestUri: "/users"
            },
            input: {
                type: "structure",
                required: [ "datasetArn", "users" ],
                members: {
                    datasetArn: {},
                    users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "userId" ],
                            members: {
                                userId: {},
                                properties: {
                                    jsonvalue: true,
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "string",
            sensitive: true
        },
        Sk: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["personalizeruntime"] = {};

AWS.PersonalizeRuntime = AWS.Service.defineService("personalizeruntime", [ "2018-05-22" ]);

AWS.apiLoader.services["personalizeruntime"]["2018-05-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-22",
        endpointPrefix: "personalize-runtime",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Personalize Runtime",
        serviceId: "Personalize Runtime",
        signatureVersion: "v4",
        signingName: "personalize",
        uid: "personalize-runtime-2018-05-22"
    },
    operations: {
        GetActionRecommendations: {
            http: {
                requestUri: "/action-recommendations"
            },
            input: {
                type: "structure",
                members: {
                    campaignArn: {},
                    userId: {},
                    numResults: {
                        type: "integer"
                    },
                    filterArn: {},
                    filterValues: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                actionId: {},
                                score: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    recommendationId: {}
                }
            },
            idempotent: true
        },
        GetPersonalizedRanking: {
            http: {
                requestUri: "/personalize-ranking"
            },
            input: {
                type: "structure",
                required: [ "campaignArn", "inputList", "userId" ],
                members: {
                    campaignArn: {},
                    inputList: {
                        type: "list",
                        member: {}
                    },
                    userId: {},
                    context: {
                        shape: "Sh"
                    },
                    filterArn: {},
                    filterValues: {
                        shape: "S5"
                    },
                    metadataColumns: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    personalizedRanking: {
                        shape: "Sp"
                    },
                    recommendationId: {}
                }
            },
            idempotent: true
        },
        GetRecommendations: {
            http: {
                requestUri: "/recommendations"
            },
            input: {
                type: "structure",
                members: {
                    campaignArn: {},
                    itemId: {},
                    userId: {},
                    numResults: {
                        type: "integer"
                    },
                    context: {
                        shape: "Sh"
                    },
                    filterArn: {},
                    filterValues: {
                        shape: "S5"
                    },
                    recommenderArn: {},
                    promotions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                percentPromotedItems: {
                                    type: "integer"
                                },
                                filterArn: {},
                                filterValues: {
                                    shape: "S5"
                                }
                            }
                        }
                    },
                    metadataColumns: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    itemList: {
                        shape: "Sp"
                    },
                    recommendationId: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        Sh: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        Sk: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    itemId: {},
                    score: {
                        type: "double"
                    },
                    promotionName: {},
                    metadata: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["applicationinsights"] = {};

AWS.ApplicationInsights = AWS.Service.defineService("applicationinsights", [ "2018-11-25" ]);

AWS.apiLoader.services["applicationinsights"]["2018-11-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-25",
        endpointPrefix: "applicationinsights",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Application Insights",
        serviceFullName: "Amazon CloudWatch Application Insights",
        serviceId: "Application Insights",
        signatureVersion: "v4",
        signingName: "applicationinsights",
        targetPrefix: "EC2WindowsBarleyService",
        uid: "application-insights-2018-11-25"
    },
    operations: {
        AddWorkload: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "WorkloadConfiguration" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    WorkloadConfiguration: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadConfiguration: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    OpsCenterEnabled: {
                        type: "boolean"
                    },
                    CWEMonitorEnabled: {
                        type: "boolean"
                    },
                    OpsItemSNSTopicArn: {},
                    Tags: {
                        shape: "Se"
                    },
                    AutoConfigEnabled: {
                        type: "boolean"
                    },
                    AutoCreate: {
                        type: "boolean"
                    },
                    GroupingType: {},
                    AttachMissingPermission: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfo: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "ResourceList" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    ResourceList: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName", "Pattern", "Rank" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {},
                    Pattern: {},
                    Rank: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LogPattern: {
                        shape: "S13"
                    },
                    ResourceGroupName: {}
                }
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplication: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfo: {
                        shape: "Sn"
                    }
                }
            }
        },
        DescribeComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationComponent: {
                        shape: "S1e"
                    },
                    ResourceList: {
                        shape: "Su"
                    }
                }
            }
        },
        DescribeComponentConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Monitor: {
                        type: "boolean"
                    },
                    Tier: {},
                    ComponentConfiguration: {}
                }
            }
        },
        DescribeComponentConfigurationRecommendation: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "Tier" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    Tier: {},
                    WorkloadName: {},
                    RecommendationType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComponentConfiguration: {}
                }
            }
        },
        DescribeLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    AccountId: {},
                    LogPattern: {
                        shape: "S13"
                    }
                }
            }
        },
        DescribeObservation: {
            input: {
                type: "structure",
                required: [ "ObservationId" ],
                members: {
                    ObservationId: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Observation: {
                        shape: "S1w"
                    }
                }
            }
        },
        DescribeProblem: {
            input: {
                type: "structure",
                required: [ "ProblemId" ],
                members: {
                    ProblemId: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Problem: {
                        shape: "S38"
                    }
                }
            }
        },
        DescribeProblemObservations: {
            input: {
                type: "structure",
                required: [ "ProblemId" ],
                members: {
                    ProblemId: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RelatedObservations: {
                        type: "structure",
                        members: {
                            ObservationList: {
                                type: "list",
                                member: {
                                    shape: "S1w"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeWorkload: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "WorkloadId" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    WorkloadId: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadRemarks: {},
                    WorkloadConfiguration: {
                        shape: "S4"
                    }
                }
            }
        },
        ListApplications: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfoList: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListComponents: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationComponentList: {
                        type: "list",
                        member: {
                            shape: "S1e"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConfigurationHistory: {
            input: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    EventStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceGroupName: {},
                                AccountId: {},
                                MonitoredResourceARN: {},
                                EventStatus: {},
                                EventResourceType: {},
                                EventTime: {
                                    type: "timestamp"
                                },
                                EventDetail: {},
                                EventResourceName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLogPatternSets: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    AccountId: {},
                    LogPatternSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListLogPatterns: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    AccountId: {},
                    LogPatterns: {
                        type: "list",
                        member: {
                            shape: "S13"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProblems: {
            input: {
                type: "structure",
                members: {
                    AccountId: {},
                    ResourceGroupName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ComponentName: {},
                    Visibility: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProblemList: {
                        type: "list",
                        member: {
                            shape: "S38"
                        }
                    },
                    NextToken: {},
                    ResourceGroupName: {},
                    AccountId: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Se"
                    }
                }
            }
        },
        ListWorkloads: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkloadId: {},
                                ComponentName: {},
                                WorkloadName: {},
                                Tier: {},
                                WorkloadRemarks: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RemoveWorkload: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "WorkloadId" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    WorkloadId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    OpsCenterEnabled: {
                        type: "boolean"
                    },
                    CWEMonitorEnabled: {
                        type: "boolean"
                    },
                    OpsItemSNSTopicArn: {},
                    RemoveSNSTopic: {
                        type: "boolean"
                    },
                    AutoConfigEnabled: {
                        type: "boolean"
                    },
                    AttachMissingPermission: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfo: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    NewComponentName: {},
                    ResourceList: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateComponentConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    Monitor: {
                        type: "boolean"
                    },
                    Tier: {},
                    ComponentConfiguration: {},
                    AutoConfigEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {},
                    Pattern: {},
                    Rank: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    LogPattern: {
                        shape: "S13"
                    }
                }
            }
        },
        UpdateProblem: {
            input: {
                type: "structure",
                required: [ "ProblemId" ],
                members: {
                    ProblemId: {},
                    UpdateStatus: {},
                    Visibility: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkload: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "WorkloadConfiguration" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    WorkloadId: {},
                    WorkloadConfiguration: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadConfiguration: {
                        shape: "S4"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                WorkloadName: {},
                Tier: {},
                Configuration: {}
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                AccountId: {},
                ResourceGroupName: {},
                LifeCycle: {},
                OpsItemSNSTopicArn: {},
                OpsCenterEnabled: {
                    type: "boolean"
                },
                CWEMonitorEnabled: {
                    type: "boolean"
                },
                Remarks: {},
                AutoConfigEnabled: {
                    type: "boolean"
                },
                DiscoveryType: {},
                AttachMissingPermission: {
                    type: "boolean"
                }
            }
        },
        Su: {
            type: "list",
            member: {}
        },
        S13: {
            type: "structure",
            members: {
                PatternSetName: {},
                PatternName: {},
                Pattern: {},
                Rank: {
                    type: "integer"
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                ComponentName: {},
                ComponentRemarks: {},
                ResourceType: {},
                OsType: {},
                Tier: {},
                Monitor: {
                    type: "boolean"
                },
                DetectedWorkload: {
                    type: "map",
                    key: {},
                    value: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                Id: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                SourceType: {},
                SourceARN: {},
                LogGroup: {},
                LineTime: {
                    type: "timestamp"
                },
                LogText: {},
                LogFilter: {},
                MetricNamespace: {},
                MetricName: {},
                Unit: {},
                Value: {
                    type: "double"
                },
                CloudWatchEventId: {},
                CloudWatchEventSource: {},
                CloudWatchEventDetailType: {},
                HealthEventArn: {},
                HealthService: {},
                HealthEventTypeCode: {},
                HealthEventTypeCategory: {},
                HealthEventDescription: {},
                CodeDeployDeploymentId: {},
                CodeDeployDeploymentGroup: {},
                CodeDeployState: {},
                CodeDeployApplication: {},
                CodeDeployInstanceGroupId: {},
                Ec2State: {},
                RdsEventCategories: {},
                RdsEventMessage: {},
                S3EventName: {},
                StatesExecutionArn: {},
                StatesArn: {},
                StatesStatus: {},
                StatesInput: {},
                EbsEvent: {},
                EbsResult: {},
                EbsCause: {},
                EbsRequestId: {},
                XRayFaultPercent: {
                    type: "integer"
                },
                XRayThrottlePercent: {
                    type: "integer"
                },
                XRayErrorPercent: {
                    type: "integer"
                },
                XRayRequestCount: {
                    type: "integer"
                },
                XRayRequestAverageLatency: {
                    type: "long"
                },
                XRayNodeName: {},
                XRayNodeType: {}
            }
        },
        S38: {
            type: "structure",
            members: {
                Id: {},
                Title: {},
                Insights: {},
                Status: {},
                AffectedResource: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                SeverityLevel: {},
                AccountId: {},
                ResourceGroupName: {},
                Feedback: {
                    type: "map",
                    key: {},
                    value: {}
                },
                RecurringCount: {
                    type: "long"
                },
                LastRecurrenceTime: {
                    type: "timestamp"
                },
                Visibility: {},
                ResolutionMethod: {}
            }
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListComponents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListConfigurationHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLogPatternSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLogPatterns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProblems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkloads: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["servicequotas"] = {};

AWS.ServiceQuotas = AWS.Service.defineService("servicequotas", [ "2019-06-24" ]);

AWS.apiLoader.services["servicequotas"]["2019-06-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-24",
        endpointPrefix: "servicequotas",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Service Quotas",
        serviceId: "Service Quotas",
        signatureVersion: "v4",
        targetPrefix: "ServiceQuotasV20190624",
        uid: "service-quotas-2019-06-24"
    },
    operations: {
        AssociateServiceQuotaTemplate: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteServiceQuotaIncreaseRequestFromTemplate: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode", "AwsRegion" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    AwsRegion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateServiceQuotaTemplate: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAWSDefaultServiceQuota: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Quota: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetAssociationForServiceQuotaTemplate: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaTemplateAssociationStatus: {}
                }
            }
        },
        GetRequestedServiceQuotaChange: {
            input: {
                type: "structure",
                required: [ "RequestId" ],
                members: {
                    RequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestedQuota: {
                        shape: "S18"
                    }
                }
            }
        },
        GetServiceQuota: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    ContextId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Quota: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetServiceQuotaIncreaseRequestFromTemplate: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode", "AwsRegion" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    AwsRegion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaIncreaseRequestInTemplate: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListAWSDefaultServiceQuotas: {
            input: {
                type: "structure",
                required: [ "ServiceCode" ],
                members: {
                    ServiceCode: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Quotas: {
                        shape: "S1m"
                    }
                }
            }
        },
        ListRequestedServiceQuotaChangeHistory: {
            input: {
                type: "structure",
                members: {
                    ServiceCode: {},
                    Status: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    QuotaRequestedAtLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RequestedQuotas: {
                        shape: "S1p"
                    }
                }
            }
        },
        ListRequestedServiceQuotaChangeHistoryByQuota: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    Status: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    QuotaRequestedAtLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RequestedQuotas: {
                        shape: "S1p"
                    }
                }
            }
        },
        ListServiceQuotaIncreaseRequestsInTemplate: {
            input: {
                type: "structure",
                members: {
                    ServiceCode: {},
                    AwsRegion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaIncreaseRequestInTemplateList: {
                        type: "list",
                        member: {
                            shape: "S1h"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServiceQuotas: {
            input: {
                type: "structure",
                required: [ "ServiceCode" ],
                members: {
                    ServiceCode: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    QuotaCode: {},
                    QuotaAppliedAtLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Quotas: {
                        shape: "S1m"
                    }
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceCode: {},
                                ServiceName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S25"
                        }
                    }
                }
            }
        },
        PutServiceQuotaIncreaseRequestIntoTemplate: {
            input: {
                type: "structure",
                required: [ "QuotaCode", "ServiceCode", "AwsRegion", "DesiredValue" ],
                members: {
                    QuotaCode: {},
                    ServiceCode: {},
                    AwsRegion: {},
                    DesiredValue: {
                        type: "double"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaIncreaseRequestInTemplate: {
                        shape: "S1h"
                    }
                }
            }
        },
        RequestServiceQuotaIncrease: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode", "DesiredValue" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    DesiredValue: {
                        type: "double"
                    },
                    ContextId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestedQuota: {
                        shape: "S18"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S25"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sc: {
            type: "structure",
            members: {
                ServiceCode: {},
                ServiceName: {},
                QuotaArn: {},
                QuotaCode: {},
                QuotaName: {},
                Value: {
                    type: "double"
                },
                Unit: {},
                Adjustable: {
                    type: "boolean"
                },
                GlobalQuota: {
                    type: "boolean"
                },
                UsageMetric: {
                    type: "structure",
                    members: {
                        MetricNamespace: {},
                        MetricName: {},
                        MetricDimensions: {
                            type: "map",
                            key: {},
                            value: {}
                        },
                        MetricStatisticRecommendation: {}
                    }
                },
                Period: {
                    type: "structure",
                    members: {
                        PeriodValue: {
                            type: "integer"
                        },
                        PeriodUnit: {}
                    }
                },
                ErrorReason: {
                    type: "structure",
                    members: {
                        ErrorCode: {},
                        ErrorMessage: {}
                    }
                },
                QuotaAppliedAtLevel: {},
                QuotaContext: {
                    shape: "Sy"
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                ContextScope: {},
                ContextScopeType: {},
                ContextId: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                Id: {},
                CaseId: {},
                ServiceCode: {},
                ServiceName: {},
                QuotaCode: {},
                QuotaName: {},
                DesiredValue: {
                    type: "double"
                },
                Status: {},
                Created: {
                    type: "timestamp"
                },
                LastUpdated: {
                    type: "timestamp"
                },
                Requester: {},
                QuotaArn: {},
                GlobalQuota: {
                    type: "boolean"
                },
                Unit: {},
                QuotaRequestedAtLevel: {},
                QuotaContext: {
                    shape: "Sy"
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                ServiceCode: {},
                ServiceName: {},
                QuotaCode: {},
                QuotaName: {},
                DesiredValue: {
                    type: "double"
                },
                AwsRegion: {},
                Unit: {},
                GlobalQuota: {
                    type: "boolean"
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                shape: "Sc"
            }
        },
        S1p: {
            type: "list",
            member: {
                shape: "S18"
            }
        },
        S25: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        }
    },
    paginators: {
        ListAWSDefaultServiceQuotas: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Quotas"
        },
        ListRequestedServiceQuotaChangeHistory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RequestedQuotas"
        },
        ListRequestedServiceQuotaChangeHistoryByQuota: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RequestedQuotas"
        },
        ListServiceQuotaIncreaseRequestsInTemplate: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ServiceQuotaIncreaseRequestInTemplateList"
        },
        ListServiceQuotas: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Quotas"
        },
        ListServices: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Services"
        }
    }
};

AWS.apiLoader.services["ec2instanceconnect"] = {};

AWS.EC2InstanceConnect = AWS.Service.defineService("ec2instanceconnect", [ "2018-04-02" ]);

AWS.apiLoader.services["ec2instanceconnect"]["2018-04-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-02",
        endpointPrefix: "ec2-instance-connect",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "EC2 Instance Connect",
        serviceFullName: "AWS EC2 Instance Connect",
        serviceId: "EC2 Instance Connect",
        signatureVersion: "v4",
        targetPrefix: "AWSEC2InstanceConnectService",
        uid: "ec2-instance-connect-2018-04-02"
    },
    operations: {
        SendSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "InstanceId", "InstanceOSUser", "SSHPublicKey" ],
                members: {
                    InstanceId: {},
                    InstanceOSUser: {},
                    SSHPublicKey: {},
                    AvailabilityZone: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Success: {
                        type: "boolean"
                    }
                }
            }
        },
        SendSerialConsoleSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "InstanceId", "SSHPublicKey" ],
                members: {
                    InstanceId: {},
                    SerialPort: {
                        type: "integer"
                    },
                    SSHPublicKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Success: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["eventbridge"] = {};

AWS.EventBridge = AWS.Service.defineService("eventbridge", [ "2015-10-07" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    103: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.EventBridge.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (request.operation === "putEvents") {
                    var params = request.params || {};
                    if (params.EndpointId !== undefined) {
                        throw new AWS.util.error(new Error(), {
                            code: "InvalidParameter",
                            message: "EndpointId is not supported in current SDK.\n" + "You should consider switching to V3(https://github.com/aws/aws-sdk-js-v3)."
                        });
                    }
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 103 ]);

AWS.apiLoader.services["eventbridge"]["2015-10-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-10-07",
        endpointPrefix: "events",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon EventBridge",
        serviceId: "EventBridge",
        signatureVersion: "v4",
        targetPrefix: "AWSEvents",
        uid: "eventbridge-2015-10-07"
    },
    operations: {
        ActivateEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CancelReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName" ],
                members: {
                    ReplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayArn: {},
                    State: {},
                    StateReason: {}
                }
            }
        },
        CreateApiDestination: {
            input: {
                type: "structure",
                required: [ "Name", "ConnectionArn", "InvocationEndpoint", "HttpMethod" ],
                members: {
                    Name: {},
                    Description: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    ApiDestinationState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName", "EventSourceArn" ],
                members: {
                    ArchiveName: {},
                    EventSourceArn: {},
                    Description: {},
                    EventPattern: {},
                    RetentionDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    State: {},
                    StateReason: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "Name", "AuthorizationType", "AuthParameters" ],
                members: {
                    Name: {},
                    Description: {},
                    AuthorizationType: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                required: [ "Username", "Password" ],
                                members: {
                                    Username: {},
                                    Password: {
                                        shape: "S11"
                                    }
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                required: [ "ClientParameters", "AuthorizationEndpoint", "HttpMethod" ],
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        required: [ "ClientID", "ClientSecret" ],
                                        members: {
                                            ClientID: {},
                                            ClientSecret: {
                                                shape: "S11"
                                            }
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S15"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                required: [ "ApiKeyName", "ApiKeyValue" ],
                                members: {
                                    ApiKeyName: {},
                                    ApiKeyValue: {
                                        shape: "S11"
                                    }
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S15"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateEndpoint: {
            input: {
                type: "structure",
                required: [ "Name", "RoutingConfig", "EventBuses" ],
                members: {
                    Name: {},
                    Description: {},
                    RoutingConfig: {
                        shape: "S1p"
                    },
                    ReplicationConfig: {
                        shape: "S1v"
                    },
                    EventBuses: {
                        shape: "S1x"
                    },
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    RoutingConfig: {
                        shape: "S1p"
                    },
                    ReplicationConfig: {
                        shape: "S1v"
                    },
                    EventBuses: {
                        shape: "S1x"
                    },
                    RoleArn: {},
                    State: {}
                }
            }
        },
        CreateEventBus: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventSourceName: {},
                    Tags: {
                        shape: "S26"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventBusArn: {}
                }
            }
        },
        CreatePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name", "Account" ],
                members: {
                    Name: {},
                    Account: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSourceArn: {}
                }
            }
        },
        DeactivateEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeauthorizeConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteEndpoint: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventBus: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeletePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name", "Account" ],
                members: {
                    Name: {},
                    Account: {}
                }
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {},
                    Force: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    Name: {},
                    Description: {},
                    ApiDestinationState: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    ArchiveName: {},
                    EventSourceArn: {},
                    Description: {},
                    EventPattern: {},
                    State: {},
                    StateReason: {},
                    RetentionDays: {
                        type: "integer"
                    },
                    SizeBytes: {
                        type: "long"
                    },
                    EventCount: {
                        type: "long"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    Name: {},
                    Description: {},
                    ConnectionState: {},
                    StateReason: {},
                    AuthorizationType: {},
                    SecretArn: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                members: {
                                    Username: {}
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        members: {
                                            ClientID: {}
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S15"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                members: {
                                    ApiKeyName: {}
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S15"
                            }
                        }
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeEndpoint: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    HomeRegion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    Arn: {},
                    RoutingConfig: {
                        shape: "S1p"
                    },
                    ReplicationConfig: {
                        shape: "S1v"
                    },
                    EventBuses: {
                        shape: "S1x"
                    },
                    RoleArn: {},
                    EndpointId: {},
                    EndpointUrl: {},
                    State: {},
                    StateReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeEventBus: {
            input: {
                type: "structure",
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    Policy: {}
                }
            }
        },
        DescribeEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedBy: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ExpirationTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            }
        },
        DescribePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {}
                }
            }
        },
        DescribeReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName" ],
                members: {
                    ReplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayName: {},
                    ReplayArn: {},
                    Description: {},
                    State: {},
                    StateReason: {},
                    EventSourceArn: {},
                    Destination: {
                        shape: "S3o"
                    },
                    EventStartTime: {
                        type: "timestamp"
                    },
                    EventEndTime: {
                        type: "timestamp"
                    },
                    EventLastReplayedTime: {
                        type: "timestamp"
                    },
                    ReplayStartTime: {
                        type: "timestamp"
                    },
                    ReplayEndTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    EventPattern: {},
                    ScheduleExpression: {},
                    State: {},
                    Description: {},
                    RoleArn: {},
                    ManagedBy: {},
                    EventBusName: {},
                    CreatedBy: {}
                }
            }
        },
        DisableRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            }
        },
        EnableRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            }
        },
        ListApiDestinations: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    ConnectionArn: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiDestinationArn: {},
                                Name: {},
                                ApiDestinationState: {},
                                ConnectionArn: {},
                                InvocationEndpoint: {},
                                HttpMethod: {},
                                InvocationRateLimitPerSecond: {
                                    type: "integer"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListArchives: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    EventSourceArn: {},
                    State: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Archives: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ArchiveName: {},
                                EventSourceArn: {},
                                State: {},
                                StateReason: {},
                                RetentionDays: {
                                    type: "integer"
                                },
                                SizeBytes: {
                                    type: "long"
                                },
                                EventCount: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnections: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    ConnectionState: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectionArn: {},
                                Name: {},
                                ConnectionState: {},
                                StateReason: {},
                                AuthorizationType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastAuthorizedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpoints: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    HomeRegion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Description: {},
                                Arn: {},
                                RoutingConfig: {
                                    shape: "S1p"
                                },
                                ReplicationConfig: {
                                    shape: "S1v"
                                },
                                EventBuses: {
                                    shape: "S1x"
                                },
                                RoleArn: {},
                                EndpointId: {},
                                EndpointUrl: {},
                                State: {},
                                StateReason: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventBuses: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventBuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {},
                                Policy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventSources: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedBy: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ExpirationTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPartnerEventSourceAccounts: {
            input: {
                type: "structure",
                required: [ "EventSourceName" ],
                members: {
                    EventSourceName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PartnerEventSourceAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Account: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ExpirationTime: {
                                    type: "timestamp"
                                },
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPartnerEventSources: {
            input: {
                type: "structure",
                required: [ "NamePrefix" ],
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PartnerEventSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListReplays: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    State: {},
                    EventSourceArn: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Replays: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReplayName: {},
                                EventSourceArn: {},
                                State: {},
                                StateReason: {},
                                EventStartTime: {
                                    type: "timestamp"
                                },
                                EventEndTime: {
                                    type: "timestamp"
                                },
                                EventLastReplayedTime: {
                                    type: "timestamp"
                                },
                                ReplayStartTime: {
                                    type: "timestamp"
                                },
                                ReplayEndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRuleNamesByTarget: {
            input: {
                type: "structure",
                required: [ "TargetArn" ],
                members: {
                    TargetArn: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListRules: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {},
                                EventPattern: {},
                                State: {},
                                Description: {},
                                ScheduleExpression: {},
                                RoleArn: {},
                                ManagedBy: {},
                                EventBusName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S26"
                    }
                }
            }
        },
        ListTargetsByRule: {
            input: {
                type: "structure",
                required: [ "Rule" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Targets: {
                        shape: "S5h"
                    },
                    NextToken: {}
                }
            }
        },
        PutEvents: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Time: {
                                    type: "timestamp"
                                },
                                Source: {},
                                Resources: {
                                    shape: "S7i"
                                },
                                DetailType: {},
                                Detail: {},
                                EventBusName: {},
                                TraceHeader: {}
                            }
                        }
                    },
                    EndpointId: {
                        contextParam: {
                            name: "EndpointId"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        PutPartnerEvents: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Time: {
                                    type: "timestamp"
                                },
                                Source: {},
                                Resources: {
                                    shape: "S7i"
                                },
                                DetailType: {},
                                Detail: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        PutPermission: {
            input: {
                type: "structure",
                members: {
                    EventBusName: {},
                    Action: {},
                    Principal: {},
                    StatementId: {},
                    Condition: {
                        type: "structure",
                        required: [ "Type", "Key", "Value" ],
                        members: {
                            Type: {},
                            Key: {},
                            Value: {}
                        }
                    },
                    Policy: {}
                }
            }
        },
        PutRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    ScheduleExpression: {},
                    EventPattern: {},
                    State: {},
                    Description: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S26"
                    },
                    EventBusName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleArn: {}
                }
            }
        },
        PutTargets: {
            input: {
                type: "structure",
                required: [ "Rule", "Targets" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    Targets: {
                        shape: "S5h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    FailedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        RemovePermission: {
            input: {
                type: "structure",
                members: {
                    StatementId: {},
                    RemoveAllPermissions: {
                        type: "boolean"
                    },
                    EventBusName: {}
                }
            }
        },
        RemoveTargets: {
            input: {
                type: "structure",
                required: [ "Rule", "Ids" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    Ids: {
                        type: "list",
                        member: {}
                    },
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    FailedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        StartReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName", "EventSourceArn", "EventStartTime", "EventEndTime", "Destination" ],
                members: {
                    ReplayName: {},
                    Description: {},
                    EventSourceArn: {},
                    EventStartTime: {
                        type: "timestamp"
                    },
                    EventEndTime: {
                        type: "timestamp"
                    },
                    Destination: {
                        shape: "S3o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayArn: {},
                    State: {},
                    StateReason: {},
                    ReplayStartTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S26"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestEventPattern: {
            input: {
                type: "structure",
                required: [ "EventPattern", "Event" ],
                members: {
                    EventPattern: {},
                    Event: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {
                        type: "boolean"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    ApiDestinationState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {},
                    Description: {},
                    EventPattern: {},
                    RetentionDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    State: {},
                    StateReason: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    AuthorizationType: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                members: {
                                    Username: {},
                                    Password: {
                                        shape: "S11"
                                    }
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        members: {
                                            ClientID: {},
                                            ClientSecret: {
                                                shape: "S11"
                                            }
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S15"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                members: {
                                    ApiKeyName: {},
                                    ApiKeyValue: {
                                        shape: "S11"
                                    }
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S15"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateEndpoint: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    RoutingConfig: {
                        shape: "S1p"
                    },
                    ReplicationConfig: {
                        shape: "S1v"
                    },
                    EventBuses: {
                        shape: "S1x"
                    },
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    RoutingConfig: {
                        shape: "S1p"
                    },
                    ReplicationConfig: {
                        shape: "S1v"
                    },
                    EventBuses: {
                        shape: "S1x"
                    },
                    RoleArn: {},
                    EndpointId: {},
                    EndpointUrl: {},
                    State: {}
                }
            }
        }
    },
    shapes: {
        S11: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "structure",
            members: {
                HeaderParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {
                                type: "string",
                                sensitive: true
                            },
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                },
                QueryStringParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {
                                type: "string",
                                sensitive: true
                            },
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                },
                BodyParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {
                                type: "string",
                                sensitive: true
                            },
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "FailoverConfig" ],
            members: {
                FailoverConfig: {
                    type: "structure",
                    required: [ "Primary", "Secondary" ],
                    members: {
                        Primary: {
                            type: "structure",
                            required: [ "HealthCheck" ],
                            members: {
                                HealthCheck: {}
                            }
                        },
                        Secondary: {
                            type: "structure",
                            required: [ "Route" ],
                            members: {
                                Route: {}
                            }
                        }
                    }
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                State: {}
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "EventBusArn" ],
                members: {
                    EventBusArn: {}
                }
            }
        },
        S26: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S3o: {
            type: "structure",
            required: [ "Arn" ],
            members: {
                Arn: {},
                FilterArns: {
                    type: "list",
                    member: {}
                }
            }
        },
        S5h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id", "Arn" ],
                members: {
                    Id: {},
                    Arn: {},
                    RoleArn: {},
                    Input: {},
                    InputPath: {},
                    InputTransformer: {
                        type: "structure",
                        required: [ "InputTemplate" ],
                        members: {
                            InputPathsMap: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            InputTemplate: {}
                        }
                    },
                    KinesisParameters: {
                        type: "structure",
                        required: [ "PartitionKeyPath" ],
                        members: {
                            PartitionKeyPath: {}
                        }
                    },
                    RunCommandParameters: {
                        type: "structure",
                        required: [ "RunCommandTargets" ],
                        members: {
                            RunCommandTargets: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Key", "Values" ],
                                    members: {
                                        Key: {},
                                        Values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    EcsParameters: {
                        type: "structure",
                        required: [ "TaskDefinitionArn" ],
                        members: {
                            TaskDefinitionArn: {},
                            TaskCount: {
                                type: "integer"
                            },
                            LaunchType: {},
                            NetworkConfiguration: {
                                type: "structure",
                                members: {
                                    awsvpcConfiguration: {
                                        type: "structure",
                                        required: [ "Subnets" ],
                                        members: {
                                            Subnets: {
                                                shape: "S63"
                                            },
                                            SecurityGroups: {
                                                shape: "S63"
                                            },
                                            AssignPublicIp: {}
                                        }
                                    }
                                }
                            },
                            PlatformVersion: {},
                            Group: {},
                            CapacityProviderStrategy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "capacityProvider" ],
                                    members: {
                                        capacityProvider: {},
                                        weight: {
                                            type: "integer"
                                        },
                                        base: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            EnableECSManagedTags: {
                                type: "boolean"
                            },
                            EnableExecuteCommand: {
                                type: "boolean"
                            },
                            PlacementConstraints: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        type: {},
                                        expression: {}
                                    }
                                }
                            },
                            PlacementStrategy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        type: {},
                                        field: {}
                                    }
                                }
                            },
                            PropagateTags: {},
                            ReferenceId: {},
                            Tags: {
                                shape: "S26"
                            }
                        }
                    },
                    BatchParameters: {
                        type: "structure",
                        required: [ "JobDefinition", "JobName" ],
                        members: {
                            JobDefinition: {},
                            JobName: {},
                            ArrayProperties: {
                                type: "structure",
                                members: {
                                    Size: {
                                        type: "integer"
                                    }
                                }
                            },
                            RetryStrategy: {
                                type: "structure",
                                members: {
                                    Attempts: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    SqsParameters: {
                        type: "structure",
                        members: {
                            MessageGroupId: {}
                        }
                    },
                    HttpParameters: {
                        type: "structure",
                        members: {
                            PathParameterValues: {
                                type: "list",
                                member: {}
                            },
                            HeaderParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            QueryStringParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    RedshiftDataParameters: {
                        type: "structure",
                        required: [ "Database" ],
                        members: {
                            SecretManagerArn: {},
                            Database: {},
                            DbUser: {},
                            Sql: {
                                shape: "S71"
                            },
                            StatementName: {},
                            WithEvent: {
                                type: "boolean"
                            },
                            Sqls: {
                                type: "list",
                                member: {
                                    shape: "S71"
                                },
                                sensitive: true
                            }
                        }
                    },
                    SageMakerPipelineParameters: {
                        type: "structure",
                        members: {
                            PipelineParameterList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Name", "Value" ],
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                }
                            }
                        }
                    },
                    DeadLetterConfig: {
                        type: "structure",
                        members: {
                            Arn: {}
                        }
                    },
                    RetryPolicy: {
                        type: "structure",
                        members: {
                            MaximumRetryAttempts: {
                                type: "integer"
                            },
                            MaximumEventAgeInSeconds: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S63: {
            type: "list",
            member: {}
        },
        S71: {
            type: "string",
            sensitive: true
        },
        S7i: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["lakeformation"] = {};

AWS.LakeFormation = AWS.Service.defineService("lakeformation", [ "2017-03-31" ]);

AWS.apiLoader.services["lakeformation"]["2017-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-03-31",
        endpointPrefix: "lakeformation",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Lake Formation",
        serviceId: "LakeFormation",
        signatureVersion: "v4",
        signingName: "lakeformation",
        uid: "lakeformation-2017-03-31"
    },
    operations: {
        AddLFTagsToResource: {
            http: {
                requestUri: "/AddLFTagsToResource"
            },
            input: {
                type: "structure",
                required: [ "Resource", "LFTags" ],
                members: {
                    CatalogId: {},
                    Resource: {
                        shape: "S3"
                    },
                    LFTags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sq"
                    }
                }
            }
        },
        AssumeDecoratedRoleWithSAML: {
            http: {
                requestUri: "/AssumeDecoratedRoleWithSAML"
            },
            input: {
                type: "structure",
                required: [ "SAMLAssertion", "RoleArn", "PrincipalArn" ],
                members: {
                    SAMLAssertion: {},
                    RoleArn: {},
                    PrincipalArn: {},
                    DurationSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessKeyId: {},
                    SecretAccessKey: {},
                    SessionToken: {},
                    Expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        BatchGrantPermissions: {
            http: {
                requestUri: "/BatchGrantPermissions"
            },
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    CatalogId: {},
                    Entries: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "S1d"
                    }
                }
            }
        },
        BatchRevokePermissions: {
            http: {
                requestUri: "/BatchRevokePermissions"
            },
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    CatalogId: {},
                    Entries: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "S1d"
                    }
                }
            }
        },
        CancelTransaction: {
            http: {
                requestUri: "/CancelTransaction"
            },
            input: {
                type: "structure",
                required: [ "TransactionId" ],
                members: {
                    TransactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CommitTransaction: {
            http: {
                requestUri: "/CommitTransaction"
            },
            input: {
                type: "structure",
                required: [ "TransactionId" ],
                members: {
                    TransactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransactionStatus: {}
                }
            }
        },
        CreateDataCellsFilter: {
            http: {
                requestUri: "/CreateDataCellsFilter"
            },
            input: {
                type: "structure",
                required: [ "TableData" ],
                members: {
                    TableData: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateLFTag: {
            http: {
                requestUri: "/CreateLFTag"
            },
            input: {
                type: "structure",
                required: [ "TagKey", "TagValues" ],
                members: {
                    CatalogId: {},
                    TagKey: {},
                    TagValues: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateLakeFormationIdentityCenterConfiguration: {
            http: {
                requestUri: "/CreateLakeFormationIdentityCenterConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    InstanceArn: {},
                    ExternalFiltering: {
                        shape: "S1y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationArn: {}
                }
            }
        },
        CreateLakeFormationOptIn: {
            http: {
                requestUri: "/CreateLakeFormationOptIn"
            },
            input: {
                type: "structure",
                required: [ "Principal", "Resource" ],
                members: {
                    Principal: {
                        shape: "S18"
                    },
                    Resource: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDataCellsFilter: {
            http: {
                requestUri: "/DeleteDataCellsFilter"
            },
            input: {
                type: "structure",
                members: {
                    TableCatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLFTag: {
            http: {
                requestUri: "/DeleteLFTag"
            },
            input: {
                type: "structure",
                required: [ "TagKey" ],
                members: {
                    CatalogId: {},
                    TagKey: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLakeFormationIdentityCenterConfiguration: {
            http: {
                requestUri: "/DeleteLakeFormationIdentityCenterConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLakeFormationOptIn: {
            http: {
                requestUri: "/DeleteLakeFormationOptIn"
            },
            input: {
                type: "structure",
                required: [ "Principal", "Resource" ],
                members: {
                    Principal: {
                        shape: "S18"
                    },
                    Resource: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteObjectsOnCancel: {
            http: {
                requestUri: "/DeleteObjectsOnCancel"
            },
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "TransactionId", "Objects" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    TransactionId: {},
                    Objects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Uri" ],
                            members: {
                                Uri: {},
                                ETag: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterResource: {
            http: {
                requestUri: "/DeregisterResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeLakeFormationIdentityCenterConfiguration: {
            http: {
                requestUri: "/DescribeLakeFormationIdentityCenterConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CatalogId: {},
                    InstanceArn: {},
                    ApplicationArn: {},
                    ExternalFiltering: {
                        shape: "S1y"
                    }
                }
            }
        },
        DescribeResource: {
            http: {
                requestUri: "/DescribeResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceInfo: {
                        shape: "S2q"
                    }
                }
            }
        },
        DescribeTransaction: {
            http: {
                requestUri: "/DescribeTransaction"
            },
            input: {
                type: "structure",
                required: [ "TransactionId" ],
                members: {
                    TransactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransactionDescription: {
                        shape: "S2v"
                    }
                }
            }
        },
        ExtendTransaction: {
            http: {
                requestUri: "/ExtendTransaction"
            },
            input: {
                type: "structure",
                members: {
                    TransactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDataCellsFilter: {
            http: {
                requestUri: "/GetDataCellsFilter"
            },
            input: {
                type: "structure",
                required: [ "TableCatalogId", "DatabaseName", "TableName", "Name" ],
                members: {
                    TableCatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCellsFilter: {
                        shape: "S1o"
                    }
                }
            }
        },
        GetDataLakeSettings: {
            http: {
                requestUri: "/GetDataLakeSettings"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataLakeSettings: {
                        shape: "S33"
                    }
                }
            }
        },
        GetEffectivePermissionsForPath: {
            http: {
                requestUri: "/GetEffectivePermissionsForPath"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    CatalogId: {},
                    ResourceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        shape: "S3g"
                    },
                    NextToken: {}
                }
            }
        },
        GetLFTag: {
            http: {
                requestUri: "/GetLFTag"
            },
            input: {
                type: "structure",
                required: [ "TagKey" ],
                members: {
                    CatalogId: {},
                    TagKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CatalogId: {},
                    TagKey: {},
                    TagValues: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetQueryState: {
            http: {
                requestUri: "/GetQueryState",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    QueryId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "State" ],
                members: {
                    Error: {},
                    State: {}
                }
            },
            endpoint: {
                hostPrefix: "query-"
            }
        },
        GetQueryStatistics: {
            http: {
                requestUri: "/GetQueryStatistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    QueryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExecutionStatistics: {
                        type: "structure",
                        members: {
                            AverageExecutionTimeMillis: {
                                type: "long"
                            },
                            DataScannedBytes: {
                                type: "long"
                            },
                            WorkUnitsExecutedCount: {
                                type: "long"
                            }
                        }
                    },
                    PlanningStatistics: {
                        type: "structure",
                        members: {
                            EstimatedDataToScanBytes: {
                                type: "long"
                            },
                            PlanningTimeMillis: {
                                type: "long"
                            },
                            QueueTimeMillis: {
                                type: "long"
                            },
                            WorkUnitsGeneratedCount: {
                                type: "long"
                            }
                        }
                    },
                    QuerySubmissionTime: {
                        type: "timestamp",
                        timestampFormat: "iso8601"
                    }
                }
            },
            endpoint: {
                hostPrefix: "query-"
            }
        },
        GetResourceLFTags: {
            http: {
                requestUri: "/GetResourceLFTags"
            },
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    CatalogId: {},
                    Resource: {
                        shape: "S3"
                    },
                    ShowAssignedLFTags: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LFTagOnDatabase: {
                        shape: "Sn"
                    },
                    LFTagsOnTable: {
                        shape: "Sn"
                    },
                    LFTagsOnColumns: {
                        shape: "S44"
                    }
                }
            }
        },
        GetTableObjects: {
            http: {
                requestUri: "/GetTableObjects"
            },
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    TransactionId: {},
                    QueryAsOfTime: {
                        type: "timestamp"
                    },
                    PartitionPredicate: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Objects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PartitionValues: {
                                    shape: "S4b"
                                },
                                Objects: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Uri: {},
                                            ETag: {},
                                            Size: {
                                                type: "long"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTemporaryGluePartitionCredentials: {
            http: {
                requestUri: "/GetTemporaryGluePartitionCredentials"
            },
            input: {
                type: "structure",
                required: [ "TableArn", "Partition" ],
                members: {
                    TableArn: {},
                    Partition: {
                        type: "structure",
                        required: [ "Values" ],
                        members: {
                            Values: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    Permissions: {
                        shape: "S1a"
                    },
                    DurationSeconds: {
                        type: "integer"
                    },
                    AuditContext: {
                        shape: "S4k"
                    },
                    SupportedPermissionTypes: {
                        shape: "S4m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessKeyId: {},
                    SecretAccessKey: {},
                    SessionToken: {},
                    Expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetTemporaryGlueTableCredentials: {
            http: {
                requestUri: "/GetTemporaryGlueTableCredentials"
            },
            input: {
                type: "structure",
                required: [ "TableArn" ],
                members: {
                    TableArn: {},
                    Permissions: {
                        shape: "S1a"
                    },
                    DurationSeconds: {
                        type: "integer"
                    },
                    AuditContext: {
                        shape: "S4k"
                    },
                    SupportedPermissionTypes: {
                        shape: "S4m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessKeyId: {},
                    SecretAccessKey: {},
                    SessionToken: {},
                    Expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetWorkUnitResults: {
            http: {
                requestUri: "/GetWorkUnitResults",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "QueryId", "WorkUnitId", "WorkUnitToken" ],
                members: {
                    QueryId: {},
                    WorkUnitId: {
                        type: "long"
                    },
                    WorkUnitToken: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResultStream: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "ResultStream"
            },
            endpoint: {
                hostPrefix: "data-"
            }
        },
        GetWorkUnits: {
            http: {
                requestUri: "/GetWorkUnits",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    NextToken: {},
                    PageSize: {
                        type: "integer"
                    },
                    QueryId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "QueryId", "WorkUnitRanges" ],
                members: {
                    NextToken: {},
                    QueryId: {},
                    WorkUnitRanges: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkUnitIdMax", "WorkUnitIdMin", "WorkUnitToken" ],
                            members: {
                                WorkUnitIdMax: {
                                    type: "long"
                                },
                                WorkUnitIdMin: {
                                    type: "long"
                                },
                                WorkUnitToken: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "query-"
            }
        },
        GrantPermissions: {
            http: {
                requestUri: "/GrantPermissions"
            },
            input: {
                type: "structure",
                required: [ "Principal", "Resource", "Permissions" ],
                members: {
                    CatalogId: {},
                    Principal: {
                        shape: "S18"
                    },
                    Resource: {
                        shape: "S3"
                    },
                    Permissions: {
                        shape: "S1a"
                    },
                    PermissionsWithGrantOption: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListDataCellsFilter: {
            http: {
                requestUri: "/ListDataCellsFilter"
            },
            input: {
                type: "structure",
                members: {
                    Table: {
                        shape: "S7"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCellsFilters: {
                        type: "list",
                        member: {
                            shape: "S1o"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLFTags: {
            http: {
                requestUri: "/ListLFTags"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    ResourceShareType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LFTags: {
                        shape: "Sn"
                    },
                    NextToken: {}
                }
            }
        },
        ListLakeFormationOptIns: {
            http: {
                requestUri: "/ListLakeFormationOptIns"
            },
            input: {
                type: "structure",
                members: {
                    Principal: {
                        shape: "S18"
                    },
                    Resource: {
                        shape: "S3"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LakeFormationOptInsInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Resource: {
                                    shape: "S3"
                                },
                                Principal: {
                                    shape: "S18"
                                },
                                LastModified: {
                                    type: "timestamp"
                                },
                                LastUpdatedBy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissions: {
            http: {
                requestUri: "/ListPermissions"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    Principal: {
                        shape: "S18"
                    },
                    ResourceType: {},
                    Resource: {
                        shape: "S3"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    IncludeRelated: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PrincipalResourcePermissions: {
                        shape: "S3g"
                    },
                    NextToken: {}
                }
            }
        },
        ListResources: {
            http: {
                requestUri: "/ListResources"
            },
            input: {
                type: "structure",
                members: {
                    FilterConditionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Field: {},
                                ComparisonOperator: {},
                                StringValueList: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceInfoList: {
                        type: "list",
                        member: {
                            shape: "S2q"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTableStorageOptimizers: {
            http: {
                requestUri: "/ListTableStorageOptimizers"
            },
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    StorageOptimizerType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageOptimizerList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StorageOptimizerType: {},
                                Config: {
                                    shape: "S60"
                                },
                                ErrorMessage: {},
                                Warnings: {},
                                LastRunDetails: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTransactions: {
            http: {
                requestUri: "/ListTransactions"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    StatusFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Transactions: {
                        type: "list",
                        member: {
                            shape: "S2v"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutDataLakeSettings: {
            http: {
                requestUri: "/PutDataLakeSettings"
            },
            input: {
                type: "structure",
                required: [ "DataLakeSettings" ],
                members: {
                    CatalogId: {},
                    DataLakeSettings: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegisterResource: {
            http: {
                requestUri: "/RegisterResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    UseServiceLinkedRole: {
                        type: "boolean"
                    },
                    RoleArn: {},
                    WithFederation: {
                        type: "boolean"
                    },
                    HybridAccessEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveLFTagsFromResource: {
            http: {
                requestUri: "/RemoveLFTagsFromResource"
            },
            input: {
                type: "structure",
                required: [ "Resource", "LFTags" ],
                members: {
                    CatalogId: {},
                    Resource: {
                        shape: "S3"
                    },
                    LFTags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sq"
                    }
                }
            }
        },
        RevokePermissions: {
            http: {
                requestUri: "/RevokePermissions"
            },
            input: {
                type: "structure",
                required: [ "Principal", "Resource", "Permissions" ],
                members: {
                    CatalogId: {},
                    Principal: {
                        shape: "S18"
                    },
                    Resource: {
                        shape: "S3"
                    },
                    Permissions: {
                        shape: "S1a"
                    },
                    PermissionsWithGrantOption: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchDatabasesByLFTags: {
            http: {
                requestUri: "/SearchDatabasesByLFTags"
            },
            input: {
                type: "structure",
                required: [ "Expression" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CatalogId: {},
                    Expression: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DatabaseList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Database: {
                                    shape: "S5"
                                },
                                LFTags: {
                                    shape: "Sn"
                                }
                            }
                        }
                    }
                }
            }
        },
        SearchTablesByLFTags: {
            http: {
                requestUri: "/SearchTablesByLFTags"
            },
            input: {
                type: "structure",
                required: [ "Expression" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CatalogId: {},
                    Expression: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TableList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Table: {
                                    shape: "S7"
                                },
                                LFTagOnDatabase: {
                                    shape: "Sn"
                                },
                                LFTagsOnTable: {
                                    shape: "Sn"
                                },
                                LFTagsOnColumns: {
                                    shape: "S44"
                                }
                            }
                        }
                    }
                }
            }
        },
        StartQueryPlanning: {
            http: {
                requestUri: "/StartQueryPlanning",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "QueryPlanningContext", "QueryString" ],
                members: {
                    QueryPlanningContext: {
                        type: "structure",
                        required: [ "DatabaseName" ],
                        members: {
                            CatalogId: {},
                            DatabaseName: {},
                            QueryAsOfTime: {
                                type: "timestamp"
                            },
                            QueryParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            TransactionId: {}
                        }
                    },
                    QueryString: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    QueryId: {}
                }
            },
            endpoint: {
                hostPrefix: "query-"
            }
        },
        StartTransaction: {
            http: {
                requestUri: "/StartTransaction"
            },
            input: {
                type: "structure",
                members: {
                    TransactionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransactionId: {}
                }
            }
        },
        UpdateDataCellsFilter: {
            http: {
                requestUri: "/UpdateDataCellsFilter"
            },
            input: {
                type: "structure",
                required: [ "TableData" ],
                members: {
                    TableData: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLFTag: {
            http: {
                requestUri: "/UpdateLFTag"
            },
            input: {
                type: "structure",
                required: [ "TagKey" ],
                members: {
                    CatalogId: {},
                    TagKey: {},
                    TagValuesToDelete: {
                        shape: "Sg"
                    },
                    TagValuesToAdd: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLakeFormationIdentityCenterConfiguration: {
            http: {
                requestUri: "/UpdateLakeFormationIdentityCenterConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    ApplicationStatus: {},
                    ExternalFiltering: {
                        shape: "S1y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResource: {
            http: {
                requestUri: "/UpdateResource"
            },
            input: {
                type: "structure",
                required: [ "RoleArn", "ResourceArn" ],
                members: {
                    RoleArn: {},
                    ResourceArn: {},
                    WithFederation: {
                        type: "boolean"
                    },
                    HybridAccessEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTableObjects: {
            http: {
                requestUri: "/UpdateTableObjects"
            },
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "WriteOperations" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    TransactionId: {},
                    WriteOperations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AddObject: {
                                    type: "structure",
                                    required: [ "Uri", "ETag", "Size" ],
                                    members: {
                                        Uri: {},
                                        ETag: {},
                                        Size: {
                                            type: "long"
                                        },
                                        PartitionValues: {
                                            shape: "S4b"
                                        }
                                    }
                                },
                                DeleteObject: {
                                    type: "structure",
                                    required: [ "Uri" ],
                                    members: {
                                        Uri: {},
                                        ETag: {},
                                        PartitionValues: {
                                            shape: "S4b"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTableStorageOptimizer: {
            http: {
                requestUri: "/UpdateTableStorageOptimizer"
            },
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "StorageOptimizerConfig" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    StorageOptimizerConfig: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S60"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                Catalog: {
                    type: "structure",
                    members: {}
                },
                Database: {
                    shape: "S5"
                },
                Table: {
                    shape: "S7"
                },
                TableWithColumns: {
                    type: "structure",
                    required: [ "DatabaseName", "Name" ],
                    members: {
                        CatalogId: {},
                        DatabaseName: {},
                        Name: {},
                        ColumnNames: {
                            shape: "Sa"
                        },
                        ColumnWildcard: {
                            shape: "Sb"
                        }
                    }
                },
                DataLocation: {
                    type: "structure",
                    required: [ "ResourceArn" ],
                    members: {
                        CatalogId: {},
                        ResourceArn: {}
                    }
                },
                DataCellsFilter: {
                    type: "structure",
                    members: {
                        TableCatalogId: {},
                        DatabaseName: {},
                        TableName: {},
                        Name: {}
                    }
                },
                LFTag: {
                    type: "structure",
                    required: [ "TagKey", "TagValues" ],
                    members: {
                        CatalogId: {},
                        TagKey: {},
                        TagValues: {
                            shape: "Sg"
                        }
                    }
                },
                LFTagPolicy: {
                    type: "structure",
                    required: [ "ResourceType", "Expression" ],
                    members: {
                        CatalogId: {},
                        ResourceType: {},
                        Expression: {
                            shape: "Sk"
                        }
                    }
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "Name" ],
            members: {
                CatalogId: {},
                Name: {}
            }
        },
        S7: {
            type: "structure",
            required: [ "DatabaseName" ],
            members: {
                CatalogId: {},
                DatabaseName: {},
                Name: {},
                TableWildcard: {
                    type: "structure",
                    members: {}
                }
            }
        },
        Sa: {
            type: "list",
            member: {}
        },
        Sb: {
            type: "structure",
            members: {
                ExcludedColumnNames: {
                    shape: "Sa"
                }
            }
        },
        Sg: {
            type: "list",
            member: {}
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TagKey", "TagValues" ],
                members: {
                    TagKey: {},
                    TagValues: {
                        shape: "Sg"
                    }
                }
            }
        },
        Sn: {
            type: "list",
            member: {
                shape: "So"
            }
        },
        So: {
            type: "structure",
            required: [ "TagKey", "TagValues" ],
            members: {
                CatalogId: {},
                TagKey: {},
                TagValues: {
                    shape: "Sg"
                }
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LFTag: {
                        shape: "So"
                    },
                    Error: {
                        shape: "Ss"
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                ErrorCode: {},
                ErrorMessage: {}
            }
        },
        S15: {
            type: "list",
            member: {
                shape: "S16"
            }
        },
        S16: {
            type: "structure",
            required: [ "Id" ],
            members: {
                Id: {},
                Principal: {
                    shape: "S18"
                },
                Resource: {
                    shape: "S3"
                },
                Permissions: {
                    shape: "S1a"
                },
                PermissionsWithGrantOption: {
                    shape: "S1a"
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                DataLakePrincipalIdentifier: {}
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RequestEntry: {
                        shape: "S16"
                    },
                    Error: {
                        shape: "Ss"
                    }
                }
            }
        },
        S1o: {
            type: "structure",
            required: [ "TableCatalogId", "DatabaseName", "TableName", "Name" ],
            members: {
                TableCatalogId: {},
                DatabaseName: {},
                TableName: {},
                Name: {},
                RowFilter: {
                    type: "structure",
                    members: {
                        FilterExpression: {},
                        AllRowsWildcard: {
                            type: "structure",
                            members: {}
                        }
                    }
                },
                ColumnNames: {
                    shape: "Sa"
                },
                ColumnWildcard: {
                    shape: "Sb"
                },
                VersionId: {}
            }
        },
        S1y: {
            type: "structure",
            required: [ "Status", "AuthorizedTargets" ],
            members: {
                Status: {},
                AuthorizedTargets: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                ResourceArn: {},
                RoleArn: {},
                LastModified: {
                    type: "timestamp"
                },
                WithFederation: {
                    type: "boolean"
                },
                HybridAccessEnabled: {
                    type: "boolean"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                TransactionId: {},
                TransactionStatus: {},
                TransactionStartTime: {
                    type: "timestamp"
                },
                TransactionEndTime: {
                    type: "timestamp"
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                DataLakeAdmins: {
                    shape: "S34"
                },
                ReadOnlyAdmins: {
                    shape: "S34"
                },
                CreateDatabaseDefaultPermissions: {
                    shape: "S35"
                },
                CreateTableDefaultPermissions: {
                    shape: "S35"
                },
                Parameters: {
                    type: "map",
                    key: {},
                    value: {}
                },
                TrustedResourceOwners: {
                    type: "list",
                    member: {}
                },
                AllowExternalDataFiltering: {
                    type: "boolean"
                },
                AllowFullTableExternalDataAccess: {
                    type: "boolean"
                },
                ExternalDataFilteringAllowList: {
                    shape: "S34"
                },
                AuthorizedSessionTagValueList: {
                    type: "list",
                    member: {}
                }
            }
        },
        S34: {
            type: "list",
            member: {
                shape: "S18"
            }
        },
        S35: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principal: {
                        shape: "S18"
                    },
                    Permissions: {
                        shape: "S1a"
                    }
                }
            }
        },
        S3g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principal: {
                        shape: "S18"
                    },
                    Resource: {
                        shape: "S3"
                    },
                    Permissions: {
                        shape: "S1a"
                    },
                    PermissionsWithGrantOption: {
                        shape: "S1a"
                    },
                    AdditionalDetails: {
                        type: "structure",
                        members: {
                            ResourceShare: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    LastUpdated: {
                        type: "timestamp"
                    },
                    LastUpdatedBy: {}
                }
            }
        },
        S44: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    LFTags: {
                        shape: "Sn"
                    }
                }
            }
        },
        S4b: {
            type: "list",
            member: {}
        },
        S4k: {
            type: "structure",
            members: {
                AdditionalAuditContext: {}
            }
        },
        S4m: {
            type: "list",
            member: {}
        },
        S60: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        GetEffectivePermissionsForPath: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetTableObjects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetWorkUnits: {
            input_token: "NextToken",
            limit_key: "PageSize",
            output_token: "NextToken",
            result_key: "WorkUnitRanges"
        },
        ListDataCellsFilter: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DataCellsFilters"
        },
        ListLFTags: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LFTags"
        },
        ListLakeFormationOptIns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListPermissions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListResources: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTableStorageOptimizers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTransactions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        SearchDatabasesByLFTags: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatabaseList"
        },
        SearchTablesByLFTags: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TableList"
        }
    }
};

AWS.apiLoader.services["forecastservice"] = {};

AWS.ForecastService = AWS.Service.defineService("forecastservice", [ "2018-06-26" ]);

AWS.apiLoader.services["forecastservice"]["2018-06-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-26",
        endpointPrefix: "forecast",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Forecast Service",
        serviceId: "forecast",
        signatureVersion: "v4",
        signingName: "forecast",
        targetPrefix: "AmazonForecast",
        uid: "forecast-2018-06-26"
    },
    operations: {
        CreateAutoPredictor: {
            input: {
                type: "structure",
                required: [ "PredictorName" ],
                members: {
                    PredictorName: {},
                    ForecastHorizon: {
                        type: "integer"
                    },
                    ForecastTypes: {
                        shape: "S4"
                    },
                    ForecastDimensions: {
                        shape: "S6"
                    },
                    ForecastFrequency: {},
                    DataConfig: {
                        shape: "S8"
                    },
                    EncryptionConfig: {
                        shape: "Si"
                    },
                    ReferencePredictorArn: {},
                    OptimizationMetric: {},
                    ExplainPredictor: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sm"
                    },
                    MonitorConfig: {
                        type: "structure",
                        required: [ "MonitorName" ],
                        members: {
                            MonitorName: {}
                        }
                    },
                    TimeAlignmentBoundary: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorArn: {}
                }
            }
        },
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName", "Domain", "DatasetType", "Schema" ],
                members: {
                    DatasetName: {},
                    Domain: {},
                    DatasetType: {},
                    DataFrequency: {},
                    Schema: {
                        shape: "S10"
                    },
                    EncryptionConfig: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetArn: {}
                }
            }
        },
        CreateDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupName", "Domain" ],
                members: {
                    DatasetGroupName: {},
                    Domain: {},
                    DatasetArns: {
                        shape: "S16"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetGroupArn: {}
                }
            }
        },
        CreateDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "DatasetImportJobName", "DatasetArn", "DataSource" ],
                members: {
                    DatasetImportJobName: {},
                    DatasetArn: {},
                    DataSource: {
                        shape: "S19"
                    },
                    TimestampFormat: {},
                    TimeZone: {},
                    UseGeolocationForTimeZone: {
                        type: "boolean"
                    },
                    GeolocationFormat: {},
                    Tags: {
                        shape: "Sm"
                    },
                    Format: {},
                    ImportMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetImportJobArn: {}
                }
            }
        },
        CreateExplainability: {
            input: {
                type: "structure",
                required: [ "ExplainabilityName", "ResourceArn", "ExplainabilityConfig" ],
                members: {
                    ExplainabilityName: {},
                    ResourceArn: {},
                    ExplainabilityConfig: {
                        shape: "S1k"
                    },
                    DataSource: {
                        shape: "S19"
                    },
                    Schema: {
                        shape: "S10"
                    },
                    EnableVisualization: {
                        type: "boolean"
                    },
                    StartDateTime: {},
                    EndDateTime: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExplainabilityArn: {}
                }
            }
        },
        CreateExplainabilityExport: {
            input: {
                type: "structure",
                required: [ "ExplainabilityExportName", "ExplainabilityArn", "Destination" ],
                members: {
                    ExplainabilityExportName: {},
                    ExplainabilityArn: {},
                    Destination: {
                        shape: "S1q"
                    },
                    Tags: {
                        shape: "Sm"
                    },
                    Format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExplainabilityExportArn: {}
                }
            }
        },
        CreateForecast: {
            input: {
                type: "structure",
                required: [ "ForecastName", "PredictorArn" ],
                members: {
                    ForecastName: {},
                    PredictorArn: {},
                    ForecastTypes: {
                        shape: "S4"
                    },
                    Tags: {
                        shape: "Sm"
                    },
                    TimeSeriesSelector: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastArn: {}
                }
            }
        },
        CreateForecastExportJob: {
            input: {
                type: "structure",
                required: [ "ForecastExportJobName", "ForecastArn", "Destination" ],
                members: {
                    ForecastExportJobName: {},
                    ForecastArn: {},
                    Destination: {
                        shape: "S1q"
                    },
                    Tags: {
                        shape: "Sm"
                    },
                    Format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastExportJobArn: {}
                }
            }
        },
        CreateMonitor: {
            input: {
                type: "structure",
                required: [ "MonitorName", "ResourceArn" ],
                members: {
                    MonitorName: {},
                    ResourceArn: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MonitorArn: {}
                }
            }
        },
        CreatePredictor: {
            input: {
                type: "structure",
                required: [ "PredictorName", "ForecastHorizon", "InputDataConfig", "FeaturizationConfig" ],
                members: {
                    PredictorName: {},
                    AlgorithmArn: {},
                    ForecastHorizon: {
                        type: "integer"
                    },
                    ForecastTypes: {
                        shape: "S4"
                    },
                    PerformAutoML: {
                        type: "boolean"
                    },
                    AutoMLOverrideStrategy: {},
                    PerformHPO: {
                        type: "boolean"
                    },
                    TrainingParameters: {
                        shape: "S22"
                    },
                    EvaluationParameters: {
                        shape: "S25"
                    },
                    HPOConfig: {
                        shape: "S26"
                    },
                    InputDataConfig: {
                        shape: "S2g"
                    },
                    FeaturizationConfig: {
                        shape: "S2j"
                    },
                    EncryptionConfig: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sm"
                    },
                    OptimizationMetric: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorArn: {}
                }
            }
        },
        CreatePredictorBacktestExportJob: {
            input: {
                type: "structure",
                required: [ "PredictorBacktestExportJobName", "PredictorArn", "Destination" ],
                members: {
                    PredictorBacktestExportJobName: {},
                    PredictorArn: {},
                    Destination: {
                        shape: "S1q"
                    },
                    Tags: {
                        shape: "Sm"
                    },
                    Format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorBacktestExportJobArn: {}
                }
            }
        },
        CreateWhatIfAnalysis: {
            input: {
                type: "structure",
                required: [ "WhatIfAnalysisName", "ForecastArn" ],
                members: {
                    WhatIfAnalysisName: {},
                    ForecastArn: {},
                    TimeSeriesSelector: {
                        shape: "S1t"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfAnalysisArn: {}
                }
            }
        },
        CreateWhatIfForecast: {
            input: {
                type: "structure",
                required: [ "WhatIfForecastName", "WhatIfAnalysisArn" ],
                members: {
                    WhatIfForecastName: {},
                    WhatIfAnalysisArn: {},
                    TimeSeriesTransformations: {
                        shape: "S2w"
                    },
                    TimeSeriesReplacementsDataSource: {
                        shape: "S34"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfForecastArn: {}
                }
            }
        },
        CreateWhatIfForecastExport: {
            input: {
                type: "structure",
                required: [ "WhatIfForecastExportName", "WhatIfForecastArns", "Destination" ],
                members: {
                    WhatIfForecastExportName: {},
                    WhatIfForecastArns: {
                        shape: "S38"
                    },
                    Destination: {
                        shape: "S1q"
                    },
                    Tags: {
                        shape: "Sm"
                    },
                    Format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfForecastExportArn: {}
                }
            }
        },
        DeleteDataset: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {}
                }
            },
            idempotent: true
        },
        DeleteDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupArn" ],
                members: {
                    DatasetGroupArn: {}
                }
            },
            idempotent: true
        },
        DeleteDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "DatasetImportJobArn" ],
                members: {
                    DatasetImportJobArn: {}
                }
            },
            idempotent: true
        },
        DeleteExplainability: {
            input: {
                type: "structure",
                required: [ "ExplainabilityArn" ],
                members: {
                    ExplainabilityArn: {}
                }
            },
            idempotent: true
        },
        DeleteExplainabilityExport: {
            input: {
                type: "structure",
                required: [ "ExplainabilityExportArn" ],
                members: {
                    ExplainabilityExportArn: {}
                }
            },
            idempotent: true
        },
        DeleteForecast: {
            input: {
                type: "structure",
                required: [ "ForecastArn" ],
                members: {
                    ForecastArn: {}
                }
            },
            idempotent: true
        },
        DeleteForecastExportJob: {
            input: {
                type: "structure",
                required: [ "ForecastExportJobArn" ],
                members: {
                    ForecastExportJobArn: {}
                }
            },
            idempotent: true
        },
        DeleteMonitor: {
            input: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            },
            idempotent: true
        },
        DeletePredictor: {
            input: {
                type: "structure",
                required: [ "PredictorArn" ],
                members: {
                    PredictorArn: {}
                }
            },
            idempotent: true
        },
        DeletePredictorBacktestExportJob: {
            input: {
                type: "structure",
                required: [ "PredictorBacktestExportJobArn" ],
                members: {
                    PredictorBacktestExportJobArn: {}
                }
            },
            idempotent: true
        },
        DeleteResourceTree: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            idempotent: true
        },
        DeleteWhatIfAnalysis: {
            input: {
                type: "structure",
                required: [ "WhatIfAnalysisArn" ],
                members: {
                    WhatIfAnalysisArn: {}
                }
            },
            idempotent: true
        },
        DeleteWhatIfForecast: {
            input: {
                type: "structure",
                required: [ "WhatIfForecastArn" ],
                members: {
                    WhatIfForecastArn: {}
                }
            },
            idempotent: true
        },
        DeleteWhatIfForecastExport: {
            input: {
                type: "structure",
                required: [ "WhatIfForecastExportArn" ],
                members: {
                    WhatIfForecastExportArn: {}
                }
            },
            idempotent: true
        },
        DescribeAutoPredictor: {
            input: {
                type: "structure",
                required: [ "PredictorArn" ],
                members: {
                    PredictorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorArn: {},
                    PredictorName: {},
                    ForecastHorizon: {
                        type: "integer"
                    },
                    ForecastTypes: {
                        shape: "S4"
                    },
                    ForecastFrequency: {},
                    ForecastDimensions: {
                        shape: "S6"
                    },
                    DatasetImportJobArns: {
                        shape: "S16"
                    },
                    DataConfig: {
                        shape: "S8"
                    },
                    EncryptionConfig: {
                        shape: "Si"
                    },
                    ReferencePredictorSummary: {
                        shape: "S3q"
                    },
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    OptimizationMetric: {},
                    ExplainabilityInfo: {
                        type: "structure",
                        members: {
                            ExplainabilityArn: {},
                            Status: {}
                        }
                    },
                    MonitorInfo: {
                        type: "structure",
                        members: {
                            MonitorArn: {},
                            Status: {}
                        }
                    },
                    TimeAlignmentBoundary: {
                        shape: "Sr"
                    }
                }
            },
            idempotent: true
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetArn: {},
                    DatasetName: {},
                    Domain: {},
                    DatasetType: {},
                    DataFrequency: {},
                    Schema: {
                        shape: "S10"
                    },
                    EncryptionConfig: {
                        shape: "Si"
                    },
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupArn" ],
                members: {
                    DatasetGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetGroupName: {},
                    DatasetGroupArn: {},
                    DatasetArns: {
                        shape: "S16"
                    },
                    Domain: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "DatasetImportJobArn" ],
                members: {
                    DatasetImportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetImportJobName: {},
                    DatasetImportJobArn: {},
                    DatasetArn: {},
                    TimestampFormat: {},
                    TimeZone: {},
                    UseGeolocationForTimeZone: {
                        type: "boolean"
                    },
                    GeolocationFormat: {},
                    DataSource: {
                        shape: "S19"
                    },
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    FieldStatistics: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                Count: {
                                    type: "integer"
                                },
                                CountDistinct: {
                                    type: "integer"
                                },
                                CountNull: {
                                    type: "integer"
                                },
                                CountNan: {
                                    type: "integer"
                                },
                                Min: {},
                                Max: {},
                                Avg: {
                                    type: "double"
                                },
                                Stddev: {
                                    type: "double"
                                },
                                CountLong: {
                                    type: "long"
                                },
                                CountDistinctLong: {
                                    type: "long"
                                },
                                CountNullLong: {
                                    type: "long"
                                },
                                CountNanLong: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    DataSize: {
                        type: "double"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Format: {},
                    ImportMode: {}
                }
            },
            idempotent: true
        },
        DescribeExplainability: {
            input: {
                type: "structure",
                required: [ "ExplainabilityArn" ],
                members: {
                    ExplainabilityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExplainabilityArn: {},
                    ExplainabilityName: {},
                    ResourceArn: {},
                    ExplainabilityConfig: {
                        shape: "S1k"
                    },
                    EnableVisualization: {
                        type: "boolean"
                    },
                    DataSource: {
                        shape: "S19"
                    },
                    Schema: {
                        shape: "S10"
                    },
                    StartDateTime: {},
                    EndDateTime: {},
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    Message: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeExplainabilityExport: {
            input: {
                type: "structure",
                required: [ "ExplainabilityExportArn" ],
                members: {
                    ExplainabilityExportArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExplainabilityExportArn: {},
                    ExplainabilityExportName: {},
                    ExplainabilityArn: {},
                    Destination: {
                        shape: "S1q"
                    },
                    Message: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Format: {}
                }
            },
            idempotent: true
        },
        DescribeForecast: {
            input: {
                type: "structure",
                required: [ "ForecastArn" ],
                members: {
                    ForecastArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastArn: {},
                    ForecastName: {},
                    ForecastTypes: {
                        shape: "S4"
                    },
                    PredictorArn: {},
                    DatasetGroupArn: {},
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    TimeSeriesSelector: {
                        shape: "S1t"
                    }
                }
            },
            idempotent: true
        },
        DescribeForecastExportJob: {
            input: {
                type: "structure",
                required: [ "ForecastExportJobArn" ],
                members: {
                    ForecastExportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastExportJobArn: {},
                    ForecastExportJobName: {},
                    ForecastArn: {},
                    Destination: {
                        shape: "S1q"
                    },
                    Message: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Format: {}
                }
            },
            idempotent: true
        },
        DescribeMonitor: {
            input: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MonitorName: {},
                    MonitorArn: {},
                    ResourceArn: {},
                    Status: {},
                    LastEvaluationTime: {
                        type: "timestamp"
                    },
                    LastEvaluationState: {},
                    Baseline: {
                        type: "structure",
                        members: {
                            PredictorBaseline: {
                                type: "structure",
                                members: {
                                    BaselineMetrics: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Name: {},
                                                Value: {
                                                    type: "double"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    EstimatedEvaluationTimeRemainingInMinutes: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        },
        DescribePredictor: {
            input: {
                type: "structure",
                required: [ "PredictorArn" ],
                members: {
                    PredictorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorArn: {},
                    PredictorName: {},
                    AlgorithmArn: {},
                    AutoMLAlgorithmArns: {
                        shape: "S16"
                    },
                    ForecastHorizon: {
                        type: "integer"
                    },
                    ForecastTypes: {
                        shape: "S4"
                    },
                    PerformAutoML: {
                        type: "boolean"
                    },
                    AutoMLOverrideStrategy: {},
                    PerformHPO: {
                        type: "boolean"
                    },
                    TrainingParameters: {
                        shape: "S22"
                    },
                    EvaluationParameters: {
                        shape: "S25"
                    },
                    HPOConfig: {
                        shape: "S26"
                    },
                    InputDataConfig: {
                        shape: "S2g"
                    },
                    FeaturizationConfig: {
                        shape: "S2j"
                    },
                    EncryptionConfig: {
                        shape: "Si"
                    },
                    PredictorExecutionDetails: {
                        type: "structure",
                        members: {
                            PredictorExecutions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AlgorithmArn: {},
                                        TestWindows: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    TestWindowStart: {
                                                        type: "timestamp"
                                                    },
                                                    TestWindowEnd: {
                                                        type: "timestamp"
                                                    },
                                                    Status: {},
                                                    Message: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    IsAutoPredictor: {
                        type: "boolean"
                    },
                    DatasetImportJobArns: {
                        shape: "S16"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    OptimizationMetric: {}
                }
            },
            idempotent: true
        },
        DescribePredictorBacktestExportJob: {
            input: {
                type: "structure",
                required: [ "PredictorBacktestExportJobArn" ],
                members: {
                    PredictorBacktestExportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorBacktestExportJobArn: {},
                    PredictorBacktestExportJobName: {},
                    PredictorArn: {},
                    Destination: {
                        shape: "S1q"
                    },
                    Message: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Format: {}
                }
            },
            idempotent: true
        },
        DescribeWhatIfAnalysis: {
            input: {
                type: "structure",
                required: [ "WhatIfAnalysisArn" ],
                members: {
                    WhatIfAnalysisArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfAnalysisName: {},
                    WhatIfAnalysisArn: {},
                    ForecastArn: {},
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    TimeSeriesSelector: {
                        shape: "S1t"
                    }
                }
            },
            idempotent: true
        },
        DescribeWhatIfForecast: {
            input: {
                type: "structure",
                required: [ "WhatIfForecastArn" ],
                members: {
                    WhatIfForecastArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfForecastName: {},
                    WhatIfForecastArn: {},
                    WhatIfAnalysisArn: {},
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    TimeSeriesTransformations: {
                        shape: "S2w"
                    },
                    TimeSeriesReplacementsDataSource: {
                        shape: "S34"
                    },
                    ForecastTypes: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        DescribeWhatIfForecastExport: {
            input: {
                type: "structure",
                required: [ "WhatIfForecastExportArn" ],
                members: {
                    WhatIfForecastExportArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfForecastExportArn: {},
                    WhatIfForecastExportName: {},
                    WhatIfForecastArns: {
                        type: "list",
                        member: {}
                    },
                    Destination: {
                        shape: "S1q"
                    },
                    Message: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Format: {}
                }
            },
            idempotent: true
        },
        GetAccuracyMetrics: {
            input: {
                type: "structure",
                required: [ "PredictorArn" ],
                members: {
                    PredictorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorEvaluationResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AlgorithmArn: {},
                                TestWindows: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            TestWindowStart: {
                                                type: "timestamp"
                                            },
                                            TestWindowEnd: {
                                                type: "timestamp"
                                            },
                                            ItemCount: {
                                                type: "integer"
                                            },
                                            EvaluationType: {},
                                            Metrics: {
                                                type: "structure",
                                                members: {
                                                    RMSE: {
                                                        deprecated: true,
                                                        deprecatedMessage: "This property is deprecated, please refer to ErrorMetrics for both RMSE and WAPE",
                                                        type: "double"
                                                    },
                                                    WeightedQuantileLosses: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Quantile: {
                                                                    type: "double"
                                                                },
                                                                LossValue: {
                                                                    type: "double"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    ErrorMetrics: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ForecastType: {},
                                                                WAPE: {
                                                                    type: "double"
                                                                },
                                                                RMSE: {
                                                                    type: "double"
                                                                },
                                                                MASE: {
                                                                    type: "double"
                                                                },
                                                                MAPE: {
                                                                    type: "double"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    AverageWeightedQuantileLoss: {
                                                        type: "double"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    IsAutoPredictor: {
                        type: "boolean"
                    },
                    AutoMLOverrideStrategy: {},
                    OptimizationMetric: {}
                }
            },
            idempotent: true
        },
        ListDatasetGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetGroupArn: {},
                                DatasetGroupName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetImportJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetImportJobArn: {},
                                DatasetImportJobName: {},
                                DataSource: {
                                    shape: "S19"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                },
                                ImportMode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetArn: {},
                                DatasetName: {},
                                DatasetType: {},
                                Domain: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListExplainabilities: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Explainabilities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExplainabilityArn: {},
                                ExplainabilityName: {},
                                ResourceArn: {},
                                ExplainabilityConfig: {
                                    shape: "S1k"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListExplainabilityExports: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExplainabilityExports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExplainabilityExportArn: {},
                                ExplainabilityExportName: {},
                                Destination: {
                                    shape: "S1q"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListForecastExportJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ForecastExportJobArn: {},
                                ForecastExportJobName: {},
                                Destination: {
                                    shape: "S1q"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListForecasts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Forecasts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ForecastArn: {},
                                ForecastName: {},
                                PredictorArn: {},
                                CreatedUsingAutoPredictor: {
                                    type: "boolean"
                                },
                                DatasetGroupArn: {},
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListMonitorEvaluations: {
            input: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    MonitorArn: {},
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    PredictorMonitorEvaluations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                MonitorArn: {},
                                EvaluationTime: {
                                    type: "timestamp"
                                },
                                EvaluationState: {},
                                WindowStartDatetime: {
                                    type: "timestamp"
                                },
                                WindowEndDatetime: {
                                    type: "timestamp"
                                },
                                PredictorEvent: {
                                    type: "structure",
                                    members: {
                                        Detail: {},
                                        Datetime: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                MonitorDataSource: {
                                    type: "structure",
                                    members: {
                                        DatasetImportJobArn: {},
                                        ForecastArn: {},
                                        PredictorArn: {}
                                    }
                                },
                                MetricResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            MetricName: {},
                                            MetricValue: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                NumItemsEvaluated: {
                                    type: "long"
                                },
                                Message: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListMonitors: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Monitors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MonitorArn: {},
                                MonitorName: {},
                                ResourceArn: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListPredictorBacktestExportJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorBacktestExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PredictorBacktestExportJobArn: {},
                                PredictorBacktestExportJobName: {},
                                Destination: {
                                    shape: "S1q"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListPredictors: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Predictors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PredictorArn: {},
                                PredictorName: {},
                                DatasetGroupArn: {},
                                IsAutoPredictor: {
                                    type: "boolean"
                                },
                                ReferencePredictorSummary: {
                                    shape: "S3q"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        ListWhatIfAnalyses: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfAnalyses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WhatIfAnalysisArn: {},
                                WhatIfAnalysisName: {},
                                ForecastArn: {},
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListWhatIfForecastExports: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfForecastExports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WhatIfForecastExportArn: {},
                                WhatIfForecastArns: {
                                    shape: "S38"
                                },
                                WhatIfForecastExportName: {},
                                Destination: {
                                    shape: "S1q"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListWhatIfForecasts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WhatIfForecasts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WhatIfForecastArn: {},
                                WhatIfForecastName: {},
                                WhatIfAnalysisArn: {},
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ResumeResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            idempotent: true
        },
        StopResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupArn", "DatasetArns" ],
                members: {
                    DatasetGroupArn: {},
                    DatasetArns: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {}
        },
        S8: {
            type: "structure",
            required: [ "DatasetGroupArn" ],
            members: {
                DatasetGroupArn: {},
                AttributeConfigs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AttributeName", "Transformations" ],
                        members: {
                            AttributeName: {},
                            Transformations: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                },
                AdditionalDatasets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Configuration: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sh: {
            type: "list",
            member: {}
        },
        Si: {
            type: "structure",
            required: [ "RoleArn", "KMSKeyArn" ],
            members: {
                RoleArn: {},
                KMSKeyArn: {}
            }
        },
        Sm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "So"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        So: {
            type: "string",
            sensitive: true
        },
        Sr: {
            type: "structure",
            members: {
                Month: {},
                DayOfMonth: {
                    type: "integer"
                },
                DayOfWeek: {},
                Hour: {
                    type: "integer"
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                Attributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeType: {}
                        }
                    }
                }
            }
        },
        S16: {
            type: "list",
            member: {}
        },
        S19: {
            type: "structure",
            required: [ "S3Config" ],
            members: {
                S3Config: {
                    shape: "S1a"
                }
            }
        },
        S1a: {
            type: "structure",
            required: [ "Path", "RoleArn" ],
            members: {
                Path: {},
                RoleArn: {},
                KMSKeyArn: {}
            }
        },
        S1k: {
            type: "structure",
            required: [ "TimeSeriesGranularity", "TimePointGranularity" ],
            members: {
                TimeSeriesGranularity: {},
                TimePointGranularity: {}
            }
        },
        S1q: {
            type: "structure",
            required: [ "S3Config" ],
            members: {
                S3Config: {
                    shape: "S1a"
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                TimeSeriesIdentifiers: {
                    type: "structure",
                    members: {
                        DataSource: {
                            shape: "S19"
                        },
                        Schema: {
                            shape: "S10"
                        },
                        Format: {}
                    }
                }
            }
        },
        S22: {
            type: "map",
            key: {},
            value: {}
        },
        S25: {
            type: "structure",
            members: {
                NumberOfBacktestWindows: {
                    type: "integer"
                },
                BackTestWindowOffset: {
                    type: "integer"
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                ParameterRanges: {
                    type: "structure",
                    members: {
                        CategoricalParameterRanges: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "Values" ],
                                members: {
                                    Name: {},
                                    Values: {
                                        shape: "Sh"
                                    }
                                }
                            }
                        },
                        ContinuousParameterRanges: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "MaxValue", "MinValue" ],
                                members: {
                                    Name: {},
                                    MaxValue: {
                                        type: "double"
                                    },
                                    MinValue: {
                                        type: "double"
                                    },
                                    ScalingType: {}
                                }
                            }
                        },
                        IntegerParameterRanges: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "MaxValue", "MinValue" ],
                                members: {
                                    Name: {},
                                    MaxValue: {
                                        type: "integer"
                                    },
                                    MinValue: {
                                        type: "integer"
                                    },
                                    ScalingType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S2g: {
            type: "structure",
            required: [ "DatasetGroupArn" ],
            members: {
                DatasetGroupArn: {},
                SupplementaryFeatures: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Value" ],
                        members: {
                            Name: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        S2j: {
            type: "structure",
            required: [ "ForecastFrequency" ],
            members: {
                ForecastFrequency: {},
                ForecastDimensions: {
                    shape: "S6"
                },
                Featurizations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AttributeName" ],
                        members: {
                            AttributeName: {},
                            FeaturizationPipeline: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "FeaturizationMethodName" ],
                                    members: {
                                        FeaturizationMethodName: {},
                                        FeaturizationMethodParameters: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Action: {
                        type: "structure",
                        required: [ "AttributeName", "Operation", "Value" ],
                        members: {
                            AttributeName: {},
                            Operation: {},
                            Value: {
                                type: "double"
                            }
                        }
                    },
                    TimeSeriesConditions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AttributeName", "AttributeValue", "Condition" ],
                            members: {
                                AttributeName: {},
                                AttributeValue: {},
                                Condition: {}
                            }
                        }
                    }
                }
            }
        },
        S34: {
            type: "structure",
            required: [ "S3Config", "Schema" ],
            members: {
                S3Config: {
                    shape: "S1a"
                },
                Schema: {
                    shape: "S10"
                },
                Format: {},
                TimestampFormat: {}
            }
        },
        S38: {
            type: "list",
            member: {}
        },
        S3q: {
            type: "structure",
            members: {
                Arn: {},
                State: {}
            }
        },
        S5m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value", "Condition" ],
                members: {
                    Key: {},
                    Value: {},
                    Condition: {}
                }
            }
        }
    },
    paginators: {
        ListDatasetGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatasetGroups"
        },
        ListDatasetImportJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatasetImportJobs"
        },
        ListDatasets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Datasets"
        },
        ListExplainabilities: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Explainabilities"
        },
        ListExplainabilityExports: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ExplainabilityExports"
        },
        ListForecastExportJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ForecastExportJobs"
        },
        ListForecasts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Forecasts"
        },
        ListMonitorEvaluations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PredictorMonitorEvaluations"
        },
        ListMonitors: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Monitors"
        },
        ListPredictorBacktestExportJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PredictorBacktestExportJobs"
        },
        ListPredictors: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Predictors"
        },
        ListWhatIfAnalyses: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WhatIfAnalyses"
        },
        ListWhatIfForecastExports: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WhatIfForecastExports"
        },
        ListWhatIfForecasts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WhatIfForecasts"
        }
    }
};

AWS.apiLoader.services["forecastqueryservice"] = {};

AWS.ForecastQueryService = AWS.Service.defineService("forecastqueryservice", [ "2018-06-26" ]);

AWS.apiLoader.services["forecastqueryservice"]["2018-06-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-26",
        endpointPrefix: "forecastquery",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Forecast Query Service",
        serviceId: "forecastquery",
        signatureVersion: "v4",
        signingName: "forecast",
        targetPrefix: "AmazonForecastRuntime",
        uid: "forecastquery-2018-06-26"
    },
    operations: {
        QueryForecast: {
            input: {
                type: "structure",
                required: [ "ForecastArn", "Filters" ],
                members: {
                    ForecastArn: {},
                    StartDate: {},
                    EndDate: {},
                    Filters: {
                        shape: "S4"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Forecast: {
                        shape: "S9"
                    }
                }
            }
        },
        QueryWhatIfForecast: {
            input: {
                type: "structure",
                required: [ "WhatIfForecastArn", "Filters" ],
                members: {
                    WhatIfForecastArn: {},
                    StartDate: {},
                    EndDate: {},
                    Filters: {
                        shape: "S4"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Forecast: {
                        shape: "S9"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        S9: {
            type: "structure",
            members: {
                Predictions: {
                    type: "map",
                    key: {},
                    value: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {},
                                Value: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["qldb"] = {};

AWS.QLDB = AWS.Service.defineService("qldb", [ "2019-01-02" ]);

AWS.apiLoader.services["qldb"]["2019-01-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-01-02",
        endpointPrefix: "qldb",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceAbbreviation: "QLDB",
        serviceFullName: "Amazon QLDB",
        serviceId: "QLDB",
        signatureVersion: "v4",
        signingName: "qldb",
        uid: "qldb-2019-01-02"
    },
    operations: {
        CancelJournalKinesisStream: {
            http: {
                method: "DELETE",
                requestUri: "/ledgers/{name}/journal-kinesis-streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "LedgerName", "StreamId" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    StreamId: {
                        location: "uri",
                        locationName: "streamId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamId: {}
                }
            }
        },
        CreateLedger: {
            http: {
                requestUri: "/ledgers"
            },
            input: {
                type: "structure",
                required: [ "Name", "PermissionsMode" ],
                members: {
                    Name: {},
                    Tags: {
                        shape: "S6"
                    },
                    PermissionsMode: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    KmsKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    State: {},
                    CreationDateTime: {
                        type: "timestamp"
                    },
                    PermissionsMode: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    KmsKeyArn: {}
                }
            }
        },
        DeleteLedger: {
            http: {
                method: "DELETE",
                requestUri: "/ledgers/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DescribeJournalKinesisStream: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-kinesis-streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "LedgerName", "StreamId" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    StreamId: {
                        location: "uri",
                        locationName: "streamId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stream: {
                        shape: "Sj"
                    }
                }
            }
        },
        DescribeJournalS3Export: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-s3-exports/{exportId}"
            },
            input: {
                type: "structure",
                required: [ "Name", "ExportId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    ExportId: {
                        location: "uri",
                        locationName: "exportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ExportDescription" ],
                members: {
                    ExportDescription: {
                        shape: "Sr"
                    }
                }
            }
        },
        DescribeLedger: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    State: {},
                    CreationDateTime: {
                        type: "timestamp"
                    },
                    PermissionsMode: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EncryptionDescription: {
                        shape: "S11"
                    }
                }
            }
        },
        ExportJournalToS3: {
            http: {
                requestUri: "/ledgers/{name}/journal-s3-exports"
            },
            input: {
                type: "structure",
                required: [ "Name", "InclusiveStartTime", "ExclusiveEndTime", "S3ExportConfiguration", "RoleArn" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    InclusiveStartTime: {
                        type: "timestamp"
                    },
                    ExclusiveEndTime: {
                        type: "timestamp"
                    },
                    S3ExportConfiguration: {
                        shape: "St"
                    },
                    RoleArn: {},
                    OutputFormat: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ExportId" ],
                members: {
                    ExportId: {}
                }
            }
        },
        GetBlock: {
            http: {
                requestUri: "/ledgers/{name}/block"
            },
            input: {
                type: "structure",
                required: [ "Name", "BlockAddress" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    BlockAddress: {
                        shape: "S16"
                    },
                    DigestTipAddress: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Block" ],
                members: {
                    Block: {
                        shape: "S16"
                    },
                    Proof: {
                        shape: "S16"
                    }
                }
            }
        },
        GetDigest: {
            http: {
                requestUri: "/ledgers/{name}/digest"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Digest", "DigestTipAddress" ],
                members: {
                    Digest: {
                        type: "blob"
                    },
                    DigestTipAddress: {
                        shape: "S16"
                    }
                }
            }
        },
        GetRevision: {
            http: {
                requestUri: "/ledgers/{name}/revision"
            },
            input: {
                type: "structure",
                required: [ "Name", "BlockAddress", "DocumentId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    BlockAddress: {
                        shape: "S16"
                    },
                    DocumentId: {},
                    DigestTipAddress: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Revision" ],
                members: {
                    Proof: {
                        shape: "S16"
                    },
                    Revision: {
                        shape: "S16"
                    }
                }
            }
        },
        ListJournalKinesisStreamsForLedger: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-kinesis-streams"
            },
            input: {
                type: "structure",
                required: [ "LedgerName" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Streams: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJournalS3Exports: {
            http: {
                method: "GET",
                requestUri: "/journal-s3-exports"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JournalS3Exports: {
                        shape: "S1l"
                    },
                    NextToken: {}
                }
            }
        },
        ListJournalS3ExportsForLedger: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-s3-exports"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JournalS3Exports: {
                        shape: "S1l"
                    },
                    NextToken: {}
                }
            }
        },
        ListLedgers: {
            http: {
                method: "GET",
                requestUri: "/ledgers"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ledgers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                State: {},
                                CreationDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        StreamJournalToKinesis: {
            http: {
                requestUri: "/ledgers/{name}/journal-kinesis-streams"
            },
            input: {
                type: "structure",
                required: [ "LedgerName", "RoleArn", "InclusiveStartTime", "KinesisConfiguration", "StreamName" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S6"
                    },
                    InclusiveStartTime: {
                        type: "timestamp"
                    },
                    ExclusiveEndTime: {
                        type: "timestamp"
                    },
                    KinesisConfiguration: {
                        shape: "Sl"
                    },
                    StreamName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLedger: {
            http: {
                method: "PATCH",
                requestUri: "/ledgers/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    KmsKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    State: {},
                    CreationDateTime: {
                        type: "timestamp"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EncryptionDescription: {
                        shape: "S11"
                    }
                }
            }
        },
        UpdateLedgerPermissionsMode: {
            http: {
                method: "PATCH",
                requestUri: "/ledgers/{name}/permissions-mode"
            },
            input: {
                type: "structure",
                required: [ "Name", "PermissionsMode" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    PermissionsMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    PermissionsMode: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {}
        },
        Sj: {
            type: "structure",
            required: [ "LedgerName", "RoleArn", "StreamId", "Status", "KinesisConfiguration", "StreamName" ],
            members: {
                LedgerName: {},
                CreationTime: {
                    type: "timestamp"
                },
                InclusiveStartTime: {
                    type: "timestamp"
                },
                ExclusiveEndTime: {
                    type: "timestamp"
                },
                RoleArn: {},
                StreamId: {},
                Arn: {},
                Status: {},
                KinesisConfiguration: {
                    shape: "Sl"
                },
                ErrorCause: {},
                StreamName: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "StreamArn" ],
            members: {
                StreamArn: {},
                AggregationEnabled: {
                    type: "boolean"
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "LedgerName", "ExportId", "ExportCreationTime", "Status", "InclusiveStartTime", "ExclusiveEndTime", "S3ExportConfiguration", "RoleArn" ],
            members: {
                LedgerName: {},
                ExportId: {},
                ExportCreationTime: {
                    type: "timestamp"
                },
                Status: {},
                InclusiveStartTime: {
                    type: "timestamp"
                },
                ExclusiveEndTime: {
                    type: "timestamp"
                },
                S3ExportConfiguration: {
                    shape: "St"
                },
                RoleArn: {},
                OutputFormat: {}
            }
        },
        St: {
            type: "structure",
            required: [ "Bucket", "Prefix", "EncryptionConfiguration" ],
            members: {
                Bucket: {},
                Prefix: {},
                EncryptionConfiguration: {
                    type: "structure",
                    required: [ "ObjectEncryptionType" ],
                    members: {
                        ObjectEncryptionType: {},
                        KmsKeyArn: {}
                    }
                }
            }
        },
        S11: {
            type: "structure",
            required: [ "KmsKeyArn", "EncryptionStatus" ],
            members: {
                KmsKeyArn: {},
                EncryptionStatus: {},
                InaccessibleKmsKeyDateTime: {
                    type: "timestamp"
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                IonText: {
                    type: "string",
                    sensitive: true
                }
            },
            sensitive: true
        },
        S1l: {
            type: "list",
            member: {
                shape: "Sr"
            }
        }
    },
    paginators: {
        ListJournalKinesisStreamsForLedger: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListJournalS3Exports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListJournalS3ExportsForLedger: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLedgers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["qldbsession"] = {};

AWS.QLDBSession = AWS.Service.defineService("qldbsession", [ "2019-07-11" ]);

AWS.apiLoader.services["qldbsession"]["2019-07-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-11",
        endpointPrefix: "session.qldb",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "QLDB Session",
        serviceFullName: "Amazon QLDB Session",
        serviceId: "QLDB Session",
        signatureVersion: "v4",
        signingName: "qldb",
        targetPrefix: "QLDBSession",
        uid: "qldb-session-2019-07-11"
    },
    operations: {
        SendCommand: {
            input: {
                type: "structure",
                members: {
                    SessionToken: {},
                    StartSession: {
                        type: "structure",
                        required: [ "LedgerName" ],
                        members: {
                            LedgerName: {}
                        }
                    },
                    StartTransaction: {
                        type: "structure",
                        members: {}
                    },
                    EndSession: {
                        type: "structure",
                        members: {}
                    },
                    CommitTransaction: {
                        type: "structure",
                        required: [ "TransactionId", "CommitDigest" ],
                        members: {
                            TransactionId: {},
                            CommitDigest: {
                                type: "blob"
                            }
                        }
                    },
                    AbortTransaction: {
                        type: "structure",
                        members: {}
                    },
                    ExecuteStatement: {
                        type: "structure",
                        required: [ "TransactionId", "Statement" ],
                        members: {
                            TransactionId: {},
                            Statement: {},
                            Parameters: {
                                type: "list",
                                member: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    FetchPage: {
                        type: "structure",
                        required: [ "TransactionId", "NextPageToken" ],
                        members: {
                            TransactionId: {},
                            NextPageToken: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StartSession: {
                        type: "structure",
                        members: {
                            SessionToken: {},
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    StartTransaction: {
                        type: "structure",
                        members: {
                            TransactionId: {},
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    EndSession: {
                        type: "structure",
                        members: {
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    CommitTransaction: {
                        type: "structure",
                        members: {
                            TransactionId: {},
                            CommitDigest: {
                                type: "blob"
                            },
                            TimingInformation: {
                                shape: "Sl"
                            },
                            ConsumedIOs: {
                                shape: "Sq"
                            }
                        }
                    },
                    AbortTransaction: {
                        type: "structure",
                        members: {
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    ExecuteStatement: {
                        type: "structure",
                        members: {
                            FirstPage: {
                                shape: "Sv"
                            },
                            TimingInformation: {
                                shape: "Sl"
                            },
                            ConsumedIOs: {
                                shape: "Sq"
                            }
                        }
                    },
                    FetchPage: {
                        type: "structure",
                        members: {
                            Page: {
                                shape: "Sv"
                            },
                            TimingInformation: {
                                shape: "Sl"
                            },
                            ConsumedIOs: {
                                shape: "Sq"
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Se: {
            type: "structure",
            members: {
                IonBinary: {
                    type: "blob"
                },
                IonText: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                ProcessingTimeMilliseconds: {
                    type: "long"
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                ReadIOs: {
                    type: "long"
                },
                WriteIOs: {
                    type: "long"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                Values: {
                    type: "list",
                    member: {
                        shape: "Se"
                    }
                },
                NextPageToken: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["workmailmessageflow"] = {};

AWS.WorkMailMessageFlow = AWS.Service.defineService("workmailmessageflow", [ "2019-05-01" ]);

AWS.apiLoader.services["workmailmessageflow"]["2019-05-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-05-01",
        endpointPrefix: "workmailmessageflow",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon WorkMail Message Flow",
        serviceId: "WorkMailMessageFlow",
        signatureVersion: "v4",
        uid: "workmailmessageflow-2019-05-01"
    },
    operations: {
        GetRawMessageContent: {
            http: {
                method: "GET",
                requestUri: "/messages/{messageId}"
            },
            input: {
                type: "structure",
                required: [ "messageId" ],
                members: {
                    messageId: {
                        location: "uri",
                        locationName: "messageId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "messageContent" ],
                members: {
                    messageContent: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "messageContent"
            }
        },
        PutRawMessageContent: {
            http: {
                requestUri: "/messages/{messageId}"
            },
            input: {
                type: "structure",
                required: [ "messageId", "content" ],
                members: {
                    messageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    content: {
                        type: "structure",
                        required: [ "s3Reference" ],
                        members: {
                            s3Reference: {
                                type: "structure",
                                required: [ "bucket", "key" ],
                                members: {
                                    bucket: {},
                                    key: {},
                                    objectVersion: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["codestarnotifications"] = {};

AWS.CodeStarNotifications = AWS.Service.defineService("codestarnotifications", [ "2019-10-15" ]);

AWS.apiLoader.services["codestarnotifications"]["2019-10-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-10-15",
        endpointPrefix: "codestar-notifications",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS CodeStar Notifications",
        serviceId: "codestar notifications",
        signatureVersion: "v4",
        signingName: "codestar-notifications",
        uid: "codestar-notifications-2019-10-15"
    },
    operations: {
        CreateNotificationRule: {
            http: {
                requestUri: "/createNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Name", "EventTypeIds", "Resource", "Targets", "DetailType" ],
                members: {
                    Name: {
                        shape: "S2"
                    },
                    EventTypeIds: {
                        shape: "S3"
                    },
                    Resource: {},
                    Targets: {
                        shape: "S6"
                    },
                    DetailType: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sc"
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        DeleteNotificationRule: {
            http: {
                requestUri: "/deleteNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        DeleteTarget: {
            http: {
                requestUri: "/deleteTarget"
            },
            input: {
                type: "structure",
                required: [ "TargetAddress" ],
                members: {
                    TargetAddress: {
                        shape: "S9"
                    },
                    ForceUnsubscribeAll: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeNotificationRule: {
            http: {
                requestUri: "/describeNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S2"
                    },
                    EventTypes: {
                        shape: "Sp"
                    },
                    Resource: {},
                    Targets: {
                        shape: "Su"
                    },
                    DetailType: {},
                    CreatedBy: {},
                    Status: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    LastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListEventTypes: {
            http: {
                requestUri: "/listEventTypes"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventTypes: {
                        shape: "Sp"
                    },
                    NextToken: {}
                }
            }
        },
        ListNotificationRules: {
            http: {
                requestUri: "/listNotificationRules"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NotificationRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/listTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListTargets: {
            http: {
                requestUri: "/listTargets"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Targets: {
                        shape: "Su"
                    },
                    NextToken: {}
                }
            }
        },
        Subscribe: {
            http: {
                requestUri: "/subscribe"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Target" ],
                members: {
                    Arn: {},
                    Target: {
                        shape: "S7"
                    },
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tagResource"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        Unsubscribe: {
            http: {
                requestUri: "/unsubscribe"
            },
            input: {
                type: "structure",
                required: [ "Arn", "TargetAddress" ],
                members: {
                    Arn: {},
                    TargetAddress: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/untagResource/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "Arn", "TagKeys" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNotificationRule: {
            http: {
                requestUri: "/updateNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S2"
                    },
                    Status: {},
                    EventTypeIds: {
                        shape: "S3"
                    },
                    Targets: {
                        shape: "S6"
                    },
                    DetailType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                shape: "S7"
            }
        },
        S7: {
            type: "structure",
            members: {
                TargetType: {},
                TargetAddress: {
                    shape: "S9"
                }
            }
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EventTypeId: {},
                    ServiceName: {},
                    EventTypeName: {},
                    ResourceType: {}
                }
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TargetAddress: {
                        shape: "S9"
                    },
                    TargetType: {},
                    TargetStatus: {}
                }
            }
        }
    },
    paginators: {
        ListEventTypes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EventTypes"
        },
        ListNotificationRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NotificationRules"
        },
        ListTargets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Targets"
        }
    }
};

AWS.apiLoader.services["savingsplans"] = {};

AWS.SavingsPlans = AWS.Service.defineService("savingsplans", [ "2019-06-28" ]);

AWS.apiLoader.services["savingsplans"]["2019-06-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-28",
        endpointPrefix: "savingsplans",
        globalEndpoint: "savingsplans.amazonaws.com",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceAbbreviation: "AWSSavingsPlans",
        serviceFullName: "AWS Savings Plans",
        serviceId: "savingsplans",
        signatureVersion: "v4",
        uid: "savingsplans-2019-06-28"
    },
    operations: {
        CreateSavingsPlan: {
            http: {
                requestUri: "/CreateSavingsPlan"
            },
            input: {
                type: "structure",
                required: [ "savingsPlanOfferingId", "commitment" ],
                members: {
                    savingsPlanOfferingId: {},
                    commitment: {},
                    upfrontPaymentAmount: {},
                    purchaseTime: {
                        type: "timestamp"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    savingsPlanId: {}
                }
            }
        },
        DeleteQueuedSavingsPlan: {
            http: {
                requestUri: "/DeleteQueuedSavingsPlan"
            },
            input: {
                type: "structure",
                required: [ "savingsPlanId" ],
                members: {
                    savingsPlanId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeSavingsPlanRates: {
            http: {
                requestUri: "/DescribeSavingsPlanRates"
            },
            input: {
                type: "structure",
                required: [ "savingsPlanId" ],
                members: {
                    savingsPlanId: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    savingsPlanId: {},
                    searchResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                rate: {},
                                currency: {},
                                unit: {},
                                productType: {},
                                serviceCode: {},
                                usageType: {},
                                operation: {},
                                properties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSavingsPlans: {
            http: {
                requestUri: "/DescribeSavingsPlans"
            },
            input: {
                type: "structure",
                members: {
                    savingsPlanArns: {
                        type: "list",
                        member: {}
                    },
                    savingsPlanIds: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    states: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    savingsPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                offeringId: {},
                                savingsPlanId: {},
                                savingsPlanArn: {},
                                description: {},
                                start: {},
                                end: {},
                                state: {},
                                region: {},
                                ec2InstanceFamily: {},
                                savingsPlanType: {},
                                paymentOption: {},
                                productTypes: {
                                    shape: "S1e"
                                },
                                currency: {},
                                commitment: {},
                                upfrontPaymentAmount: {},
                                recurringPaymentAmount: {},
                                termDurationInSeconds: {
                                    type: "long"
                                },
                                tags: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSavingsPlansOfferingRates: {
            http: {
                requestUri: "/DescribeSavingsPlansOfferingRates"
            },
            input: {
                type: "structure",
                members: {
                    savingsPlanOfferingIds: {
                        shape: "S1h"
                    },
                    savingsPlanPaymentOptions: {
                        shape: "S1j"
                    },
                    savingsPlanTypes: {
                        shape: "S1k"
                    },
                    products: {
                        shape: "S1e"
                    },
                    serviceCodes: {
                        type: "list",
                        member: {}
                    },
                    usageTypes: {
                        type: "list",
                        member: {}
                    },
                    operations: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "S1r"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    searchResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                savingsPlanOffering: {
                                    type: "structure",
                                    members: {
                                        offeringId: {},
                                        paymentOption: {},
                                        planType: {},
                                        durationSeconds: {
                                            type: "long"
                                        },
                                        currency: {},
                                        planDescription: {}
                                    }
                                },
                                rate: {},
                                unit: {},
                                productType: {},
                                serviceCode: {},
                                usageType: {},
                                operation: {},
                                properties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSavingsPlansOfferings: {
            http: {
                requestUri: "/DescribeSavingsPlansOfferings"
            },
            input: {
                type: "structure",
                members: {
                    offeringIds: {
                        shape: "S1h"
                    },
                    paymentOptions: {
                        shape: "S1j"
                    },
                    productType: {},
                    planTypes: {
                        shape: "S1k"
                    },
                    durations: {
                        type: "list",
                        member: {
                            type: "long"
                        }
                    },
                    currencies: {
                        type: "list",
                        member: {}
                    },
                    descriptions: {
                        type: "list",
                        member: {}
                    },
                    serviceCodes: {
                        type: "list",
                        member: {}
                    },
                    usageTypes: {
                        type: "list",
                        member: {}
                    },
                    operations: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "S1r"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    searchResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                offeringId: {},
                                productTypes: {
                                    shape: "S1e"
                                },
                                planType: {},
                                description: {},
                                paymentOption: {},
                                durationSeconds: {
                                    type: "long"
                                },
                                currency: {},
                                serviceCode: {},
                                usageType: {},
                                operation: {},
                                properties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/ListTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["sso"] = {};

AWS.SSO = AWS.Service.defineService("sso", [ "2019-06-10" ]);

AWS.apiLoader.services["sso"]["2019-06-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-10",
        endpointPrefix: "portal.sso",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SSO",
        serviceFullName: "AWS Single Sign-On",
        serviceId: "SSO",
        signatureVersion: "v4",
        signingName: "awsssoportal",
        uid: "sso-2019-06-10"
    },
    operations: {
        GetRoleCredentials: {
            http: {
                method: "GET",
                requestUri: "/federation/credentials"
            },
            input: {
                type: "structure",
                required: [ "roleName", "accountId", "accessToken" ],
                members: {
                    roleName: {
                        location: "querystring",
                        locationName: "role_name"
                    },
                    accountId: {
                        location: "querystring",
                        locationName: "account_id"
                    },
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    roleCredentials: {
                        type: "structure",
                        members: {
                            accessKeyId: {},
                            secretAccessKey: {
                                type: "string",
                                sensitive: true
                            },
                            sessionToken: {
                                type: "string",
                                sensitive: true
                            },
                            expiration: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            authtype: "none"
        },
        ListAccountRoles: {
            http: {
                method: "GET",
                requestUri: "/assignment/roles"
            },
            input: {
                type: "structure",
                required: [ "accessToken", "accountId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max_result",
                        type: "integer"
                    },
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    },
                    accountId: {
                        location: "querystring",
                        locationName: "account_id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    roleList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                roleName: {},
                                accountId: {}
                            }
                        }
                    }
                }
            },
            authtype: "none"
        },
        ListAccounts: {
            http: {
                method: "GET",
                requestUri: "/assignment/accounts"
            },
            input: {
                type: "structure",
                required: [ "accessToken" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max_result",
                        type: "integer"
                    },
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    accountList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                accountName: {},
                                emailAddress: {}
                            }
                        }
                    }
                }
            },
            authtype: "none"
        },
        Logout: {
            http: {
                requestUri: "/logout"
            },
            input: {
                type: "structure",
                required: [ "accessToken" ],
                members: {
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    }
                }
            },
            authtype: "none"
        }
    },
    shapes: {
        S4: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListAccountRoles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "roleList"
        },
        ListAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accountList"
        }
    }
};

AWS.apiLoader.services["ssooidc"] = {};

AWS.SSOOIDC = AWS.Service.defineService("ssooidc", [ "2019-06-10" ]);

AWS.apiLoader.services["ssooidc"]["2019-06-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-10",
        endpointPrefix: "oidc",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SSO OIDC",
        serviceFullName: "AWS SSO OIDC",
        serviceId: "SSO OIDC",
        signatureVersion: "v4",
        signingName: "sso-oauth",
        uid: "sso-oidc-2019-06-10"
    },
    operations: {
        CreateToken: {
            http: {
                requestUri: "/token"
            },
            input: {
                type: "structure",
                required: [ "clientId", "clientSecret", "grantType" ],
                members: {
                    clientId: {},
                    clientSecret: {
                        shape: "S3"
                    },
                    grantType: {},
                    deviceCode: {},
                    code: {},
                    refreshToken: {
                        shape: "S7"
                    },
                    scope: {
                        shape: "S8"
                    },
                    redirectUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessToken: {
                        shape: "Sc"
                    },
                    tokenType: {},
                    expiresIn: {
                        type: "integer"
                    },
                    refreshToken: {
                        shape: "S7"
                    },
                    idToken: {
                        shape: "Sf"
                    }
                }
            },
            authtype: "none"
        },
        CreateTokenWithIAM: {
            http: {
                requestUri: "/token?aws_iam=t"
            },
            input: {
                type: "structure",
                required: [ "clientId", "grantType" ],
                members: {
                    clientId: {},
                    grantType: {},
                    code: {},
                    refreshToken: {
                        shape: "S7"
                    },
                    assertion: {
                        type: "string",
                        sensitive: true
                    },
                    scope: {
                        shape: "S8"
                    },
                    redirectUri: {},
                    subjectToken: {
                        type: "string",
                        sensitive: true
                    },
                    subjectTokenType: {},
                    requestedTokenType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessToken: {
                        shape: "Sc"
                    },
                    tokenType: {},
                    expiresIn: {
                        type: "integer"
                    },
                    refreshToken: {
                        shape: "S7"
                    },
                    idToken: {
                        shape: "Sf"
                    },
                    issuedTokenType: {},
                    scope: {
                        shape: "S8"
                    }
                }
            }
        },
        RegisterClient: {
            http: {
                requestUri: "/client/register"
            },
            input: {
                type: "structure",
                required: [ "clientName", "clientType" ],
                members: {
                    clientName: {},
                    clientType: {},
                    scopes: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clientId: {},
                    clientSecret: {
                        shape: "S3"
                    },
                    clientIdIssuedAt: {
                        type: "long"
                    },
                    clientSecretExpiresAt: {
                        type: "long"
                    },
                    authorizationEndpoint: {},
                    tokenEndpoint: {}
                }
            },
            authtype: "none"
        },
        StartDeviceAuthorization: {
            http: {
                requestUri: "/device_authorization"
            },
            input: {
                type: "structure",
                required: [ "clientId", "clientSecret", "startUrl" ],
                members: {
                    clientId: {},
                    clientSecret: {
                        shape: "S3"
                    },
                    startUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceCode: {},
                    userCode: {},
                    verificationUri: {},
                    verificationUriComplete: {},
                    expiresIn: {
                        type: "integer"
                    },
                    interval: {
                        type: "integer"
                    }
                }
            },
            authtype: "none"
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S7: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sf: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["marketplacecatalog"] = {};

AWS.MarketplaceCatalog = AWS.Service.defineService("marketplacecatalog", [ "2018-09-17" ]);

AWS.apiLoader.services["marketplacecatalog"]["2018-09-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-17",
        endpointPrefix: "catalog.marketplace",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWS Marketplace Catalog",
        serviceFullName: "AWS Marketplace Catalog Service",
        serviceId: "Marketplace Catalog",
        signatureVersion: "v4",
        signingName: "aws-marketplace",
        uid: "marketplace-catalog-2018-09-17"
    },
    operations: {
        CancelChangeSet: {
            http: {
                method: "PATCH",
                requestUri: "/CancelChangeSet"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "ChangeSetId" ],
                members: {
                    Catalog: {
                        location: "querystring",
                        locationName: "catalog"
                    },
                    ChangeSetId: {
                        location: "querystring",
                        locationName: "changeSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetId: {},
                    ChangeSetArn: {}
                }
            }
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteResourcePolicy"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeChangeSet: {
            http: {
                method: "GET",
                requestUri: "/DescribeChangeSet"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "ChangeSetId" ],
                members: {
                    Catalog: {
                        location: "querystring",
                        locationName: "catalog"
                    },
                    ChangeSetId: {
                        location: "querystring",
                        locationName: "changeSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetId: {},
                    ChangeSetArn: {},
                    ChangeSetName: {},
                    StartTime: {},
                    EndTime: {},
                    Status: {},
                    FailureCode: {},
                    FailureDescription: {},
                    ChangeSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChangeType: {},
                                Entity: {
                                    shape: "Sj"
                                },
                                Details: {},
                                DetailsDocument: {
                                    shape: "Sn"
                                },
                                ErrorDetailList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ErrorCode: {},
                                            ErrorMessage: {}
                                        }
                                    }
                                },
                                ChangeName: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeEntity: {
            http: {
                method: "GET",
                requestUri: "/DescribeEntity"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "EntityId" ],
                members: {
                    Catalog: {
                        location: "querystring",
                        locationName: "catalog"
                    },
                    EntityId: {
                        location: "querystring",
                        locationName: "entityId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityType: {},
                    EntityIdentifier: {},
                    EntityArn: {},
                    LastModifiedDate: {},
                    Details: {},
                    DetailsDocument: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetResourcePolicy"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        ListChangeSets: {
            http: {
                requestUri: "/ListChangeSets"
            },
            input: {
                type: "structure",
                required: [ "Catalog" ],
                members: {
                    Catalog: {},
                    FilterList: {
                        shape: "Sy"
                    },
                    Sort: {
                        shape: "S13"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChangeSetId: {},
                                ChangeSetArn: {},
                                ChangeSetName: {},
                                StartTime: {},
                                EndTime: {},
                                Status: {},
                                EntityIdList: {
                                    type: "list",
                                    member: {}
                                },
                                FailureCode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntities: {
            http: {
                requestUri: "/ListEntities"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "EntityType" ],
                members: {
                    Catalog: {},
                    EntityType: {},
                    FilterList: {
                        shape: "Sy"
                    },
                    Sort: {
                        shape: "S13"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    OwnershipType: {},
                    EntityTypeFilters: {
                        type: "structure",
                        members: {
                            DataProductFilters: {
                                type: "structure",
                                members: {
                                    EntityId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    ProductTitle: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    Visibility: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    LastModifiedDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            SaaSProductFilters: {
                                type: "structure",
                                members: {
                                    EntityId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    ProductTitle: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    Visibility: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    LastModifiedDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            AmiProductFilters: {
                                type: "structure",
                                members: {
                                    EntityId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    LastModifiedDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    },
                                    ProductTitle: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    Visibility: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    }
                                }
                            },
                            OfferFilters: {
                                type: "structure",
                                members: {
                                    EntityId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    Name: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    ProductId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    ReleaseDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    },
                                    AvailabilityEndDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    },
                                    BuyerAccounts: {
                                        type: "structure",
                                        members: {
                                            WildCardValue: {}
                                        }
                                    },
                                    State: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    Targeting: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    LastModifiedDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ContainerProductFilters: {
                                type: "structure",
                                members: {
                                    EntityId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    LastModifiedDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    },
                                    ProductTitle: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    Visibility: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    }
                                }
                            },
                            ResaleAuthorizationFilters: {
                                type: "structure",
                                members: {
                                    EntityId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    Name: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    ProductId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    CreatedDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            },
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    AvailabilityEndDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            },
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    ManufacturerAccountId: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    ProductName: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    ManufacturerLegalName: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    ResellerAccountID: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    ResellerLegalName: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            },
                                            WildCardValue: {}
                                        }
                                    },
                                    Status: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    OfferExtendedStatus: {
                                        type: "structure",
                                        members: {
                                            ValueList: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    },
                                    LastModifiedDate: {
                                        type: "structure",
                                        members: {
                                            DateRange: {
                                                type: "structure",
                                                members: {
                                                    AfterValue: {},
                                                    BeforeValue: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    EntityTypeSort: {
                        type: "structure",
                        members: {
                            DataProductSort: {
                                type: "structure",
                                members: {
                                    SortBy: {},
                                    SortOrder: {}
                                }
                            },
                            SaaSProductSort: {
                                type: "structure",
                                members: {
                                    SortBy: {},
                                    SortOrder: {}
                                }
                            },
                            AmiProductSort: {
                                type: "structure",
                                members: {
                                    SortBy: {},
                                    SortOrder: {}
                                }
                            },
                            OfferSort: {
                                type: "structure",
                                members: {
                                    SortBy: {},
                                    SortOrder: {}
                                }
                            },
                            ContainerProductSort: {
                                type: "structure",
                                members: {
                                    SortBy: {},
                                    SortOrder: {}
                                }
                            },
                            ResaleAuthorizationSort: {
                                type: "structure",
                                members: {
                                    SortBy: {},
                                    SortOrder: {}
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntitySummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                EntityType: {},
                                EntityId: {},
                                EntityArn: {},
                                LastModifiedDate: {},
                                Visibility: {},
                                AmiProductSummary: {
                                    type: "structure",
                                    members: {
                                        ProductTitle: {},
                                        Visibility: {}
                                    }
                                },
                                ContainerProductSummary: {
                                    type: "structure",
                                    members: {
                                        ProductTitle: {},
                                        Visibility: {}
                                    }
                                },
                                DataProductSummary: {
                                    type: "structure",
                                    members: {
                                        ProductTitle: {},
                                        Visibility: {}
                                    }
                                },
                                SaaSProductSummary: {
                                    type: "structure",
                                    members: {
                                        ProductTitle: {},
                                        Visibility: {}
                                    }
                                },
                                OfferSummary: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        ProductId: {},
                                        ReleaseDate: {},
                                        AvailabilityEndDate: {},
                                        BuyerAccounts: {
                                            type: "list",
                                            member: {}
                                        },
                                        State: {},
                                        Targeting: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                ResaleAuthorizationSummary: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        ProductId: {},
                                        ProductName: {},
                                        ManufacturerAccountId: {},
                                        ManufacturerLegalName: {},
                                        ResellerAccountID: {},
                                        ResellerLegalName: {},
                                        Status: {},
                                        OfferExtendedStatus: {},
                                        CreatedDate: {},
                                        AvailabilityEndDate: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/ListTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S5j"
                    }
                }
            }
        },
        PutResourcePolicy: {
            http: {
                requestUri: "/PutResourcePolicy"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartChangeSet: {
            http: {
                requestUri: "/StartChangeSet"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "ChangeSet" ],
                members: {
                    Catalog: {},
                    ChangeSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ChangeType", "Entity" ],
                            members: {
                                ChangeType: {},
                                Entity: {
                                    shape: "Sj"
                                },
                                EntityTags: {
                                    shape: "S5j"
                                },
                                Details: {},
                                DetailsDocument: {
                                    shape: "Sn"
                                },
                                ChangeName: {}
                            }
                        }
                    },
                    ChangeSetName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    ChangeSetTags: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetId: {},
                    ChangeSetArn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sj: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Identifier: {}
            }
        },
        Sn: {
            type: "structure",
            members: {},
            document: true
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    ValueList: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                SortBy: {},
                SortOrder: {}
            }
        },
        S5j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListChangeSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ChangeSetSummaryList"
        },
        ListEntities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EntitySummaryList"
        }
    }
};

AWS.apiLoader.services["dataexchange"] = {};

AWS.DataExchange = AWS.Service.defineService("dataexchange", [ "2017-07-25" ]);

AWS.apiLoader.services["dataexchange"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "dataexchange",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Data Exchange",
        serviceId: "DataExchange",
        signatureVersion: "v4",
        signingName: "dataexchange",
        uid: "dataexchange-2017-07-25"
    },
    operations: {
        CancelJob: {
            http: {
                method: "DELETE",
                requestUri: "/v1/jobs/{JobId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            }
        },
        CreateDataSet: {
            http: {
                requestUri: "/v1/data-sets",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AssetType", "Description", "Name" ],
                members: {
                    AssetType: {},
                    Description: {},
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Description: {},
                    Id: {},
                    Name: {},
                    Origin: {},
                    OriginDetails: {
                        shape: "Sd"
                    },
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateEventAction: {
            http: {
                requestUri: "/v1/event-actions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Action", "Event" ],
                members: {
                    Action: {
                        shape: "Sf"
                    },
                    Event: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Action: {
                        shape: "Sf"
                    },
                    Arn: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Event: {
                        shape: "Sk"
                    },
                    Id: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateJob: {
            http: {
                requestUri: "/v1/jobs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Details", "Type" ],
                members: {
                    Details: {
                        type: "structure",
                        members: {
                            ExportAssetToSignedUrl: {
                                type: "structure",
                                required: [ "AssetId", "DataSetId", "RevisionId" ],
                                members: {
                                    AssetId: {},
                                    DataSetId: {},
                                    RevisionId: {}
                                }
                            },
                            ExportAssetsToS3: {
                                type: "structure",
                                required: [ "AssetDestinations", "DataSetId", "RevisionId" ],
                                members: {
                                    AssetDestinations: {
                                        shape: "Sr"
                                    },
                                    DataSetId: {},
                                    Encryption: {
                                        shape: "Sh"
                                    },
                                    RevisionId: {}
                                }
                            },
                            ExportRevisionsToS3: {
                                type: "structure",
                                required: [ "DataSetId", "RevisionDestinations" ],
                                members: {
                                    DataSetId: {},
                                    Encryption: {
                                        shape: "Sh"
                                    },
                                    RevisionDestinations: {
                                        shape: "Su"
                                    }
                                }
                            },
                            ImportAssetFromSignedUrl: {
                                type: "structure",
                                required: [ "AssetName", "DataSetId", "Md5Hash", "RevisionId" ],
                                members: {
                                    AssetName: {},
                                    DataSetId: {},
                                    Md5Hash: {},
                                    RevisionId: {}
                                }
                            },
                            ImportAssetsFromS3: {
                                type: "structure",
                                required: [ "AssetSources", "DataSetId", "RevisionId" ],
                                members: {
                                    AssetSources: {
                                        shape: "S10"
                                    },
                                    DataSetId: {},
                                    RevisionId: {}
                                }
                            },
                            ImportAssetsFromRedshiftDataShares: {
                                type: "structure",
                                required: [ "AssetSources", "DataSetId", "RevisionId" ],
                                members: {
                                    AssetSources: {
                                        shape: "S13"
                                    },
                                    DataSetId: {},
                                    RevisionId: {}
                                }
                            },
                            ImportAssetFromApiGatewayApi: {
                                type: "structure",
                                required: [ "ApiId", "ApiName", "ApiSpecificationMd5Hash", "DataSetId", "ProtocolType", "RevisionId", "Stage" ],
                                members: {
                                    ApiDescription: {},
                                    ApiId: {},
                                    ApiKey: {},
                                    ApiName: {},
                                    ApiSpecificationMd5Hash: {},
                                    DataSetId: {},
                                    ProtocolType: {},
                                    RevisionId: {},
                                    Stage: {}
                                }
                            },
                            CreateS3DataAccessFromS3Bucket: {
                                type: "structure",
                                required: [ "AssetSource", "DataSetId", "RevisionId" ],
                                members: {
                                    AssetSource: {
                                        shape: "S19"
                                    },
                                    DataSetId: {},
                                    RevisionId: {}
                                }
                            },
                            ImportAssetsFromLakeFormationTagPolicy: {
                                type: "structure",
                                required: [ "CatalogId", "RoleArn", "DataSetId", "RevisionId" ],
                                members: {
                                    CatalogId: {},
                                    Database: {
                                        shape: "S1g"
                                    },
                                    Table: {
                                        shape: "S1n"
                                    },
                                    RoleArn: {},
                                    DataSetId: {},
                                    RevisionId: {}
                                }
                            }
                        }
                    },
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Details: {
                        shape: "S1t"
                    },
                    Errors: {
                        shape: "S23"
                    },
                    Id: {},
                    State: {},
                    Type: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateRevision: {
            http: {
                requestUri: "/v1/data-sets/{DataSetId}/revisions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DataSetId" ],
                members: {
                    Comment: {},
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Comment: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Finalized: {
                        type: "boolean"
                    },
                    Id: {},
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    },
                    RevocationComment: {},
                    Revoked: {
                        type: "boolean"
                    },
                    RevokedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        DeleteAsset: {
            http: {
                method: "DELETE",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AssetId", "DataSetId", "RevisionId" ],
                members: {
                    AssetId: {
                        location: "uri",
                        locationName: "AssetId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                }
            }
        },
        DeleteDataSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/data-sets/{DataSetId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DataSetId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            }
        },
        DeleteEventAction: {
            http: {
                method: "DELETE",
                requestUri: "/v1/event-actions/{EventActionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "EventActionId" ],
                members: {
                    EventActionId: {
                        location: "uri",
                        locationName: "EventActionId"
                    }
                }
            }
        },
        DeleteRevision: {
            http: {
                method: "DELETE",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "RevisionId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                }
            }
        },
        GetAsset: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AssetId", "DataSetId", "RevisionId" ],
                members: {
                    AssetId: {
                        location: "uri",
                        locationName: "AssetId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetDetails: {
                        shape: "S2n"
                    },
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Id: {},
                    Name: {},
                    RevisionId: {},
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetDataSet: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSetId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Description: {},
                    Id: {},
                    Name: {},
                    Origin: {},
                    OriginDetails: {
                        shape: "Sd"
                    },
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetEventAction: {
            http: {
                method: "GET",
                requestUri: "/v1/event-actions/{EventActionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EventActionId" ],
                members: {
                    EventActionId: {
                        location: "uri",
                        locationName: "EventActionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Action: {
                        shape: "Sf"
                    },
                    Arn: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Event: {
                        shape: "Sk"
                    },
                    Id: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetJob: {
            http: {
                method: "GET",
                requestUri: "/v1/jobs/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Details: {
                        shape: "S1t"
                    },
                    Errors: {
                        shape: "S23"
                    },
                    Id: {},
                    State: {},
                    Type: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetRevision: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "RevisionId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Comment: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Finalized: {
                        type: "boolean"
                    },
                    Id: {},
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    },
                    RevocationComment: {},
                    Revoked: {
                        type: "boolean"
                    },
                    RevokedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListDataSetRevisions: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSetId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Revisions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "CreatedAt", "DataSetId", "Id", "UpdatedAt" ],
                            members: {
                                Arn: {},
                                Comment: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                DataSetId: {},
                                Finalized: {
                                    type: "boolean"
                                },
                                Id: {},
                                SourceId: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                },
                                RevocationComment: {},
                                Revoked: {
                                    type: "boolean"
                                },
                                RevokedAt: {
                                    shape: "Sa"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListDataSets: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Origin: {
                        location: "querystring",
                        locationName: "origin"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "AssetType", "CreatedAt", "Description", "Id", "Name", "Origin", "UpdatedAt" ],
                            members: {
                                Arn: {},
                                AssetType: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                Description: {},
                                Id: {},
                                Name: {},
                                Origin: {},
                                OriginDetails: {
                                    shape: "Sd"
                                },
                                SourceId: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventActions: {
            http: {
                method: "GET",
                requestUri: "/v1/event-actions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    EventSourceId: {
                        location: "querystring",
                        locationName: "eventSourceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventActions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "Arn", "CreatedAt", "Event", "Id", "UpdatedAt" ],
                            members: {
                                Action: {
                                    shape: "Sf"
                                },
                                Arn: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                Event: {
                                    shape: "Sk"
                                },
                                Id: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/v1/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "querystring",
                        locationName: "dataSetId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RevisionId: {
                        location: "querystring",
                        locationName: "revisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "CreatedAt", "Details", "Id", "State", "Type", "UpdatedAt" ],
                            members: {
                                Arn: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                Details: {
                                    shape: "S1t"
                                },
                                Errors: {
                                    shape: "S23"
                                },
                                Id: {},
                                State: {},
                                Type: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRevisionAssets: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "RevisionId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Assets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "AssetDetails", "AssetType", "CreatedAt", "DataSetId", "Id", "Name", "RevisionId", "UpdatedAt" ],
                            members: {
                                Arn: {},
                                AssetDetails: {
                                    shape: "S2n"
                                },
                                AssetType: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                DataSetId: {},
                                Id: {},
                                Name: {},
                                RevisionId: {},
                                SourceId: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7",
                        locationName: "tags"
                    }
                }
            }
        },
        RevokeRevision: {
            http: {
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/revoke",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "RevisionId", "RevocationComment" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    },
                    RevocationComment: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Comment: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Finalized: {
                        type: "boolean"
                    },
                    Id: {},
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    },
                    RevocationComment: {},
                    Revoked: {
                        type: "boolean"
                    },
                    RevokedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        SendApiAsset: {
            http: {
                requestUri: "/v1",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AssetId", "DataSetId", "RevisionId" ],
                members: {
                    Body: {},
                    QueryStringParameters: {
                        shape: "S7",
                        location: "querystring"
                    },
                    AssetId: {
                        location: "header",
                        locationName: "x-amzn-dataexchange-asset-id"
                    },
                    DataSetId: {
                        location: "header",
                        locationName: "x-amzn-dataexchange-data-set-id"
                    },
                    RequestHeaders: {
                        shape: "S7",
                        location: "headers",
                        locationName: "x-amzn-dataexchange-header-"
                    },
                    Method: {
                        location: "header",
                        locationName: "x-amzn-dataexchange-http-method"
                    },
                    Path: {
                        location: "header",
                        locationName: "x-amzn-dataexchange-path"
                    },
                    RevisionId: {
                        location: "header",
                        locationName: "x-amzn-dataexchange-revision-id"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                members: {
                    Body: {},
                    ResponseHeaders: {
                        shape: "S7",
                        location: "headers",
                        locationName: ""
                    }
                },
                payload: "Body"
            },
            endpoint: {
                hostPrefix: "api-fulfill."
            }
        },
        SendDataSetNotification: {
            http: {
                requestUri: "/v1/data-sets/{DataSetId}/notification",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "Type" ],
                members: {
                    Scope: {
                        type: "structure",
                        members: {
                            LakeFormationTagPolicies: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Database: {},
                                        Table: {}
                                    }
                                }
                            },
                            RedshiftDataShares: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Arn", "Database" ],
                                    members: {
                                        Arn: {},
                                        Database: {},
                                        Function: {},
                                        Table: {},
                                        Schema: {},
                                        View: {}
                                    }
                                }
                            },
                            S3DataAccesses: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        KeyPrefixes: {
                                            shape: "S1a"
                                        },
                                        Keys: {
                                            shape: "S1a"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Comment: {},
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Details: {
                        type: "structure",
                        members: {
                            DataUpdate: {
                                type: "structure",
                                members: {
                                    DataUpdatedAt: {
                                        shape: "Sa"
                                    }
                                }
                            },
                            Deprecation: {
                                type: "structure",
                                required: [ "DeprecationAt" ],
                                members: {
                                    DeprecationAt: {
                                        shape: "Sa"
                                    }
                                }
                            },
                            SchemaChange: {
                                type: "structure",
                                required: [ "SchemaChangeAt" ],
                                members: {
                                    Changes: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Name", "Type" ],
                                            members: {
                                                Name: {},
                                                Type: {},
                                                Description: {}
                                            }
                                        }
                                    },
                                    SchemaChangeAt: {
                                        shape: "Sa"
                                    }
                                }
                            }
                        }
                    },
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartJob: {
            http: {
                method: "PATCH",
                requestUri: "/v1/jobs/{JobId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S7",
                        locationName: "tags"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        shape: "S1a",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                }
            },
            idempotent: true
        },
        UpdateAsset: {
            http: {
                method: "PATCH",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AssetId", "DataSetId", "Name", "RevisionId" ],
                members: {
                    AssetId: {
                        location: "uri",
                        locationName: "AssetId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Name: {},
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetDetails: {
                        shape: "S2n"
                    },
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Id: {},
                    Name: {},
                    RevisionId: {},
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        UpdateDataSet: {
            http: {
                method: "PATCH",
                requestUri: "/v1/data-sets/{DataSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSetId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Description: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Description: {},
                    Id: {},
                    Name: {},
                    Origin: {},
                    OriginDetails: {
                        shape: "Sd"
                    },
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        UpdateEventAction: {
            http: {
                method: "PATCH",
                requestUri: "/v1/event-actions/{EventActionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EventActionId" ],
                members: {
                    Action: {
                        shape: "Sf"
                    },
                    EventActionId: {
                        location: "uri",
                        locationName: "EventActionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Action: {
                        shape: "Sf"
                    },
                    Arn: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Event: {
                        shape: "Sk"
                    },
                    Id: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        UpdateRevision: {
            http: {
                method: "PATCH",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "RevisionId" ],
                members: {
                    Comment: {},
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Finalized: {
                        type: "boolean"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Comment: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Finalized: {
                        type: "boolean"
                    },
                    Id: {},
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    },
                    RevocationComment: {},
                    Revoked: {
                        type: "boolean"
                    },
                    RevokedAt: {
                        shape: "Sa"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sa: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sd: {
            type: "structure",
            members: {
                ProductId: {}
            }
        },
        Sf: {
            type: "structure",
            members: {
                ExportRevisionToS3: {
                    type: "structure",
                    required: [ "RevisionDestination" ],
                    members: {
                        Encryption: {
                            shape: "Sh"
                        },
                        RevisionDestination: {
                            type: "structure",
                            required: [ "Bucket" ],
                            members: {
                                Bucket: {},
                                KeyPattern: {}
                            }
                        }
                    }
                }
            }
        },
        Sh: {
            type: "structure",
            required: [ "Type" ],
            members: {
                KmsKeyArn: {},
                Type: {}
            }
        },
        Sk: {
            type: "structure",
            members: {
                RevisionPublished: {
                    type: "structure",
                    required: [ "DataSetId" ],
                    members: {
                        DataSetId: {}
                    }
                }
            }
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AssetId", "Bucket" ],
                members: {
                    AssetId: {},
                    Bucket: {},
                    Key: {}
                }
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Bucket", "RevisionId" ],
                members: {
                    Bucket: {},
                    KeyPattern: {},
                    RevisionId: {}
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {},
                    Key: {}
                }
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataShareArn" ],
                members: {
                    DataShareArn: {}
                }
            }
        },
        S19: {
            type: "structure",
            required: [ "Bucket" ],
            members: {
                Bucket: {},
                KeyPrefixes: {
                    shape: "S1a"
                },
                Keys: {
                    shape: "S1a"
                },
                KmsKeysToGrant: {
                    shape: "S1b"
                }
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "KmsKeyArn" ],
                members: {
                    KmsKeyArn: {}
                }
            }
        },
        S1g: {
            type: "structure",
            required: [ "Expression", "Permissions" ],
            members: {
                Expression: {
                    shape: "S1h"
                },
                Permissions: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TagKey", "TagValues" ],
                members: {
                    TagKey: {},
                    TagValues: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "Expression", "Permissions" ],
            members: {
                Expression: {
                    shape: "S1h"
                },
                Permissions: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                ExportAssetToSignedUrl: {
                    type: "structure",
                    required: [ "AssetId", "DataSetId", "RevisionId" ],
                    members: {
                        AssetId: {},
                        DataSetId: {},
                        RevisionId: {},
                        SignedUrl: {},
                        SignedUrlExpiresAt: {
                            shape: "Sa"
                        }
                    }
                },
                ExportAssetsToS3: {
                    type: "structure",
                    required: [ "AssetDestinations", "DataSetId", "RevisionId" ],
                    members: {
                        AssetDestinations: {
                            shape: "Sr"
                        },
                        DataSetId: {},
                        Encryption: {
                            shape: "Sh"
                        },
                        RevisionId: {}
                    }
                },
                ExportRevisionsToS3: {
                    type: "structure",
                    required: [ "DataSetId", "RevisionDestinations" ],
                    members: {
                        DataSetId: {},
                        Encryption: {
                            shape: "Sh"
                        },
                        RevisionDestinations: {
                            shape: "Su"
                        },
                        EventActionArn: {}
                    }
                },
                ImportAssetFromSignedUrl: {
                    type: "structure",
                    required: [ "AssetName", "DataSetId", "RevisionId" ],
                    members: {
                        AssetName: {},
                        DataSetId: {},
                        Md5Hash: {},
                        RevisionId: {},
                        SignedUrl: {},
                        SignedUrlExpiresAt: {
                            shape: "Sa"
                        }
                    }
                },
                ImportAssetsFromS3: {
                    type: "structure",
                    required: [ "AssetSources", "DataSetId", "RevisionId" ],
                    members: {
                        AssetSources: {
                            shape: "S10"
                        },
                        DataSetId: {},
                        RevisionId: {}
                    }
                },
                ImportAssetsFromRedshiftDataShares: {
                    type: "structure",
                    required: [ "AssetSources", "DataSetId", "RevisionId" ],
                    members: {
                        AssetSources: {
                            shape: "S13"
                        },
                        DataSetId: {},
                        RevisionId: {}
                    }
                },
                ImportAssetFromApiGatewayApi: {
                    type: "structure",
                    required: [ "ApiId", "ApiName", "ApiSpecificationMd5Hash", "ApiSpecificationUploadUrl", "ApiSpecificationUploadUrlExpiresAt", "DataSetId", "ProtocolType", "RevisionId", "Stage" ],
                    members: {
                        ApiDescription: {},
                        ApiId: {},
                        ApiKey: {},
                        ApiName: {},
                        ApiSpecificationMd5Hash: {},
                        ApiSpecificationUploadUrl: {},
                        ApiSpecificationUploadUrlExpiresAt: {
                            shape: "Sa"
                        },
                        DataSetId: {},
                        ProtocolType: {},
                        RevisionId: {},
                        Stage: {}
                    }
                },
                CreateS3DataAccessFromS3Bucket: {
                    type: "structure",
                    required: [ "AssetSource", "DataSetId", "RevisionId" ],
                    members: {
                        AssetSource: {
                            shape: "S19"
                        },
                        DataSetId: {},
                        RevisionId: {}
                    }
                },
                ImportAssetsFromLakeFormationTagPolicy: {
                    type: "structure",
                    required: [ "CatalogId", "RoleArn", "DataSetId", "RevisionId" ],
                    members: {
                        CatalogId: {},
                        Database: {
                            shape: "S1g"
                        },
                        Table: {
                            shape: "S1n"
                        },
                        RoleArn: {},
                        DataSetId: {},
                        RevisionId: {}
                    }
                }
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Code", "Message" ],
                members: {
                    Code: {},
                    Details: {
                        type: "structure",
                        members: {
                            ImportAssetFromSignedUrlJobErrorDetails: {
                                type: "structure",
                                required: [ "AssetName" ],
                                members: {
                                    AssetName: {}
                                }
                            },
                            ImportAssetsFromS3JobErrorDetails: {
                                shape: "S10"
                            }
                        }
                    },
                    LimitName: {},
                    LimitValue: {
                        type: "double"
                    },
                    Message: {},
                    ResourceId: {},
                    ResourceType: {}
                }
            }
        },
        S2n: {
            type: "structure",
            members: {
                S3SnapshotAsset: {
                    type: "structure",
                    required: [ "Size" ],
                    members: {
                        Size: {
                            type: "double"
                        }
                    }
                },
                RedshiftDataShareAsset: {
                    type: "structure",
                    required: [ "Arn" ],
                    members: {
                        Arn: {}
                    }
                },
                ApiGatewayApiAsset: {
                    type: "structure",
                    members: {
                        ApiDescription: {},
                        ApiEndpoint: {},
                        ApiId: {},
                        ApiKey: {},
                        ApiName: {},
                        ApiSpecificationDownloadUrl: {},
                        ApiSpecificationDownloadUrlExpiresAt: {
                            shape: "Sa"
                        },
                        ProtocolType: {},
                        Stage: {}
                    }
                },
                S3DataAccessAsset: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        KeyPrefixes: {
                            shape: "S1a"
                        },
                        Keys: {
                            shape: "S1a"
                        },
                        S3AccessPointAlias: {},
                        S3AccessPointArn: {},
                        KmsKeysToGrant: {
                            shape: "S1b"
                        }
                    }
                },
                LakeFormationDataPermissionAsset: {
                    type: "structure",
                    required: [ "LakeFormationDataPermissionDetails", "LakeFormationDataPermissionType", "Permissions" ],
                    members: {
                        LakeFormationDataPermissionDetails: {
                            type: "structure",
                            members: {
                                LFTagPolicy: {
                                    type: "structure",
                                    required: [ "CatalogId", "ResourceType", "ResourceDetails" ],
                                    members: {
                                        CatalogId: {},
                                        ResourceType: {},
                                        ResourceDetails: {
                                            type: "structure",
                                            members: {
                                                Database: {
                                                    type: "structure",
                                                    required: [ "Expression" ],
                                                    members: {
                                                        Expression: {
                                                            shape: "S1h"
                                                        }
                                                    }
                                                },
                                                Table: {
                                                    type: "structure",
                                                    required: [ "Expression" ],
                                                    members: {
                                                        Expression: {
                                                            shape: "S1h"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        LakeFormationDataPermissionType: {},
                        Permissions: {
                            type: "list",
                            member: {}
                        },
                        RoleArn: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListDataSetRevisions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Revisions"
        },
        ListDataSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSets"
        },
        ListEventActions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EventActions"
        },
        ListJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Jobs"
        },
        ListRevisionAssets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Assets"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["sesv2"] = {};

AWS.SESV2 = AWS.Service.defineService("sesv2", [ "2019-09-27" ]);

AWS.apiLoader.services["sesv2"]["2019-09-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-09-27",
        endpointPrefix: "email",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon SES V2",
        serviceFullName: "Amazon Simple Email Service",
        serviceId: "SESv2",
        signatureVersion: "v4",
        signingName: "ses",
        uid: "sesv2-2019-09-27"
    },
    operations: {
        BatchGetMetricData: {
            http: {
                requestUri: "/v2/email/metrics/batch"
            },
            input: {
                type: "structure",
                required: [ "Queries" ],
                members: {
                    Queries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "Namespace", "Metric", "StartDate", "EndDate" ],
                            members: {
                                Id: {},
                                Namespace: {},
                                Metric: {},
                                Dimensions: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                },
                                StartDate: {
                                    type: "timestamp"
                                },
                                EndDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Timestamps: {
                                    type: "list",
                                    member: {
                                        type: "timestamp"
                                    }
                                },
                                Values: {
                                    type: "list",
                                    member: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Code: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        CancelExportJob: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/export-jobs/{JobId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSet: {
            http: {
                requestUri: "/v2/email/configuration-sets"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "Sq"
                    },
                    DeliveryOptions: {
                        shape: "Ss"
                    },
                    ReputationOptions: {
                        shape: "Sv"
                    },
                    SendingOptions: {
                        shape: "Sy"
                    },
                    Tags: {
                        shape: "Sz"
                    },
                    SuppressionOptions: {
                        shape: "S13"
                    },
                    VdmOptions: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {},
                    EventDestination: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateContact: {
            http: {
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {},
                    TopicPreferences: {
                        shape: "S1u"
                    },
                    UnsubscribeAll: {
                        type: "boolean"
                    },
                    AttributesData: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateContactList: {
            http: {
                requestUri: "/v2/email/contact-lists"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {},
                    Topics: {
                        shape: "S22"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateCustomVerificationEmailTemplate: {
            http: {
                requestUri: "/v2/email/custom-verification-email-templates"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "FromEmailAddress", "TemplateSubject", "TemplateContent", "SuccessRedirectionURL", "FailureRedirectionURL" ],
                members: {
                    TemplateName: {},
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDedicatedIpPool: {
            http: {
                requestUri: "/v2/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {},
                    Tags: {
                        shape: "Sz"
                    },
                    ScalingMode: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDeliverabilityTestReport: {
            http: {
                requestUri: "/v2/email/deliverability-dashboard/test"
            },
            input: {
                type: "structure",
                required: [ "FromEmailAddress", "Content" ],
                members: {
                    ReportName: {},
                    FromEmailAddress: {},
                    Content: {
                        shape: "S2j"
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReportId", "DeliverabilityTestStatus" ],
                members: {
                    ReportId: {},
                    DeliverabilityTestStatus: {}
                }
            }
        },
        CreateEmailIdentity: {
            http: {
                requestUri: "/v2/email/identities"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {},
                    Tags: {
                        shape: "Sz"
                    },
                    DkimSigningAttributes: {
                        shape: "S2y"
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S34"
                    }
                }
            }
        },
        CreateEmailIdentityPolicy: {
            http: {
                requestUri: "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "PolicyName", "Policy" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    PolicyName: {
                        location: "uri",
                        locationName: "PolicyName"
                    },
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateEmailTemplate: {
            http: {
                requestUri: "/v2/email/templates"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "TemplateContent" ],
                members: {
                    TemplateName: {},
                    TemplateContent: {
                        shape: "S3e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateExportJob: {
            http: {
                requestUri: "/v2/email/export-jobs"
            },
            input: {
                type: "structure",
                required: [ "ExportDataSource", "ExportDestination" ],
                members: {
                    ExportDataSource: {
                        shape: "S3j"
                    },
                    ExportDestination: {
                        shape: "S43"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        CreateImportJob: {
            http: {
                requestUri: "/v2/email/import-jobs"
            },
            input: {
                type: "structure",
                required: [ "ImportDestination", "ImportDataSource" ],
                members: {
                    ImportDestination: {
                        shape: "S48"
                    },
                    ImportDataSource: {
                        shape: "S4d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContact: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContactList: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/contact-lists/{ContactListName}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCustomVerificationEmailTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/custom-verification-email-templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDedicatedIpPool: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/dedicated-ip-pools/{PoolName}"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {
                        location: "uri",
                        locationName: "PoolName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailIdentity: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailIdentityPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "PolicyName" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    PolicyName: {
                        location: "uri",
                        locationName: "PolicyName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSuppressedDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/suppression/addresses/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/v2/email/account"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpAutoWarmupEnabled: {
                        type: "boolean"
                    },
                    EnforcementStatus: {},
                    ProductionAccessEnabled: {
                        type: "boolean"
                    },
                    SendQuota: {
                        type: "structure",
                        members: {
                            Max24HourSend: {
                                type: "double"
                            },
                            MaxSendRate: {
                                type: "double"
                            },
                            SentLast24Hours: {
                                type: "double"
                            }
                        }
                    },
                    SendingEnabled: {
                        type: "boolean"
                    },
                    SuppressionAttributes: {
                        type: "structure",
                        members: {
                            SuppressedReasons: {
                                shape: "S14"
                            }
                        }
                    },
                    Details: {
                        type: "structure",
                        members: {
                            MailType: {},
                            WebsiteURL: {
                                shape: "S59"
                            },
                            ContactLanguage: {},
                            UseCaseDescription: {
                                shape: "S5b"
                            },
                            AdditionalContactEmailAddresses: {
                                shape: "S5c"
                            },
                            ReviewDetails: {
                                type: "structure",
                                members: {
                                    Status: {},
                                    CaseId: {}
                                }
                            }
                        }
                    },
                    VdmAttributes: {
                        shape: "S5h"
                    }
                }
            }
        },
        GetBlacklistReports: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/blacklist-report"
            },
            input: {
                type: "structure",
                required: [ "BlacklistItemNames" ],
                members: {
                    BlacklistItemNames: {
                        location: "querystring",
                        locationName: "BlacklistItemNames",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "BlacklistReport" ],
                members: {
                    BlacklistReport: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    RblName: {},
                                    ListingTime: {
                                        type: "timestamp"
                                    },
                                    Description: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetConfigurationSet: {
            http: {
                method: "GET",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "Sq"
                    },
                    DeliveryOptions: {
                        shape: "Ss"
                    },
                    ReputationOptions: {
                        shape: "Sv"
                    },
                    SendingOptions: {
                        shape: "Sy"
                    },
                    Tags: {
                        shape: "Sz"
                    },
                    SuppressionOptions: {
                        shape: "S13"
                    },
                    VdmOptions: {
                        shape: "S16"
                    }
                }
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "MatchingEventTypes" ],
                            members: {
                                Name: {},
                                Enabled: {
                                    type: "boolean"
                                },
                                MatchingEventTypes: {
                                    shape: "S1e"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "S1g"
                                },
                                CloudWatchDestination: {
                                    shape: "S1i"
                                },
                                SnsDestination: {
                                    shape: "S1o"
                                },
                                PinpointDestination: {
                                    shape: "S1p"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetContact: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactListName: {},
                    EmailAddress: {},
                    TopicPreferences: {
                        shape: "S1u"
                    },
                    TopicDefaultPreferences: {
                        shape: "S1u"
                    },
                    UnsubscribeAll: {
                        type: "boolean"
                    },
                    AttributesData: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    LastUpdatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetContactList: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists/{ContactListName}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactListName: {},
                    Topics: {
                        shape: "S22"
                    },
                    Description: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    LastUpdatedTimestamp: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetCustomVerificationEmailTemplate: {
            http: {
                method: "GET",
                requestUri: "/v2/email/custom-verification-email-templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateName: {},
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            }
        },
        GetDedicatedIp: {
            http: {
                method: "GET",
                requestUri: "/v2/email/dedicated-ips/{IP}"
            },
            input: {
                type: "structure",
                required: [ "Ip" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIp: {
                        shape: "S68"
                    }
                }
            }
        },
        GetDedicatedIpPool: {
            http: {
                method: "GET",
                requestUri: "/v2/email/dedicated-ip-pools/{PoolName}"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {
                        location: "uri",
                        locationName: "PoolName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpPool: {
                        type: "structure",
                        required: [ "PoolName", "ScalingMode" ],
                        members: {
                            PoolName: {},
                            ScalingMode: {}
                        }
                    }
                }
            }
        },
        GetDedicatedIps: {
            http: {
                method: "GET",
                requestUri: "/v2/email/dedicated-ips"
            },
            input: {
                type: "structure",
                members: {
                    PoolName: {
                        location: "querystring",
                        locationName: "PoolName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIps: {
                        type: "list",
                        member: {
                            shape: "S68"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDeliverabilityDashboardOptions: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscriptionExpiryDate: {
                        type: "timestamp"
                    },
                    AccountStatus: {},
                    ActiveSubscribedDomains: {
                        shape: "S6m"
                    },
                    PendingExpirationSubscribedDomains: {
                        shape: "S6m"
                    }
                }
            }
        },
        GetDeliverabilityTestReport: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/test-reports/{ReportId}"
            },
            input: {
                type: "structure",
                required: [ "ReportId" ],
                members: {
                    ReportId: {
                        location: "uri",
                        locationName: "ReportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReport", "OverallPlacement", "IspPlacements" ],
                members: {
                    DeliverabilityTestReport: {
                        shape: "S6u"
                    },
                    OverallPlacement: {
                        shape: "S6w"
                    },
                    IspPlacements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IspName: {},
                                PlacementStatistics: {
                                    shape: "S6w"
                                }
                            }
                        }
                    },
                    Message: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetDomainDeliverabilityCampaign: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/campaigns/{CampaignId}"
            },
            input: {
                type: "structure",
                required: [ "CampaignId" ],
                members: {
                    CampaignId: {
                        location: "uri",
                        locationName: "CampaignId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaign" ],
                members: {
                    DomainDeliverabilityCampaign: {
                        shape: "S74"
                    }
                }
            }
        },
        GetDomainStatisticsReport: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/statistics-report/{Domain}"
            },
            input: {
                type: "structure",
                required: [ "Domain", "StartDate", "EndDate" ],
                members: {
                    Domain: {
                        location: "uri",
                        locationName: "Domain"
                    },
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "OverallVolume", "DailyVolumes" ],
                members: {
                    OverallVolume: {
                        type: "structure",
                        members: {
                            VolumeStatistics: {
                                shape: "S7e"
                            },
                            ReadRatePercent: {
                                type: "double"
                            },
                            DomainIspPlacements: {
                                shape: "S7f"
                            }
                        }
                    },
                    DailyVolumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartDate: {
                                    type: "timestamp"
                                },
                                VolumeStatistics: {
                                    shape: "S7e"
                                },
                                DomainIspPlacements: {
                                    shape: "S7f"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEmailIdentity: {
            http: {
                method: "GET",
                requestUri: "/v2/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    FeedbackForwardingStatus: {
                        type: "boolean"
                    },
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S34"
                    },
                    MailFromAttributes: {
                        type: "structure",
                        required: [ "MailFromDomain", "MailFromDomainStatus", "BehaviorOnMxFailure" ],
                        members: {
                            MailFromDomain: {},
                            MailFromDomainStatus: {},
                            BehaviorOnMxFailure: {}
                        }
                    },
                    Policies: {
                        shape: "S7p"
                    },
                    Tags: {
                        shape: "Sz"
                    },
                    ConfigurationSetName: {},
                    VerificationStatus: {},
                    VerificationInfo: {
                        type: "structure",
                        members: {
                            LastCheckedTimestamp: {
                                type: "timestamp"
                            },
                            LastSuccessTimestamp: {
                                type: "timestamp"
                            },
                            ErrorType: {},
                            SOARecord: {
                                type: "structure",
                                members: {
                                    PrimaryNameServer: {},
                                    AdminEmail: {},
                                    SerialNumber: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEmailIdentityPolicies: {
            http: {
                method: "GET",
                requestUri: "/v2/email/identities/{EmailIdentity}/policies"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policies: {
                        shape: "S7p"
                    }
                }
            }
        },
        GetEmailTemplate: {
            http: {
                method: "GET",
                requestUri: "/v2/email/templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TemplateName", "TemplateContent" ],
                members: {
                    TemplateName: {},
                    TemplateContent: {
                        shape: "S3e"
                    }
                }
            }
        },
        GetExportJob: {
            http: {
                method: "GET",
                requestUri: "/v2/email/export-jobs/{JobId}"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    ExportSourceType: {},
                    JobStatus: {},
                    ExportDestination: {
                        shape: "S43"
                    },
                    ExportDataSource: {
                        shape: "S3j"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    CompletedTimestamp: {
                        type: "timestamp"
                    },
                    FailureInfo: {
                        shape: "S85"
                    },
                    Statistics: {
                        type: "structure",
                        members: {
                            ProcessedRecordsCount: {
                                type: "integer"
                            },
                            ExportedRecordsCount: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        GetImportJob: {
            http: {
                method: "GET",
                requestUri: "/v2/email/import-jobs/{JobId}"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    ImportDestination: {
                        shape: "S48"
                    },
                    ImportDataSource: {
                        shape: "S4d"
                    },
                    FailureInfo: {
                        shape: "S85"
                    },
                    JobStatus: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    CompletedTimestamp: {
                        type: "timestamp"
                    },
                    ProcessedRecordsCount: {
                        type: "integer"
                    },
                    FailedRecordsCount: {
                        type: "integer"
                    }
                }
            }
        },
        GetMessageInsights: {
            http: {
                method: "GET",
                requestUri: "/v2/email/insights/{MessageId}/"
            },
            input: {
                type: "structure",
                required: [ "MessageId" ],
                members: {
                    MessageId: {
                        location: "uri",
                        locationName: "MessageId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {},
                    FromEmailAddress: {
                        shape: "S3t"
                    },
                    Subject: {
                        shape: "S3v"
                    },
                    EmailTags: {
                        shape: "S8h"
                    },
                    Insights: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Destination: {
                                    shape: "S3t"
                                },
                                Isp: {},
                                Events: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Timestamp: {
                                                type: "timestamp"
                                            },
                                            Type: {},
                                            Details: {
                                                type: "structure",
                                                members: {
                                                    Bounce: {
                                                        type: "structure",
                                                        members: {
                                                            BounceType: {},
                                                            BounceSubType: {},
                                                            DiagnosticCode: {}
                                                        }
                                                    },
                                                    Complaint: {
                                                        type: "structure",
                                                        members: {
                                                            ComplaintSubType: {},
                                                            ComplaintFeedbackType: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSuppressedDestination: {
            http: {
                method: "GET",
                requestUri: "/v2/email/suppression/addresses/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SuppressedDestination" ],
                members: {
                    SuppressedDestination: {
                        type: "structure",
                        required: [ "EmailAddress", "Reason", "LastUpdateTime" ],
                        members: {
                            EmailAddress: {},
                            Reason: {},
                            LastUpdateTime: {
                                type: "timestamp"
                            },
                            Attributes: {
                                type: "structure",
                                members: {
                                    MessageId: {},
                                    FeedbackId: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v2/email/configuration-sets"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListContactLists: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists"
            },
            input: {
                type: "structure",
                members: {
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContactListName: {},
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContacts: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    Filter: {
                        type: "structure",
                        members: {
                            FilteredStatus: {},
                            TopicFilter: {
                                type: "structure",
                                members: {
                                    TopicName: {},
                                    UseDefaultIfPreferenceUnavailable: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Contacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EmailAddress: {},
                                TopicPreferences: {
                                    shape: "S1u"
                                },
                                TopicDefaultPreferences: {
                                    shape: "S1u"
                                },
                                UnsubscribeAll: {
                                    type: "boolean"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomVerificationEmailTemplates: {
            http: {
                method: "GET",
                requestUri: "/v2/email/custom-verification-email-templates"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomVerificationEmailTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateName: {},
                                FromEmailAddress: {},
                                TemplateSubject: {},
                                SuccessRedirectionURL: {},
                                FailureRedirectionURL: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDedicatedIpPools: {
            http: {
                method: "GET",
                requestUri: "/v2/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpPools: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDeliverabilityTestReports: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/test-reports"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReports" ],
                members: {
                    DeliverabilityTestReports: {
                        type: "list",
                        member: {
                            shape: "S6u"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomainDeliverabilityCampaigns: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns"
            },
            input: {
                type: "structure",
                required: [ "StartDate", "EndDate", "SubscribedDomain" ],
                members: {
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    },
                    SubscribedDomain: {
                        location: "uri",
                        locationName: "SubscribedDomain"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaigns" ],
                members: {
                    DomainDeliverabilityCampaigns: {
                        type: "list",
                        member: {
                            shape: "S74"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEmailIdentities: {
            http: {
                method: "GET",
                requestUri: "/v2/email/identities"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmailIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IdentityType: {},
                                IdentityName: {},
                                SendingEnabled: {
                                    type: "boolean"
                                },
                                VerificationStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEmailTemplates: {
            http: {
                method: "GET",
                requestUri: "/v2/email/templates"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplatesMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateName: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExportJobs: {
            http: {
                requestUri: "/v2/email/list-export-jobs"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    PageSize: {
                        type: "integer"
                    },
                    ExportSourceType: {},
                    JobStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                ExportSourceType: {},
                                JobStatus: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                CompletedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListImportJobs: {
            http: {
                method: "GET",
                requestUri: "/v2/email/import-jobs"
            },
            input: {
                type: "structure",
                members: {
                    ImportDestinationType: {},
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                ImportDestination: {
                                    shape: "S48"
                                },
                                JobStatus: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                ProcessedRecordsCount: {
                                    type: "integer"
                                },
                                FailedRecordsCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecommendations: {
            http: {
                requestUri: "/v2/email/vdm/recommendations"
            },
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    NextToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                Type: {},
                                Description: {},
                                Status: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                Impact: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSuppressedDestinations: {
            http: {
                method: "GET",
                requestUri: "/v2/email/suppression/addresses"
            },
            input: {
                type: "structure",
                members: {
                    Reasons: {
                        shape: "S14",
                        location: "querystring",
                        locationName: "Reason"
                    },
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuppressedDestinationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EmailAddress", "Reason", "LastUpdateTime" ],
                            members: {
                                EmailAddress: {},
                                Reason: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v2/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sz"
                    }
                }
            }
        },
        PutAccountDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/account/dedicated-ips/warmup"
            },
            input: {
                type: "structure",
                members: {
                    AutoWarmupEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountDetails: {
            http: {
                requestUri: "/v2/email/account/details"
            },
            input: {
                type: "structure",
                required: [ "MailType", "WebsiteURL", "UseCaseDescription" ],
                members: {
                    MailType: {},
                    WebsiteURL: {
                        shape: "S59"
                    },
                    ContactLanguage: {},
                    UseCaseDescription: {
                        shape: "S5b"
                    },
                    AdditionalContactEmailAddresses: {
                        shape: "S5c"
                    },
                    ProductionAccessEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountSendingAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/account/sending"
            },
            input: {
                type: "structure",
                members: {
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountSuppressionAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/account/suppression"
            },
            input: {
                type: "structure",
                members: {
                    SuppressedReasons: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountVdmAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/account/vdm"
            },
            input: {
                type: "structure",
                required: [ "VdmAttributes" ],
                members: {
                    VdmAttributes: {
                        shape: "S5h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetDeliveryOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/delivery-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    TlsPolicy: {},
                    SendingPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetReputationOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/reputation-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    ReputationMetricsEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetSendingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/sending"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetSuppressionOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/suppression-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    SuppressedReasons: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetTrackingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/tracking-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    CustomRedirectDomain: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetVdmOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/vdm-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    VdmOptions: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpInPool: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/dedicated-ips/{IP}/pool"
            },
            input: {
                type: "structure",
                required: [ "Ip", "DestinationPoolName" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    DestinationPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpPoolScalingAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/dedicated-ip-pools/{PoolName}/scaling"
            },
            input: {
                type: "structure",
                required: [ "PoolName", "ScalingMode" ],
                members: {
                    PoolName: {
                        location: "uri",
                        locationName: "PoolName"
                    },
                    ScalingMode: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/dedicated-ips/{IP}/warmup"
            },
            input: {
                type: "structure",
                required: [ "Ip", "WarmupPercentage" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    WarmupPercentage: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDeliverabilityDashboardOption: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscribedDomains: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityConfigurationSetAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/configuration-set"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityDkimAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/dkim"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    SigningEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityDkimSigningAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/dkim/signing"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "SigningAttributesOrigin" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    SigningAttributesOrigin: {},
                    SigningAttributes: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DkimStatus: {},
                    DkimTokens: {
                        shape: "S36"
                    }
                }
            }
        },
        PutEmailIdentityFeedbackAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/feedback"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    EmailForwardingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityMailFromAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/mail-from"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    MailFromDomain: {},
                    BehaviorOnMxFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutSuppressedDestination: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/suppression/addresses"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress", "Reason" ],
                members: {
                    EmailAddress: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendBulkEmail: {
            http: {
                requestUri: "/v2/email/outbound-bulk-emails"
            },
            input: {
                type: "structure",
                required: [ "DefaultContent", "BulkEmailEntries" ],
                members: {
                    FromEmailAddress: {},
                    FromEmailAddressIdentityArn: {},
                    ReplyToAddresses: {
                        shape: "Sc0"
                    },
                    FeedbackForwardingEmailAddress: {},
                    FeedbackForwardingEmailAddressIdentityArn: {},
                    DefaultEmailTags: {
                        shape: "S8h"
                    },
                    DefaultContent: {
                        type: "structure",
                        members: {
                            Template: {
                                shape: "S2r"
                            }
                        }
                    },
                    BulkEmailEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Destination" ],
                            members: {
                                Destination: {
                                    shape: "Sc4"
                                },
                                ReplacementTags: {
                                    shape: "S8h"
                                },
                                ReplacementEmailContent: {
                                    type: "structure",
                                    members: {
                                        ReplacementTemplate: {
                                            type: "structure",
                                            members: {
                                                ReplacementTemplateData: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "BulkEmailEntryResults" ],
                members: {
                    BulkEmailEntryResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Status: {},
                                Error: {},
                                MessageId: {}
                            }
                        }
                    }
                }
            }
        },
        SendCustomVerificationEmail: {
            http: {
                requestUri: "/v2/email/outbound-custom-verification-emails"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress", "TemplateName" ],
                members: {
                    EmailAddress: {},
                    TemplateName: {},
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendEmail: {
            http: {
                requestUri: "/v2/email/outbound-emails"
            },
            input: {
                type: "structure",
                required: [ "Content" ],
                members: {
                    FromEmailAddress: {},
                    FromEmailAddressIdentityArn: {},
                    Destination: {
                        shape: "Sc4"
                    },
                    ReplyToAddresses: {
                        shape: "Sc0"
                    },
                    FeedbackForwardingEmailAddress: {},
                    FeedbackForwardingEmailAddressIdentityArn: {},
                    Content: {
                        shape: "S2j"
                    },
                    EmailTags: {
                        shape: "S8h"
                    },
                    ConfigurationSetName: {},
                    ListManagementOptions: {
                        type: "structure",
                        required: [ "ContactListName" ],
                        members: {
                            ContactListName: {},
                            TopicName: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v2/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestRenderEmailTemplate: {
            http: {
                requestUri: "/v2/email/templates/{TemplateName}/render"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "TemplateData" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    },
                    TemplateData: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RenderedTemplate" ],
                members: {
                    RenderedTemplate: {}
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    },
                    EventDestination: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContact: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    },
                    TopicPreferences: {
                        shape: "S1u"
                    },
                    UnsubscribeAll: {
                        type: "boolean"
                    },
                    AttributesData: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactList: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/contact-lists/{ContactListName}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    Topics: {
                        shape: "S22"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCustomVerificationEmailTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/custom-verification-email-templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "FromEmailAddress", "TemplateSubject", "TemplateContent", "SuccessRedirectionURL", "FailureRedirectionURL" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    },
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEmailIdentityPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "PolicyName", "Policy" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    PolicyName: {
                        location: "uri",
                        locationName: "PolicyName"
                    },
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEmailTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "TemplateContent" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    },
                    TemplateContent: {
                        shape: "S3e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sq: {
            type: "structure",
            required: [ "CustomRedirectDomain" ],
            members: {
                CustomRedirectDomain: {}
            }
        },
        Ss: {
            type: "structure",
            members: {
                TlsPolicy: {},
                SendingPoolName: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                ReputationMetricsEnabled: {
                    type: "boolean"
                },
                LastFreshStart: {
                    type: "timestamp"
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                SendingEnabled: {
                    type: "boolean"
                }
            }
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                SuppressedReasons: {
                    shape: "S14"
                }
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S16: {
            type: "structure",
            members: {
                DashboardOptions: {
                    type: "structure",
                    members: {
                        EngagementMetrics: {}
                    }
                },
                GuardianOptions: {
                    type: "structure",
                    members: {
                        OptimizedSharedDelivery: {}
                    }
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    shape: "S1e"
                },
                KinesisFirehoseDestination: {
                    shape: "S1g"
                },
                CloudWatchDestination: {
                    shape: "S1i"
                },
                SnsDestination: {
                    shape: "S1o"
                },
                PinpointDestination: {
                    shape: "S1p"
                }
            }
        },
        S1e: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "structure",
            required: [ "IamRoleArn", "DeliveryStreamArn" ],
            members: {
                IamRoleArn: {},
                DeliveryStreamArn: {}
            }
        },
        S1i: {
            type: "structure",
            required: [ "DimensionConfigurations" ],
            members: {
                DimensionConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DimensionName", "DimensionValueSource", "DefaultDimensionValue" ],
                        members: {
                            DimensionName: {},
                            DimensionValueSource: {},
                            DefaultDimensionValue: {}
                        }
                    }
                }
            }
        },
        S1o: {
            type: "structure",
            required: [ "TopicArn" ],
            members: {
                TopicArn: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                ApplicationArn: {}
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TopicName", "SubscriptionStatus" ],
                members: {
                    TopicName: {},
                    SubscriptionStatus: {}
                }
            }
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TopicName", "DisplayName", "DefaultSubscriptionStatus" ],
                members: {
                    TopicName: {},
                    DisplayName: {},
                    Description: {},
                    DefaultSubscriptionStatus: {}
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                Simple: {
                    type: "structure",
                    required: [ "Subject", "Body" ],
                    members: {
                        Subject: {
                            shape: "S2l"
                        },
                        Body: {
                            type: "structure",
                            members: {
                                Text: {
                                    shape: "S2l"
                                },
                                Html: {
                                    shape: "S2l"
                                }
                            }
                        }
                    }
                },
                Raw: {
                    type: "structure",
                    required: [ "Data" ],
                    members: {
                        Data: {
                            type: "blob"
                        }
                    }
                },
                Template: {
                    shape: "S2r"
                }
            }
        },
        S2l: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {},
                Charset: {}
            }
        },
        S2r: {
            type: "structure",
            members: {
                TemplateName: {},
                TemplateArn: {},
                TemplateData: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                DomainSigningSelector: {},
                DomainSigningPrivateKey: {
                    type: "string",
                    sensitive: true
                },
                NextSigningKeyLength: {}
            }
        },
        S34: {
            type: "structure",
            members: {
                SigningEnabled: {
                    type: "boolean"
                },
                Status: {},
                Tokens: {
                    shape: "S36"
                },
                SigningAttributesOrigin: {},
                NextSigningKeyLength: {},
                CurrentSigningKeyLength: {},
                LastKeyGenerationTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S36: {
            type: "list",
            member: {}
        },
        S3e: {
            type: "structure",
            members: {
                Subject: {},
                Text: {},
                Html: {}
            }
        },
        S3j: {
            type: "structure",
            members: {
                MetricsDataSource: {
                    type: "structure",
                    required: [ "Dimensions", "Namespace", "Metrics", "StartDate", "EndDate" ],
                    members: {
                        Dimensions: {
                            type: "map",
                            key: {},
                            value: {
                                type: "list",
                                member: {}
                            }
                        },
                        Namespace: {},
                        Metrics: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Name: {},
                                    Aggregation: {}
                                }
                            }
                        },
                        StartDate: {
                            type: "timestamp"
                        },
                        EndDate: {
                            type: "timestamp"
                        }
                    }
                },
                MessageInsightsDataSource: {
                    type: "structure",
                    required: [ "StartDate", "EndDate" ],
                    members: {
                        StartDate: {
                            type: "timestamp"
                        },
                        EndDate: {
                            type: "timestamp"
                        },
                        Include: {
                            shape: "S3r"
                        },
                        Exclude: {
                            shape: "S3r"
                        },
                        MaxResults: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S3r: {
            type: "structure",
            members: {
                FromEmailAddress: {
                    shape: "S3s"
                },
                Destination: {
                    shape: "S3s"
                },
                Subject: {
                    type: "list",
                    member: {
                        shape: "S3v"
                    }
                },
                Isp: {
                    type: "list",
                    member: {}
                },
                LastDeliveryEvent: {
                    type: "list",
                    member: {}
                },
                LastEngagementEvent: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3s: {
            type: "list",
            member: {
                shape: "S3t"
            }
        },
        S3t: {
            type: "string",
            sensitive: true
        },
        S3v: {
            type: "string",
            sensitive: true
        },
        S43: {
            type: "structure",
            required: [ "DataFormat" ],
            members: {
                DataFormat: {},
                S3Url: {}
            }
        },
        S48: {
            type: "structure",
            members: {
                SuppressionListDestination: {
                    type: "structure",
                    required: [ "SuppressionListImportAction" ],
                    members: {
                        SuppressionListImportAction: {}
                    }
                },
                ContactListDestination: {
                    type: "structure",
                    required: [ "ContactListName", "ContactListImportAction" ],
                    members: {
                        ContactListName: {},
                        ContactListImportAction: {}
                    }
                }
            }
        },
        S4d: {
            type: "structure",
            required: [ "S3Url", "DataFormat" ],
            members: {
                S3Url: {},
                DataFormat: {}
            }
        },
        S59: {
            type: "string",
            sensitive: true
        },
        S5b: {
            type: "string",
            sensitive: true
        },
        S5c: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            },
            sensitive: true
        },
        S5h: {
            type: "structure",
            required: [ "VdmEnabled" ],
            members: {
                VdmEnabled: {},
                DashboardAttributes: {
                    type: "structure",
                    members: {
                        EngagementMetrics: {}
                    }
                },
                GuardianAttributes: {
                    type: "structure",
                    members: {
                        OptimizedSharedDelivery: {}
                    }
                }
            }
        },
        S68: {
            type: "structure",
            required: [ "Ip", "WarmupStatus", "WarmupPercentage" ],
            members: {
                Ip: {},
                WarmupStatus: {},
                WarmupPercentage: {
                    type: "integer"
                },
                PoolName: {}
            }
        },
        S6m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Domain: {},
                    SubscriptionStartDate: {
                        type: "timestamp"
                    },
                    InboxPlacementTrackingOption: {
                        type: "structure",
                        members: {
                            Global: {
                                type: "boolean"
                            },
                            TrackedIsps: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S6u: {
            type: "structure",
            members: {
                ReportId: {},
                ReportName: {},
                Subject: {},
                FromEmailAddress: {},
                CreateDate: {
                    type: "timestamp"
                },
                DeliverabilityTestStatus: {}
            }
        },
        S6w: {
            type: "structure",
            members: {
                InboxPercentage: {
                    type: "double"
                },
                SpamPercentage: {
                    type: "double"
                },
                MissingPercentage: {
                    type: "double"
                },
                SpfPercentage: {
                    type: "double"
                },
                DkimPercentage: {
                    type: "double"
                }
            }
        },
        S74: {
            type: "structure",
            members: {
                CampaignId: {},
                ImageUrl: {},
                Subject: {},
                FromAddress: {},
                SendingIps: {
                    type: "list",
                    member: {}
                },
                FirstSeenDateTime: {
                    type: "timestamp"
                },
                LastSeenDateTime: {
                    type: "timestamp"
                },
                InboxCount: {
                    type: "long"
                },
                SpamCount: {
                    type: "long"
                },
                ReadRate: {
                    type: "double"
                },
                DeleteRate: {
                    type: "double"
                },
                ReadDeleteRate: {
                    type: "double"
                },
                ProjectedVolume: {
                    type: "long"
                },
                Esps: {
                    type: "list",
                    member: {}
                }
            }
        },
        S7e: {
            type: "structure",
            members: {
                InboxRawCount: {
                    type: "long"
                },
                SpamRawCount: {
                    type: "long"
                },
                ProjectedInbox: {
                    type: "long"
                },
                ProjectedSpam: {
                    type: "long"
                }
            }
        },
        S7f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IspName: {},
                    InboxRawCount: {
                        type: "long"
                    },
                    SpamRawCount: {
                        type: "long"
                    },
                    InboxPercentage: {
                        type: "double"
                    },
                    SpamPercentage: {
                        type: "double"
                    }
                }
            }
        },
        S7p: {
            type: "map",
            key: {},
            value: {}
        },
        S85: {
            type: "structure",
            members: {
                FailedRecordsS3Url: {},
                ErrorMessage: {}
            }
        },
        S8h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        Sc0: {
            type: "list",
            member: {}
        },
        Sc4: {
            type: "structure",
            members: {
                ToAddresses: {
                    shape: "Sc0"
                },
                CcAddresses: {
                    shape: "Sc0"
                },
                BccAddresses: {
                    shape: "Sc0"
                }
            }
        }
    },
    paginators: {
        GetDedicatedIps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListConfigurationSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListContactLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListContacts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListCustomVerificationEmailTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDedicatedIpPools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDeliverabilityTestReports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDomainDeliverabilityCampaigns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListEmailIdentities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListEmailTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListExportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListRecommendations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListSuppressedDestinations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        }
    }
};

AWS.apiLoader.services["migrationhubconfig"] = {};

AWS.MigrationHubConfig = AWS.Service.defineService("migrationhubconfig", [ "2019-06-30" ]);

AWS.apiLoader.services["migrationhubconfig"]["2019-06-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-30",
        endpointPrefix: "migrationhub-config",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Migration Hub Config",
        serviceId: "MigrationHub Config",
        signatureVersion: "v4",
        signingName: "mgh",
        targetPrefix: "AWSMigrationHubMultiAccountService",
        uid: "migrationhub-config-2019-06-30"
    },
    operations: {
        CreateHomeRegionControl: {
            input: {
                type: "structure",
                required: [ "HomeRegion", "Target" ],
                members: {
                    HomeRegion: {},
                    Target: {
                        shape: "S3"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HomeRegionControl: {
                        shape: "S8"
                    }
                }
            }
        },
        DeleteHomeRegionControl: {
            input: {
                type: "structure",
                required: [ "ControlId" ],
                members: {
                    ControlId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeHomeRegionControls: {
            input: {
                type: "structure",
                members: {
                    ControlId: {},
                    HomeRegion: {},
                    Target: {
                        shape: "S3"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HomeRegionControls: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetHomeRegion: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    HomeRegion: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Id: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                ControlId: {},
                HomeRegion: {},
                Target: {
                    shape: "S3"
                },
                RequestedTime: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeHomeRegionControls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["connectparticipant"] = {};

AWS.ConnectParticipant = AWS.Service.defineService("connectparticipant", [ "2018-09-07" ]);

AWS.apiLoader.services["connectparticipant"]["2018-09-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-07",
        endpointPrefix: "participant.connect",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Connect Participant",
        serviceFullName: "Amazon Connect Participant Service",
        serviceId: "ConnectParticipant",
        signatureVersion: "v4",
        signingName: "execute-api",
        uid: "connectparticipant-2018-09-07"
    },
    operations: {
        CompleteAttachmentUpload: {
            http: {
                requestUri: "/participant/complete-attachment-upload"
            },
            input: {
                type: "structure",
                required: [ "AttachmentIds", "ClientToken", "ConnectionToken" ],
                members: {
                    AttachmentIds: {
                        type: "list",
                        member: {}
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateParticipantConnection: {
            http: {
                requestUri: "/participant/connection"
            },
            input: {
                type: "structure",
                required: [ "ParticipantToken" ],
                members: {
                    Type: {
                        type: "list",
                        member: {}
                    },
                    ParticipantToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    },
                    ConnectParticipant: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Websocket: {
                        type: "structure",
                        members: {
                            Url: {},
                            ConnectionExpiry: {}
                        }
                    },
                    ConnectionCredentials: {
                        type: "structure",
                        members: {
                            ConnectionToken: {},
                            Expiry: {}
                        }
                    }
                }
            }
        },
        DescribeView: {
            http: {
                method: "GET",
                requestUri: "/participant/views/{ViewToken}"
            },
            input: {
                type: "structure",
                required: [ "ViewToken", "ConnectionToken" ],
                members: {
                    ViewToken: {
                        location: "uri",
                        locationName: "ViewToken"
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    View: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Name: {
                                type: "string",
                                sensitive: true
                            },
                            Version: {
                                type: "integer"
                            },
                            Content: {
                                type: "structure",
                                members: {
                                    InputSchema: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    Template: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    Actions: {
                                        type: "list",
                                        member: {
                                            type: "string",
                                            sensitive: true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DisconnectParticipant: {
            http: {
                requestUri: "/participant/disconnect"
            },
            input: {
                type: "structure",
                required: [ "ConnectionToken" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAttachment: {
            http: {
                requestUri: "/participant/attachment"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId", "ConnectionToken" ],
                members: {
                    AttachmentId: {},
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Url: {},
                    UrlExpiry: {}
                }
            }
        },
        GetTranscript: {
            http: {
                requestUri: "/participant/transcript"
            },
            input: {
                type: "structure",
                required: [ "ConnectionToken" ],
                members: {
                    ContactId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ScanDirection: {},
                    SortOrder: {},
                    StartPosition: {
                        type: "structure",
                        members: {
                            Id: {},
                            AbsoluteTime: {},
                            MostRecent: {
                                type: "integer"
                            }
                        }
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InitialContactId: {},
                    Transcript: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AbsoluteTime: {},
                                Content: {},
                                ContentType: {},
                                Id: {},
                                Type: {},
                                ParticipantId: {},
                                DisplayName: {},
                                ParticipantRole: {},
                                Attachments: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ContentType: {},
                                            AttachmentId: {},
                                            AttachmentName: {},
                                            Status: {}
                                        }
                                    }
                                },
                                MessageMetadata: {
                                    type: "structure",
                                    members: {
                                        MessageId: {},
                                        Receipts: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    DeliveredTimestamp: {},
                                                    ReadTimestamp: {},
                                                    RecipientParticipantId: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                RelatedContactId: {},
                                ContactId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        SendEvent: {
            http: {
                requestUri: "/participant/event"
            },
            input: {
                type: "structure",
                required: [ "ContentType", "ConnectionToken" ],
                members: {
                    ContentType: {},
                    Content: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    AbsoluteTime: {}
                }
            }
        },
        SendMessage: {
            http: {
                requestUri: "/participant/message"
            },
            input: {
                type: "structure",
                required: [ "ContentType", "Content", "ConnectionToken" ],
                members: {
                    ContentType: {},
                    Content: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    AbsoluteTime: {}
                }
            }
        },
        StartAttachmentUpload: {
            http: {
                requestUri: "/participant/start-attachment-upload"
            },
            input: {
                type: "structure",
                required: [ "ContentType", "AttachmentSizeInBytes", "AttachmentName", "ClientToken", "ConnectionToken" ],
                members: {
                    ContentType: {},
                    AttachmentSizeInBytes: {
                        type: "long"
                    },
                    AttachmentName: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachmentId: {},
                    UploadMetadata: {
                        type: "structure",
                        members: {
                            Url: {},
                            UrlExpiry: {},
                            HeadersToInclude: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {
        GetTranscript: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["appconfig"] = {};

AWS.AppConfig = AWS.Service.defineService("appconfig", [ "2019-10-09" ]);

AWS.apiLoader.services["appconfig"]["2019-10-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-10-09",
        endpointPrefix: "appconfig",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AppConfig",
        serviceFullName: "Amazon AppConfig",
        serviceId: "AppConfig",
        signatureVersion: "v4",
        signingName: "appconfig",
        uid: "appconfig-2019-10-09"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "S7"
            }
        },
        CreateConfigurationProfile: {
            http: {
                requestUri: "/applications/{ApplicationId}/configurationprofiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "Name", "LocationUri" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    Name: {},
                    Description: {},
                    LocationUri: {},
                    RetrievalRoleArn: {},
                    Validators: {
                        shape: "Sd"
                    },
                    Tags: {
                        shape: "S4"
                    },
                    Type: {},
                    KmsKeyIdentifier: {}
                }
            },
            output: {
                shape: "Sj"
            }
        },
        CreateDeploymentStrategy: {
            http: {
                requestUri: "/deploymentstrategies",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "DeploymentDurationInMinutes", "GrowthFactor" ],
                members: {
                    Name: {},
                    Description: {},
                    DeploymentDurationInMinutes: {
                        type: "integer"
                    },
                    FinalBakeTimeInMinutes: {
                        type: "integer"
                    },
                    GrowthFactor: {
                        type: "float"
                    },
                    GrowthType: {},
                    ReplicateTo: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "Sq"
            }
        },
        CreateEnvironment: {
            http: {
                requestUri: "/applications/{ApplicationId}/environments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "Name" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    Name: {},
                    Description: {},
                    Monitors: {
                        shape: "St"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "Sw"
            }
        },
        CreateExtension: {
            http: {
                requestUri: "/extensions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "Actions" ],
                members: {
                    Name: {},
                    Description: {},
                    Actions: {
                        shape: "S10"
                    },
                    Parameters: {
                        shape: "S14"
                    },
                    Tags: {
                        shape: "S4"
                    },
                    LatestVersionNumber: {
                        location: "header",
                        locationName: "Latest-Version-Number",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S18"
            }
        },
        CreateExtensionAssociation: {
            http: {
                requestUri: "/extensionassociations",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ExtensionIdentifier", "ResourceIdentifier" ],
                members: {
                    ExtensionIdentifier: {},
                    ExtensionVersionNumber: {
                        type: "integer"
                    },
                    ResourceIdentifier: {},
                    Parameters: {
                        shape: "S1b"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "S1c"
            }
        },
        CreateHostedConfigurationVersion: {
            http: {
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "Content", "ContentType" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    Description: {
                        location: "header",
                        locationName: "Description"
                    },
                    Content: {
                        shape: "S1e"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    LatestVersionNumber: {
                        location: "header",
                        locationName: "Latest-Version-Number",
                        type: "integer"
                    },
                    VersionLabel: {
                        location: "header",
                        locationName: "VersionLabel"
                    }
                },
                payload: "Content"
            },
            output: {
                shape: "S1h"
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    }
                }
            }
        },
        DeleteConfigurationProfile: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    }
                }
            }
        },
        DeleteDeploymentStrategy: {
            http: {
                method: "DELETE",
                requestUri: "/deployementstrategies/{DeploymentStrategyId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DeploymentStrategyId" ],
                members: {
                    DeploymentStrategyId: {
                        location: "uri",
                        locationName: "DeploymentStrategyId"
                    }
                }
            }
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    }
                }
            }
        },
        DeleteExtension: {
            http: {
                method: "DELETE",
                requestUri: "/extensions/{ExtensionIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ExtensionIdentifier" ],
                members: {
                    ExtensionIdentifier: {
                        location: "uri",
                        locationName: "ExtensionIdentifier"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version",
                        type: "integer"
                    }
                }
            }
        },
        DeleteExtensionAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/extensionassociations/{ExtensionAssociationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ExtensionAssociationId" ],
                members: {
                    ExtensionAssociationId: {
                        location: "uri",
                        locationName: "ExtensionAssociationId"
                    }
                }
            }
        },
        DeleteHostedConfigurationVersion: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "VersionNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "integer"
                    }
                }
            }
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    }
                }
            },
            output: {
                shape: "S7"
            }
        },
        GetConfiguration: {
            http: {
                method: "GET",
                requestUri: "/applications/{Application}/environments/{Environment}/configurations/{Configuration}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Application", "Environment", "Configuration", "ClientId" ],
                members: {
                    Application: {
                        location: "uri",
                        locationName: "Application"
                    },
                    Environment: {
                        location: "uri",
                        locationName: "Environment"
                    },
                    Configuration: {
                        location: "uri",
                        locationName: "Configuration"
                    },
                    ClientId: {
                        location: "querystring",
                        locationName: "client_id"
                    },
                    ClientConfigurationVersion: {
                        location: "querystring",
                        locationName: "client_configuration_version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Content: {
                        shape: "S1e"
                    },
                    ConfigurationVersion: {
                        location: "header",
                        locationName: "Configuration-Version"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Content"
            },
            deprecated: true,
            deprecatedMessage: "This API has been deprecated in favor of the GetLatestConfiguration API used in conjunction with StartConfigurationSession."
        },
        GetConfigurationProfile: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    }
                }
            },
            output: {
                shape: "Sj"
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId", "DeploymentNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    DeploymentNumber: {
                        location: "uri",
                        locationName: "DeploymentNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S1y"
            }
        },
        GetDeploymentStrategy: {
            http: {
                method: "GET",
                requestUri: "/deploymentstrategies/{DeploymentStrategyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeploymentStrategyId" ],
                members: {
                    DeploymentStrategyId: {
                        location: "uri",
                        locationName: "DeploymentStrategyId"
                    }
                }
            },
            output: {
                shape: "Sq"
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    }
                }
            },
            output: {
                shape: "Sw"
            }
        },
        GetExtension: {
            http: {
                method: "GET",
                requestUri: "/extensions/{ExtensionIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ExtensionIdentifier" ],
                members: {
                    ExtensionIdentifier: {
                        location: "uri",
                        locationName: "ExtensionIdentifier"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version_number",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S18"
            }
        },
        GetExtensionAssociation: {
            http: {
                method: "GET",
                requestUri: "/extensionassociations/{ExtensionAssociationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ExtensionAssociationId" ],
                members: {
                    ExtensionAssociationId: {
                        location: "uri",
                        locationName: "ExtensionAssociationId"
                    }
                }
            },
            output: {
                shape: "S1c"
            }
        },
        GetHostedConfigurationVersion: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "VersionNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S1h"
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConfigurationProfiles: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                Id: {},
                                Name: {},
                                LocationUri: {},
                                ValidatorTypes: {
                                    type: "list",
                                    member: {}
                                },
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDeploymentStrategies: {
            http: {
                method: "GET",
                requestUri: "/deploymentstrategies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeploymentNumber: {
                                    type: "integer"
                                },
                                ConfigurationName: {},
                                ConfigurationVersion: {},
                                DeploymentDurationInMinutes: {
                                    type: "integer"
                                },
                                GrowthType: {},
                                GrowthFactor: {
                                    type: "float"
                                },
                                FinalBakeTimeInMinutes: {
                                    type: "integer"
                                },
                                State: {},
                                PercentageComplete: {
                                    type: "float"
                                },
                                StartedAt: {
                                    shape: "S26"
                                },
                                CompletedAt: {
                                    shape: "S26"
                                },
                                VersionLabel: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            shape: "Sw"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExtensionAssociations: {
            http: {
                method: "GET",
                requestUri: "/extensionassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceIdentifier: {
                        location: "querystring",
                        locationName: "resource_identifier"
                    },
                    ExtensionIdentifier: {
                        location: "querystring",
                        locationName: "extension_identifier"
                    },
                    ExtensionVersionNumber: {
                        location: "querystring",
                        locationName: "extension_version_number",
                        type: "integer"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ExtensionArn: {},
                                ResourceArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExtensions: {
            http: {
                method: "GET",
                requestUri: "/extensions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    },
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                VersionNumber: {
                                    type: "integer"
                                },
                                Arn: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHostedConfigurationVersions: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    },
                    VersionLabel: {
                        location: "querystring",
                        locationName: "version_label"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                ConfigurationProfileId: {},
                                VersionNumber: {
                                    type: "integer"
                                },
                                Description: {},
                                ContentType: {},
                                VersionLabel: {},
                                KmsKeyArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        StartDeployment: {
            http: {
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId", "DeploymentStrategyId", "ConfigurationProfileId", "ConfigurationVersion" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    DeploymentStrategyId: {},
                    ConfigurationProfileId: {},
                    ConfigurationVersion: {},
                    Description: {},
                    Tags: {
                        shape: "S4"
                    },
                    KmsKeyIdentifier: {}
                }
            },
            output: {
                shape: "S1y"
            }
        },
        StopDeployment: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId", "DeploymentNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    DeploymentNumber: {
                        location: "uri",
                        locationName: "DeploymentNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S1y"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{ApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                shape: "S7"
            }
        },
        UpdateConfigurationProfile: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    Name: {},
                    Description: {},
                    RetrievalRoleArn: {},
                    Validators: {
                        shape: "Sd"
                    },
                    KmsKeyIdentifier: {}
                }
            },
            output: {
                shape: "Sj"
            }
        },
        UpdateDeploymentStrategy: {
            http: {
                method: "PATCH",
                requestUri: "/deploymentstrategies/{DeploymentStrategyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeploymentStrategyId" ],
                members: {
                    DeploymentStrategyId: {
                        location: "uri",
                        locationName: "DeploymentStrategyId"
                    },
                    Description: {},
                    DeploymentDurationInMinutes: {
                        type: "integer"
                    },
                    FinalBakeTimeInMinutes: {
                        type: "integer"
                    },
                    GrowthFactor: {
                        type: "float"
                    },
                    GrowthType: {}
                }
            },
            output: {
                shape: "Sq"
            }
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    Name: {},
                    Description: {},
                    Monitors: {
                        shape: "St"
                    }
                }
            },
            output: {
                shape: "Sw"
            }
        },
        UpdateExtension: {
            http: {
                method: "PATCH",
                requestUri: "/extensions/{ExtensionIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ExtensionIdentifier" ],
                members: {
                    ExtensionIdentifier: {
                        location: "uri",
                        locationName: "ExtensionIdentifier"
                    },
                    Description: {},
                    Actions: {
                        shape: "S10"
                    },
                    Parameters: {
                        shape: "S14"
                    },
                    VersionNumber: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S18"
            }
        },
        UpdateExtensionAssociation: {
            http: {
                method: "PATCH",
                requestUri: "/extensionassociations/{ExtensionAssociationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ExtensionAssociationId" ],
                members: {
                    ExtensionAssociationId: {
                        location: "uri",
                        locationName: "ExtensionAssociationId"
                    },
                    Parameters: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                shape: "S1c"
            }
        },
        ValidateConfiguration: {
            http: {
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/validators",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "ConfigurationVersion" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    ConfigurationVersion: {
                        location: "querystring",
                        locationName: "configuration_version"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        S7: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {}
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "Content" ],
                members: {
                    Type: {},
                    Content: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                ApplicationId: {},
                Id: {},
                Name: {},
                Description: {},
                LocationUri: {},
                RetrievalRoleArn: {},
                Validators: {
                    shape: "Sd"
                },
                Type: {},
                KmsKeyArn: {},
                KmsKeyIdentifier: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {},
                DeploymentDurationInMinutes: {
                    type: "integer"
                },
                GrowthType: {},
                GrowthFactor: {
                    type: "float"
                },
                FinalBakeTimeInMinutes: {
                    type: "integer"
                },
                ReplicateTo: {}
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AlarmArn" ],
                members: {
                    AlarmArn: {},
                    AlarmRoleArn: {}
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                ApplicationId: {},
                Id: {},
                Name: {},
                Description: {},
                State: {},
                Monitors: {
                    shape: "St"
                }
            }
        },
        S10: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {
                    type: "structure",
                    members: {
                        Name: {},
                        Description: {},
                        Uri: {},
                        RoleArn: {}
                    }
                }
            }
        },
        S14: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Description: {},
                    Required: {
                        type: "boolean"
                    }
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                VersionNumber: {
                    type: "integer"
                },
                Arn: {},
                Description: {},
                Actions: {
                    shape: "S10"
                },
                Parameters: {
                    shape: "S14"
                }
            }
        },
        S1b: {
            type: "map",
            key: {},
            value: {}
        },
        S1c: {
            type: "structure",
            members: {
                Id: {},
                ExtensionArn: {},
                ResourceArn: {},
                Arn: {},
                Parameters: {
                    shape: "S1b"
                },
                ExtensionVersionNumber: {
                    type: "integer"
                }
            }
        },
        S1e: {
            type: "blob",
            sensitive: true
        },
        S1h: {
            type: "structure",
            members: {
                ApplicationId: {
                    location: "header",
                    locationName: "Application-Id"
                },
                ConfigurationProfileId: {
                    location: "header",
                    locationName: "Configuration-Profile-Id"
                },
                VersionNumber: {
                    location: "header",
                    locationName: "Version-Number",
                    type: "integer"
                },
                Description: {
                    location: "header",
                    locationName: "Description"
                },
                Content: {
                    shape: "S1e"
                },
                ContentType: {
                    location: "header",
                    locationName: "Content-Type"
                },
                VersionLabel: {
                    location: "header",
                    locationName: "VersionLabel"
                },
                KmsKeyArn: {
                    location: "header",
                    locationName: "KmsKeyArn"
                }
            },
            payload: "Content"
        },
        S1y: {
            type: "structure",
            members: {
                ApplicationId: {},
                EnvironmentId: {},
                DeploymentStrategyId: {},
                ConfigurationProfileId: {},
                DeploymentNumber: {
                    type: "integer"
                },
                ConfigurationName: {},
                ConfigurationLocationUri: {},
                ConfigurationVersion: {},
                Description: {},
                DeploymentDurationInMinutes: {
                    type: "integer"
                },
                GrowthType: {},
                GrowthFactor: {
                    type: "float"
                },
                FinalBakeTimeInMinutes: {
                    type: "integer"
                },
                State: {},
                EventLog: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EventType: {},
                            TriggeredBy: {},
                            Description: {},
                            ActionInvocations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ExtensionIdentifier: {},
                                        ActionName: {},
                                        Uri: {},
                                        RoleArn: {},
                                        ErrorMessage: {},
                                        ErrorCode: {},
                                        InvocationId: {}
                                    }
                                }
                            },
                            OccurredAt: {
                                shape: "S26"
                            }
                        }
                    }
                },
                PercentageComplete: {
                    type: "float"
                },
                StartedAt: {
                    shape: "S26"
                },
                CompletedAt: {
                    shape: "S26"
                },
                AppliedExtensions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ExtensionId: {},
                            ExtensionAssociationId: {},
                            VersionNumber: {
                                type: "integer"
                            },
                            Parameters: {
                                shape: "S1b"
                            }
                        }
                    }
                },
                KmsKeyArn: {},
                KmsKeyIdentifier: {},
                VersionLabel: {}
            }
        },
        S26: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListConfigurationProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListDeploymentStrategies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListDeployments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListEnvironments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListExtensionAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListExtensions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListHostedConfigurationVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["iotsecuretunneling"] = {};

AWS.IoTSecureTunneling = AWS.Service.defineService("iotsecuretunneling", [ "2018-10-05" ]);

AWS.apiLoader.services["iotsecuretunneling"]["2018-10-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-05",
        endpointPrefix: "api.tunneling.iot",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS IoT Secure Tunneling",
        serviceId: "IoTSecureTunneling",
        signatureVersion: "v4",
        signingName: "IoTSecuredTunneling",
        targetPrefix: "IoTSecuredTunneling",
        uid: "iotsecuretunneling-2018-10-05"
    },
    operations: {
        CloseTunnel: {
            input: {
                type: "structure",
                required: [ "tunnelId" ],
                members: {
                    tunnelId: {},
                    delete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeTunnel: {
            input: {
                type: "structure",
                required: [ "tunnelId" ],
                members: {
                    tunnelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tunnel: {
                        type: "structure",
                        members: {
                            tunnelId: {},
                            tunnelArn: {},
                            status: {},
                            sourceConnectionState: {
                                shape: "Sa"
                            },
                            destinationConnectionState: {
                                shape: "Sa"
                            },
                            description: {},
                            destinationConfig: {
                                shape: "Se"
                            },
                            timeoutConfig: {
                                shape: "Si"
                            },
                            tags: {
                                shape: "Sk"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            lastUpdatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        ListTunnels: {
            input: {
                type: "structure",
                members: {
                    thingName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tunnelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tunnelId: {},
                                tunnelArn: {},
                                status: {},
                                description: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        OpenTunnel: {
            input: {
                type: "structure",
                members: {
                    description: {},
                    tags: {
                        shape: "Sk"
                    },
                    destinationConfig: {
                        shape: "Se"
                    },
                    timeoutConfig: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tunnelId: {},
                    tunnelArn: {},
                    sourceAccessToken: {
                        shape: "Sz"
                    },
                    destinationAccessToken: {
                        shape: "Sz"
                    }
                }
            }
        },
        RotateTunnelAccessToken: {
            input: {
                type: "structure",
                required: [ "tunnelId", "clientMode" ],
                members: {
                    tunnelId: {},
                    clientMode: {},
                    destinationConfig: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tunnelArn: {},
                    sourceAccessToken: {
                        shape: "Sz"
                    },
                    destinationAccessToken: {
                        shape: "Sz"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                status: {},
                lastUpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "services" ],
            members: {
                thingName: {},
                services: {
                    type: "list",
                    member: {}
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                maxLifetimeTimeoutMinutes: {
                    type: "integer"
                }
            }
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sz: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListTunnels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["wafv2"] = {};

AWS.WAFV2 = AWS.Service.defineService("wafv2", [ "2019-07-29" ]);

AWS.apiLoader.services["wafv2"]["2019-07-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-29",
        endpointPrefix: "wafv2",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "WAFV2",
        serviceFullName: "AWS WAFV2",
        serviceId: "WAFV2",
        signatureVersion: "v4",
        targetPrefix: "AWSWAF_20190729",
        uid: "wafv2-2019-07-29"
    },
    operations: {
        AssociateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLArn", "ResourceArn" ],
                members: {
                    WebACLArn: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CheckCapacity: {
            input: {
                type: "structure",
                required: [ "Scope", "Rules" ],
                members: {
                    Scope: {},
                    Rules: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Capacity: {
                        type: "long"
                    }
                }
            }
        },
        CreateAPIKey: {
            input: {
                type: "structure",
                required: [ "Scope", "TokenDomains" ],
                members: {
                    Scope: {},
                    TokenDomains: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    APIKey: {}
                }
            }
        },
        CreateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "IPAddressVersion", "Addresses" ],
                members: {
                    Name: {},
                    Scope: {},
                    Description: {},
                    IPAddressVersion: {},
                    Addresses: {
                        shape: "S4n"
                    },
                    Tags: {
                        shape: "S4p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S4u"
                    }
                }
            }
        },
        CreateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "RegularExpressionList" ],
                members: {
                    Name: {},
                    Scope: {},
                    Description: {},
                    RegularExpressionList: {
                        shape: "S4y"
                    },
                    Tags: {
                        shape: "S4p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S51"
                    }
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Capacity", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Scope: {},
                    Capacity: {
                        type: "long"
                    },
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S47"
                    },
                    Tags: {
                        shape: "S4p"
                    },
                    CustomResponseBodies: {
                        shape: "S54"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S59"
                    }
                }
            }
        },
        CreateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "DefaultAction", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Scope: {},
                    DefaultAction: {
                        shape: "S5b"
                    },
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S47"
                    },
                    Tags: {
                        shape: "S4p"
                    },
                    CustomResponseBodies: {
                        shape: "S54"
                    },
                    CaptchaConfig: {
                        shape: "S49"
                    },
                    ChallengeConfig: {
                        shape: "S4c"
                    },
                    TokenDomains: {
                        shape: "S5c"
                    },
                    AssociationConfig: {
                        shape: "S5d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S5j"
                    }
                }
            }
        },
        DeleteFirewallManagerRuleGroups: {
            input: {
                type: "structure",
                required: [ "WebACLArn", "WebACLLockToken" ],
                members: {
                    WebACLArn: {},
                    WebACLLockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextWebACLLockToken: {}
                }
            }
        },
        DeleteIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAllManagedProducts: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedProducts: {
                        shape: "S60"
                    }
                }
            }
        },
        DescribeManagedProductsByVendor: {
            input: {
                type: "structure",
                required: [ "VendorName", "Scope" ],
                members: {
                    VendorName: {},
                    Scope: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedProducts: {
                        shape: "S60"
                    }
                }
            }
        },
        DescribeManagedRuleGroup: {
            input: {
                type: "structure",
                required: [ "VendorName", "Name", "Scope" ],
                members: {
                    VendorName: {},
                    Name: {},
                    Scope: {},
                    VersionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VersionName: {},
                    SnsTopicArn: {},
                    Capacity: {
                        type: "long"
                    },
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Action: {
                                    shape: "S1q"
                                }
                            }
                        }
                    },
                    LabelNamespace: {},
                    AvailableLabels: {
                        shape: "S6c"
                    },
                    ConsumedLabels: {
                        shape: "S6c"
                    }
                }
            }
        },
        DisassociateWebACL: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GenerateMobileSdkReleaseUrl: {
            input: {
                type: "structure",
                required: [ "Platform", "ReleaseVersion" ],
                members: {
                    Platform: {},
                    ReleaseVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Url: {}
                }
            }
        },
        GetDecryptedAPIKey: {
            input: {
                type: "structure",
                required: [ "Scope", "APIKey" ],
                members: {
                    Scope: {},
                    APIKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TokenDomains: {
                        shape: "S5c"
                    },
                    CreationTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        type: "structure",
                        required: [ "Name", "Id", "ARN", "IPAddressVersion", "Addresses" ],
                        members: {
                            Name: {},
                            Id: {},
                            ARN: {},
                            Description: {},
                            IPAddressVersion: {},
                            Addresses: {
                                shape: "S4n"
                            }
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S6s"
                    }
                }
            }
        },
        GetManagedRuleSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedRuleSet: {
                        type: "structure",
                        required: [ "Name", "Id", "ARN" ],
                        members: {
                            Name: {},
                            Id: {},
                            ARN: {},
                            Description: {},
                            PublishedVersions: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        AssociatedRuleGroupArn: {},
                                        Capacity: {
                                            type: "long"
                                        },
                                        ForecastedLifetime: {
                                            type: "integer"
                                        },
                                        PublishTimestamp: {
                                            type: "timestamp"
                                        },
                                        LastUpdateTimestamp: {
                                            type: "timestamp"
                                        },
                                        ExpiryTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            },
                            RecommendedVersion: {},
                            LabelNamespace: {}
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetMobileSdkRelease: {
            input: {
                type: "structure",
                required: [ "Platform", "ReleaseVersion" ],
                members: {
                    Platform: {},
                    ReleaseVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MobileSdkRelease: {
                        type: "structure",
                        members: {
                            ReleaseVersion: {},
                            Timestamp: {
                                type: "timestamp"
                            },
                            ReleaseNotes: {},
                            Tags: {
                                shape: "S4p"
                            }
                        }
                    }
                }
            }
        },
        GetPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRateBasedStatementManagedKeys: {
            input: {
                type: "structure",
                required: [ "Scope", "WebACLName", "WebACLId", "RuleName" ],
                members: {
                    Scope: {},
                    WebACLName: {},
                    WebACLId: {},
                    RuleGroupRuleName: {},
                    RuleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedKeysIPV4: {
                        shape: "S7k"
                    },
                    ManagedKeysIPV6: {
                        shape: "S7k"
                    }
                }
            }
        },
        GetRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        type: "structure",
                        members: {
                            Name: {},
                            Id: {},
                            ARN: {},
                            Description: {},
                            RegularExpressionList: {
                                shape: "S4y"
                            }
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetRuleGroup: {
            input: {
                type: "structure",
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    ARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        type: "structure",
                        required: [ "Name", "Id", "Capacity", "ARN", "VisibilityConfig" ],
                        members: {
                            Name: {},
                            Id: {},
                            Capacity: {
                                type: "long"
                            },
                            ARN: {},
                            Description: {},
                            Rules: {
                                shape: "S6"
                            },
                            VisibilityConfig: {
                                shape: "S47"
                            },
                            LabelNamespace: {},
                            CustomResponseBodies: {
                                shape: "S54"
                            },
                            AvailableLabels: {
                                shape: "S6c"
                            },
                            ConsumedLabels: {
                                shape: "S6c"
                            }
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetSampledRequests: {
            input: {
                type: "structure",
                required: [ "WebAclArn", "RuleMetricName", "Scope", "TimeWindow", "MaxItems" ],
                members: {
                    WebAclArn: {},
                    RuleMetricName: {},
                    Scope: {},
                    TimeWindow: {
                        shape: "S7s"
                    },
                    MaxItems: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SampledRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Request", "Weight" ],
                            members: {
                                Request: {
                                    type: "structure",
                                    members: {
                                        ClientIP: {},
                                        Country: {},
                                        URI: {},
                                        Method: {},
                                        HTTPVersion: {},
                                        Headers: {
                                            shape: "S83"
                                        }
                                    }
                                },
                                Weight: {
                                    type: "long"
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Action: {},
                                RuleNameWithinRuleGroup: {},
                                RequestHeadersInserted: {
                                    shape: "S83"
                                },
                                ResponseCodeSent: {
                                    type: "integer"
                                },
                                Labels: {
                                    shape: "S44"
                                },
                                CaptchaResponse: {
                                    type: "structure",
                                    members: {
                                        ResponseCode: {
                                            type: "integer"
                                        },
                                        SolveTimestamp: {
                                            type: "long"
                                        },
                                        FailureReason: {}
                                    }
                                },
                                ChallengeResponse: {
                                    type: "structure",
                                    members: {
                                        ResponseCode: {
                                            type: "integer"
                                        },
                                        SolveTimestamp: {
                                            type: "long"
                                        },
                                        FailureReason: {}
                                    }
                                },
                                OverriddenAction: {}
                            }
                        }
                    },
                    PopulationSize: {
                        type: "long"
                    },
                    TimeWindow: {
                        shape: "S7s"
                    }
                }
            }
        },
        GetWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S8h"
                    },
                    LockToken: {},
                    ApplicationIntegrationURL: {}
                }
            }
        },
        GetWebACLForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S8h"
                    }
                }
            }
        },
        ListAPIKeys: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    APIKeySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TokenDomains: {
                                    shape: "S5c"
                                },
                                APIKey: {},
                                CreationTimestamp: {
                                    type: "timestamp"
                                },
                                Version: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    ApplicationIntegrationURL: {}
                }
            }
        },
        ListAvailableManagedRuleGroupVersions: {
            input: {
                type: "structure",
                required: [ "VendorName", "Name", "Scope" ],
                members: {
                    VendorName: {},
                    Name: {},
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                LastUpdateTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    CurrentDefaultVersion: {}
                }
            }
        },
        ListAvailableManagedRuleGroups: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ManagedRuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VendorName: {},
                                Name: {},
                                VersioningSupported: {
                                    type: "boolean"
                                },
                                Description: {}
                            }
                        }
                    }
                }
            }
        },
        ListIPSets: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    IPSets: {
                        type: "list",
                        member: {
                            shape: "S4u"
                        }
                    }
                }
            }
        },
        ListLoggingConfigurations: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfigurations: {
                        type: "list",
                        member: {
                            shape: "S6s"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListManagedRuleSets: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ManagedRuleSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Id: {},
                                Description: {},
                                LockToken: {},
                                ARN: {},
                                LabelNamespace: {}
                            }
                        }
                    }
                }
            }
        },
        ListMobileSdkReleases: {
            input: {
                type: "structure",
                required: [ "Platform" ],
                members: {
                    Platform: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReleaseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReleaseVersion: {},
                                Timestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListRegexPatternSets: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexPatternSets: {
                        type: "list",
                        member: {
                            shape: "S51"
                        }
                    }
                }
            }
        },
        ListResourcesForWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLArn" ],
                members: {
                    WebACLArn: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            shape: "S59"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    },
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    TagInfoForResource: {
                        type: "structure",
                        members: {
                            ResourceARN: {},
                            TagList: {
                                shape: "S4p"
                            }
                        }
                    }
                }
            }
        },
        ListWebACLs: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    WebACLs: {
                        type: "list",
                        member: {
                            shape: "S5j"
                        }
                    }
                }
            }
        },
        PutLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "LoggingConfiguration" ],
                members: {
                    LoggingConfiguration: {
                        shape: "S6s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S6s"
                    }
                }
            }
        },
        PutManagedRuleSetVersions: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {},
                    RecommendedVersion: {},
                    VersionsToPublish: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                AssociatedRuleGroupArn: {},
                                ForecastedLifetime: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        PutPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S4p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "Addresses", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    Description: {},
                    Addresses: {
                        shape: "S4n"
                    },
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        UpdateManagedRuleSetVersionExpiryDate: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken", "VersionToExpire", "ExpiryTimestamp" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {},
                    VersionToExpire: {},
                    ExpiryTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExpiringVersion: {},
                    ExpiryTimestamp: {
                        type: "timestamp"
                    },
                    NextLockToken: {}
                }
            }
        },
        UpdateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "RegularExpressionList", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    Description: {},
                    RegularExpressionList: {
                        shape: "S4y"
                    },
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "VisibilityConfig", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S47"
                    },
                    LockToken: {},
                    CustomResponseBodies: {
                        shape: "S54"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        UpdateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "DefaultAction", "VisibilityConfig", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    DefaultAction: {
                        shape: "S5b"
                    },
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S47"
                    },
                    LockToken: {},
                    CustomResponseBodies: {
                        shape: "S54"
                    },
                    CaptchaConfig: {
                        shape: "S49"
                    },
                    ChallengeConfig: {
                        shape: "S4c"
                    },
                    TokenDomains: {
                        shape: "S5c"
                    },
                    AssociationConfig: {
                        shape: "S5d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Priority", "Statement", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Priority: {
                        type: "integer"
                    },
                    Statement: {
                        shape: "Sa"
                    },
                    Action: {
                        shape: "S1q"
                    },
                    OverrideAction: {
                        shape: "S42"
                    },
                    RuleLabels: {
                        shape: "S44"
                    },
                    VisibilityConfig: {
                        shape: "S47"
                    },
                    CaptchaConfig: {
                        shape: "S49"
                    },
                    ChallengeConfig: {
                        shape: "S4c"
                    }
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                ByteMatchStatement: {
                    type: "structure",
                    required: [ "SearchString", "FieldToMatch", "TextTransformations", "PositionalConstraint" ],
                    members: {
                        SearchString: {
                            type: "blob"
                        },
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "S15"
                        },
                        PositionalConstraint: {}
                    }
                },
                SqliMatchStatement: {
                    type: "structure",
                    required: [ "FieldToMatch", "TextTransformations" ],
                    members: {
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "S15"
                        },
                        SensitivityLevel: {}
                    }
                },
                XssMatchStatement: {
                    type: "structure",
                    required: [ "FieldToMatch", "TextTransformations" ],
                    members: {
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "S15"
                        }
                    }
                },
                SizeConstraintStatement: {
                    type: "structure",
                    required: [ "FieldToMatch", "ComparisonOperator", "Size", "TextTransformations" ],
                    members: {
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        ComparisonOperator: {},
                        Size: {
                            type: "long"
                        },
                        TextTransformations: {
                            shape: "S15"
                        }
                    }
                },
                GeoMatchStatement: {
                    type: "structure",
                    members: {
                        CountryCodes: {
                            type: "list",
                            member: {}
                        },
                        ForwardedIPConfig: {
                            shape: "S1j"
                        }
                    }
                },
                RuleGroupReferenceStatement: {
                    shape: "S1l"
                },
                IPSetReferenceStatement: {
                    type: "structure",
                    required: [ "ARN" ],
                    members: {
                        ARN: {},
                        IPSetForwardedIPConfig: {
                            type: "structure",
                            required: [ "HeaderName", "FallbackBehavior", "Position" ],
                            members: {
                                HeaderName: {},
                                FallbackBehavior: {},
                                Position: {}
                            }
                        }
                    }
                },
                RegexPatternSetReferenceStatement: {
                    type: "structure",
                    required: [ "ARN", "FieldToMatch", "TextTransformations" ],
                    members: {
                        ARN: {},
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "S15"
                        }
                    }
                },
                RateBasedStatement: {
                    type: "structure",
                    required: [ "Limit", "AggregateKeyType" ],
                    members: {
                        Limit: {
                            type: "long"
                        },
                        AggregateKeyType: {},
                        ScopeDownStatement: {
                            shape: "Sa"
                        },
                        ForwardedIPConfig: {
                            shape: "S1j"
                        },
                        CustomKeys: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Header: {
                                        type: "structure",
                                        required: [ "Name", "TextTransformations" ],
                                        members: {
                                            Name: {},
                                            TextTransformations: {
                                                shape: "S15"
                                            }
                                        }
                                    },
                                    Cookie: {
                                        type: "structure",
                                        required: [ "Name", "TextTransformations" ],
                                        members: {
                                            Name: {},
                                            TextTransformations: {
                                                shape: "S15"
                                            }
                                        }
                                    },
                                    QueryArgument: {
                                        type: "structure",
                                        required: [ "Name", "TextTransformations" ],
                                        members: {
                                            Name: {},
                                            TextTransformations: {
                                                shape: "S15"
                                            }
                                        }
                                    },
                                    QueryString: {
                                        type: "structure",
                                        required: [ "TextTransformations" ],
                                        members: {
                                            TextTransformations: {
                                                shape: "S15"
                                            }
                                        }
                                    },
                                    HTTPMethod: {
                                        type: "structure",
                                        members: {}
                                    },
                                    ForwardedIP: {
                                        type: "structure",
                                        members: {}
                                    },
                                    IP: {
                                        type: "structure",
                                        members: {}
                                    },
                                    LabelNamespace: {
                                        type: "structure",
                                        required: [ "Namespace" ],
                                        members: {
                                            Namespace: {}
                                        }
                                    },
                                    UriPath: {
                                        type: "structure",
                                        required: [ "TextTransformations" ],
                                        members: {
                                            TextTransformations: {
                                                shape: "S15"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                AndStatement: {
                    type: "structure",
                    required: [ "Statements" ],
                    members: {
                        Statements: {
                            shape: "S2n"
                        }
                    }
                },
                OrStatement: {
                    type: "structure",
                    required: [ "Statements" ],
                    members: {
                        Statements: {
                            shape: "S2n"
                        }
                    }
                },
                NotStatement: {
                    type: "structure",
                    required: [ "Statement" ],
                    members: {
                        Statement: {
                            shape: "Sa"
                        }
                    }
                },
                ManagedRuleGroupStatement: {
                    shape: "S2q"
                },
                LabelMatchStatement: {
                    type: "structure",
                    required: [ "Scope", "Key" ],
                    members: {
                        Scope: {},
                        Key: {}
                    }
                },
                RegexMatchStatement: {
                    type: "structure",
                    required: [ "RegexString", "FieldToMatch", "TextTransformations" ],
                    members: {
                        RegexString: {},
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "S15"
                        }
                    }
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                SingleHeader: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {}
                    }
                },
                SingleQueryArgument: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {}
                    }
                },
                AllQueryArguments: {
                    type: "structure",
                    members: {}
                },
                UriPath: {
                    type: "structure",
                    members: {}
                },
                QueryString: {
                    type: "structure",
                    members: {}
                },
                Body: {
                    type: "structure",
                    members: {
                        OversizeHandling: {}
                    }
                },
                Method: {
                    type: "structure",
                    members: {}
                },
                JsonBody: {
                    type: "structure",
                    required: [ "MatchPattern", "MatchScope" ],
                    members: {
                        MatchPattern: {
                            type: "structure",
                            members: {
                                All: {
                                    shape: "Sp"
                                },
                                IncludedPaths: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        MatchScope: {},
                        InvalidFallbackBehavior: {},
                        OversizeHandling: {}
                    }
                },
                Headers: {
                    type: "structure",
                    required: [ "MatchPattern", "MatchScope", "OversizeHandling" ],
                    members: {
                        MatchPattern: {
                            type: "structure",
                            members: {
                                All: {
                                    shape: "Sp"
                                },
                                IncludedHeaders: {
                                    shape: "Sw"
                                },
                                ExcludedHeaders: {
                                    shape: "Sw"
                                }
                            }
                        },
                        MatchScope: {},
                        OversizeHandling: {}
                    }
                },
                Cookies: {
                    type: "structure",
                    required: [ "MatchPattern", "MatchScope", "OversizeHandling" ],
                    members: {
                        MatchPattern: {
                            type: "structure",
                            members: {
                                All: {
                                    shape: "Sp"
                                },
                                IncludedCookies: {
                                    shape: "S10"
                                },
                                ExcludedCookies: {
                                    shape: "S10"
                                }
                            }
                        },
                        MatchScope: {},
                        OversizeHandling: {}
                    }
                },
                HeaderOrder: {
                    type: "structure",
                    required: [ "OversizeHandling" ],
                    members: {
                        OversizeHandling: {}
                    }
                },
                JA3Fingerprint: {
                    type: "structure",
                    required: [ "FallbackBehavior" ],
                    members: {
                        FallbackBehavior: {}
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            members: {}
        },
        Sw: {
            type: "list",
            member: {}
        },
        S10: {
            type: "list",
            member: {}
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Priority", "Type" ],
                members: {
                    Priority: {
                        type: "integer"
                    },
                    Type: {}
                }
            }
        },
        S1j: {
            type: "structure",
            required: [ "HeaderName", "FallbackBehavior" ],
            members: {
                HeaderName: {},
                FallbackBehavior: {}
            }
        },
        S1l: {
            type: "structure",
            required: [ "ARN" ],
            members: {
                ARN: {},
                ExcludedRules: {
                    shape: "S1m"
                },
                RuleActionOverrides: {
                    shape: "S1o"
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        S1o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "ActionToUse" ],
                members: {
                    Name: {},
                    ActionToUse: {
                        shape: "S1q"
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                Block: {
                    shape: "S1r"
                },
                Allow: {
                    shape: "S1y"
                },
                Count: {
                    shape: "S20"
                },
                Captcha: {
                    type: "structure",
                    members: {
                        CustomRequestHandling: {
                            shape: "S1z"
                        }
                    }
                },
                Challenge: {
                    type: "structure",
                    members: {
                        CustomRequestHandling: {
                            shape: "S1z"
                        }
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            members: {
                CustomResponse: {
                    type: "structure",
                    required: [ "ResponseCode" ],
                    members: {
                        ResponseCode: {
                            type: "integer"
                        },
                        CustomResponseBodyKey: {},
                        ResponseHeaders: {
                            shape: "S1u"
                        }
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                CustomRequestHandling: {
                    shape: "S1z"
                }
            }
        },
        S1z: {
            type: "structure",
            required: [ "InsertHeaders" ],
            members: {
                InsertHeaders: {
                    shape: "S1u"
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                CustomRequestHandling: {
                    shape: "S1z"
                }
            }
        },
        S2n: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        S2q: {
            type: "structure",
            required: [ "VendorName", "Name" ],
            members: {
                VendorName: {},
                Name: {},
                Version: {},
                ExcludedRules: {
                    shape: "S1m"
                },
                ScopeDownStatement: {
                    shape: "Sa"
                },
                ManagedRuleGroupConfigs: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            LoginPath: {
                                deprecated: true,
                                deprecatedMessage: "Deprecated. Use AWSManagedRulesATPRuleSet LoginPath"
                            },
                            PayloadType: {
                                deprecated: true,
                                deprecatedMessage: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PayloadType"
                            },
                            UsernameField: {
                                shape: "S2x",
                                deprecated: true,
                                deprecatedMessage: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection UsernameField"
                            },
                            PasswordField: {
                                shape: "S2z",
                                deprecated: true,
                                deprecatedMessage: "Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PasswordField"
                            },
                            AWSManagedRulesBotControlRuleSet: {
                                type: "structure",
                                required: [ "InspectionLevel" ],
                                members: {
                                    InspectionLevel: {},
                                    EnableMachineLearning: {
                                        type: "boolean"
                                    }
                                }
                            },
                            AWSManagedRulesATPRuleSet: {
                                type: "structure",
                                required: [ "LoginPath" ],
                                members: {
                                    LoginPath: {},
                                    RequestInspection: {
                                        type: "structure",
                                        required: [ "PayloadType", "UsernameField", "PasswordField" ],
                                        members: {
                                            PayloadType: {},
                                            UsernameField: {
                                                shape: "S2x"
                                            },
                                            PasswordField: {
                                                shape: "S2z"
                                            }
                                        }
                                    },
                                    ResponseInspection: {
                                        shape: "S36"
                                    },
                                    EnableRegexInPath: {
                                        type: "boolean"
                                    }
                                }
                            },
                            AWSManagedRulesACFPRuleSet: {
                                type: "structure",
                                required: [ "CreationPath", "RegistrationPagePath", "RequestInspection" ],
                                members: {
                                    CreationPath: {},
                                    RegistrationPagePath: {},
                                    RequestInspection: {
                                        type: "structure",
                                        required: [ "PayloadType" ],
                                        members: {
                                            PayloadType: {},
                                            UsernameField: {
                                                shape: "S2x"
                                            },
                                            PasswordField: {
                                                shape: "S2z"
                                            },
                                            EmailField: {
                                                type: "structure",
                                                required: [ "Identifier" ],
                                                members: {
                                                    Identifier: {}
                                                }
                                            },
                                            PhoneNumberFields: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "Identifier" ],
                                                    members: {
                                                        Identifier: {}
                                                    }
                                                }
                                            },
                                            AddressFields: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "Identifier" ],
                                                    members: {
                                                        Identifier: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    ResponseInspection: {
                                        shape: "S36"
                                    },
                                    EnableRegexInPath: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                RuleActionOverrides: {
                    shape: "S1o"
                }
            }
        },
        S2x: {
            type: "structure",
            required: [ "Identifier" ],
            members: {
                Identifier: {}
            }
        },
        S2z: {
            type: "structure",
            required: [ "Identifier" ],
            members: {
                Identifier: {}
            }
        },
        S36: {
            type: "structure",
            members: {
                StatusCode: {
                    type: "structure",
                    required: [ "SuccessCodes", "FailureCodes" ],
                    members: {
                        SuccessCodes: {
                            type: "list",
                            member: {
                                type: "integer"
                            }
                        },
                        FailureCodes: {
                            type: "list",
                            member: {
                                type: "integer"
                            }
                        }
                    }
                },
                Header: {
                    type: "structure",
                    required: [ "Name", "SuccessValues", "FailureValues" ],
                    members: {
                        Name: {},
                        SuccessValues: {
                            type: "list",
                            member: {}
                        },
                        FailureValues: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                BodyContains: {
                    type: "structure",
                    required: [ "SuccessStrings", "FailureStrings" ],
                    members: {
                        SuccessStrings: {
                            type: "list",
                            member: {}
                        },
                        FailureStrings: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                Json: {
                    type: "structure",
                    required: [ "Identifier", "SuccessValues", "FailureValues" ],
                    members: {
                        Identifier: {},
                        SuccessValues: {
                            type: "list",
                            member: {}
                        },
                        FailureValues: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S42: {
            type: "structure",
            members: {
                Count: {
                    shape: "S20"
                },
                None: {
                    type: "structure",
                    members: {}
                }
            }
        },
        S44: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        S47: {
            type: "structure",
            required: [ "SampledRequestsEnabled", "CloudWatchMetricsEnabled", "MetricName" ],
            members: {
                SampledRequestsEnabled: {
                    type: "boolean"
                },
                CloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                MetricName: {}
            }
        },
        S49: {
            type: "structure",
            members: {
                ImmunityTimeProperty: {
                    shape: "S4a"
                }
            }
        },
        S4a: {
            type: "structure",
            required: [ "ImmunityTime" ],
            members: {
                ImmunityTime: {
                    type: "long"
                }
            }
        },
        S4c: {
            type: "structure",
            members: {
                ImmunityTimeProperty: {
                    shape: "S4a"
                }
            }
        },
        S4n: {
            type: "list",
            member: {}
        },
        S4p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S4u: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S4y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RegexString: {}
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S54: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "ContentType", "Content" ],
                members: {
                    ContentType: {},
                    Content: {}
                }
            }
        },
        S59: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S5b: {
            type: "structure",
            members: {
                Block: {
                    shape: "S1r"
                },
                Allow: {
                    shape: "S1y"
                }
            }
        },
        S5c: {
            type: "list",
            member: {}
        },
        S5d: {
            type: "structure",
            members: {
                RequestBody: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "DefaultSizeInspectionLimit" ],
                        members: {
                            DefaultSizeInspectionLimit: {}
                        }
                    }
                }
            }
        },
        S5j: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S60: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VendorName: {},
                    ManagedRuleSetName: {},
                    ProductId: {},
                    ProductLink: {},
                    ProductTitle: {},
                    ProductDescription: {},
                    SnsTopicArn: {},
                    IsVersioningSupported: {
                        type: "boolean"
                    },
                    IsAdvancedManagedRuleSet: {
                        type: "boolean"
                    }
                }
            }
        },
        S6c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        S6s: {
            type: "structure",
            required: [ "ResourceArn", "LogDestinationConfigs" ],
            members: {
                ResourceArn: {},
                LogDestinationConfigs: {
                    type: "list",
                    member: {}
                },
                RedactedFields: {
                    type: "list",
                    member: {
                        shape: "Sd"
                    }
                },
                ManagedByFirewallManager: {
                    type: "boolean"
                },
                LoggingFilter: {
                    type: "structure",
                    required: [ "Filters", "DefaultBehavior" ],
                    members: {
                        Filters: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Behavior", "Requirement", "Conditions" ],
                                members: {
                                    Behavior: {},
                                    Requirement: {},
                                    Conditions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ActionCondition: {
                                                    type: "structure",
                                                    required: [ "Action" ],
                                                    members: {
                                                        Action: {}
                                                    }
                                                },
                                                LabelNameCondition: {
                                                    type: "structure",
                                                    required: [ "LabelName" ],
                                                    members: {
                                                        LabelName: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        DefaultBehavior: {}
                    }
                }
            }
        },
        S7k: {
            type: "structure",
            members: {
                IPAddressVersion: {},
                Addresses: {
                    shape: "S4n"
                }
            }
        },
        S7s: {
            type: "structure",
            required: [ "StartTime", "EndTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S83: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S8h: {
            type: "structure",
            required: [ "Name", "Id", "ARN", "DefaultAction", "VisibilityConfig" ],
            members: {
                Name: {},
                Id: {},
                ARN: {},
                DefaultAction: {
                    shape: "S5b"
                },
                Description: {},
                Rules: {
                    shape: "S6"
                },
                VisibilityConfig: {
                    shape: "S47"
                },
                Capacity: {
                    type: "long"
                },
                PreProcessFirewallManagerRuleGroups: {
                    shape: "S8i"
                },
                PostProcessFirewallManagerRuleGroups: {
                    shape: "S8i"
                },
                ManagedByFirewallManager: {
                    type: "boolean"
                },
                LabelNamespace: {},
                CustomResponseBodies: {
                    shape: "S54"
                },
                CaptchaConfig: {
                    shape: "S49"
                },
                ChallengeConfig: {
                    shape: "S4c"
                },
                TokenDomains: {
                    shape: "S5c"
                },
                AssociationConfig: {
                    shape: "S5d"
                }
            }
        },
        S8i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Priority", "FirewallManagerStatement", "OverrideAction", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Priority: {
                        type: "integer"
                    },
                    FirewallManagerStatement: {
                        type: "structure",
                        members: {
                            ManagedRuleGroupStatement: {
                                shape: "S2q"
                            },
                            RuleGroupReferenceStatement: {
                                shape: "S1l"
                            }
                        }
                    },
                    OverrideAction: {
                        shape: "S42"
                    },
                    VisibilityConfig: {
                        shape: "S47"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["elasticinference"] = {};

AWS.ElasticInference = AWS.Service.defineService("elasticinference", [ "2017-07-25" ]);

AWS.apiLoader.services["elasticinference"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "api.elastic-inference",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Elastic Inference",
        serviceFullName: "Amazon Elastic  Inference",
        serviceId: "Elastic Inference",
        signatureVersion: "v4",
        signingName: "elastic-inference",
        uid: "elastic-inference-2017-07-25"
    },
    operations: {
        DescribeAcceleratorOfferings: {
            http: {
                requestUri: "/describe-accelerator-offerings"
            },
            input: {
                type: "structure",
                required: [ "locationType" ],
                members: {
                    locationType: {},
                    acceleratorTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    acceleratorTypeOfferings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                acceleratorType: {},
                                locationType: {},
                                location: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeAcceleratorTypes: {
            http: {
                method: "GET",
                requestUri: "/describe-accelerator-types"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    acceleratorTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                acceleratorTypeName: {},
                                memoryInfo: {
                                    type: "structure",
                                    members: {
                                        sizeInMiB: {
                                            type: "integer"
                                        }
                                    }
                                },
                                throughputInfo: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            key: {},
                                            value: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeAccelerators: {
            http: {
                requestUri: "/describe-accelerators"
            },
            input: {
                type: "structure",
                members: {
                    acceleratorIds: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    acceleratorSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                acceleratorHealth: {
                                    type: "structure",
                                    members: {
                                        status: {}
                                    }
                                },
                                acceleratorType: {},
                                acceleratorId: {},
                                availabilityZone: {},
                                attachedResource: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S13"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S13: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribeAccelerators: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "acceleratorSet"
        }
    }
};

AWS.apiLoader.services["imagebuilder"] = {};

AWS.Imagebuilder = AWS.Service.defineService("imagebuilder", [ "2019-12-02" ]);

AWS.apiLoader.services["imagebuilder"]["2019-12-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "imagebuilder",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "imagebuilder",
        serviceFullName: "EC2 Image Builder",
        serviceId: "imagebuilder",
        signatureVersion: "v4",
        signingName: "imagebuilder",
        uid: "imagebuilder-2019-12-02"
    },
    operations: {
        CancelImageCreation: {
            http: {
                method: "PUT",
                requestUri: "/CancelImageCreation"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn", "clientToken" ],
                members: {
                    imageBuildVersionArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        CancelLifecycleExecution: {
            http: {
                method: "PUT",
                requestUri: "/CancelLifecycleExecution"
            },
            input: {
                type: "structure",
                required: [ "lifecycleExecutionId", "clientToken" ],
                members: {
                    lifecycleExecutionId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecycleExecutionId: {}
                }
            }
        },
        CreateComponent: {
            http: {
                method: "PUT",
                requestUri: "/CreateComponent"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "platform", "clientToken" ],
                members: {
                    name: {},
                    semanticVersion: {},
                    description: {},
                    changeDescription: {},
                    platform: {},
                    supportedOsVersions: {
                        shape: "Sd"
                    },
                    data: {},
                    uri: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    componentBuildVersionArn: {}
                }
            }
        },
        CreateContainerRecipe: {
            http: {
                method: "PUT",
                requestUri: "/CreateContainerRecipe"
            },
            input: {
                type: "structure",
                required: [ "containerType", "name", "semanticVersion", "components", "parentImage", "targetRepository", "clientToken" ],
                members: {
                    containerType: {},
                    name: {},
                    description: {},
                    semanticVersion: {},
                    components: {
                        shape: "So"
                    },
                    instanceConfiguration: {
                        shape: "Sw"
                    },
                    dockerfileTemplateData: {},
                    dockerfileTemplateUri: {},
                    platformOverride: {},
                    imageOsVersionOverride: {},
                    parentImage: {},
                    tags: {
                        shape: "Sh"
                    },
                    workingDirectory: {},
                    targetRepository: {
                        shape: "S17"
                    },
                    kmsKeyId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    containerRecipeArn: {}
                }
            }
        },
        CreateDistributionConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/CreateDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "name", "distributions", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    distributions: {
                        shape: "S1c"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    distributionConfigurationArn: {}
                }
            }
        },
        CreateImage: {
            http: {
                method: "PUT",
                requestUri: "/CreateImage"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn", "clientToken" ],
                members: {
                    imageRecipeArn: {},
                    containerRecipeArn: {},
                    distributionConfigurationArn: {},
                    infrastructureConfigurationArn: {},
                    imageTestsConfiguration: {
                        shape: "S28"
                    },
                    enhancedImageMetadataEnabled: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    imageScanningConfiguration: {
                        shape: "S2a"
                    },
                    workflows: {
                        shape: "S2c"
                    },
                    executionRole: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        CreateImagePipeline: {
            http: {
                method: "PUT",
                requestUri: "/CreateImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "name", "infrastructureConfigurationArn", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    imageRecipeArn: {},
                    containerRecipeArn: {},
                    infrastructureConfigurationArn: {},
                    distributionConfigurationArn: {},
                    imageTestsConfiguration: {
                        shape: "S28"
                    },
                    enhancedImageMetadataEnabled: {
                        type: "boolean"
                    },
                    schedule: {
                        shape: "S2p"
                    },
                    status: {},
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    imageScanningConfiguration: {
                        shape: "S2a"
                    },
                    workflows: {
                        shape: "S2c"
                    },
                    executionRole: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imagePipelineArn: {}
                }
            }
        },
        CreateImageRecipe: {
            http: {
                method: "PUT",
                requestUri: "/CreateImageRecipe"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "components", "parentImage", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    semanticVersion: {},
                    components: {
                        shape: "So"
                    },
                    parentImage: {},
                    blockDeviceMappings: {
                        shape: "Sx"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    workingDirectory: {},
                    additionalInstanceConfiguration: {
                        shape: "S2w"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageRecipeArn: {}
                }
            }
        },
        CreateInfrastructureConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/CreateInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "name", "instanceProfileName", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    instanceTypes: {
                        shape: "S31"
                    },
                    instanceProfileName: {},
                    securityGroupIds: {
                        shape: "S34"
                    },
                    subnetId: {},
                    logging: {
                        shape: "S35"
                    },
                    keyPair: {},
                    terminateInstanceOnFailure: {
                        type: "boolean"
                    },
                    snsTopicArn: {},
                    resourceTags: {
                        shape: "S38"
                    },
                    instanceMetadataOptions: {
                        shape: "S39"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    infrastructureConfigurationArn: {}
                }
            }
        },
        CreateLifecyclePolicy: {
            http: {
                method: "PUT",
                requestUri: "/CreateLifecyclePolicy"
            },
            input: {
                type: "structure",
                required: [ "name", "executionRole", "resourceType", "policyDetails", "resourceSelection", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    status: {},
                    executionRole: {},
                    resourceType: {},
                    policyDetails: {
                        shape: "S3g"
                    },
                    resourceSelection: {
                        shape: "S3u"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clientToken: {},
                    lifecyclePolicyArn: {}
                }
            }
        },
        CreateWorkflow: {
            http: {
                method: "PUT",
                requestUri: "/CreateWorkflow"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "clientToken", "type" ],
                members: {
                    name: {},
                    semanticVersion: {},
                    description: {},
                    changeDescription: {},
                    data: {},
                    uri: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    clientToken: {},
                    workflowBuildVersionArn: {}
                }
            }
        },
        DeleteComponent: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteComponent"
            },
            input: {
                type: "structure",
                required: [ "componentBuildVersionArn" ],
                members: {
                    componentBuildVersionArn: {
                        location: "querystring",
                        locationName: "componentBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentBuildVersionArn: {}
                }
            }
        },
        DeleteContainerRecipe: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteContainerRecipe"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn" ],
                members: {
                    containerRecipeArn: {
                        location: "querystring",
                        locationName: "containerRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipeArn: {}
                }
            }
        },
        DeleteDistributionConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "distributionConfigurationArn" ],
                members: {
                    distributionConfigurationArn: {
                        location: "querystring",
                        locationName: "distributionConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    distributionConfigurationArn: {}
                }
            }
        },
        DeleteImage: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteImage"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn" ],
                members: {
                    imageBuildVersionArn: {
                        location: "querystring",
                        locationName: "imageBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        DeleteImagePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn" ],
                members: {
                    imagePipelineArn: {
                        location: "querystring",
                        locationName: "imagePipelineArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePipelineArn: {}
                }
            }
        },
        DeleteImageRecipe: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteImageRecipe"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn" ],
                members: {
                    imageRecipeArn: {
                        location: "querystring",
                        locationName: "imageRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipeArn: {}
                }
            }
        },
        DeleteInfrastructureConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn" ],
                members: {
                    infrastructureConfigurationArn: {
                        location: "querystring",
                        locationName: "infrastructureConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    infrastructureConfigurationArn: {}
                }
            }
        },
        DeleteLifecyclePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteLifecyclePolicy"
            },
            input: {
                type: "structure",
                required: [ "lifecyclePolicyArn" ],
                members: {
                    lifecyclePolicyArn: {
                        location: "querystring",
                        locationName: "lifecyclePolicyArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicyArn: {}
                }
            }
        },
        DeleteWorkflow: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteWorkflow"
            },
            input: {
                type: "structure",
                required: [ "workflowBuildVersionArn" ],
                members: {
                    workflowBuildVersionArn: {
                        location: "querystring",
                        locationName: "workflowBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    workflowBuildVersionArn: {}
                }
            }
        },
        GetComponent: {
            http: {
                method: "GET",
                requestUri: "/GetComponent"
            },
            input: {
                type: "structure",
                required: [ "componentBuildVersionArn" ],
                members: {
                    componentBuildVersionArn: {
                        location: "querystring",
                        locationName: "componentBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    component: {
                        type: "structure",
                        members: {
                            arn: {},
                            name: {},
                            version: {},
                            description: {},
                            changeDescription: {},
                            type: {},
                            platform: {},
                            supportedOsVersions: {
                                shape: "Sd"
                            },
                            state: {
                                shape: "S4r"
                            },
                            parameters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "type" ],
                                    members: {
                                        name: {},
                                        type: {},
                                        defaultValue: {
                                            shape: "Su"
                                        },
                                        description: {}
                                    }
                                }
                            },
                            owner: {},
                            data: {},
                            kmsKeyId: {},
                            encrypted: {
                                type: "boolean"
                            },
                            dateCreated: {},
                            tags: {
                                shape: "Sh"
                            },
                            publisher: {},
                            obfuscate: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        GetComponentPolicy: {
            http: {
                method: "GET",
                requestUri: "/GetComponentPolicy"
            },
            input: {
                type: "structure",
                required: [ "componentArn" ],
                members: {
                    componentArn: {
                        location: "querystring",
                        locationName: "componentArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetContainerRecipe: {
            http: {
                method: "GET",
                requestUri: "/GetContainerRecipe"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn" ],
                members: {
                    containerRecipeArn: {
                        location: "querystring",
                        locationName: "containerRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipe: {
                        shape: "S54"
                    }
                }
            }
        },
        GetContainerRecipePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetContainerRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn" ],
                members: {
                    containerRecipeArn: {
                        location: "querystring",
                        locationName: "containerRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetDistributionConfiguration: {
            http: {
                method: "GET",
                requestUri: "/GetDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "distributionConfigurationArn" ],
                members: {
                    distributionConfigurationArn: {
                        location: "querystring",
                        locationName: "distributionConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    distributionConfiguration: {
                        shape: "S5a"
                    }
                }
            }
        },
        GetImage: {
            http: {
                method: "GET",
                requestUri: "/GetImage"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn" ],
                members: {
                    imageBuildVersionArn: {
                        location: "querystring",
                        locationName: "imageBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    image: {
                        type: "structure",
                        members: {
                            arn: {},
                            type: {},
                            name: {},
                            version: {},
                            platform: {},
                            enhancedImageMetadataEnabled: {
                                type: "boolean"
                            },
                            osVersion: {},
                            state: {
                                shape: "S5h"
                            },
                            imageRecipe: {
                                shape: "S5j"
                            },
                            containerRecipe: {
                                shape: "S54"
                            },
                            sourcePipelineName: {},
                            sourcePipelineArn: {},
                            infrastructureConfiguration: {
                                shape: "S5l"
                            },
                            distributionConfiguration: {
                                shape: "S5a"
                            },
                            imageTestsConfiguration: {
                                shape: "S28"
                            },
                            dateCreated: {},
                            outputResources: {
                                shape: "S5m"
                            },
                            tags: {
                                shape: "Sh"
                            },
                            buildType: {},
                            imageSource: {},
                            scanState: {
                                type: "structure",
                                members: {
                                    status: {},
                                    reason: {}
                                }
                            },
                            imageScanningConfiguration: {
                                shape: "S2a"
                            },
                            deprecationTime: {
                                type: "timestamp"
                            },
                            lifecycleExecutionId: {},
                            executionRole: {},
                            workflows: {
                                shape: "S2c"
                            }
                        }
                    }
                }
            }
        },
        GetImagePipeline: {
            http: {
                method: "GET",
                requestUri: "/GetImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn" ],
                members: {
                    imagePipelineArn: {
                        location: "querystring",
                        locationName: "imagePipelineArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePipeline: {
                        shape: "S5y"
                    }
                }
            }
        },
        GetImagePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetImagePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageArn" ],
                members: {
                    imageArn: {
                        location: "querystring",
                        locationName: "imageArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetImageRecipe: {
            http: {
                method: "GET",
                requestUri: "/GetImageRecipe"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn" ],
                members: {
                    imageRecipeArn: {
                        location: "querystring",
                        locationName: "imageRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipe: {
                        shape: "S5j"
                    }
                }
            }
        },
        GetImageRecipePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetImageRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn" ],
                members: {
                    imageRecipeArn: {
                        location: "querystring",
                        locationName: "imageRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetInfrastructureConfiguration: {
            http: {
                method: "GET",
                requestUri: "/GetInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn" ],
                members: {
                    infrastructureConfigurationArn: {
                        location: "querystring",
                        locationName: "infrastructureConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    infrastructureConfiguration: {
                        shape: "S5l"
                    }
                }
            }
        },
        GetLifecycleExecution: {
            http: {
                method: "GET",
                requestUri: "/GetLifecycleExecution"
            },
            input: {
                type: "structure",
                required: [ "lifecycleExecutionId" ],
                members: {
                    lifecycleExecutionId: {
                        location: "querystring",
                        locationName: "lifecycleExecutionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecycleExecution: {
                        shape: "S69"
                    }
                }
            }
        },
        GetLifecyclePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetLifecyclePolicy"
            },
            input: {
                type: "structure",
                required: [ "lifecyclePolicyArn" ],
                members: {
                    lifecyclePolicyArn: {
                        location: "querystring",
                        locationName: "lifecyclePolicyArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicy: {
                        type: "structure",
                        members: {
                            arn: {},
                            name: {},
                            description: {},
                            status: {},
                            executionRole: {},
                            resourceType: {},
                            policyDetails: {
                                shape: "S3g"
                            },
                            resourceSelection: {
                                shape: "S3u"
                            },
                            dateCreated: {
                                type: "timestamp"
                            },
                            dateUpdated: {
                                type: "timestamp"
                            },
                            dateLastRun: {
                                type: "timestamp"
                            },
                            tags: {
                                shape: "Sh"
                            }
                        }
                    }
                }
            }
        },
        GetWorkflow: {
            http: {
                method: "GET",
                requestUri: "/GetWorkflow"
            },
            input: {
                type: "structure",
                required: [ "workflowBuildVersionArn" ],
                members: {
                    workflowBuildVersionArn: {
                        location: "querystring",
                        locationName: "workflowBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    workflow: {
                        type: "structure",
                        members: {
                            arn: {},
                            name: {},
                            version: {},
                            description: {},
                            changeDescription: {},
                            type: {},
                            state: {
                                shape: "S6j"
                            },
                            owner: {},
                            data: {},
                            kmsKeyId: {},
                            dateCreated: {},
                            tags: {
                                shape: "Sh"
                            },
                            parameters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "type" ],
                                    members: {
                                        name: {},
                                        type: {},
                                        defaultValue: {
                                            shape: "S2i"
                                        },
                                        description: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetWorkflowExecution: {
            http: {
                method: "GET",
                requestUri: "/GetWorkflowExecution"
            },
            input: {
                type: "structure",
                required: [ "workflowExecutionId" ],
                members: {
                    workflowExecutionId: {
                        location: "querystring",
                        locationName: "workflowExecutionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    workflowBuildVersionArn: {},
                    workflowExecutionId: {},
                    imageBuildVersionArn: {},
                    type: {},
                    status: {},
                    message: {},
                    totalStepCount: {
                        type: "integer"
                    },
                    totalStepsSucceeded: {
                        type: "integer"
                    },
                    totalStepsFailed: {
                        type: "integer"
                    },
                    totalStepsSkipped: {
                        type: "integer"
                    },
                    startTime: {},
                    endTime: {},
                    parallelGroup: {}
                }
            }
        },
        GetWorkflowStepExecution: {
            http: {
                method: "GET",
                requestUri: "/GetWorkflowStepExecution"
            },
            input: {
                type: "structure",
                required: [ "stepExecutionId" ],
                members: {
                    stepExecutionId: {
                        location: "querystring",
                        locationName: "stepExecutionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    stepExecutionId: {},
                    workflowBuildVersionArn: {},
                    workflowExecutionId: {},
                    imageBuildVersionArn: {},
                    name: {},
                    description: {},
                    action: {},
                    status: {},
                    rollbackStatus: {},
                    message: {},
                    inputs: {},
                    outputs: {},
                    startTime: {},
                    endTime: {},
                    onFailure: {},
                    timeoutSeconds: {
                        type: "integer"
                    }
                }
            }
        },
        ImportComponent: {
            http: {
                method: "PUT",
                requestUri: "/ImportComponent"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "type", "format", "platform", "clientToken" ],
                members: {
                    name: {},
                    semanticVersion: {},
                    description: {},
                    changeDescription: {},
                    type: {},
                    format: {},
                    platform: {},
                    data: {},
                    uri: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    componentBuildVersionArn: {}
                }
            }
        },
        ImportVmImage: {
            http: {
                method: "PUT",
                requestUri: "/ImportVmImage"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "platform", "vmImportTaskId", "clientToken" ],
                members: {
                    name: {},
                    semanticVersion: {},
                    description: {},
                    platform: {},
                    osVersion: {},
                    vmImportTaskId: {},
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageArn: {},
                    clientToken: {}
                }
            }
        },
        ListComponentBuildVersions: {
            http: {
                requestUri: "/ListComponentBuildVersions"
            },
            input: {
                type: "structure",
                required: [ "componentVersionArn" ],
                members: {
                    componentVersionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                version: {},
                                platform: {},
                                supportedOsVersions: {
                                    shape: "Sd"
                                },
                                state: {
                                    shape: "S4r"
                                },
                                type: {},
                                owner: {},
                                description: {},
                                changeDescription: {},
                                dateCreated: {},
                                tags: {
                                    shape: "Sh"
                                },
                                publisher: {},
                                obfuscate: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListComponents: {
            http: {
                requestUri: "/ListComponents"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S7m"
                    },
                    byName: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentVersionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                version: {},
                                description: {},
                                platform: {},
                                supportedOsVersions: {
                                    shape: "Sd"
                                },
                                type: {},
                                owner: {},
                                dateCreated: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContainerRecipes: {
            http: {
                requestUri: "/ListContainerRecipes"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipeSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                containerType: {},
                                name: {},
                                platform: {},
                                owner: {},
                                parentImage: {},
                                dateCreated: {},
                                tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDistributionConfigurations: {
            http: {
                requestUri: "/ListDistributionConfigurations"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    distributionConfigurationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                description: {},
                                dateCreated: {},
                                dateUpdated: {},
                                tags: {
                                    shape: "Sh"
                                },
                                regions: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImageBuildVersions: {
            http: {
                requestUri: "/ListImageBuildVersions"
            },
            input: {
                type: "structure",
                required: [ "imageVersionArn" ],
                members: {
                    imageVersionArn: {},
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageSummaryList: {
                        shape: "S86"
                    },
                    nextToken: {}
                }
            }
        },
        ListImagePackages: {
            http: {
                requestUri: "/ListImagePackages"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn" ],
                members: {
                    imageBuildVersionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePackageList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                packageName: {},
                                packageVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImagePipelineImages: {
            http: {
                requestUri: "/ListImagePipelineImages"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn" ],
                members: {
                    imagePipelineArn: {},
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageSummaryList: {
                        shape: "S86"
                    },
                    nextToken: {}
                }
            }
        },
        ListImagePipelines: {
            http: {
                requestUri: "/ListImagePipelines"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePipelineList: {
                        type: "list",
                        member: {
                            shape: "S5y"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImageRecipes: {
            http: {
                requestUri: "/ListImageRecipes"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipeSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                platform: {},
                                owner: {},
                                parentImage: {},
                                dateCreated: {},
                                tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImageScanFindingAggregations: {
            http: {
                requestUri: "/ListImageScanFindingAggregations"
            },
            input: {
                type: "structure",
                members: {
                    filter: {
                        shape: "S7n"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    aggregationType: {},
                    responses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountAggregation: {
                                    type: "structure",
                                    members: {
                                        accountId: {},
                                        severityCounts: {
                                            shape: "S8q"
                                        }
                                    }
                                },
                                imageAggregation: {
                                    type: "structure",
                                    members: {
                                        imageBuildVersionArn: {},
                                        severityCounts: {
                                            shape: "S8q"
                                        }
                                    }
                                },
                                imagePipelineAggregation: {
                                    type: "structure",
                                    members: {
                                        imagePipelineArn: {},
                                        severityCounts: {
                                            shape: "S8q"
                                        }
                                    }
                                },
                                vulnerabilityIdAggregation: {
                                    type: "structure",
                                    members: {
                                        vulnerabilityId: {},
                                        severityCounts: {
                                            shape: "S8q"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImageScanFindings: {
            http: {
                requestUri: "/ListImageScanFindings"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                awsAccountId: {},
                                imageBuildVersionArn: {},
                                imagePipelineArn: {},
                                type: {},
                                description: {},
                                title: {},
                                remediation: {
                                    type: "structure",
                                    members: {
                                        recommendation: {
                                            type: "structure",
                                            members: {
                                                text: {},
                                                url: {}
                                            }
                                        }
                                    }
                                },
                                severity: {},
                                firstObservedAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                inspectorScore: {
                                    type: "double"
                                },
                                inspectorScoreDetails: {
                                    type: "structure",
                                    members: {
                                        adjustedCvss: {
                                            type: "structure",
                                            members: {
                                                scoreSource: {},
                                                cvssSource: {},
                                                version: {},
                                                score: {
                                                    type: "double"
                                                },
                                                scoringVector: {},
                                                adjustments: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            metric: {},
                                                            reason: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                packageVulnerabilityDetails: {
                                    type: "structure",
                                    required: [ "vulnerabilityId" ],
                                    members: {
                                        vulnerabilityId: {},
                                        vulnerablePackages: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    name: {},
                                                    version: {},
                                                    sourceLayerHash: {},
                                                    epoch: {
                                                        type: "integer"
                                                    },
                                                    release: {},
                                                    arch: {},
                                                    packageManager: {},
                                                    filePath: {},
                                                    fixedInVersion: {},
                                                    remediation: {}
                                                }
                                            }
                                        },
                                        source: {},
                                        cvss: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    baseScore: {
                                                        type: "double"
                                                    },
                                                    scoringVector: {},
                                                    version: {},
                                                    source: {}
                                                }
                                            }
                                        },
                                        relatedVulnerabilities: {
                                            type: "list",
                                            member: {}
                                        },
                                        sourceUrl: {},
                                        vendorSeverity: {},
                                        vendorCreatedAt: {
                                            type: "timestamp"
                                        },
                                        vendorUpdatedAt: {
                                            type: "timestamp"
                                        },
                                        referenceUrls: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                fixAvailable: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImages: {
            http: {
                requestUri: "/ListImages"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S7m"
                    },
                    byName: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    includeDeprecated: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageVersionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                type: {},
                                version: {},
                                platform: {},
                                osVersion: {},
                                owner: {},
                                dateCreated: {},
                                buildType: {},
                                imageSource: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInfrastructureConfigurations: {
            http: {
                requestUri: "/ListInfrastructureConfigurations"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    infrastructureConfigurationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                description: {},
                                dateCreated: {},
                                dateUpdated: {},
                                resourceTags: {
                                    shape: "S38"
                                },
                                tags: {
                                    shape: "Sh"
                                },
                                instanceTypes: {
                                    shape: "S31"
                                },
                                instanceProfileName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLifecycleExecutionResources: {
            http: {
                requestUri: "/ListLifecycleExecutionResources"
            },
            input: {
                type: "structure",
                required: [ "lifecycleExecutionId" ],
                members: {
                    lifecycleExecutionId: {},
                    parentResourceId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecycleExecutionId: {},
                    lifecycleExecutionState: {
                        shape: "S6b"
                    },
                    resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                resourceId: {},
                                state: {
                                    shape: "S9w"
                                },
                                action: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        reason: {}
                                    }
                                },
                                region: {},
                                snapshots: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            snapshotId: {},
                                            state: {
                                                shape: "S9w"
                                            }
                                        }
                                    }
                                },
                                imageUris: {
                                    shape: "S1j"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLifecycleExecutions: {
            http: {
                requestUri: "/ListLifecycleExecutions"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecycleExecutions: {
                        type: "list",
                        member: {
                            shape: "S69"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLifecyclePolicies: {
            http: {
                requestUri: "/ListLifecyclePolicies"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S7m"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicySummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                description: {},
                                status: {},
                                executionRole: {},
                                resourceType: {},
                                dateCreated: {
                                    type: "timestamp"
                                },
                                dateUpdated: {
                                    type: "timestamp"
                                },
                                dateLastRun: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        ListWaitingWorkflowSteps: {
            http: {
                requestUri: "/ListWaitingWorkflowSteps"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    steps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                stepExecutionId: {},
                                imageBuildVersionArn: {},
                                workflowExecutionId: {},
                                workflowBuildVersionArn: {},
                                name: {},
                                action: {},
                                startTime: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorkflowBuildVersions: {
            http: {
                requestUri: "/ListWorkflowBuildVersions"
            },
            input: {
                type: "structure",
                required: [ "workflowVersionArn" ],
                members: {
                    workflowVersionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    workflowSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                version: {},
                                description: {},
                                changeDescription: {},
                                type: {},
                                owner: {},
                                state: {
                                    shape: "S6j"
                                },
                                dateCreated: {},
                                tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorkflowExecutions: {
            http: {
                requestUri: "/ListWorkflowExecutions"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    imageBuildVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    workflowExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                workflowBuildVersionArn: {},
                                workflowExecutionId: {},
                                type: {},
                                status: {},
                                message: {},
                                totalStepCount: {
                                    type: "integer"
                                },
                                totalStepsSucceeded: {
                                    type: "integer"
                                },
                                totalStepsFailed: {
                                    type: "integer"
                                },
                                totalStepsSkipped: {
                                    type: "integer"
                                },
                                startTime: {},
                                endTime: {},
                                parallelGroup: {}
                            }
                        }
                    },
                    imageBuildVersionArn: {},
                    message: {},
                    nextToken: {}
                }
            }
        },
        ListWorkflowStepExecutions: {
            http: {
                requestUri: "/ListWorkflowStepExecutions"
            },
            input: {
                type: "structure",
                required: [ "workflowExecutionId" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    workflowExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    steps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                stepExecutionId: {},
                                name: {},
                                description: {},
                                action: {},
                                status: {},
                                rollbackStatus: {},
                                message: {},
                                inputs: {},
                                outputs: {},
                                startTime: {},
                                endTime: {}
                            }
                        }
                    },
                    workflowBuildVersionArn: {},
                    workflowExecutionId: {},
                    imageBuildVersionArn: {},
                    message: {},
                    nextToken: {}
                }
            }
        },
        ListWorkflows: {
            http: {
                requestUri: "/ListWorkflows"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S7m"
                    },
                    byName: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    workflowVersionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                version: {},
                                description: {},
                                type: {},
                                owner: {},
                                dateCreated: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutComponentPolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutComponentPolicy"
            },
            input: {
                type: "structure",
                required: [ "componentArn", "policy" ],
                members: {
                    componentArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentArn: {}
                }
            }
        },
        PutContainerRecipePolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutContainerRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn", "policy" ],
                members: {
                    containerRecipeArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipeArn: {}
                }
            }
        },
        PutImagePolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutImagePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageArn", "policy" ],
                members: {
                    imageArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageArn: {}
                }
            }
        },
        PutImageRecipePolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutImageRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn", "policy" ],
                members: {
                    imageRecipeArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipeArn: {}
                }
            }
        },
        SendWorkflowStepAction: {
            http: {
                method: "PUT",
                requestUri: "/SendWorkflowStepAction"
            },
            input: {
                type: "structure",
                required: [ "stepExecutionId", "imageBuildVersionArn", "action", "clientToken" ],
                members: {
                    stepExecutionId: {},
                    imageBuildVersionArn: {},
                    action: {},
                    reason: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stepExecutionId: {},
                    imageBuildVersionArn: {},
                    clientToken: {}
                }
            }
        },
        StartImagePipelineExecution: {
            http: {
                method: "PUT",
                requestUri: "/StartImagePipelineExecution"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn", "clientToken" ],
                members: {
                    imagePipelineArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        StartResourceStateUpdate: {
            http: {
                method: "PUT",
                requestUri: "/StartResourceStateUpdate"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "state", "clientToken" ],
                members: {
                    resourceArn: {},
                    state: {
                        type: "structure",
                        members: {
                            status: {}
                        }
                    },
                    executionRole: {},
                    includeResources: {
                        type: "structure",
                        members: {
                            amis: {
                                type: "boolean"
                            },
                            snapshots: {
                                type: "boolean"
                            },
                            containers: {
                                type: "boolean"
                            }
                        }
                    },
                    exclusionRules: {
                        type: "structure",
                        members: {
                            amis: {
                                shape: "S3r"
                            }
                        }
                    },
                    updateAt: {
                        type: "timestamp"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecycleExecutionId: {},
                    resourceArn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDistributionConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/UpdateDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "distributionConfigurationArn", "distributions", "clientToken" ],
                members: {
                    distributionConfigurationArn: {},
                    description: {},
                    distributions: {
                        shape: "S1c"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    distributionConfigurationArn: {}
                }
            }
        },
        UpdateImagePipeline: {
            http: {
                method: "PUT",
                requestUri: "/UpdateImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn", "infrastructureConfigurationArn", "clientToken" ],
                members: {
                    imagePipelineArn: {},
                    description: {},
                    imageRecipeArn: {},
                    containerRecipeArn: {},
                    infrastructureConfigurationArn: {},
                    distributionConfigurationArn: {},
                    imageTestsConfiguration: {
                        shape: "S28"
                    },
                    enhancedImageMetadataEnabled: {
                        type: "boolean"
                    },
                    schedule: {
                        shape: "S2p"
                    },
                    status: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    imageScanningConfiguration: {
                        shape: "S2a"
                    },
                    workflows: {
                        shape: "S2c"
                    },
                    executionRole: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imagePipelineArn: {}
                }
            }
        },
        UpdateInfrastructureConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/UpdateInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn", "instanceProfileName", "clientToken" ],
                members: {
                    infrastructureConfigurationArn: {},
                    description: {},
                    instanceTypes: {
                        shape: "S31"
                    },
                    instanceProfileName: {},
                    securityGroupIds: {
                        shape: "S34"
                    },
                    subnetId: {},
                    logging: {
                        shape: "S35"
                    },
                    keyPair: {},
                    terminateInstanceOnFailure: {
                        type: "boolean"
                    },
                    snsTopicArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    resourceTags: {
                        shape: "S38"
                    },
                    instanceMetadataOptions: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    infrastructureConfigurationArn: {}
                }
            }
        },
        UpdateLifecyclePolicy: {
            http: {
                method: "PUT",
                requestUri: "/UpdateLifecyclePolicy"
            },
            input: {
                type: "structure",
                required: [ "lifecyclePolicyArn", "executionRole", "resourceType", "policyDetails", "resourceSelection", "clientToken" ],
                members: {
                    lifecyclePolicyArn: {},
                    description: {},
                    status: {},
                    executionRole: {},
                    resourceType: {},
                    policyDetails: {
                        shape: "S3g"
                    },
                    resourceSelection: {
                        shape: "S3u"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicyArn: {}
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                required: [ "componentArn" ],
                members: {
                    componentArn: {},
                    parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {
                                    shape: "Su"
                                }
                            }
                        }
                    }
                }
            }
        },
        Su: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "structure",
            members: {
                image: {},
                blockDeviceMappings: {
                    shape: "Sx"
                }
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    deviceName: {},
                    ebs: {
                        type: "structure",
                        members: {
                            encrypted: {
                                type: "boolean"
                            },
                            deleteOnTermination: {
                                type: "boolean"
                            },
                            iops: {
                                type: "integer"
                            },
                            kmsKeyId: {},
                            snapshotId: {},
                            volumeSize: {
                                type: "integer"
                            },
                            volumeType: {},
                            throughput: {
                                type: "integer"
                            }
                        }
                    },
                    virtualName: {},
                    noDevice: {}
                }
            }
        },
        S17: {
            type: "structure",
            required: [ "service", "repositoryName" ],
            members: {
                service: {},
                repositoryName: {}
            }
        },
        S1c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "region" ],
                members: {
                    region: {},
                    amiDistributionConfiguration: {
                        type: "structure",
                        members: {
                            name: {},
                            description: {},
                            targetAccountIds: {
                                shape: "S1g"
                            },
                            amiTags: {
                                shape: "Sh"
                            },
                            kmsKeyId: {},
                            launchPermission: {
                                type: "structure",
                                members: {
                                    userIds: {
                                        shape: "S1g"
                                    },
                                    userGroups: {
                                        shape: "S1j"
                                    },
                                    organizationArns: {
                                        type: "list",
                                        member: {}
                                    },
                                    organizationalUnitArns: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    },
                    containerDistributionConfiguration: {
                        type: "structure",
                        required: [ "targetRepository" ],
                        members: {
                            description: {},
                            containerTags: {
                                shape: "S1j"
                            },
                            targetRepository: {
                                shape: "S17"
                            }
                        }
                    },
                    licenseConfigurationArns: {
                        type: "list",
                        member: {}
                    },
                    launchTemplateConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "launchTemplateId" ],
                            members: {
                                launchTemplateId: {},
                                accountId: {},
                                setDefaultVersion: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    s3ExportConfiguration: {
                        type: "structure",
                        required: [ "roleName", "diskImageFormat", "s3Bucket" ],
                        members: {
                            roleName: {},
                            diskImageFormat: {},
                            s3Bucket: {},
                            s3Prefix: {}
                        }
                    },
                    fastLaunchConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "enabled" ],
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                snapshotConfiguration: {
                                    type: "structure",
                                    members: {
                                        targetResourceCount: {
                                            type: "integer"
                                        }
                                    }
                                },
                                maxParallelLaunches: {
                                    type: "integer"
                                },
                                launchTemplate: {
                                    type: "structure",
                                    members: {
                                        launchTemplateId: {},
                                        launchTemplateName: {},
                                        launchTemplateVersion: {}
                                    }
                                },
                                accountId: {}
                            }
                        }
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "list",
            member: {}
        },
        S28: {
            type: "structure",
            members: {
                imageTestsEnabled: {
                    type: "boolean"
                },
                timeoutMinutes: {
                    type: "integer"
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                imageScanningEnabled: {
                    type: "boolean"
                },
                ecrConfiguration: {
                    type: "structure",
                    members: {
                        repositoryName: {},
                        containerTags: {
                            shape: "S1j"
                        }
                    }
                }
            }
        },
        S2c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "workflowArn" ],
                members: {
                    workflowArn: {},
                    parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {
                                    shape: "S2i"
                                }
                            }
                        }
                    },
                    parallelGroup: {},
                    onFailure: {}
                }
            }
        },
        S2i: {
            type: "list",
            member: {}
        },
        S2p: {
            type: "structure",
            members: {
                scheduleExpression: {},
                timezone: {},
                pipelineExecutionStartCondition: {}
            }
        },
        S2w: {
            type: "structure",
            members: {
                systemsManagerAgent: {
                    type: "structure",
                    members: {
                        uninstallAfterBuild: {
                            type: "boolean"
                        }
                    }
                },
                userDataOverride: {}
            }
        },
        S31: {
            type: "list",
            member: {}
        },
        S34: {
            type: "list",
            member: {}
        },
        S35: {
            type: "structure",
            members: {
                s3Logs: {
                    type: "structure",
                    members: {
                        s3BucketName: {},
                        s3KeyPrefix: {}
                    }
                }
            }
        },
        S38: {
            type: "map",
            key: {},
            value: {}
        },
        S39: {
            type: "structure",
            members: {
                httpTokens: {},
                httpPutResponseHopLimit: {
                    type: "integer"
                }
            }
        },
        S3g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "action", "filter" ],
                members: {
                    action: {
                        type: "structure",
                        required: [ "type" ],
                        members: {
                            type: {},
                            includeResources: {
                                type: "structure",
                                members: {
                                    amis: {
                                        type: "boolean"
                                    },
                                    snapshots: {
                                        type: "boolean"
                                    },
                                    containers: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    filter: {
                        type: "structure",
                        required: [ "type", "value" ],
                        members: {
                            type: {},
                            value: {
                                type: "integer"
                            },
                            unit: {},
                            retainAtLeast: {
                                type: "integer"
                            }
                        }
                    },
                    exclusionRules: {
                        type: "structure",
                        members: {
                            tagMap: {
                                shape: "Sh"
                            },
                            amis: {
                                shape: "S3r"
                            }
                        }
                    }
                }
            }
        },
        S3r: {
            type: "structure",
            members: {
                isPublic: {
                    type: "boolean"
                },
                regions: {
                    shape: "S1j"
                },
                sharedAccounts: {
                    shape: "S1g"
                },
                lastLaunched: {
                    type: "structure",
                    required: [ "value", "unit" ],
                    members: {
                        value: {
                            type: "integer"
                        },
                        unit: {}
                    }
                },
                tagMap: {
                    shape: "Sh"
                }
            }
        },
        S3u: {
            type: "structure",
            members: {
                recipes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "semanticVersion" ],
                        members: {
                            name: {},
                            semanticVersion: {}
                        }
                    }
                },
                tagMap: {
                    shape: "Sh"
                }
            }
        },
        S4r: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        },
        S54: {
            type: "structure",
            members: {
                arn: {},
                containerType: {},
                name: {},
                description: {},
                platform: {},
                owner: {},
                version: {},
                components: {
                    shape: "So"
                },
                instanceConfiguration: {
                    shape: "Sw"
                },
                dockerfileTemplateData: {},
                kmsKeyId: {},
                encrypted: {
                    type: "boolean"
                },
                parentImage: {},
                dateCreated: {},
                tags: {
                    shape: "Sh"
                },
                workingDirectory: {},
                targetRepository: {
                    shape: "S17"
                }
            }
        },
        S5a: {
            type: "structure",
            required: [ "timeoutMinutes" ],
            members: {
                arn: {},
                name: {},
                description: {},
                distributions: {
                    shape: "S1c"
                },
                timeoutMinutes: {
                    type: "integer"
                },
                dateCreated: {},
                dateUpdated: {},
                tags: {
                    shape: "Sh"
                }
            }
        },
        S5h: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        },
        S5j: {
            type: "structure",
            members: {
                arn: {},
                type: {},
                name: {},
                description: {},
                platform: {},
                owner: {},
                version: {},
                components: {
                    shape: "So"
                },
                parentImage: {},
                blockDeviceMappings: {
                    shape: "Sx"
                },
                dateCreated: {},
                tags: {
                    shape: "Sh"
                },
                workingDirectory: {},
                additionalInstanceConfiguration: {
                    shape: "S2w"
                }
            }
        },
        S5l: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                description: {},
                instanceTypes: {
                    shape: "S31"
                },
                instanceProfileName: {},
                securityGroupIds: {
                    shape: "S34"
                },
                subnetId: {},
                logging: {
                    shape: "S35"
                },
                keyPair: {},
                terminateInstanceOnFailure: {
                    type: "boolean"
                },
                snsTopicArn: {},
                dateCreated: {},
                dateUpdated: {},
                resourceTags: {
                    shape: "S38"
                },
                instanceMetadataOptions: {
                    shape: "S39"
                },
                tags: {
                    shape: "Sh"
                }
            }
        },
        S5m: {
            type: "structure",
            members: {
                amis: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            region: {},
                            image: {},
                            name: {},
                            description: {},
                            state: {
                                shape: "S5h"
                            },
                            accountId: {}
                        }
                    }
                },
                containers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            region: {},
                            imageUris: {
                                shape: "S1j"
                            }
                        }
                    }
                }
            }
        },
        S5y: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                description: {},
                platform: {},
                enhancedImageMetadataEnabled: {
                    type: "boolean"
                },
                imageRecipeArn: {},
                containerRecipeArn: {},
                infrastructureConfigurationArn: {},
                distributionConfigurationArn: {},
                imageTestsConfiguration: {
                    shape: "S28"
                },
                schedule: {
                    shape: "S2p"
                },
                status: {},
                dateCreated: {},
                dateUpdated: {},
                dateLastRun: {},
                dateNextRun: {},
                tags: {
                    shape: "Sh"
                },
                imageScanningConfiguration: {
                    shape: "S2a"
                },
                executionRole: {},
                workflows: {
                    shape: "S2c"
                }
            }
        },
        S69: {
            type: "structure",
            members: {
                lifecycleExecutionId: {},
                lifecyclePolicyArn: {},
                resourcesImpactedSummary: {
                    type: "structure",
                    members: {
                        hasImpactedResources: {
                            type: "boolean"
                        }
                    }
                },
                state: {
                    shape: "S6b"
                },
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                }
            }
        },
        S6b: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        },
        S6j: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        },
        S7m: {
            type: "list",
            member: {
                shape: "S7n"
            }
        },
        S7n: {
            type: "structure",
            members: {
                name: {},
                values: {
                    type: "list",
                    member: {}
                }
            }
        },
        S86: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    type: {},
                    version: {},
                    platform: {},
                    osVersion: {},
                    state: {
                        shape: "S5h"
                    },
                    owner: {},
                    dateCreated: {},
                    outputResources: {
                        shape: "S5m"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    buildType: {},
                    imageSource: {},
                    deprecationTime: {
                        type: "timestamp"
                    },
                    lifecycleExecutionId: {}
                }
            }
        },
        S8q: {
            type: "structure",
            members: {
                all: {
                    type: "long"
                },
                critical: {
                    type: "long"
                },
                high: {
                    type: "long"
                },
                medium: {
                    type: "long"
                }
            }
        },
        S9w: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        }
    },
    paginators: {
        ListComponentBuildVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "componentSummaryList"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "componentVersionList"
        },
        ListContainerRecipes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "containerRecipeSummaryList"
        },
        ListDistributionConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "distributionConfigurationSummaryList"
        },
        ListImageBuildVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageSummaryList"
        },
        ListImagePackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imagePackageList"
        },
        ListImagePipelineImages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageSummaryList"
        },
        ListImagePipelines: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imagePipelineList"
        },
        ListImageRecipes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageRecipeSummaryList"
        },
        ListImageScanFindingAggregations: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "responses"
        },
        ListImageScanFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListImages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageVersionList"
        },
        ListInfrastructureConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "infrastructureConfigurationSummaryList"
        },
        ListLifecycleExecutionResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "resources"
        },
        ListLifecycleExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "lifecycleExecutions"
        },
        ListLifecyclePolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "lifecyclePolicySummaryList"
        },
        ListWaitingWorkflowSteps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "steps"
        },
        ListWorkflowBuildVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowSummaryList"
        },
        ListWorkflowExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowExecutions"
        },
        ListWorkflowStepExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "steps"
        },
        ListWorkflows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowVersionList"
        }
    }
};

AWS.apiLoader.services["schemas"] = {};

AWS.Schemas = AWS.Service.defineService("schemas", [ "2019-12-02" ]);

AWS.apiLoader.services["schemas"]["2019-12-02"] = {
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "schemas",
        signingName: "schemas",
        serviceFullName: "Schemas",
        serviceId: "schemas",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "schemas-2019-12-02",
        signatureVersion: "v4"
    },
    operations: {
        CreateDiscoverer: {
            http: {
                requestUri: "/v1/discoverers",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    SourceArn: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                },
                required: [ "SourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererArn: {},
                    DiscovererId: {},
                    SourceArn: {},
                    State: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateRegistry: {
            http: {
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryArn: {},
                    RegistryName: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateSchema: {
            http: {
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Content: {},
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {}
                },
                required: [ "RegistryName", "SchemaName", "Type", "Content" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {},
                    VersionCreatedDate: {
                        shape: "Sf"
                    }
                }
            }
        },
        DeleteDiscoverer: {
            http: {
                method: "DELETE",
                requestUri: "/v1/discoverers/id/{discovererId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            }
        },
        DeleteRegistry: {
            http: {
                method: "DELETE",
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName" ]
            }
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/policy",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "querystring",
                        locationName: "registryName"
                    }
                }
            }
        },
        DeleteSchema: {
            http: {
                method: "DELETE",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    }
                },
                required: [ "RegistryName", "SchemaName" ]
            }
        },
        DeleteSchemaVersion: {
            http: {
                method: "DELETE",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/version/{schemaVersion}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "uri",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "SchemaVersion", "RegistryName", "SchemaName" ]
            }
        },
        DescribeCodeBinding: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Language: {
                        location: "uri",
                        locationName: "language"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Language" ]
            },
            output: {
                type: "structure",
                members: {
                    CreationDate: {
                        shape: "Sf"
                    },
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaVersion: {},
                    Status: {}
                }
            }
        },
        DescribeDiscoverer: {
            http: {
                method: "GET",
                requestUri: "/v1/discoverers/id/{discovererId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererArn: {},
                    DiscovererId: {},
                    SourceArn: {},
                    State: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeRegistry: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryArn: {},
                    RegistryName: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeSchema: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName" ]
            },
            output: {
                type: "structure",
                members: {
                    Content: {},
                    Description: {},
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {},
                    VersionCreatedDate: {
                        shape: "Sf"
                    }
                }
            }
        },
        ExportSchema: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/export",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Type" ]
            },
            output: {
                type: "structure",
                members: {
                    Content: {},
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Type: {}
                }
            }
        },
        GetCodeBindingSource: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}/source",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Language: {
                        location: "uri",
                        locationName: "language"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Language" ]
            },
            output: {
                type: "structure",
                members: {
                    Body: {
                        type: "blob"
                    }
                },
                payload: "Body"
            }
        },
        GetDiscoveredSchema: {
            http: {
                requestUri: "/v1/discover",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Events: {
                        type: "list",
                        member: {}
                    },
                    Type: {}
                },
                required: [ "Type", "Events" ]
            },
            output: {
                type: "structure",
                members: {
                    Content: {}
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "querystring",
                        locationName: "registryName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        jsonvalue: true
                    },
                    RevisionId: {}
                }
            }
        },
        ListDiscoverers: {
            http: {
                method: "GET",
                requestUri: "/v1/discoverers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererIdPrefix: {
                        location: "querystring",
                        locationName: "discovererIdPrefix"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    SourceArnPrefix: {
                        location: "querystring",
                        locationName: "sourceArnPrefix"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Discoverers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DiscovererArn: {},
                                DiscovererId: {},
                                SourceArn: {},
                                State: {},
                                CrossAccount: {
                                    type: "boolean"
                                },
                                Tags: {
                                    shape: "S5",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRegistries: {
            http: {
                method: "GET",
                requestUri: "/v1/registries",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryNamePrefix: {
                        location: "querystring",
                        locationName: "registryNamePrefix"
                    },
                    Scope: {
                        location: "querystring",
                        locationName: "scope"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Registries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryArn: {},
                                RegistryName: {},
                                Tags: {
                                    shape: "S5",
                                    locationName: "tags"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListSchemaVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    }
                },
                required: [ "RegistryName", "SchemaName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SchemaVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SchemaArn: {},
                                SchemaName: {},
                                SchemaVersion: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListSchemas: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaNamePrefix: {
                        location: "querystring",
                        locationName: "schemaNamePrefix"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LastModified: {
                                    shape: "Sf"
                                },
                                SchemaArn: {},
                                SchemaName: {},
                                Tags: {
                                    shape: "S5",
                                    locationName: "tags"
                                },
                                VersionCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        PutCodeBinding: {
            http: {
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Language: {
                        location: "uri",
                        locationName: "language"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Language" ]
            },
            output: {
                type: "structure",
                members: {
                    CreationDate: {
                        shape: "Sf"
                    },
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaVersion: {},
                    Status: {}
                }
            }
        },
        PutResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Policy: {
                        jsonvalue: true
                    },
                    RegistryName: {
                        location: "querystring",
                        locationName: "registryName"
                    },
                    RevisionId: {}
                },
                required: [ "Policy" ]
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        jsonvalue: true
                    },
                    RevisionId: {}
                }
            }
        },
        SearchSchemas: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Keywords: {
                        location: "querystring",
                        locationName: "keywords"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName", "Keywords" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryName: {},
                                SchemaArn: {},
                                SchemaName: {},
                                SchemaVersions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            CreatedDate: {
                                                shape: "Sf"
                                            },
                                            SchemaVersion: {},
                                            Type: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        StartDiscoverer: {
            http: {
                requestUri: "/v1/discoverers/id/{discovererId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    DiscovererId: {},
                    State: {}
                }
            }
        },
        StopDiscoverer: {
            http: {
                requestUri: "/v1/discoverers/id/{discovererId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    DiscovererId: {},
                    State: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateDiscoverer: {
            http: {
                method: "PUT",
                requestUri: "/v1/discoverers/id/{discovererId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    },
                    CrossAccount: {
                        type: "boolean"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererArn: {},
                    DiscovererId: {},
                    SourceArn: {},
                    State: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateRegistry: {
            http: {
                method: "PUT",
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryArn: {},
                    RegistryName: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateSchema: {
            http: {
                method: "PUT",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientTokenId: {
                        idempotencyToken: true
                    },
                    Content: {},
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    Type: {}
                },
                required: [ "RegistryName", "SchemaName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {},
                    VersionCreatedDate: {
                        shape: "Sf"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        Sf: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListDiscoverers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Discoverers"
        },
        ListRegistries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Registries"
        },
        ListSchemaVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "SchemaVersions"
        },
        ListSchemas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Schemas"
        },
        SearchSchemas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Schemas"
        }
    },
    waiters: {
        CodeBindingExists: {
            description: "Wait until code binding is generated",
            delay: 2,
            operation: "DescribeCodeBinding",
            maxAttempts: 30,
            acceptors: [ {
                expected: "CREATE_COMPLETE",
                matcher: "path",
                state: "success",
                argument: "Status"
            }, {
                expected: "CREATE_IN_PROGRESS",
                matcher: "path",
                state: "retry",
                argument: "Status"
            }, {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "Status"
            }, {
                matcher: "error",
                expected: "NotFoundException",
                state: "failure"
            } ]
        }
    }
};

AWS.apiLoader.services["accessanalyzer"] = {};

AWS.AccessAnalyzer = AWS.Service.defineService("accessanalyzer", [ "2019-11-01" ]);

AWS.apiLoader.services["accessanalyzer"]["2019-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-01",
        endpointPrefix: "access-analyzer",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Access Analyzer",
        serviceId: "AccessAnalyzer",
        signatureVersion: "v4",
        signingName: "access-analyzer",
        uid: "accessanalyzer-2019-11-01"
    },
    operations: {
        ApplyArchiveRule: {
            http: {
                method: "PUT",
                requestUri: "/archive-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "ruleName" ],
                members: {
                    analyzerArn: {},
                    ruleName: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            idempotent: true
        },
        CancelPolicyGeneration: {
            http: {
                method: "PUT",
                requestUri: "/policy/generation/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CheckAccessNotGranted: {
            http: {
                requestUri: "/policy/check-access-not-granted",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyDocument", "access", "policyType" ],
                members: {
                    policyDocument: {
                        shape: "S9"
                    },
                    access: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "actions" ],
                            members: {
                                actions: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    policyType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    result: {},
                    message: {},
                    reasons: {
                        shape: "Sh"
                    }
                }
            }
        },
        CheckNoNewAccess: {
            http: {
                requestUri: "/policy/check-no-new-access",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "newPolicyDocument", "existingPolicyDocument", "policyType" ],
                members: {
                    newPolicyDocument: {
                        shape: "S9"
                    },
                    existingPolicyDocument: {
                        shape: "S9"
                    },
                    policyType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    result: {},
                    message: {},
                    reasons: {
                        shape: "Sh"
                    }
                }
            }
        },
        CreateAccessPreview: {
            http: {
                method: "PUT",
                requestUri: "/access-preview",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "configurations" ],
                members: {
                    analyzerArn: {},
                    configurations: {
                        shape: "So"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            idempotent: true
        },
        CreateAnalyzer: {
            http: {
                method: "PUT",
                requestUri: "/analyzer",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "type" ],
                members: {
                    analyzerName: {},
                    type: {},
                    archiveRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ruleName", "filter" ],
                            members: {
                                ruleName: {},
                                filter: {
                                    shape: "S2t"
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S2w"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    configuration: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateArchiveRule: {
            http: {
                method: "PUT",
                requestUri: "/analyzer/{analyzerName}/archive-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "ruleName", "filter" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    ruleName: {},
                    filter: {
                        shape: "S2t"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            idempotent: true
        },
        DeleteAnalyzer: {
            http: {
                method: "DELETE",
                requestUri: "/analyzer/{analyzerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            idempotent: true
        },
        DeleteArchiveRule: {
            http: {
                method: "DELETE",
                requestUri: "/analyzer/{analyzerName}/archive-rule/{ruleName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "ruleName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            idempotent: true
        },
        GetAccessPreview: {
            http: {
                method: "GET",
                requestUri: "/access-preview/{accessPreviewId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPreviewId", "analyzerArn" ],
                members: {
                    accessPreviewId: {
                        location: "uri",
                        locationName: "accessPreviewId"
                    },
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPreview" ],
                members: {
                    accessPreview: {
                        type: "structure",
                        required: [ "id", "analyzerArn", "configurations", "createdAt", "status" ],
                        members: {
                            id: {},
                            analyzerArn: {},
                            configurations: {
                                shape: "So"
                            },
                            createdAt: {
                                shape: "S36"
                            },
                            status: {},
                            statusReason: {
                                shape: "S38"
                            }
                        }
                    }
                }
            }
        },
        GetAnalyzedResource: {
            http: {
                method: "GET",
                requestUri: "/analyzed-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "resourceArn" ],
                members: {
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    },
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resource: {
                        type: "structure",
                        required: [ "resourceArn", "resourceType", "createdAt", "analyzedAt", "updatedAt", "isPublic", "resourceOwnerAccount" ],
                        members: {
                            resourceArn: {},
                            resourceType: {},
                            createdAt: {
                                shape: "S36"
                            },
                            analyzedAt: {
                                shape: "S36"
                            },
                            updatedAt: {
                                shape: "S36"
                            },
                            isPublic: {
                                type: "boolean"
                            },
                            actions: {
                                shape: "S3f"
                            },
                            sharedVia: {
                                type: "list",
                                member: {}
                            },
                            status: {},
                            resourceOwnerAccount: {},
                            error: {}
                        }
                    }
                }
            }
        },
        GetAnalyzer: {
            http: {
                method: "GET",
                requestUri: "/analyzer/{analyzerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analyzer" ],
                members: {
                    analyzer: {
                        shape: "S3k"
                    }
                }
            }
        },
        GetArchiveRule: {
            http: {
                method: "GET",
                requestUri: "/analyzer/{analyzerName}/archive-rule/{ruleName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "ruleName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "archiveRule" ],
                members: {
                    archiveRule: {
                        shape: "S3q"
                    }
                }
            }
        },
        GetFinding: {
            http: {
                method: "GET",
                requestUri: "/finding/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "id" ],
                members: {
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    finding: {
                        type: "structure",
                        required: [ "id", "resourceType", "condition", "createdAt", "analyzedAt", "updatedAt", "status", "resourceOwnerAccount" ],
                        members: {
                            id: {},
                            principal: {
                                shape: "S3v"
                            },
                            action: {
                                shape: "S3f"
                            },
                            resource: {},
                            isPublic: {
                                type: "boolean"
                            },
                            resourceType: {},
                            condition: {
                                shape: "S3w"
                            },
                            createdAt: {
                                shape: "S36"
                            },
                            analyzedAt: {
                                shape: "S36"
                            },
                            updatedAt: {
                                shape: "S36"
                            },
                            status: {},
                            resourceOwnerAccount: {},
                            error: {},
                            sources: {
                                shape: "S3x"
                            }
                        }
                    }
                }
            }
        },
        GetFindingV2: {
            http: {
                method: "GET",
                requestUri: "/findingv2/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "id" ],
                members: {
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analyzedAt", "createdAt", "id", "resourceType", "resourceOwnerAccount", "status", "updatedAt", "findingDetails" ],
                members: {
                    analyzedAt: {
                        shape: "S36"
                    },
                    createdAt: {
                        shape: "S36"
                    },
                    error: {},
                    id: {},
                    nextToken: {},
                    resource: {},
                    resourceType: {},
                    resourceOwnerAccount: {},
                    status: {},
                    updatedAt: {
                        shape: "S36"
                    },
                    findingDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                externalAccessDetails: {
                                    type: "structure",
                                    required: [ "condition" ],
                                    members: {
                                        action: {
                                            shape: "S3f"
                                        },
                                        condition: {
                                            shape: "S3w"
                                        },
                                        isPublic: {
                                            type: "boolean"
                                        },
                                        principal: {
                                            shape: "S3v"
                                        },
                                        sources: {
                                            shape: "S3x"
                                        }
                                    }
                                },
                                unusedPermissionDetails: {
                                    type: "structure",
                                    required: [ "serviceNamespace" ],
                                    members: {
                                        actions: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "action" ],
                                                members: {
                                                    action: {},
                                                    lastAccessed: {
                                                        shape: "S36"
                                                    }
                                                }
                                            }
                                        },
                                        serviceNamespace: {},
                                        lastAccessed: {
                                            shape: "S36"
                                        }
                                    }
                                },
                                unusedIamUserAccessKeyDetails: {
                                    type: "structure",
                                    required: [ "accessKeyId" ],
                                    members: {
                                        accessKeyId: {},
                                        lastAccessed: {
                                            shape: "S36"
                                        }
                                    }
                                },
                                unusedIamRoleDetails: {
                                    type: "structure",
                                    members: {
                                        lastAccessed: {
                                            shape: "S36"
                                        }
                                    }
                                },
                                unusedIamUserPasswordDetails: {
                                    type: "structure",
                                    members: {
                                        lastAccessed: {
                                            shape: "S36"
                                        }
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    findingType: {}
                }
            }
        },
        GetGeneratedPolicy: {
            http: {
                method: "GET",
                requestUri: "/policy/generation/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    includeResourcePlaceholders: {
                        location: "querystring",
                        locationName: "includeResourcePlaceholders",
                        type: "boolean"
                    },
                    includeServiceLevelTemplate: {
                        location: "querystring",
                        locationName: "includeServiceLevelTemplate",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobDetails", "generatedPolicyResult" ],
                members: {
                    jobDetails: {
                        type: "structure",
                        required: [ "jobId", "status", "startedOn" ],
                        members: {
                            jobId: {},
                            status: {},
                            startedOn: {
                                shape: "S36"
                            },
                            completedOn: {
                                shape: "S36"
                            },
                            jobError: {
                                type: "structure",
                                required: [ "code", "message" ],
                                members: {
                                    code: {},
                                    message: {}
                                }
                            }
                        }
                    },
                    generatedPolicyResult: {
                        type: "structure",
                        required: [ "properties" ],
                        members: {
                            properties: {
                                type: "structure",
                                required: [ "principalArn" ],
                                members: {
                                    isComplete: {
                                        type: "boolean"
                                    },
                                    principalArn: {},
                                    cloudTrailProperties: {
                                        type: "structure",
                                        required: [ "trailProperties", "startTime", "endTime" ],
                                        members: {
                                            trailProperties: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "cloudTrailArn" ],
                                                    members: {
                                                        cloudTrailArn: {},
                                                        regions: {
                                                            shape: "S4r"
                                                        },
                                                        allRegions: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            startTime: {
                                                shape: "S36"
                                            },
                                            endTime: {
                                                shape: "S36"
                                            }
                                        }
                                    }
                                }
                            },
                            generatedPolicies: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "policy" ],
                                    members: {
                                        policy: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListAccessPreviewFindings: {
            http: {
                requestUri: "/access-preview/{accessPreviewId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPreviewId", "analyzerArn" ],
                members: {
                    accessPreviewId: {
                        location: "uri",
                        locationName: "accessPreviewId"
                    },
                    analyzerArn: {},
                    filter: {
                        shape: "S2t"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "resourceType", "createdAt", "changeType", "status", "resourceOwnerAccount" ],
                            members: {
                                id: {},
                                existingFindingId: {},
                                existingFindingStatus: {},
                                principal: {
                                    shape: "S3v"
                                },
                                action: {
                                    shape: "S3f"
                                },
                                condition: {
                                    shape: "S3w"
                                },
                                resource: {},
                                isPublic: {
                                    type: "boolean"
                                },
                                resourceType: {},
                                createdAt: {
                                    shape: "S36"
                                },
                                changeType: {},
                                status: {},
                                resourceOwnerAccount: {},
                                error: {},
                                sources: {
                                    shape: "S3x"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAccessPreviews: {
            http: {
                method: "GET",
                requestUri: "/access-preview",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn" ],
                members: {
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPreviews" ],
                members: {
                    accessPreviews: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "analyzerArn", "createdAt", "status" ],
                            members: {
                                id: {},
                                analyzerArn: {},
                                createdAt: {
                                    shape: "S36"
                                },
                                status: {},
                                statusReason: {
                                    shape: "S38"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAnalyzedResources: {
            http: {
                requestUri: "/analyzed-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn" ],
                members: {
                    analyzerArn: {},
                    resourceType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analyzedResources" ],
                members: {
                    analyzedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "resourceArn", "resourceOwnerAccount", "resourceType" ],
                            members: {
                                resourceArn: {},
                                resourceOwnerAccount: {},
                                resourceType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAnalyzers: {
            http: {
                method: "GET",
                requestUri: "/analyzer",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analyzers" ],
                members: {
                    analyzers: {
                        type: "list",
                        member: {
                            shape: "S3k"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListArchiveRules: {
            http: {
                method: "GET",
                requestUri: "/analyzer/{analyzerName}/archive-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "archiveRules" ],
                members: {
                    archiveRules: {
                        type: "list",
                        member: {
                            shape: "S3q"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/finding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn" ],
                members: {
                    analyzerArn: {},
                    filter: {
                        shape: "S2t"
                    },
                    sort: {
                        shape: "S5f"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "resourceType", "condition", "createdAt", "analyzedAt", "updatedAt", "status", "resourceOwnerAccount" ],
                            members: {
                                id: {},
                                principal: {
                                    shape: "S3v"
                                },
                                action: {
                                    shape: "S3f"
                                },
                                resource: {},
                                isPublic: {
                                    type: "boolean"
                                },
                                resourceType: {},
                                condition: {
                                    shape: "S3w"
                                },
                                createdAt: {
                                    shape: "S36"
                                },
                                analyzedAt: {
                                    shape: "S36"
                                },
                                updatedAt: {
                                    shape: "S36"
                                },
                                status: {},
                                resourceOwnerAccount: {},
                                error: {},
                                sources: {
                                    shape: "S3x"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFindingsV2: {
            http: {
                requestUri: "/findingv2",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn" ],
                members: {
                    analyzerArn: {},
                    filter: {
                        shape: "S2t"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sort: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "analyzedAt", "createdAt", "id", "resourceType", "resourceOwnerAccount", "status", "updatedAt" ],
                            members: {
                                analyzedAt: {
                                    shape: "S36"
                                },
                                createdAt: {
                                    shape: "S36"
                                },
                                error: {},
                                id: {},
                                resource: {},
                                resourceType: {},
                                resourceOwnerAccount: {},
                                status: {},
                                updatedAt: {
                                    shape: "S36"
                                },
                                findingType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPolicyGenerations: {
            http: {
                method: "GET",
                requestUri: "/policy/generation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    principalArn: {
                        location: "querystring",
                        locationName: "principalArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyGenerations" ],
                members: {
                    policyGenerations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobId", "principalArn", "status", "startedOn" ],
                            members: {
                                jobId: {},
                                principalArn: {},
                                status: {},
                                startedOn: {
                                    shape: "S36"
                                },
                                completedOn: {
                                    shape: "S36"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2w"
                    }
                }
            }
        },
        StartPolicyGeneration: {
            http: {
                method: "PUT",
                requestUri: "/policy/generation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyGenerationDetails" ],
                members: {
                    policyGenerationDetails: {
                        type: "structure",
                        required: [ "principalArn" ],
                        members: {
                            principalArn: {}
                        }
                    },
                    cloudTrailDetails: {
                        type: "structure",
                        required: [ "trails", "accessRole", "startTime" ],
                        members: {
                            trails: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "cloudTrailArn" ],
                                    members: {
                                        cloudTrailArn: {},
                                        regions: {
                                            shape: "S4r"
                                        },
                                        allRegions: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            },
                            accessRole: {},
                            startTime: {
                                shape: "S36"
                            },
                            endTime: {
                                shape: "S36"
                            }
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            idempotent: true
        },
        StartResourceScan: {
            http: {
                requestUri: "/resource/scan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "resourceArn" ],
                members: {
                    analyzerArn: {},
                    resourceArn: {},
                    resourceOwnerAccount: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateArchiveRule: {
            http: {
                method: "PUT",
                requestUri: "/analyzer/{analyzerName}/archive-rule/{ruleName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "ruleName", "filter" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    },
                    filter: {
                        shape: "S2t"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            idempotent: true
        },
        UpdateFindings: {
            http: {
                method: "PUT",
                requestUri: "/finding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "status" ],
                members: {
                    analyzerArn: {},
                    status: {},
                    ids: {
                        type: "list",
                        member: {}
                    },
                    resourceArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            idempotent: true
        },
        ValidatePolicy: {
            http: {
                requestUri: "/policy/validation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyDocument", "policyType" ],
                members: {
                    locale: {},
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    policyDocument: {},
                    policyType: {},
                    validatePolicyResourceType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "findingDetails", "findingType", "issueCode", "learnMoreLink", "locations" ],
                            members: {
                                findingDetails: {},
                                findingType: {},
                                issueCode: {},
                                learnMoreLink: {},
                                locations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "path", "span" ],
                                        members: {
                                            path: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        index: {
                                                            type: "integer"
                                                        },
                                                        key: {},
                                                        substring: {
                                                            type: "structure",
                                                            required: [ "start", "length" ],
                                                            members: {
                                                                start: {
                                                                    type: "integer"
                                                                },
                                                                length: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        value: {}
                                                    },
                                                    union: true
                                                }
                                            },
                                            span: {
                                                type: "structure",
                                                required: [ "start", "end" ],
                                                members: {
                                                    start: {
                                                        shape: "S6t"
                                                    },
                                                    end: {
                                                        shape: "S6t"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "string",
            sensitive: true
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    description: {},
                    statementIndex: {
                        type: "integer"
                    },
                    statementId: {}
                }
            }
        },
        So: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    ebsSnapshot: {
                        type: "structure",
                        members: {
                            userIds: {
                                type: "list",
                                member: {}
                            },
                            groups: {
                                type: "list",
                                member: {}
                            },
                            kmsKeyId: {}
                        }
                    },
                    ecrRepository: {
                        type: "structure",
                        members: {
                            repositoryPolicy: {}
                        }
                    },
                    iamRole: {
                        type: "structure",
                        members: {
                            trustPolicy: {}
                        }
                    },
                    efsFileSystem: {
                        type: "structure",
                        members: {
                            fileSystemPolicy: {}
                        }
                    },
                    kmsKey: {
                        type: "structure",
                        members: {
                            keyPolicies: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            grants: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "operations", "granteePrincipal", "issuingAccount" ],
                                    members: {
                                        operations: {
                                            type: "list",
                                            member: {}
                                        },
                                        granteePrincipal: {},
                                        retiringPrincipal: {},
                                        constraints: {
                                            type: "structure",
                                            members: {
                                                encryptionContextEquals: {
                                                    shape: "S1e"
                                                },
                                                encryptionContextSubset: {
                                                    shape: "S1e"
                                                }
                                            }
                                        },
                                        issuingAccount: {}
                                    }
                                }
                            }
                        }
                    },
                    rdsDbClusterSnapshot: {
                        type: "structure",
                        members: {
                            attributes: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        accountIds: {
                                            type: "list",
                                            member: {}
                                        }
                                    },
                                    union: true
                                }
                            },
                            kmsKeyId: {}
                        }
                    },
                    rdsDbSnapshot: {
                        type: "structure",
                        members: {
                            attributes: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        accountIds: {
                                            type: "list",
                                            member: {}
                                        }
                                    },
                                    union: true
                                }
                            },
                            kmsKeyId: {}
                        }
                    },
                    secretsManagerSecret: {
                        type: "structure",
                        members: {
                            kmsKeyId: {},
                            secretPolicy: {}
                        }
                    },
                    s3Bucket: {
                        type: "structure",
                        members: {
                            bucketPolicy: {},
                            bucketAclGrants: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "permission", "grantee" ],
                                    members: {
                                        permission: {},
                                        grantee: {
                                            type: "structure",
                                            members: {
                                                id: {},
                                                uri: {}
                                            },
                                            union: true
                                        }
                                    }
                                }
                            },
                            bucketPublicAccessBlock: {
                                shape: "S27"
                            },
                            accessPoints: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        accessPointPolicy: {},
                                        publicAccessBlock: {
                                            shape: "S27"
                                        },
                                        networkOrigin: {
                                            type: "structure",
                                            members: {
                                                vpcConfiguration: {
                                                    type: "structure",
                                                    required: [ "vpcId" ],
                                                    members: {
                                                        vpcId: {}
                                                    }
                                                },
                                                internetConfiguration: {
                                                    type: "structure",
                                                    members: {}
                                                }
                                            },
                                            union: true
                                        }
                                    }
                                }
                            }
                        }
                    },
                    snsTopic: {
                        type: "structure",
                        members: {
                            topicPolicy: {}
                        }
                    },
                    sqsQueue: {
                        type: "structure",
                        members: {
                            queuePolicy: {}
                        }
                    },
                    s3ExpressDirectoryBucket: {
                        type: "structure",
                        members: {
                            bucketPolicy: {}
                        }
                    }
                },
                union: true
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S27: {
            type: "structure",
            required: [ "ignorePublicAcls", "restrictPublicBuckets" ],
            members: {
                ignorePublicAcls: {
                    type: "boolean"
                },
                restrictPublicBuckets: {
                    type: "boolean"
                }
            }
        },
        S2t: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    eq: {
                        shape: "S2v"
                    },
                    neq: {
                        shape: "S2v"
                    },
                    contains: {
                        shape: "S2v"
                    },
                    exists: {
                        type: "boolean"
                    }
                }
            }
        },
        S2v: {
            type: "list",
            member: {}
        },
        S2w: {
            type: "map",
            key: {},
            value: {}
        },
        S2x: {
            type: "structure",
            members: {
                unusedAccess: {
                    type: "structure",
                    members: {
                        unusedAccessAge: {
                            type: "integer"
                        }
                    }
                }
            },
            union: true
        },
        S36: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S38: {
            type: "structure",
            required: [ "code" ],
            members: {
                code: {}
            }
        },
        S3f: {
            type: "list",
            member: {}
        },
        S3k: {
            type: "structure",
            required: [ "arn", "name", "type", "createdAt", "status" ],
            members: {
                arn: {},
                name: {},
                type: {},
                createdAt: {
                    shape: "S36"
                },
                lastResourceAnalyzed: {},
                lastResourceAnalyzedAt: {
                    shape: "S36"
                },
                tags: {
                    shape: "S2w"
                },
                status: {},
                statusReason: {
                    type: "structure",
                    required: [ "code" ],
                    members: {
                        code: {}
                    }
                },
                configuration: {
                    shape: "S2x"
                }
            }
        },
        S3q: {
            type: "structure",
            required: [ "ruleName", "filter", "createdAt", "updatedAt" ],
            members: {
                ruleName: {},
                filter: {
                    shape: "S2t"
                },
                createdAt: {
                    shape: "S36"
                },
                updatedAt: {
                    shape: "S36"
                }
            }
        },
        S3v: {
            type: "map",
            key: {},
            value: {}
        },
        S3w: {
            type: "map",
            key: {},
            value: {}
        },
        S3x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "type" ],
                members: {
                    type: {},
                    detail: {
                        type: "structure",
                        members: {
                            accessPointArn: {},
                            accessPointAccount: {}
                        }
                    }
                }
            }
        },
        S4r: {
            type: "list",
            member: {}
        },
        S5f: {
            type: "structure",
            members: {
                attributeName: {},
                orderBy: {}
            }
        },
        S6t: {
            type: "structure",
            required: [ "line", "column", "offset" ],
            members: {
                line: {
                    type: "integer"
                },
                column: {
                    type: "integer"
                },
                offset: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        GetFindingV2: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingDetails"
        },
        ListAccessPreviewFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListAccessPreviews: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accessPreviews"
        },
        ListAnalyzedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "analyzedResources"
        },
        ListAnalyzers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "analyzers"
        },
        ListArchiveRules: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "archiveRules"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListFindingsV2: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListPolicyGenerations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "policyGenerations"
        },
        ValidatePolicy: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        }
    }
};

AWS.apiLoader.services["codegurureviewer"] = {};

AWS.CodeGuruReviewer = AWS.Service.defineService("codegurureviewer", [ "2019-09-19" ]);

AWS.apiLoader.services["codegurureviewer"]["2019-09-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-09-19",
        endpointPrefix: "codeguru-reviewer",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "CodeGuruReviewer",
        serviceFullName: "Amazon CodeGuru Reviewer",
        serviceId: "CodeGuru Reviewer",
        signatureVersion: "v4",
        signingName: "codeguru-reviewer",
        uid: "codeguru-reviewer-2019-09-19"
    },
    operations: {
        AssociateRepository: {
            http: {
                requestUri: "/associations"
            },
            input: {
                type: "structure",
                required: [ "Repository" ],
                members: {
                    Repository: {
                        type: "structure",
                        members: {
                            CodeCommit: {
                                type: "structure",
                                required: [ "Name" ],
                                members: {
                                    Name: {}
                                }
                            },
                            Bitbucket: {
                                shape: "S5"
                            },
                            GitHubEnterpriseServer: {
                                shape: "S5"
                            },
                            S3Bucket: {
                                type: "structure",
                                required: [ "Name", "BucketName" ],
                                members: {
                                    Name: {},
                                    BucketName: {}
                                }
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    KMSKeyDetails: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociation: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        CreateCodeReview: {
            http: {
                requestUri: "/codereviews"
            },
            input: {
                type: "structure",
                required: [ "Name", "RepositoryAssociationArn", "Type" ],
                members: {
                    Name: {},
                    RepositoryAssociationArn: {},
                    Type: {
                        type: "structure",
                        required: [ "RepositoryAnalysis" ],
                        members: {
                            RepositoryAnalysis: {
                                type: "structure",
                                members: {
                                    RepositoryHead: {
                                        shape: "Sy"
                                    },
                                    SourceCodeType: {
                                        shape: "S10"
                                    }
                                }
                            },
                            AnalysisTypes: {
                                shape: "S1c"
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeReview: {
                        shape: "S1f"
                    }
                }
            }
        },
        DescribeCodeReview: {
            http: {
                method: "GET",
                requestUri: "/codereviews/{CodeReviewArn}"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn" ],
                members: {
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeReview: {
                        shape: "S1f"
                    }
                }
            }
        },
        DescribeRecommendationFeedback: {
            http: {
                method: "GET",
                requestUri: "/feedback/{CodeReviewArn}"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn", "RecommendationId" ],
                members: {
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    },
                    RecommendationId: {
                        location: "querystring",
                        locationName: "RecommendationId"
                    },
                    UserId: {
                        location: "querystring",
                        locationName: "UserId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecommendationFeedback: {
                        type: "structure",
                        members: {
                            CodeReviewArn: {},
                            RecommendationId: {},
                            Reactions: {
                                shape: "S1u"
                            },
                            UserId: {},
                            CreatedTimeStamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimeStamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeRepositoryAssociation: {
            http: {
                method: "GET",
                requestUri: "/associations/{AssociationArn}"
            },
            input: {
                type: "structure",
                required: [ "AssociationArn" ],
                members: {
                    AssociationArn: {
                        location: "uri",
                        locationName: "AssociationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociation: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DisassociateRepository: {
            http: {
                method: "DELETE",
                requestUri: "/associations/{AssociationArn}"
            },
            input: {
                type: "structure",
                required: [ "AssociationArn" ],
                members: {
                    AssociationArn: {
                        location: "uri",
                        locationName: "AssociationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociation: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListCodeReviews: {
            http: {
                method: "GET",
                requestUri: "/codereviews"
            },
            input: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    ProviderTypes: {
                        shape: "S21",
                        location: "querystring",
                        locationName: "ProviderTypes"
                    },
                    States: {
                        location: "querystring",
                        locationName: "States",
                        type: "list",
                        member: {}
                    },
                    RepositoryNames: {
                        location: "querystring",
                        locationName: "RepositoryNames",
                        type: "list",
                        member: {}
                    },
                    Type: {
                        location: "querystring",
                        locationName: "Type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeReviewSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                CodeReviewArn: {},
                                RepositoryName: {},
                                Owner: {},
                                ProviderType: {},
                                State: {},
                                CreatedTimeStamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimeStamp: {
                                    type: "timestamp"
                                },
                                Type: {},
                                PullRequestId: {},
                                MetricsSummary: {
                                    type: "structure",
                                    members: {
                                        MeteredLinesOfCodeCount: {
                                            type: "long"
                                        },
                                        SuppressedLinesOfCodeCount: {
                                            type: "long"
                                        },
                                        FindingsCount: {
                                            type: "long"
                                        }
                                    }
                                },
                                SourceCodeType: {
                                    shape: "S10"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecommendationFeedback: {
            http: {
                method: "GET",
                requestUri: "/feedback/{CodeReviewArn}/RecommendationFeedback"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    },
                    UserIds: {
                        location: "querystring",
                        locationName: "UserIds",
                        type: "list",
                        member: {}
                    },
                    RecommendationIds: {
                        location: "querystring",
                        locationName: "RecommendationIds",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecommendationFeedbackSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecommendationId: {},
                                Reactions: {
                                    shape: "S1u"
                                },
                                UserId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecommendations: {
            http: {
                method: "GET",
                requestUri: "/codereviews/{CodeReviewArn}/Recommendations"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecommendationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FilePath: {},
                                RecommendationId: {},
                                StartLine: {
                                    type: "integer"
                                },
                                EndLine: {
                                    type: "integer"
                                },
                                Description: {},
                                RecommendationCategory: {},
                                RuleMetadata: {
                                    type: "structure",
                                    members: {
                                        RuleId: {},
                                        RuleName: {},
                                        ShortDescription: {},
                                        LongDescription: {},
                                        RuleTags: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                Severity: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRepositoryAssociations: {
            http: {
                method: "GET",
                requestUri: "/associations"
            },
            input: {
                type: "structure",
                members: {
                    ProviderTypes: {
                        shape: "S21",
                        location: "querystring",
                        locationName: "ProviderType"
                    },
                    States: {
                        location: "querystring",
                        locationName: "State",
                        type: "list",
                        member: {}
                    },
                    Names: {
                        location: "querystring",
                        locationName: "Name",
                        type: "list",
                        member: {}
                    },
                    Owners: {
                        location: "querystring",
                        locationName: "Owner",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationArn: {},
                                ConnectionArn: {},
                                LastUpdatedTimeStamp: {
                                    type: "timestamp"
                                },
                                AssociationId: {},
                                Name: {},
                                Owner: {},
                                ProviderType: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        PutRecommendationFeedback: {
            http: {
                method: "PUT",
                requestUri: "/feedback"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn", "RecommendationId", "Reactions" ],
                members: {
                    CodeReviewArn: {},
                    RecommendationId: {},
                    Reactions: {
                        shape: "S1u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "Tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "TagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "Name", "ConnectionArn", "Owner" ],
            members: {
                Name: {},
                ConnectionArn: {},
                Owner: {}
            }
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Se: {
            type: "structure",
            members: {
                KMSKeyId: {},
                EncryptionOption: {}
            }
        },
        Si: {
            type: "structure",
            members: {
                AssociationId: {},
                AssociationArn: {},
                ConnectionArn: {},
                Name: {},
                Owner: {},
                ProviderType: {},
                State: {},
                StateReason: {},
                LastUpdatedTimeStamp: {
                    type: "timestamp"
                },
                CreatedTimeStamp: {
                    type: "timestamp"
                },
                KMSKeyDetails: {
                    shape: "Se"
                },
                S3RepositoryDetails: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                BucketName: {},
                CodeArtifacts: {
                    type: "structure",
                    required: [ "SourceCodeArtifactsObjectKey" ],
                    members: {
                        SourceCodeArtifactsObjectKey: {},
                        BuildArtifactsObjectKey: {}
                    }
                }
            }
        },
        Sy: {
            type: "structure",
            required: [ "BranchName" ],
            members: {
                BranchName: {}
            }
        },
        S10: {
            type: "structure",
            members: {
                CommitDiff: {
                    type: "structure",
                    members: {
                        SourceCommit: {},
                        DestinationCommit: {},
                        MergeBaseCommit: {}
                    }
                },
                RepositoryHead: {
                    shape: "Sy"
                },
                BranchDiff: {
                    type: "structure",
                    required: [ "SourceBranchName", "DestinationBranchName" ],
                    members: {
                        SourceBranchName: {},
                        DestinationBranchName: {}
                    }
                },
                S3BucketRepository: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {},
                        Details: {
                            shape: "Sp"
                        }
                    }
                },
                RequestMetadata: {
                    type: "structure",
                    members: {
                        RequestId: {},
                        Requester: {},
                        EventInfo: {
                            type: "structure",
                            members: {
                                Name: {},
                                State: {}
                            }
                        },
                        VendorName: {}
                    }
                }
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "structure",
            members: {
                Name: {},
                CodeReviewArn: {},
                RepositoryName: {},
                Owner: {},
                ProviderType: {},
                State: {},
                StateReason: {},
                CreatedTimeStamp: {
                    type: "timestamp"
                },
                LastUpdatedTimeStamp: {
                    type: "timestamp"
                },
                Type: {},
                PullRequestId: {},
                SourceCodeType: {
                    shape: "S10"
                },
                AssociationArn: {},
                Metrics: {
                    type: "structure",
                    members: {
                        MeteredLinesOfCodeCount: {
                            type: "long"
                        },
                        SuppressedLinesOfCodeCount: {
                            type: "long"
                        },
                        FindingsCount: {
                            type: "long"
                        }
                    }
                },
                AnalysisTypes: {
                    shape: "S1c"
                },
                ConfigFileState: {}
            }
        },
        S1u: {
            type: "list",
            member: {}
        },
        S21: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListCodeReviews: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRecommendationFeedback: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRecommendations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRepositoryAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RepositoryAssociationSummaries"
        }
    },
    waiters: {
        RepositoryAssociationSucceeded: {
            description: "Wait until a repository association is complete.",
            operation: "DescribeRepositoryAssociation",
            delay: 10,
            maxAttempts: 30,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "RepositoryAssociation.State",
                expected: "Associated"
            }, {
                state: "failure",
                matcher: "path",
                argument: "RepositoryAssociation.State",
                expected: "Failed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "RepositoryAssociation.State",
                expected: "Associating"
            } ]
        },
        CodeReviewCompleted: {
            description: "Wait until a code review is complete.",
            operation: "DescribeCodeReview",
            delay: 10,
            maxAttempts: 180,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "CodeReview.State",
                expected: "Completed"
            }, {
                state: "failure",
                matcher: "path",
                argument: "CodeReview.State",
                expected: "Failed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "CodeReview.State",
                expected: "Pending"
            } ]
        }
    }
};

AWS.apiLoader.services["codeguruprofiler"] = {};

AWS.CodeGuruProfiler = AWS.Service.defineService("codeguruprofiler", [ "2019-07-18" ]);

AWS.apiLoader.services["codeguruprofiler"]["2019-07-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-18",
        endpointPrefix: "codeguru-profiler",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CodeGuru Profiler",
        serviceId: "CodeGuruProfiler",
        signatureVersion: "v4",
        signingName: "codeguru-profiler",
        uid: "codeguruprofiler-2019-07-18"
    },
    operations: {
        AddNotificationChannels: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/notificationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channels", "profilingGroupName" ],
                members: {
                    channels: {
                        shape: "S2"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    notificationConfiguration: {
                        shape: "Sa"
                    }
                }
            }
        },
        BatchGetFrameMetricData: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/frames/-/metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    frameMetrics: {
                        type: "list",
                        member: {
                            shape: "Se"
                        }
                    },
                    period: {
                        location: "querystring",
                        locationName: "period"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    },
                    targetResolution: {
                        location: "querystring",
                        locationName: "targetResolution"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "endTime", "endTimes", "frameMetricData", "resolution", "startTime", "unprocessedEndTimes" ],
                members: {
                    endTime: {
                        shape: "Sc"
                    },
                    endTimes: {
                        shape: "Sl"
                    },
                    frameMetricData: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "frameMetric", "values" ],
                            members: {
                                frameMetric: {
                                    shape: "Se"
                                },
                                values: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    resolution: {},
                    startTime: {
                        shape: "Sc"
                    },
                    unprocessedEndTimes: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "Sl"
                        }
                    }
                }
            }
        },
        ConfigureAgent: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/configureAgent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    fleetInstanceId: {},
                    metadata: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuration" ],
                members: {
                    configuration: {
                        type: "structure",
                        required: [ "periodInSeconds", "shouldProfile" ],
                        members: {
                            agentParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            periodInSeconds: {
                                type: "integer"
                            },
                            shouldProfile: {
                                type: "boolean"
                            }
                        }
                    }
                },
                payload: "configuration"
            }
        },
        CreateProfilingGroup: {
            http: {
                requestUri: "/profilingGroups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "clientToken", "profilingGroupName" ],
                members: {
                    agentOrchestrationConfig: {
                        shape: "S13"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    computePlatform: {},
                    profilingGroupName: {},
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroup" ],
                members: {
                    profilingGroup: {
                        shape: "S18"
                    }
                },
                payload: "profilingGroup"
            },
            idempotent: true
        },
        DeleteProfilingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/profilingGroups/{profilingGroupName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeProfilingGroup: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroup" ],
                members: {
                    profilingGroup: {
                        shape: "S18"
                    }
                },
                payload: "profilingGroup"
            }
        },
        GetFindingsReportAccountSummary: {
            http: {
                method: "GET",
                requestUri: "/internal/findingsReports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    dailyReportsOnly: {
                        location: "querystring",
                        locationName: "dailyReportsOnly",
                        type: "boolean"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "reportSummaries" ],
                members: {
                    nextToken: {},
                    reportSummaries: {
                        shape: "S1k"
                    }
                }
            }
        },
        GetNotificationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/notificationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "notificationConfiguration" ],
                members: {
                    notificationConfiguration: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetPolicy: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policy", "revisionId" ],
                members: {
                    policy: {},
                    revisionId: {}
                }
            }
        },
        GetProfile: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/profile",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    maxDepth: {
                        location: "querystring",
                        locationName: "maxDepth",
                        type: "integer"
                    },
                    period: {
                        location: "querystring",
                        locationName: "period"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentType", "profile" ],
                members: {
                    contentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    profile: {
                        type: "blob"
                    }
                },
                payload: "profile"
            }
        },
        GetRecommendations: {
            http: {
                method: "GET",
                requestUri: "/internal/profilingGroups/{profilingGroupName}/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "profilingGroupName", "startTime" ],
                members: {
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    locale: {
                        location: "querystring",
                        locationName: "locale"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "anomalies", "profileEndTime", "profileStartTime", "profilingGroupName", "recommendations" ],
                members: {
                    anomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "instances", "metric", "reason" ],
                            members: {
                                instances: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "id", "startTime" ],
                                        members: {
                                            endTime: {
                                                shape: "Sc"
                                            },
                                            id: {},
                                            startTime: {
                                                shape: "Sc"
                                            },
                                            userFeedback: {
                                                type: "structure",
                                                required: [ "type" ],
                                                members: {
                                                    type: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                metric: {
                                    type: "structure",
                                    required: [ "frameName", "threadStates", "type" ],
                                    members: {
                                        frameName: {},
                                        threadStates: {
                                            shape: "S26"
                                        },
                                        type: {}
                                    }
                                },
                                reason: {}
                            }
                        }
                    },
                    profileEndTime: {
                        shape: "Sc"
                    },
                    profileStartTime: {
                        shape: "Sc"
                    },
                    profilingGroupName: {},
                    recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "allMatchesCount", "allMatchesSum", "endTime", "pattern", "startTime", "topMatches" ],
                            members: {
                                allMatchesCount: {
                                    type: "integer"
                                },
                                allMatchesSum: {
                                    type: "double"
                                },
                                endTime: {
                                    shape: "Sc"
                                },
                                pattern: {
                                    type: "structure",
                                    members: {
                                        countersToAggregate: {
                                            shape: "S26"
                                        },
                                        description: {},
                                        id: {},
                                        name: {},
                                        resolutionSteps: {},
                                        targetFrames: {
                                            type: "list",
                                            member: {
                                                type: "list",
                                                member: {}
                                            }
                                        },
                                        thresholdPercent: {
                                            type: "double"
                                        }
                                    }
                                },
                                startTime: {
                                    shape: "Sc"
                                },
                                topMatches: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            frameAddress: {},
                                            targetFramesIndex: {
                                                type: "integer"
                                            },
                                            thresholdBreachValue: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListFindingsReports: {
            http: {
                method: "GET",
                requestUri: "/internal/profilingGroups/{profilingGroupName}/findingsReports",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "profilingGroupName", "startTime" ],
                members: {
                    dailyReportsOnly: {
                        location: "querystring",
                        locationName: "dailyReportsOnly",
                        type: "boolean"
                    },
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "findingsReportSummaries" ],
                members: {
                    findingsReportSummaries: {
                        shape: "S1k"
                    },
                    nextToken: {}
                }
            }
        },
        ListProfileTimes: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/profileTimes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "period", "profilingGroupName", "startTime" ],
                members: {
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    orderBy: {
                        location: "querystring",
                        locationName: "orderBy"
                    },
                    period: {
                        location: "querystring",
                        locationName: "period"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profileTimes" ],
                members: {
                    nextToken: {},
                    profileTimes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                start: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProfilingGroups: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    includeDescription: {
                        location: "querystring",
                        locationName: "includeDescription",
                        type: "boolean"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroupNames" ],
                members: {
                    nextToken: {},
                    profilingGroupNames: {
                        type: "list",
                        member: {}
                    },
                    profilingGroups: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        PostAgentProfile: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/agentProfile",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "agentProfile", "contentType", "profilingGroupName" ],
                members: {
                    agentProfile: {
                        type: "blob"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    profileToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "profileToken"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                },
                payload: "agentProfile"
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutPermission: {
            http: {
                method: "PUT",
                requestUri: "/profilingGroups/{profilingGroupName}/policy/{actionGroup}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "actionGroup", "principals", "profilingGroupName" ],
                members: {
                    actionGroup: {
                        location: "uri",
                        locationName: "actionGroup"
                    },
                    principals: {
                        type: "list",
                        member: {}
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    revisionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy", "revisionId" ],
                members: {
                    policy: {},
                    revisionId: {}
                }
            },
            idempotent: true
        },
        RemoveNotificationChannel: {
            http: {
                method: "DELETE",
                requestUri: "/profilingGroups/{profilingGroupName}/notificationConfiguration/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "profilingGroupName" ],
                members: {
                    channelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    notificationConfiguration: {
                        shape: "Sa"
                    }
                }
            },
            idempotent: true
        },
        RemovePermission: {
            http: {
                method: "DELETE",
                requestUri: "/profilingGroups/{profilingGroupName}/policy/{actionGroup}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "actionGroup", "profilingGroupName", "revisionId" ],
                members: {
                    actionGroup: {
                        location: "uri",
                        locationName: "actionGroup"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    revisionId: {
                        location: "querystring",
                        locationName: "revisionId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policy", "revisionId" ],
                members: {
                    policy: {},
                    revisionId: {}
                }
            }
        },
        SubmitFeedback: {
            http: {
                requestUri: "/internal/profilingGroups/{profilingGroupName}/anomalies/{anomalyInstanceId}/feedback",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "anomalyInstanceId", "profilingGroupName", "type" ],
                members: {
                    anomalyInstanceId: {
                        location: "uri",
                        locationName: "anomalyInstanceId"
                    },
                    comment: {},
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateProfilingGroup: {
            http: {
                method: "PUT",
                requestUri: "/profilingGroups/{profilingGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentOrchestrationConfig", "profilingGroupName" ],
                members: {
                    agentOrchestrationConfig: {
                        shape: "S13"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroup" ],
                members: {
                    profilingGroup: {
                        shape: "S18"
                    }
                },
                payload: "profilingGroup"
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventPublishers", "uri" ],
                members: {
                    eventPublishers: {
                        type: "list",
                        member: {}
                    },
                    id: {},
                    uri: {}
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                channels: {
                    shape: "S2"
                }
            }
        },
        Sc: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Se: {
            type: "structure",
            required: [ "frameName", "threadStates", "type" ],
            members: {
                frameName: {},
                threadStates: {
                    type: "list",
                    member: {}
                },
                type: {}
            }
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "value" ],
                members: {
                    value: {
                        shape: "Sc"
                    }
                }
            }
        },
        S13: {
            type: "structure",
            required: [ "profilingEnabled" ],
            members: {
                profilingEnabled: {
                    type: "boolean"
                }
            }
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S18: {
            type: "structure",
            members: {
                agentOrchestrationConfig: {
                    shape: "S13"
                },
                arn: {},
                computePlatform: {},
                createdAt: {
                    shape: "Sc"
                },
                name: {},
                profilingStatus: {
                    type: "structure",
                    members: {
                        latestAgentOrchestratedAt: {
                            shape: "Sc"
                        },
                        latestAgentProfileReportedAt: {
                            shape: "Sc"
                        },
                        latestAggregatedProfile: {
                            type: "structure",
                            members: {
                                period: {},
                                start: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                },
                tags: {
                    shape: "S16"
                },
                updatedAt: {
                    shape: "Sc"
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    profileEndTime: {
                        shape: "Sc"
                    },
                    profileStartTime: {
                        shape: "Sc"
                    },
                    profilingGroupName: {},
                    totalNumberOfFindings: {
                        type: "integer"
                    }
                }
            }
        },
        S26: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetFindingsReportAccountSummary: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFindingsReports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListProfileTimes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "profileTimes"
        },
        ListProfilingGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["computeoptimizer"] = {};

AWS.ComputeOptimizer = AWS.Service.defineService("computeoptimizer", [ "2019-11-01" ]);

AWS.apiLoader.services["computeoptimizer"]["2019-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-01",
        endpointPrefix: "compute-optimizer",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS Compute Optimizer",
        serviceId: "Compute Optimizer",
        signatureVersion: "v4",
        signingName: "compute-optimizer",
        targetPrefix: "ComputeOptimizerService",
        uid: "compute-optimizer-2019-11-01"
    },
    operations: {
        DeleteRecommendationPreferences: {
            input: {
                type: "structure",
                required: [ "resourceType", "recommendationPreferenceNames" ],
                members: {
                    resourceType: {},
                    scope: {
                        shape: "S3"
                    },
                    recommendationPreferenceNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeRecommendationExportJobs: {
            input: {
                type: "structure",
                members: {
                    jobIds: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "Sf"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendationExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                destination: {
                                    type: "structure",
                                    members: {
                                        s3: {
                                            shape: "Sn"
                                        }
                                    }
                                },
                                resourceType: {},
                                status: {},
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                lastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ExportAutoScalingGroupRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    filters: {
                        shape: "Sy"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "S13"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    },
                    recommendationPreferences: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sn"
                    }
                }
            }
        },
        ExportEBSVolumeRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    filters: {
                        shape: "S1c"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "S13"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sn"
                    }
                }
            }
        },
        ExportEC2InstanceRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    filters: {
                        shape: "Sy"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "S13"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    },
                    recommendationPreferences: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sn"
                    }
                }
            }
        },
        ExportECSServiceRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    filters: {
                        shape: "S1n"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "S13"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sn"
                    }
                }
            }
        },
        ExportLambdaFunctionRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    filters: {
                        shape: "S1u"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "S13"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sn"
                    }
                }
            }
        },
        ExportLicenseRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    filters: {
                        shape: "S21"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "S13"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetAutoScalingGroupRecommendations: {
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    autoScalingGroupArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "Sy"
                    },
                    recommendationPreferences: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    autoScalingGroupRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                autoScalingGroupArn: {},
                                autoScalingGroupName: {},
                                finding: {},
                                utilizationMetrics: {
                                    shape: "S2f"
                                },
                                lookBackPeriodInDays: {
                                    type: "double"
                                },
                                currentConfiguration: {
                                    shape: "S2l"
                                },
                                recommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            configuration: {
                                                shape: "S2l"
                                            },
                                            projectedUtilizationMetrics: {
                                                shape: "S2s"
                                            },
                                            performanceRisk: {
                                                type: "double"
                                            },
                                            rank: {
                                                type: "integer"
                                            },
                                            savingsOpportunity: {
                                                shape: "S2v"
                                            },
                                            migrationEffort: {},
                                            instanceGpuInfo: {
                                                shape: "S31"
                                            },
                                            savingsOpportunityAfterDiscounts: {
                                                type: "structure",
                                                members: {
                                                    savingsOpportunityPercentage: {
                                                        type: "double"
                                                    },
                                                    estimatedMonthlySavings: {
                                                        type: "structure",
                                                        members: {
                                                            currency: {},
                                                            value: {
                                                                type: "double"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                currentPerformanceRisk: {},
                                effectiveRecommendationPreferences: {
                                    shape: "S3a"
                                },
                                inferredWorkloadTypes: {
                                    shape: "S3t"
                                },
                                currentInstanceGpuInfo: {
                                    shape: "S31"
                                }
                            }
                        }
                    },
                    errors: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetEBSVolumeRecommendations: {
            input: {
                type: "structure",
                members: {
                    volumeArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S1c"
                    },
                    accountIds: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    volumeRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                volumeArn: {},
                                accountId: {},
                                currentConfiguration: {
                                    shape: "S46"
                                },
                                finding: {},
                                utilizationMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                lookBackPeriodInDays: {
                                    type: "double"
                                },
                                volumeRecommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            configuration: {
                                                shape: "S46"
                                            },
                                            performanceRisk: {
                                                type: "double"
                                            },
                                            rank: {
                                                type: "integer"
                                            },
                                            savingsOpportunity: {
                                                shape: "S2v"
                                            },
                                            savingsOpportunityAfterDiscounts: {
                                                type: "structure",
                                                members: {
                                                    savingsOpportunityPercentage: {
                                                        type: "double"
                                                    },
                                                    estimatedMonthlySavings: {
                                                        type: "structure",
                                                        members: {
                                                            currency: {},
                                                            value: {
                                                                type: "double"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                currentPerformanceRisk: {},
                                tags: {
                                    shape: "S4m"
                                },
                                effectiveRecommendationPreferences: {
                                    type: "structure",
                                    members: {
                                        savingsEstimationMode: {
                                            type: "structure",
                                            members: {
                                                source: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    errors: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetEC2InstanceRecommendations: {
            input: {
                type: "structure",
                members: {
                    instanceArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "Sy"
                    },
                    accountIds: {
                        shape: "Sw"
                    },
                    recommendationPreferences: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    instanceRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                instanceArn: {},
                                accountId: {},
                                instanceName: {},
                                currentInstanceType: {},
                                finding: {},
                                findingReasonCodes: {
                                    type: "list",
                                    member: {}
                                },
                                utilizationMetrics: {
                                    shape: "S2f"
                                },
                                lookBackPeriodInDays: {
                                    type: "double"
                                },
                                recommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            instanceType: {},
                                            projectedUtilizationMetrics: {
                                                shape: "S2s"
                                            },
                                            platformDifferences: {
                                                type: "list",
                                                member: {}
                                            },
                                            performanceRisk: {
                                                type: "double"
                                            },
                                            rank: {
                                                type: "integer"
                                            },
                                            savingsOpportunity: {
                                                shape: "S2v"
                                            },
                                            migrationEffort: {},
                                            instanceGpuInfo: {
                                                shape: "S31"
                                            },
                                            savingsOpportunityAfterDiscounts: {
                                                type: "structure",
                                                members: {
                                                    savingsOpportunityPercentage: {
                                                        type: "double"
                                                    },
                                                    estimatedMonthlySavings: {
                                                        type: "structure",
                                                        members: {
                                                            currency: {},
                                                            value: {
                                                                type: "double"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                recommendationSources: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            recommendationSourceArn: {},
                                            recommendationSourceType: {}
                                        }
                                    }
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                currentPerformanceRisk: {},
                                effectiveRecommendationPreferences: {
                                    shape: "S3a"
                                },
                                inferredWorkloadTypes: {
                                    shape: "S3t"
                                },
                                instanceState: {},
                                tags: {
                                    shape: "S4m"
                                },
                                externalMetricStatus: {
                                    type: "structure",
                                    members: {
                                        statusCode: {},
                                        statusReason: {}
                                    }
                                },
                                currentInstanceGpuInfo: {
                                    shape: "S31"
                                },
                                idle: {}
                            }
                        }
                    },
                    errors: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetEC2RecommendationProjectedMetrics: {
            input: {
                type: "structure",
                required: [ "instanceArn", "stat", "period", "startTime", "endTime" ],
                members: {
                    instanceArn: {},
                    stat: {},
                    period: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    recommendationPreferences: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendedOptionProjectedMetrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                recommendedInstanceType: {},
                                rank: {
                                    type: "integer"
                                },
                                projectedMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            timestamps: {
                                                shape: "S5r"
                                            },
                                            values: {
                                                shape: "S5s"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetECSServiceRecommendationProjectedMetrics: {
            input: {
                type: "structure",
                required: [ "serviceArn", "stat", "period", "startTime", "endTime" ],
                members: {
                    serviceArn: {},
                    stat: {},
                    period: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendedOptionProjectedMetrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                recommendedCpuUnits: {
                                    type: "integer"
                                },
                                recommendedMemorySize: {
                                    type: "integer"
                                },
                                projectedMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            timestamps: {
                                                shape: "S5r"
                                            },
                                            upperBoundValues: {
                                                shape: "S5s"
                                            },
                                            lowerBoundValues: {
                                                shape: "S5s"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetECSServiceRecommendations: {
            input: {
                type: "structure",
                members: {
                    serviceArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S1n"
                    },
                    accountIds: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    ecsServiceRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                serviceArn: {},
                                accountId: {},
                                currentServiceConfiguration: {
                                    type: "structure",
                                    members: {
                                        memory: {
                                            type: "integer"
                                        },
                                        cpu: {
                                            type: "integer"
                                        },
                                        containerConfigurations: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    containerName: {},
                                                    memorySizeConfiguration: {
                                                        shape: "S6e"
                                                    },
                                                    cpu: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        },
                                        autoScalingConfiguration: {},
                                        taskDefinitionArn: {}
                                    }
                                },
                                utilizationMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                lookbackPeriodInDays: {
                                    type: "double"
                                },
                                launchType: {},
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                finding: {},
                                findingReasonCodes: {
                                    type: "list",
                                    member: {}
                                },
                                serviceRecommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            memory: {
                                                type: "integer"
                                            },
                                            cpu: {
                                                type: "integer"
                                            },
                                            savingsOpportunity: {
                                                shape: "S2v"
                                            },
                                            projectedUtilizationMetrics: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        name: {},
                                                        statistic: {},
                                                        lowerBoundValue: {
                                                            type: "double"
                                                        },
                                                        upperBoundValue: {
                                                            type: "double"
                                                        }
                                                    }
                                                }
                                            },
                                            containerRecommendations: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        containerName: {},
                                                        memorySizeConfiguration: {
                                                            shape: "S6e"
                                                        },
                                                        cpu: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            savingsOpportunityAfterDiscounts: {
                                                type: "structure",
                                                members: {
                                                    savingsOpportunityPercentage: {
                                                        type: "double"
                                                    },
                                                    estimatedMonthlySavings: {
                                                        type: "structure",
                                                        members: {
                                                            currency: {},
                                                            value: {
                                                                type: "double"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                currentPerformanceRisk: {},
                                tags: {
                                    shape: "S4m"
                                },
                                effectiveRecommendationPreferences: {
                                    type: "structure",
                                    members: {
                                        savingsEstimationMode: {
                                            type: "structure",
                                            members: {
                                                source: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    errors: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetEffectiveRecommendationPreferences: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    enhancedInfrastructureMetrics: {},
                    externalMetricsPreference: {
                        shape: "S3d"
                    },
                    lookBackPeriod: {},
                    utilizationPreferences: {
                        shape: "S3g"
                    },
                    preferredResources: {
                        shape: "S3m"
                    }
                }
            }
        },
        GetEnrollmentStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    statusReason: {},
                    memberAccountsEnrolled: {
                        type: "boolean"
                    },
                    lastUpdatedTimestamp: {
                        type: "timestamp"
                    },
                    numberOfMemberAccountsOptedIn: {
                        type: "integer"
                    }
                }
            }
        },
        GetEnrollmentStatusesForOrganization: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "Sf"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accountEnrollmentStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                status: {},
                                statusReason: {},
                                lastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetLambdaFunctionRecommendations: {
            input: {
                type: "structure",
                members: {
                    functionArns: {
                        type: "list",
                        member: {}
                    },
                    accountIds: {
                        shape: "Sw"
                    },
                    filters: {
                        shape: "S1u"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    lambdaFunctionRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                functionArn: {},
                                functionVersion: {},
                                accountId: {},
                                currentMemorySize: {
                                    type: "integer"
                                },
                                numberOfInvocations: {
                                    type: "long"
                                },
                                utilizationMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                lookbackPeriodInDays: {
                                    type: "double"
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                finding: {},
                                findingReasonCodes: {
                                    type: "list",
                                    member: {}
                                },
                                memorySizeRecommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            rank: {
                                                type: "integer"
                                            },
                                            memorySize: {
                                                type: "integer"
                                            },
                                            projectedUtilizationMetrics: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        name: {},
                                                        statistic: {},
                                                        value: {
                                                            type: "double"
                                                        }
                                                    }
                                                }
                                            },
                                            savingsOpportunity: {
                                                shape: "S2v"
                                            },
                                            savingsOpportunityAfterDiscounts: {
                                                type: "structure",
                                                members: {
                                                    savingsOpportunityPercentage: {
                                                        type: "double"
                                                    },
                                                    estimatedMonthlySavings: {
                                                        type: "structure",
                                                        members: {
                                                            currency: {},
                                                            value: {
                                                                type: "double"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                currentPerformanceRisk: {},
                                tags: {
                                    shape: "S4m"
                                },
                                effectiveRecommendationPreferences: {
                                    type: "structure",
                                    members: {
                                        savingsEstimationMode: {
                                            type: "structure",
                                            members: {
                                                source: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetLicenseRecommendations: {
            input: {
                type: "structure",
                members: {
                    resourceArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S21"
                    },
                    accountIds: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    licenseRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceArn: {},
                                accountId: {},
                                currentLicenseConfiguration: {
                                    type: "structure",
                                    members: {
                                        numberOfCores: {
                                            type: "integer"
                                        },
                                        instanceType: {},
                                        operatingSystem: {},
                                        licenseEdition: {},
                                        licenseName: {},
                                        licenseModel: {},
                                        licenseVersion: {},
                                        metricsSource: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    provider: {},
                                                    providerArn: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                lookbackPeriodInDays: {
                                    type: "double"
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                finding: {},
                                findingReasonCodes: {
                                    type: "list",
                                    member: {}
                                },
                                licenseRecommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            rank: {
                                                type: "integer"
                                            },
                                            operatingSystem: {},
                                            licenseEdition: {},
                                            licenseModel: {},
                                            savingsOpportunity: {
                                                shape: "S2v"
                                            }
                                        }
                                    }
                                },
                                tags: {
                                    shape: "S4m"
                                }
                            }
                        }
                    },
                    errors: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetRecommendationPreferences: {
            input: {
                type: "structure",
                required: [ "resourceType" ],
                members: {
                    resourceType: {},
                    scope: {
                        shape: "S3"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    recommendationPreferencesDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                scope: {
                                    shape: "S3"
                                },
                                resourceType: {},
                                enhancedInfrastructureMetrics: {},
                                inferredWorkloadTypes: {},
                                externalMetricsPreference: {
                                    shape: "S3d"
                                },
                                lookBackPeriod: {},
                                utilizationPreferences: {
                                    shape: "S3g"
                                },
                                preferredResources: {
                                    shape: "S3m"
                                },
                                savingsEstimationMode: {}
                            }
                        }
                    }
                }
            }
        },
        GetRecommendationSummaries: {
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "Sw"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    recommendationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                summaries: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {
                                                type: "double"
                                            },
                                            reasonCodeSummaries: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        name: {},
                                                        value: {
                                                            type: "double"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                recommendationResourceType: {},
                                accountId: {},
                                savingsOpportunity: {
                                    shape: "S2v"
                                },
                                currentPerformanceRiskRatings: {
                                    type: "structure",
                                    members: {
                                        high: {
                                            type: "long"
                                        },
                                        medium: {
                                            type: "long"
                                        },
                                        low: {
                                            type: "long"
                                        },
                                        veryLow: {
                                            type: "long"
                                        }
                                    }
                                },
                                inferredWorkloadSavings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            inferredWorkloadTypes: {
                                                shape: "S3t"
                                            },
                                            estimatedMonthlySavings: {
                                                shape: "S2x"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        PutRecommendationPreferences: {
            input: {
                type: "structure",
                required: [ "resourceType" ],
                members: {
                    resourceType: {},
                    scope: {
                        shape: "S3"
                    },
                    enhancedInfrastructureMetrics: {},
                    inferredWorkloadTypes: {},
                    externalMetricsPreference: {
                        shape: "S3d"
                    },
                    lookBackPeriod: {},
                    utilizationPreferences: {
                        shape: "S3g"
                    },
                    preferredResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                includeList: {
                                    shape: "S3p"
                                },
                                excludeList: {
                                    shape: "S3p"
                                }
                            }
                        }
                    },
                    savingsEstimationMode: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEnrollmentStatus: {
            input: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    statusReason: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                name: {},
                value: {}
            }
        },
        Sf: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "structure",
            members: {
                bucket: {},
                key: {},
                metadataKey: {}
            }
        },
        Sw: {
            type: "list",
            member: {}
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "Sf"
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                bucket: {},
                keyPrefix: {}
            }
        },
        S17: {
            type: "structure",
            members: {
                cpuVendorArchitectures: {
                    shape: "S18"
                }
            }
        },
        S18: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "Sf"
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "Sf"
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "Sf"
                    }
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "Sf"
                    }
                }
            }
        },
        S2f: {
            type: "list",
            member: {
                shape: "S2g"
            }
        },
        S2g: {
            type: "structure",
            members: {
                name: {},
                statistic: {},
                value: {
                    type: "double"
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                desiredCapacity: {
                    type: "integer"
                },
                minSize: {
                    type: "integer"
                },
                maxSize: {
                    type: "integer"
                },
                instanceType: {}
            }
        },
        S2s: {
            type: "list",
            member: {
                shape: "S2g"
            }
        },
        S2v: {
            type: "structure",
            members: {
                savingsOpportunityPercentage: {
                    type: "double"
                },
                estimatedMonthlySavings: {
                    shape: "S2x"
                }
            }
        },
        S2x: {
            type: "structure",
            members: {
                currency: {},
                value: {
                    type: "double"
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                gpus: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            gpuCount: {
                                type: "integer"
                            },
                            gpuMemorySizeInMiB: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                cpuVendorArchitectures: {
                    shape: "S18"
                },
                enhancedInfrastructureMetrics: {},
                inferredWorkloadTypes: {},
                externalMetricsPreference: {
                    shape: "S3d"
                },
                lookBackPeriod: {},
                utilizationPreferences: {
                    shape: "S3g"
                },
                preferredResources: {
                    shape: "S3m"
                },
                savingsEstimationMode: {
                    type: "structure",
                    members: {
                        source: {}
                    }
                }
            }
        },
        S3d: {
            type: "structure",
            members: {
                source: {}
            }
        },
        S3g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    metricName: {},
                    metricParameters: {
                        type: "structure",
                        members: {
                            threshold: {},
                            headroom: {}
                        }
                    }
                }
            }
        },
        S3m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    includeList: {
                        shape: "S3p"
                    },
                    effectiveIncludeList: {
                        shape: "S3p"
                    },
                    excludeList: {
                        shape: "S3p"
                    }
                }
            }
        },
        S3p: {
            type: "list",
            member: {}
        },
        S3t: {
            type: "list",
            member: {}
        },
        S3v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    identifier: {},
                    code: {},
                    message: {}
                }
            }
        },
        S46: {
            type: "structure",
            members: {
                volumeType: {},
                volumeSize: {
                    type: "integer"
                },
                volumeBaselineIOPS: {
                    type: "integer"
                },
                volumeBurstIOPS: {
                    type: "integer"
                },
                volumeBaselineThroughput: {
                    type: "integer"
                },
                volumeBurstThroughput: {
                    type: "integer"
                },
                rootVolume: {
                    type: "boolean"
                }
            }
        },
        S4m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S5r: {
            type: "list",
            member: {
                type: "timestamp"
            }
        },
        S5s: {
            type: "list",
            member: {
                type: "double"
            }
        },
        S6e: {
            type: "structure",
            members: {
                memory: {
                    type: "integer"
                },
                memoryReservation: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        DescribeRecommendationExportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recommendationExportJobs"
        },
        GetEnrollmentStatusesForOrganization: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accountEnrollmentStatuses"
        },
        GetLambdaFunctionRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "lambdaFunctionRecommendations"
        },
        GetRecommendationPreferences: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recommendationPreferencesDetails"
        },
        GetRecommendationSummaries: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recommendationSummaries"
        }
    }
};

AWS.apiLoader.services["frauddetector"] = {};

AWS.FraudDetector = AWS.Service.defineService("frauddetector", [ "2019-11-15" ]);

AWS.apiLoader.services["frauddetector"]["2019-11-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-15",
        endpointPrefix: "frauddetector",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Fraud Detector",
        serviceId: "FraudDetector",
        signatureVersion: "v4",
        targetPrefix: "AWSHawksNestServiceFacade",
        uid: "frauddetector-2019-11-15"
    },
    operations: {
        BatchCreateVariable: {
            input: {
                type: "structure",
                required: [ "variableEntries" ],
                members: {
                    variableEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                dataType: {},
                                dataSource: {},
                                defaultValue: {},
                                description: {},
                                variableType: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetVariable: {
            input: {
                type: "structure",
                required: [ "names" ],
                members: {
                    names: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    variables: {
                        shape: "Sg"
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CancelBatchImportJob: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelBatchPredictionJob: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateBatchImportJob: {
            input: {
                type: "structure",
                required: [ "jobId", "inputPath", "outputPath", "eventTypeName", "iamRoleArn" ],
                members: {
                    jobId: {},
                    inputPath: {},
                    outputPath: {},
                    eventTypeName: {},
                    iamRoleArn: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateBatchPredictionJob: {
            input: {
                type: "structure",
                required: [ "jobId", "inputPath", "outputPath", "eventTypeName", "detectorName", "iamRoleArn" ],
                members: {
                    jobId: {},
                    inputPath: {},
                    outputPath: {},
                    eventTypeName: {},
                    detectorName: {},
                    detectorVersion: {},
                    iamRoleArn: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "rules" ],
                members: {
                    detectorId: {},
                    description: {},
                    externalModelEndpoints: {
                        shape: "S12"
                    },
                    rules: {
                        shape: "S13"
                    },
                    modelVersions: {
                        shape: "S15"
                    },
                    ruleExecutionMode: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    status: {}
                }
            }
        },
        CreateList: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    elements: {
                        shape: "S1f"
                    },
                    variableType: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateModel: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "eventTypeName" ],
                members: {
                    modelId: {},
                    modelType: {},
                    description: {},
                    eventTypeName: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "trainingDataSource", "trainingDataSchema" ],
                members: {
                    modelId: {},
                    modelType: {},
                    trainingDataSource: {},
                    trainingDataSchema: {
                        shape: "S1n"
                    },
                    externalEventsDetail: {
                        shape: "S1r"
                    },
                    ingestedEventsDetail: {
                        shape: "S1s"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    status: {}
                }
            }
        },
        CreateRule: {
            input: {
                type: "structure",
                required: [ "ruleId", "detectorId", "expression", "language", "outcomes" ],
                members: {
                    ruleId: {},
                    detectorId: {},
                    description: {},
                    expression: {
                        shape: "S1w"
                    },
                    language: {},
                    outcomes: {
                        shape: "S1y"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    rule: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateVariable: {
            input: {
                type: "structure",
                required: [ "name", "dataType", "dataSource", "defaultValue" ],
                members: {
                    name: {},
                    dataType: {},
                    dataSource: {},
                    defaultValue: {},
                    description: {},
                    variableType: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBatchImportJob: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBatchPredictionJob: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDetector: {
            input: {
                type: "structure",
                required: [ "detectorId" ],
                members: {
                    detectorId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEntityType: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEvent: {
            input: {
                type: "structure",
                required: [ "eventId", "eventTypeName" ],
                members: {
                    eventId: {},
                    eventTypeName: {},
                    deleteAuditHistory: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventType: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventsByEventType: {
            input: {
                type: "structure",
                required: [ "eventTypeName" ],
                members: {
                    eventTypeName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTypeName: {},
                    eventsDeletionStatus: {}
                }
            }
        },
        DeleteExternalModel: {
            input: {
                type: "structure",
                required: [ "modelEndpoint" ],
                members: {
                    modelEndpoint: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLabel: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteList: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteModel: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType" ],
                members: {
                    modelId: {},
                    modelType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "modelVersionNumber" ],
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOutcome: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "rule" ],
                members: {
                    rule: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteVariable: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeDetector: {
            input: {
                type: "structure",
                required: [ "detectorId" ],
                members: {
                    detectorId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorId: {},
                    detectorVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorVersionId: {},
                                status: {},
                                description: {},
                                lastUpdatedTime: {}
                            }
                        }
                    },
                    nextToken: {},
                    arn: {}
                }
            }
        },
        DescribeModelVersions: {
            input: {
                type: "structure",
                members: {
                    modelId: {},
                    modelVersionNumber: {},
                    modelType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelVersionDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelId: {},
                                modelType: {},
                                modelVersionNumber: {},
                                status: {},
                                trainingDataSource: {},
                                trainingDataSchema: {
                                    shape: "S1n"
                                },
                                externalEventsDetail: {
                                    shape: "S1r"
                                },
                                ingestedEventsDetail: {
                                    shape: "S1s"
                                },
                                trainingResult: {
                                    type: "structure",
                                    members: {
                                        dataValidationMetrics: {
                                            shape: "S3b"
                                        },
                                        trainingMetrics: {
                                            type: "structure",
                                            members: {
                                                auc: {
                                                    type: "float"
                                                },
                                                metricDataPoints: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            fpr: {
                                                                type: "float"
                                                            },
                                                            precision: {
                                                                type: "float"
                                                            },
                                                            tpr: {
                                                                type: "float"
                                                            },
                                                            threshold: {
                                                                type: "float"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        variableImportanceMetrics: {
                                            shape: "S3k"
                                        }
                                    }
                                },
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {},
                                trainingResultV2: {
                                    type: "structure",
                                    members: {
                                        dataValidationMetrics: {
                                            shape: "S3b"
                                        },
                                        trainingMetricsV2: {
                                            type: "structure",
                                            members: {
                                                ofi: {
                                                    type: "structure",
                                                    members: {
                                                        metricDataPoints: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    fpr: {
                                                                        type: "float"
                                                                    },
                                                                    precision: {
                                                                        type: "float"
                                                                    },
                                                                    tpr: {
                                                                        type: "float"
                                                                    },
                                                                    threshold: {
                                                                        type: "float"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        modelPerformance: {
                                                            type: "structure",
                                                            members: {
                                                                auc: {
                                                                    type: "float"
                                                                },
                                                                uncertaintyRange: {
                                                                    shape: "S3t"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                tfi: {
                                                    type: "structure",
                                                    members: {
                                                        metricDataPoints: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    fpr: {
                                                                        type: "float"
                                                                    },
                                                                    precision: {
                                                                        type: "float"
                                                                    },
                                                                    tpr: {
                                                                        type: "float"
                                                                    },
                                                                    threshold: {
                                                                        type: "float"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        modelPerformance: {
                                                            type: "structure",
                                                            members: {
                                                                auc: {
                                                                    type: "float"
                                                                },
                                                                uncertaintyRange: {
                                                                    shape: "S3t"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                ati: {
                                                    type: "structure",
                                                    members: {
                                                        metricDataPoints: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    cr: {
                                                                        type: "float"
                                                                    },
                                                                    adr: {
                                                                        type: "float"
                                                                    },
                                                                    threshold: {
                                                                        type: "float"
                                                                    },
                                                                    atodr: {
                                                                        type: "float"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        modelPerformance: {
                                                            type: "structure",
                                                            members: {
                                                                asi: {
                                                                    type: "float"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        variableImportanceMetrics: {
                                            shape: "S3k"
                                        },
                                        aggregatedVariablesImportanceMetrics: {
                                            type: "structure",
                                            members: {
                                                logOddsMetrics: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "variableNames", "aggregatedVariablesImportance" ],
                                                        members: {
                                                            variableNames: {
                                                                shape: "S12"
                                                            },
                                                            aggregatedVariablesImportance: {
                                                                type: "float"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBatchImportJobs: {
            input: {
                type: "structure",
                members: {
                    jobId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    batchImports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                status: {},
                                failureReason: {},
                                startTime: {},
                                completionTime: {},
                                inputPath: {},
                                outputPath: {},
                                eventTypeName: {},
                                iamRoleArn: {},
                                arn: {},
                                processedRecordsCount: {
                                    type: "integer"
                                },
                                failedRecordsCount: {
                                    type: "integer"
                                },
                                totalRecordsCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBatchPredictionJobs: {
            input: {
                type: "structure",
                members: {
                    jobId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    batchPredictions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                status: {},
                                failureReason: {},
                                startTime: {},
                                completionTime: {},
                                lastHeartbeatTime: {},
                                inputPath: {},
                                outputPath: {},
                                eventTypeName: {},
                                detectorName: {},
                                detectorVersion: {},
                                iamRoleArn: {},
                                arn: {},
                                processedRecordsCount: {
                                    type: "integer"
                                },
                                totalRecordsCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetDeleteEventsByEventTypeStatus: {
            input: {
                type: "structure",
                required: [ "eventTypeName" ],
                members: {
                    eventTypeName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTypeName: {},
                    eventsDeletionStatus: {}
                }
            }
        },
        GetDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    description: {},
                    externalModelEndpoints: {
                        shape: "S12"
                    },
                    modelVersions: {
                        shape: "S15"
                    },
                    rules: {
                        shape: "S13"
                    },
                    status: {},
                    lastUpdatedTime: {},
                    createdTime: {},
                    ruleExecutionMode: {},
                    arn: {}
                }
            }
        },
        GetDetectors: {
            input: {
                type: "structure",
                members: {
                    detectorId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorId: {},
                                description: {},
                                eventTypeName: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEntityTypes: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entityTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEvent: {
            input: {
                type: "structure",
                required: [ "eventId", "eventTypeName" ],
                members: {
                    eventId: {},
                    eventTypeName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    event: {
                        type: "structure",
                        members: {
                            eventId: {},
                            eventTypeName: {},
                            eventTimestamp: {},
                            eventVariables: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "string",
                                    sensitive: true
                                }
                            },
                            currentLabel: {},
                            labelTimestamp: {},
                            entities: {
                                shape: "S51"
                            }
                        }
                    }
                }
            }
        },
        GetEventPrediction: {
            input: {
                type: "structure",
                required: [ "detectorId", "eventId", "eventTypeName", "entities", "eventTimestamp", "eventVariables" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    eventId: {},
                    eventTypeName: {},
                    entities: {
                        shape: "S51"
                    },
                    eventTimestamp: {},
                    eventVariables: {
                        shape: "S56"
                    },
                    externalModelEndpointDataBlobs: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                byteBuffer: {
                                    type: "blob"
                                },
                                contentType: {}
                            }
                        },
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelScores: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelVersion: {
                                    shape: "S16"
                                },
                                scores: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "float"
                                    }
                                }
                            }
                        }
                    },
                    ruleResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ruleId: {},
                                outcomes: {
                                    shape: "S12"
                                }
                            }
                        }
                    },
                    externalModelOutputs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                externalModel: {
                                    type: "structure",
                                    members: {
                                        modelEndpoint: {},
                                        modelSource: {}
                                    }
                                },
                                outputs: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEventPredictionMetadata: {
            input: {
                type: "structure",
                required: [ "eventId", "eventTypeName", "detectorId", "detectorVersionId", "predictionTimestamp" ],
                members: {
                    eventId: {},
                    eventTypeName: {},
                    detectorId: {},
                    detectorVersionId: {},
                    predictionTimestamp: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    eventId: {},
                    eventTypeName: {},
                    entityId: {},
                    entityType: {},
                    eventTimestamp: {},
                    detectorId: {},
                    detectorVersionId: {},
                    detectorVersionStatus: {},
                    eventVariables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {
                                    shape: "S5s"
                                },
                                value: {
                                    shape: "S5s"
                                },
                                source: {
                                    shape: "S5s"
                                }
                            }
                        }
                    },
                    rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ruleId: {},
                                ruleVersion: {},
                                expression: {
                                    shape: "S5s"
                                },
                                expressionWithValues: {
                                    shape: "S5s"
                                },
                                outcomes: {
                                    shape: "S12"
                                },
                                evaluated: {
                                    type: "boolean"
                                },
                                matched: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    ruleExecutionMode: {},
                    outcomes: {
                        shape: "S12"
                    },
                    evaluatedModelVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelId: {},
                                modelVersion: {},
                                modelType: {},
                                evaluations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            outputVariableName: {},
                                            evaluationScore: {},
                                            predictionExplanations: {
                                                type: "structure",
                                                members: {
                                                    variableImpactExplanations: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                eventVariableName: {},
                                                                relativeImpact: {},
                                                                logOddsImpact: {
                                                                    type: "float"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    aggregatedVariablesImpactExplanations: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                eventVariableNames: {
                                                                    shape: "S12"
                                                                },
                                                                relativeImpact: {},
                                                                logOddsImpact: {
                                                                    type: "float"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    evaluatedExternalModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelEndpoint: {},
                                useEventVariables: {
                                    type: "boolean"
                                },
                                inputVariables: {
                                    shape: "S67"
                                },
                                outputVariables: {
                                    shape: "S67"
                                }
                            }
                        }
                    },
                    predictionTimestamp: {}
                }
            }
        },
        GetEventTypes: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                eventVariables: {
                                    shape: "S12"
                                },
                                labels: {
                                    shape: "S12"
                                },
                                entityTypes: {
                                    shape: "S1y"
                                },
                                eventIngestion: {},
                                ingestedEventStatistics: {
                                    type: "structure",
                                    members: {
                                        numberOfEvents: {
                                            type: "long"
                                        },
                                        eventDataSizeInBytes: {
                                            type: "long"
                                        },
                                        leastRecentEvent: {},
                                        mostRecentEvent: {},
                                        lastUpdatedTime: {}
                                    }
                                },
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {},
                                eventOrchestration: {
                                    shape: "S6g"
                                }
                            },
                            sensitive: true
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetExternalModels: {
            input: {
                type: "structure",
                members: {
                    modelEndpoint: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    externalModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelEndpoint: {},
                                modelSource: {},
                                invokeModelEndpointRoleArn: {},
                                inputConfiguration: {
                                    shape: "S6m"
                                },
                                outputConfiguration: {
                                    shape: "S6q"
                                },
                                modelEndpointStatus: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetKMSEncryptionKey: {
            output: {
                type: "structure",
                members: {
                    kmsKey: {
                        type: "structure",
                        members: {
                            kmsEncryptionKeyArn: {}
                        }
                    }
                }
            }
        },
        GetLabels: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    labels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetListElements: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    elements: {
                        shape: "S1f"
                    },
                    nextToken: {}
                }
            }
        },
        GetListsMetadata: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lists: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {},
                                description: {},
                                variableType: {},
                                createdTime: {},
                                updatedTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "modelVersionNumber" ],
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    trainingDataSource: {},
                    trainingDataSchema: {
                        shape: "S1n"
                    },
                    externalEventsDetail: {
                        shape: "S1r"
                    },
                    ingestedEventsDetail: {
                        shape: "S1s"
                    },
                    status: {},
                    arn: {}
                }
            }
        },
        GetModels: {
            input: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    models: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelId: {},
                                modelType: {},
                                description: {},
                                eventTypeName: {},
                                createdTime: {},
                                lastUpdatedTime: {},
                                arn: {}
                            }
                        }
                    }
                }
            }
        },
        GetOutcomes: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    outcomes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetRules: {
            input: {
                type: "structure",
                required: [ "detectorId" ],
                members: {
                    ruleId: {},
                    detectorId: {},
                    ruleVersion: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ruleDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ruleId: {},
                                description: {},
                                detectorId: {},
                                ruleVersion: {},
                                expression: {
                                    shape: "S1w"
                                },
                                language: {},
                                outcomes: {
                                    shape: "S1y"
                                },
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetVariables: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    variables: {
                        shape: "Sg"
                    },
                    nextToken: {}
                }
            }
        },
        ListEventPredictions: {
            input: {
                type: "structure",
                members: {
                    eventId: {
                        shape: "S7w"
                    },
                    eventType: {
                        shape: "S7w"
                    },
                    detectorId: {
                        shape: "S7w"
                    },
                    detectorVersionId: {
                        shape: "S7w"
                    },
                    predictionTimeRange: {
                        type: "structure",
                        required: [ "startTime", "endTime" ],
                        members: {
                            startTime: {},
                            endTime: {}
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventPredictionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                eventId: {},
                                eventTypeName: {},
                                eventTimestamp: {},
                                predictionTimestamp: {},
                                detectorId: {},
                                detectorVersionId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    resourceARN: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        PutDetector: {
            input: {
                type: "structure",
                required: [ "detectorId", "eventTypeName" ],
                members: {
                    detectorId: {},
                    description: {},
                    eventTypeName: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEntityType: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEventType: {
            input: {
                type: "structure",
                required: [ "name", "eventVariables", "entityTypes" ],
                members: {
                    name: {},
                    description: {},
                    eventVariables: {
                        shape: "S1y"
                    },
                    labels: {
                        shape: "S12"
                    },
                    entityTypes: {
                        shape: "S1y"
                    },
                    eventIngestion: {},
                    tags: {
                        shape: "S5"
                    },
                    eventOrchestration: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutExternalModel: {
            input: {
                type: "structure",
                required: [ "modelEndpoint", "modelSource", "invokeModelEndpointRoleArn", "inputConfiguration", "outputConfiguration", "modelEndpointStatus" ],
                members: {
                    modelEndpoint: {},
                    modelSource: {},
                    invokeModelEndpointRoleArn: {},
                    inputConfiguration: {
                        shape: "S6m"
                    },
                    outputConfiguration: {
                        shape: "S6q"
                    },
                    modelEndpointStatus: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutKMSEncryptionKey: {
            input: {
                type: "structure",
                required: [ "kmsEncryptionKeyArn" ],
                members: {
                    kmsEncryptionKeyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutLabel: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutOutcome: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendEvent: {
            input: {
                type: "structure",
                required: [ "eventId", "eventTypeName", "eventTimestamp", "eventVariables", "entities" ],
                members: {
                    eventId: {},
                    eventTypeName: {},
                    eventTimestamp: {},
                    eventVariables: {
                        shape: "S56"
                    },
                    assignedLabel: {},
                    labelTimestamp: {},
                    entities: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId", "externalModelEndpoints", "rules" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    externalModelEndpoints: {
                        shape: "S12"
                    },
                    rules: {
                        shape: "S13"
                    },
                    description: {},
                    modelVersions: {
                        shape: "S15"
                    },
                    ruleExecutionMode: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetectorVersionMetadata: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId", "description" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetectorVersionStatus: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId", "status" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEventLabel: {
            input: {
                type: "structure",
                required: [ "eventId", "eventTypeName", "assignedLabel", "labelTimestamp" ],
                members: {
                    eventId: {},
                    eventTypeName: {},
                    assignedLabel: {},
                    labelTimestamp: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateList: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    elements: {
                        shape: "S1f"
                    },
                    description: {},
                    updateMode: {},
                    variableType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateModel: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType" ],
                members: {
                    modelId: {},
                    modelType: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "majorVersionNumber" ],
                members: {
                    modelId: {},
                    modelType: {},
                    majorVersionNumber: {},
                    externalEventsDetail: {
                        shape: "S1r"
                    },
                    ingestedEventsDetail: {
                        shape: "S1s"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    status: {}
                }
            }
        },
        UpdateModelVersionStatus: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "modelVersionNumber", "status" ],
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRuleMetadata: {
            input: {
                type: "structure",
                required: [ "rule", "description" ],
                members: {
                    rule: {
                        shape: "S14"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRuleVersion: {
            input: {
                type: "structure",
                required: [ "rule", "expression", "language", "outcomes" ],
                members: {
                    rule: {
                        shape: "S14"
                    },
                    description: {},
                    expression: {
                        shape: "S1w"
                    },
                    language: {},
                    outcomes: {
                        shape: "S1y"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    rule: {
                        shape: "S14"
                    }
                }
            }
        },
        UpdateVariable: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    defaultValue: {},
                    description: {},
                    variableType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    dataType: {},
                    dataSource: {},
                    defaultValue: {},
                    description: {},
                    variableType: {},
                    lastUpdatedTime: {},
                    createdTime: {},
                    arn: {}
                }
            }
        },
        S12: {
            type: "list",
            member: {}
        },
        S13: {
            type: "list",
            member: {
                shape: "S14"
            }
        },
        S14: {
            type: "structure",
            required: [ "detectorId", "ruleId", "ruleVersion" ],
            members: {
                detectorId: {},
                ruleId: {},
                ruleVersion: {}
            }
        },
        S15: {
            type: "list",
            member: {
                shape: "S16"
            }
        },
        S16: {
            type: "structure",
            required: [ "modelId", "modelType", "modelVersionNumber" ],
            members: {
                modelId: {},
                modelType: {},
                modelVersionNumber: {},
                arn: {}
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        S1n: {
            type: "structure",
            required: [ "modelVariables" ],
            members: {
                modelVariables: {
                    shape: "S12"
                },
                labelSchema: {
                    type: "structure",
                    members: {
                        labelMapper: {
                            type: "map",
                            key: {},
                            value: {
                                shape: "S12"
                            }
                        },
                        unlabeledEventsTreatment: {}
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "dataLocation", "dataAccessRoleArn" ],
            members: {
                dataLocation: {},
                dataAccessRoleArn: {}
            }
        },
        S1s: {
            type: "structure",
            required: [ "ingestedEventsTimeWindow" ],
            members: {
                ingestedEventsTimeWindow: {
                    type: "structure",
                    required: [ "startTime", "endTime" ],
                    members: {
                        startTime: {},
                        endTime: {}
                    }
                }
            }
        },
        S1w: {
            type: "string",
            sensitive: true
        },
        S1y: {
            type: "list",
            member: {}
        },
        S3b: {
            type: "structure",
            members: {
                fileLevelMessages: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            title: {},
                            content: {},
                            type: {}
                        }
                    }
                },
                fieldLevelMessages: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            fieldName: {},
                            identifier: {},
                            title: {},
                            content: {},
                            type: {}
                        }
                    }
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                logOddsMetrics: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "variableName", "variableType", "variableImportance" ],
                        members: {
                            variableName: {},
                            variableType: {},
                            variableImportance: {
                                type: "float"
                            }
                        }
                    }
                }
            }
        },
        S3t: {
            type: "structure",
            required: [ "lowerBoundValue", "upperBoundValue" ],
            members: {
                lowerBoundValue: {
                    type: "float"
                },
                upperBoundValue: {
                    type: "float"
                }
            }
        },
        S51: {
            type: "list",
            member: {
                type: "structure",
                required: [ "entityType", "entityId" ],
                members: {
                    entityType: {},
                    entityId: {}
                },
                sensitive: true
            }
        },
        S56: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        S5s: {
            type: "string",
            sensitive: true
        },
        S67: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S6g: {
            type: "structure",
            required: [ "eventBridgeEnabled" ],
            members: {
                eventBridgeEnabled: {
                    type: "boolean"
                }
            }
        },
        S6m: {
            type: "structure",
            required: [ "useEventVariables" ],
            members: {
                eventTypeName: {},
                format: {},
                useEventVariables: {
                    type: "boolean"
                },
                jsonInputTemplate: {},
                csvInputTemplate: {}
            }
        },
        S6q: {
            type: "structure",
            required: [ "format" ],
            members: {
                format: {},
                jsonKeyToVariableMap: {
                    type: "map",
                    key: {},
                    value: {}
                },
                csvIndexToVariableMap: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S7w: {
            type: "structure",
            members: {
                value: {}
            }
        }
    },
    paginators: {
        DescribeModelVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBatchImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBatchPredictionJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetDetectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEntityTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEventTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetExternalModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetLabels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetListElements: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetListsMetadata: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetOutcomes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetRules: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetVariables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListEventPredictions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["kendra"] = {};

AWS.Kendra = AWS.Service.defineService("kendra", [ "2019-02-03" ]);

AWS.apiLoader.services["kendra"]["2019-02-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-02-03",
        endpointPrefix: "kendra",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "kendra",
        serviceFullName: "AWSKendraFrontendService",
        serviceId: "kendra",
        signatureVersion: "v4",
        signingName: "kendra",
        targetPrefix: "AWSKendraFrontendService",
        uid: "kendra-2019-02-03"
    },
    operations: {
        AssociateEntitiesToExperience: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId", "EntityList" ],
                members: {
                    Id: {},
                    IndexId: {},
                    EntityList: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntityList: {
                        type: "list",
                        member: {
                            shape: "Sa"
                        }
                    }
                }
            }
        },
        AssociatePersonasToEntities: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId", "Personas" ],
                members: {
                    Id: {},
                    IndexId: {},
                    Personas: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EntityId", "Persona" ],
                            members: {
                                EntityId: {},
                                Persona: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntityList: {
                        shape: "Sh"
                    }
                }
            }
        },
        BatchDeleteDocument: {
            input: {
                type: "structure",
                required: [ "IndexId", "DocumentIdList" ],
                members: {
                    IndexId: {},
                    DocumentIdList: {
                        type: "list",
                        member: {}
                    },
                    DataSourceSyncJobMetricTarget: {
                        type: "structure",
                        required: [ "DataSourceId" ],
                        members: {
                            DataSourceId: {},
                            DataSourceSyncJobId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteFeaturedResultsSet: {
            input: {
                type: "structure",
                required: [ "IndexId", "FeaturedResultsSetIds" ],
                members: {
                    IndexId: {},
                    FeaturedResultsSetIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "ErrorCode", "ErrorMessage" ],
                            members: {
                                Id: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetDocumentStatus: {
            input: {
                type: "structure",
                required: [ "IndexId", "DocumentInfoList" ],
                members: {
                    IndexId: {},
                    DocumentInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DocumentId" ],
                            members: {
                                DocumentId: {},
                                Attributes: {
                                    shape: "S11"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    DocumentStatusList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentId: {},
                                DocumentStatus: {},
                                FailureCode: {},
                                FailureReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchPutDocument: {
            input: {
                type: "structure",
                required: [ "IndexId", "Documents" ],
                members: {
                    IndexId: {},
                    RoleArn: {},
                    Documents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                Id: {},
                                Title: {},
                                Blob: {
                                    type: "blob"
                                },
                                S3Path: {
                                    shape: "S1m"
                                },
                                Attributes: {
                                    shape: "S11"
                                },
                                AccessControlList: {
                                    shape: "S1p"
                                },
                                HierarchicalAccessControlList: {
                                    shape: "S1u"
                                },
                                ContentType: {},
                                AccessControlConfigurationId: {}
                            }
                        }
                    },
                    CustomDocumentEnrichmentConfiguration: {
                        shape: "S1y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        ClearQuerySuggestions: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {}
                }
            }
        },
        CreateAccessControlConfiguration: {
            input: {
                type: "structure",
                required: [ "IndexId", "Name" ],
                members: {
                    IndexId: {},
                    Name: {},
                    Description: {},
                    AccessControlList: {
                        shape: "S1p"
                    },
                    HierarchicalAccessControlList: {
                        shape: "S1u"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        CreateDataSource: {
            input: {
                type: "structure",
                required: [ "Name", "IndexId", "Type" ],
                members: {
                    Name: {},
                    IndexId: {},
                    Type: {},
                    Configuration: {
                        shape: "S2j"
                    },
                    VpcConfiguration: {
                        shape: "S2u"
                    },
                    Description: {},
                    Schedule: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S6r"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    LanguageCode: {},
                    CustomDocumentEnrichmentConfiguration: {
                        shape: "S1y"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        CreateExperience: {
            input: {
                type: "structure",
                required: [ "Name", "IndexId" ],
                members: {
                    Name: {},
                    IndexId: {},
                    RoleArn: {},
                    Configuration: {
                        shape: "S6z"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        CreateFaq: {
            input: {
                type: "structure",
                required: [ "IndexId", "Name", "S3Path", "RoleArn" ],
                members: {
                    IndexId: {},
                    Name: {},
                    Description: {},
                    S3Path: {
                        shape: "S1m"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S6r"
                    },
                    FileFormat: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        CreateFeaturedResultsSet: {
            input: {
                type: "structure",
                required: [ "IndexId", "FeaturedResultsSetName" ],
                members: {
                    IndexId: {},
                    FeaturedResultsSetName: {},
                    Description: {},
                    ClientToken: {},
                    Status: {},
                    QueryTexts: {
                        shape: "S7f"
                    },
                    FeaturedDocuments: {
                        shape: "S7h"
                    },
                    Tags: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FeaturedResultsSet: {
                        shape: "S7k"
                    }
                }
            }
        },
        CreateIndex: {
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    Name: {},
                    Edition: {},
                    RoleArn: {},
                    ServerSideEncryptionConfiguration: {
                        shape: "S7o"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S6r"
                    },
                    UserTokenConfigurations: {
                        shape: "S7q"
                    },
                    UserContextPolicy: {},
                    UserGroupResolutionConfiguration: {
                        shape: "S80"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        CreateQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Name", "SourceS3Path", "RoleArn" ],
                members: {
                    IndexId: {},
                    Name: {},
                    Description: {},
                    SourceS3Path: {
                        shape: "S1m"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        CreateThesaurus: {
            input: {
                type: "structure",
                required: [ "IndexId", "Name", "RoleArn", "SourceS3Path" ],
                members: {
                    IndexId: {},
                    Name: {},
                    Description: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S6r"
                    },
                    SourceS3Path: {
                        shape: "S1m"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        DeleteAccessControlConfiguration: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDataSource: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        DeleteExperience: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFaq: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        DeleteIndex: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        DeletePrincipalMapping: {
            input: {
                type: "structure",
                required: [ "IndexId", "GroupId" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {},
                    OrderingId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {}
                }
            }
        },
        DeleteThesaurus: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        DescribeAccessControlConfiguration: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ErrorMessage: {},
                    AccessControlList: {
                        shape: "S1p"
                    },
                    HierarchicalAccessControlList: {
                        shape: "S1u"
                    }
                }
            }
        },
        DescribeDataSource: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    IndexId: {},
                    Name: {},
                    Type: {},
                    Configuration: {
                        shape: "S2j"
                    },
                    VpcConfiguration: {
                        shape: "S2u"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    Status: {},
                    Schedule: {},
                    RoleArn: {},
                    ErrorMessage: {},
                    LanguageCode: {},
                    CustomDocumentEnrichmentConfiguration: {
                        shape: "S1y"
                    }
                }
            }
        },
        DescribeExperience: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    IndexId: {},
                    Name: {},
                    Endpoints: {
                        shape: "S8u"
                    },
                    Configuration: {
                        shape: "S6z"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    Status: {},
                    RoleArn: {},
                    ErrorMessage: {}
                }
            }
        },
        DescribeFaq: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    IndexId: {},
                    Name: {},
                    Description: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    S3Path: {
                        shape: "S1m"
                    },
                    Status: {},
                    RoleArn: {},
                    ErrorMessage: {},
                    FileFormat: {},
                    LanguageCode: {}
                }
            }
        },
        DescribeFeaturedResultsSet: {
            input: {
                type: "structure",
                required: [ "IndexId", "FeaturedResultsSetId" ],
                members: {
                    IndexId: {},
                    FeaturedResultsSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FeaturedResultsSetId: {},
                    FeaturedResultsSetName: {},
                    Description: {},
                    Status: {},
                    QueryTexts: {
                        shape: "S7f"
                    },
                    FeaturedDocumentsWithMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Title: {},
                                URI: {}
                            }
                        }
                    },
                    FeaturedDocumentsMissing: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {}
                            }
                        }
                    },
                    LastUpdatedTimestamp: {
                        type: "long"
                    },
                    CreationTimestamp: {
                        type: "long"
                    }
                }
            }
        },
        DescribeIndex: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Id: {},
                    Edition: {},
                    RoleArn: {},
                    ServerSideEncryptionConfiguration: {
                        shape: "S7o"
                    },
                    Status: {},
                    Description: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    DocumentMetadataConfigurations: {
                        shape: "S9b"
                    },
                    IndexStatistics: {
                        type: "structure",
                        required: [ "FaqStatistics", "TextDocumentStatistics" ],
                        members: {
                            FaqStatistics: {
                                type: "structure",
                                required: [ "IndexedQuestionAnswersCount" ],
                                members: {
                                    IndexedQuestionAnswersCount: {
                                        type: "integer"
                                    }
                                }
                            },
                            TextDocumentStatistics: {
                                type: "structure",
                                required: [ "IndexedTextDocumentsCount", "IndexedTextBytes" ],
                                members: {
                                    IndexedTextDocumentsCount: {
                                        type: "integer"
                                    },
                                    IndexedTextBytes: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    },
                    ErrorMessage: {},
                    CapacityUnits: {
                        shape: "S9t"
                    },
                    UserTokenConfigurations: {
                        shape: "S7q"
                    },
                    UserContextPolicy: {},
                    UserGroupResolutionConfiguration: {
                        shape: "S80"
                    }
                }
            }
        },
        DescribePrincipalMapping: {
            input: {
                type: "structure",
                required: [ "IndexId", "GroupId" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {},
                    GroupOrderingIdSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Status: {},
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                ReceivedAt: {
                                    type: "timestamp"
                                },
                                OrderingId: {
                                    type: "long"
                                },
                                FailureReason: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexId: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    ErrorMessage: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    SourceS3Path: {
                        shape: "S1m"
                    },
                    ItemCount: {
                        type: "integer"
                    },
                    FileSizeBytes: {
                        type: "long"
                    },
                    RoleArn: {}
                }
            }
        },
        DescribeQuerySuggestionsConfig: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Mode: {},
                    Status: {},
                    QueryLogLookBackWindowInDays: {
                        type: "integer"
                    },
                    IncludeQueriesWithoutUserInformation: {
                        type: "boolean"
                    },
                    MinimumNumberOfQueryingUsers: {
                        type: "integer"
                    },
                    MinimumQueryCount: {
                        type: "integer"
                    },
                    LastSuggestionsBuildTime: {
                        type: "timestamp"
                    },
                    LastClearTime: {
                        type: "timestamp"
                    },
                    TotalSuggestionsCount: {
                        type: "integer"
                    },
                    AttributeSuggestionsConfig: {
                        type: "structure",
                        members: {
                            SuggestableConfigList: {
                                shape: "Sae"
                            },
                            AttributeSuggestionsMode: {}
                        }
                    }
                }
            }
        },
        DescribeThesaurus: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    IndexId: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    ErrorMessage: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    SourceS3Path: {
                        shape: "S1m"
                    },
                    FileSizeBytes: {
                        type: "long"
                    },
                    TermCount: {
                        type: "long"
                    },
                    SynonymRuleCount: {
                        type: "long"
                    }
                }
            }
        },
        DisassociateEntitiesFromExperience: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId", "EntityList" ],
                members: {
                    Id: {},
                    IndexId: {},
                    EntityList: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntityList: {
                        shape: "Sh"
                    }
                }
            }
        },
        DisassociatePersonasFromEntities: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId", "EntityIds" ],
                members: {
                    Id: {},
                    IndexId: {},
                    EntityIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntityList: {
                        shape: "Sh"
                    }
                }
            }
        },
        GetQuerySuggestions: {
            input: {
                type: "structure",
                required: [ "IndexId", "QueryText" ],
                members: {
                    IndexId: {},
                    QueryText: {},
                    MaxSuggestionsCount: {
                        type: "integer"
                    },
                    SuggestionTypes: {
                        type: "list",
                        member: {}
                    },
                    AttributeSuggestionsConfig: {
                        type: "structure",
                        members: {
                            SuggestionAttributes: {
                                shape: "Sav"
                            },
                            AdditionalResponseAttributes: {
                                shape: "Sav"
                            },
                            AttributeFilter: {
                                shape: "Saw"
                            },
                            UserContext: {
                                shape: "Say"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuerySuggestionsId: {},
                    Suggestions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Value: {
                                    type: "structure",
                                    members: {
                                        Text: {
                                            type: "structure",
                                            members: {
                                                Text: {},
                                                Highlights: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            BeginOffset: {
                                                                type: "integer"
                                                            },
                                                            EndOffset: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                SourceDocuments: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DocumentId: {},
                                            SuggestionAttributes: {
                                                shape: "Sav"
                                            },
                                            AdditionalAttributes: {
                                                shape: "S11"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSnapshots: {
            input: {
                type: "structure",
                required: [ "IndexId", "Interval", "MetricType" ],
                members: {
                    IndexId: {},
                    Interval: {},
                    MetricType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapShotTimeFilter: {
                        shape: "Sbj"
                    },
                    SnapshotsDataHeader: {
                        type: "list",
                        member: {}
                    },
                    SnapshotsData: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {}
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAccessControlConfigurations: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AccessControlConfigurations" ],
                members: {
                    NextToken: {},
                    AccessControlConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        ListDataSourceSyncJobs: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StartTimeFilter: {
                        shape: "Sbj"
                    },
                    StatusFilter: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    History: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExecutionId: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                ErrorMessage: {},
                                ErrorCode: {},
                                DataSourceErrorCode: {},
                                Metrics: {
                                    type: "structure",
                                    members: {
                                        DocumentsAdded: {},
                                        DocumentsModified: {},
                                        DocumentsDeleted: {},
                                        DocumentsFailed: {},
                                        DocumentsScanned: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataSources: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Id: {},
                                Type: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Status: {},
                                LanguageCode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntityPersonas: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EntityId: {},
                                Persona: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExperienceEntities: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EntityId: {},
                                EntityType: {},
                                DisplayData: {
                                    type: "structure",
                                    members: {
                                        UserName: {
                                            shape: "Scf"
                                        },
                                        GroupName: {
                                            shape: "Scf"
                                        },
                                        IdentifiedUserName: {
                                            shape: "Scf"
                                        },
                                        FirstName: {
                                            shape: "Scf"
                                        },
                                        LastName: {
                                            shape: "Scf"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExperiences: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Id: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Endpoints: {
                                    shape: "S8u"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFaqs: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FaqSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                FileFormat: {},
                                LanguageCode: {}
                            }
                        }
                    }
                }
            }
        },
        ListFeaturedResultsSets: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FeaturedResultsSetSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FeaturedResultsSetId: {},
                                FeaturedResultsSetName: {},
                                Status: {},
                                LastUpdatedTimestamp: {
                                    type: "long"
                                },
                                CreationTimestamp: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGroupsOlderThanOrderingId: {
            input: {
                type: "structure",
                required: [ "IndexId", "OrderingId" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    OrderingId: {
                        type: "long"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupsSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupId: {},
                                OrderingId: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIndices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexConfigurationSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreatedAt", "UpdatedAt", "Status" ],
                            members: {
                                Name: {},
                                Id: {},
                                Edition: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQuerySuggestionsBlockLists: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BlockListSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                ItemCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6r"
                    }
                }
            }
        },
        ListThesauri: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ThesaurusSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutPrincipalMapping: {
            input: {
                type: "structure",
                required: [ "IndexId", "GroupId", "GroupMembers" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {},
                    GroupMembers: {
                        type: "structure",
                        members: {
                            MemberGroups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "GroupId" ],
                                    members: {
                                        GroupId: {},
                                        DataSourceId: {}
                                    }
                                }
                            },
                            MemberUsers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "UserId" ],
                                    members: {
                                        UserId: {}
                                    }
                                }
                            },
                            S3PathforGroupMembers: {
                                shape: "S1m"
                            }
                        }
                    },
                    OrderingId: {
                        type: "long"
                    },
                    RoleArn: {}
                }
            }
        },
        Query: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    QueryText: {},
                    AttributeFilter: {
                        shape: "Saw"
                    },
                    Facets: {
                        shape: "Sdq"
                    },
                    RequestedDocumentAttributes: {
                        shape: "Sav"
                    },
                    QueryResultTypeFilter: {},
                    DocumentRelevanceOverrideConfigurations: {
                        shape: "Sdu"
                    },
                    PageNumber: {
                        type: "integer"
                    },
                    PageSize: {
                        type: "integer"
                    },
                    SortingConfiguration: {
                        shape: "Sdw"
                    },
                    SortingConfigurations: {
                        shape: "Sdy"
                    },
                    UserContext: {
                        shape: "Say"
                    },
                    VisitorId: {},
                    SpellCorrectionConfiguration: {
                        type: "structure",
                        required: [ "IncludeQuerySpellCheckSuggestions" ],
                        members: {
                            IncludeQuerySpellCheckSuggestions: {
                                type: "boolean"
                            }
                        }
                    },
                    CollapseConfiguration: {
                        type: "structure",
                        required: [ "DocumentAttributeKey" ],
                        members: {
                            DocumentAttributeKey: {},
                            SortingConfigurations: {
                                shape: "Sdy"
                            },
                            MissingAttributeKeyStrategy: {},
                            Expand: {
                                type: "boolean"
                            },
                            ExpandConfiguration: {
                                type: "structure",
                                members: {
                                    MaxResultItemsToExpand: {
                                        type: "integer"
                                    },
                                    MaxExpandedResultsPerItem: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryId: {},
                    ResultItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                Format: {},
                                AdditionalAttributes: {
                                    shape: "Se9"
                                },
                                DocumentId: {},
                                DocumentTitle: {
                                    shape: "Sed"
                                },
                                DocumentExcerpt: {
                                    shape: "Sed"
                                },
                                DocumentURI: {},
                                DocumentAttributes: {
                                    shape: "S11"
                                },
                                ScoreAttributes: {
                                    shape: "Seh"
                                },
                                FeedbackToken: {},
                                TableExcerpt: {
                                    type: "structure",
                                    members: {
                                        Rows: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Cells: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Value: {},
                                                                TopAnswer: {
                                                                    type: "boolean"
                                                                },
                                                                Highlighted: {
                                                                    type: "boolean"
                                                                },
                                                                Header: {
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        TotalNumberOfRows: {
                                            type: "integer"
                                        }
                                    }
                                },
                                CollapsedResultDetail: {
                                    type: "structure",
                                    required: [ "DocumentAttribute" ],
                                    members: {
                                        DocumentAttribute: {
                                            shape: "S12"
                                        },
                                        ExpandedResults: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Id: {},
                                                    DocumentId: {},
                                                    DocumentTitle: {
                                                        shape: "Sed"
                                                    },
                                                    DocumentExcerpt: {
                                                        shape: "Sed"
                                                    },
                                                    DocumentURI: {},
                                                    DocumentAttributes: {
                                                        shape: "S11"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    FacetResults: {
                        shape: "Ses"
                    },
                    TotalNumberOfResults: {
                        type: "integer"
                    },
                    Warnings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Message: {},
                                Code: {}
                            }
                        }
                    },
                    SpellCorrectedQueries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SuggestedQueryText: {},
                                Corrections: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            BeginOffset: {
                                                type: "integer"
                                            },
                                            EndOffset: {
                                                type: "integer"
                                            },
                                            Term: {},
                                            CorrectedTerm: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    FeaturedResultsItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                AdditionalAttributes: {
                                    shape: "Se9"
                                },
                                DocumentId: {},
                                DocumentTitle: {
                                    shape: "Sed"
                                },
                                DocumentExcerpt: {
                                    shape: "Sed"
                                },
                                DocumentURI: {},
                                DocumentAttributes: {
                                    shape: "S11"
                                },
                                FeedbackToken: {}
                            }
                        }
                    }
                }
            }
        },
        Retrieve: {
            input: {
                type: "structure",
                required: [ "IndexId", "QueryText" ],
                members: {
                    IndexId: {},
                    QueryText: {},
                    AttributeFilter: {
                        shape: "Saw"
                    },
                    RequestedDocumentAttributes: {
                        shape: "Sav"
                    },
                    DocumentRelevanceOverrideConfigurations: {
                        shape: "Sdu"
                    },
                    PageNumber: {
                        type: "integer"
                    },
                    PageSize: {
                        type: "integer"
                    },
                    UserContext: {
                        shape: "Say"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryId: {},
                    ResultItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                DocumentId: {},
                                DocumentTitle: {},
                                Content: {},
                                DocumentURI: {},
                                DocumentAttributes: {
                                    shape: "S11"
                                },
                                ScoreAttributes: {
                                    shape: "Seh"
                                }
                            }
                        }
                    }
                }
            }
        },
        StartDataSourceSyncJob: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExecutionId: {}
                }
            }
        },
        StopDataSourceSyncJob: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        SubmitFeedback: {
            input: {
                type: "structure",
                required: [ "IndexId", "QueryId" ],
                members: {
                    IndexId: {},
                    QueryId: {},
                    ClickFeedbackItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ResultId", "ClickTime" ],
                            members: {
                                ResultId: {},
                                ClickTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    RelevanceFeedbackItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ResultId", "RelevanceValue" ],
                            members: {
                                ResultId: {},
                                RelevanceValue: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAccessControlConfiguration: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    AccessControlList: {
                        shape: "S1p"
                    },
                    HierarchicalAccessControlList: {
                        shape: "S1u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataSource: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    Name: {},
                    IndexId: {},
                    Configuration: {
                        shape: "S2j"
                    },
                    VpcConfiguration: {
                        shape: "S2u"
                    },
                    Description: {},
                    Schedule: {},
                    RoleArn: {},
                    LanguageCode: {},
                    CustomDocumentEnrichmentConfiguration: {
                        shape: "S1y"
                    }
                }
            }
        },
        UpdateExperience: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    Name: {},
                    IndexId: {},
                    RoleArn: {},
                    Configuration: {
                        shape: "S6z"
                    },
                    Description: {}
                }
            }
        },
        UpdateFeaturedResultsSet: {
            input: {
                type: "structure",
                required: [ "IndexId", "FeaturedResultsSetId" ],
                members: {
                    IndexId: {},
                    FeaturedResultsSetId: {},
                    FeaturedResultsSetName: {},
                    Description: {},
                    Status: {},
                    QueryTexts: {
                        shape: "S7f"
                    },
                    FeaturedDocuments: {
                        shape: "S7h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FeaturedResultsSet: {
                        shape: "S7k"
                    }
                }
            }
        },
        UpdateIndex: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    Name: {},
                    RoleArn: {},
                    Description: {},
                    DocumentMetadataConfigurationUpdates: {
                        shape: "S9b"
                    },
                    CapacityUnits: {
                        shape: "S9t"
                    },
                    UserTokenConfigurations: {
                        shape: "S7q"
                    },
                    UserContextPolicy: {},
                    UserGroupResolutionConfiguration: {
                        shape: "S80"
                    }
                }
            }
        },
        UpdateQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    SourceS3Path: {
                        shape: "S1m"
                    },
                    RoleArn: {}
                }
            }
        },
        UpdateQuerySuggestionsConfig: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    Mode: {},
                    QueryLogLookBackWindowInDays: {
                        type: "integer"
                    },
                    IncludeQueriesWithoutUserInformation: {
                        type: "boolean"
                    },
                    MinimumNumberOfQueryingUsers: {
                        type: "integer"
                    },
                    MinimumQueryCount: {
                        type: "integer"
                    },
                    AttributeSuggestionsConfig: {
                        type: "structure",
                        members: {
                            SuggestableConfigList: {
                                shape: "Sae"
                            },
                            AttributeSuggestionsMode: {}
                        }
                    }
                }
            }
        },
        UpdateThesaurus: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    Name: {},
                    IndexId: {},
                    Description: {},
                    RoleArn: {},
                    SourceS3Path: {
                        shape: "S1m"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "EntityId", "EntityType" ],
            members: {
                EntityId: {},
                EntityType: {}
            }
        },
        Sa: {
            type: "structure",
            members: {
                EntityId: {},
                ErrorMessage: {}
            }
        },
        Sh: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        S11: {
            type: "list",
            member: {
                shape: "S12"
            }
        },
        S12: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {
                    shape: "S14"
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                StringValue: {},
                StringListValue: {
                    type: "list",
                    member: {}
                },
                LongValue: {
                    type: "long"
                },
                DateValue: {
                    type: "timestamp"
                }
            }
        },
        S1m: {
            type: "structure",
            required: [ "Bucket", "Key" ],
            members: {
                Bucket: {},
                Key: {}
            }
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type", "Access" ],
                members: {
                    Name: {},
                    Type: {},
                    Access: {},
                    DataSourceId: {}
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "PrincipalList" ],
                members: {
                    PrincipalList: {
                        shape: "S1p"
                    }
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                InlineConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Condition: {
                                shape: "S21"
                            },
                            Target: {
                                type: "structure",
                                members: {
                                    TargetDocumentAttributeKey: {},
                                    TargetDocumentAttributeValueDeletion: {
                                        type: "boolean"
                                    },
                                    TargetDocumentAttributeValue: {
                                        shape: "S14"
                                    }
                                }
                            },
                            DocumentContentDeletion: {
                                type: "boolean"
                            }
                        }
                    }
                },
                PreExtractionHookConfiguration: {
                    shape: "S25"
                },
                PostExtractionHookConfiguration: {
                    shape: "S25"
                },
                RoleArn: {}
            }
        },
        S21: {
            type: "structure",
            required: [ "ConditionDocumentAttributeKey", "Operator" ],
            members: {
                ConditionDocumentAttributeKey: {},
                Operator: {},
                ConditionOnValue: {
                    shape: "S14"
                }
            }
        },
        S25: {
            type: "structure",
            required: [ "LambdaArn", "S3Bucket" ],
            members: {
                InvocationCondition: {
                    shape: "S21"
                },
                LambdaArn: {},
                S3Bucket: {}
            }
        },
        S2j: {
            type: "structure",
            members: {
                S3Configuration: {
                    type: "structure",
                    required: [ "BucketName" ],
                    members: {
                        BucketName: {},
                        InclusionPrefixes: {
                            shape: "S2l"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        DocumentsMetadataConfiguration: {
                            type: "structure",
                            members: {
                                S3Prefix: {}
                            }
                        },
                        AccessControlListConfiguration: {
                            type: "structure",
                            members: {
                                KeyPath: {}
                            }
                        }
                    }
                },
                SharePointConfiguration: {
                    type: "structure",
                    required: [ "SharePointVersion", "Urls", "SecretArn" ],
                    members: {
                        SharePointVersion: {},
                        Urls: {
                            type: "list",
                            member: {}
                        },
                        SecretArn: {},
                        CrawlAttachments: {
                            type: "boolean"
                        },
                        UseChangeLog: {
                            type: "boolean"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        },
                        FieldMappings: {
                            shape: "S2z"
                        },
                        DocumentTitleFieldName: {},
                        DisableLocalGroups: {
                            type: "boolean"
                        },
                        SslCertificateS3Path: {
                            shape: "S1m"
                        },
                        AuthenticationType: {},
                        ProxyConfiguration: {
                            shape: "S35"
                        }
                    }
                },
                DatabaseConfiguration: {
                    type: "structure",
                    required: [ "DatabaseEngineType", "ConnectionConfiguration", "ColumnConfiguration" ],
                    members: {
                        DatabaseEngineType: {},
                        ConnectionConfiguration: {
                            type: "structure",
                            required: [ "DatabaseHost", "DatabasePort", "DatabaseName", "TableName", "SecretArn" ],
                            members: {
                                DatabaseHost: {},
                                DatabasePort: {
                                    type: "integer"
                                },
                                DatabaseName: {},
                                TableName: {},
                                SecretArn: {}
                            }
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        },
                        ColumnConfiguration: {
                            type: "structure",
                            required: [ "DocumentIdColumnName", "DocumentDataColumnName", "ChangeDetectingColumns" ],
                            members: {
                                DocumentIdColumnName: {},
                                DocumentDataColumnName: {},
                                DocumentTitleColumnName: {},
                                FieldMappings: {
                                    shape: "S2z"
                                },
                                ChangeDetectingColumns: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        AclConfiguration: {
                            type: "structure",
                            required: [ "AllowedGroupsColumnName" ],
                            members: {
                                AllowedGroupsColumnName: {}
                            }
                        },
                        SqlConfiguration: {
                            type: "structure",
                            members: {
                                QueryIdentifiersEnclosingOption: {}
                            }
                        }
                    }
                },
                SalesforceConfiguration: {
                    type: "structure",
                    required: [ "ServerUrl", "SecretArn" ],
                    members: {
                        ServerUrl: {},
                        SecretArn: {},
                        StandardObjectConfigurations: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "DocumentDataFieldName" ],
                                members: {
                                    Name: {},
                                    DocumentDataFieldName: {},
                                    DocumentTitleFieldName: {},
                                    FieldMappings: {
                                        shape: "S2z"
                                    }
                                }
                            }
                        },
                        KnowledgeArticleConfiguration: {
                            type: "structure",
                            required: [ "IncludedStates" ],
                            members: {
                                IncludedStates: {
                                    type: "list",
                                    member: {}
                                },
                                StandardKnowledgeArticleTypeConfiguration: {
                                    type: "structure",
                                    required: [ "DocumentDataFieldName" ],
                                    members: {
                                        DocumentDataFieldName: {},
                                        DocumentTitleFieldName: {},
                                        FieldMappings: {
                                            shape: "S2z"
                                        }
                                    }
                                },
                                CustomKnowledgeArticleTypeConfigurations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Name", "DocumentDataFieldName" ],
                                        members: {
                                            Name: {},
                                            DocumentDataFieldName: {},
                                            DocumentTitleFieldName: {},
                                            FieldMappings: {
                                                shape: "S2z"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        ChatterFeedConfiguration: {
                            type: "structure",
                            required: [ "DocumentDataFieldName" ],
                            members: {
                                DocumentDataFieldName: {},
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S2z"
                                },
                                IncludeFilterTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        CrawlAttachments: {
                            type: "boolean"
                        },
                        StandardObjectAttachmentConfiguration: {
                            type: "structure",
                            members: {
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S2z"
                                }
                            }
                        },
                        IncludeAttachmentFilePatterns: {
                            shape: "S2l"
                        },
                        ExcludeAttachmentFilePatterns: {
                            shape: "S2l"
                        }
                    }
                },
                OneDriveConfiguration: {
                    type: "structure",
                    required: [ "TenantDomain", "SecretArn", "OneDriveUsers" ],
                    members: {
                        TenantDomain: {},
                        SecretArn: {},
                        OneDriveUsers: {
                            type: "structure",
                            members: {
                                OneDriveUserList: {
                                    type: "list",
                                    member: {}
                                },
                                OneDriveUserS3Path: {
                                    shape: "S1m"
                                }
                            }
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        FieldMappings: {
                            shape: "S2z"
                        },
                        DisableLocalGroups: {
                            type: "boolean"
                        }
                    }
                },
                ServiceNowConfiguration: {
                    type: "structure",
                    required: [ "HostUrl", "SecretArn", "ServiceNowBuildVersion" ],
                    members: {
                        HostUrl: {},
                        SecretArn: {},
                        ServiceNowBuildVersion: {},
                        KnowledgeArticleConfiguration: {
                            type: "structure",
                            required: [ "DocumentDataFieldName" ],
                            members: {
                                CrawlAttachments: {
                                    type: "boolean"
                                },
                                IncludeAttachmentFilePatterns: {
                                    shape: "S2l"
                                },
                                ExcludeAttachmentFilePatterns: {
                                    shape: "S2l"
                                },
                                DocumentDataFieldName: {},
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S2z"
                                },
                                FilterQuery: {}
                            }
                        },
                        ServiceCatalogConfiguration: {
                            type: "structure",
                            required: [ "DocumentDataFieldName" ],
                            members: {
                                CrawlAttachments: {
                                    type: "boolean"
                                },
                                IncludeAttachmentFilePatterns: {
                                    shape: "S2l"
                                },
                                ExcludeAttachmentFilePatterns: {
                                    shape: "S2l"
                                },
                                DocumentDataFieldName: {},
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S2z"
                                }
                            }
                        },
                        AuthenticationType: {}
                    }
                },
                ConfluenceConfiguration: {
                    type: "structure",
                    required: [ "ServerUrl", "SecretArn", "Version" ],
                    members: {
                        ServerUrl: {},
                        SecretArn: {},
                        Version: {},
                        SpaceConfiguration: {
                            type: "structure",
                            members: {
                                CrawlPersonalSpaces: {
                                    type: "boolean"
                                },
                                CrawlArchivedSpaces: {
                                    type: "boolean"
                                },
                                IncludeSpaces: {
                                    shape: "S4f"
                                },
                                ExcludeSpaces: {
                                    shape: "S4f"
                                },
                                SpaceFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        PageConfiguration: {
                            type: "structure",
                            members: {
                                PageFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        BlogConfiguration: {
                            type: "structure",
                            members: {
                                BlogFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        AttachmentConfiguration: {
                            type: "structure",
                            members: {
                                CrawlAttachments: {
                                    type: "boolean"
                                },
                                AttachmentFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        ProxyConfiguration: {
                            shape: "S35"
                        },
                        AuthenticationType: {}
                    }
                },
                GoogleDriveConfiguration: {
                    type: "structure",
                    required: [ "SecretArn" ],
                    members: {
                        SecretArn: {},
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        FieldMappings: {
                            shape: "S2z"
                        },
                        ExcludeMimeTypes: {
                            type: "list",
                            member: {}
                        },
                        ExcludeUserAccounts: {
                            type: "list",
                            member: {}
                        },
                        ExcludeSharedDrives: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                WebCrawlerConfiguration: {
                    type: "structure",
                    required: [ "Urls" ],
                    members: {
                        Urls: {
                            type: "structure",
                            members: {
                                SeedUrlConfiguration: {
                                    type: "structure",
                                    required: [ "SeedUrls" ],
                                    members: {
                                        SeedUrls: {
                                            type: "list",
                                            member: {}
                                        },
                                        WebCrawlerMode: {}
                                    }
                                },
                                SiteMapsConfiguration: {
                                    type: "structure",
                                    required: [ "SiteMaps" ],
                                    members: {
                                        SiteMaps: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        },
                        CrawlDepth: {
                            type: "integer"
                        },
                        MaxLinksPerPage: {
                            type: "integer"
                        },
                        MaxContentSizePerPageInMegaBytes: {
                            type: "float"
                        },
                        MaxUrlsPerMinuteCrawlRate: {
                            type: "integer"
                        },
                        UrlInclusionPatterns: {
                            shape: "S2l"
                        },
                        UrlExclusionPatterns: {
                            shape: "S2l"
                        },
                        ProxyConfiguration: {
                            shape: "S35"
                        },
                        AuthenticationConfiguration: {
                            type: "structure",
                            members: {
                                BasicAuthentication: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Host", "Port", "Credentials" ],
                                        members: {
                                            Host: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            Credentials: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                WorkDocsConfiguration: {
                    type: "structure",
                    required: [ "OrganizationId" ],
                    members: {
                        OrganizationId: {},
                        CrawlComments: {
                            type: "boolean"
                        },
                        UseChangeLog: {
                            type: "boolean"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        FieldMappings: {
                            shape: "S2z"
                        }
                    }
                },
                FsxConfiguration: {
                    type: "structure",
                    required: [ "FileSystemId", "FileSystemType", "VpcConfiguration" ],
                    members: {
                        FileSystemId: {},
                        FileSystemType: {},
                        VpcConfiguration: {
                            shape: "S2u"
                        },
                        SecretArn: {},
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        FieldMappings: {
                            shape: "S2z"
                        }
                    }
                },
                SlackConfiguration: {
                    type: "structure",
                    required: [ "TeamId", "SecretArn", "SlackEntityList", "SinceCrawlDate" ],
                    members: {
                        TeamId: {},
                        SecretArn: {},
                        VpcConfiguration: {
                            shape: "S2u"
                        },
                        SlackEntityList: {
                            type: "list",
                            member: {}
                        },
                        UseChangeLog: {
                            type: "boolean"
                        },
                        CrawlBotMessage: {
                            type: "boolean"
                        },
                        ExcludeArchived: {
                            type: "boolean"
                        },
                        SinceCrawlDate: {},
                        LookBackPeriod: {
                            type: "integer"
                        },
                        PrivateChannelFilter: {
                            type: "list",
                            member: {}
                        },
                        PublicChannelFilter: {
                            type: "list",
                            member: {}
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        FieldMappings: {
                            shape: "S2z"
                        }
                    }
                },
                BoxConfiguration: {
                    type: "structure",
                    required: [ "EnterpriseId", "SecretArn" ],
                    members: {
                        EnterpriseId: {},
                        SecretArn: {},
                        UseChangeLog: {
                            type: "boolean"
                        },
                        CrawlComments: {
                            type: "boolean"
                        },
                        CrawlTasks: {
                            type: "boolean"
                        },
                        CrawlWebLinks: {
                            type: "boolean"
                        },
                        FileFieldMappings: {
                            shape: "S2z"
                        },
                        TaskFieldMappings: {
                            shape: "S2z"
                        },
                        CommentFieldMappings: {
                            shape: "S2z"
                        },
                        WebLinkFieldMappings: {
                            shape: "S2z"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        }
                    }
                },
                QuipConfiguration: {
                    type: "structure",
                    required: [ "Domain", "SecretArn" ],
                    members: {
                        Domain: {},
                        SecretArn: {},
                        CrawlFileComments: {
                            type: "boolean"
                        },
                        CrawlChatRooms: {
                            type: "boolean"
                        },
                        CrawlAttachments: {
                            type: "boolean"
                        },
                        FolderIds: {
                            type: "list",
                            member: {}
                        },
                        ThreadFieldMappings: {
                            shape: "S2z"
                        },
                        MessageFieldMappings: {
                            shape: "S2z"
                        },
                        AttachmentFieldMappings: {
                            shape: "S2z"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        }
                    }
                },
                JiraConfiguration: {
                    type: "structure",
                    required: [ "JiraAccountUrl", "SecretArn" ],
                    members: {
                        JiraAccountUrl: {},
                        SecretArn: {},
                        UseChangeLog: {
                            type: "boolean"
                        },
                        Project: {
                            type: "list",
                            member: {}
                        },
                        IssueType: {
                            type: "list",
                            member: {}
                        },
                        Status: {
                            type: "list",
                            member: {}
                        },
                        IssueSubEntityFilter: {
                            type: "list",
                            member: {}
                        },
                        AttachmentFieldMappings: {
                            shape: "S2z"
                        },
                        CommentFieldMappings: {
                            shape: "S2z"
                        },
                        IssueFieldMappings: {
                            shape: "S2z"
                        },
                        ProjectFieldMappings: {
                            shape: "S2z"
                        },
                        WorkLogFieldMappings: {
                            shape: "S2z"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        }
                    }
                },
                GitHubConfiguration: {
                    type: "structure",
                    required: [ "SecretArn" ],
                    members: {
                        SaaSConfiguration: {
                            type: "structure",
                            required: [ "OrganizationName", "HostUrl" ],
                            members: {
                                OrganizationName: {},
                                HostUrl: {}
                            }
                        },
                        OnPremiseConfiguration: {
                            type: "structure",
                            required: [ "HostUrl", "OrganizationName", "SslCertificateS3Path" ],
                            members: {
                                HostUrl: {},
                                OrganizationName: {},
                                SslCertificateS3Path: {
                                    shape: "S1m"
                                }
                            }
                        },
                        Type: {},
                        SecretArn: {},
                        UseChangeLog: {
                            type: "boolean"
                        },
                        GitHubDocumentCrawlProperties: {
                            type: "structure",
                            members: {
                                CrawlRepositoryDocuments: {
                                    type: "boolean"
                                },
                                CrawlIssue: {
                                    type: "boolean"
                                },
                                CrawlIssueComment: {
                                    type: "boolean"
                                },
                                CrawlIssueCommentAttachment: {
                                    type: "boolean"
                                },
                                CrawlPullRequest: {
                                    type: "boolean"
                                },
                                CrawlPullRequestComment: {
                                    type: "boolean"
                                },
                                CrawlPullRequestCommentAttachment: {
                                    type: "boolean"
                                }
                            }
                        },
                        RepositoryFilter: {
                            type: "list",
                            member: {}
                        },
                        InclusionFolderNamePatterns: {
                            shape: "S6i"
                        },
                        InclusionFileTypePatterns: {
                            shape: "S6i"
                        },
                        InclusionFileNamePatterns: {
                            shape: "S6i"
                        },
                        ExclusionFolderNamePatterns: {
                            shape: "S6i"
                        },
                        ExclusionFileTypePatterns: {
                            shape: "S6i"
                        },
                        ExclusionFileNamePatterns: {
                            shape: "S6i"
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        },
                        GitHubRepositoryConfigurationFieldMappings: {
                            shape: "S2z"
                        },
                        GitHubCommitConfigurationFieldMappings: {
                            shape: "S2z"
                        },
                        GitHubIssueDocumentConfigurationFieldMappings: {
                            shape: "S2z"
                        },
                        GitHubIssueCommentConfigurationFieldMappings: {
                            shape: "S2z"
                        },
                        GitHubIssueAttachmentConfigurationFieldMappings: {
                            shape: "S2z"
                        },
                        GitHubPullRequestCommentConfigurationFieldMappings: {
                            shape: "S2z"
                        },
                        GitHubPullRequestDocumentConfigurationFieldMappings: {
                            shape: "S2z"
                        },
                        GitHubPullRequestDocumentAttachmentConfigurationFieldMappings: {
                            shape: "S2z"
                        }
                    }
                },
                AlfrescoConfiguration: {
                    deprecated: true,
                    deprecatedMessage: "Deprecated AlfrescoConfiguration in favor of TemplateConfiguration",
                    type: "structure",
                    required: [ "SiteUrl", "SiteId", "SecretArn", "SslCertificateS3Path" ],
                    members: {
                        SiteUrl: {},
                        SiteId: {},
                        SecretArn: {},
                        SslCertificateS3Path: {
                            shape: "S1m"
                        },
                        CrawlSystemFolders: {
                            type: "boolean"
                        },
                        CrawlComments: {
                            type: "boolean"
                        },
                        EntityFilter: {
                            type: "list",
                            member: {}
                        },
                        DocumentLibraryFieldMappings: {
                            shape: "S2z"
                        },
                        BlogFieldMappings: {
                            shape: "S2z"
                        },
                        WikiFieldMappings: {
                            shape: "S2z"
                        },
                        InclusionPatterns: {
                            shape: "S2l"
                        },
                        ExclusionPatterns: {
                            shape: "S2l"
                        },
                        VpcConfiguration: {
                            shape: "S2u"
                        }
                    }
                },
                TemplateConfiguration: {
                    type: "structure",
                    members: {
                        Template: {
                            type: "structure",
                            members: {},
                            document: true
                        }
                    }
                }
            }
        },
        S2l: {
            type: "list",
            member: {}
        },
        S2u: {
            type: "structure",
            required: [ "SubnetIds", "SecurityGroupIds" ],
            members: {
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSourceFieldName", "IndexFieldName" ],
                members: {
                    DataSourceFieldName: {},
                    DateFieldFormat: {},
                    IndexFieldName: {}
                }
            }
        },
        S35: {
            type: "structure",
            required: [ "Host", "Port" ],
            members: {
                Host: {},
                Port: {
                    type: "integer"
                },
                Credentials: {}
            }
        },
        S4f: {
            type: "list",
            member: {}
        },
        S6i: {
            type: "list",
            member: {}
        },
        S6r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S6z: {
            type: "structure",
            members: {
                ContentSourceConfiguration: {
                    type: "structure",
                    members: {
                        DataSourceIds: {
                            type: "list",
                            member: {}
                        },
                        FaqIds: {
                            type: "list",
                            member: {}
                        },
                        DirectPutContent: {
                            type: "boolean"
                        }
                    }
                },
                UserIdentityConfiguration: {
                    type: "structure",
                    members: {
                        IdentityAttributeName: {}
                    }
                }
            }
        },
        S7f: {
            type: "list",
            member: {}
        },
        S7h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        S7k: {
            type: "structure",
            members: {
                FeaturedResultsSetId: {},
                FeaturedResultsSetName: {},
                Description: {},
                Status: {},
                QueryTexts: {
                    shape: "S7f"
                },
                FeaturedDocuments: {
                    shape: "S7h"
                },
                LastUpdatedTimestamp: {
                    type: "long"
                },
                CreationTimestamp: {
                    type: "long"
                }
            }
        },
        S7o: {
            type: "structure",
            members: {
                KmsKeyId: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S7q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    JwtTokenTypeConfiguration: {
                        type: "structure",
                        required: [ "KeyLocation" ],
                        members: {
                            KeyLocation: {},
                            URL: {},
                            SecretManagerArn: {},
                            UserNameAttributeField: {},
                            GroupAttributeField: {},
                            Issuer: {},
                            ClaimRegex: {}
                        }
                    },
                    JsonTokenTypeConfiguration: {
                        type: "structure",
                        required: [ "UserNameAttributeField", "GroupAttributeField" ],
                        members: {
                            UserNameAttributeField: {},
                            GroupAttributeField: {}
                        }
                    }
                }
            }
        },
        S80: {
            type: "structure",
            required: [ "UserGroupResolutionMode" ],
            members: {
                UserGroupResolutionMode: {}
            }
        },
        S8u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndpointType: {},
                    Endpoint: {}
                }
            }
        },
        S9b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {},
                    Relevance: {
                        shape: "S9f"
                    },
                    Search: {
                        type: "structure",
                        members: {
                            Facetable: {
                                type: "boolean"
                            },
                            Searchable: {
                                type: "boolean"
                            },
                            Displayable: {
                                type: "boolean"
                            },
                            Sortable: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S9f: {
            type: "structure",
            members: {
                Freshness: {
                    type: "boolean"
                },
                Importance: {
                    type: "integer"
                },
                Duration: {},
                RankOrder: {},
                ValueImportanceMap: {
                    type: "map",
                    key: {},
                    value: {
                        type: "integer"
                    }
                }
            }
        },
        S9t: {
            type: "structure",
            required: [ "StorageCapacityUnits", "QueryCapacityUnits" ],
            members: {
                StorageCapacityUnits: {
                    type: "integer"
                },
                QueryCapacityUnits: {
                    type: "integer"
                }
            }
        },
        Sae: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AttributeName: {},
                    Suggestable: {
                        type: "boolean"
                    }
                }
            }
        },
        Sav: {
            type: "list",
            member: {}
        },
        Saw: {
            type: "structure",
            members: {
                AndAllFilters: {
                    shape: "Sax"
                },
                OrAllFilters: {
                    shape: "Sax"
                },
                NotFilter: {
                    shape: "Saw"
                },
                EqualsTo: {
                    shape: "S12"
                },
                ContainsAll: {
                    shape: "S12"
                },
                ContainsAny: {
                    shape: "S12"
                },
                GreaterThan: {
                    shape: "S12"
                },
                GreaterThanOrEquals: {
                    shape: "S12"
                },
                LessThan: {
                    shape: "S12"
                },
                LessThanOrEquals: {
                    shape: "S12"
                }
            }
        },
        Sax: {
            type: "list",
            member: {
                shape: "Saw"
            }
        },
        Say: {
            type: "structure",
            members: {
                Token: {},
                UserId: {},
                Groups: {
                    type: "list",
                    member: {}
                },
                DataSourceGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "GroupId", "DataSourceId" ],
                        members: {
                            GroupId: {},
                            DataSourceId: {}
                        }
                    }
                }
            }
        },
        Sbj: {
            type: "structure",
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        Scf: {
            type: "string",
            sensitive: true
        },
        Sdq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DocumentAttributeKey: {},
                    Facets: {
                        shape: "Sdq"
                    },
                    MaxResults: {
                        type: "integer"
                    }
                }
            }
        },
        Sdu: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Relevance" ],
                members: {
                    Name: {},
                    Relevance: {
                        shape: "S9f"
                    }
                }
            }
        },
        Sdw: {
            type: "structure",
            required: [ "DocumentAttributeKey", "SortOrder" ],
            members: {
                DocumentAttributeKey: {},
                SortOrder: {}
            }
        },
        Sdy: {
            type: "list",
            member: {
                shape: "Sdw"
            }
        },
        Se9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "ValueType", "Value" ],
                members: {
                    Key: {},
                    ValueType: {},
                    Value: {
                        type: "structure",
                        members: {
                            TextWithHighlightsValue: {
                                shape: "Sed"
                            }
                        }
                    }
                }
            }
        },
        Sed: {
            type: "structure",
            members: {
                Text: {},
                Highlights: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "BeginOffset", "EndOffset" ],
                        members: {
                            BeginOffset: {
                                type: "integer"
                            },
                            EndOffset: {
                                type: "integer"
                            },
                            TopAnswer: {
                                type: "boolean"
                            },
                            Type: {}
                        }
                    }
                }
            }
        },
        Seh: {
            type: "structure",
            members: {
                ScoreConfidence: {}
            }
        },
        Ses: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DocumentAttributeKey: {},
                    DocumentAttributeValueType: {},
                    DocumentAttributeValueCountPairs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentAttributeValue: {
                                    shape: "S14"
                                },
                                Count: {
                                    type: "integer"
                                },
                                FacetResults: {
                                    shape: "Ses"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        GetSnapshots: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAccessControlConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDataSourceSyncJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDataSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListEntityPersonas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListExperienceEntities: {
            input_token: "NextToken",
            output_token: "NextToken"
        },
        ListExperiences: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFaqs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGroupsOlderThanOrderingId: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListIndices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListQuerySuggestionsBlockLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListThesauri: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["networkmanager"] = {};

AWS.NetworkManager = AWS.Service.defineService("networkmanager", [ "2019-07-05" ]);

AWS.apiLoader.services["networkmanager"]["2019-07-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-05",
        endpointPrefix: "networkmanager",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "NetworkManager",
        serviceFullName: "AWS Network Manager",
        serviceId: "NetworkManager",
        signatureVersion: "v4",
        signingName: "networkmanager",
        uid: "networkmanager-2019-07-05"
    },
    operations: {
        AcceptAttachment: {
            http: {
                requestUri: "/attachments/{attachmentId}/accept"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attachment: {
                        shape: "S4"
                    }
                }
            }
        },
        AssociateConnectPeer: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/connect-peer-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "ConnectPeerId", "DeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectPeerId: {},
                    DeviceId: {},
                    LinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectPeerAssociation: {
                        shape: "Sq"
                    }
                }
            }
        },
        AssociateCustomerGateway: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/customer-gateway-associations"
            },
            input: {
                type: "structure",
                required: [ "CustomerGatewayArn", "GlobalNetworkId", "DeviceId" ],
                members: {
                    CustomerGatewayArn: {},
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {},
                    LinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGatewayAssociation: {
                        shape: "Sv"
                    }
                }
            }
        },
        AssociateLink: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/link-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {},
                    LinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkAssociation: {
                        shape: "Sz"
                    }
                }
            }
        },
        AssociateTransitGatewayConnectPeer: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayConnectPeerArn", "DeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayConnectPeerArn: {},
                    DeviceId: {},
                    LinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeerAssociation: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateConnectAttachment: {
            http: {
                requestUri: "/connect-attachments"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "EdgeLocation", "TransportAttachmentId", "Options" ],
                members: {
                    CoreNetworkId: {},
                    EdgeLocation: {},
                    TransportAttachmentId: {},
                    Options: {
                        shape: "S17"
                    },
                    Tags: {
                        shape: "Se"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectAttachment: {
                        shape: "S1b"
                    }
                }
            }
        },
        CreateConnectPeer: {
            http: {
                requestUri: "/connect-peers"
            },
            input: {
                type: "structure",
                required: [ "ConnectAttachmentId", "PeerAddress" ],
                members: {
                    ConnectAttachmentId: {},
                    CoreNetworkAddress: {},
                    PeerAddress: {},
                    BgpOptions: {
                        type: "structure",
                        members: {
                            PeerAsn: {
                                type: "long"
                            }
                        }
                    },
                    InsideCidrBlocks: {
                        shape: "S1g"
                    },
                    Tags: {
                        shape: "Se"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    SubnetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectPeer: {
                        shape: "S1j"
                    }
                }
            }
        },
        CreateConnection: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/connections"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId", "ConnectedDeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {},
                    ConnectedDeviceId: {},
                    LinkId: {},
                    ConnectedLinkId: {},
                    Description: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S1q"
                    }
                }
            }
        },
        CreateCoreNetwork: {
            http: {
                requestUri: "/core-networks"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {},
                    Description: {},
                    Tags: {
                        shape: "Se"
                    },
                    PolicyDocument: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetwork: {
                        shape: "S1x"
                    }
                }
            }
        },
        CreateDevice: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/devices"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    AWSLocation: {
                        shape: "S25"
                    },
                    Description: {},
                    Type: {},
                    Vendor: {},
                    Model: {},
                    SerialNumber: {},
                    Location: {
                        shape: "S26"
                    },
                    SiteId: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        shape: "S29"
                    }
                }
            }
        },
        CreateGlobalNetwork: {
            http: {
                requestUri: "/global-networks"
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetwork: {
                        shape: "S2e"
                    }
                }
            }
        },
        CreateLink: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/links"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "Bandwidth", "SiteId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    Description: {},
                    Type: {},
                    Bandwidth: {
                        shape: "S2i"
                    },
                    Provider: {},
                    SiteId: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Link: {
                        shape: "S2k"
                    }
                }
            }
        },
        CreateSite: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/sites"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    Description: {},
                    Location: {
                        shape: "S26"
                    },
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S2p"
                    }
                }
            }
        },
        CreateSiteToSiteVpnAttachment: {
            http: {
                requestUri: "/site-to-site-vpn-attachments"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "VpnConnectionArn" ],
                members: {
                    CoreNetworkId: {},
                    VpnConnectionArn: {},
                    Tags: {
                        shape: "Se"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SiteToSiteVpnAttachment: {
                        shape: "S2v"
                    }
                }
            }
        },
        CreateTransitGatewayPeering: {
            http: {
                requestUri: "/transit-gateway-peerings"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "TransitGatewayArn" ],
                members: {
                    CoreNetworkId: {},
                    TransitGatewayArn: {},
                    Tags: {
                        shape: "Se"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPeering: {
                        shape: "S2z"
                    }
                }
            }
        },
        CreateTransitGatewayRouteTableAttachment: {
            http: {
                requestUri: "/transit-gateway-route-table-attachments"
            },
            input: {
                type: "structure",
                required: [ "PeeringId", "TransitGatewayRouteTableArn" ],
                members: {
                    PeeringId: {},
                    TransitGatewayRouteTableArn: {},
                    Tags: {
                        shape: "Se"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTableAttachment: {
                        shape: "S38"
                    }
                }
            }
        },
        CreateVpcAttachment: {
            http: {
                requestUri: "/vpc-attachments"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "VpcArn", "SubnetArns" ],
                members: {
                    CoreNetworkId: {},
                    VpcArn: {},
                    SubnetArns: {
                        shape: "S3b"
                    },
                    Options: {
                        shape: "S3c"
                    },
                    Tags: {
                        shape: "Se"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcAttachment: {
                        shape: "S3f"
                    }
                }
            }
        },
        DeleteAttachment: {
            http: {
                method: "DELETE",
                requestUri: "/attachments/{attachmentId}"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attachment: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteConnectPeer: {
            http: {
                method: "DELETE",
                requestUri: "/connect-peers/{connectPeerId}"
            },
            input: {
                type: "structure",
                required: [ "ConnectPeerId" ],
                members: {
                    ConnectPeerId: {
                        location: "uri",
                        locationName: "connectPeerId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectPeer: {
                        shape: "S1j"
                    }
                }
            }
        },
        DeleteConnection: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/connections/{connectionId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "ConnectionId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S1q"
                    }
                }
            }
        },
        DeleteCoreNetwork: {
            http: {
                method: "DELETE",
                requestUri: "/core-networks/{coreNetworkId}"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetwork: {
                        shape: "S1x"
                    }
                }
            }
        },
        DeleteCoreNetworkPolicyVersion: {
            http: {
                method: "DELETE",
                requestUri: "/core-networks/{coreNetworkId}/core-network-policy-versions/{policyVersionId}"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "PolicyVersionId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    PolicyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworkPolicy: {
                        shape: "S3q"
                    }
                }
            }
        },
        DeleteDevice: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/devices/{deviceId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        shape: "S29"
                    }
                }
            }
        },
        DeleteGlobalNetwork: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetwork: {
                        shape: "S2e"
                    }
                }
            }
        },
        DeleteLink: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/links/{linkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    LinkId: {
                        location: "uri",
                        locationName: "linkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Link: {
                        shape: "S2k"
                    }
                }
            }
        },
        DeletePeering: {
            http: {
                method: "DELETE",
                requestUri: "/peerings/{peeringId}"
            },
            input: {
                type: "structure",
                required: [ "PeeringId" ],
                members: {
                    PeeringId: {
                        location: "uri",
                        locationName: "peeringId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Peering: {
                        shape: "S30"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/resource-policy/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSite: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/sites/{siteId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "SiteId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    SiteId: {
                        location: "uri",
                        locationName: "siteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S2p"
                    }
                }
            }
        },
        DeregisterTransitGateway: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-registrations/{transitGatewayArn}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayArn: {
                        location: "uri",
                        locationName: "transitGatewayArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRegistration: {
                        shape: "S4a"
                    }
                }
            }
        },
        DescribeGlobalNetworks: {
            http: {
                method: "GET",
                requestUri: "/global-networks"
            },
            input: {
                type: "structure",
                members: {
                    GlobalNetworkIds: {
                        location: "querystring",
                        locationName: "globalNetworkIds",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetworks: {
                        type: "list",
                        member: {
                            shape: "S2e"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateConnectPeer: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/connect-peer-associations/{connectPeerId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "ConnectPeerId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectPeerId: {
                        location: "uri",
                        locationName: "connectPeerId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectPeerAssociation: {
                        shape: "Sq"
                    }
                }
            }
        },
        DisassociateCustomerGateway: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/customer-gateway-associations/{customerGatewayArn}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "CustomerGatewayArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    CustomerGatewayArn: {
                        location: "uri",
                        locationName: "customerGatewayArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGatewayAssociation: {
                        shape: "Sv"
                    }
                }
            }
        },
        DisassociateLink: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/link-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    LinkId: {
                        location: "querystring",
                        locationName: "linkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkAssociation: {
                        shape: "Sz"
                    }
                }
            }
        },
        DisassociateTransitGatewayConnectPeer: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations/{transitGatewayConnectPeerArn}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayConnectPeerArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayConnectPeerArn: {
                        location: "uri",
                        locationName: "transitGatewayConnectPeerArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeerAssociation: {
                        shape: "S14"
                    }
                }
            }
        },
        ExecuteCoreNetworkChangeSet: {
            http: {
                requestUri: "/core-networks/{coreNetworkId}/core-network-change-sets/{policyVersionId}/execute"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "PolicyVersionId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    PolicyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetConnectAttachment: {
            http: {
                method: "GET",
                requestUri: "/connect-attachments/{attachmentId}"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectAttachment: {
                        shape: "S1b"
                    }
                }
            }
        },
        GetConnectPeer: {
            http: {
                method: "GET",
                requestUri: "/connect-peers/{connectPeerId}"
            },
            input: {
                type: "structure",
                required: [ "ConnectPeerId" ],
                members: {
                    ConnectPeerId: {
                        location: "uri",
                        locationName: "connectPeerId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectPeer: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetConnectPeerAssociations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/connect-peer-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectPeerIds: {
                        location: "querystring",
                        locationName: "connectPeerIds",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectPeerAssociations: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetConnections: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/connections"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectionIds: {
                        location: "querystring",
                        locationName: "connectionIds",
                        type: "list",
                        member: {}
                    },
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "S1q"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCoreNetwork: {
            http: {
                method: "GET",
                requestUri: "/core-networks/{coreNetworkId}"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetwork: {
                        shape: "S1x"
                    }
                }
            }
        },
        GetCoreNetworkChangeEvents: {
            http: {
                method: "GET",
                requestUri: "/core-networks/{coreNetworkId}/core-network-change-events/{policyVersionId}"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "PolicyVersionId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    PolicyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId",
                        type: "integer"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworkChangeEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Action: {},
                                IdentifierPath: {},
                                EventTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Values: {
                                    type: "structure",
                                    members: {
                                        EdgeLocation: {},
                                        SegmentName: {},
                                        AttachmentId: {},
                                        Cidr: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCoreNetworkChangeSet: {
            http: {
                method: "GET",
                requestUri: "/core-networks/{coreNetworkId}/core-network-change-sets/{policyVersionId}"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "PolicyVersionId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    PolicyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId",
                        type: "integer"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworkChanges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Action: {},
                                Identifier: {},
                                PreviousValues: {
                                    shape: "S5j"
                                },
                                NewValues: {
                                    shape: "S5j"
                                },
                                IdentifierPath: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCoreNetworkPolicy: {
            http: {
                method: "GET",
                requestUri: "/core-networks/{coreNetworkId}/core-network-policy"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    PolicyVersionId: {
                        location: "querystring",
                        locationName: "policyVersionId",
                        type: "integer"
                    },
                    Alias: {
                        location: "querystring",
                        locationName: "alias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworkPolicy: {
                        shape: "S3q"
                    }
                }
            }
        },
        GetCustomerGatewayAssociations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/customer-gateway-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    CustomerGatewayArns: {
                        location: "querystring",
                        locationName: "customerGatewayArns",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGatewayAssociations: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDevices: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/devices"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceIds: {
                        location: "querystring",
                        locationName: "deviceIds",
                        type: "list",
                        member: {}
                    },
                    SiteId: {
                        location: "querystring",
                        locationName: "siteId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            shape: "S29"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetLinkAssociations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/link-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    LinkId: {
                        location: "querystring",
                        locationName: "linkId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkAssociations: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetLinks: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/links"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    LinkIds: {
                        location: "querystring",
                        locationName: "linkIds",
                        type: "list",
                        member: {}
                    },
                    SiteId: {
                        location: "querystring",
                        locationName: "siteId"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    Provider: {
                        location: "querystring",
                        locationName: "provider"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Links: {
                        type: "list",
                        member: {
                            shape: "S2k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetNetworkResourceCounts: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/network-resource-count"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkResourceCounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {},
                                Count: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetNetworkResourceRelationships: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/network-resource-relationships"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    CoreNetworkId: {
                        location: "querystring",
                        locationName: "coreNetworkId"
                    },
                    RegisteredGatewayArn: {
                        location: "querystring",
                        locationName: "registeredGatewayArn"
                    },
                    AwsRegion: {
                        location: "querystring",
                        locationName: "awsRegion"
                    },
                    AccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Relationships: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                From: {},
                                To: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetNetworkResources: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/network-resources"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    CoreNetworkId: {
                        location: "querystring",
                        locationName: "coreNetworkId"
                    },
                    RegisteredGatewayArn: {
                        location: "querystring",
                        locationName: "registeredGatewayArn"
                    },
                    AwsRegion: {
                        location: "querystring",
                        locationName: "awsRegion"
                    },
                    AccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegisteredGatewayArn: {},
                                CoreNetworkId: {},
                                AwsRegion: {},
                                AccountId: {},
                                ResourceType: {},
                                ResourceId: {},
                                ResourceArn: {},
                                Definition: {},
                                DefinitionTimestamp: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Se"
                                },
                                Metadata: {
                                    shape: "S6d"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetNetworkRoutes: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/network-routes"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "RouteTableIdentifier" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    RouteTableIdentifier: {
                        type: "structure",
                        members: {
                            TransitGatewayRouteTableArn: {},
                            CoreNetworkSegmentEdge: {
                                shape: "S6g"
                            }
                        }
                    },
                    ExactCidrMatches: {
                        shape: "S1g"
                    },
                    LongestPrefixMatches: {
                        shape: "S1g"
                    },
                    SubnetOfMatches: {
                        shape: "S1g"
                    },
                    SupernetOfMatches: {
                        shape: "S1g"
                    },
                    PrefixListIds: {
                        shape: "S1g"
                    },
                    States: {
                        type: "list",
                        member: {}
                    },
                    Types: {
                        type: "list",
                        member: {}
                    },
                    DestinationFilters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RouteTableArn: {},
                    CoreNetworkSegmentEdge: {
                        shape: "S6g"
                    },
                    RouteTableType: {},
                    RouteTableTimestamp: {
                        type: "timestamp"
                    },
                    NetworkRoutes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DestinationCidrBlock: {},
                                Destinations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            CoreNetworkAttachmentId: {},
                                            TransitGatewayAttachmentId: {},
                                            SegmentName: {},
                                            EdgeLocation: {},
                                            ResourceType: {},
                                            ResourceId: {}
                                        }
                                    }
                                },
                                PrefixListId: {},
                                State: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        GetNetworkTelemetry: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/network-telemetry"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    CoreNetworkId: {
                        location: "querystring",
                        locationName: "coreNetworkId"
                    },
                    RegisteredGatewayArn: {
                        location: "querystring",
                        locationName: "registeredGatewayArn"
                    },
                    AwsRegion: {
                        location: "querystring",
                        locationName: "awsRegion"
                    },
                    AccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkTelemetry: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegisteredGatewayArn: {},
                                CoreNetworkId: {},
                                AwsRegion: {},
                                AccountId: {},
                                ResourceType: {},
                                ResourceId: {},
                                ResourceArn: {},
                                Address: {},
                                Health: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        Status: {},
                                        Timestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/resource-policy/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyDocument: {
                        jsonvalue: true
                    }
                }
            }
        },
        GetRouteAnalysis: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/route-analyses/{routeAnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "RouteAnalysisId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    RouteAnalysisId: {
                        location: "uri",
                        locationName: "routeAnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RouteAnalysis: {
                        shape: "S78"
                    }
                }
            }
        },
        GetSiteToSiteVpnAttachment: {
            http: {
                method: "GET",
                requestUri: "/site-to-site-vpn-attachments/{attachmentId}"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SiteToSiteVpnAttachment: {
                        shape: "S2v"
                    }
                }
            }
        },
        GetSites: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/sites"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    SiteIds: {
                        location: "querystring",
                        locationName: "siteIds",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sites: {
                        type: "list",
                        member: {
                            shape: "S2p"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTransitGatewayConnectPeerAssociations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayConnectPeerArns: {
                        location: "querystring",
                        locationName: "transitGatewayConnectPeerArns",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeerAssociations: {
                        type: "list",
                        member: {
                            shape: "S14"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTransitGatewayPeering: {
            http: {
                method: "GET",
                requestUri: "/transit-gateway-peerings/{peeringId}"
            },
            input: {
                type: "structure",
                required: [ "PeeringId" ],
                members: {
                    PeeringId: {
                        location: "uri",
                        locationName: "peeringId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPeering: {
                        shape: "S2z"
                    }
                }
            }
        },
        GetTransitGatewayRegistrations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-registrations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayArns: {
                        location: "querystring",
                        locationName: "transitGatewayArns",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRegistrations: {
                        type: "list",
                        member: {
                            shape: "S4a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTransitGatewayRouteTableAttachment: {
            http: {
                method: "GET",
                requestUri: "/transit-gateway-route-table-attachments/{attachmentId}"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTableAttachment: {
                        shape: "S38"
                    }
                }
            }
        },
        GetVpcAttachment: {
            http: {
                method: "GET",
                requestUri: "/vpc-attachments/{attachmentId}"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcAttachment: {
                        shape: "S3f"
                    }
                }
            }
        },
        ListAttachments: {
            http: {
                method: "GET",
                requestUri: "/attachments"
            },
            input: {
                type: "structure",
                members: {
                    CoreNetworkId: {
                        location: "querystring",
                        locationName: "coreNetworkId"
                    },
                    AttachmentType: {
                        location: "querystring",
                        locationName: "attachmentType"
                    },
                    EdgeLocation: {
                        location: "querystring",
                        locationName: "edgeLocation"
                    },
                    State: {
                        location: "querystring",
                        locationName: "state"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attachments: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnectPeers: {
            http: {
                method: "GET",
                requestUri: "/connect-peers"
            },
            input: {
                type: "structure",
                members: {
                    CoreNetworkId: {
                        location: "querystring",
                        locationName: "coreNetworkId"
                    },
                    ConnectAttachmentId: {
                        location: "querystring",
                        locationName: "connectAttachmentId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectPeers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CoreNetworkId: {},
                                ConnectAttachmentId: {},
                                ConnectPeerId: {},
                                EdgeLocation: {},
                                ConnectPeerState: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Se"
                                },
                                SubnetArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCoreNetworkPolicyVersions: {
            http: {
                method: "GET",
                requestUri: "/core-networks/{coreNetworkId}/core-network-policy-versions"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworkPolicyVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CoreNetworkId: {},
                                PolicyVersionId: {
                                    type: "integer"
                                },
                                Alias: {},
                                Description: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                ChangeSetState: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCoreNetworks: {
            http: {
                method: "GET",
                requestUri: "/core-networks"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CoreNetworkId: {},
                                CoreNetworkArn: {},
                                GlobalNetworkId: {},
                                OwnerAccountId: {},
                                State: {},
                                Description: {},
                                Tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOrganizationServiceAccessStatus: {
            http: {
                method: "GET",
                requestUri: "/organizations/service-access"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationStatus: {
                        shape: "S8n"
                    },
                    NextToken: {}
                }
            }
        },
        ListPeerings: {
            http: {
                method: "GET",
                requestUri: "/peerings"
            },
            input: {
                type: "structure",
                members: {
                    CoreNetworkId: {
                        location: "querystring",
                        locationName: "coreNetworkId"
                    },
                    PeeringType: {
                        location: "querystring",
                        locationName: "peeringType"
                    },
                    EdgeLocation: {
                        location: "querystring",
                        locationName: "edgeLocation"
                    },
                    State: {
                        location: "querystring",
                        locationName: "state"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Peerings: {
                        type: "list",
                        member: {
                            shape: "S30"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Se"
                    }
                }
            }
        },
        PutCoreNetworkPolicy: {
            http: {
                requestUri: "/core-networks/{coreNetworkId}/core-network-policy"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "PolicyDocument" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    PolicyDocument: {
                        jsonvalue: true
                    },
                    Description: {},
                    LatestVersionId: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworkPolicy: {
                        shape: "S3q"
                    }
                }
            }
        },
        PutResourcePolicy: {
            http: {
                requestUri: "/resource-policy/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "PolicyDocument", "ResourceArn" ],
                members: {
                    PolicyDocument: {
                        jsonvalue: true
                    },
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegisterTransitGateway: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-registrations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRegistration: {
                        shape: "S4a"
                    }
                }
            }
        },
        RejectAttachment: {
            http: {
                requestUri: "/attachments/{attachmentId}/reject"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attachment: {
                        shape: "S4"
                    }
                }
            }
        },
        RestoreCoreNetworkPolicyVersion: {
            http: {
                requestUri: "/core-networks/{coreNetworkId}/core-network-policy-versions/{policyVersionId}/restore"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId", "PolicyVersionId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    PolicyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetworkPolicy: {
                        shape: "S3q"
                    }
                }
            }
        },
        StartOrganizationServiceAccessUpdate: {
            http: {
                requestUri: "/organizations/service-access"
            },
            input: {
                type: "structure",
                required: [ "Action" ],
                members: {
                    Action: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationStatus: {
                        shape: "S8n"
                    }
                }
            }
        },
        StartRouteAnalysis: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/route-analyses"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "Source", "Destination" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    Source: {
                        shape: "S9d"
                    },
                    Destination: {
                        shape: "S9d"
                    },
                    IncludeReturnPath: {
                        type: "boolean"
                    },
                    UseMiddleboxes: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RouteAnalysis: {
                        shape: "S78"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnection: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/connections/{connectionId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "ConnectionId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    },
                    LinkId: {},
                    ConnectedLinkId: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateCoreNetwork: {
            http: {
                method: "PATCH",
                requestUri: "/core-networks/{coreNetworkId}"
            },
            input: {
                type: "structure",
                required: [ "CoreNetworkId" ],
                members: {
                    CoreNetworkId: {
                        location: "uri",
                        locationName: "coreNetworkId"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CoreNetwork: {
                        shape: "S1x"
                    }
                }
            }
        },
        UpdateDevice: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/devices/{deviceId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    AWSLocation: {
                        shape: "S25"
                    },
                    Description: {},
                    Type: {},
                    Vendor: {},
                    Model: {},
                    SerialNumber: {},
                    Location: {
                        shape: "S26"
                    },
                    SiteId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        shape: "S29"
                    }
                }
            }
        },
        UpdateGlobalNetwork: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetwork: {
                        shape: "S2e"
                    }
                }
            }
        },
        UpdateLink: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/links/{linkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    LinkId: {
                        location: "uri",
                        locationName: "linkId"
                    },
                    Description: {},
                    Type: {},
                    Bandwidth: {
                        shape: "S2i"
                    },
                    Provider: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Link: {
                        shape: "S2k"
                    }
                }
            }
        },
        UpdateNetworkResourceMetadata: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/network-resources/{resourceArn}/metadata"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "ResourceArn", "Metadata" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Metadata: {
                        shape: "S6d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Metadata: {
                        shape: "S6d"
                    }
                }
            }
        },
        UpdateSite: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/sites/{siteId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "SiteId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    SiteId: {
                        location: "uri",
                        locationName: "siteId"
                    },
                    Description: {},
                    Location: {
                        shape: "S26"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S2p"
                    }
                }
            }
        },
        UpdateVpcAttachment: {
            http: {
                method: "PATCH",
                requestUri: "/vpc-attachments/{attachmentId}"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        location: "uri",
                        locationName: "attachmentId"
                    },
                    AddSubnetArns: {
                        shape: "S3b"
                    },
                    RemoveSubnetArns: {
                        shape: "S3b"
                    },
                    Options: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcAttachment: {
                        shape: "S3f"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                CoreNetworkId: {},
                CoreNetworkArn: {},
                AttachmentId: {},
                OwnerAccountId: {},
                AttachmentType: {},
                State: {},
                EdgeLocation: {},
                ResourceArn: {},
                AttachmentPolicyRuleNumber: {
                    type: "integer"
                },
                SegmentName: {},
                Tags: {
                    shape: "Se"
                },
                ProposedSegmentChange: {
                    type: "structure",
                    members: {
                        Tags: {
                            shape: "Se"
                        },
                        AttachmentPolicyRuleNumber: {
                            type: "integer"
                        },
                        SegmentName: {}
                    }
                },
                CreatedAt: {
                    type: "timestamp"
                },
                UpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                ConnectPeerId: {},
                GlobalNetworkId: {},
                DeviceId: {},
                LinkId: {},
                State: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                CustomerGatewayArn: {},
                GlobalNetworkId: {},
                DeviceId: {},
                LinkId: {},
                State: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                DeviceId: {},
                LinkId: {},
                LinkAssociationState: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                TransitGatewayConnectPeerArn: {},
                GlobalNetworkId: {},
                DeviceId: {},
                LinkId: {},
                State: {}
            }
        },
        S17: {
            type: "structure",
            members: {
                Protocol: {}
            }
        },
        S1b: {
            type: "structure",
            members: {
                Attachment: {
                    shape: "S4"
                },
                TransportAttachmentId: {},
                Options: {
                    shape: "S17"
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "structure",
            members: {
                CoreNetworkId: {},
                ConnectAttachmentId: {},
                ConnectPeerId: {},
                EdgeLocation: {},
                State: {},
                CreatedAt: {
                    type: "timestamp"
                },
                Configuration: {
                    type: "structure",
                    members: {
                        CoreNetworkAddress: {},
                        PeerAddress: {},
                        InsideCidrBlocks: {
                            shape: "S1g"
                        },
                        Protocol: {},
                        BgpConfigurations: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    CoreNetworkAsn: {
                                        type: "long"
                                    },
                                    PeerAsn: {
                                        type: "long"
                                    },
                                    CoreNetworkAddress: {},
                                    PeerAddress: {}
                                }
                            }
                        }
                    }
                },
                Tags: {
                    shape: "Se"
                },
                SubnetArn: {}
            }
        },
        S1q: {
            type: "structure",
            members: {
                ConnectionId: {},
                ConnectionArn: {},
                GlobalNetworkId: {},
                DeviceId: {},
                ConnectedDeviceId: {},
                LinkId: {},
                ConnectedLinkId: {},
                Description: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Se"
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                CoreNetworkId: {},
                CoreNetworkArn: {},
                Description: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Segments: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            EdgeLocations: {
                                shape: "S21"
                            },
                            SharedSegments: {
                                shape: "S1g"
                            }
                        }
                    }
                },
                Edges: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EdgeLocation: {},
                            Asn: {
                                type: "long"
                            },
                            InsideCidrBlocks: {
                                shape: "S1g"
                            }
                        }
                    }
                },
                Tags: {
                    shape: "Se"
                }
            }
        },
        S21: {
            type: "list",
            member: {}
        },
        S25: {
            type: "structure",
            members: {
                Zone: {},
                SubnetArn: {}
            }
        },
        S26: {
            type: "structure",
            members: {
                Address: {},
                Latitude: {},
                Longitude: {}
            },
            sensitive: true
        },
        S29: {
            type: "structure",
            members: {
                DeviceId: {},
                DeviceArn: {},
                GlobalNetworkId: {},
                AWSLocation: {
                    shape: "S25"
                },
                Description: {},
                Type: {},
                Vendor: {},
                Model: {},
                SerialNumber: {},
                Location: {
                    shape: "S26"
                },
                SiteId: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Se"
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                GlobalNetworkArn: {},
                Description: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Se"
                }
            }
        },
        S2i: {
            type: "structure",
            members: {
                UploadSpeed: {
                    type: "integer"
                },
                DownloadSpeed: {
                    type: "integer"
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                LinkId: {},
                LinkArn: {},
                GlobalNetworkId: {},
                SiteId: {},
                Description: {},
                Type: {},
                Bandwidth: {
                    shape: "S2i"
                },
                Provider: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Se"
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                SiteId: {},
                SiteArn: {},
                GlobalNetworkId: {},
                Description: {},
                Location: {
                    shape: "S26"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Se"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                Attachment: {
                    shape: "S4"
                },
                VpnConnectionArn: {}
            }
        },
        S2z: {
            type: "structure",
            members: {
                Peering: {
                    shape: "S30"
                },
                TransitGatewayArn: {},
                TransitGatewayPeeringAttachmentId: {}
            }
        },
        S30: {
            type: "structure",
            members: {
                CoreNetworkId: {},
                CoreNetworkArn: {},
                PeeringId: {},
                OwnerAccountId: {},
                PeeringType: {},
                State: {},
                EdgeLocation: {},
                ResourceArn: {},
                Tags: {
                    shape: "Se"
                },
                CreatedAt: {
                    type: "timestamp"
                }
            }
        },
        S38: {
            type: "structure",
            members: {
                Attachment: {
                    shape: "S4"
                },
                PeeringId: {},
                TransitGatewayRouteTableArn: {}
            }
        },
        S3b: {
            type: "list",
            member: {}
        },
        S3c: {
            type: "structure",
            members: {
                Ipv6Support: {
                    type: "boolean"
                },
                ApplianceModeSupport: {
                    type: "boolean"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                Attachment: {
                    shape: "S4"
                },
                SubnetArns: {
                    shape: "S3b"
                },
                Options: {
                    shape: "S3c"
                }
            }
        },
        S3q: {
            type: "structure",
            members: {
                CoreNetworkId: {},
                PolicyVersionId: {
                    type: "integer"
                },
                Alias: {},
                Description: {},
                CreatedAt: {
                    type: "timestamp"
                },
                ChangeSetState: {},
                PolicyErrors: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ErrorCode", "Message" ],
                        members: {
                            ErrorCode: {},
                            Message: {},
                            Path: {}
                        }
                    }
                },
                PolicyDocument: {
                    jsonvalue: true
                }
            }
        },
        S4a: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                TransitGatewayArn: {},
                State: {
                    type: "structure",
                    members: {
                        Code: {},
                        Message: {}
                    }
                }
            }
        },
        S5j: {
            type: "structure",
            members: {
                SegmentName: {},
                EdgeLocations: {
                    shape: "S21"
                },
                Asn: {
                    type: "long"
                },
                Cidr: {},
                DestinationIdentifier: {},
                InsideCidrBlocks: {
                    shape: "S1g"
                },
                SharedSegments: {
                    shape: "S1g"
                }
            }
        },
        S6d: {
            type: "map",
            key: {},
            value: {}
        },
        S6g: {
            type: "structure",
            members: {
                CoreNetworkId: {},
                SegmentName: {},
                EdgeLocation: {}
            }
        },
        S78: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                OwnerAccountId: {},
                RouteAnalysisId: {},
                StartTimestamp: {
                    type: "timestamp"
                },
                Status: {},
                Source: {
                    shape: "S7a"
                },
                Destination: {
                    shape: "S7a"
                },
                IncludeReturnPath: {
                    type: "boolean"
                },
                UseMiddleboxes: {
                    type: "boolean"
                },
                ForwardPath: {
                    shape: "S7c"
                },
                ReturnPath: {
                    shape: "S7c"
                }
            }
        },
        S7a: {
            type: "structure",
            members: {
                TransitGatewayAttachmentArn: {},
                TransitGatewayArn: {},
                IpAddress: {}
            }
        },
        S7c: {
            type: "structure",
            members: {
                CompletionStatus: {
                    type: "structure",
                    members: {
                        ResultCode: {},
                        ReasonCode: {},
                        ReasonContext: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                },
                Path: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Sequence: {
                                type: "integer"
                            },
                            Resource: {
                                type: "structure",
                                members: {
                                    RegisteredGatewayArn: {},
                                    ResourceArn: {},
                                    ResourceType: {},
                                    Definition: {},
                                    NameTag: {},
                                    IsMiddlebox: {
                                        type: "boolean"
                                    }
                                }
                            },
                            DestinationCidrBlock: {}
                        }
                    }
                }
            }
        },
        S8n: {
            type: "structure",
            members: {
                OrganizationId: {},
                OrganizationAwsServiceAccessStatus: {},
                SLRDeploymentStatus: {},
                AccountStatusList: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AccountId: {},
                            SLRDeploymentStatus: {}
                        }
                    }
                }
            }
        },
        S9d: {
            type: "structure",
            members: {
                TransitGatewayAttachmentArn: {},
                IpAddress: {}
            }
        }
    },
    paginators: {
        DescribeGlobalNetworks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GlobalNetworks"
        },
        GetConnectPeerAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConnectPeerAssociations"
        },
        GetConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Connections"
        },
        GetCoreNetworkChangeEvents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CoreNetworkChangeEvents"
        },
        GetCoreNetworkChangeSet: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CoreNetworkChanges"
        },
        GetCustomerGatewayAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CustomerGatewayAssociations"
        },
        GetDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Devices"
        },
        GetLinkAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LinkAssociations"
        },
        GetLinks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Links"
        },
        GetNetworkResourceCounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NetworkResourceCounts"
        },
        GetNetworkResourceRelationships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Relationships"
        },
        GetNetworkResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NetworkResources"
        },
        GetNetworkTelemetry: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NetworkTelemetry"
        },
        GetSites: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Sites"
        },
        GetTransitGatewayConnectPeerAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TransitGatewayConnectPeerAssociations"
        },
        GetTransitGatewayRegistrations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TransitGatewayRegistrations"
        },
        ListAttachments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Attachments"
        },
        ListConnectPeers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConnectPeers"
        },
        ListCoreNetworkPolicyVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CoreNetworkPolicyVersions"
        },
        ListCoreNetworks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CoreNetworks"
        },
        ListPeerings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Peerings"
        }
    }
};

AWS.apiLoader.services["outposts"] = {};

AWS.Outposts = AWS.Service.defineService("outposts", [ "2019-12-03" ]);

AWS.apiLoader.services["outposts"]["2019-12-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-03",
        endpointPrefix: "outposts",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Outposts",
        serviceFullName: "AWS Outposts",
        serviceId: "Outposts",
        signatureVersion: "v4",
        signingName: "outposts",
        uid: "outposts-2019-12-03"
    },
    operations: {
        CancelOrder: {
            http: {
                requestUri: "/orders/{OrderId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "OrderId" ],
                members: {
                    OrderId: {
                        location: "uri",
                        locationName: "OrderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateOrder: {
            http: {
                requestUri: "/orders"
            },
            input: {
                type: "structure",
                required: [ "OutpostIdentifier", "LineItems", "PaymentOption" ],
                members: {
                    OutpostIdentifier: {},
                    LineItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CatalogItemId: {},
                                Quantity: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    PaymentOption: {},
                    PaymentTerm: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Order: {
                        shape: "Sd"
                    }
                }
            }
        },
        CreateOutpost: {
            http: {
                requestUri: "/outposts"
            },
            input: {
                type: "structure",
                required: [ "Name", "SiteId" ],
                members: {
                    Name: {},
                    Description: {},
                    SiteId: {},
                    AvailabilityZone: {},
                    AvailabilityZoneId: {},
                    Tags: {
                        shape: "S10"
                    },
                    SupportedHardwareType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Outpost: {
                        shape: "S15"
                    }
                }
            }
        },
        CreateSite: {
            http: {
                requestUri: "/sites"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    Notes: {},
                    Tags: {
                        shape: "S10"
                    },
                    OperatingAddress: {
                        shape: "S1f"
                    },
                    ShippingAddress: {
                        shape: "S1f"
                    },
                    RackPhysicalProperties: {
                        shape: "S1r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S22"
                    }
                }
            }
        },
        DeleteOutpost: {
            http: {
                method: "DELETE",
                requestUri: "/outposts/{OutpostId}"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    OutpostId: {
                        location: "uri",
                        locationName: "OutpostId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSite: {
            http: {
                method: "DELETE",
                requestUri: "/sites/{SiteId}"
            },
            input: {
                type: "structure",
                required: [ "SiteId" ],
                members: {
                    SiteId: {
                        location: "uri",
                        locationName: "SiteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetCatalogItem: {
            http: {
                method: "GET",
                requestUri: "/catalog/item/{CatalogItemId}"
            },
            input: {
                type: "structure",
                required: [ "CatalogItemId" ],
                members: {
                    CatalogItemId: {
                        location: "uri",
                        locationName: "CatalogItemId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CatalogItem: {
                        shape: "S2a"
                    }
                }
            }
        },
        GetConnection: {
            http: {
                method: "GET",
                requestUri: "/connections/{ConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionId: {},
                    ConnectionDetails: {
                        type: "structure",
                        members: {
                            ClientPublicKey: {},
                            ServerPublicKey: {},
                            ServerEndpoint: {},
                            ClientTunnelAddress: {},
                            ServerTunnelAddress: {},
                            AllowedIps: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        GetOrder: {
            http: {
                method: "GET",
                requestUri: "/orders/{OrderId}"
            },
            input: {
                type: "structure",
                required: [ "OrderId" ],
                members: {
                    OrderId: {
                        location: "uri",
                        locationName: "OrderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Order: {
                        shape: "Sd"
                    }
                }
            }
        },
        GetOutpost: {
            http: {
                method: "GET",
                requestUri: "/outposts/{OutpostId}"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    OutpostId: {
                        location: "uri",
                        locationName: "OutpostId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Outpost: {
                        shape: "S15"
                    }
                }
            }
        },
        GetOutpostInstanceTypes: {
            http: {
                method: "GET",
                requestUri: "/outposts/{OutpostId}/instanceTypes"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    OutpostId: {
                        location: "uri",
                        locationName: "OutpostId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceType: {}
                            }
                        }
                    },
                    NextToken: {},
                    OutpostId: {},
                    OutpostArn: {}
                }
            }
        },
        GetSite: {
            http: {
                method: "GET",
                requestUri: "/sites/{SiteId}"
            },
            input: {
                type: "structure",
                required: [ "SiteId" ],
                members: {
                    SiteId: {
                        location: "uri",
                        locationName: "SiteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S22"
                    }
                }
            }
        },
        GetSiteAddress: {
            http: {
                method: "GET",
                requestUri: "/sites/{SiteId}/address"
            },
            input: {
                type: "structure",
                required: [ "SiteId", "AddressType" ],
                members: {
                    SiteId: {
                        location: "uri",
                        locationName: "SiteId"
                    },
                    AddressType: {
                        location: "querystring",
                        locationName: "AddressType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SiteId: {},
                    AddressType: {},
                    Address: {
                        shape: "S1f"
                    }
                }
            }
        },
        ListAssets: {
            http: {
                method: "GET",
                requestUri: "/outposts/{OutpostId}/assets"
            },
            input: {
                type: "structure",
                required: [ "OutpostIdentifier" ],
                members: {
                    OutpostIdentifier: {
                        location: "uri",
                        locationName: "OutpostId"
                    },
                    HostIdFilter: {
                        location: "querystring",
                        locationName: "HostIdFilter",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    StatusFilter: {
                        location: "querystring",
                        locationName: "StatusFilter",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Assets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssetId: {},
                                RackId: {},
                                AssetType: {},
                                ComputeAttributes: {
                                    type: "structure",
                                    members: {
                                        HostId: {},
                                        State: {},
                                        InstanceFamilies: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                AssetLocation: {
                                    type: "structure",
                                    members: {
                                        RackElevation: {
                                            type: "float"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCatalogItems: {
            http: {
                method: "GET",
                requestUri: "/catalog/items"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    ItemClassFilter: {
                        location: "querystring",
                        locationName: "ItemClassFilter",
                        type: "list",
                        member: {}
                    },
                    SupportedStorageFilter: {
                        shape: "S2l",
                        location: "querystring",
                        locationName: "SupportedStorageFilter"
                    },
                    EC2FamilyFilter: {
                        location: "querystring",
                        locationName: "EC2FamilyFilter",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CatalogItems: {
                        type: "list",
                        member: {
                            shape: "S2a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOrders: {
            http: {
                method: "GET",
                requestUri: "/list-orders"
            },
            input: {
                type: "structure",
                members: {
                    OutpostIdentifierFilter: {
                        location: "querystring",
                        locationName: "OutpostIdentifierFilter"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Orders: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OutpostId: {},
                                OrderId: {},
                                OrderType: {},
                                Status: {},
                                LineItemCountsByStatus: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "integer"
                                    }
                                },
                                OrderSubmissionDate: {
                                    type: "timestamp"
                                },
                                OrderFulfilledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOutposts: {
            http: {
                method: "GET",
                requestUri: "/outposts"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    LifeCycleStatusFilter: {
                        location: "querystring",
                        locationName: "LifeCycleStatusFilter",
                        type: "list",
                        member: {}
                    },
                    AvailabilityZoneFilter: {
                        location: "querystring",
                        locationName: "AvailabilityZoneFilter",
                        type: "list",
                        member: {}
                    },
                    AvailabilityZoneIdFilter: {
                        location: "querystring",
                        locationName: "AvailabilityZoneIdFilter",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Outposts: {
                        type: "list",
                        member: {
                            shape: "S15"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSites: {
            http: {
                method: "GET",
                requestUri: "/sites"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    OperatingAddressCountryCodeFilter: {
                        location: "querystring",
                        locationName: "OperatingAddressCountryCodeFilter",
                        type: "list",
                        member: {}
                    },
                    OperatingAddressStateOrRegionFilter: {
                        location: "querystring",
                        locationName: "OperatingAddressStateOrRegionFilter",
                        type: "list",
                        member: {}
                    },
                    OperatingAddressCityFilter: {
                        location: "querystring",
                        locationName: "OperatingAddressCityFilter",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sites: {
                        type: "list",
                        member: {
                            shape: "S22"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S10"
                    }
                }
            }
        },
        StartConnection: {
            http: {
                requestUri: "/connections"
            },
            input: {
                type: "structure",
                required: [ "DeviceSerialNumber", "AssetId", "ClientPublicKey", "NetworkInterfaceDeviceIndex" ],
                members: {
                    DeviceSerialNumber: {},
                    AssetId: {},
                    ClientPublicKey: {},
                    NetworkInterfaceDeviceIndex: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionId: {},
                    UnderlayIpAddress: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOutpost: {
            http: {
                method: "PATCH",
                requestUri: "/outposts/{OutpostId}"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    OutpostId: {
                        location: "uri",
                        locationName: "OutpostId"
                    },
                    Name: {},
                    Description: {},
                    SupportedHardwareType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Outpost: {
                        shape: "S15"
                    }
                }
            }
        },
        UpdateSite: {
            http: {
                method: "PATCH",
                requestUri: "/sites/{SiteId}"
            },
            input: {
                type: "structure",
                required: [ "SiteId" ],
                members: {
                    SiteId: {
                        location: "uri",
                        locationName: "SiteId"
                    },
                    Name: {},
                    Description: {},
                    Notes: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S22"
                    }
                }
            }
        },
        UpdateSiteAddress: {
            http: {
                method: "PUT",
                requestUri: "/sites/{SiteId}/address"
            },
            input: {
                type: "structure",
                required: [ "SiteId", "AddressType", "Address" ],
                members: {
                    SiteId: {
                        location: "uri",
                        locationName: "SiteId"
                    },
                    AddressType: {},
                    Address: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressType: {},
                    Address: {
                        shape: "S1f"
                    }
                }
            }
        },
        UpdateSiteRackPhysicalProperties: {
            http: {
                method: "PATCH",
                requestUri: "/sites/{SiteId}/rackPhysicalProperties"
            },
            input: {
                type: "structure",
                required: [ "SiteId" ],
                members: {
                    SiteId: {
                        location: "uri",
                        locationName: "SiteId"
                    },
                    PowerDrawKva: {},
                    PowerPhase: {},
                    PowerConnector: {},
                    PowerFeedDrop: {},
                    UplinkGbps: {},
                    UplinkCount: {},
                    FiberOpticCableType: {},
                    OpticalStandard: {},
                    MaximumSupportedWeightLbs: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S22"
                    }
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "structure",
            members: {
                OutpostId: {},
                OrderId: {},
                Status: {},
                LineItems: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CatalogItemId: {},
                            LineItemId: {},
                            Quantity: {
                                type: "integer"
                            },
                            Status: {},
                            ShipmentInformation: {
                                type: "structure",
                                members: {
                                    ShipmentTrackingNumber: {},
                                    ShipmentCarrier: {}
                                }
                            },
                            AssetInformationList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AssetId: {},
                                        MacAddressList: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            PreviousLineItemId: {},
                            PreviousOrderId: {}
                        }
                    }
                },
                PaymentOption: {},
                OrderSubmissionDate: {
                    type: "timestamp"
                },
                OrderFulfilledDate: {
                    type: "timestamp"
                },
                PaymentTerm: {},
                OrderType: {}
            }
        },
        S10: {
            type: "map",
            key: {},
            value: {}
        },
        S15: {
            type: "structure",
            members: {
                OutpostId: {},
                OwnerId: {},
                OutpostArn: {},
                SiteId: {},
                Name: {},
                Description: {},
                LifeCycleStatus: {},
                AvailabilityZone: {},
                AvailabilityZoneId: {},
                Tags: {
                    shape: "S10"
                },
                SiteArn: {},
                SupportedHardwareType: {}
            }
        },
        S1f: {
            type: "structure",
            required: [ "AddressLine1", "City", "StateOrRegion", "PostalCode", "CountryCode" ],
            members: {
                ContactName: {},
                ContactPhoneNumber: {},
                AddressLine1: {},
                AddressLine2: {},
                AddressLine3: {},
                City: {},
                StateOrRegion: {},
                DistrictOrCounty: {},
                PostalCode: {},
                CountryCode: {},
                Municipality: {}
            }
        },
        S1r: {
            type: "structure",
            members: {
                PowerDrawKva: {},
                PowerPhase: {},
                PowerConnector: {},
                PowerFeedDrop: {},
                UplinkGbps: {},
                UplinkCount: {},
                FiberOpticCableType: {},
                OpticalStandard: {},
                MaximumSupportedWeightLbs: {}
            }
        },
        S22: {
            type: "structure",
            members: {
                SiteId: {},
                AccountId: {},
                Name: {},
                Description: {},
                Tags: {
                    shape: "S10"
                },
                SiteArn: {},
                Notes: {},
                OperatingAddressCountryCode: {},
                OperatingAddressStateOrRegion: {},
                OperatingAddressCity: {},
                RackPhysicalProperties: {
                    shape: "S1r"
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                CatalogItemId: {},
                ItemStatus: {},
                EC2Capacities: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Family: {},
                            MaxSize: {},
                            Quantity: {}
                        }
                    }
                },
                PowerKva: {
                    type: "float"
                },
                WeightLbs: {
                    type: "integer"
                },
                SupportedUplinkGbps: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                SupportedStorage: {
                    shape: "S2l"
                }
            }
        },
        S2l: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetOutpostInstanceTypes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InstanceTypes"
        },
        ListAssets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Assets"
        },
        ListCatalogItems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CatalogItems"
        },
        ListOrders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Orders"
        },
        ListOutposts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Outposts"
        },
        ListSites: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Sites"
        }
    }
};

AWS.apiLoader.services["augmentedairuntime"] = {};

AWS.AugmentedAIRuntime = AWS.Service.defineService("augmentedairuntime", [ "2019-11-07" ]);

AWS.apiLoader.services["augmentedairuntime"]["2019-11-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-07",
        endpointPrefix: "a2i-runtime.sagemaker",
        protocol: "rest-json",
        serviceFullName: "Amazon Augmented AI Runtime",
        serviceId: "SageMaker A2I Runtime",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "sagemaker-a2i-runtime-2019-11-07"
    },
    operations: {
        DeleteHumanLoop: {
            http: {
                method: "DELETE",
                requestUri: "/human-loops/{HumanLoopName}"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName" ],
                members: {
                    HumanLoopName: {
                        location: "uri",
                        locationName: "HumanLoopName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeHumanLoop: {
            http: {
                method: "GET",
                requestUri: "/human-loops/{HumanLoopName}"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName" ],
                members: {
                    HumanLoopName: {
                        location: "uri",
                        locationName: "HumanLoopName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreationTime", "HumanLoopStatus", "HumanLoopName", "HumanLoopArn", "FlowDefinitionArn" ],
                members: {
                    CreationTime: {
                        shape: "S6"
                    },
                    FailureReason: {},
                    FailureCode: {},
                    HumanLoopStatus: {},
                    HumanLoopName: {},
                    HumanLoopArn: {},
                    FlowDefinitionArn: {},
                    HumanLoopOutput: {
                        type: "structure",
                        required: [ "OutputS3Uri" ],
                        members: {
                            OutputS3Uri: {}
                        }
                    }
                }
            }
        },
        ListHumanLoops: {
            http: {
                method: "GET",
                requestUri: "/human-loops"
            },
            input: {
                type: "structure",
                required: [ "FlowDefinitionArn" ],
                members: {
                    CreationTimeAfter: {
                        shape: "S6",
                        location: "querystring",
                        locationName: "CreationTimeAfter"
                    },
                    CreationTimeBefore: {
                        shape: "S6",
                        location: "querystring",
                        locationName: "CreationTimeBefore"
                    },
                    FlowDefinitionArn: {
                        location: "querystring",
                        locationName: "FlowDefinitionArn"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "SortOrder"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HumanLoopSummaries" ],
                members: {
                    HumanLoopSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                HumanLoopName: {},
                                HumanLoopStatus: {},
                                CreationTime: {
                                    shape: "S6"
                                },
                                FailureReason: {},
                                FlowDefinitionArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartHumanLoop: {
            http: {
                requestUri: "/human-loops"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName", "FlowDefinitionArn", "HumanLoopInput" ],
                members: {
                    HumanLoopName: {},
                    FlowDefinitionArn: {},
                    HumanLoopInput: {
                        type: "structure",
                        required: [ "InputContent" ],
                        members: {
                            InputContent: {}
                        }
                    },
                    DataAttributes: {
                        type: "structure",
                        required: [ "ContentClassifiers" ],
                        members: {
                            ContentClassifiers: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HumanLoopArn: {}
                }
            }
        },
        StopHumanLoop: {
            http: {
                requestUri: "/human-loops/stop"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName" ],
                members: {
                    HumanLoopName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListHumanLoops: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HumanLoopSummaries"
        }
    }
};

AWS.apiLoader.services["ebs"] = {};

AWS.EBS = AWS.Service.defineService("ebs", [ "2019-11-02" ]);

AWS.apiLoader.services["ebs"]["2019-11-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-02",
        endpointPrefix: "ebs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon EBS",
        serviceFullName: "Amazon Elastic Block Store",
        serviceId: "EBS",
        signatureVersion: "v4",
        uid: "ebs-2019-11-02"
    },
    operations: {
        CompleteSnapshot: {
            http: {
                requestUri: "/snapshots/completion/{snapshotId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "SnapshotId", "ChangedBlocksCount" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    ChangedBlocksCount: {
                        location: "header",
                        locationName: "x-amz-ChangedBlocksCount",
                        type: "integer"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    },
                    ChecksumAggregationMethod: {
                        location: "header",
                        locationName: "x-amz-Checksum-Aggregation-Method"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        GetSnapshotBlock: {
            http: {
                method: "GET",
                requestUri: "/snapshots/{snapshotId}/blocks/{blockIndex}"
            },
            input: {
                type: "structure",
                required: [ "SnapshotId", "BlockIndex", "BlockToken" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    BlockIndex: {
                        location: "uri",
                        locationName: "blockIndex",
                        type: "integer"
                    },
                    BlockToken: {
                        location: "querystring",
                        locationName: "blockToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataLength: {
                        location: "header",
                        locationName: "x-amz-Data-Length",
                        type: "integer"
                    },
                    BlockData: {
                        shape: "Se"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    }
                },
                payload: "BlockData"
            }
        },
        ListChangedBlocks: {
            http: {
                method: "GET",
                requestUri: "/snapshots/{secondSnapshotId}/changedblocks"
            },
            input: {
                type: "structure",
                required: [ "SecondSnapshotId" ],
                members: {
                    FirstSnapshotId: {
                        location: "querystring",
                        locationName: "firstSnapshotId"
                    },
                    SecondSnapshotId: {
                        location: "uri",
                        locationName: "secondSnapshotId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "pageToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    StartingBlockIndex: {
                        location: "querystring",
                        locationName: "startingBlockIndex",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangedBlocks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BlockIndex: {
                                    type: "integer"
                                },
                                FirstBlockToken: {},
                                SecondBlockToken: {}
                            },
                            sensitive: true
                        }
                    },
                    ExpiryTime: {
                        type: "timestamp"
                    },
                    VolumeSize: {
                        type: "long"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            }
        },
        ListSnapshotBlocks: {
            http: {
                method: "GET",
                requestUri: "/snapshots/{snapshotId}/blocks"
            },
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "pageToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    StartingBlockIndex: {
                        location: "querystring",
                        locationName: "startingBlockIndex",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blocks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BlockIndex: {
                                    type: "integer"
                                },
                                BlockToken: {}
                            }
                        },
                        sensitive: true
                    },
                    ExpiryTime: {
                        type: "timestamp"
                    },
                    VolumeSize: {
                        type: "long"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            }
        },
        PutSnapshotBlock: {
            http: {
                method: "PUT",
                requestUri: "/snapshots/{snapshotId}/blocks/{blockIndex}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "SnapshotId", "BlockIndex", "BlockData", "DataLength", "Checksum", "ChecksumAlgorithm" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    BlockIndex: {
                        location: "uri",
                        locationName: "blockIndex",
                        type: "integer"
                    },
                    BlockData: {
                        shape: "Se"
                    },
                    DataLength: {
                        location: "header",
                        locationName: "x-amz-Data-Length",
                        type: "integer"
                    },
                    Progress: {
                        location: "header",
                        locationName: "x-amz-Progress",
                        type: "integer"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    }
                },
                payload: "BlockData"
            },
            output: {
                type: "structure",
                members: {
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    }
                }
            },
            authtype: "v4-unsigned-body"
        },
        StartSnapshot: {
            http: {
                requestUri: "/snapshots",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "VolumeSize" ],
                members: {
                    VolumeSize: {
                        type: "long"
                    },
                    ParentSnapshotId: {},
                    Tags: {
                        shape: "Sw"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Encrypted: {
                        type: "boolean"
                    },
                    KmsKeyArn: {
                        shape: "S13"
                    },
                    Timeout: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    SnapshotId: {},
                    OwnerId: {},
                    Status: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    VolumeSize: {
                        type: "long"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sw"
                    },
                    ParentSnapshotId: {},
                    KmsKeyArn: {
                        shape: "S13"
                    },
                    SseType: {}
                }
            }
        }
    },
    shapes: {
        Se: {
            type: "blob",
            sensitive: true,
            streaming: true
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S13: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListChangedBlocks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSnapshotBlocks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["kinesisvideosignalingchannels"] = {};

AWS.KinesisVideoSignalingChannels = AWS.Service.defineService("kinesisvideosignalingchannels", [ "2019-12-04" ]);

AWS.apiLoader.services["kinesisvideosignalingchannels"]["2019-12-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-04",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Kinesis Video Signaling Channels",
        serviceFullName: "Amazon Kinesis Video Signaling Channels",
        serviceId: "Kinesis Video Signaling",
        signatureVersion: "v4",
        uid: "kinesis-video-signaling-2019-12-04"
    },
    operations: {
        GetIceServerConfig: {
            http: {
                requestUri: "/v1/get-ice-server-config"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN" ],
                members: {
                    ChannelARN: {},
                    ClientId: {},
                    Service: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IceServerList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Uris: {
                                    type: "list",
                                    member: {}
                                },
                                Username: {},
                                Password: {},
                                Ttl: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        SendAlexaOfferToMaster: {
            http: {
                requestUri: "/v1/send-alexa-offer-to-master"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN", "SenderClientId", "MessagePayload" ],
                members: {
                    ChannelARN: {},
                    SenderClientId: {},
                    MessagePayload: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Answer: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["detective"] = {};

AWS.Detective = AWS.Service.defineService("detective", [ "2018-10-26" ]);

AWS.apiLoader.services["detective"]["2018-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-26",
        endpointPrefix: "api.detective",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Detective",
        serviceId: "Detective",
        signatureVersion: "v4",
        signingName: "detective",
        uid: "detective-2018-10-26"
    },
    operations: {
        AcceptInvitation: {
            http: {
                method: "PUT",
                requestUri: "/invitation"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        BatchGetGraphMemberDatasources: {
            http: {
                requestUri: "/graph/datasources/get"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "AccountIds" ],
                members: {
                    GraphArn: {},
                    AccountIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberDatasources: {
                        shape: "S7"
                    },
                    UnprocessedAccounts: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchGetMembershipDatasources: {
            http: {
                requestUri: "/membership/datasources/get"
            },
            input: {
                type: "structure",
                required: [ "GraphArns" ],
                members: {
                    GraphArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MembershipDatasources: {
                        shape: "S7"
                    },
                    UnprocessedGraphs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GraphArn: {},
                                Reason: {}
                            }
                        }
                    }
                }
            }
        },
        CreateGraph: {
            http: {
                requestUri: "/graph"
            },
            input: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GraphArn: {}
                }
            }
        },
        CreateMembers: {
            http: {
                requestUri: "/graph/members"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "Accounts" ],
                members: {
                    GraphArn: {},
                    Message: {
                        type: "string",
                        sensitive: true
                    },
                    DisableEmailNotification: {
                        type: "boolean"
                    },
                    Accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "EmailAddress" ],
                            members: {
                                AccountId: {},
                                EmailAddress: {
                                    shape: "Sx"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "Sz"
                    },
                    UnprocessedAccounts: {
                        shape: "Sf"
                    }
                }
            }
        },
        DeleteGraph: {
            http: {
                requestUri: "/graph/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        DeleteMembers: {
            http: {
                requestUri: "/graph/members/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "AccountIds" ],
                members: {
                    GraphArn: {},
                    AccountIds: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountIds: {
                        shape: "S1b"
                    },
                    UnprocessedAccounts: {
                        shape: "Sf"
                    }
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                requestUri: "/orgs/describeOrganizationConfiguration"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoEnable: {
                        type: "boolean"
                    }
                }
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                requestUri: "/orgs/disableAdminAccount"
            }
        },
        DisassociateMembership: {
            http: {
                requestUri: "/membership/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/orgs/enableAdminAccount"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {}
                }
            }
        },
        GetInvestigation: {
            http: {
                requestUri: "/investigations/getInvestigation"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "InvestigationId" ],
                members: {
                    GraphArn: {},
                    InvestigationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GraphArn: {},
                    InvestigationId: {},
                    EntityArn: {},
                    EntityType: {},
                    CreatedTime: {
                        shape: "Se"
                    },
                    ScopeStartTime: {
                        shape: "Se"
                    },
                    ScopeEndTime: {
                        shape: "Se"
                    },
                    Status: {},
                    Severity: {},
                    State: {}
                }
            }
        },
        GetMembers: {
            http: {
                requestUri: "/graph/members/get"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "AccountIds" ],
                members: {
                    GraphArn: {},
                    AccountIds: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberDetails: {
                        shape: "Sz"
                    },
                    UnprocessedAccounts: {
                        shape: "Sf"
                    }
                }
            }
        },
        ListDatasourcePackages: {
            http: {
                requestUri: "/graph/datasources/list"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasourcePackages: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                DatasourcePackageIngestState: {},
                                LastIngestStateChange: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGraphs: {
            http: {
                requestUri: "/graphs/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GraphList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIndicators: {
            http: {
                requestUri: "/investigations/listIndicators"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "InvestigationId" ],
                members: {
                    GraphArn: {},
                    InvestigationId: {},
                    IndicatorType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GraphArn: {},
                    InvestigationId: {},
                    NextToken: {},
                    Indicators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IndicatorType: {},
                                IndicatorDetail: {
                                    type: "structure",
                                    members: {
                                        TTPsObservedDetail: {
                                            type: "structure",
                                            members: {
                                                Tactic: {},
                                                Technique: {},
                                                Procedure: {},
                                                IpAddress: {},
                                                APIName: {},
                                                APISuccessCount: {
                                                    type: "long"
                                                },
                                                APIFailureCount: {
                                                    type: "long"
                                                }
                                            }
                                        },
                                        ImpossibleTravelDetail: {
                                            type: "structure",
                                            members: {
                                                StartingIpAddress: {},
                                                EndingIpAddress: {},
                                                StartingLocation: {},
                                                EndingLocation: {},
                                                HourlyTimeDelta: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        FlaggedIpAddressDetail: {
                                            type: "structure",
                                            members: {
                                                IpAddress: {},
                                                Reason: {}
                                            }
                                        },
                                        NewGeolocationDetail: {
                                            type: "structure",
                                            members: {
                                                Location: {},
                                                IpAddress: {},
                                                IsNewForEntireAccount: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        NewAsoDetail: {
                                            type: "structure",
                                            members: {
                                                Aso: {},
                                                IsNewForEntireAccount: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        NewUserAgentDetail: {
                                            type: "structure",
                                            members: {
                                                UserAgent: {},
                                                IsNewForEntireAccount: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        RelatedFindingDetail: {
                                            type: "structure",
                                            members: {
                                                Arn: {},
                                                Type: {},
                                                IpAddress: {}
                                            }
                                        },
                                        RelatedFindingGroupDetail: {
                                            type: "structure",
                                            members: {
                                                Id: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListInvestigations: {
            http: {
                requestUri: "/investigations/listInvestigations"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    FilterCriteria: {
                        type: "structure",
                        members: {
                            Severity: {
                                shape: "S2y"
                            },
                            Status: {
                                shape: "S2y"
                            },
                            State: {
                                shape: "S2y"
                            },
                            EntityArn: {
                                shape: "S2y"
                            },
                            CreatedTime: {
                                type: "structure",
                                required: [ "StartInclusive", "EndInclusive" ],
                                members: {
                                    StartInclusive: {
                                        shape: "Se"
                                    },
                                    EndInclusive: {
                                        shape: "Se"
                                    }
                                }
                            }
                        }
                    },
                    SortCriteria: {
                        type: "structure",
                        members: {
                            Field: {},
                            SortOrder: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InvestigationDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InvestigationId: {},
                                Severity: {},
                                Status: {},
                                State: {},
                                CreatedTime: {
                                    shape: "Se"
                                },
                                EntityArn: {},
                                EntityType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInvitations: {
            http: {
                requestUri: "/invitations/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        shape: "Sz"
                    },
                    NextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                requestUri: "/graph/members/list"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberDetails: {
                        shape: "Sz"
                    },
                    NextToken: {}
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                requestUri: "/orgs/adminAccountslist"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Administrators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                GraphArn: {},
                                DelegationTime: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "So"
                    }
                }
            }
        },
        RejectInvitation: {
            http: {
                requestUri: "/invitation/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        StartInvestigation: {
            http: {
                requestUri: "/investigations/startInvestigation"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "EntityArn", "ScopeStartTime", "ScopeEndTime" ],
                members: {
                    GraphArn: {},
                    EntityArn: {},
                    ScopeStartTime: {
                        shape: "Se"
                    },
                    ScopeEndTime: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InvestigationId: {}
                }
            }
        },
        StartMonitoringMember: {
            http: {
                requestUri: "/graph/member/monitoringstate"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "AccountId" ],
                members: {
                    GraphArn: {},
                    AccountId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDatasourcePackages: {
            http: {
                requestUri: "/graph/datasources/update"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "DatasourcePackages" ],
                members: {
                    GraphArn: {},
                    DatasourcePackages: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateInvestigationState: {
            http: {
                requestUri: "/investigations/updateInvestigationState"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "InvestigationId", "State" ],
                members: {
                    GraphArn: {},
                    InvestigationId: {},
                    State: {}
                }
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                requestUri: "/orgs/updateOrganizationConfiguration"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {},
                    AutoEnable: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    GraphArn: {},
                    DatasourcePackageIngestHistory: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "Sb"
                        }
                    }
                }
            }
        },
        Sb: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Timestamp: {
                        shape: "Se"
                    }
                }
            }
        },
        Se: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    Reason: {}
                }
            }
        },
        So: {
            type: "map",
            key: {},
            value: {}
        },
        Sx: {
            type: "string",
            sensitive: true
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    EmailAddress: {
                        shape: "Sx"
                    },
                    GraphArn: {},
                    MasterId: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use AdministratorId instead."
                    },
                    AdministratorId: {},
                    Status: {},
                    DisabledReason: {},
                    InvitedTime: {
                        shape: "Se"
                    },
                    UpdatedTime: {
                        shape: "Se"
                    },
                    VolumeUsageInBytes: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.",
                        type: "long"
                    },
                    VolumeUsageUpdatedTime: {
                        shape: "Se",
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use VolumeUsageByDatasourcePackage instead."
                    },
                    PercentOfGraphUtilization: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.",
                        type: "double"
                    },
                    PercentOfGraphUtilizationUpdatedTime: {
                        shape: "Se",
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use VolumeUsageByDatasourcePackage instead."
                    },
                    InvitationType: {},
                    VolumeUsageByDatasourcePackage: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                VolumeUsageInBytes: {
                                    type: "long"
                                },
                                VolumeUsageUpdateTime: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    DatasourcePackageIngestStates: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S1b: {
            type: "list",
            member: {}
        },
        S2y: {
            type: "structure",
            required: [ "Value" ],
            members: {
                Value: {}
            }
        }
    },
    paginators: {
        ListDatasourcePackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGraphs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListOrganizationAdminAccounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["codestarconnections"] = {};

AWS.CodeStarconnections = AWS.Service.defineService("codestarconnections", [ "2019-12-01" ]);

AWS.apiLoader.services["codestarconnections"]["2019-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-01",
        endpointPrefix: "codestar-connections",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS CodeStar connections",
        serviceId: "CodeStar connections",
        signatureVersion: "v4",
        signingName: "codestar-connections",
        targetPrefix: "com.amazonaws.codestar.connections.CodeStar_connections_20191201",
        uid: "codestar-connections-2019-12-01"
    },
    operations: {
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionName" ],
                members: {
                    ProviderType: {},
                    ConnectionName: {},
                    Tags: {
                        shape: "S4"
                    },
                    HostArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateHost: {
            input: {
                type: "structure",
                required: [ "Name", "ProviderType", "ProviderEndpoint" ],
                members: {
                    Name: {},
                    ProviderType: {},
                    ProviderEndpoint: {},
                    VpcConfiguration: {
                        shape: "Se"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HostArn: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateRepositoryLink: {
            input: {
                type: "structure",
                required: [ "ConnectionArn", "OwnerId", "RepositoryName" ],
                members: {
                    ConnectionArn: {},
                    OwnerId: {},
                    RepositoryName: {},
                    EncryptionKeyArn: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RepositoryLinkInfo" ],
                members: {
                    RepositoryLinkInfo: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateSyncConfiguration: {
            input: {
                type: "structure",
                required: [ "Branch", "ConfigFile", "RepositoryLinkId", "ResourceName", "RoleArn", "SyncType" ],
                members: {
                    Branch: {},
                    ConfigFile: {},
                    RepositoryLinkId: {},
                    ResourceName: {},
                    RoleArn: {},
                    SyncType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SyncConfiguration" ],
                members: {
                    SyncConfiguration: {
                        shape: "S11"
                    }
                }
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteHost: {
            input: {
                type: "structure",
                required: [ "HostArn" ],
                members: {
                    HostArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRepositoryLink: {
            input: {
                type: "structure",
                required: [ "RepositoryLinkId" ],
                members: {
                    RepositoryLinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSyncConfiguration: {
            input: {
                type: "structure",
                required: [ "SyncType", "ResourceName" ],
                members: {
                    SyncType: {},
                    ResourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S1c"
                    }
                }
            }
        },
        GetHost: {
            input: {
                type: "structure",
                required: [ "HostArn" ],
                members: {
                    HostArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {},
                    ProviderType: {},
                    ProviderEndpoint: {},
                    VpcConfiguration: {
                        shape: "Se"
                    }
                }
            }
        },
        GetRepositoryLink: {
            input: {
                type: "structure",
                required: [ "RepositoryLinkId" ],
                members: {
                    RepositoryLinkId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RepositoryLinkInfo" ],
                members: {
                    RepositoryLinkInfo: {
                        shape: "Sr"
                    }
                }
            }
        },
        GetRepositorySyncStatus: {
            input: {
                type: "structure",
                required: [ "Branch", "RepositoryLinkId", "SyncType" ],
                members: {
                    Branch: {},
                    RepositoryLinkId: {},
                    SyncType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LatestSync" ],
                members: {
                    LatestSync: {
                        type: "structure",
                        required: [ "StartedAt", "Status", "Events" ],
                        members: {
                            StartedAt: {
                                type: "timestamp"
                            },
                            Status: {},
                            Events: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Event", "Time", "Type" ],
                                    members: {
                                        Event: {},
                                        ExternalId: {},
                                        Time: {
                                            type: "timestamp"
                                        },
                                        Type: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetResourceSyncStatus: {
            input: {
                type: "structure",
                required: [ "ResourceName", "SyncType" ],
                members: {
                    ResourceName: {},
                    SyncType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LatestSync" ],
                members: {
                    DesiredState: {
                        shape: "S1w"
                    },
                    LatestSuccessfulSync: {
                        shape: "S1z"
                    },
                    LatestSync: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetSyncBlockerSummary: {
            input: {
                type: "structure",
                required: [ "SyncType", "ResourceName" ],
                members: {
                    SyncType: {},
                    ResourceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SyncBlockerSummary" ],
                members: {
                    SyncBlockerSummary: {
                        type: "structure",
                        required: [ "ResourceName" ],
                        members: {
                            ResourceName: {},
                            ParentResourceName: {},
                            LatestBlockers: {
                                type: "list",
                                member: {
                                    shape: "S28"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSyncConfiguration: {
            input: {
                type: "structure",
                required: [ "SyncType", "ResourceName" ],
                members: {
                    SyncType: {},
                    ResourceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SyncConfiguration" ],
                members: {
                    SyncConfiguration: {
                        shape: "S11"
                    }
                }
            }
        },
        ListConnections: {
            input: {
                type: "structure",
                members: {
                    ProviderTypeFilter: {},
                    HostArnFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "S1c"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHosts: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Hosts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                HostArn: {},
                                ProviderType: {},
                                ProviderEndpoint: {},
                                VpcConfiguration: {
                                    shape: "Se"
                                },
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRepositoryLinks: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RepositoryLinks" ],
                members: {
                    RepositoryLinks: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRepositorySyncDefinitions: {
            input: {
                type: "structure",
                required: [ "RepositoryLinkId", "SyncType" ],
                members: {
                    RepositoryLinkId: {},
                    SyncType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RepositorySyncDefinitions" ],
                members: {
                    RepositorySyncDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Branch", "Directory", "Parent", "Target" ],
                            members: {
                                Branch: {},
                                Directory: {},
                                Parent: {},
                                Target: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSyncConfigurations: {
            input: {
                type: "structure",
                required: [ "RepositoryLinkId", "SyncType" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    RepositoryLinkId: {},
                    SyncType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SyncConfigurations" ],
                members: {
                    SyncConfigurations: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateHost: {
            input: {
                type: "structure",
                required: [ "HostArn" ],
                members: {
                    HostArn: {},
                    ProviderEndpoint: {},
                    VpcConfiguration: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRepositoryLink: {
            input: {
                type: "structure",
                required: [ "RepositoryLinkId" ],
                members: {
                    ConnectionArn: {},
                    EncryptionKeyArn: {},
                    RepositoryLinkId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RepositoryLinkInfo" ],
                members: {
                    RepositoryLinkInfo: {
                        shape: "Sr"
                    }
                }
            }
        },
        UpdateSyncBlocker: {
            input: {
                type: "structure",
                required: [ "Id", "SyncType", "ResourceName", "ResolvedReason" ],
                members: {
                    Id: {},
                    SyncType: {},
                    ResourceName: {},
                    ResolvedReason: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceName", "SyncBlocker" ],
                members: {
                    ResourceName: {},
                    ParentResourceName: {},
                    SyncBlocker: {
                        shape: "S28"
                    }
                }
            }
        },
        UpdateSyncConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceName", "SyncType" ],
                members: {
                    Branch: {},
                    ConfigFile: {},
                    RepositoryLinkId: {},
                    ResourceName: {},
                    RoleArn: {},
                    SyncType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SyncConfiguration" ],
                members: {
                    SyncConfiguration: {
                        shape: "S11"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "VpcId", "SubnetIds", "SecurityGroupIds" ],
            members: {
                VpcId: {},
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                },
                TlsCertificate: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "ConnectionArn", "OwnerId", "ProviderType", "RepositoryLinkArn", "RepositoryLinkId", "RepositoryName" ],
            members: {
                ConnectionArn: {},
                EncryptionKeyArn: {},
                OwnerId: {},
                ProviderType: {},
                RepositoryLinkArn: {},
                RepositoryLinkId: {},
                RepositoryName: {}
            }
        },
        S11: {
            type: "structure",
            required: [ "Branch", "OwnerId", "ProviderType", "RepositoryLinkId", "RepositoryName", "ResourceName", "RoleArn", "SyncType" ],
            members: {
                Branch: {},
                ConfigFile: {},
                OwnerId: {},
                ProviderType: {},
                RepositoryLinkId: {},
                RepositoryName: {},
                ResourceName: {},
                RoleArn: {},
                SyncType: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                ConnectionName: {},
                ConnectionArn: {},
                ProviderType: {},
                OwnerAccountId: {},
                ConnectionStatus: {},
                HostArn: {}
            }
        },
        S1w: {
            type: "structure",
            required: [ "Branch", "Directory", "OwnerId", "RepositoryName", "ProviderType", "Sha" ],
            members: {
                Branch: {},
                Directory: {},
                OwnerId: {},
                RepositoryName: {},
                ProviderType: {},
                Sha: {}
            }
        },
        S1z: {
            type: "structure",
            required: [ "Events", "InitialRevision", "StartedAt", "Status", "TargetRevision", "Target" ],
            members: {
                Events: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Event", "Time", "Type" ],
                        members: {
                            Event: {},
                            ExternalId: {},
                            Time: {
                                type: "timestamp"
                            },
                            Type: {}
                        }
                    }
                },
                InitialRevision: {
                    shape: "S1w"
                },
                StartedAt: {
                    type: "timestamp"
                },
                Status: {},
                TargetRevision: {
                    shape: "S1w"
                },
                Target: {}
            }
        },
        S28: {
            type: "structure",
            required: [ "Id", "Type", "Status", "CreatedReason", "CreatedAt" ],
            members: {
                Id: {},
                Type: {},
                Status: {},
                CreatedReason: {},
                CreatedAt: {
                    type: "timestamp"
                },
                Contexts: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Key", "Value" ],
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                },
                ResolvedReason: {},
                ResolvedAt: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        ListConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListHosts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRepositoryLinks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSyncConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["synthetics"] = {};

AWS.Synthetics = AWS.Service.defineService("synthetics", [ "2017-10-11" ]);

AWS.apiLoader.services["synthetics"]["2017-10-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-11",
        endpointPrefix: "synthetics",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Synthetics",
        serviceFullName: "Synthetics",
        serviceId: "synthetics",
        signatureVersion: "v4",
        signingName: "synthetics",
        uid: "synthetics-2017-10-11"
    },
    operations: {
        AssociateResource: {
            http: {
                method: "PATCH",
                requestUri: "/group/{groupIdentifier}/associate"
            },
            input: {
                type: "structure",
                required: [ "GroupIdentifier", "ResourceArn" ],
                members: {
                    GroupIdentifier: {
                        location: "uri",
                        locationName: "groupIdentifier"
                    },
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateCanary: {
            http: {
                requestUri: "/canary"
            },
            input: {
                type: "structure",
                required: [ "Name", "Code", "ArtifactS3Location", "ExecutionRoleArn", "Schedule", "RuntimeVersion" ],
                members: {
                    Name: {},
                    Code: {
                        shape: "S7"
                    },
                    ArtifactS3Location: {},
                    ExecutionRoleArn: {},
                    Schedule: {
                        shape: "Sc"
                    },
                    RunConfig: {
                        shape: "Se"
                    },
                    SuccessRetentionPeriodInDays: {
                        type: "integer"
                    },
                    FailureRetentionPeriodInDays: {
                        type: "integer"
                    },
                    RuntimeVersion: {},
                    VpcConfig: {
                        shape: "Sm"
                    },
                    Tags: {
                        shape: "Sr"
                    },
                    ArtifactConfig: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Canary: {
                        shape: "Sz"
                    }
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/group"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S1l"
                    }
                }
            }
        },
        DeleteCanary: {
            http: {
                method: "DELETE",
                requestUri: "/canary/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    DeleteLambda: {
                        location: "querystring",
                        locationName: "deleteLambda",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteGroup: {
            http: {
                method: "DELETE",
                requestUri: "/group/{groupIdentifier}"
            },
            input: {
                type: "structure",
                required: [ "GroupIdentifier" ],
                members: {
                    GroupIdentifier: {
                        location: "uri",
                        locationName: "groupIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeCanaries: {
            http: {
                requestUri: "/canaries"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Names: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Canaries: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeCanariesLastRun: {
            http: {
                requestUri: "/canaries/last-run"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Names: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CanariesLastRun: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CanaryName: {},
                                LastRun: {
                                    shape: "S24"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRuntimeVersions: {
            http: {
                requestUri: "/runtime-versions"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuntimeVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionName: {},
                                Description: {},
                                ReleaseDate: {
                                    type: "timestamp"
                                },
                                DeprecationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateResource: {
            http: {
                method: "PATCH",
                requestUri: "/group/{groupIdentifier}/disassociate"
            },
            input: {
                type: "structure",
                required: [ "GroupIdentifier", "ResourceArn" ],
                members: {
                    GroupIdentifier: {
                        location: "uri",
                        locationName: "groupIdentifier"
                    },
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetCanary: {
            http: {
                method: "GET",
                requestUri: "/canary/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Canary: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetCanaryRuns: {
            http: {
                requestUri: "/canary/{name}/runs"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CanaryRuns: {
                        type: "list",
                        member: {
                            shape: "S24"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetGroup: {
            http: {
                method: "GET",
                requestUri: "/group/{groupIdentifier}"
            },
            input: {
                type: "structure",
                required: [ "GroupIdentifier" ],
                members: {
                    GroupIdentifier: {
                        location: "uri",
                        locationName: "groupIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S1l"
                    }
                }
            }
        },
        ListAssociatedGroups: {
            http: {
                requestUri: "/resource/{resourceArn}/groups"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        shape: "S2q"
                    },
                    NextToken: {}
                }
            }
        },
        ListGroupResources: {
            http: {
                requestUri: "/group/{groupIdentifier}/resources"
            },
            input: {
                type: "structure",
                required: [ "GroupIdentifier" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    GroupIdentifier: {
                        location: "uri",
                        locationName: "groupIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Resources: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListGroups: {
            http: {
                requestUri: "/groups"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        shape: "S2q"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sr"
                    }
                }
            }
        },
        StartCanary: {
            http: {
                requestUri: "/canary/{name}/start"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopCanary: {
            http: {
                requestUri: "/canary/{name}/stop"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCanary: {
            http: {
                method: "PATCH",
                requestUri: "/canary/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Code: {
                        shape: "S7"
                    },
                    ExecutionRoleArn: {},
                    RuntimeVersion: {},
                    Schedule: {
                        shape: "Sc"
                    },
                    RunConfig: {
                        shape: "Se"
                    },
                    SuccessRetentionPeriodInDays: {
                        type: "integer"
                    },
                    FailureRetentionPeriodInDays: {
                        type: "integer"
                    },
                    VpcConfig: {
                        shape: "Sm"
                    },
                    VisualReference: {
                        type: "structure",
                        required: [ "BaseCanaryRunId" ],
                        members: {
                            BaseScreenshots: {
                                shape: "S1d"
                            },
                            BaseCanaryRunId: {}
                        }
                    },
                    ArtifactS3Location: {},
                    ArtifactConfig: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "Handler" ],
            members: {
                S3Bucket: {},
                S3Key: {},
                S3Version: {},
                ZipFile: {
                    type: "blob"
                },
                Handler: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "Expression" ],
            members: {
                Expression: {},
                DurationInSeconds: {
                    type: "long"
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                TimeoutInSeconds: {
                    type: "integer"
                },
                MemoryInMB: {
                    type: "integer"
                },
                ActiveTracing: {
                    type: "boolean"
                },
                EnvironmentVariables: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                SubnetIds: {
                    shape: "Sn"
                },
                SecurityGroupIds: {
                    shape: "Sp"
                }
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "map",
            key: {},
            value: {}
        },
        Su: {
            type: "structure",
            members: {
                S3Encryption: {
                    shape: "Sv"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                EncryptionMode: {},
                KmsKeyArn: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Code: {
                    type: "structure",
                    members: {
                        SourceLocationArn: {},
                        Handler: {}
                    }
                },
                ExecutionRoleArn: {},
                Schedule: {
                    type: "structure",
                    members: {
                        Expression: {},
                        DurationInSeconds: {
                            type: "long"
                        }
                    }
                },
                RunConfig: {
                    type: "structure",
                    members: {
                        TimeoutInSeconds: {
                            type: "integer"
                        },
                        MemoryInMB: {
                            type: "integer"
                        },
                        ActiveTracing: {
                            type: "boolean"
                        }
                    }
                },
                SuccessRetentionPeriodInDays: {
                    type: "integer"
                },
                FailureRetentionPeriodInDays: {
                    type: "integer"
                },
                Status: {
                    type: "structure",
                    members: {
                        State: {},
                        StateReason: {},
                        StateReasonCode: {}
                    }
                },
                Timeline: {
                    type: "structure",
                    members: {
                        Created: {
                            type: "timestamp"
                        },
                        LastModified: {
                            type: "timestamp"
                        },
                        LastStarted: {
                            type: "timestamp"
                        },
                        LastStopped: {
                            type: "timestamp"
                        }
                    }
                },
                ArtifactS3Location: {},
                EngineArn: {},
                RuntimeVersion: {},
                VpcConfig: {
                    type: "structure",
                    members: {
                        VpcId: {},
                        SubnetIds: {
                            shape: "Sn"
                        },
                        SecurityGroupIds: {
                            shape: "Sp"
                        }
                    }
                },
                VisualReference: {
                    type: "structure",
                    members: {
                        BaseScreenshots: {
                            shape: "S1d"
                        },
                        BaseCanaryRunId: {}
                    }
                },
                Tags: {
                    shape: "Sr"
                },
                ArtifactConfig: {
                    type: "structure",
                    members: {
                        S3Encryption: {
                            shape: "Sv"
                        }
                    }
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ScreenshotName" ],
                members: {
                    ScreenshotName: {},
                    IgnoreCoordinates: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Arn: {},
                Tags: {
                    shape: "Sr"
                },
                CreatedTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Status: {
                    type: "structure",
                    members: {
                        State: {},
                        StateReason: {},
                        StateReasonCode: {}
                    }
                },
                Timeline: {
                    type: "structure",
                    members: {
                        Started: {
                            type: "timestamp"
                        },
                        Completed: {
                            type: "timestamp"
                        }
                    }
                },
                ArtifactS3Location: {}
            }
        },
        S2q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Arn: {}
                }
            }
        }
    },
    paginators: {
        DescribeCanaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribeCanariesLastRun: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribeRuntimeVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetCanaryRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListAssociatedGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListGroupResources: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["iotsitewise"] = {};

AWS.IoTSiteWise = AWS.Service.defineService("iotsitewise", [ "2019-12-02" ]);

AWS.apiLoader.services["iotsitewise"]["2019-12-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "iotsitewise",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS IoT SiteWise",
        serviceId: "IoTSiteWise",
        signatureVersion: "v4",
        signingName: "iotsitewise",
        uid: "iotsitewise-2019-12-02"
    },
    operations: {
        AssociateAssets: {
            http: {
                requestUri: "/assets/{assetId}/associate"
            },
            input: {
                type: "structure",
                required: [ "assetId", "hierarchyId", "childAssetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    hierarchyId: {},
                    childAssetId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        AssociateTimeSeriesToAssetProperty: {
            http: {
                requestUri: "/timeseries/associate/"
            },
            input: {
                type: "structure",
                required: [ "alias", "assetId", "propertyId" ],
                members: {
                    alias: {
                        location: "querystring",
                        locationName: "alias"
                    },
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        BatchAssociateProjectAssets: {
            http: {
                requestUri: "/projects/{projectId}/assets/associate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId", "assetIds" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    assetIds: {
                        shape: "S8"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            shape: "Sb"
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        BatchDisassociateProjectAssets: {
            http: {
                requestUri: "/projects/{projectId}/assets/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId", "assetIds" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    assetIds: {
                        shape: "S8"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            shape: "Sb"
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        BatchGetAssetPropertyAggregates: {
            http: {
                requestUri: "/properties/batch/aggregates"
            },
            input: {
                type: "structure",
                required: [ "entries" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "aggregateTypes", "resolution", "startDate", "endDate" ],
                            members: {
                                entryId: {},
                                assetId: {},
                                propertyId: {},
                                propertyAlias: {},
                                aggregateTypes: {
                                    shape: "Sm"
                                },
                                resolution: {},
                                startDate: {
                                    type: "timestamp"
                                },
                                endDate: {
                                    type: "timestamp"
                                },
                                qualities: {
                                    shape: "Sq"
                                },
                                timeOrdering: {}
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errorEntries", "successEntries", "skippedEntries" ],
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "errorMessage", "entryId" ],
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                entryId: {}
                            }
                        }
                    },
                    successEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "aggregatedValues" ],
                            members: {
                                entryId: {},
                                aggregatedValues: {
                                    shape: "S12"
                                }
                            }
                        }
                    },
                    skippedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "completionStatus" ],
                            members: {
                                entryId: {},
                                completionStatus: {},
                                errorInfo: {
                                    type: "structure",
                                    required: [ "errorCode", "errorTimestamp" ],
                                    members: {
                                        errorCode: {},
                                        errorTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        BatchGetAssetPropertyValue: {
            http: {
                requestUri: "/properties/batch/latest"
            },
            input: {
                type: "structure",
                required: [ "entries" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId" ],
                            members: {
                                entryId: {},
                                assetId: {},
                                propertyId: {},
                                propertyAlias: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "errorEntries", "successEntries", "skippedEntries" ],
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "errorMessage", "entryId" ],
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                entryId: {}
                            }
                        }
                    },
                    successEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId" ],
                            members: {
                                entryId: {},
                                assetPropertyValue: {
                                    shape: "S1j"
                                }
                            }
                        }
                    },
                    skippedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "completionStatus" ],
                            members: {
                                entryId: {},
                                completionStatus: {},
                                errorInfo: {
                                    type: "structure",
                                    required: [ "errorCode", "errorTimestamp" ],
                                    members: {
                                        errorCode: {},
                                        errorTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        BatchGetAssetPropertyValueHistory: {
            http: {
                requestUri: "/properties/batch/history"
            },
            input: {
                type: "structure",
                required: [ "entries" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId" ],
                            members: {
                                entryId: {},
                                assetId: {},
                                propertyId: {},
                                propertyAlias: {},
                                startDate: {
                                    type: "timestamp"
                                },
                                endDate: {
                                    type: "timestamp"
                                },
                                qualities: {
                                    shape: "Sq"
                                },
                                timeOrdering: {}
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errorEntries", "successEntries", "skippedEntries" ],
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "errorMessage", "entryId" ],
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                entryId: {}
                            }
                        }
                    },
                    successEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "assetPropertyValueHistory" ],
                            members: {
                                entryId: {},
                                assetPropertyValueHistory: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    skippedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "completionStatus" ],
                            members: {
                                entryId: {},
                                completionStatus: {},
                                errorInfo: {
                                    type: "structure",
                                    required: [ "errorCode", "errorTimestamp" ],
                                    members: {
                                        errorCode: {},
                                        errorTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        BatchPutAssetPropertyValue: {
            http: {
                requestUri: "/properties"
            },
            input: {
                type: "structure",
                required: [ "entries" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "propertyValues" ],
                            members: {
                                entryId: {},
                                assetId: {},
                                propertyId: {},
                                propertyAlias: {},
                                propertyValues: {
                                    type: "list",
                                    member: {
                                        shape: "S1j"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errorEntries" ],
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "errors" ],
                            members: {
                                entryId: {},
                                errors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "errorCode", "errorMessage", "timestamps" ],
                                        members: {
                                            errorCode: {},
                                            errorMessage: {},
                                            timestamps: {
                                                type: "list",
                                                member: {
                                                    shape: "S1p"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        CreateAccessPolicy: {
            http: {
                requestUri: "/access-policies",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "accessPolicyIdentity", "accessPolicyResource", "accessPolicyPermission" ],
                members: {
                    accessPolicyIdentity: {
                        shape: "S2l"
                    },
                    accessPolicyResource: {
                        shape: "S2s"
                    },
                    accessPolicyPermission: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPolicyId", "accessPolicyArn" ],
                members: {
                    accessPolicyId: {},
                    accessPolicyArn: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        CreateAsset: {
            http: {
                requestUri: "/assets",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetName", "assetModelId" ],
                members: {
                    assetName: {},
                    assetModelId: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S2w"
                    },
                    assetDescription: {},
                    assetId: {},
                    assetExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetArn", "assetStatus" ],
                members: {
                    assetId: {},
                    assetArn: {},
                    assetStatus: {
                        shape: "S35"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateAssetModel: {
            http: {
                requestUri: "/asset-models",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelName" ],
                members: {
                    assetModelName: {},
                    assetModelDescription: {},
                    assetModelProperties: {
                        shape: "S3e"
                    },
                    assetModelHierarchies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "childAssetModelId" ],
                            members: {
                                name: {},
                                childAssetModelId: {},
                                id: {},
                                externalId: {}
                            }
                        }
                    },
                    assetModelCompositeModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type" ],
                            members: {
                                name: {},
                                description: {},
                                type: {},
                                properties: {
                                    shape: "S3e"
                                },
                                id: {},
                                externalId: {}
                            }
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S2w"
                    },
                    assetModelId: {},
                    assetModelExternalId: {},
                    assetModelType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelId", "assetModelArn", "assetModelStatus" ],
                members: {
                    assetModelId: {},
                    assetModelArn: {},
                    assetModelStatus: {
                        shape: "S4c"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateAssetModelCompositeModel: {
            http: {
                requestUri: "/asset-models/{assetModelId}/composite-models",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelId", "assetModelCompositeModelName", "assetModelCompositeModelType" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    parentAssetModelCompositeModelId: {},
                    assetModelCompositeModelExternalId: {},
                    assetModelCompositeModelId: {},
                    assetModelCompositeModelDescription: {},
                    assetModelCompositeModelName: {},
                    assetModelCompositeModelType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    composedAssetModelId: {},
                    assetModelCompositeModelProperties: {
                        shape: "S3e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelCompositeModelId", "assetModelCompositeModelPath", "assetModelStatus" ],
                members: {
                    assetModelCompositeModelId: {},
                    assetModelCompositeModelPath: {
                        shape: "S4g"
                    },
                    assetModelStatus: {
                        shape: "S4c"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateBulkImportJob: {
            http: {
                requestUri: "/jobs",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "jobName", "jobRoleArn", "files", "errorReportLocation", "jobConfiguration" ],
                members: {
                    jobName: {},
                    jobRoleArn: {},
                    files: {
                        shape: "S4j"
                    },
                    errorReportLocation: {
                        shape: "S4n"
                    },
                    jobConfiguration: {
                        shape: "S4o"
                    },
                    adaptiveIngestion: {
                        type: "boolean"
                    },
                    deleteFilesAfterImport: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId", "jobName", "jobStatus" ],
                members: {
                    jobId: {},
                    jobName: {},
                    jobStatus: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        CreateDashboard: {
            http: {
                requestUri: "/dashboards",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "projectId", "dashboardName", "dashboardDefinition" ],
                members: {
                    projectId: {},
                    dashboardName: {},
                    dashboardDescription: {},
                    dashboardDefinition: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dashboardId", "dashboardArn" ],
                members: {
                    dashboardId: {},
                    dashboardArn: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        CreateGateway: {
            http: {
                requestUri: "/20200301/gateways",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "gatewayName", "gatewayPlatform" ],
                members: {
                    gatewayName: {},
                    gatewayPlatform: {
                        shape: "S52"
                    },
                    tags: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayId", "gatewayArn" ],
                members: {
                    gatewayId: {},
                    gatewayArn: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreatePortal: {
            http: {
                requestUri: "/portals",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "portalName", "portalContactEmail", "roleArn" ],
                members: {
                    portalName: {},
                    portalDescription: {},
                    portalContactEmail: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    portalLogoImageFile: {
                        shape: "S59"
                    },
                    roleArn: {},
                    tags: {
                        shape: "S2w"
                    },
                    portalAuthMode: {},
                    notificationSenderEmail: {},
                    alarms: {
                        shape: "S5d"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalId", "portalArn", "portalStartUrl", "portalStatus", "ssoApplicationId" ],
                members: {
                    portalId: {},
                    portalArn: {},
                    portalStartUrl: {},
                    portalStatus: {
                        shape: "S5g"
                    },
                    ssoApplicationId: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "portalId", "projectName" ],
                members: {
                    portalId: {},
                    projectName: {},
                    projectDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projectId", "projectArn" ],
                members: {
                    projectId: {},
                    projectArn: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteAccessPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/access-policies/{accessPolicyId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accessPolicyId" ],
                members: {
                    accessPolicyId: {
                        location: "uri",
                        locationName: "accessPolicyId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteAsset: {
            http: {
                method: "DELETE",
                requestUri: "/assets/{assetId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetStatus" ],
                members: {
                    assetStatus: {
                        shape: "S35"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteAssetModel: {
            http: {
                method: "DELETE",
                requestUri: "/asset-models/{assetModelId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelStatus" ],
                members: {
                    assetModelStatus: {
                        shape: "S4c"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteAssetModelCompositeModel: {
            http: {
                method: "DELETE",
                requestUri: "/asset-models/{assetModelId}/composite-models/{assetModelCompositeModelId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelId", "assetModelCompositeModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    assetModelCompositeModelId: {
                        location: "uri",
                        locationName: "assetModelCompositeModelId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelStatus" ],
                members: {
                    assetModelStatus: {
                        shape: "S4c"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteDashboard: {
            http: {
                method: "DELETE",
                requestUri: "/dashboards/{dashboardId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "dashboardId" ],
                members: {
                    dashboardId: {
                        location: "uri",
                        locationName: "dashboardId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteGateway: {
            http: {
                method: "DELETE",
                requestUri: "/20200301/gateways/{gatewayId}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeletePortal: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "portalId" ],
                members: {
                    portalId: {
                        location: "uri",
                        locationName: "portalId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalStatus" ],
                members: {
                    portalStatus: {
                        shape: "S5g"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteTimeSeries: {
            http: {
                requestUri: "/timeseries/delete/"
            },
            input: {
                type: "structure",
                members: {
                    alias: {
                        location: "querystring",
                        locationName: "alias"
                    },
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAccessPolicy: {
            http: {
                method: "GET",
                requestUri: "/access-policies/{accessPolicyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPolicyId" ],
                members: {
                    accessPolicyId: {
                        location: "uri",
                        locationName: "accessPolicyId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPolicyId", "accessPolicyArn", "accessPolicyIdentity", "accessPolicyResource", "accessPolicyPermission", "accessPolicyCreationDate", "accessPolicyLastUpdateDate" ],
                members: {
                    accessPolicyId: {},
                    accessPolicyArn: {},
                    accessPolicyIdentity: {
                        shape: "S2l"
                    },
                    accessPolicyResource: {
                        shape: "S2s"
                    },
                    accessPolicyPermission: {},
                    accessPolicyCreationDate: {
                        type: "timestamp"
                    },
                    accessPolicyLastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeAction: {
            http: {
                method: "GET",
                requestUri: "/actions/{actionId}"
            },
            input: {
                type: "structure",
                required: [ "actionId" ],
                members: {
                    actionId: {
                        location: "uri",
                        locationName: "actionId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "actionId", "targetResource", "actionDefinitionId", "actionPayload", "executionTime" ],
                members: {
                    actionId: {},
                    targetResource: {
                        shape: "S68"
                    },
                    actionDefinitionId: {},
                    actionPayload: {
                        shape: "S69"
                    },
                    executionTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAsset: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}"
            },
            input: {
                type: "structure",
                required: [ "assetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    excludeProperties: {
                        location: "querystring",
                        locationName: "excludeProperties",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetArn", "assetName", "assetModelId", "assetProperties", "assetHierarchies", "assetCreationDate", "assetLastUpdateDate", "assetStatus" ],
                members: {
                    assetId: {},
                    assetArn: {},
                    assetName: {},
                    assetModelId: {},
                    assetProperties: {
                        shape: "S6e"
                    },
                    assetHierarchies: {
                        shape: "S6l"
                    },
                    assetCompositeModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type", "properties" ],
                            members: {
                                name: {},
                                description: {},
                                type: {},
                                properties: {
                                    shape: "S6e"
                                },
                                id: {},
                                externalId: {}
                            }
                        }
                    },
                    assetCreationDate: {
                        type: "timestamp"
                    },
                    assetLastUpdateDate: {
                        type: "timestamp"
                    },
                    assetStatus: {
                        shape: "S35"
                    },
                    assetDescription: {},
                    assetCompositeModelSummaries: {
                        shape: "S6p"
                    },
                    assetExternalId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAssetCompositeModel: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/composite-models/{assetCompositeModelId}"
            },
            input: {
                type: "structure",
                required: [ "assetId", "assetCompositeModelId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    assetCompositeModelId: {
                        location: "uri",
                        locationName: "assetCompositeModelId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetCompositeModelId", "assetCompositeModelPath", "assetCompositeModelName", "assetCompositeModelDescription", "assetCompositeModelType", "assetCompositeModelProperties", "assetCompositeModelSummaries" ],
                members: {
                    assetId: {},
                    assetCompositeModelId: {},
                    assetCompositeModelExternalId: {},
                    assetCompositeModelPath: {
                        shape: "S6r"
                    },
                    assetCompositeModelName: {},
                    assetCompositeModelDescription: {},
                    assetCompositeModelType: {},
                    assetCompositeModelProperties: {
                        shape: "S6e"
                    },
                    assetCompositeModelSummaries: {
                        shape: "S6p"
                    },
                    actionDefinitions: {
                        shape: "S6v"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAssetModel: {
            http: {
                method: "GET",
                requestUri: "/asset-models/{assetModelId}"
            },
            input: {
                type: "structure",
                required: [ "assetModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    excludeProperties: {
                        location: "querystring",
                        locationName: "excludeProperties",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelId", "assetModelArn", "assetModelName", "assetModelDescription", "assetModelProperties", "assetModelHierarchies", "assetModelCreationDate", "assetModelLastUpdateDate", "assetModelStatus" ],
                members: {
                    assetModelId: {},
                    assetModelArn: {},
                    assetModelName: {},
                    assetModelDescription: {},
                    assetModelProperties: {
                        shape: "S6z"
                    },
                    assetModelHierarchies: {
                        shape: "S71"
                    },
                    assetModelCompositeModels: {
                        shape: "S73"
                    },
                    assetModelCreationDate: {
                        type: "timestamp"
                    },
                    assetModelLastUpdateDate: {
                        type: "timestamp"
                    },
                    assetModelStatus: {
                        shape: "S4c"
                    },
                    assetModelType: {},
                    assetModelCompositeModelSummaries: {
                        shape: "S75"
                    },
                    assetModelExternalId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAssetModelCompositeModel: {
            http: {
                method: "GET",
                requestUri: "/asset-models/{assetModelId}/composite-models/{assetModelCompositeModelId}"
            },
            input: {
                type: "structure",
                required: [ "assetModelId", "assetModelCompositeModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    assetModelCompositeModelId: {
                        location: "uri",
                        locationName: "assetModelCompositeModelId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelId", "assetModelCompositeModelId", "assetModelCompositeModelPath", "assetModelCompositeModelName", "assetModelCompositeModelDescription", "assetModelCompositeModelType", "assetModelCompositeModelProperties", "assetModelCompositeModelSummaries" ],
                members: {
                    assetModelId: {},
                    assetModelCompositeModelId: {},
                    assetModelCompositeModelExternalId: {},
                    assetModelCompositeModelPath: {
                        shape: "S4g"
                    },
                    assetModelCompositeModelName: {},
                    assetModelCompositeModelDescription: {},
                    assetModelCompositeModelType: {},
                    assetModelCompositeModelProperties: {
                        shape: "S6z"
                    },
                    compositionDetails: {
                        type: "structure",
                        members: {
                            compositionRelationship: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        id: {}
                                    }
                                }
                            }
                        }
                    },
                    assetModelCompositeModelSummaries: {
                        shape: "S75"
                    },
                    actionDefinitions: {
                        shape: "S6v"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAssetProperty: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/properties/{propertyId}"
            },
            input: {
                type: "structure",
                required: [ "assetId", "propertyId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "uri",
                        locationName: "propertyId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetName", "assetModelId" ],
                members: {
                    assetId: {},
                    assetName: {},
                    assetModelId: {},
                    assetProperty: {
                        shape: "S7e"
                    },
                    compositeModel: {
                        type: "structure",
                        required: [ "name", "type", "assetProperty" ],
                        members: {
                            name: {},
                            type: {},
                            assetProperty: {
                                shape: "S7e"
                            },
                            id: {},
                            externalId: {}
                        }
                    },
                    assetExternalId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeBulkImportJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId", "jobName", "jobStatus", "jobRoleArn", "files", "errorReportLocation", "jobConfiguration", "jobCreationDate", "jobLastUpdateDate" ],
                members: {
                    jobId: {},
                    jobName: {},
                    jobStatus: {},
                    jobRoleArn: {},
                    files: {
                        shape: "S4j"
                    },
                    errorReportLocation: {
                        shape: "S4n"
                    },
                    jobConfiguration: {
                        shape: "S4o"
                    },
                    jobCreationDate: {
                        type: "timestamp"
                    },
                    jobLastUpdateDate: {
                        type: "timestamp"
                    },
                    adaptiveIngestion: {
                        type: "boolean"
                    },
                    deleteFilesAfterImport: {
                        type: "boolean"
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        DescribeDashboard: {
            http: {
                method: "GET",
                requestUri: "/dashboards/{dashboardId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dashboardId" ],
                members: {
                    dashboardId: {
                        location: "uri",
                        locationName: "dashboardId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dashboardId", "dashboardArn", "dashboardName", "projectId", "dashboardDefinition", "dashboardCreationDate", "dashboardLastUpdateDate" ],
                members: {
                    dashboardId: {},
                    dashboardArn: {},
                    dashboardName: {},
                    projectId: {},
                    dashboardDescription: {},
                    dashboardDefinition: {},
                    dashboardCreationDate: {
                        type: "timestamp"
                    },
                    dashboardLastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeDefaultEncryptionConfiguration: {
            http: {
                method: "GET",
                requestUri: "/configuration/account/encryption"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "encryptionType", "configurationStatus" ],
                members: {
                    encryptionType: {},
                    kmsKeyArn: {},
                    configurationStatus: {
                        shape: "S7n"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeGateway: {
            http: {
                method: "GET",
                requestUri: "/20200301/gateways/{gatewayId}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayId", "gatewayName", "gatewayArn", "gatewayCapabilitySummaries", "creationDate", "lastUpdateDate" ],
                members: {
                    gatewayId: {},
                    gatewayName: {},
                    gatewayArn: {},
                    gatewayPlatform: {
                        shape: "S52"
                    },
                    gatewayCapabilitySummaries: {
                        shape: "S7s"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeGatewayCapabilityConfiguration: {
            http: {
                method: "GET",
                requestUri: "/20200301/gateways/{gatewayId}/capability/{capabilityNamespace}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId", "capabilityNamespace" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    },
                    capabilityNamespace: {
                        location: "uri",
                        locationName: "capabilityNamespace"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayId", "capabilityNamespace", "capabilityConfiguration", "capabilitySyncStatus" ],
                members: {
                    gatewayId: {},
                    capabilityNamespace: {},
                    capabilityConfiguration: {},
                    capabilitySyncStatus: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeLoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S81"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribePortal: {
            http: {
                method: "GET",
                requestUri: "/portals/{portalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalId" ],
                members: {
                    portalId: {
                        location: "uri",
                        locationName: "portalId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalId", "portalArn", "portalName", "portalClientId", "portalStartUrl", "portalContactEmail", "portalStatus", "portalCreationDate", "portalLastUpdateDate" ],
                members: {
                    portalId: {},
                    portalArn: {},
                    portalName: {},
                    portalDescription: {},
                    portalClientId: {},
                    portalStartUrl: {},
                    portalContactEmail: {},
                    portalStatus: {
                        shape: "S5g"
                    },
                    portalCreationDate: {
                        type: "timestamp"
                    },
                    portalLastUpdateDate: {
                        type: "timestamp"
                    },
                    portalLogoImageLocation: {
                        type: "structure",
                        required: [ "id", "url" ],
                        members: {
                            id: {},
                            url: {}
                        }
                    },
                    roleArn: {},
                    portalAuthMode: {},
                    notificationSenderEmail: {},
                    alarms: {
                        shape: "S5d"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projectId", "projectArn", "projectName", "portalId", "projectCreationDate", "projectLastUpdateDate" ],
                members: {
                    projectId: {},
                    projectArn: {},
                    projectName: {},
                    portalId: {},
                    projectDescription: {},
                    projectCreationDate: {
                        type: "timestamp"
                    },
                    projectLastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeStorageConfiguration: {
            http: {
                method: "GET",
                requestUri: "/configuration/account/storage"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "storageType", "configurationStatus" ],
                members: {
                    storageType: {},
                    multiLayerStorage: {
                        shape: "S8c"
                    },
                    disassociatedDataStorage: {},
                    retentionPeriod: {
                        shape: "S8f"
                    },
                    configurationStatus: {
                        shape: "S7n"
                    },
                    lastUpdateDate: {
                        type: "timestamp"
                    },
                    warmTier: {},
                    warmTierRetentionPeriod: {
                        shape: "S8j"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeTimeSeries: {
            http: {
                method: "GET",
                requestUri: "/timeseries/describe/"
            },
            input: {
                type: "structure",
                members: {
                    alias: {
                        location: "querystring",
                        locationName: "alias"
                    },
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "timeSeriesId", "dataType", "timeSeriesCreationDate", "timeSeriesLastUpdateDate", "timeSeriesArn" ],
                members: {
                    assetId: {},
                    propertyId: {},
                    alias: {},
                    timeSeriesId: {},
                    dataType: {},
                    dataTypeSpec: {},
                    timeSeriesCreationDate: {
                        type: "timestamp"
                    },
                    timeSeriesLastUpdateDate: {
                        type: "timestamp"
                    },
                    timeSeriesArn: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DisassociateAssets: {
            http: {
                requestUri: "/assets/{assetId}/disassociate"
            },
            input: {
                type: "structure",
                required: [ "assetId", "hierarchyId", "childAssetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    hierarchyId: {},
                    childAssetId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DisassociateTimeSeriesFromAssetProperty: {
            http: {
                requestUri: "/timeseries/disassociate/"
            },
            input: {
                type: "structure",
                required: [ "alias", "assetId", "propertyId" ],
                members: {
                    alias: {
                        location: "querystring",
                        locationName: "alias"
                    },
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ExecuteAction: {
            http: {
                requestUri: "/actions",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "targetResource", "actionDefinitionId", "actionPayload" ],
                members: {
                    targetResource: {
                        shape: "S68"
                    },
                    actionDefinitionId: {},
                    actionPayload: {
                        shape: "S69"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "actionId" ],
                members: {
                    actionId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ExecuteQuery: {
            http: {
                requestUri: "/queries/execution"
            },
            input: {
                type: "structure",
                required: [ "queryStatement" ],
                members: {
                    queryStatement: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    columns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                type: {
                                    type: "structure",
                                    members: {
                                        scalarType: {}
                                    }
                                }
                            }
                        }
                    },
                    rows: {
                        type: "list",
                        member: {
                            shape: "S91"
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetAssetPropertyAggregates: {
            http: {
                method: "GET",
                requestUri: "/properties/aggregates"
            },
            input: {
                type: "structure",
                required: [ "aggregateTypes", "resolution", "startDate", "endDate" ],
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    },
                    aggregateTypes: {
                        shape: "Sm",
                        location: "querystring",
                        locationName: "aggregateTypes"
                    },
                    resolution: {
                        location: "querystring",
                        locationName: "resolution"
                    },
                    qualities: {
                        shape: "Sq",
                        location: "querystring",
                        locationName: "qualities"
                    },
                    startDate: {
                        location: "querystring",
                        locationName: "startDate",
                        type: "timestamp"
                    },
                    endDate: {
                        location: "querystring",
                        locationName: "endDate",
                        type: "timestamp"
                    },
                    timeOrdering: {
                        location: "querystring",
                        locationName: "timeOrdering"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "aggregatedValues" ],
                members: {
                    aggregatedValues: {
                        shape: "S12"
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetAssetPropertyValue: {
            http: {
                method: "GET",
                requestUri: "/properties/latest"
            },
            input: {
                type: "structure",
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    propertyValue: {
                        shape: "S1j"
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetAssetPropertyValueHistory: {
            http: {
                method: "GET",
                requestUri: "/properties/history"
            },
            input: {
                type: "structure",
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    },
                    startDate: {
                        location: "querystring",
                        locationName: "startDate",
                        type: "timestamp"
                    },
                    endDate: {
                        location: "querystring",
                        locationName: "endDate",
                        type: "timestamp"
                    },
                    qualities: {
                        shape: "Sq",
                        location: "querystring",
                        locationName: "qualities"
                    },
                    timeOrdering: {
                        location: "querystring",
                        locationName: "timeOrdering"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetPropertyValueHistory" ],
                members: {
                    assetPropertyValueHistory: {
                        shape: "S25"
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetInterpolatedAssetPropertyValues: {
            http: {
                method: "GET",
                requestUri: "/properties/interpolated"
            },
            input: {
                type: "structure",
                required: [ "startTimeInSeconds", "endTimeInSeconds", "quality", "intervalInSeconds", "type" ],
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    },
                    startTimeInSeconds: {
                        location: "querystring",
                        locationName: "startTimeInSeconds",
                        type: "long"
                    },
                    startTimeOffsetInNanos: {
                        location: "querystring",
                        locationName: "startTimeOffsetInNanos",
                        type: "integer"
                    },
                    endTimeInSeconds: {
                        location: "querystring",
                        locationName: "endTimeInSeconds",
                        type: "long"
                    },
                    endTimeOffsetInNanos: {
                        location: "querystring",
                        locationName: "endTimeOffsetInNanos",
                        type: "integer"
                    },
                    quality: {
                        location: "querystring",
                        locationName: "quality"
                    },
                    intervalInSeconds: {
                        location: "querystring",
                        locationName: "intervalInSeconds",
                        type: "long"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    intervalWindowInSeconds: {
                        location: "querystring",
                        locationName: "intervalWindowInSeconds",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "interpolatedAssetPropertyValues" ],
                members: {
                    interpolatedAssetPropertyValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "timestamp", "value" ],
                            members: {
                                timestamp: {
                                    shape: "S1p"
                                },
                                value: {
                                    shape: "S1k"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        ListAccessPolicies: {
            http: {
                method: "GET",
                requestUri: "/access-policies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    identityType: {
                        location: "querystring",
                        locationName: "identityType"
                    },
                    identityId: {
                        location: "querystring",
                        locationName: "identityId"
                    },
                    resourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    resourceId: {
                        location: "querystring",
                        locationName: "resourceId"
                    },
                    iamArn: {
                        location: "querystring",
                        locationName: "iamArn"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPolicySummaries" ],
                members: {
                    accessPolicySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "identity", "resource", "permission" ],
                            members: {
                                id: {},
                                identity: {
                                    shape: "S2l"
                                },
                                resource: {
                                    shape: "S2s"
                                },
                                permission: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListActions: {
            http: {
                method: "GET",
                requestUri: "/actions"
            },
            input: {
                type: "structure",
                required: [ "targetResourceType", "targetResourceId" ],
                members: {
                    targetResourceType: {
                        location: "querystring",
                        locationName: "targetResourceType"
                    },
                    targetResourceId: {
                        location: "querystring",
                        locationName: "targetResourceId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "actionSummaries", "nextToken" ],
                members: {
                    actionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                actionId: {},
                                actionDefinitionId: {},
                                targetResource: {
                                    shape: "S68"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssetModelCompositeModels: {
            http: {
                method: "GET",
                requestUri: "/asset-models/{assetModelId}/composite-models"
            },
            input: {
                type: "structure",
                required: [ "assetModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelCompositeModelSummaries" ],
                members: {
                    assetModelCompositeModelSummaries: {
                        shape: "S75"
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssetModelProperties: {
            http: {
                method: "GET",
                requestUri: "/asset-models/{assetModelId}/properties"
            },
            input: {
                type: "structure",
                required: [ "assetModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    filter: {
                        location: "querystring",
                        locationName: "filter"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelPropertySummaries" ],
                members: {
                    assetModelPropertySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "dataType", "type" ],
                            members: {
                                id: {},
                                name: {},
                                dataType: {},
                                dataTypeSpec: {},
                                unit: {},
                                type: {
                                    shape: "S3i"
                                },
                                assetModelCompositeModelId: {},
                                path: {
                                    shape: "S3w"
                                },
                                externalId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssetModels: {
            http: {
                method: "GET",
                requestUri: "/asset-models"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    assetModelTypes: {
                        location: "querystring",
                        locationName: "assetModelTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelSummaries" ],
                members: {
                    assetModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "description", "creationDate", "lastUpdateDate", "status" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                description: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "S4c"
                                },
                                assetModelType: {},
                                externalId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssetProperties: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/properties"
            },
            input: {
                type: "structure",
                required: [ "assetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    filter: {
                        location: "querystring",
                        locationName: "filter"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetPropertySummaries" ],
                members: {
                    assetPropertySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id" ],
                            members: {
                                id: {},
                                alias: {},
                                unit: {},
                                notification: {
                                    shape: "S6g"
                                },
                                assetCompositeModelId: {},
                                path: {
                                    shape: "S6j"
                                },
                                externalId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssetRelationships: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/assetRelationships"
            },
            input: {
                type: "structure",
                required: [ "assetId", "traversalType" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    traversalType: {
                        location: "querystring",
                        locationName: "traversalType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetRelationshipSummaries" ],
                members: {
                    assetRelationshipSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "relationshipType" ],
                            members: {
                                hierarchyInfo: {
                                    type: "structure",
                                    members: {
                                        parentAssetId: {},
                                        childAssetId: {}
                                    }
                                },
                                relationshipType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssets: {
            http: {
                method: "GET",
                requestUri: "/assets"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    assetModelId: {
                        location: "querystring",
                        locationName: "assetModelId"
                    },
                    filter: {
                        location: "querystring",
                        locationName: "filter"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetSummaries" ],
                members: {
                    assetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "assetModelId", "creationDate", "lastUpdateDate", "status", "hierarchies" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                assetModelId: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "S35"
                                },
                                hierarchies: {
                                    shape: "S6l"
                                },
                                description: {},
                                externalId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssociatedAssets: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/hierarchies"
            },
            input: {
                type: "structure",
                required: [ "assetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    hierarchyId: {
                        location: "querystring",
                        locationName: "hierarchyId"
                    },
                    traversalDirection: {
                        location: "querystring",
                        locationName: "traversalDirection"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetSummaries" ],
                members: {
                    assetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "assetModelId", "creationDate", "lastUpdateDate", "status", "hierarchies" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                assetModelId: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "S35"
                                },
                                hierarchies: {
                                    shape: "S6l"
                                },
                                description: {},
                                externalId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListBulkImportJobs: {
            http: {
                method: "GET",
                requestUri: "/jobs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    filter: {
                        location: "querystring",
                        locationName: "filter"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummaries" ],
                members: {
                    jobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "status" ],
                            members: {
                                id: {},
                                name: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        ListCompositionRelationships: {
            http: {
                method: "GET",
                requestUri: "/asset-models/{assetModelId}/composition-relationships"
            },
            input: {
                type: "structure",
                required: [ "assetModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "compositionRelationshipSummaries" ],
                members: {
                    compositionRelationshipSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assetModelId", "assetModelCompositeModelId", "assetModelCompositeModelType" ],
                            members: {
                                assetModelId: {},
                                assetModelCompositeModelId: {},
                                assetModelCompositeModelType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListDashboards: {
            http: {
                method: "GET",
                requestUri: "/dashboards",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dashboardSummaries" ],
                members: {
                    dashboardSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListGateways: {
            http: {
                method: "GET",
                requestUri: "/20200301/gateways"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewaySummaries" ],
                members: {
                    gatewaySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "gatewayId", "gatewayName", "creationDate", "lastUpdateDate" ],
                            members: {
                                gatewayId: {},
                                gatewayName: {},
                                gatewayPlatform: {
                                    shape: "S52"
                                },
                                gatewayCapabilitySummaries: {
                                    shape: "S7s"
                                },
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListPortals: {
            http: {
                method: "GET",
                requestUri: "/portals",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    portalSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "startUrl", "status" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                startUrl: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                roleArn: {},
                                status: {
                                    shape: "S5g"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListProjectAssets: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectId}/assets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetIds" ],
                members: {
                    assetIds: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalId" ],
                members: {
                    portalId: {
                        location: "querystring",
                        locationName: "portalId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projectSummaries" ],
                members: {
                    projectSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2w"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListTimeSeries: {
            http: {
                method: "GET",
                requestUri: "/timeseries/"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    aliasPrefix: {
                        location: "querystring",
                        locationName: "aliasPrefix"
                    },
                    timeSeriesType: {
                        location: "querystring",
                        locationName: "timeSeriesType"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TimeSeriesSummaries" ],
                members: {
                    TimeSeriesSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "timeSeriesId", "dataType", "timeSeriesCreationDate", "timeSeriesLastUpdateDate", "timeSeriesArn" ],
                            members: {
                                assetId: {},
                                propertyId: {},
                                alias: {},
                                timeSeriesId: {},
                                dataType: {},
                                dataTypeSpec: {},
                                timeSeriesCreationDate: {
                                    type: "timestamp"
                                },
                                timeSeriesLastUpdateDate: {
                                    type: "timestamp"
                                },
                                timeSeriesArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PutDefaultEncryptionConfiguration: {
            http: {
                requestUri: "/configuration/account/encryption"
            },
            input: {
                type: "structure",
                required: [ "encryptionType" ],
                members: {
                    encryptionType: {},
                    kmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "encryptionType", "configurationStatus" ],
                members: {
                    encryptionType: {},
                    kmsKeyArn: {},
                    configurationStatus: {
                        shape: "S7n"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PutLoggingOptions: {
            http: {
                method: "PUT",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S81"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PutStorageConfiguration: {
            http: {
                requestUri: "/configuration/account/storage"
            },
            input: {
                type: "structure",
                required: [ "storageType" ],
                members: {
                    storageType: {},
                    multiLayerStorage: {
                        shape: "S8c"
                    },
                    disassociatedDataStorage: {},
                    retentionPeriod: {
                        shape: "S8f"
                    },
                    warmTier: {},
                    warmTierRetentionPeriod: {
                        shape: "S8j"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "storageType", "configurationStatus" ],
                members: {
                    storageType: {},
                    multiLayerStorage: {
                        shape: "S8c"
                    },
                    disassociatedDataStorage: {},
                    retentionPeriod: {
                        shape: "S8f"
                    },
                    configurationStatus: {
                        shape: "S7n"
                    },
                    warmTier: {},
                    warmTierRetentionPeriod: {
                        shape: "S8j"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateAccessPolicy: {
            http: {
                method: "PUT",
                requestUri: "/access-policies/{accessPolicyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPolicyId", "accessPolicyIdentity", "accessPolicyResource", "accessPolicyPermission" ],
                members: {
                    accessPolicyId: {
                        location: "uri",
                        locationName: "accessPolicyId"
                    },
                    accessPolicyIdentity: {
                        shape: "S2l"
                    },
                    accessPolicyResource: {
                        shape: "S2s"
                    },
                    accessPolicyPermission: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        UpdateAsset: {
            http: {
                method: "PUT",
                requestUri: "/assets/{assetId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetId", "assetName" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    assetName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    assetDescription: {},
                    assetExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assetStatus" ],
                members: {
                    assetStatus: {
                        shape: "S35"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateAssetModel: {
            http: {
                method: "PUT",
                requestUri: "/asset-models/{assetModelId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelId", "assetModelName" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    assetModelName: {},
                    assetModelDescription: {},
                    assetModelProperties: {
                        shape: "S6z"
                    },
                    assetModelHierarchies: {
                        shape: "S71"
                    },
                    assetModelCompositeModels: {
                        shape: "S73"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    assetModelExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelStatus" ],
                members: {
                    assetModelStatus: {
                        shape: "S4c"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateAssetModelCompositeModel: {
            http: {
                method: "PUT",
                requestUri: "/asset-models/{assetModelId}/composite-models/{assetModelCompositeModelId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelId", "assetModelCompositeModelId", "assetModelCompositeModelName" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    assetModelCompositeModelId: {
                        location: "uri",
                        locationName: "assetModelCompositeModelId"
                    },
                    assetModelCompositeModelExternalId: {},
                    assetModelCompositeModelDescription: {},
                    assetModelCompositeModelName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    assetModelCompositeModelProperties: {
                        shape: "S6z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelCompositeModelPath", "assetModelStatus" ],
                members: {
                    assetModelCompositeModelPath: {
                        shape: "S4g"
                    },
                    assetModelStatus: {
                        shape: "S4c"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateAssetProperty: {
            http: {
                method: "PUT",
                requestUri: "/assets/{assetId}/properties/{propertyId}"
            },
            input: {
                type: "structure",
                required: [ "assetId", "propertyId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "uri",
                        locationName: "propertyId"
                    },
                    propertyAlias: {},
                    propertyNotificationState: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    propertyUnit: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateDashboard: {
            http: {
                method: "PUT",
                requestUri: "/dashboards/{dashboardId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dashboardId", "dashboardName", "dashboardDefinition" ],
                members: {
                    dashboardId: {
                        location: "uri",
                        locationName: "dashboardId"
                    },
                    dashboardName: {},
                    dashboardDescription: {},
                    dashboardDefinition: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        UpdateGateway: {
            http: {
                method: "PUT",
                requestUri: "/20200301/gateways/{gatewayId}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId", "gatewayName" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    },
                    gatewayName: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateGatewayCapabilityConfiguration: {
            http: {
                requestUri: "/20200301/gateways/{gatewayId}/capability",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "gatewayId", "capabilityNamespace", "capabilityConfiguration" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    },
                    capabilityNamespace: {},
                    capabilityConfiguration: {}
                }
            },
            output: {
                type: "structure",
                required: [ "capabilityNamespace", "capabilitySyncStatus" ],
                members: {
                    capabilityNamespace: {},
                    capabilitySyncStatus: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdatePortal: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "portalId", "portalName", "portalContactEmail", "roleArn" ],
                members: {
                    portalId: {
                        location: "uri",
                        locationName: "portalId"
                    },
                    portalName: {},
                    portalDescription: {},
                    portalContactEmail: {},
                    portalLogoImage: {
                        type: "structure",
                        members: {
                            id: {},
                            file: {
                                shape: "S59"
                            }
                        }
                    },
                    roleArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    notificationSenderEmail: {},
                    alarms: {
                        shape: "S5d"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalStatus" ],
                members: {
                    portalStatus: {
                        shape: "S5g"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        UpdateProject: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId", "projectName" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    projectName: {},
                    projectDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        }
    },
    shapes: {
        S8: {
            type: "list",
            member: {}
        },
        Sb: {
            type: "structure",
            required: [ "assetId", "code", "message" ],
            members: {
                assetId: {},
                code: {},
                message: {}
            }
        },
        Sm: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "list",
            member: {}
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                required: [ "timestamp", "value" ],
                members: {
                    timestamp: {
                        type: "timestamp"
                    },
                    quality: {},
                    value: {
                        type: "structure",
                        members: {
                            average: {
                                type: "double"
                            },
                            count: {
                                type: "double"
                            },
                            maximum: {
                                type: "double"
                            },
                            minimum: {
                                type: "double"
                            },
                            sum: {
                                type: "double"
                            },
                            standardDeviation: {
                                type: "double"
                            }
                        }
                    }
                }
            }
        },
        S1j: {
            type: "structure",
            required: [ "value", "timestamp" ],
            members: {
                value: {
                    shape: "S1k"
                },
                timestamp: {
                    shape: "S1p"
                },
                quality: {}
            }
        },
        S1k: {
            type: "structure",
            members: {
                stringValue: {},
                integerValue: {
                    type: "integer"
                },
                doubleValue: {
                    type: "double"
                },
                booleanValue: {
                    type: "boolean"
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "timeInSeconds" ],
            members: {
                timeInSeconds: {
                    type: "long"
                },
                offsetInNanos: {
                    type: "integer"
                }
            }
        },
        S25: {
            type: "list",
            member: {
                shape: "S1j"
            }
        },
        S2l: {
            type: "structure",
            members: {
                user: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                },
                group: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                },
                iamUser: {
                    type: "structure",
                    required: [ "arn" ],
                    members: {
                        arn: {}
                    }
                },
                iamRole: {
                    type: "structure",
                    required: [ "arn" ],
                    members: {
                        arn: {}
                    }
                }
            }
        },
        S2s: {
            type: "structure",
            members: {
                portal: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                },
                project: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                }
            }
        },
        S2w: {
            type: "map",
            key: {},
            value: {}
        },
        S35: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    shape: "S37"
                }
            }
        },
        S37: {
            type: "structure",
            required: [ "code", "message" ],
            members: {
                code: {},
                message: {},
                details: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "code", "message" ],
                        members: {
                            code: {},
                            message: {}
                        }
                    }
                }
            }
        },
        S3e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "dataType", "type" ],
                members: {
                    name: {},
                    dataType: {},
                    dataTypeSpec: {},
                    unit: {},
                    type: {
                        shape: "S3i"
                    },
                    id: {},
                    externalId: {}
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                attribute: {
                    type: "structure",
                    members: {
                        defaultValue: {}
                    }
                },
                measurement: {
                    type: "structure",
                    members: {
                        processingConfig: {
                            type: "structure",
                            required: [ "forwardingConfig" ],
                            members: {
                                forwardingConfig: {
                                    shape: "S3n"
                                }
                            }
                        }
                    }
                },
                transform: {
                    type: "structure",
                    required: [ "expression", "variables" ],
                    members: {
                        expression: {},
                        variables: {
                            shape: "S3r"
                        },
                        processingConfig: {
                            type: "structure",
                            required: [ "computeLocation" ],
                            members: {
                                computeLocation: {},
                                forwardingConfig: {
                                    shape: "S3n"
                                }
                            }
                        }
                    }
                },
                metric: {
                    type: "structure",
                    required: [ "expression", "variables", "window" ],
                    members: {
                        expression: {},
                        variables: {
                            shape: "S3r"
                        },
                        window: {
                            type: "structure",
                            members: {
                                tumbling: {
                                    type: "structure",
                                    required: [ "interval" ],
                                    members: {
                                        interval: {},
                                        offset: {}
                                    }
                                }
                            }
                        },
                        processingConfig: {
                            type: "structure",
                            required: [ "computeLocation" ],
                            members: {
                                computeLocation: {}
                            }
                        }
                    }
                }
            }
        },
        S3n: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {}
            }
        },
        S3r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {
                        type: "structure",
                        members: {
                            propertyId: {},
                            hierarchyId: {},
                            propertyPath: {
                                shape: "S3w"
                            }
                        }
                    }
                }
            }
        },
        S3w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    name: {}
                }
            }
        },
        S4c: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    shape: "S37"
                }
            }
        },
        S4g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    name: {}
                }
            }
        },
        S4j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "bucket", "key" ],
                members: {
                    bucket: {},
                    key: {},
                    versionId: {}
                }
            }
        },
        S4n: {
            type: "structure",
            required: [ "bucket", "prefix" ],
            members: {
                bucket: {},
                prefix: {}
            }
        },
        S4o: {
            type: "structure",
            required: [ "fileFormat" ],
            members: {
                fileFormat: {
                    type: "structure",
                    members: {
                        csv: {
                            type: "structure",
                            required: [ "columnNames" ],
                            members: {
                                columnNames: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        parquet: {
                            type: "structure",
                            members: {}
                        }
                    }
                }
            }
        },
        S52: {
            type: "structure",
            members: {
                greengrass: {
                    type: "structure",
                    required: [ "groupArn" ],
                    members: {
                        groupArn: {}
                    }
                },
                greengrassV2: {
                    type: "structure",
                    required: [ "coreDeviceThingName" ],
                    members: {
                        coreDeviceThingName: {}
                    }
                }
            }
        },
        S59: {
            type: "structure",
            required: [ "data", "type" ],
            members: {
                data: {
                    type: "blob"
                },
                type: {}
            }
        },
        S5d: {
            type: "structure",
            required: [ "alarmRoleArn" ],
            members: {
                alarmRoleArn: {},
                notificationLambdaArn: {}
            }
        },
        S5g: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    type: "structure",
                    members: {
                        code: {},
                        message: {}
                    }
                }
            }
        },
        S68: {
            type: "structure",
            required: [ "assetId" ],
            members: {
                assetId: {}
            }
        },
        S69: {
            type: "structure",
            required: [ "stringValue" ],
            members: {
                stringValue: {}
            }
        },
        S6e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "name", "dataType" ],
                members: {
                    id: {},
                    name: {},
                    alias: {},
                    notification: {
                        shape: "S6g"
                    },
                    dataType: {},
                    dataTypeSpec: {},
                    unit: {},
                    path: {
                        shape: "S6j"
                    },
                    externalId: {}
                }
            }
        },
        S6g: {
            type: "structure",
            required: [ "topic", "state" ],
            members: {
                topic: {},
                state: {}
            }
        },
        S6j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    name: {}
                }
            }
        },
        S6l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    id: {},
                    name: {},
                    externalId: {}
                }
            }
        },
        S6p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "name", "type", "description", "path" ],
                members: {
                    id: {},
                    externalId: {},
                    name: {},
                    type: {},
                    description: {},
                    path: {
                        shape: "S6r"
                    }
                }
            }
        },
        S6r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    name: {}
                }
            }
        },
        S6v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "actionDefinitionId", "actionName", "actionType" ],
                members: {
                    actionDefinitionId: {},
                    actionName: {},
                    actionType: {}
                }
            }
        },
        S6z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "dataType", "type" ],
                members: {
                    id: {},
                    name: {},
                    dataType: {},
                    dataTypeSpec: {},
                    unit: {},
                    type: {
                        shape: "S3i"
                    },
                    path: {
                        shape: "S3w"
                    },
                    externalId: {}
                }
            }
        },
        S71: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "childAssetModelId" ],
                members: {
                    id: {},
                    name: {},
                    childAssetModelId: {},
                    externalId: {}
                }
            }
        },
        S73: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    description: {},
                    type: {},
                    properties: {
                        shape: "S6z"
                    },
                    id: {},
                    externalId: {}
                }
            }
        },
        S75: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "name", "type" ],
                members: {
                    id: {},
                    externalId: {},
                    name: {},
                    type: {},
                    description: {},
                    path: {
                        shape: "S4g"
                    }
                }
            }
        },
        S7e: {
            type: "structure",
            required: [ "id", "name", "dataType" ],
            members: {
                id: {},
                name: {},
                alias: {},
                notification: {
                    shape: "S6g"
                },
                dataType: {},
                unit: {},
                type: {
                    shape: "S3i"
                },
                path: {
                    shape: "S6j"
                },
                externalId: {}
            }
        },
        S7n: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    type: "structure",
                    required: [ "code", "message" ],
                    members: {
                        code: {},
                        message: {}
                    }
                }
            }
        },
        S7s: {
            type: "list",
            member: {
                type: "structure",
                required: [ "capabilityNamespace", "capabilitySyncStatus" ],
                members: {
                    capabilityNamespace: {},
                    capabilitySyncStatus: {}
                }
            }
        },
        S81: {
            type: "structure",
            required: [ "level" ],
            members: {
                level: {}
            }
        },
        S8c: {
            type: "structure",
            required: [ "customerManagedS3Storage" ],
            members: {
                customerManagedS3Storage: {
                    type: "structure",
                    required: [ "s3ResourceArn", "roleArn" ],
                    members: {
                        s3ResourceArn: {},
                        roleArn: {}
                    }
                }
            }
        },
        S8f: {
            type: "structure",
            members: {
                numberOfDays: {
                    type: "integer"
                },
                unlimited: {
                    type: "boolean"
                }
            }
        },
        S8j: {
            type: "structure",
            members: {
                numberOfDays: {
                    type: "integer"
                },
                unlimited: {
                    type: "boolean"
                }
            }
        },
        S91: {
            type: "structure",
            required: [ "data" ],
            members: {
                data: {
                    shape: "S92"
                }
            }
        },
        S92: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    scalarValue: {},
                    arrayValue: {
                        shape: "S92"
                    },
                    rowValue: {
                        shape: "S91"
                    },
                    nullValue: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    paginators: {
        BatchGetAssetPropertyAggregates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        BatchGetAssetPropertyValue: {
            input_token: "nextToken",
            output_token: "nextToken"
        },
        BatchGetAssetPropertyValueHistory: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ExecuteQuery: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "rows"
        },
        GetAssetPropertyAggregates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "aggregatedValues"
        },
        GetAssetPropertyValueHistory: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetPropertyValueHistory"
        },
        GetInterpolatedAssetPropertyValues: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "interpolatedAssetPropertyValues"
        },
        ListAccessPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accessPolicySummaries"
        },
        ListActions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "actionSummaries"
        },
        ListAssetModelCompositeModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetModelCompositeModelSummaries"
        },
        ListAssetModelProperties: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetModelPropertySummaries"
        },
        ListAssetModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetModelSummaries"
        },
        ListAssetProperties: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetPropertySummaries"
        },
        ListAssetRelationships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetRelationshipSummaries"
        },
        ListAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetSummaries"
        },
        ListAssociatedAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetSummaries"
        },
        ListBulkImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobSummaries"
        },
        ListCompositionRelationships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "compositionRelationshipSummaries"
        },
        ListDashboards: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dashboardSummaries"
        },
        ListGateways: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "gatewaySummaries"
        },
        ListPortals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "portalSummaries"
        },
        ListProjectAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetIds"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "projectSummaries"
        },
        ListTimeSeries: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "TimeSeriesSummaries"
        }
    },
    waiters: {
        AssetModelNotExists: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAssetModel",
            acceptors: [ {
                state: "success",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        AssetModelActive: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAssetModel",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "assetModelStatus.state",
                expected: "ACTIVE"
            }, {
                state: "failure",
                matcher: "path",
                argument: "assetModelStatus.state",
                expected: "FAILED"
            } ]
        },
        AssetNotExists: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAsset",
            acceptors: [ {
                state: "success",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        AssetActive: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAsset",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "assetStatus.state",
                expected: "ACTIVE"
            }, {
                state: "failure",
                matcher: "path",
                argument: "assetStatus.state",
                expected: "FAILED"
            } ]
        },
        PortalNotExists: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribePortal",
            acceptors: [ {
                state: "success",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        PortalActive: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribePortal",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "portalStatus.state",
                expected: "ACTIVE"
            } ]
        }
    }
};

AWS.apiLoader.services["macie2"] = {};

AWS.Macie2 = AWS.Service.defineService("macie2", [ "2020-01-01" ]);

AWS.apiLoader.services["macie2"]["2020-01-01"] = {
    metadata: {
        apiVersion: "2020-01-01",
        endpointPrefix: "macie2",
        signingName: "macie2",
        serviceFullName: "Amazon Macie 2",
        serviceId: "Macie2",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "macie2-2020-01-01",
        signatureVersion: "v4"
    },
    operations: {
        AcceptInvitation: {
            http: {
                requestUri: "/invitations/accept",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    administratorAccountId: {
                        locationName: "administratorAccountId"
                    },
                    invitationId: {
                        locationName: "invitationId"
                    },
                    masterAccount: {
                        locationName: "masterAccount"
                    }
                },
                required: [ "invitationId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchGetCustomDataIdentifiers: {
            http: {
                requestUri: "/custom-data-identifiers/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S5",
                        locationName: "ids"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customDataIdentifiers: {
                        locationName: "customDataIdentifiers",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                deleted: {
                                    locationName: "deleted",
                                    type: "boolean"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    notFoundIdentifierIds: {
                        shape: "S5",
                        locationName: "notFoundIdentifierIds"
                    }
                }
            }
        },
        CreateAllowList: {
            http: {
                requestUri: "/allow-lists",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    criteria: {
                        shape: "Sc",
                        locationName: "criteria"
                    },
                    description: {
                        locationName: "description"
                    },
                    name: {
                        locationName: "name"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                },
                required: [ "criteria", "clientToken", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        CreateClassificationJob: {
            http: {
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    allowListIds: {
                        shape: "S5",
                        locationName: "allowListIds"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    customDataIdentifierIds: {
                        shape: "S5",
                        locationName: "customDataIdentifierIds"
                    },
                    description: {
                        locationName: "description"
                    },
                    initialRun: {
                        locationName: "initialRun",
                        type: "boolean"
                    },
                    jobType: {
                        locationName: "jobType"
                    },
                    managedDataIdentifierIds: {
                        shape: "S5",
                        locationName: "managedDataIdentifierIds"
                    },
                    managedDataIdentifierSelector: {
                        locationName: "managedDataIdentifierSelector"
                    },
                    name: {
                        locationName: "name"
                    },
                    s3JobDefinition: {
                        shape: "Sp",
                        locationName: "s3JobDefinition"
                    },
                    samplingPercentage: {
                        locationName: "samplingPercentage",
                        type: "integer"
                    },
                    scheduleFrequency: {
                        shape: "S1d",
                        locationName: "scheduleFrequency"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                },
                required: [ "s3JobDefinition", "jobType", "clientToken", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    jobArn: {
                        locationName: "jobArn"
                    },
                    jobId: {
                        locationName: "jobId"
                    }
                }
            }
        },
        CreateCustomDataIdentifier: {
            http: {
                requestUri: "/custom-data-identifiers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    description: {
                        locationName: "description"
                    },
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    name: {
                        locationName: "name"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    severityLevels: {
                        shape: "S1k",
                        locationName: "severityLevels"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                },
                required: [ "regex", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    customDataIdentifierId: {
                        locationName: "customDataIdentifierId"
                    }
                }
            }
        },
        CreateFindingsFilter: {
            http: {
                requestUri: "/findingsfilters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1r",
                        locationName: "findingCriteria"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                },
                required: [ "action", "findingCriteria", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        CreateInvitations: {
            http: {
                requestUri: "/invitations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    },
                    disableEmailNotification: {
                        locationName: "disableEmailNotification",
                        type: "boolean"
                    },
                    message: {
                        locationName: "message"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1x",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        CreateMember: {
            http: {
                requestUri: "/members",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    account: {
                        locationName: "account",
                        type: "structure",
                        members: {
                            accountId: {
                                locationName: "accountId"
                            },
                            email: {
                                locationName: "email"
                            }
                        },
                        required: [ "email", "accountId" ]
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                },
                required: [ "account" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    }
                }
            }
        },
        CreateSampleFindings: {
            http: {
                requestUri: "/findings/sample",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingTypes: {
                        locationName: "findingTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeclineInvitations: {
            http: {
                requestUri: "/invitations/decline",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1x",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteAllowList: {
            http: {
                method: "DELETE",
                requestUri: "/allow-lists/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    ignoreJobChecks: {
                        location: "querystring",
                        locationName: "ignoreJobChecks"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCustomDataIdentifier: {
            http: {
                method: "DELETE",
                requestUri: "/custom-data-identifiers/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFindingsFilter: {
            http: {
                method: "DELETE",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInvitations: {
            http: {
                requestUri: "/invitations/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1x",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteMember: {
            http: {
                method: "DELETE",
                requestUri: "/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBuckets: {
            http: {
                requestUri: "/datasources/s3",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    criteria: {
                        locationName: "criteria",
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                eq: {
                                    shape: "S5",
                                    locationName: "eq"
                                },
                                gt: {
                                    locationName: "gt",
                                    type: "long"
                                },
                                gte: {
                                    locationName: "gte",
                                    type: "long"
                                },
                                lt: {
                                    locationName: "lt",
                                    type: "long"
                                },
                                lte: {
                                    locationName: "lte",
                                    type: "long"
                                },
                                neq: {
                                    shape: "S5",
                                    locationName: "neq"
                                },
                                prefix: {
                                    locationName: "prefix"
                                }
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    buckets: {
                        locationName: "buckets",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                allowsUnencryptedObjectUploads: {
                                    locationName: "allowsUnencryptedObjectUploads"
                                },
                                bucketArn: {
                                    locationName: "bucketArn"
                                },
                                bucketCreatedAt: {
                                    shape: "S9",
                                    locationName: "bucketCreatedAt"
                                },
                                bucketName: {
                                    locationName: "bucketName"
                                },
                                classifiableObjectCount: {
                                    locationName: "classifiableObjectCount",
                                    type: "long"
                                },
                                classifiableSizeInBytes: {
                                    locationName: "classifiableSizeInBytes",
                                    type: "long"
                                },
                                errorCode: {
                                    locationName: "errorCode"
                                },
                                errorMessage: {
                                    locationName: "errorMessage"
                                },
                                jobDetails: {
                                    shape: "S2t",
                                    locationName: "jobDetails"
                                },
                                lastAutomatedDiscoveryTime: {
                                    shape: "S9",
                                    locationName: "lastAutomatedDiscoveryTime"
                                },
                                lastUpdated: {
                                    shape: "S9",
                                    locationName: "lastUpdated"
                                },
                                objectCount: {
                                    locationName: "objectCount",
                                    type: "long"
                                },
                                objectCountByEncryptionType: {
                                    shape: "S2w",
                                    locationName: "objectCountByEncryptionType"
                                },
                                publicAccess: {
                                    shape: "S2x",
                                    locationName: "publicAccess"
                                },
                                region: {
                                    locationName: "region"
                                },
                                replicationDetails: {
                                    locationName: "replicationDetails",
                                    type: "structure",
                                    members: {
                                        replicated: {
                                            locationName: "replicated",
                                            type: "boolean"
                                        },
                                        replicatedExternally: {
                                            locationName: "replicatedExternally",
                                            type: "boolean"
                                        },
                                        replicationAccounts: {
                                            shape: "S5",
                                            locationName: "replicationAccounts"
                                        }
                                    }
                                },
                                sensitivityScore: {
                                    locationName: "sensitivityScore",
                                    type: "integer"
                                },
                                serverSideEncryption: {
                                    locationName: "serverSideEncryption",
                                    type: "structure",
                                    members: {
                                        kmsMasterKeyId: {
                                            locationName: "kmsMasterKeyId"
                                        },
                                        type: {
                                            locationName: "type"
                                        }
                                    }
                                },
                                sharedAccess: {
                                    locationName: "sharedAccess"
                                },
                                sizeInBytes: {
                                    locationName: "sizeInBytes",
                                    type: "long"
                                },
                                sizeInBytesCompressed: {
                                    locationName: "sizeInBytesCompressed",
                                    type: "long"
                                },
                                tags: {
                                    locationName: "tags",
                                    type: "list",
                                    member: {
                                        shape: "S3a"
                                    }
                                },
                                unclassifiableObjectCount: {
                                    shape: "S3b",
                                    locationName: "unclassifiableObjectCount"
                                },
                                unclassifiableObjectSizeInBytes: {
                                    shape: "S3b",
                                    locationName: "unclassifiableObjectSizeInBytes"
                                },
                                versioning: {
                                    locationName: "versioning",
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClassificationJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                },
                required: [ "jobId" ]
            },
            output: {
                type: "structure",
                members: {
                    allowListIds: {
                        shape: "S5",
                        locationName: "allowListIds"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    customDataIdentifierIds: {
                        shape: "S5",
                        locationName: "customDataIdentifierIds"
                    },
                    description: {
                        locationName: "description"
                    },
                    initialRun: {
                        locationName: "initialRun",
                        type: "boolean"
                    },
                    jobArn: {
                        locationName: "jobArn"
                    },
                    jobId: {
                        locationName: "jobId"
                    },
                    jobStatus: {
                        locationName: "jobStatus"
                    },
                    jobType: {
                        locationName: "jobType"
                    },
                    lastRunErrorStatus: {
                        shape: "S3f",
                        locationName: "lastRunErrorStatus"
                    },
                    lastRunTime: {
                        shape: "S9",
                        locationName: "lastRunTime"
                    },
                    managedDataIdentifierIds: {
                        shape: "S5",
                        locationName: "managedDataIdentifierIds"
                    },
                    managedDataIdentifierSelector: {
                        locationName: "managedDataIdentifierSelector"
                    },
                    name: {
                        locationName: "name"
                    },
                    s3JobDefinition: {
                        shape: "Sp",
                        locationName: "s3JobDefinition"
                    },
                    samplingPercentage: {
                        locationName: "samplingPercentage",
                        type: "integer"
                    },
                    scheduleFrequency: {
                        shape: "S1d",
                        locationName: "scheduleFrequency"
                    },
                    statistics: {
                        locationName: "statistics",
                        type: "structure",
                        members: {
                            approximateNumberOfObjectsToProcess: {
                                locationName: "approximateNumberOfObjectsToProcess",
                                type: "double"
                            },
                            numberOfRuns: {
                                locationName: "numberOfRuns",
                                type: "double"
                            }
                        }
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    userPausedDetails: {
                        shape: "S3j",
                        locationName: "userPausedDetails"
                    }
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/admin/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    autoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    },
                    maxAccountLimitReached: {
                        locationName: "maxAccountLimitReached",
                        type: "boolean"
                    }
                }
            }
        },
        DisableMacie: {
            http: {
                method: "DELETE",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                method: "DELETE",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {
                        location: "querystring",
                        locationName: "adminAccountId"
                    }
                },
                required: [ "adminAccountId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromAdministratorAccount: {
            http: {
                requestUri: "/administrator/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromMasterAccount: {
            http: {
                requestUri: "/master/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateMember: {
            http: {
                requestUri: "/members/disassociate/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableMacie: {
            http: {
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    status: {
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {
                        locationName: "adminAccountId"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    }
                },
                required: [ "adminAccountId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAdministratorAccount: {
            http: {
                method: "GET",
                requestUri: "/administrator",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    administrator: {
                        shape: "S44",
                        locationName: "administrator"
                    }
                }
            }
        },
        GetAllowList: {
            http: {
                method: "GET",
                requestUri: "/allow-lists/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    criteria: {
                        shape: "Sc",
                        locationName: "criteria"
                    },
                    description: {
                        locationName: "description"
                    },
                    id: {
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    status: {
                        locationName: "status",
                        type: "structure",
                        members: {
                            code: {
                                locationName: "code"
                            },
                            description: {
                                locationName: "description"
                            }
                        },
                        required: [ "code" ]
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    updatedAt: {
                        shape: "S9",
                        locationName: "updatedAt"
                    }
                }
            }
        },
        GetAutomatedDiscoveryConfiguration: {
            http: {
                method: "GET",
                requestUri: "/automated-discovery/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    classificationScopeId: {
                        locationName: "classificationScopeId"
                    },
                    disabledAt: {
                        shape: "S4d",
                        locationName: "disabledAt"
                    },
                    firstEnabledAt: {
                        shape: "S4d",
                        locationName: "firstEnabledAt"
                    },
                    lastUpdatedAt: {
                        shape: "S4d",
                        locationName: "lastUpdatedAt"
                    },
                    sensitivityInspectionTemplateId: {
                        locationName: "sensitivityInspectionTemplateId"
                    },
                    status: {
                        locationName: "status"
                    }
                }
            }
        },
        GetBucketStatistics: {
            http: {
                requestUri: "/datasources/s3/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bucketCount: {
                        locationName: "bucketCount",
                        type: "long"
                    },
                    bucketCountByEffectivePermission: {
                        locationName: "bucketCountByEffectivePermission",
                        type: "structure",
                        members: {
                            publiclyAccessible: {
                                locationName: "publiclyAccessible",
                                type: "long"
                            },
                            publiclyReadable: {
                                locationName: "publiclyReadable",
                                type: "long"
                            },
                            publiclyWritable: {
                                locationName: "publiclyWritable",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountByEncryptionType: {
                        locationName: "bucketCountByEncryptionType",
                        type: "structure",
                        members: {
                            kmsManaged: {
                                locationName: "kmsManaged",
                                type: "long"
                            },
                            s3Managed: {
                                locationName: "s3Managed",
                                type: "long"
                            },
                            unencrypted: {
                                locationName: "unencrypted",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountByObjectEncryptionRequirement: {
                        locationName: "bucketCountByObjectEncryptionRequirement",
                        type: "structure",
                        members: {
                            allowsUnencryptedObjectUploads: {
                                locationName: "allowsUnencryptedObjectUploads",
                                type: "long"
                            },
                            deniesUnencryptedObjectUploads: {
                                locationName: "deniesUnencryptedObjectUploads",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountBySharedAccessType: {
                        locationName: "bucketCountBySharedAccessType",
                        type: "structure",
                        members: {
                            external: {
                                locationName: "external",
                                type: "long"
                            },
                            internal: {
                                locationName: "internal",
                                type: "long"
                            },
                            notShared: {
                                locationName: "notShared",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketStatisticsBySensitivity: {
                        locationName: "bucketStatisticsBySensitivity",
                        type: "structure",
                        members: {
                            classificationError: {
                                shape: "S4n",
                                locationName: "classificationError"
                            },
                            notClassified: {
                                shape: "S4n",
                                locationName: "notClassified"
                            },
                            notSensitive: {
                                shape: "S4n",
                                locationName: "notSensitive"
                            },
                            sensitive: {
                                shape: "S4n",
                                locationName: "sensitive"
                            }
                        }
                    },
                    classifiableObjectCount: {
                        locationName: "classifiableObjectCount",
                        type: "long"
                    },
                    classifiableSizeInBytes: {
                        locationName: "classifiableSizeInBytes",
                        type: "long"
                    },
                    lastUpdated: {
                        shape: "S9",
                        locationName: "lastUpdated"
                    },
                    objectCount: {
                        locationName: "objectCount",
                        type: "long"
                    },
                    sizeInBytes: {
                        locationName: "sizeInBytes",
                        type: "long"
                    },
                    sizeInBytesCompressed: {
                        locationName: "sizeInBytesCompressed",
                        type: "long"
                    },
                    unclassifiableObjectCount: {
                        shape: "S3b",
                        locationName: "unclassifiableObjectCount"
                    },
                    unclassifiableObjectSizeInBytes: {
                        shape: "S3b",
                        locationName: "unclassifiableObjectSizeInBytes"
                    }
                }
            }
        },
        GetClassificationExportConfiguration: {
            http: {
                method: "GET",
                requestUri: "/classification-export-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S4q",
                        locationName: "configuration"
                    }
                }
            }
        },
        GetClassificationScope: {
            http: {
                method: "GET",
                requestUri: "/classification-scopes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    id: {
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    s3: {
                        locationName: "s3",
                        type: "structure",
                        members: {
                            excludes: {
                                locationName: "excludes",
                                type: "structure",
                                members: {
                                    bucketNames: {
                                        shape: "S4x",
                                        locationName: "bucketNames"
                                    }
                                },
                                required: [ "bucketNames" ]
                            }
                        },
                        required: [ "excludes" ]
                    }
                }
            }
        },
        GetCustomDataIdentifier: {
            http: {
                method: "GET",
                requestUri: "/custom-data-identifiers/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    deleted: {
                        locationName: "deleted",
                        type: "boolean"
                    },
                    description: {
                        locationName: "description"
                    },
                    id: {
                        locationName: "id"
                    },
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    name: {
                        locationName: "name"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    severityLevels: {
                        shape: "S1k",
                        locationName: "severityLevels"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindingStatistics: {
            http: {
                requestUri: "/findings/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingCriteria: {
                        shape: "S1r",
                        locationName: "findingCriteria"
                    },
                    groupBy: {
                        locationName: "groupBy"
                    },
                    size: {
                        locationName: "size",
                        type: "integer"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                },
                required: [ "groupBy" ]
            },
            output: {
                type: "structure",
                members: {
                    countsByGroup: {
                        locationName: "countsByGroup",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                count: {
                                    locationName: "count",
                                    type: "long"
                                },
                                groupKey: {
                                    locationName: "groupKey"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindings: {
            http: {
                requestUri: "/findings/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingIds: {
                        shape: "S5",
                        locationName: "findingIds"
                    },
                    sortCriteria: {
                        shape: "S59",
                        locationName: "sortCriteria"
                    }
                },
                required: [ "findingIds" ]
            },
            output: {
                type: "structure",
                members: {
                    findings: {
                        locationName: "findings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                archived: {
                                    locationName: "archived",
                                    type: "boolean"
                                },
                                category: {
                                    locationName: "category"
                                },
                                classificationDetails: {
                                    locationName: "classificationDetails",
                                    type: "structure",
                                    members: {
                                        detailedResultsLocation: {
                                            locationName: "detailedResultsLocation"
                                        },
                                        jobArn: {
                                            locationName: "jobArn"
                                        },
                                        jobId: {
                                            locationName: "jobId"
                                        },
                                        originType: {
                                            locationName: "originType"
                                        },
                                        result: {
                                            locationName: "result",
                                            type: "structure",
                                            members: {
                                                additionalOccurrences: {
                                                    locationName: "additionalOccurrences",
                                                    type: "boolean"
                                                },
                                                customDataIdentifiers: {
                                                    locationName: "customDataIdentifiers",
                                                    type: "structure",
                                                    members: {
                                                        detections: {
                                                            locationName: "detections",
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    arn: {
                                                                        locationName: "arn"
                                                                    },
                                                                    count: {
                                                                        locationName: "count",
                                                                        type: "long"
                                                                    },
                                                                    name: {
                                                                        locationName: "name"
                                                                    },
                                                                    occurrences: {
                                                                        shape: "S5k",
                                                                        locationName: "occurrences"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        totalCount: {
                                                            locationName: "totalCount",
                                                            type: "long"
                                                        }
                                                    }
                                                },
                                                mimeType: {
                                                    locationName: "mimeType"
                                                },
                                                sensitiveData: {
                                                    locationName: "sensitiveData",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            category: {
                                                                locationName: "category"
                                                            },
                                                            detections: {
                                                                locationName: "detections",
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        count: {
                                                                            locationName: "count",
                                                                            type: "long"
                                                                        },
                                                                        occurrences: {
                                                                            shape: "S5k",
                                                                            locationName: "occurrences"
                                                                        },
                                                                        type: {
                                                                            locationName: "type"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            totalCount: {
                                                                locationName: "totalCount",
                                                                type: "long"
                                                            }
                                                        }
                                                    }
                                                },
                                                sizeClassified: {
                                                    locationName: "sizeClassified",
                                                    type: "long"
                                                },
                                                status: {
                                                    locationName: "status",
                                                    type: "structure",
                                                    members: {
                                                        code: {
                                                            locationName: "code"
                                                        },
                                                        reason: {
                                                            locationName: "reason"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                count: {
                                    locationName: "count",
                                    type: "long"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                partition: {
                                    locationName: "partition"
                                },
                                policyDetails: {
                                    locationName: "policyDetails",
                                    type: "structure",
                                    members: {
                                        action: {
                                            locationName: "action",
                                            type: "structure",
                                            members: {
                                                actionType: {
                                                    locationName: "actionType"
                                                },
                                                apiCallDetails: {
                                                    locationName: "apiCallDetails",
                                                    type: "structure",
                                                    members: {
                                                        api: {
                                                            locationName: "api"
                                                        },
                                                        apiServiceName: {
                                                            locationName: "apiServiceName"
                                                        },
                                                        firstSeen: {
                                                            shape: "S9",
                                                            locationName: "firstSeen"
                                                        },
                                                        lastSeen: {
                                                            shape: "S9",
                                                            locationName: "lastSeen"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        actor: {
                                            locationName: "actor",
                                            type: "structure",
                                            members: {
                                                domainDetails: {
                                                    locationName: "domainDetails",
                                                    type: "structure",
                                                    members: {
                                                        domainName: {
                                                            locationName: "domainName"
                                                        }
                                                    }
                                                },
                                                ipAddressDetails: {
                                                    locationName: "ipAddressDetails",
                                                    type: "structure",
                                                    members: {
                                                        ipAddressV4: {
                                                            locationName: "ipAddressV4"
                                                        },
                                                        ipCity: {
                                                            locationName: "ipCity",
                                                            type: "structure",
                                                            members: {
                                                                name: {
                                                                    locationName: "name"
                                                                }
                                                            }
                                                        },
                                                        ipCountry: {
                                                            locationName: "ipCountry",
                                                            type: "structure",
                                                            members: {
                                                                code: {
                                                                    locationName: "code"
                                                                },
                                                                name: {
                                                                    locationName: "name"
                                                                }
                                                            }
                                                        },
                                                        ipGeoLocation: {
                                                            locationName: "ipGeoLocation",
                                                            type: "structure",
                                                            members: {
                                                                lat: {
                                                                    locationName: "lat",
                                                                    type: "double"
                                                                },
                                                                lon: {
                                                                    locationName: "lon",
                                                                    type: "double"
                                                                }
                                                            }
                                                        },
                                                        ipOwner: {
                                                            locationName: "ipOwner",
                                                            type: "structure",
                                                            members: {
                                                                asn: {
                                                                    locationName: "asn"
                                                                },
                                                                asnOrg: {
                                                                    locationName: "asnOrg"
                                                                },
                                                                isp: {
                                                                    locationName: "isp"
                                                                },
                                                                org: {
                                                                    locationName: "org"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                userIdentity: {
                                                    locationName: "userIdentity",
                                                    type: "structure",
                                                    members: {
                                                        assumedRole: {
                                                            locationName: "assumedRole",
                                                            type: "structure",
                                                            members: {
                                                                accessKeyId: {
                                                                    locationName: "accessKeyId"
                                                                },
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                sessionContext: {
                                                                    shape: "S6c",
                                                                    locationName: "sessionContext"
                                                                }
                                                            }
                                                        },
                                                        awsAccount: {
                                                            locationName: "awsAccount",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                }
                                                            }
                                                        },
                                                        awsService: {
                                                            locationName: "awsService",
                                                            type: "structure",
                                                            members: {
                                                                invokedBy: {
                                                                    locationName: "invokedBy"
                                                                }
                                                            }
                                                        },
                                                        federatedUser: {
                                                            locationName: "federatedUser",
                                                            type: "structure",
                                                            members: {
                                                                accessKeyId: {
                                                                    locationName: "accessKeyId"
                                                                },
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                sessionContext: {
                                                                    shape: "S6c",
                                                                    locationName: "sessionContext"
                                                                }
                                                            }
                                                        },
                                                        iamUser: {
                                                            locationName: "iamUser",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                userName: {
                                                                    locationName: "userName"
                                                                }
                                                            }
                                                        },
                                                        root: {
                                                            locationName: "root",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                }
                                                            }
                                                        },
                                                        type: {
                                                            locationName: "type"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                region: {
                                    locationName: "region"
                                },
                                resourcesAffected: {
                                    locationName: "resourcesAffected",
                                    type: "structure",
                                    members: {
                                        s3Bucket: {
                                            locationName: "s3Bucket",
                                            type: "structure",
                                            members: {
                                                allowsUnencryptedObjectUploads: {
                                                    locationName: "allowsUnencryptedObjectUploads"
                                                },
                                                arn: {
                                                    locationName: "arn"
                                                },
                                                createdAt: {
                                                    shape: "S9",
                                                    locationName: "createdAt"
                                                },
                                                defaultServerSideEncryption: {
                                                    shape: "S6n",
                                                    locationName: "defaultServerSideEncryption"
                                                },
                                                name: {
                                                    locationName: "name"
                                                },
                                                owner: {
                                                    locationName: "owner",
                                                    type: "structure",
                                                    members: {
                                                        displayName: {
                                                            locationName: "displayName"
                                                        },
                                                        id: {
                                                            locationName: "id"
                                                        }
                                                    }
                                                },
                                                publicAccess: {
                                                    shape: "S2x",
                                                    locationName: "publicAccess"
                                                },
                                                tags: {
                                                    shape: "S6q",
                                                    locationName: "tags"
                                                }
                                            }
                                        },
                                        s3Object: {
                                            locationName: "s3Object",
                                            type: "structure",
                                            members: {
                                                bucketArn: {
                                                    locationName: "bucketArn"
                                                },
                                                eTag: {
                                                    locationName: "eTag"
                                                },
                                                extension: {
                                                    locationName: "extension"
                                                },
                                                key: {
                                                    locationName: "key"
                                                },
                                                lastModified: {
                                                    shape: "S9",
                                                    locationName: "lastModified"
                                                },
                                                path: {
                                                    locationName: "path"
                                                },
                                                publicAccess: {
                                                    locationName: "publicAccess",
                                                    type: "boolean"
                                                },
                                                serverSideEncryption: {
                                                    shape: "S6n",
                                                    locationName: "serverSideEncryption"
                                                },
                                                size: {
                                                    locationName: "size",
                                                    type: "long"
                                                },
                                                storageClass: {
                                                    locationName: "storageClass"
                                                },
                                                tags: {
                                                    shape: "S6q",
                                                    locationName: "tags"
                                                },
                                                versionId: {
                                                    locationName: "versionId"
                                                }
                                            }
                                        }
                                    }
                                },
                                sample: {
                                    locationName: "sample",
                                    type: "boolean"
                                },
                                schemaVersion: {
                                    locationName: "schemaVersion"
                                },
                                severity: {
                                    locationName: "severity",
                                    type: "structure",
                                    members: {
                                        description: {
                                            locationName: "description"
                                        },
                                        score: {
                                            locationName: "score",
                                            type: "long"
                                        }
                                    }
                                },
                                title: {
                                    locationName: "title"
                                },
                                type: {
                                    locationName: "type"
                                },
                                updatedAt: {
                                    shape: "S9",
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindingsFilter: {
            http: {
                method: "GET",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    arn: {
                        locationName: "arn"
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1r",
                        locationName: "findingCriteria"
                    },
                    id: {
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindingsPublicationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/findings-publication-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    securityHubConfiguration: {
                        shape: "S6z",
                        locationName: "securityHubConfiguration"
                    }
                }
            }
        },
        GetInvitationsCount: {
            http: {
                method: "GET",
                requestUri: "/invitations/count",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    invitationsCount: {
                        locationName: "invitationsCount",
                        type: "long"
                    }
                }
            }
        },
        GetMacieSession: {
            http: {
                method: "GET",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    serviceRole: {
                        locationName: "serviceRole"
                    },
                    status: {
                        locationName: "status"
                    },
                    updatedAt: {
                        shape: "S9",
                        locationName: "updatedAt"
                    }
                }
            }
        },
        GetMasterAccount: {
            http: {
                method: "GET",
                requestUri: "/master",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    master: {
                        shape: "S44",
                        locationName: "master"
                    }
                }
            }
        },
        GetMember: {
            http: {
                method: "GET",
                requestUri: "/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    administratorAccountId: {
                        locationName: "administratorAccountId"
                    },
                    arn: {
                        locationName: "arn"
                    },
                    email: {
                        locationName: "email"
                    },
                    invitedAt: {
                        shape: "S9",
                        locationName: "invitedAt"
                    },
                    masterAccountId: {
                        locationName: "masterAccountId"
                    },
                    relationshipStatus: {
                        locationName: "relationshipStatus"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    updatedAt: {
                        shape: "S9",
                        locationName: "updatedAt"
                    }
                }
            }
        },
        GetResourceProfile: {
            http: {
                method: "GET",
                requestUri: "/resource-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    profileUpdatedAt: {
                        shape: "S9",
                        locationName: "profileUpdatedAt"
                    },
                    sensitivityScore: {
                        locationName: "sensitivityScore",
                        type: "integer"
                    },
                    sensitivityScoreOverridden: {
                        locationName: "sensitivityScoreOverridden",
                        type: "boolean"
                    },
                    statistics: {
                        locationName: "statistics",
                        type: "structure",
                        members: {
                            totalBytesClassified: {
                                locationName: "totalBytesClassified",
                                type: "long"
                            },
                            totalDetections: {
                                locationName: "totalDetections",
                                type: "long"
                            },
                            totalDetectionsSuppressed: {
                                locationName: "totalDetectionsSuppressed",
                                type: "long"
                            },
                            totalItemsClassified: {
                                locationName: "totalItemsClassified",
                                type: "long"
                            },
                            totalItemsSensitive: {
                                locationName: "totalItemsSensitive",
                                type: "long"
                            },
                            totalItemsSkipped: {
                                locationName: "totalItemsSkipped",
                                type: "long"
                            },
                            totalItemsSkippedInvalidEncryption: {
                                locationName: "totalItemsSkippedInvalidEncryption",
                                type: "long"
                            },
                            totalItemsSkippedInvalidKms: {
                                locationName: "totalItemsSkippedInvalidKms",
                                type: "long"
                            },
                            totalItemsSkippedPermissionDenied: {
                                locationName: "totalItemsSkippedPermissionDenied",
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetRevealConfiguration: {
            http: {
                method: "GET",
                requestUri: "/reveal-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S7d",
                        locationName: "configuration"
                    },
                    retrievalConfiguration: {
                        shape: "S7g",
                        locationName: "retrievalConfiguration"
                    }
                }
            }
        },
        GetSensitiveDataOccurrences: {
            http: {
                method: "GET",
                requestUri: "/findings/{findingId}/reveal",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingId: {
                        location: "uri",
                        locationName: "findingId"
                    }
                },
                required: [ "findingId" ]
            },
            output: {
                type: "structure",
                members: {
                    error: {
                        locationName: "error"
                    },
                    sensitiveDataOccurrences: {
                        locationName: "sensitiveDataOccurrences",
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    value: {
                                        locationName: "value"
                                    }
                                },
                                required: [ "value" ]
                            }
                        }
                    },
                    status: {
                        locationName: "status"
                    }
                }
            }
        },
        GetSensitiveDataOccurrencesAvailability: {
            http: {
                method: "GET",
                requestUri: "/findings/{findingId}/reveal/availability",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingId: {
                        location: "uri",
                        locationName: "findingId"
                    }
                },
                required: [ "findingId" ]
            },
            output: {
                type: "structure",
                members: {
                    code: {
                        locationName: "code"
                    },
                    reasons: {
                        locationName: "reasons",
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        GetSensitivityInspectionTemplate: {
            http: {
                method: "GET",
                requestUri: "/templates/sensitivity-inspections/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    description: {
                        locationName: "description"
                    },
                    excludes: {
                        shape: "S7x",
                        locationName: "excludes"
                    },
                    includes: {
                        shape: "S7y",
                        locationName: "includes"
                    },
                    name: {
                        locationName: "name"
                    },
                    sensitivityInspectionTemplateId: {
                        locationName: "sensitivityInspectionTemplateId"
                    }
                }
            }
        },
        GetUsageStatistics: {
            http: {
                requestUri: "/usage/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterBy: {
                        locationName: "filterBy",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                comparator: {
                                    locationName: "comparator"
                                },
                                key: {
                                    locationName: "key"
                                },
                                values: {
                                    shape: "S5",
                                    locationName: "values"
                                }
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortBy: {
                        locationName: "sortBy",
                        type: "structure",
                        members: {
                            key: {
                                locationName: "key"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    },
                    timeRange: {
                        locationName: "timeRange"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {
                        locationName: "nextToken"
                    },
                    records: {
                        locationName: "records",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                automatedDiscoveryFreeTrialStartDate: {
                                    shape: "S9",
                                    locationName: "automatedDiscoveryFreeTrialStartDate"
                                },
                                freeTrialStartDate: {
                                    shape: "S9",
                                    locationName: "freeTrialStartDate"
                                },
                                usage: {
                                    locationName: "usage",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            currency: {
                                                locationName: "currency"
                                            },
                                            estimatedCost: {
                                                locationName: "estimatedCost"
                                            },
                                            serviceLimit: {
                                                locationName: "serviceLimit",
                                                type: "structure",
                                                members: {
                                                    isServiceLimited: {
                                                        locationName: "isServiceLimited",
                                                        type: "boolean"
                                                    },
                                                    unit: {
                                                        locationName: "unit"
                                                    },
                                                    value: {
                                                        locationName: "value",
                                                        type: "long"
                                                    }
                                                }
                                            },
                                            type: {
                                                locationName: "type"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    timeRange: {
                        locationName: "timeRange"
                    }
                }
            }
        },
        GetUsageTotals: {
            http: {
                method: "GET",
                requestUri: "/usage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    timeRange: {
                        location: "querystring",
                        locationName: "timeRange"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    timeRange: {
                        locationName: "timeRange"
                    },
                    usageTotals: {
                        locationName: "usageTotals",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                currency: {
                                    locationName: "currency"
                                },
                                estimatedCost: {
                                    locationName: "estimatedCost"
                                },
                                type: {
                                    locationName: "type"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListAllowLists: {
            http: {
                method: "GET",
                requestUri: "/allow-lists",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    allowLists: {
                        locationName: "allowLists",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                },
                                updatedAt: {
                                    shape: "S9",
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListClassificationJobs: {
            http: {
                requestUri: "/jobs/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        locationName: "filterCriteria",
                        type: "structure",
                        members: {
                            excludes: {
                                shape: "S8r",
                                locationName: "excludes"
                            },
                            includes: {
                                shape: "S8r",
                                locationName: "includes"
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                bucketCriteria: {
                                    shape: "Sq",
                                    locationName: "bucketCriteria"
                                },
                                bucketDefinitions: {
                                    shape: "S10",
                                    locationName: "bucketDefinitions"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                jobId: {
                                    locationName: "jobId"
                                },
                                jobStatus: {
                                    locationName: "jobStatus"
                                },
                                jobType: {
                                    locationName: "jobType"
                                },
                                lastRunErrorStatus: {
                                    shape: "S3f",
                                    locationName: "lastRunErrorStatus"
                                },
                                name: {
                                    locationName: "name"
                                },
                                userPausedDetails: {
                                    shape: "S3j",
                                    locationName: "userPausedDetails"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListClassificationScopes: {
            http: {
                method: "GET",
                requestUri: "/classification-scopes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    classificationScopes: {
                        locationName: "classificationScopes",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListCustomDataIdentifiers: {
            http: {
                requestUri: "/custom-data-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/findings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingCriteria: {
                        shape: "S1r",
                        locationName: "findingCriteria"
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        shape: "S59",
                        locationName: "sortCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findingIds: {
                        shape: "S5",
                        locationName: "findingIds"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindingsFilters: {
            http: {
                method: "GET",
                requestUri: "/findingsfilters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findingsFilterListItems: {
                        locationName: "findingsFilterListItems",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                action: {
                                    locationName: "action"
                                },
                                arn: {
                                    locationName: "arn"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                },
                                tags: {
                                    shape: "Si",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    invitations: {
                        locationName: "invitations",
                        type: "list",
                        member: {
                            shape: "S44"
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListManagedDataIdentifiers: {
            http: {
                requestUri: "/managed-data-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                category: {
                                    locationName: "category"
                                },
                                id: {
                                    locationName: "id"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/members",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    onlyAssociated: {
                        location: "querystring",
                        locationName: "onlyAssociated"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        locationName: "members",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                administratorAccountId: {
                                    locationName: "administratorAccountId"
                                },
                                arn: {
                                    locationName: "arn"
                                },
                                email: {
                                    locationName: "email"
                                },
                                invitedAt: {
                                    shape: "S9",
                                    locationName: "invitedAt"
                                },
                                masterAccountId: {
                                    locationName: "masterAccountId"
                                },
                                relationshipStatus: {
                                    locationName: "relationshipStatus"
                                },
                                tags: {
                                    shape: "Si",
                                    locationName: "tags"
                                },
                                updatedAt: {
                                    shape: "S9",
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                method: "GET",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    adminAccounts: {
                        locationName: "adminAccounts",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                status: {
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListResourceProfileArtifacts: {
            http: {
                method: "GET",
                requestUri: "/resource-profiles/artifacts",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    artifacts: {
                        locationName: "artifacts",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                classificationResultStatus: {
                                    locationName: "classificationResultStatus"
                                },
                                sensitive: {
                                    locationName: "sensitive",
                                    type: "boolean"
                                }
                            },
                            required: [ "classificationResultStatus", "arn" ]
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListResourceProfileDetections: {
            http: {
                method: "GET",
                requestUri: "/resource-profiles/detections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    detections: {
                        locationName: "detections",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                count: {
                                    locationName: "count",
                                    type: "long"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                },
                                suppressed: {
                                    locationName: "suppressed",
                                    type: "boolean"
                                },
                                type: {
                                    locationName: "type"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListSensitivityInspectionTemplates: {
            http: {
                method: "GET",
                requestUri: "/templates/sensitivity-inspections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sensitivityInspectionTemplates: {
                        locationName: "sensitivityInspectionTemplates",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            }
        },
        PutClassificationExportConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/classification-export-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S4q",
                        locationName: "configuration"
                    }
                },
                required: [ "configuration" ]
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S4q",
                        locationName: "configuration"
                    }
                }
            }
        },
        PutFindingsPublicationConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/findings-publication-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    securityHubConfiguration: {
                        shape: "S6z",
                        locationName: "securityHubConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchResources: {
            http: {
                requestUri: "/datasources/search-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    bucketCriteria: {
                        locationName: "bucketCriteria",
                        type: "structure",
                        members: {
                            excludes: {
                                shape: "Saf",
                                locationName: "excludes"
                            },
                            includes: {
                                shape: "Saf",
                                locationName: "includes"
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    matchingResources: {
                        locationName: "matchingResources",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                matchingBucket: {
                                    locationName: "matchingBucket",
                                    type: "structure",
                                    members: {
                                        accountId: {
                                            locationName: "accountId"
                                        },
                                        bucketName: {
                                            locationName: "bucketName"
                                        },
                                        classifiableObjectCount: {
                                            locationName: "classifiableObjectCount",
                                            type: "long"
                                        },
                                        classifiableSizeInBytes: {
                                            locationName: "classifiableSizeInBytes",
                                            type: "long"
                                        },
                                        errorCode: {
                                            locationName: "errorCode"
                                        },
                                        errorMessage: {
                                            locationName: "errorMessage"
                                        },
                                        jobDetails: {
                                            shape: "S2t",
                                            locationName: "jobDetails"
                                        },
                                        lastAutomatedDiscoveryTime: {
                                            shape: "S9",
                                            locationName: "lastAutomatedDiscoveryTime"
                                        },
                                        objectCount: {
                                            locationName: "objectCount",
                                            type: "long"
                                        },
                                        objectCountByEncryptionType: {
                                            shape: "S2w",
                                            locationName: "objectCountByEncryptionType"
                                        },
                                        sensitivityScore: {
                                            locationName: "sensitivityScore",
                                            type: "integer"
                                        },
                                        sizeInBytes: {
                                            locationName: "sizeInBytes",
                                            type: "long"
                                        },
                                        sizeInBytesCompressed: {
                                            locationName: "sizeInBytesCompressed",
                                            type: "long"
                                        },
                                        unclassifiableObjectCount: {
                                            shape: "S3b",
                                            locationName: "unclassifiableObjectCount"
                                        },
                                        unclassifiableObjectSizeInBytes: {
                                            shape: "S3b",
                                            locationName: "unclassifiableObjectSizeInBytes"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                },
                required: [ "resourceArn", "tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestCustomDataIdentifier: {
            http: {
                requestUri: "/custom-data-identifiers/test",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    sampleText: {
                        locationName: "sampleText"
                    }
                },
                required: [ "regex", "sampleText" ]
            },
            output: {
                type: "structure",
                members: {
                    matchCount: {
                        locationName: "matchCount",
                        type: "integer"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "tagKeys", "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAllowList: {
            http: {
                method: "PUT",
                requestUri: "/allow-lists/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    criteria: {
                        shape: "Sc",
                        locationName: "criteria"
                    },
                    description: {
                        locationName: "description"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    }
                },
                required: [ "id", "criteria", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        UpdateAutomatedDiscoveryConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/automated-discovery/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    status: {
                        locationName: "status"
                    }
                },
                required: [ "status" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateClassificationJob: {
            http: {
                method: "PATCH",
                requestUri: "/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    jobStatus: {
                        locationName: "jobStatus"
                    }
                },
                required: [ "jobId", "jobStatus" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateClassificationScope: {
            http: {
                method: "PATCH",
                requestUri: "/classification-scopes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    s3: {
                        locationName: "s3",
                        type: "structure",
                        members: {
                            excludes: {
                                locationName: "excludes",
                                type: "structure",
                                members: {
                                    bucketNames: {
                                        shape: "S4x",
                                        locationName: "bucketNames"
                                    },
                                    operation: {
                                        locationName: "operation"
                                    }
                                },
                                required: [ "bucketNames", "operation" ]
                            }
                        },
                        required: [ "excludes" ]
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFindingsFilter: {
            http: {
                method: "PATCH",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1r",
                        locationName: "findingCriteria"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        UpdateMacieSession: {
            http: {
                method: "PATCH",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    status: {
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMemberSession: {
            http: {
                method: "PATCH",
                requestUri: "/macie/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    status: {
                        locationName: "status"
                    }
                },
                required: [ "id", "status" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/admin/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    autoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    }
                },
                required: [ "autoEnable" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceProfile: {
            http: {
                method: "PATCH",
                requestUri: "/resource-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    sensitivityScoreOverride: {
                        locationName: "sensitivityScoreOverride",
                        type: "integer"
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceProfileDetections: {
            http: {
                method: "PATCH",
                requestUri: "/resource-profiles/detections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    suppressDataIdentifiers: {
                        locationName: "suppressDataIdentifiers",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {
                                    locationName: "id"
                                },
                                type: {
                                    locationName: "type"
                                }
                            }
                        }
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRevealConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/reveal-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S7d",
                        locationName: "configuration"
                    },
                    retrievalConfiguration: {
                        locationName: "retrievalConfiguration",
                        type: "structure",
                        members: {
                            retrievalMode: {
                                locationName: "retrievalMode"
                            },
                            roleName: {
                                locationName: "roleName"
                            }
                        },
                        required: [ "retrievalMode" ]
                    }
                },
                required: [ "configuration" ]
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S7d",
                        locationName: "configuration"
                    },
                    retrievalConfiguration: {
                        shape: "S7g",
                        locationName: "retrievalConfiguration"
                    }
                }
            }
        },
        UpdateSensitivityInspectionTemplate: {
            http: {
                method: "PUT",
                requestUri: "/templates/sensitivity-inspections/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    description: {
                        locationName: "description"
                    },
                    excludes: {
                        shape: "S7x",
                        locationName: "excludes"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    includes: {
                        shape: "S7y",
                        locationName: "includes"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S9: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sc: {
            type: "structure",
            members: {
                regex: {
                    locationName: "regex"
                },
                s3WordsList: {
                    locationName: "s3WordsList",
                    type: "structure",
                    members: {
                        bucketName: {
                            locationName: "bucketName"
                        },
                        objectKey: {
                            locationName: "objectKey"
                        }
                    },
                    required: [ "bucketName", "objectKey" ]
                }
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        Sp: {
            type: "structure",
            members: {
                bucketCriteria: {
                    shape: "Sq",
                    locationName: "bucketCriteria"
                },
                bucketDefinitions: {
                    shape: "S10",
                    locationName: "bucketDefinitions"
                },
                scoping: {
                    locationName: "scoping",
                    type: "structure",
                    members: {
                        excludes: {
                            shape: "S13",
                            locationName: "excludes"
                        },
                        includes: {
                            shape: "S13",
                            locationName: "includes"
                        }
                    }
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                excludes: {
                    shape: "Sr",
                    locationName: "excludes"
                },
                includes: {
                    shape: "Sr",
                    locationName: "includes"
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleCriterion: {
                                locationName: "simpleCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagCriterion: {
                                locationName: "tagCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    buckets: {
                        shape: "S5",
                        locationName: "buckets"
                    }
                },
                required: [ "accountId", "buckets" ]
            }
        },
        S13: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleScopeTerm: {
                                locationName: "simpleScopeTerm",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagScopeTerm: {
                                locationName: "tagScopeTerm",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    target: {
                                        locationName: "target"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                dailySchedule: {
                    locationName: "dailySchedule",
                    type: "structure",
                    members: {}
                },
                monthlySchedule: {
                    locationName: "monthlySchedule",
                    type: "structure",
                    members: {
                        dayOfMonth: {
                            locationName: "dayOfMonth",
                            type: "integer"
                        }
                    }
                },
                weeklySchedule: {
                    locationName: "weeklySchedule",
                    type: "structure",
                    members: {
                        dayOfWeek: {
                            locationName: "dayOfWeek"
                        }
                    }
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    occurrencesThreshold: {
                        locationName: "occurrencesThreshold",
                        type: "long"
                    },
                    severity: {
                        locationName: "severity"
                    }
                },
                required: [ "occurrencesThreshold", "severity" ]
            }
        },
        S1r: {
            type: "structure",
            members: {
                criterion: {
                    locationName: "criterion",
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            eq: {
                                shape: "S5",
                                locationName: "eq"
                            },
                            eqExactMatch: {
                                shape: "S5",
                                locationName: "eqExactMatch"
                            },
                            gt: {
                                locationName: "gt",
                                type: "long"
                            },
                            gte: {
                                locationName: "gte",
                                type: "long"
                            },
                            lt: {
                                locationName: "lt",
                                type: "long"
                            },
                            lte: {
                                locationName: "lte",
                                type: "long"
                            },
                            neq: {
                                shape: "S5",
                                locationName: "neq"
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    errorCode: {
                        locationName: "errorCode"
                    },
                    errorMessage: {
                        locationName: "errorMessage"
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                isDefinedInJob: {
                    locationName: "isDefinedInJob"
                },
                isMonitoredByJob: {
                    locationName: "isMonitoredByJob"
                },
                lastJobId: {
                    locationName: "lastJobId"
                },
                lastJobRunTime: {
                    shape: "S9",
                    locationName: "lastJobRunTime"
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                customerManaged: {
                    locationName: "customerManaged",
                    type: "long"
                },
                kmsManaged: {
                    locationName: "kmsManaged",
                    type: "long"
                },
                s3Managed: {
                    locationName: "s3Managed",
                    type: "long"
                },
                unencrypted: {
                    locationName: "unencrypted",
                    type: "long"
                },
                unknown: {
                    locationName: "unknown",
                    type: "long"
                }
            }
        },
        S2x: {
            type: "structure",
            members: {
                effectivePermission: {
                    locationName: "effectivePermission"
                },
                permissionConfiguration: {
                    locationName: "permissionConfiguration",
                    type: "structure",
                    members: {
                        accountLevelPermissions: {
                            locationName: "accountLevelPermissions",
                            type: "structure",
                            members: {
                                blockPublicAccess: {
                                    shape: "S31",
                                    locationName: "blockPublicAccess"
                                }
                            }
                        },
                        bucketLevelPermissions: {
                            locationName: "bucketLevelPermissions",
                            type: "structure",
                            members: {
                                accessControlList: {
                                    locationName: "accessControlList",
                                    type: "structure",
                                    members: {
                                        allowsPublicReadAccess: {
                                            locationName: "allowsPublicReadAccess",
                                            type: "boolean"
                                        },
                                        allowsPublicWriteAccess: {
                                            locationName: "allowsPublicWriteAccess",
                                            type: "boolean"
                                        }
                                    }
                                },
                                blockPublicAccess: {
                                    shape: "S31",
                                    locationName: "blockPublicAccess"
                                },
                                bucketPolicy: {
                                    locationName: "bucketPolicy",
                                    type: "structure",
                                    members: {
                                        allowsPublicReadAccess: {
                                            locationName: "allowsPublicReadAccess",
                                            type: "boolean"
                                        },
                                        allowsPublicWriteAccess: {
                                            locationName: "allowsPublicWriteAccess",
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                blockPublicAcls: {
                    locationName: "blockPublicAcls",
                    type: "boolean"
                },
                blockPublicPolicy: {
                    locationName: "blockPublicPolicy",
                    type: "boolean"
                },
                ignorePublicAcls: {
                    locationName: "ignorePublicAcls",
                    type: "boolean"
                },
                restrictPublicBuckets: {
                    locationName: "restrictPublicBuckets",
                    type: "boolean"
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                key: {
                    locationName: "key"
                },
                value: {
                    locationName: "value"
                }
            }
        },
        S3b: {
            type: "structure",
            members: {
                fileType: {
                    locationName: "fileType",
                    type: "long"
                },
                storageClass: {
                    locationName: "storageClass",
                    type: "long"
                },
                total: {
                    locationName: "total",
                    type: "long"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                code: {
                    locationName: "code"
                }
            }
        },
        S3j: {
            type: "structure",
            members: {
                jobExpiresAt: {
                    shape: "S9",
                    locationName: "jobExpiresAt"
                },
                jobImminentExpirationHealthEventArn: {
                    locationName: "jobImminentExpirationHealthEventArn"
                },
                jobPausedAt: {
                    shape: "S9",
                    locationName: "jobPausedAt"
                }
            }
        },
        S44: {
            type: "structure",
            members: {
                accountId: {
                    locationName: "accountId"
                },
                invitationId: {
                    locationName: "invitationId"
                },
                invitedAt: {
                    shape: "S9",
                    locationName: "invitedAt"
                },
                relationshipStatus: {
                    locationName: "relationshipStatus"
                }
            }
        },
        S4d: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S4n: {
            type: "structure",
            members: {
                classifiableSizeInBytes: {
                    locationName: "classifiableSizeInBytes",
                    type: "long"
                },
                publiclyAccessibleCount: {
                    locationName: "publiclyAccessibleCount",
                    type: "long"
                },
                totalCount: {
                    locationName: "totalCount",
                    type: "long"
                },
                totalSizeInBytes: {
                    locationName: "totalSizeInBytes",
                    type: "long"
                }
            }
        },
        S4q: {
            type: "structure",
            members: {
                s3Destination: {
                    locationName: "s3Destination",
                    type: "structure",
                    members: {
                        bucketName: {
                            locationName: "bucketName"
                        },
                        keyPrefix: {
                            locationName: "keyPrefix"
                        },
                        kmsKeyArn: {
                            locationName: "kmsKeyArn"
                        }
                    },
                    required: [ "bucketName", "kmsKeyArn" ]
                }
            }
        },
        S4x: {
            type: "list",
            member: {}
        },
        S59: {
            type: "structure",
            members: {
                attributeName: {
                    locationName: "attributeName"
                },
                orderBy: {
                    locationName: "orderBy"
                }
            }
        },
        S5k: {
            type: "structure",
            members: {
                cells: {
                    locationName: "cells",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            cellReference: {
                                locationName: "cellReference"
                            },
                            column: {
                                locationName: "column",
                                type: "long"
                            },
                            columnName: {
                                locationName: "columnName"
                            },
                            row: {
                                locationName: "row",
                                type: "long"
                            }
                        }
                    }
                },
                lineRanges: {
                    shape: "S5n",
                    locationName: "lineRanges"
                },
                offsetRanges: {
                    shape: "S5n",
                    locationName: "offsetRanges"
                },
                pages: {
                    locationName: "pages",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            lineRange: {
                                shape: "S5o",
                                locationName: "lineRange"
                            },
                            offsetRange: {
                                shape: "S5o",
                                locationName: "offsetRange"
                            },
                            pageNumber: {
                                locationName: "pageNumber",
                                type: "long"
                            }
                        }
                    }
                },
                records: {
                    locationName: "records",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            jsonPath: {
                                locationName: "jsonPath"
                            },
                            recordIndex: {
                                locationName: "recordIndex",
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S5n: {
            type: "list",
            member: {
                shape: "S5o"
            }
        },
        S5o: {
            type: "structure",
            members: {
                end: {
                    locationName: "end",
                    type: "long"
                },
                start: {
                    locationName: "start",
                    type: "long"
                },
                startColumn: {
                    locationName: "startColumn",
                    type: "long"
                }
            }
        },
        S6c: {
            type: "structure",
            members: {
                attributes: {
                    locationName: "attributes",
                    type: "structure",
                    members: {
                        creationDate: {
                            shape: "S9",
                            locationName: "creationDate"
                        },
                        mfaAuthenticated: {
                            locationName: "mfaAuthenticated",
                            type: "boolean"
                        }
                    }
                },
                sessionIssuer: {
                    locationName: "sessionIssuer",
                    type: "structure",
                    members: {
                        accountId: {
                            locationName: "accountId"
                        },
                        arn: {
                            locationName: "arn"
                        },
                        principalId: {
                            locationName: "principalId"
                        },
                        type: {
                            locationName: "type"
                        },
                        userName: {
                            locationName: "userName"
                        }
                    }
                }
            }
        },
        S6n: {
            type: "structure",
            members: {
                encryptionType: {
                    locationName: "encryptionType"
                },
                kmsMasterKeyId: {
                    locationName: "kmsMasterKeyId"
                }
            }
        },
        S6q: {
            type: "list",
            member: {
                shape: "S3a"
            }
        },
        S6z: {
            type: "structure",
            members: {
                publishClassificationFindings: {
                    locationName: "publishClassificationFindings",
                    type: "boolean"
                },
                publishPolicyFindings: {
                    locationName: "publishPolicyFindings",
                    type: "boolean"
                }
            },
            required: [ "publishPolicyFindings", "publishClassificationFindings" ]
        },
        S7d: {
            type: "structure",
            members: {
                kmsKeyId: {
                    locationName: "kmsKeyId"
                },
                status: {
                    locationName: "status"
                }
            },
            required: [ "status" ]
        },
        S7g: {
            type: "structure",
            members: {
                externalId: {
                    locationName: "externalId"
                },
                retrievalMode: {
                    locationName: "retrievalMode"
                },
                roleName: {
                    locationName: "roleName"
                }
            },
            required: [ "retrievalMode" ]
        },
        S7x: {
            type: "structure",
            members: {
                managedDataIdentifierIds: {
                    shape: "S5",
                    locationName: "managedDataIdentifierIds"
                }
            }
        },
        S7y: {
            type: "structure",
            members: {
                allowListIds: {
                    shape: "S5",
                    locationName: "allowListIds"
                },
                customDataIdentifierIds: {
                    shape: "S5",
                    locationName: "customDataIdentifierIds"
                },
                managedDataIdentifierIds: {
                    shape: "S5",
                    locationName: "managedDataIdentifierIds"
                }
            }
        },
        S8r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    comparator: {
                        locationName: "comparator"
                    },
                    key: {
                        locationName: "key"
                    },
                    values: {
                        shape: "S5",
                        locationName: "values"
                    }
                }
            }
        },
        Saf: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleCriterion: {
                                locationName: "simpleCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagCriterion: {
                                locationName: "tagCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeBuckets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "buckets"
        },
        GetUsageStatistics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "records"
        },
        ListClassificationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListClassificationScopes: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "classificationScopes"
        },
        ListCustomDataIdentifiers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingIds"
        },
        ListFindingsFilters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingsFilterListItems"
        },
        ListInvitations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "invitations"
        },
        ListMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListOrganizationAdminAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "adminAccounts"
        },
        SearchResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "matchingResources"
        },
        ListAllowLists: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "allowLists"
        },
        ListManagedDataIdentifiers: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "items"
        },
        ListResourceProfileDetections: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "detections"
        },
        ListSensitivityInspectionTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sensitivityInspectionTemplates"
        },
        ListResourceProfileArtifacts: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "artifacts"
        }
    },
    waiters: {
        FindingRevealed: {
            description: "Wait until the sensitive data occurrences are ready.",
            delay: 2,
            maxAttempts: 60,
            operation: "GetSensitiveDataOccurrences",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "SUCCESS"
            }, {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "ERROR"
            } ]
        }
    }
};

AWS.apiLoader.services["codeartifact"] = {};

AWS.CodeArtifact = AWS.Service.defineService("codeartifact", [ "2018-09-22" ]);

AWS.apiLoader.services["codeartifact"]["2018-09-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-22",
        endpointPrefix: "codeartifact",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "CodeArtifact",
        serviceId: "codeartifact",
        signatureVersion: "v4",
        signingName: "codeartifact",
        uid: "codeartifact-2018-09-22"
    },
    operations: {
        AssociateExternalConnection: {
            http: {
                requestUri: "/v1/repository/external-connection"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "externalConnection" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    externalConnection: {
                        location: "querystring",
                        locationName: "external-connection"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        CopyPackageVersions: {
            http: {
                requestUri: "/v1/package/versions/copy"
            },
            input: {
                type: "structure",
                required: [ "domain", "sourceRepository", "destinationRepository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    sourceRepository: {
                        location: "querystring",
                        locationName: "source-repository"
                    },
                    destinationRepository: {
                        location: "querystring",
                        locationName: "destination-repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sk"
                    },
                    versionRevisions: {
                        shape: "Sm"
                    },
                    allowOverwrite: {
                        type: "boolean"
                    },
                    includeFromUpstream: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sq"
                    },
                    failedVersions: {
                        shape: "Su"
                    }
                }
            }
        },
        CreateDomain: {
            http: {
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    encryptionKey: {},
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateRepository: {
            http: {
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    description: {},
                    upstreams: {
                        shape: "S19"
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S14"
                    }
                }
            }
        },
        DeleteDomainPermissionsPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    policyRevision: {
                        location: "querystring",
                        locationName: "policy-revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/v1/package"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deletedPackage: {
                        shape: "S1l"
                    }
                }
            }
        },
        DeletePackageVersions: {
            http: {
                requestUri: "/v1/package/versions/delete"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sk"
                    },
                    expectedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sq"
                    },
                    failedVersions: {
                        shape: "Su"
                    }
                }
            }
        },
        DeleteRepository: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteRepositoryPermissionsPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository/permissions/policies"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    policyRevision: {
                        location: "querystring",
                        locationName: "policy-revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        DescribeDomain: {
            http: {
                method: "GET",
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S14"
                    }
                }
            }
        },
        DescribePackage: {
            http: {
                method: "GET",
                requestUri: "/v1/package"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "package" ],
                members: {
                    package: {
                        type: "structure",
                        members: {
                            format: {},
                            namespace: {},
                            name: {},
                            originConfiguration: {
                                shape: "S1m"
                            }
                        }
                    }
                }
            }
        },
        DescribePackageVersion: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "packageVersion" ],
                members: {
                    packageVersion: {
                        type: "structure",
                        members: {
                            format: {},
                            namespace: {},
                            packageName: {},
                            displayName: {},
                            version: {},
                            summary: {},
                            homePage: {},
                            sourceCodeRepository: {},
                            publishedTime: {
                                type: "timestamp"
                            },
                            licenses: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        url: {}
                                    }
                                }
                            },
                            revision: {},
                            status: {},
                            origin: {
                                shape: "S27"
                            }
                        }
                    }
                }
            }
        },
        DescribeRepository: {
            http: {
                method: "GET",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DisassociateExternalConnection: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository/external-connection"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "externalConnection" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    externalConnection: {
                        location: "querystring",
                        locationName: "external-connection"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DisposePackageVersions: {
            http: {
                requestUri: "/v1/package/versions/dispose"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sk"
                    },
                    versionRevisions: {
                        shape: "Sm"
                    },
                    expectedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sq"
                    },
                    failedVersions: {
                        shape: "Su"
                    }
                }
            }
        },
        GetAuthorizationToken: {
            http: {
                requestUri: "/v1/authorization-token"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    durationSeconds: {
                        location: "querystring",
                        locationName: "duration",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizationToken: {},
                    expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetDomainPermissionsPolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetPackageVersionAsset: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version/asset"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion", "asset" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    asset: {
                        location: "querystring",
                        locationName: "asset"
                    },
                    packageVersionRevision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    asset: {
                        shape: "S2o"
                    },
                    assetName: {
                        location: "header",
                        locationName: "X-AssetName"
                    },
                    packageVersion: {
                        location: "header",
                        locationName: "X-PackageVersion"
                    },
                    packageVersionRevision: {
                        location: "header",
                        locationName: "X-PackageVersionRevision"
                    }
                },
                payload: "asset"
            }
        },
        GetPackageVersionReadme: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version/readme"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    readme: {}
                }
            }
        },
        GetRepositoryEndpoint: {
            http: {
                method: "GET",
                requestUri: "/v1/repository/endpoint"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryEndpoint: {}
                }
            }
        },
        GetRepositoryPermissionsPolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/repository/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListDomains: {
            http: {
                requestUri: "/v1/domains"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                owner: {},
                                arn: {},
                                status: {},
                                createdTime: {
                                    type: "timestamp"
                                },
                                encryptionKey: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPackageVersionAssets: {
            http: {
                requestUri: "/v1/package/version/assets"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    nextToken: {},
                    assets: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    }
                }
            }
        },
        ListPackageVersionDependencies: {
            http: {
                requestUri: "/v1/package/version/dependencies"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    nextToken: {},
                    dependencies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                namespace: {},
                                package: {},
                                dependencyType: {},
                                versionRequirement: {}
                            }
                        }
                    }
                }
            }
        },
        ListPackageVersions: {
            http: {
                requestUri: "/v1/package/versions"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    originType: {
                        location: "querystring",
                        locationName: "originType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    defaultDisplayVersion: {},
                    format: {},
                    namespace: {},
                    package: {},
                    versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "version", "status" ],
                            members: {
                                version: {},
                                revision: {},
                                status: {},
                                origin: {
                                    shape: "S27"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPackages: {
            http: {
                requestUri: "/v1/packages"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    packagePrefix: {
                        location: "querystring",
                        locationName: "package-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    publish: {
                        location: "querystring",
                        locationName: "publish"
                    },
                    upstream: {
                        location: "querystring",
                        locationName: "upstream"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packages: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositories: {
            http: {
                requestUri: "/v1/repositories"
            },
            input: {
                type: "structure",
                members: {
                    repositoryPrefix: {
                        location: "querystring",
                        locationName: "repository-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        shape: "S3r"
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositoriesInDomain: {
            http: {
                requestUri: "/v1/domain/repositories"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    administratorAccount: {
                        location: "querystring",
                        locationName: "administrator-account"
                    },
                    repositoryPrefix: {
                        location: "querystring",
                        locationName: "repository-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        shape: "S3r"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/v1/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sz"
                    }
                }
            }
        },
        PublishPackageVersion: {
            http: {
                requestUri: "/v1/package/version/publish"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion", "assetContent", "assetName", "assetSHA256" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    assetContent: {
                        shape: "S2o"
                    },
                    assetName: {
                        location: "querystring",
                        locationName: "asset"
                    },
                    assetSHA256: {
                        location: "header",
                        locationName: "x-amz-content-sha256"
                    },
                    unfinished: {
                        location: "querystring",
                        locationName: "unfinished",
                        type: "boolean"
                    }
                },
                payload: "assetContent"
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    status: {},
                    asset: {
                        shape: "S35"
                    }
                }
            }
        },
        PutDomainPermissionsPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "policyDocument" ],
                members: {
                    domain: {},
                    domainOwner: {},
                    policyRevision: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        PutPackageOriginConfiguration: {
            http: {
                requestUri: "/v1/package"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "restrictions" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    restrictions: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    originConfiguration: {
                        shape: "S1m"
                    }
                }
            }
        },
        PutRepositoryPermissionsPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/repository/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "policyDocument" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    policyRevision: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tag"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/v1/untag"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePackageVersionsStatus: {
            http: {
                requestUri: "/v1/package/versions/update_status"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions", "targetStatus" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sk"
                    },
                    versionRevisions: {
                        shape: "Sm"
                    },
                    expectedStatus: {},
                    targetStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sq"
                    },
                    failedVersions: {
                        shape: "Su"
                    }
                }
            }
        },
        UpdateRepository: {
            http: {
                method: "PUT",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    description: {},
                    upstreams: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                name: {},
                administratorAccount: {},
                domainName: {},
                domainOwner: {},
                arn: {},
                description: {},
                upstreams: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            repositoryName: {}
                        }
                    }
                },
                externalConnections: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            externalConnectionName: {},
                            packageFormat: {},
                            status: {}
                        }
                    }
                },
                createdTime: {
                    type: "timestamp"
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "map",
            key: {},
            value: {}
        },
        Sq: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    revision: {},
                    status: {}
                }
            }
        },
        Su: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    errorCode: {},
                    errorMessage: {}
                }
            }
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                name: {},
                owner: {},
                arn: {},
                status: {},
                createdTime: {
                    type: "timestamp"
                },
                encryptionKey: {},
                repositoryCount: {
                    type: "integer"
                },
                assetSizeBytes: {
                    type: "long"
                },
                s3BucketArn: {}
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {}
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                resourceArn: {},
                revision: {},
                document: {}
            }
        },
        S1l: {
            type: "structure",
            members: {
                format: {},
                namespace: {},
                package: {},
                originConfiguration: {
                    shape: "S1m"
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                restrictions: {
                    shape: "S1n"
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "publish", "upstream" ],
            members: {
                publish: {},
                upstream: {}
            }
        },
        S27: {
            type: "structure",
            members: {
                domainEntryPoint: {
                    type: "structure",
                    members: {
                        repositoryName: {},
                        externalConnectionName: {}
                    }
                },
                originType: {}
            }
        },
        S2o: {
            type: "blob",
            streaming: true
        },
        S35: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                size: {
                    type: "long"
                },
                hashes: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S3r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    administratorAccount: {},
                    domainName: {},
                    domainOwner: {},
                    arn: {},
                    description: {},
                    createdTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    paginators: {
        ListDomains: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "domains"
        },
        ListPackageVersionAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assets"
        },
        ListPackageVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "versions"
        },
        ListPackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "packages"
        },
        ListRepositories: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "repositories"
        },
        ListRepositoriesInDomain: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "repositories"
        }
    }
};

AWS.apiLoader.services["honeycode"] = {};

AWS.Honeycode = AWS.Service.defineService("honeycode", [ "2020-03-01" ]);

AWS.apiLoader.services["honeycode"]["2020-03-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-03-01",
        endpointPrefix: "honeycode",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Honeycode",
        serviceFullName: "Amazon Honeycode",
        serviceId: "Honeycode",
        signatureVersion: "v4",
        signingName: "honeycode",
        uid: "honeycode-2020-03-01"
    },
    operations: {
        BatchCreateTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchcreate"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToCreate" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToCreate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "batchItemId", "cellsToCreate" ],
                            members: {
                                batchItemId: {},
                                cellsToCreate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor", "createdRows" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    createdRows: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    failedBatchItems: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchDeleteTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchdelete"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowIds" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowIds: {
                        shape: "Sj"
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchUpdateTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchupdate"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToUpdate" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToUpdate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "rowId", "cellsToUpdate" ],
                            members: {
                                rowId: {},
                                cellsToUpdate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchUpsertTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchupsert"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToUpsert" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToUpsert: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "batchItemId", "filter", "cellsToUpdate" ],
                            members: {
                                batchItemId: {},
                                filter: {
                                    shape: "Ss"
                                },
                                cellsToUpdate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "rows", "workbookCursor" ],
                members: {
                    rows: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "rowIds", "upsertAction" ],
                            members: {
                                rowIds: {
                                    shape: "Sj"
                                },
                                upsertAction: {}
                            }
                        }
                    },
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Sf"
                    }
                }
            }
        },
        DescribeTableDataImportJob: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/import/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "jobId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobStatus", "message", "jobMetadata" ],
                members: {
                    jobStatus: {},
                    message: {},
                    jobMetadata: {
                        type: "structure",
                        required: [ "submitter", "submitTime", "importOptions", "dataSource" ],
                        members: {
                            submitter: {
                                type: "structure",
                                members: {
                                    email: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    userArn: {}
                                }
                            },
                            submitTime: {
                                type: "timestamp"
                            },
                            importOptions: {
                                shape: "S18"
                            },
                            dataSource: {
                                shape: "S1i"
                            }
                        }
                    },
                    errorCode: {}
                }
            }
        },
        GetScreenData: {
            http: {
                requestUri: "/screendata"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "appId", "screenId" ],
                members: {
                    workbookId: {},
                    appId: {},
                    screenId: {},
                    variables: {
                        shape: "S1n"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "results", "workbookCursor" ],
                members: {
                    results: {
                        type: "map",
                        key: {
                            shape: "S1v"
                        },
                        value: {
                            type: "structure",
                            required: [ "headers", "rows" ],
                            members: {
                                headers: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "format" ],
                                        members: {
                                            name: {
                                                shape: "S1v"
                                            },
                                            format: {}
                                        }
                                    }
                                },
                                rows: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "dataItems" ],
                                        members: {
                                            rowId: {},
                                            dataItems: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        overrideFormat: {},
                                                        rawValue: {},
                                                        formattedValue: {}
                                                    },
                                                    sensitive: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    workbookCursor: {
                        type: "long"
                    },
                    nextToken: {}
                }
            }
        },
        InvokeScreenAutomation: {
            http: {
                requestUri: "/workbooks/{workbookId}/apps/{appId}/screens/{screenId}/automations/{automationId}"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "appId", "screenId", "screenAutomationId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    screenId: {
                        location: "uri",
                        locationName: "screenId"
                    },
                    screenAutomationId: {
                        location: "uri",
                        locationName: "automationId"
                    },
                    variables: {
                        shape: "S1n"
                    },
                    rowId: {},
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTableColumns: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/columns"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tableColumns" ],
                members: {
                    tableColumns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tableColumnId: {},
                                tableColumnName: {},
                                format: {}
                            }
                        }
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/list"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowIds: {
                        shape: "Sj"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "columnIds", "rows", "workbookCursor" ],
                members: {
                    columnIds: {
                        shape: "S2e"
                    },
                    rows: {
                        shape: "S2f"
                    },
                    rowIdsNotFound: {
                        shape: "Sj"
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTables: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables"
            },
            input: {
                type: "structure",
                required: [ "workbookId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tables" ],
                members: {
                    tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tableId: {},
                                tableName: {}
                            }
                        }
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2s"
                    }
                }
            }
        },
        QueryTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/query"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "filterFormula" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    filterFormula: {
                        shape: "Ss"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "columnIds", "rows", "workbookCursor" ],
                members: {
                    columnIds: {
                        shape: "S2e"
                    },
                    rows: {
                        shape: "S2f"
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        StartTableDataImportJob: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/import"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "dataSource", "dataFormat", "destinationTableId", "importOptions", "clientRequestToken" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    dataSource: {
                        shape: "S1i"
                    },
                    dataFormat: {},
                    destinationTableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    importOptions: {
                        shape: "S18"
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "jobId", "jobStatus" ],
                members: {
                    jobId: {},
                    jobStatus: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    fact: {
                        shape: "S8"
                    },
                    facts: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    }
                }
            }
        },
        S8: {
            type: "string",
            sensitive: true
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "errorMessage" ],
                members: {
                    id: {},
                    errorMessage: {}
                }
            }
        },
        Sj: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "structure",
            required: [ "formula" ],
            members: {
                formula: {
                    shape: "St"
                },
                contextRowId: {}
            }
        },
        St: {
            type: "string",
            sensitive: true
        },
        S18: {
            type: "structure",
            members: {
                destinationOptions: {
                    type: "structure",
                    members: {
                        columnMap: {
                            type: "map",
                            key: {},
                            value: {
                                type: "structure",
                                members: {
                                    columnIndex: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                delimitedTextOptions: {
                    type: "structure",
                    required: [ "delimiter" ],
                    members: {
                        delimiter: {},
                        hasHeaderRow: {
                            type: "boolean"
                        },
                        ignoreEmptyRows: {
                            type: "boolean"
                        },
                        dataCharacterEncoding: {}
                    }
                }
            }
        },
        S1i: {
            type: "structure",
            required: [ "dataSourceConfig" ],
            members: {
                dataSourceConfig: {
                    type: "structure",
                    members: {
                        dataSourceUrl: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        S1n: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "structure",
                required: [ "rawValue" ],
                members: {
                    rawValue: {}
                },
                sensitive: true
            },
            sensitive: true
        },
        S1v: {
            type: "string",
            sensitive: true
        },
        S2e: {
            type: "list",
            member: {}
        },
        S2f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "rowId", "cells" ],
                members: {
                    rowId: {},
                    cells: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                formula: {
                                    shape: "St"
                                },
                                format: {},
                                rawValue: {},
                                formattedValue: {},
                                formattedValues: {
                                    type: "list",
                                    member: {}
                                }
                            },
                            sensitive: true
                        }
                    }
                }
            }
        },
        S2s: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListTableColumns: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "tableColumns"
        },
        ListTableRows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "rows"
        },
        ListTables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tables"
        },
        QueryTableRows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "rows"
        }
    }
};

AWS.apiLoader.services["ivs"] = {};

AWS.IVS = AWS.Service.defineService("ivs", [ "2020-07-14" ]);

AWS.apiLoader.services["ivs"]["2020-07-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-14",
        endpointPrefix: "ivs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon IVS",
        serviceFullName: "Amazon Interactive Video Service",
        serviceId: "ivs",
        signatureVersion: "v4",
        signingName: "ivs",
        uid: "ivs-2020-07-14"
    },
    operations: {
        BatchGetChannel: {
            http: {
                requestUri: "/BatchGetChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arns" ],
                members: {
                    arns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channels: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    errors: {
                        shape: "Sj"
                    }
                }
            }
        },
        BatchGetStreamKey: {
            http: {
                requestUri: "/BatchGetStreamKey",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arns" ],
                members: {
                    arns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        shape: "Sj"
                    },
                    streamKeys: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    }
                }
            }
        },
        BatchStartViewerSessionRevocation: {
            http: {
                requestUri: "/BatchStartViewerSessionRevocation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "viewerSessions" ],
                members: {
                    viewerSessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "channelArn", "viewerId" ],
                            members: {
                                channelArn: {},
                                viewerId: {},
                                viewerSessionVersionsLessThanOrEqualTo: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "channelArn", "viewerId" ],
                            members: {
                                channelArn: {},
                                code: {},
                                message: {},
                                viewerId: {}
                            }
                        }
                    }
                }
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/CreateChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    authorized: {
                        type: "boolean"
                    },
                    insecureIngest: {
                        type: "boolean"
                    },
                    latencyMode: {},
                    name: {},
                    preset: {},
                    recordingConfigurationArn: {},
                    tags: {
                        shape: "Sf"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    },
                    streamKey: {
                        shape: "St"
                    }
                }
            }
        },
        CreateRecordingConfiguration: {
            http: {
                requestUri: "/CreateRecordingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "destinationConfiguration" ],
                members: {
                    destinationConfiguration: {
                        shape: "S17"
                    },
                    name: {},
                    recordingReconnectWindowSeconds: {
                        type: "integer"
                    },
                    renditionConfiguration: {
                        shape: "S1c"
                    },
                    tags: {
                        shape: "Sf"
                    },
                    thumbnailConfiguration: {
                        shape: "S1g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recordingConfiguration: {
                        shape: "S1n"
                    }
                }
            }
        },
        CreateStreamKey: {
            http: {
                requestUri: "/CreateStreamKey",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamKey: {
                        shape: "St"
                    }
                }
            }
        },
        DeleteChannel: {
            http: {
                requestUri: "/DeleteChannel",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DeletePlaybackKeyPair: {
            http: {
                requestUri: "/DeletePlaybackKeyPair",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRecordingConfiguration: {
            http: {
                requestUri: "/DeleteRecordingConfiguration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DeleteStreamKey: {
            http: {
                requestUri: "/DeleteStreamKey",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        GetChannel: {
            http: {
                requestUri: "/GetChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    }
                }
            }
        },
        GetPlaybackKeyPair: {
            http: {
                requestUri: "/GetPlaybackKeyPair",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S22"
                    }
                }
            }
        },
        GetRecordingConfiguration: {
            http: {
                requestUri: "/GetRecordingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recordingConfiguration: {
                        shape: "S1n"
                    }
                }
            }
        },
        GetStream: {
            http: {
                requestUri: "/GetStream",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stream: {
                        type: "structure",
                        members: {
                            channelArn: {},
                            health: {},
                            playbackUrl: {},
                            startTime: {
                                shape: "S2b"
                            },
                            state: {},
                            streamId: {},
                            viewerCount: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetStreamKey: {
            http: {
                requestUri: "/GetStreamKey",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    streamKey: {
                        shape: "St"
                    }
                }
            }
        },
        GetStreamSession: {
            http: {
                requestUri: "/GetStreamSession",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    streamId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    streamSession: {
                        type: "structure",
                        members: {
                            channel: {
                                shape: "S6"
                            },
                            endTime: {
                                shape: "S2k"
                            },
                            ingestConfiguration: {
                                type: "structure",
                                members: {
                                    audio: {
                                        type: "structure",
                                        members: {
                                            channels: {
                                                type: "long"
                                            },
                                            codec: {},
                                            sampleRate: {
                                                type: "long"
                                            },
                                            targetBitrate: {
                                                type: "long"
                                            }
                                        }
                                    },
                                    video: {
                                        type: "structure",
                                        members: {
                                            avcLevel: {},
                                            avcProfile: {},
                                            codec: {},
                                            encoder: {},
                                            targetBitrate: {
                                                type: "long"
                                            },
                                            targetFramerate: {
                                                type: "long"
                                            },
                                            videoHeight: {
                                                type: "long"
                                            },
                                            videoWidth: {
                                                type: "long"
                                            }
                                        }
                                    }
                                }
                            },
                            recordingConfiguration: {
                                shape: "S1n"
                            },
                            startTime: {
                                shape: "S2k"
                            },
                            streamId: {},
                            truncatedEvents: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        eventTime: {
                                            shape: "S2k"
                                        },
                                        name: {},
                                        type: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ImportPlaybackKeyPair: {
            http: {
                requestUri: "/ImportPlaybackKeyPair",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "publicKeyMaterial" ],
                members: {
                    name: {},
                    publicKeyMaterial: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S22"
                    }
                }
            }
        },
        ListChannels: {
            http: {
                requestUri: "/ListChannels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterByName: {},
                    filterByRecordingConfigurationArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "channels" ],
                members: {
                    channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                authorized: {
                                    type: "boolean"
                                },
                                insecureIngest: {
                                    type: "boolean"
                                },
                                latencyMode: {},
                                name: {},
                                preset: {},
                                recordingConfigurationArn: {},
                                tags: {
                                    shape: "Sf"
                                },
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPlaybackKeyPairs: {
            http: {
                requestUri: "/ListPlaybackKeyPairs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "keyPairs" ],
                members: {
                    keyPairs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                tags: {
                                    shape: "Sf"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecordingConfigurations: {
            http: {
                requestUri: "/ListRecordingConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "recordingConfigurations" ],
                members: {
                    nextToken: {},
                    recordingConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "destinationConfiguration", "state" ],
                            members: {
                                arn: {},
                                destinationConfiguration: {
                                    shape: "S17"
                                },
                                name: {},
                                state: {},
                                tags: {
                                    shape: "Sf"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListStreamKeys: {
            http: {
                requestUri: "/ListStreamKeys",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "streamKeys" ],
                members: {
                    nextToken: {},
                    streamKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                channelArn: {},
                                tags: {
                                    shape: "Sf"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListStreamSessions: {
            http: {
                requestUri: "/ListStreamSessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "streamSessions" ],
                members: {
                    nextToken: {},
                    streamSessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                endTime: {
                                    shape: "S2k"
                                },
                                hasErrorEvent: {
                                    type: "boolean"
                                },
                                startTime: {
                                    shape: "S2k"
                                },
                                streamId: {}
                            }
                        }
                    }
                }
            }
        },
        ListStreams: {
            http: {
                requestUri: "/ListStreams",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterBy: {
                        type: "structure",
                        members: {
                            health: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "streams" ],
                members: {
                    nextToken: {},
                    streams: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                channelArn: {},
                                health: {},
                                startTime: {
                                    shape: "S2b"
                                },
                                state: {},
                                streamId: {},
                                viewerCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        PutMetadata: {
            http: {
                requestUri: "/PutMetadata",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "channelArn", "metadata" ],
                members: {
                    channelArn: {},
                    metadata: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        StartViewerSessionRevocation: {
            http: {
                requestUri: "/StartViewerSessionRevocation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn", "viewerId" ],
                members: {
                    channelArn: {},
                    viewerId: {},
                    viewerSessionVersionsLessThanOrEqualTo: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopStream: {
            http: {
                requestUri: "/StopStream",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateChannel: {
            http: {
                requestUri: "/UpdateChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    authorized: {
                        type: "boolean"
                    },
                    insecureIngest: {
                        type: "boolean"
                    },
                    latencyMode: {},
                    name: {},
                    preset: {},
                    recordingConfigurationArn: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                arn: {},
                authorized: {
                    type: "boolean"
                },
                ingestEndpoint: {},
                insecureIngest: {
                    type: "boolean"
                },
                latencyMode: {},
                name: {},
                playbackUrl: {},
                preset: {},
                recordingConfigurationArn: {},
                tags: {
                    shape: "Sf"
                },
                type: {}
            }
        },
        Sf: {
            type: "map",
            key: {},
            value: {}
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    code: {},
                    message: {}
                }
            }
        },
        St: {
            type: "structure",
            members: {
                arn: {},
                channelArn: {},
                tags: {
                    shape: "Sf"
                },
                value: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    required: [ "bucketName" ],
                    members: {
                        bucketName: {}
                    }
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                renditionSelection: {},
                renditions: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                recordingMode: {},
                resolution: {},
                storage: {
                    type: "list",
                    member: {}
                },
                targetIntervalSeconds: {
                    type: "long"
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "arn", "destinationConfiguration", "state" ],
            members: {
                arn: {},
                destinationConfiguration: {
                    shape: "S17"
                },
                name: {},
                recordingReconnectWindowSeconds: {
                    type: "integer"
                },
                renditionConfiguration: {
                    shape: "S1c"
                },
                state: {},
                tags: {
                    shape: "Sf"
                },
                thumbnailConfiguration: {
                    shape: "S1g"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                arn: {},
                fingerprint: {},
                name: {},
                tags: {
                    shape: "Sf"
                }
            }
        },
        S2b: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S2k: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListChannels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPlaybackKeyPairs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListRecordingConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStreamKeys: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStreamSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStreams: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["braket"] = {};

AWS.Braket = AWS.Service.defineService("braket", [ "2019-09-01" ]);

AWS.apiLoader.services["braket"]["2019-09-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-09-01",
        endpointPrefix: "braket",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Braket",
        serviceId: "Braket",
        signatureVersion: "v4",
        signingName: "braket",
        uid: "braket-2019-09-01"
    },
    operations: {
        CancelJob: {
            http: {
                method: "PUT",
                requestUri: "/job/{jobArn}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobArn" ],
                members: {
                    jobArn: {
                        location: "uri",
                        locationName: "jobArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cancellationStatus", "jobArn" ],
                members: {
                    cancellationStatus: {},
                    jobArn: {}
                }
            },
            idempotent: true
        },
        CancelQuantumTask: {
            http: {
                method: "PUT",
                requestUri: "/quantum-task/{quantumTaskArn}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken", "quantumTaskArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    quantumTaskArn: {
                        location: "uri",
                        locationName: "quantumTaskArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cancellationStatus", "quantumTaskArn" ],
                members: {
                    cancellationStatus: {},
                    quantumTaskArn: {}
                }
            },
            idempotent: true
        },
        CreateJob: {
            http: {
                requestUri: "/job",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "algorithmSpecification", "clientToken", "deviceConfig", "instanceConfig", "jobName", "outputDataConfig", "roleArn" ],
                members: {
                    algorithmSpecification: {
                        shape: "Sa"
                    },
                    associations: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    checkpointConfig: {
                        shape: "Sl"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    deviceConfig: {
                        shape: "Sn"
                    },
                    hyperParameters: {
                        shape: "Sp"
                    },
                    inputDataConfig: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    instanceConfig: {
                        shape: "Sw"
                    },
                    jobName: {},
                    outputDataConfig: {
                        shape: "S11"
                    },
                    roleArn: {},
                    stoppingCondition: {
                        shape: "S14"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobArn" ],
                members: {
                    jobArn: {}
                }
            }
        },
        CreateQuantumTask: {
            http: {
                requestUri: "/quantum-task",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "action", "clientToken", "deviceArn", "outputS3Bucket", "outputS3KeyPrefix", "shots" ],
                members: {
                    action: {
                        jsonvalue: true
                    },
                    associations: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    deviceArn: {},
                    deviceParameters: {
                        jsonvalue: true
                    },
                    jobToken: {},
                    outputS3Bucket: {},
                    outputS3KeyPrefix: {},
                    shots: {
                        type: "long"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "quantumTaskArn" ],
                members: {
                    quantumTaskArn: {}
                }
            }
        },
        GetDevice: {
            http: {
                method: "GET",
                requestUri: "/device/{deviceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceArn" ],
                members: {
                    deviceArn: {
                        location: "uri",
                        locationName: "deviceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "deviceArn", "deviceCapabilities", "deviceName", "deviceStatus", "deviceType", "providerName" ],
                members: {
                    deviceArn: {},
                    deviceCapabilities: {
                        jsonvalue: true
                    },
                    deviceName: {},
                    deviceQueueInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "queue", "queueSize" ],
                            members: {
                                queue: {},
                                queuePriority: {},
                                queueSize: {}
                            }
                        }
                    },
                    deviceStatus: {},
                    deviceType: {},
                    providerName: {}
                }
            }
        },
        GetJob: {
            http: {
                method: "GET",
                requestUri: "/job/{jobArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobArn" ],
                members: {
                    additionalAttributeNames: {
                        location: "querystring",
                        locationName: "additionalAttributeNames",
                        type: "list",
                        member: {}
                    },
                    jobArn: {
                        location: "uri",
                        locationName: "jobArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "algorithmSpecification", "createdAt", "instanceConfig", "jobArn", "jobName", "outputDataConfig", "roleArn", "status" ],
                members: {
                    algorithmSpecification: {
                        shape: "Sa"
                    },
                    associations: {
                        shape: "S1u"
                    },
                    billableDuration: {
                        type: "integer"
                    },
                    checkpointConfig: {
                        shape: "Sl"
                    },
                    createdAt: {
                        shape: "S1w"
                    },
                    deviceConfig: {
                        shape: "Sn"
                    },
                    endedAt: {
                        shape: "S1w"
                    },
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                eventType: {},
                                message: {},
                                timeOfEvent: {
                                    shape: "S1w"
                                }
                            }
                        }
                    },
                    failureReason: {},
                    hyperParameters: {
                        shape: "Sp"
                    },
                    inputDataConfig: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    instanceConfig: {
                        shape: "Sw"
                    },
                    jobArn: {},
                    jobName: {},
                    outputDataConfig: {
                        shape: "S11"
                    },
                    queueInfo: {
                        type: "structure",
                        required: [ "position", "queue" ],
                        members: {
                            message: {},
                            position: {},
                            queue: {}
                        }
                    },
                    roleArn: {},
                    startedAt: {
                        shape: "S1w"
                    },
                    status: {},
                    stoppingCondition: {
                        shape: "S14"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        GetQuantumTask: {
            http: {
                method: "GET",
                requestUri: "/quantum-task/{quantumTaskArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "quantumTaskArn" ],
                members: {
                    additionalAttributeNames: {
                        location: "querystring",
                        locationName: "additionalAttributeNames",
                        type: "list",
                        member: {}
                    },
                    quantumTaskArn: {
                        location: "uri",
                        locationName: "quantumTaskArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "deviceArn", "deviceParameters", "outputS3Bucket", "outputS3Directory", "quantumTaskArn", "shots", "status" ],
                members: {
                    associations: {
                        shape: "S1u"
                    },
                    createdAt: {
                        shape: "S1w"
                    },
                    deviceArn: {},
                    deviceParameters: {
                        jsonvalue: true
                    },
                    endedAt: {
                        shape: "S1w"
                    },
                    failureReason: {},
                    jobArn: {},
                    outputS3Bucket: {},
                    outputS3Directory: {},
                    quantumTaskArn: {},
                    queueInfo: {
                        type: "structure",
                        required: [ "position", "queue" ],
                        members: {
                            message: {},
                            position: {},
                            queue: {},
                            queuePriority: {}
                        }
                    },
                    shots: {
                        type: "long"
                    },
                    status: {},
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        SearchDevices: {
            http: {
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values" ],
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "devices" ],
                members: {
                    devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "deviceArn", "deviceName", "deviceStatus", "deviceType", "providerName" ],
                            members: {
                                deviceArn: {},
                                deviceName: {},
                                deviceStatus: {},
                                deviceType: {},
                                providerName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchJobs: {
            http: {
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "operator", "values" ],
                            members: {
                                name: {},
                                operator: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "jobs" ],
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "device", "jobArn", "jobName", "status" ],
                            members: {
                                createdAt: {
                                    shape: "S1w"
                                },
                                device: {},
                                endedAt: {
                                    shape: "S1w"
                                },
                                jobArn: {},
                                jobName: {},
                                startedAt: {
                                    shape: "S1w"
                                },
                                status: {},
                                tags: {
                                    shape: "S16"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchQuantumTasks: {
            http: {
                requestUri: "/quantum-tasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "operator", "values" ],
                            members: {
                                name: {},
                                operator: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "quantumTasks" ],
                members: {
                    nextToken: {},
                    quantumTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "deviceArn", "outputS3Bucket", "outputS3Directory", "quantumTaskArn", "shots", "status" ],
                            members: {
                                createdAt: {
                                    shape: "S1w"
                                },
                                deviceArn: {},
                                endedAt: {
                                    shape: "S1w"
                                },
                                outputS3Bucket: {},
                                outputS3Directory: {},
                                quantumTaskArn: {},
                                shots: {
                                    type: "long"
                                },
                                status: {},
                                tags: {
                                    shape: "S16"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                containerImage: {
                    type: "structure",
                    required: [ "uri" ],
                    members: {
                        uri: {}
                    }
                },
                scriptModeConfig: {
                    type: "structure",
                    required: [ "entryPoint", "s3Uri" ],
                    members: {
                        compressionType: {},
                        entryPoint: {},
                        s3Uri: {}
                    }
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "arn", "type" ],
            members: {
                arn: {},
                type: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "s3Uri" ],
            members: {
                localPath: {},
                s3Uri: {}
            }
        },
        Sn: {
            type: "structure",
            required: [ "device" ],
            members: {
                device: {}
            }
        },
        Sp: {
            type: "map",
            key: {},
            value: {}
        },
        Ss: {
            type: "structure",
            required: [ "channelName", "dataSource" ],
            members: {
                channelName: {},
                contentType: {},
                dataSource: {
                    type: "structure",
                    required: [ "s3DataSource" ],
                    members: {
                        s3DataSource: {
                            type: "structure",
                            required: [ "s3Uri" ],
                            members: {
                                s3Uri: {}
                            }
                        }
                    }
                }
            }
        },
        Sw: {
            type: "structure",
            required: [ "instanceType", "volumeSizeInGb" ],
            members: {
                instanceCount: {
                    type: "integer"
                },
                instanceType: {},
                volumeSizeInGb: {
                    type: "integer"
                }
            }
        },
        S11: {
            type: "structure",
            required: [ "s3Path" ],
            members: {
                kmsKeyId: {},
                s3Path: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                maxRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S1u: {
            type: "list",
            member: {
                shape: "Si"
            }
        },
        S1w: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        SearchDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "devices"
        },
        SearchJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobs"
        },
        SearchQuantumTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "quantumTasks"
        }
    }
};

AWS.apiLoader.services["identitystore"] = {};

AWS.IdentityStore = AWS.Service.defineService("identitystore", [ "2020-06-15" ]);

AWS.apiLoader.services["identitystore"]["2020-06-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-06-15",
        endpointPrefix: "identitystore",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "IdentityStore",
        serviceFullName: "AWS SSO Identity Store",
        serviceId: "identitystore",
        signatureVersion: "v4",
        signingName: "identitystore",
        targetPrefix: "AWSIdentityStore",
        uid: "identitystore-2020-06-15"
    },
    operations: {
        CreateGroup: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    DisplayName: {
                        shape: "S3"
                    },
                    Description: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "GroupId", "IdentityStoreId" ],
                members: {
                    GroupId: {},
                    IdentityStoreId: {}
                }
            }
        },
        CreateGroupMembership: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId", "MemberId" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {},
                    MemberId: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MembershipId", "IdentityStoreId" ],
                members: {
                    MembershipId: {},
                    IdentityStoreId: {}
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    UserName: {
                        shape: "Sb"
                    },
                    Name: {
                        shape: "Sc"
                    },
                    DisplayName: {
                        shape: "S4"
                    },
                    NickName: {
                        shape: "S4"
                    },
                    ProfileUrl: {
                        shape: "S4"
                    },
                    Emails: {
                        shape: "Sd"
                    },
                    Addresses: {
                        shape: "Sg"
                    },
                    PhoneNumbers: {
                        shape: "Si"
                    },
                    UserType: {
                        shape: "S4"
                    },
                    Title: {
                        shape: "S4"
                    },
                    PreferredLanguage: {
                        shape: "S4"
                    },
                    Locale: {
                        shape: "S4"
                    },
                    Timezone: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UserId", "IdentityStoreId" ],
                members: {
                    UserId: {},
                    IdentityStoreId: {}
                }
            }
        },
        DeleteGroup: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteGroupMembership: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "MembershipId" ],
                members: {
                    IdentityStoreId: {},
                    MembershipId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "UserId" ],
                members: {
                    IdentityStoreId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeGroup: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "GroupId", "IdentityStoreId" ],
                members: {
                    GroupId: {},
                    DisplayName: {
                        shape: "S3"
                    },
                    ExternalIds: {
                        shape: "St"
                    },
                    Description: {
                        shape: "S4"
                    },
                    IdentityStoreId: {}
                }
            }
        },
        DescribeGroupMembership: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "MembershipId" ],
                members: {
                    IdentityStoreId: {},
                    MembershipId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityStoreId", "MembershipId", "GroupId", "MemberId" ],
                members: {
                    IdentityStoreId: {},
                    MembershipId: {},
                    GroupId: {},
                    MemberId: {
                        shape: "S8"
                    }
                }
            }
        },
        DescribeUser: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "UserId" ],
                members: {
                    IdentityStoreId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UserId", "IdentityStoreId" ],
                members: {
                    UserName: {
                        shape: "Sb"
                    },
                    UserId: {},
                    ExternalIds: {
                        shape: "St"
                    },
                    Name: {
                        shape: "Sc"
                    },
                    DisplayName: {
                        shape: "S4"
                    },
                    NickName: {
                        shape: "S4"
                    },
                    ProfileUrl: {
                        shape: "S4"
                    },
                    Emails: {
                        shape: "Sd"
                    },
                    Addresses: {
                        shape: "Sg"
                    },
                    PhoneNumbers: {
                        shape: "Si"
                    },
                    UserType: {
                        shape: "S4"
                    },
                    Title: {
                        shape: "S4"
                    },
                    PreferredLanguage: {
                        shape: "S4"
                    },
                    Locale: {
                        shape: "S4"
                    },
                    Timezone: {
                        shape: "S4"
                    },
                    IdentityStoreId: {}
                }
            }
        },
        GetGroupId: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "AlternateIdentifier" ],
                members: {
                    IdentityStoreId: {},
                    AlternateIdentifier: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "GroupId", "IdentityStoreId" ],
                members: {
                    GroupId: {},
                    IdentityStoreId: {}
                }
            }
        },
        GetGroupMembershipId: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId", "MemberId" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {},
                    MemberId: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MembershipId", "IdentityStoreId" ],
                members: {
                    MembershipId: {},
                    IdentityStoreId: {}
                }
            }
        },
        GetUserId: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "AlternateIdentifier" ],
                members: {
                    IdentityStoreId: {},
                    AlternateIdentifier: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UserId", "IdentityStoreId" ],
                members: {
                    UserId: {},
                    IdentityStoreId: {}
                }
            }
        },
        IsMemberInGroups: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "MemberId", "GroupIds" ],
                members: {
                    IdentityStoreId: {},
                    MemberId: {
                        shape: "S8"
                    },
                    GroupIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupId: {},
                                MemberId: {
                                    shape: "S8"
                                },
                                MembershipExists: {
                                    shape: "Sf"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListGroupMemberships: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "GroupMemberships" ],
                members: {
                    GroupMemberships: {
                        shape: "S1k"
                    },
                    NextToken: {}
                }
            }
        },
        ListGroupMembershipsForMember: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "MemberId" ],
                members: {
                    IdentityStoreId: {},
                    MemberId: {
                        shape: "S8"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "GroupMemberships" ],
                members: {
                    GroupMemberships: {
                        shape: "S1k"
                    },
                    NextToken: {}
                }
            }
        },
        ListGroups: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S1p",
                        deprecated: true,
                        deprecatedMessage: "Using filters with ListGroups API is deprecated, please use GetGroupId API instead."
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Groups" ],
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GroupId", "IdentityStoreId" ],
                            members: {
                                GroupId: {},
                                DisplayName: {
                                    shape: "S3"
                                },
                                ExternalIds: {
                                    shape: "St"
                                },
                                Description: {
                                    shape: "S4"
                                },
                                IdentityStoreId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S1p",
                        deprecated: true,
                        deprecatedMessage: "Using filters with ListUsers API is deprecated, please use GetGroupId API instead."
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Users" ],
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserId", "IdentityStoreId" ],
                            members: {
                                UserName: {
                                    shape: "Sb"
                                },
                                UserId: {},
                                ExternalIds: {
                                    shape: "St"
                                },
                                Name: {
                                    shape: "Sc"
                                },
                                DisplayName: {
                                    shape: "S4"
                                },
                                NickName: {
                                    shape: "S4"
                                },
                                ProfileUrl: {
                                    shape: "S4"
                                },
                                Emails: {
                                    shape: "Sd"
                                },
                                Addresses: {
                                    shape: "Sg"
                                },
                                PhoneNumbers: {
                                    shape: "Si"
                                },
                                UserType: {
                                    shape: "S4"
                                },
                                Title: {
                                    shape: "S4"
                                },
                                PreferredLanguage: {
                                    shape: "S4"
                                },
                                Locale: {
                                    shape: "S4"
                                },
                                Timezone: {
                                    shape: "S4"
                                },
                                IdentityStoreId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        UpdateGroup: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId", "Operations" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {},
                    Operations: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateUser: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "UserId", "Operations" ],
                members: {
                    IdentityStoreId: {},
                    UserId: {},
                    Operations: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "structure",
            members: {
                UserId: {}
            },
            union: true
        },
        Sb: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "structure",
            members: {
                Formatted: {
                    shape: "S4"
                },
                FamilyName: {
                    shape: "S4"
                },
                GivenName: {
                    shape: "S4"
                },
                MiddleName: {
                    shape: "S4"
                },
                HonorificPrefix: {
                    shape: "S4"
                },
                HonorificSuffix: {
                    shape: "S4"
                }
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {
                        shape: "S4"
                    },
                    Type: {
                        shape: "S4"
                    },
                    Primary: {
                        shape: "Sf"
                    }
                }
            }
        },
        Sf: {
            type: "boolean",
            sensitive: true
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StreetAddress: {
                        shape: "S4"
                    },
                    Locality: {
                        shape: "S4"
                    },
                    Region: {
                        shape: "S4"
                    },
                    PostalCode: {
                        shape: "S4"
                    },
                    Country: {
                        shape: "S4"
                    },
                    Formatted: {
                        shape: "S4"
                    },
                    Type: {
                        shape: "S4"
                    },
                    Primary: {
                        shape: "Sf"
                    }
                }
            }
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {
                        shape: "S4"
                    },
                    Type: {
                        shape: "S4"
                    },
                    Primary: {
                        shape: "Sf"
                    }
                }
            }
        },
        St: {
            type: "list",
            member: {
                shape: "Su"
            }
        },
        Su: {
            type: "structure",
            required: [ "Issuer", "Id" ],
            members: {
                Issuer: {
                    type: "string",
                    sensitive: true
                },
                Id: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                ExternalId: {
                    shape: "Su"
                },
                UniqueAttribute: {
                    type: "structure",
                    required: [ "AttributePath", "AttributeValue" ],
                    members: {
                        AttributePath: {},
                        AttributeValue: {
                            shape: "S15"
                        }
                    }
                }
            },
            union: true
        },
        S15: {
            type: "structure",
            members: {},
            document: true
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    MembershipId: {},
                    GroupId: {},
                    MemberId: {
                        shape: "S8"
                    }
                }
            }
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AttributePath", "AttributeValue" ],
                members: {
                    AttributePath: {},
                    AttributeValue: {
                        shape: "S4"
                    }
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AttributePath" ],
                members: {
                    AttributePath: {},
                    AttributeValue: {
                        shape: "S15"
                    }
                }
            }
        }
    },
    paginators: {
        ListGroupMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupMemberships"
        },
        ListGroupMembershipsForMember: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupMemberships"
        },
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Groups"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Users"
        }
    }
};

AWS.apiLoader.services["appflow"] = {};

AWS.Appflow = AWS.Service.defineService("appflow", [ "2020-08-23" ]);

AWS.apiLoader.services["appflow"]["2020-08-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-23",
        endpointPrefix: "appflow",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Appflow",
        serviceId: "Appflow",
        signatureVersion: "v4",
        signingName: "appflow",
        uid: "appflow-2020-08-23"
    },
    operations: {
        CancelFlowExecutions: {
            http: {
                requestUri: "/cancel-flow-executions"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    executionIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    invalidExecutions: {
                        shape: "S3"
                    }
                }
            }
        },
        CreateConnectorProfile: {
            http: {
                requestUri: "/create-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName", "connectorType", "connectionMode", "connectorProfileConfig" ],
                members: {
                    connectorProfileName: {},
                    kmsArn: {},
                    connectorType: {},
                    connectorLabel: {},
                    connectionMode: {},
                    connectorProfileConfig: {
                        shape: "Sc"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileArn: {}
                }
            }
        },
        CreateFlow: {
            http: {
                requestUri: "/create-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName", "triggerConfig", "sourceFlowConfig", "destinationFlowConfigList", "tasks" ],
                members: {
                    flowName: {},
                    description: {},
                    kmsArn: {},
                    triggerConfig: {
                        shape: "S3d"
                    },
                    sourceFlowConfig: {
                        shape: "S3n"
                    },
                    destinationFlowConfigList: {
                        shape: "S4n"
                    },
                    tasks: {
                        shape: "S5n"
                    },
                    tags: {
                        shape: "S6d"
                    },
                    metadataCatalogConfig: {
                        shape: "S6g"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {}
                }
            }
        },
        DeleteConnectorProfile: {
            http: {
                requestUri: "/delete-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName" ],
                members: {
                    connectorProfileName: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFlow: {
            http: {
                requestUri: "/delete-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeConnector: {
            http: {
                requestUri: "/describe-connector"
            },
            input: {
                type: "structure",
                required: [ "connectorType" ],
                members: {
                    connectorType: {},
                    connectorLabel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorConfiguration: {
                        shape: "S6u"
                    }
                }
            }
        },
        DescribeConnectorEntity: {
            http: {
                requestUri: "/describe-connector-entity"
            },
            input: {
                type: "structure",
                required: [ "connectorEntityName" ],
                members: {
                    connectorEntityName: {},
                    connectorType: {},
                    connectorProfileName: {},
                    apiVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "connectorEntityFields" ],
                members: {
                    connectorEntityFields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "identifier" ],
                            members: {
                                identifier: {},
                                parentIdentifier: {},
                                label: {},
                                isPrimaryKey: {
                                    type: "boolean"
                                },
                                defaultValue: {},
                                isDeprecated: {
                                    type: "boolean"
                                },
                                supportedFieldTypeDetails: {
                                    type: "structure",
                                    required: [ "v1" ],
                                    members: {
                                        v1: {
                                            type: "structure",
                                            required: [ "fieldType", "filterOperators" ],
                                            members: {
                                                fieldType: {},
                                                filterOperators: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                supportedValues: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                valueRegexPattern: {},
                                                supportedDateFormat: {},
                                                fieldValueRange: {
                                                    shape: "S94"
                                                },
                                                fieldLengthRange: {
                                                    shape: "S94"
                                                }
                                            }
                                        }
                                    }
                                },
                                description: {},
                                sourceProperties: {
                                    type: "structure",
                                    members: {
                                        isRetrievable: {
                                            type: "boolean"
                                        },
                                        isQueryable: {
                                            type: "boolean"
                                        },
                                        isTimestampFieldForIncrementalQueries: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                destinationProperties: {
                                    type: "structure",
                                    members: {
                                        isCreatable: {
                                            type: "boolean"
                                        },
                                        isNullable: {
                                            type: "boolean"
                                        },
                                        isUpsertable: {
                                            type: "boolean"
                                        },
                                        isUpdatable: {
                                            type: "boolean"
                                        },
                                        isDefaultedOnCreate: {
                                            type: "boolean"
                                        },
                                        supportedWriteOperations: {
                                            shape: "S8k"
                                        }
                                    }
                                },
                                customProperties: {
                                    shape: "S4g"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConnectorProfiles: {
            http: {
                requestUri: "/describe-connector-profiles"
            },
            input: {
                type: "structure",
                members: {
                    connectorProfileNames: {
                        type: "list",
                        member: {}
                    },
                    connectorType: {},
                    connectorLabel: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                connectorProfileArn: {},
                                connectorProfileName: {},
                                connectorType: {},
                                connectorLabel: {},
                                connectionMode: {},
                                credentialsArn: {},
                                connectorProfileProperties: {
                                    shape: "Sd"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                privateConnectionProvisioningState: {
                                    type: "structure",
                                    members: {
                                        status: {},
                                        failureMessage: {},
                                        failureCause: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeConnectors: {
            http: {
                requestUri: "/describe-connectors"
            },
            input: {
                type: "structure",
                members: {
                    connectorTypes: {
                        shape: "S6v"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorConfigurations: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S6u"
                        }
                    },
                    connectors: {
                        shape: "S9m"
                    },
                    nextToken: {}
                }
            }
        },
        DescribeFlow: {
            http: {
                requestUri: "/describe-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    description: {},
                    flowName: {},
                    kmsArn: {},
                    flowStatus: {},
                    flowStatusMessage: {},
                    sourceFlowConfig: {
                        shape: "S3n"
                    },
                    destinationFlowConfigList: {
                        shape: "S4n"
                    },
                    lastRunExecutionDetails: {
                        shape: "S9s"
                    },
                    triggerConfig: {
                        shape: "S3d"
                    },
                    tasks: {
                        shape: "S5n"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    lastUpdatedBy: {},
                    tags: {
                        shape: "S6d"
                    },
                    metadataCatalogConfig: {
                        shape: "S6g"
                    },
                    lastRunMetadataCatalogDetails: {
                        shape: "S9x"
                    },
                    schemaVersion: {
                        type: "long"
                    }
                }
            }
        },
        DescribeFlowExecutionRecords: {
            http: {
                requestUri: "/describe-flow-execution-records"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                executionId: {},
                                executionStatus: {},
                                executionResult: {
                                    type: "structure",
                                    members: {
                                        errorInfo: {
                                            type: "structure",
                                            members: {
                                                putFailuresCount: {
                                                    type: "long"
                                                },
                                                executionMessage: {}
                                            }
                                        },
                                        bytesProcessed: {
                                            type: "long"
                                        },
                                        bytesWritten: {
                                            type: "long"
                                        },
                                        recordsProcessed: {
                                            type: "long"
                                        },
                                        numParallelProcesses: {
                                            type: "long"
                                        },
                                        maxPageSize: {
                                            type: "long"
                                        }
                                    }
                                },
                                startedAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                dataPullStartTime: {
                                    type: "timestamp"
                                },
                                dataPullEndTime: {
                                    type: "timestamp"
                                },
                                metadataCatalogDetails: {
                                    shape: "S9x"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConnectorEntities: {
            http: {
                requestUri: "/list-connector-entities"
            },
            input: {
                type: "structure",
                members: {
                    connectorProfileName: {},
                    connectorType: {},
                    entitiesPath: {},
                    apiVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "connectorEntityMap" ],
                members: {
                    connectorEntityMap: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    name: {},
                                    label: {},
                                    hasNestedEntities: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConnectors: {
            http: {
                requestUri: "/list-connectors"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectors: {
                        shape: "S9m"
                    },
                    nextToken: {}
                }
            }
        },
        ListFlows: {
            http: {
                requestUri: "/list-flows"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                flowArn: {},
                                description: {},
                                flowName: {},
                                flowStatus: {},
                                sourceConnectorType: {},
                                sourceConnectorLabel: {},
                                destinationConnectorType: {},
                                destinationConnectorLabel: {},
                                triggerType: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                lastUpdatedBy: {},
                                tags: {
                                    shape: "S6d"
                                },
                                lastRunExecutionDetails: {
                                    shape: "S9s"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S6d"
                    }
                }
            }
        },
        RegisterConnector: {
            http: {
                requestUri: "/register-connector"
            },
            input: {
                type: "structure",
                members: {
                    connectorLabel: {},
                    description: {},
                    connectorProvisioningType: {},
                    connectorProvisioningConfig: {
                        shape: "S8m"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {}
                }
            }
        },
        ResetConnectorMetadataCache: {
            http: {
                requestUri: "/reset-connector-metadata-cache"
            },
            input: {
                type: "structure",
                members: {
                    connectorProfileName: {},
                    connectorType: {},
                    connectorEntityName: {},
                    entitiesPath: {},
                    apiVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartFlow: {
            http: {
                requestUri: "/start-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {},
                    executionId: {}
                }
            }
        },
        StopFlow: {
            http: {
                requestUri: "/stop-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S6d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UnregisterConnector: {
            http: {
                requestUri: "/unregister-connector"
            },
            input: {
                type: "structure",
                required: [ "connectorLabel" ],
                members: {
                    connectorLabel: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnectorProfile: {
            http: {
                requestUri: "/update-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName", "connectionMode", "connectorProfileConfig" ],
                members: {
                    connectorProfileName: {},
                    connectionMode: {},
                    connectorProfileConfig: {
                        shape: "Sc"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileArn: {}
                }
            }
        },
        UpdateConnectorRegistration: {
            http: {
                requestUri: "/update-connector-registration"
            },
            input: {
                type: "structure",
                required: [ "connectorLabel" ],
                members: {
                    connectorLabel: {},
                    description: {},
                    connectorProvisioningConfig: {
                        shape: "S8m"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {}
                }
            }
        },
        UpdateFlow: {
            http: {
                requestUri: "/update-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName", "triggerConfig", "sourceFlowConfig", "destinationFlowConfigList", "tasks" ],
                members: {
                    flowName: {},
                    description: {},
                    triggerConfig: {
                        shape: "S3d"
                    },
                    sourceFlowConfig: {
                        shape: "S3n"
                    },
                    destinationFlowConfigList: {
                        shape: "S4n"
                    },
                    tasks: {
                        shape: "S5n"
                    },
                    metadataCatalogConfig: {
                        shape: "S6g"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    flowStatus: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "structure",
            required: [ "connectorProfileProperties" ],
            members: {
                connectorProfileProperties: {
                    shape: "Sd"
                },
                connectorProfileCredentials: {
                    type: "structure",
                    members: {
                        Amplitude: {
                            type: "structure",
                            required: [ "apiKey", "secretKey" ],
                            members: {
                                apiKey: {
                                    shape: "S1x"
                                },
                                secretKey: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        Datadog: {
                            type: "structure",
                            required: [ "apiKey", "applicationKey" ],
                            members: {
                                apiKey: {
                                    shape: "S1x"
                                },
                                applicationKey: {}
                            }
                        },
                        Dynatrace: {
                            type: "structure",
                            required: [ "apiToken" ],
                            members: {
                                apiToken: {}
                            }
                        },
                        GoogleAnalytics: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S25"
                                },
                                accessToken: {
                                    shape: "S26"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S28"
                                }
                            }
                        },
                        Honeycode: {
                            type: "structure",
                            members: {
                                accessToken: {
                                    shape: "S26"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S28"
                                }
                            }
                        },
                        InforNexus: {
                            type: "structure",
                            required: [ "accessKeyId", "userId", "secretAccessKey", "datakey" ],
                            members: {
                                accessKeyId: {
                                    type: "string",
                                    sensitive: true
                                },
                                userId: {},
                                secretAccessKey: {},
                                datakey: {}
                            }
                        },
                        Marketo: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S25"
                                },
                                accessToken: {
                                    shape: "S26"
                                },
                                oAuthRequest: {
                                    shape: "S28"
                                }
                            }
                        },
                        Redshift: {
                            type: "structure",
                            members: {
                                username: {},
                                password: {
                                    shape: "S2j"
                                }
                            }
                        },
                        Salesforce: {
                            type: "structure",
                            members: {
                                accessToken: {
                                    shape: "S26"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S28"
                                },
                                clientCredentialsArn: {
                                    shape: "S2l"
                                },
                                oAuth2GrantType: {},
                                jwtToken: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        ServiceNow: {
                            type: "structure",
                            members: {
                                username: {},
                                password: {
                                    shape: "S2j"
                                },
                                oAuth2Credentials: {
                                    shape: "S2o"
                                }
                            }
                        },
                        Singular: {
                            type: "structure",
                            required: [ "apiKey" ],
                            members: {
                                apiKey: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Slack: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S25"
                                },
                                accessToken: {
                                    shape: "S26"
                                },
                                oAuthRequest: {
                                    shape: "S28"
                                }
                            }
                        },
                        Snowflake: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S2j"
                                }
                            }
                        },
                        Trendmicro: {
                            type: "structure",
                            required: [ "apiSecretKey" ],
                            members: {
                                apiSecretKey: {
                                    shape: "S2t"
                                }
                            }
                        },
                        Veeva: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S2j"
                                }
                            }
                        },
                        Zendesk: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S25"
                                },
                                accessToken: {
                                    shape: "S26"
                                },
                                oAuthRequest: {
                                    shape: "S28"
                                }
                            }
                        },
                        SAPOData: {
                            type: "structure",
                            members: {
                                basicAuthCredentials: {
                                    shape: "S2x"
                                },
                                oAuthCredentials: {
                                    type: "structure",
                                    required: [ "clientId", "clientSecret" ],
                                    members: {
                                        clientId: {},
                                        clientSecret: {
                                            shape: "S25"
                                        },
                                        accessToken: {
                                            shape: "S26"
                                        },
                                        refreshToken: {},
                                        oAuthRequest: {
                                            shape: "S28"
                                        }
                                    }
                                }
                            }
                        },
                        CustomConnector: {
                            type: "structure",
                            required: [ "authenticationType" ],
                            members: {
                                authenticationType: {},
                                basic: {
                                    shape: "S2x"
                                },
                                oauth2: {
                                    shape: "S2o"
                                },
                                apiKey: {
                                    type: "structure",
                                    required: [ "apiKey" ],
                                    members: {
                                        apiKey: {
                                            shape: "S1x"
                                        },
                                        apiSecretKey: {
                                            shape: "S2t"
                                        }
                                    }
                                },
                                custom: {
                                    type: "structure",
                                    required: [ "customAuthenticationType" ],
                                    members: {
                                        customAuthenticationType: {},
                                        credentialsMap: {
                                            type: "map",
                                            key: {
                                                type: "string",
                                                sensitive: true
                                            },
                                            value: {
                                                type: "string",
                                                sensitive: true
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        Pardot: {
                            type: "structure",
                            members: {
                                accessToken: {
                                    shape: "S26"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S28"
                                },
                                clientCredentialsArn: {
                                    shape: "S2l"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                Amplitude: {
                    type: "structure",
                    members: {}
                },
                Datadog: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Dynatrace: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                GoogleAnalytics: {
                    type: "structure",
                    members: {}
                },
                Honeycode: {
                    type: "structure",
                    members: {}
                },
                InforNexus: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Marketo: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Redshift: {
                    type: "structure",
                    required: [ "bucketName", "roleArn" ],
                    members: {
                        databaseUrl: {},
                        bucketName: {},
                        bucketPrefix: {},
                        roleArn: {},
                        dataApiRoleArn: {},
                        isRedshiftServerless: {
                            type: "boolean"
                        },
                        clusterIdentifier: {},
                        workgroupName: {},
                        databaseName: {}
                    }
                },
                Salesforce: {
                    type: "structure",
                    members: {
                        instanceUrl: {},
                        isSandboxEnvironment: {
                            type: "boolean"
                        },
                        usePrivateLinkForMetadataAndAuthorization: {
                            type: "boolean"
                        }
                    }
                },
                ServiceNow: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Singular: {
                    type: "structure",
                    members: {}
                },
                Slack: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Snowflake: {
                    type: "structure",
                    required: [ "warehouse", "stage", "bucketName" ],
                    members: {
                        warehouse: {},
                        stage: {},
                        bucketName: {},
                        bucketPrefix: {},
                        privateLinkServiceName: {},
                        accountName: {},
                        region: {}
                    }
                },
                Trendmicro: {
                    type: "structure",
                    members: {}
                },
                Veeva: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Zendesk: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                SAPOData: {
                    type: "structure",
                    required: [ "applicationHostUrl", "applicationServicePath", "portNumber", "clientNumber" ],
                    members: {
                        applicationHostUrl: {},
                        applicationServicePath: {},
                        portNumber: {
                            type: "integer"
                        },
                        clientNumber: {},
                        logonLanguage: {},
                        privateLinkServiceName: {},
                        oAuthProperties: {
                            type: "structure",
                            required: [ "tokenUrl", "authCodeUrl", "oAuthScopes" ],
                            members: {
                                tokenUrl: {},
                                authCodeUrl: {},
                                oAuthScopes: {
                                    shape: "S1i"
                                }
                            }
                        },
                        disableSSO: {
                            type: "boolean"
                        }
                    }
                },
                CustomConnector: {
                    type: "structure",
                    members: {
                        profileProperties: {
                            type: "map",
                            key: {},
                            value: {}
                        },
                        oAuth2Properties: {
                            type: "structure",
                            required: [ "tokenUrl", "oAuth2GrantType" ],
                            members: {
                                tokenUrl: {},
                                oAuth2GrantType: {},
                                tokenUrlCustomProperties: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                },
                Pardot: {
                    type: "structure",
                    members: {
                        instanceUrl: {},
                        isSandboxEnvironment: {
                            type: "boolean"
                        },
                        businessUnitId: {}
                    }
                }
            }
        },
        S1i: {
            type: "list",
            member: {}
        },
        S1x: {
            type: "string",
            sensitive: true
        },
        S25: {
            type: "string",
            sensitive: true
        },
        S26: {
            type: "string",
            sensitive: true
        },
        S28: {
            type: "structure",
            members: {
                authCode: {},
                redirectUri: {}
            }
        },
        S2j: {
            type: "string",
            sensitive: true
        },
        S2l: {
            type: "string",
            sensitive: true
        },
        S2o: {
            type: "structure",
            members: {
                clientId: {},
                clientSecret: {
                    shape: "S25"
                },
                accessToken: {
                    shape: "S26"
                },
                refreshToken: {},
                oAuthRequest: {
                    shape: "S28"
                }
            }
        },
        S2t: {
            type: "string",
            sensitive: true
        },
        S2x: {
            type: "structure",
            required: [ "username", "password" ],
            members: {
                username: {},
                password: {
                    shape: "S2j"
                }
            }
        },
        S3d: {
            type: "structure",
            required: [ "triggerType" ],
            members: {
                triggerType: {},
                triggerProperties: {
                    type: "structure",
                    members: {
                        Scheduled: {
                            type: "structure",
                            required: [ "scheduleExpression" ],
                            members: {
                                scheduleExpression: {},
                                dataPullMode: {},
                                scheduleStartTime: {
                                    type: "timestamp"
                                },
                                scheduleEndTime: {
                                    type: "timestamp"
                                },
                                timezone: {},
                                scheduleOffset: {
                                    type: "long"
                                },
                                firstExecutionFrom: {
                                    type: "timestamp"
                                },
                                flowErrorDeactivationThreshold: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        S3n: {
            type: "structure",
            required: [ "connectorType", "sourceConnectorProperties" ],
            members: {
                connectorType: {},
                apiVersion: {},
                connectorProfileName: {},
                sourceConnectorProperties: {
                    type: "structure",
                    members: {
                        Amplitude: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Datadog: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Dynatrace: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        GoogleAnalytics: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        InforNexus: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Marketo: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        S3: {
                            type: "structure",
                            required: [ "bucketName" ],
                            members: {
                                bucketName: {},
                                bucketPrefix: {},
                                s3InputFormatConfig: {
                                    type: "structure",
                                    members: {
                                        s3InputFileType: {}
                                    }
                                }
                            }
                        },
                        Salesforce: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {},
                                enableDynamicFieldUpdate: {
                                    type: "boolean"
                                },
                                includeDeletedRecords: {
                                    type: "boolean"
                                },
                                dataTransferApi: {}
                            }
                        },
                        ServiceNow: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Singular: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Slack: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Trendmicro: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Veeva: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {},
                                documentType: {},
                                includeSourceFiles: {
                                    type: "boolean"
                                },
                                includeRenditions: {
                                    type: "boolean"
                                },
                                includeAllVersions: {
                                    type: "boolean"
                                }
                            }
                        },
                        Zendesk: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        SAPOData: {
                            type: "structure",
                            members: {
                                objectPath: {},
                                parallelismConfig: {
                                    type: "structure",
                                    required: [ "maxParallelism" ],
                                    members: {
                                        maxParallelism: {
                                            type: "integer"
                                        }
                                    }
                                },
                                paginationConfig: {
                                    type: "structure",
                                    required: [ "maxPageSize" ],
                                    members: {
                                        maxPageSize: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        CustomConnector: {
                            type: "structure",
                            required: [ "entityName" ],
                            members: {
                                entityName: {},
                                customProperties: {
                                    shape: "S4g"
                                },
                                dataTransferApi: {
                                    shape: "S4h"
                                }
                            }
                        },
                        Pardot: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        }
                    }
                },
                incrementalPullConfig: {
                    type: "structure",
                    members: {
                        datetimeTypeFieldName: {}
                    }
                }
            }
        },
        S4g: {
            type: "map",
            key: {},
            value: {}
        },
        S4h: {
            type: "structure",
            members: {
                Name: {},
                Type: {}
            }
        },
        S4n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "connectorType", "destinationConnectorProperties" ],
                members: {
                    connectorType: {},
                    apiVersion: {},
                    connectorProfileName: {},
                    destinationConnectorProperties: {
                        type: "structure",
                        members: {
                            Redshift: {
                                type: "structure",
                                required: [ "object", "intermediateBucketName" ],
                                members: {
                                    object: {},
                                    intermediateBucketName: {},
                                    bucketPrefix: {},
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    }
                                }
                            },
                            S3: {
                                type: "structure",
                                required: [ "bucketName" ],
                                members: {
                                    bucketName: {},
                                    bucketPrefix: {},
                                    s3OutputFormatConfig: {
                                        type: "structure",
                                        members: {
                                            fileType: {},
                                            prefixConfig: {
                                                shape: "S4v"
                                            },
                                            aggregationConfig: {
                                                shape: "S50"
                                            },
                                            preserveSourceDataTyping: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            Salesforce: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    idFieldNames: {
                                        shape: "S55"
                                    },
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    },
                                    writeOperationType: {},
                                    dataTransferApi: {}
                                }
                            },
                            Snowflake: {
                                type: "structure",
                                required: [ "object", "intermediateBucketName" ],
                                members: {
                                    object: {},
                                    intermediateBucketName: {},
                                    bucketPrefix: {},
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    }
                                }
                            },
                            EventBridge: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    }
                                }
                            },
                            LookoutMetrics: {
                                type: "structure",
                                members: {}
                            },
                            Upsolver: {
                                type: "structure",
                                required: [ "bucketName", "s3OutputFormatConfig" ],
                                members: {
                                    bucketName: {},
                                    bucketPrefix: {},
                                    s3OutputFormatConfig: {
                                        type: "structure",
                                        required: [ "prefixConfig" ],
                                        members: {
                                            fileType: {},
                                            prefixConfig: {
                                                shape: "S4v"
                                            },
                                            aggregationConfig: {
                                                shape: "S50"
                                            }
                                        }
                                    }
                                }
                            },
                            Honeycode: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    }
                                }
                            },
                            CustomerProfiles: {
                                type: "structure",
                                required: [ "domainName" ],
                                members: {
                                    domainName: {},
                                    objectTypeName: {}
                                }
                            },
                            Zendesk: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    idFieldNames: {
                                        shape: "S55"
                                    },
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    },
                                    writeOperationType: {}
                                }
                            },
                            Marketo: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    }
                                }
                            },
                            CustomConnector: {
                                type: "structure",
                                required: [ "entityName" ],
                                members: {
                                    entityName: {},
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    },
                                    writeOperationType: {},
                                    idFieldNames: {
                                        shape: "S55"
                                    },
                                    customProperties: {
                                        shape: "S4g"
                                    }
                                }
                            },
                            SAPOData: {
                                type: "structure",
                                required: [ "objectPath" ],
                                members: {
                                    objectPath: {},
                                    successResponseHandlingConfig: {
                                        type: "structure",
                                        members: {
                                            bucketPrefix: {},
                                            bucketName: {}
                                        }
                                    },
                                    idFieldNames: {
                                        shape: "S55"
                                    },
                                    errorHandlingConfig: {
                                        shape: "S4r"
                                    },
                                    writeOperationType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S4r: {
            type: "structure",
            members: {
                failOnFirstDestinationError: {
                    type: "boolean"
                },
                bucketPrefix: {},
                bucketName: {}
            }
        },
        S4v: {
            type: "structure",
            members: {
                prefixType: {},
                prefixFormat: {},
                pathPrefixHierarchy: {
                    type: "list",
                    member: {}
                }
            }
        },
        S50: {
            type: "structure",
            members: {
                aggregationType: {},
                targetFileSize: {
                    type: "long"
                }
            }
        },
        S55: {
            type: "list",
            member: {}
        },
        S5n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "sourceFields", "taskType" ],
                members: {
                    sourceFields: {
                        type: "list",
                        member: {}
                    },
                    connectorOperator: {
                        type: "structure",
                        members: {
                            Amplitude: {},
                            Datadog: {},
                            Dynatrace: {},
                            GoogleAnalytics: {},
                            InforNexus: {},
                            Marketo: {},
                            S3: {},
                            Salesforce: {},
                            ServiceNow: {},
                            Singular: {},
                            Slack: {},
                            Trendmicro: {},
                            Veeva: {},
                            Zendesk: {},
                            SAPOData: {},
                            CustomConnector: {},
                            Pardot: {}
                        }
                    },
                    destinationField: {},
                    taskType: {},
                    taskProperties: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S6d: {
            type: "map",
            key: {},
            value: {}
        },
        S6g: {
            type: "structure",
            members: {
                glueDataCatalog: {
                    type: "structure",
                    required: [ "roleArn", "databaseName", "tablePrefix" ],
                    members: {
                        roleArn: {},
                        databaseName: {},
                        tablePrefix: {}
                    }
                }
            }
        },
        S6u: {
            type: "structure",
            members: {
                canUseAsSource: {
                    type: "boolean"
                },
                canUseAsDestination: {
                    type: "boolean"
                },
                supportedDestinationConnectors: {
                    shape: "S6v"
                },
                supportedSchedulingFrequencies: {
                    type: "list",
                    member: {}
                },
                isPrivateLinkEnabled: {
                    type: "boolean"
                },
                isPrivateLinkEndpointUrlRequired: {
                    type: "boolean"
                },
                supportedTriggerTypes: {
                    type: "list",
                    member: {}
                },
                connectorMetadata: {
                    type: "structure",
                    members: {
                        Amplitude: {
                            type: "structure",
                            members: {}
                        },
                        Datadog: {
                            type: "structure",
                            members: {}
                        },
                        Dynatrace: {
                            type: "structure",
                            members: {}
                        },
                        GoogleAnalytics: {
                            type: "structure",
                            members: {
                                oAuthScopes: {
                                    shape: "S1i"
                                }
                            }
                        },
                        InforNexus: {
                            type: "structure",
                            members: {}
                        },
                        Marketo: {
                            type: "structure",
                            members: {}
                        },
                        Redshift: {
                            type: "structure",
                            members: {}
                        },
                        S3: {
                            type: "structure",
                            members: {}
                        },
                        Salesforce: {
                            type: "structure",
                            members: {
                                oAuthScopes: {
                                    shape: "S1i"
                                },
                                dataTransferApis: {
                                    type: "list",
                                    member: {}
                                },
                                oauth2GrantTypesSupported: {
                                    shape: "S7a"
                                }
                            }
                        },
                        ServiceNow: {
                            type: "structure",
                            members: {}
                        },
                        Singular: {
                            type: "structure",
                            members: {}
                        },
                        Slack: {
                            type: "structure",
                            members: {
                                oAuthScopes: {
                                    shape: "S1i"
                                }
                            }
                        },
                        Snowflake: {
                            type: "structure",
                            members: {
                                supportedRegions: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        Trendmicro: {
                            type: "structure",
                            members: {}
                        },
                        Veeva: {
                            type: "structure",
                            members: {}
                        },
                        Zendesk: {
                            type: "structure",
                            members: {
                                oAuthScopes: {
                                    shape: "S1i"
                                }
                            }
                        },
                        EventBridge: {
                            type: "structure",
                            members: {}
                        },
                        Upsolver: {
                            type: "structure",
                            members: {}
                        },
                        CustomerProfiles: {
                            type: "structure",
                            members: {}
                        },
                        Honeycode: {
                            type: "structure",
                            members: {
                                oAuthScopes: {
                                    shape: "S1i"
                                }
                            }
                        },
                        SAPOData: {
                            type: "structure",
                            members: {}
                        },
                        Pardot: {
                            type: "structure",
                            members: {}
                        }
                    }
                },
                connectorType: {},
                connectorLabel: {},
                connectorDescription: {},
                connectorOwner: {},
                connectorName: {},
                connectorVersion: {},
                connectorArn: {},
                connectorModes: {
                    shape: "S7u"
                },
                authenticationConfig: {
                    type: "structure",
                    members: {
                        isBasicAuthSupported: {
                            type: "boolean"
                        },
                        isApiKeyAuthSupported: {
                            type: "boolean"
                        },
                        isOAuth2Supported: {
                            type: "boolean"
                        },
                        isCustomAuthSupported: {
                            type: "boolean"
                        },
                        oAuth2Defaults: {
                            type: "structure",
                            members: {
                                oauthScopes: {
                                    shape: "S1i"
                                },
                                tokenUrls: {
                                    type: "list",
                                    member: {}
                                },
                                authCodeUrls: {
                                    type: "list",
                                    member: {}
                                },
                                oauth2GrantTypesSupported: {
                                    shape: "S7a"
                                },
                                oauth2CustomProperties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            key: {},
                                            isRequired: {
                                                type: "boolean"
                                            },
                                            label: {},
                                            description: {},
                                            isSensitiveField: {
                                                type: "boolean"
                                            },
                                            connectorSuppliedValues: {
                                                shape: "S84"
                                            },
                                            type: {}
                                        }
                                    }
                                }
                            }
                        },
                        customAuthConfigs: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    customAuthenticationType: {},
                                    authParameters: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {},
                                                isRequired: {
                                                    type: "boolean"
                                                },
                                                label: {},
                                                description: {},
                                                isSensitiveField: {
                                                    type: "boolean"
                                                },
                                                connectorSuppliedValues: {
                                                    shape: "S84"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                connectorRuntimeSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            key: {},
                            dataType: {},
                            isRequired: {
                                type: "boolean"
                            },
                            label: {},
                            description: {},
                            scope: {},
                            connectorSuppliedValueOptions: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                supportedApiVersions: {
                    type: "list",
                    member: {}
                },
                supportedOperators: {
                    type: "list",
                    member: {}
                },
                supportedWriteOperations: {
                    shape: "S8k"
                },
                connectorProvisioningType: {},
                connectorProvisioningConfig: {
                    shape: "S8m"
                },
                logoURL: {},
                registeredAt: {
                    type: "timestamp"
                },
                registeredBy: {},
                supportedDataTransferTypes: {
                    shape: "S8q"
                },
                supportedDataTransferApis: {
                    type: "list",
                    member: {
                        shape: "S4h"
                    }
                }
            }
        },
        S6v: {
            type: "list",
            member: {}
        },
        S7a: {
            type: "list",
            member: {}
        },
        S7u: {
            type: "list",
            member: {}
        },
        S84: {
            type: "list",
            member: {}
        },
        S8k: {
            type: "list",
            member: {}
        },
        S8m: {
            type: "structure",
            members: {
                lambda: {
                    type: "structure",
                    required: [ "lambdaArn" ],
                    members: {
                        lambdaArn: {}
                    }
                }
            }
        },
        S8q: {
            type: "list",
            member: {}
        },
        S94: {
            type: "structure",
            members: {
                maximum: {
                    type: "double"
                },
                minimum: {
                    type: "double"
                }
            }
        },
        S9m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    connectorDescription: {},
                    connectorName: {},
                    connectorOwner: {},
                    connectorVersion: {},
                    applicationType: {},
                    connectorType: {},
                    connectorLabel: {},
                    registeredAt: {
                        type: "timestamp"
                    },
                    registeredBy: {},
                    connectorProvisioningType: {},
                    connectorModes: {
                        shape: "S7u"
                    },
                    supportedDataTransferTypes: {
                        shape: "S8q"
                    }
                }
            }
        },
        S9s: {
            type: "structure",
            members: {
                mostRecentExecutionMessage: {},
                mostRecentExecutionTime: {
                    type: "timestamp"
                },
                mostRecentExecutionStatus: {}
            }
        },
        S9x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    catalogType: {},
                    tableName: {},
                    tableRegistrationOutput: {
                        shape: "Sa0"
                    },
                    partitionRegistrationOutput: {
                        shape: "Sa0"
                    }
                }
            }
        },
        Sa0: {
            type: "structure",
            members: {
                message: {},
                result: {},
                status: {}
            }
        }
    },
    paginators: {
        DescribeConnectorProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        DescribeConnectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        DescribeFlowExecutionRecords: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListConnectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFlows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["redshiftdata"] = {};

AWS.RedshiftData = AWS.Service.defineService("redshiftdata", [ "2019-12-20" ]);

AWS.apiLoader.services["redshiftdata"]["2019-12-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-20",
        endpointPrefix: "redshift-data",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Redshift Data API Service",
        serviceId: "Redshift Data",
        signatureVersion: "v4",
        signingName: "redshift-data",
        targetPrefix: "RedshiftData",
        uid: "redshift-data-2019-12-20"
    },
    operations: {
        BatchExecuteStatement: {
            input: {
                type: "structure",
                required: [ "Database", "Sqls" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterIdentifier: {},
                    Database: {},
                    DbUser: {},
                    SecretArn: {},
                    Sqls: {
                        type: "list",
                        member: {}
                    },
                    StatementName: {},
                    WithEvent: {
                        type: "boolean"
                    },
                    WorkgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Database: {},
                    DbUser: {},
                    Id: {},
                    SecretArn: {},
                    WorkgroupName: {}
                }
            }
        },
        CancelStatement: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeStatement: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    ClusterIdentifier: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Database: {},
                    DbUser: {},
                    Duration: {
                        type: "long"
                    },
                    Error: {},
                    HasResultSet: {
                        type: "boolean"
                    },
                    Id: {},
                    QueryParameters: {
                        shape: "Sj"
                    },
                    QueryString: {},
                    RedshiftPid: {
                        type: "long"
                    },
                    RedshiftQueryId: {
                        type: "long"
                    },
                    ResultRows: {
                        type: "long"
                    },
                    ResultSize: {
                        type: "long"
                    },
                    SecretArn: {},
                    Status: {},
                    SubStatements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Duration: {
                                    type: "long"
                                },
                                Error: {},
                                HasResultSet: {
                                    type: "boolean"
                                },
                                Id: {},
                                QueryString: {},
                                RedshiftQueryId: {
                                    type: "long"
                                },
                                ResultRows: {
                                    type: "long"
                                },
                                ResultSize: {
                                    type: "long"
                                },
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    WorkgroupName: {}
                }
            }
        },
        DescribeTable: {
            input: {
                type: "structure",
                required: [ "Database" ],
                members: {
                    ClusterIdentifier: {},
                    ConnectedDatabase: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Schema: {},
                    SecretArn: {},
                    Table: {},
                    WorkgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnList: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    NextToken: {},
                    TableName: {}
                }
            }
        },
        ExecuteStatement: {
            input: {
                type: "structure",
                required: [ "Database", "Sql" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterIdentifier: {},
                    Database: {},
                    DbUser: {},
                    Parameters: {
                        shape: "Sj"
                    },
                    SecretArn: {},
                    Sql: {},
                    StatementName: {},
                    WithEvent: {
                        type: "boolean"
                    },
                    WorkgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Database: {},
                    DbUser: {},
                    Id: {},
                    SecretArn: {},
                    WorkgroupName: {}
                }
            }
        },
        GetStatementResult: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Records" ],
                members: {
                    ColumnMetadata: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    NextToken: {},
                    Records: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    blobValue: {
                                        type: "blob"
                                    },
                                    booleanValue: {
                                        type: "boolean"
                                    },
                                    doubleValue: {
                                        type: "double"
                                    },
                                    isNull: {
                                        type: "boolean"
                                    },
                                    longValue: {
                                        type: "long"
                                    },
                                    stringValue: {}
                                },
                                union: true
                            }
                        }
                    },
                    TotalNumRows: {
                        type: "long"
                    }
                }
            }
        },
        ListDatabases: {
            input: {
                type: "structure",
                required: [ "Database" ],
                members: {
                    ClusterIdentifier: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SecretArn: {},
                    WorkgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Databases: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListSchemas: {
            input: {
                type: "structure",
                required: [ "Database" ],
                members: {
                    ClusterIdentifier: {},
                    ConnectedDatabase: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SchemaPattern: {},
                    SecretArn: {},
                    WorkgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Schemas: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListStatements: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    RoleLevel: {
                        type: "boolean"
                    },
                    StatementName: {},
                    Status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Statements" ],
                members: {
                    NextToken: {},
                    Statements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Id: {},
                                IsBatchStatement: {
                                    type: "boolean"
                                },
                                QueryParameters: {
                                    shape: "Sj"
                                },
                                QueryString: {},
                                QueryStrings: {
                                    type: "list",
                                    member: {}
                                },
                                SecretArn: {},
                                StatementName: {},
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTables: {
            input: {
                type: "structure",
                required: [ "Database" ],
                members: {
                    ClusterIdentifier: {},
                    ConnectedDatabase: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SchemaPattern: {},
                    SecretArn: {},
                    TablePattern: {},
                    WorkgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                schema: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                columnDefault: {},
                isCaseSensitive: {
                    type: "boolean"
                },
                isCurrency: {
                    type: "boolean"
                },
                isSigned: {
                    type: "boolean"
                },
                label: {},
                length: {
                    type: "integer"
                },
                name: {},
                nullable: {
                    type: "integer"
                },
                precision: {
                    type: "integer"
                },
                scale: {
                    type: "integer"
                },
                schemaName: {},
                tableName: {},
                typeName: {}
            }
        }
    },
    paginators: {
        DescribeTable: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ColumnList"
        },
        GetStatementResult: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Records"
        },
        ListDatabases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Databases"
        },
        ListSchemas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Schemas"
        },
        ListStatements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Statements"
        },
        ListTables: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tables"
        }
    }
};

AWS.apiLoader.services["ssoadmin"] = {};

AWS.SSOAdmin = AWS.Service.defineService("ssoadmin", [ "2020-07-20" ]);

AWS.apiLoader.services["ssoadmin"]["2020-07-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-20",
        endpointPrefix: "sso",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "SSO Admin",
        serviceFullName: "AWS Single Sign-On Admin",
        serviceId: "SSO Admin",
        signatureVersion: "v4",
        signingName: "sso",
        targetPrefix: "SWBExternalService",
        uid: "sso-admin-2020-07-20"
    },
    operations: {
        AttachCustomerManagedPolicyReferenceToPermissionSet: {
            input: {
                type: "structure",
                required: [ "CustomerManagedPolicyReference", "InstanceArn", "PermissionSetArn" ],
                members: {
                    CustomerManagedPolicyReference: {
                        shape: "S2"
                    },
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AttachManagedPolicyToPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "ManagedPolicyArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    ManagedPolicyArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAccountAssignment: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "PrincipalId", "PrincipalType", "TargetId", "TargetType" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    PrincipalId: {},
                    PrincipalType: {},
                    TargetId: {},
                    TargetType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentCreationStatus: {
                        shape: "Sh"
                    }
                }
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationProviderArn", "InstanceArn", "Name" ],
                members: {
                    ApplicationProviderArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    InstanceArn: {},
                    Name: {},
                    PortalOptions: {
                        shape: "Sr"
                    },
                    Status: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationArn: {}
                }
            }
        },
        CreateApplicationAssignment: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "PrincipalId", "PrincipalType" ],
                members: {
                    ApplicationArn: {},
                    PrincipalId: {},
                    PrincipalType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateInstance: {
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceArn: {}
                }
            }
        },
        CreateInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceAccessControlAttributeConfiguration", "InstanceArn" ],
                members: {
                    InstanceAccessControlAttributeConfiguration: {
                        shape: "S18"
                    },
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "Name" ],
                members: {
                    Description: {},
                    InstanceArn: {},
                    Name: {},
                    RelayState: {},
                    SessionDuration: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSet: {
                        shape: "S1m"
                    }
                }
            }
        },
        CreateTrustedTokenIssuer: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "Name", "TrustedTokenIssuerConfiguration", "TrustedTokenIssuerType" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    InstanceArn: {},
                    Name: {},
                    Tags: {
                        shape: "Sx"
                    },
                    TrustedTokenIssuerConfiguration: {
                        shape: "S1p"
                    },
                    TrustedTokenIssuerType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrustedTokenIssuerArn: {}
                }
            }
        },
        DeleteAccountAssignment: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "PrincipalId", "PrincipalType", "TargetId", "TargetType" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    PrincipalId: {},
                    PrincipalType: {},
                    TargetId: {},
                    TargetType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentDeletionStatus: {
                        shape: "Sh"
                    }
                }
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationAccessScope: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "Scope" ],
                members: {
                    ApplicationArn: {},
                    Scope: {}
                }
            },
            idempotent: true
        },
        DeleteApplicationAssignment: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "PrincipalId", "PrincipalType" ],
                members: {
                    ApplicationArn: {},
                    PrincipalId: {},
                    PrincipalType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteApplicationAuthenticationMethod: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "AuthenticationMethodType" ],
                members: {
                    ApplicationArn: {},
                    AuthenticationMethodType: {}
                }
            },
            idempotent: true
        },
        DeleteApplicationGrant: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "GrantType" ],
                members: {
                    ApplicationArn: {},
                    GrantType: {}
                }
            },
            idempotent: true
        },
        DeleteInlinePolicyFromPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInstance: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionsBoundaryFromPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrustedTokenIssuer: {
            input: {
                type: "structure",
                required: [ "TrustedTokenIssuerArn" ],
                members: {
                    TrustedTokenIssuerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAccountAssignmentCreationStatus: {
            input: {
                type: "structure",
                required: [ "AccountAssignmentCreationRequestId", "InstanceArn" ],
                members: {
                    AccountAssignmentCreationRequestId: {},
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentCreationStatus: {
                        shape: "Sh"
                    }
                }
            }
        },
        DescribeAccountAssignmentDeletionStatus: {
            input: {
                type: "structure",
                required: [ "AccountAssignmentDeletionRequestId", "InstanceArn" ],
                members: {
                    AccountAssignmentDeletionRequestId: {},
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentDeletionStatus: {
                        shape: "Sh"
                    }
                }
            }
        },
        DescribeApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationAccount: {},
                    ApplicationArn: {},
                    ApplicationProviderArn: {},
                    CreatedDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    InstanceArn: {},
                    Name: {},
                    PortalOptions: {
                        shape: "Sr"
                    },
                    Status: {}
                }
            }
        },
        DescribeApplicationAssignment: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "PrincipalId", "PrincipalType" ],
                members: {
                    ApplicationArn: {},
                    PrincipalId: {},
                    PrincipalType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationArn: {},
                    PrincipalId: {},
                    PrincipalType: {}
                }
            }
        },
        DescribeApplicationProvider: {
            input: {
                type: "structure",
                required: [ "ApplicationProviderArn" ],
                members: {
                    ApplicationProviderArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationProviderArn" ],
                members: {
                    ApplicationProviderArn: {},
                    DisplayData: {
                        shape: "S2x"
                    },
                    FederationProtocol: {},
                    ResourceServerConfig: {
                        shape: "S31"
                    }
                }
            }
        },
        DescribeInstance: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedDate: {
                        type: "timestamp"
                    },
                    IdentityStoreId: {},
                    InstanceArn: {},
                    Name: {},
                    OwnerAccountId: {},
                    Status: {}
                }
            }
        },
        DescribeInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceAccessControlAttributeConfiguration: {
                        shape: "S18"
                    },
                    Status: {},
                    StatusReason: {}
                }
            }
        },
        DescribePermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSet: {
                        shape: "S1m"
                    }
                }
            }
        },
        DescribePermissionSetProvisioningStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "ProvisionPermissionSetRequestId" ],
                members: {
                    InstanceArn: {},
                    ProvisionPermissionSetRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSetProvisioningStatus: {
                        shape: "S3h"
                    }
                }
            }
        },
        DescribeTrustedTokenIssuer: {
            input: {
                type: "structure",
                required: [ "TrustedTokenIssuerArn" ],
                members: {
                    TrustedTokenIssuerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    TrustedTokenIssuerArn: {},
                    TrustedTokenIssuerConfiguration: {
                        shape: "S1p"
                    },
                    TrustedTokenIssuerType: {}
                }
            }
        },
        DetachCustomerManagedPolicyReferenceFromPermissionSet: {
            input: {
                type: "structure",
                required: [ "CustomerManagedPolicyReference", "InstanceArn", "PermissionSetArn" ],
                members: {
                    CustomerManagedPolicyReference: {
                        shape: "S2"
                    },
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DetachManagedPolicyFromPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "ManagedPolicyArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    ManagedPolicyArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetApplicationAccessScope: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "Scope" ],
                members: {
                    ApplicationArn: {},
                    Scope: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    AuthorizedTargets: {
                        shape: "S3q"
                    },
                    Scope: {}
                }
            }
        },
        GetApplicationAssignmentConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AssignmentRequired" ],
                members: {
                    AssignmentRequired: {
                        type: "boolean"
                    }
                }
            }
        },
        GetApplicationAuthenticationMethod: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "AuthenticationMethodType" ],
                members: {
                    ApplicationArn: {},
                    AuthenticationMethodType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationMethod: {
                        shape: "S3x"
                    }
                }
            }
        },
        GetApplicationGrant: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "GrantType" ],
                members: {
                    ApplicationArn: {},
                    GrantType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Grant" ],
                members: {
                    Grant: {
                        shape: "S42"
                    }
                }
            }
        },
        GetInlinePolicyForPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InlinePolicy: {}
                }
            }
        },
        GetPermissionsBoundaryForPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionsBoundary: {
                        shape: "S4i"
                    }
                }
            }
        },
        ListAccountAssignmentCreationStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    Filter: {
                        shape: "S4k"
                    },
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentsCreationStatus: {
                        shape: "S4o"
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountAssignmentDeletionStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    Filter: {
                        shape: "S4k"
                    },
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentsDeletionStatus: {
                        shape: "S4o"
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountAssignments: {
            input: {
                type: "structure",
                required: [ "AccountId", "InstanceArn", "PermissionSetArn" ],
                members: {
                    AccountId: {},
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                PermissionSetArn: {},
                                PrincipalId: {},
                                PrincipalType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountAssignmentsForPrincipal: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PrincipalId", "PrincipalType" ],
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            AccountId: {}
                        }
                    },
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PrincipalId: {},
                    PrincipalType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                PermissionSetArn: {},
                                PrincipalId: {},
                                PrincipalType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountsForProvisionedPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PermissionSetArn: {},
                    ProvisioningStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationAccessScopes: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Scopes" ],
                members: {
                    NextToken: {},
                    Scopes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Scope" ],
                            members: {
                                AuthorizedTargets: {
                                    shape: "S3q"
                                },
                                Scope: {}
                            }
                        }
                    }
                }
            }
        },
        ListApplicationAssignments: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ApplicationArn", "PrincipalId", "PrincipalType" ],
                            members: {
                                ApplicationArn: {},
                                PrincipalId: {},
                                PrincipalType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationAssignmentsForPrincipal: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PrincipalId", "PrincipalType" ],
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            ApplicationArn: {}
                        }
                    },
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PrincipalId: {},
                    PrincipalType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationArn: {},
                                PrincipalId: {},
                                PrincipalType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationAuthenticationMethods: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationMethods: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AuthenticationMethod: {
                                    shape: "S3x"
                                },
                                AuthenticationMethodType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationGrants: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Grants" ],
                members: {
                    Grants: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Grant", "GrantType" ],
                            members: {
                                Grant: {
                                    shape: "S42"
                                },
                                GrantType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationProviders: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationProviders: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ApplicationProviderArn" ],
                            members: {
                                ApplicationProviderArn: {},
                                DisplayData: {
                                    shape: "S2x"
                                },
                                FederationProtocol: {},
                                ResourceServerConfig: {
                                    shape: "S31"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplications: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            ApplicationAccount: {},
                            ApplicationProvider: {}
                        }
                    },
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationAccount: {},
                                ApplicationArn: {},
                                ApplicationProviderArn: {},
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                Description: {},
                                InstanceArn: {},
                                Name: {},
                                PortalOptions: {
                                    shape: "Sr"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomerManagedPolicyReferencesInPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerManagedPolicyReferences: {
                        type: "list",
                        member: {
                            shape: "S2"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstances: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                IdentityStoreId: {},
                                InstanceArn: {},
                                Name: {},
                                OwnerAccountId: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListManagedPoliciesInPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachedManagedPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissionSetProvisioningStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    Filter: {
                        shape: "S4k"
                    },
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    PermissionSetsProvisioningStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                RequestId: {},
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        ListPermissionSets: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    PermissionSets: {
                        shape: "S6h"
                    }
                }
            }
        },
        ListPermissionSetsProvisionedToAccount: {
            input: {
                type: "structure",
                required: [ "AccountId", "InstanceArn" ],
                members: {
                    AccountId: {},
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ProvisioningStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    PermissionSets: {
                        shape: "S6h"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    InstanceArn: {},
                    NextToken: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        ListTrustedTokenIssuers: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TrustedTokenIssuers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                TrustedTokenIssuerArn: {},
                                TrustedTokenIssuerType: {}
                            }
                        }
                    }
                }
            }
        },
        ProvisionPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "TargetType" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    TargetId: {},
                    TargetType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSetProvisioningStatus: {
                        shape: "S3h"
                    }
                }
            }
        },
        PutApplicationAccessScope: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "Scope" ],
                members: {
                    ApplicationArn: {},
                    AuthorizedTargets: {
                        shape: "S3q"
                    },
                    Scope: {}
                }
            },
            idempotent: true
        },
        PutApplicationAssignmentConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "AssignmentRequired" ],
                members: {
                    ApplicationArn: {},
                    AssignmentRequired: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutApplicationAuthenticationMethod: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "AuthenticationMethod", "AuthenticationMethodType" ],
                members: {
                    ApplicationArn: {},
                    AuthenticationMethod: {
                        shape: "S3x"
                    },
                    AuthenticationMethodType: {}
                }
            },
            idempotent: true
        },
        PutApplicationGrant: {
            input: {
                type: "structure",
                required: [ "ApplicationArn", "Grant", "GrantType" ],
                members: {
                    ApplicationArn: {},
                    Grant: {
                        shape: "S42"
                    },
                    GrantType: {}
                }
            },
            idempotent: true
        },
        PutInlinePolicyToPermissionSet: {
            input: {
                type: "structure",
                required: [ "InlinePolicy", "InstanceArn", "PermissionSetArn" ],
                members: {
                    InlinePolicy: {},
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutPermissionsBoundaryToPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "PermissionsBoundary" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    PermissionsBoundary: {
                        shape: "S4i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    InstanceArn: {},
                    ResourceArn: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    InstanceArn: {},
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationArn" ],
                members: {
                    ApplicationArn: {},
                    Description: {},
                    Name: {},
                    PortalOptions: {
                        type: "structure",
                        members: {
                            SignInOptions: {
                                shape: "Ss"
                            }
                        }
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateInstance: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "Name" ],
                members: {
                    InstanceArn: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceAccessControlAttributeConfiguration", "InstanceArn" ],
                members: {
                    InstanceAccessControlAttributeConfiguration: {
                        shape: "S18"
                    },
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    Description: {},
                    InstanceArn: {},
                    PermissionSetArn: {},
                    RelayState: {},
                    SessionDuration: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTrustedTokenIssuer: {
            input: {
                type: "structure",
                required: [ "TrustedTokenIssuerArn" ],
                members: {
                    Name: {},
                    TrustedTokenIssuerArn: {},
                    TrustedTokenIssuerConfiguration: {
                        type: "structure",
                        members: {
                            OidcJwtConfiguration: {
                                type: "structure",
                                members: {
                                    ClaimAttributePath: {},
                                    IdentityStoreAttributePath: {},
                                    JwksRetrievalOption: {}
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Path: {}
            }
        },
        Sh: {
            type: "structure",
            members: {
                CreatedDate: {
                    type: "timestamp"
                },
                FailureReason: {},
                PermissionSetArn: {},
                PrincipalId: {},
                PrincipalType: {},
                RequestId: {},
                Status: {},
                TargetId: {},
                TargetType: {}
            }
        },
        Sr: {
            type: "structure",
            members: {
                SignInOptions: {
                    shape: "Ss"
                },
                Visibility: {}
            }
        },
        Ss: {
            type: "structure",
            required: [ "Origin" ],
            members: {
                ApplicationUrl: {},
                Origin: {}
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S18: {
            type: "structure",
            required: [ "AccessControlAttributes" ],
            members: {
                AccessControlAttributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Key", "Value" ],
                        members: {
                            Key: {},
                            Value: {
                                type: "structure",
                                required: [ "Source" ],
                                members: {
                                    Source: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                CreatedDate: {
                    type: "timestamp"
                },
                Description: {},
                Name: {},
                PermissionSetArn: {},
                RelayState: {},
                SessionDuration: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                OidcJwtConfiguration: {
                    type: "structure",
                    required: [ "ClaimAttributePath", "IdentityStoreAttributePath", "IssuerUrl", "JwksRetrievalOption" ],
                    members: {
                        ClaimAttributePath: {},
                        IdentityStoreAttributePath: {},
                        IssuerUrl: {},
                        JwksRetrievalOption: {}
                    }
                }
            },
            union: true
        },
        S2x: {
            type: "structure",
            members: {
                Description: {},
                DisplayName: {},
                IconUrl: {}
            }
        },
        S31: {
            type: "structure",
            members: {
                Scopes: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            DetailedTitle: {},
                            LongDescription: {}
                        }
                    }
                }
            }
        },
        S3h: {
            type: "structure",
            members: {
                AccountId: {},
                CreatedDate: {
                    type: "timestamp"
                },
                FailureReason: {},
                PermissionSetArn: {},
                RequestId: {},
                Status: {}
            }
        },
        S3q: {
            type: "list",
            member: {}
        },
        S3x: {
            type: "structure",
            members: {
                Iam: {
                    type: "structure",
                    required: [ "ActorPolicy" ],
                    members: {
                        ActorPolicy: {
                            type: "structure",
                            members: {},
                            document: true
                        }
                    }
                }
            },
            union: true
        },
        S42: {
            type: "structure",
            members: {
                AuthorizationCode: {
                    type: "structure",
                    members: {
                        RedirectUris: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                JwtBearer: {
                    type: "structure",
                    members: {
                        AuthorizedTokenIssuers: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    AuthorizedAudiences: {
                                        type: "list",
                                        member: {}
                                    },
                                    TrustedTokenIssuerArn: {}
                                }
                            }
                        }
                    }
                },
                RefreshToken: {
                    type: "structure",
                    members: {}
                },
                TokenExchange: {
                    type: "structure",
                    members: {}
                }
            },
            union: true
        },
        S4i: {
            type: "structure",
            members: {
                CustomerManagedPolicyReference: {
                    shape: "S2"
                },
                ManagedPolicyArn: {}
            }
        },
        S4k: {
            type: "structure",
            members: {
                Status: {}
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CreatedDate: {
                        type: "timestamp"
                    },
                    RequestId: {},
                    Status: {}
                }
            }
        },
        S6h: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAccountAssignmentCreationStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountAssignmentsCreationStatus"
        },
        ListAccountAssignmentDeletionStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountAssignmentsDeletionStatus"
        },
        ListAccountAssignments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountAssignments"
        },
        ListAccountAssignmentsForPrincipal: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountAssignments"
        },
        ListAccountsForProvisionedPermissionSet: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountIds"
        },
        ListApplicationAccessScopes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Scopes"
        },
        ListApplicationAssignments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ApplicationAssignments"
        },
        ListApplicationAssignmentsForPrincipal: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ApplicationAssignments"
        },
        ListApplicationAuthenticationMethods: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "AuthenticationMethods"
        },
        ListApplicationGrants: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Grants"
        },
        ListApplicationProviders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ApplicationProviders"
        },
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Applications"
        },
        ListCustomerManagedPolicyReferencesInPermissionSet: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CustomerManagedPolicyReferences"
        },
        ListInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Instances"
        },
        ListManagedPoliciesInPermissionSet: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AttachedManagedPolicies"
        },
        ListPermissionSetProvisioningStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PermissionSetsProvisioningStatus"
        },
        ListPermissionSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PermissionSets"
        },
        ListPermissionSetsProvisionedToAccount: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PermissionSets"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Tags"
        },
        ListTrustedTokenIssuers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrustedTokenIssuers"
        }
    }
};

AWS.apiLoader.services["timestreamquery"] = {};

AWS.TimestreamQuery = AWS.Service.defineService("timestreamquery", [ "2018-11-01" ]);

AWS.apiLoader.services["timestreamquery"]["2018-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-01",
        endpointPrefix: "query.timestream",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Timestream Query",
        serviceFullName: "Amazon Timestream Query",
        serviceId: "Timestream Query",
        signatureVersion: "v4",
        signingName: "timestream",
        targetPrefix: "Timestream_20181101",
        uid: "timestream-query-2018-11-01"
    },
    operations: {
        CancelQuery: {
            input: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    QueryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CancellationMessage: {}
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        },
        CreateScheduledQuery: {
            input: {
                type: "structure",
                required: [ "Name", "QueryString", "ScheduleConfiguration", "NotificationConfiguration", "ScheduledQueryExecutionRoleArn", "ErrorReportConfiguration" ],
                members: {
                    Name: {},
                    QueryString: {
                        shape: "S7"
                    },
                    ScheduleConfiguration: {
                        shape: "S8"
                    },
                    NotificationConfiguration: {
                        shape: "Sa"
                    },
                    TargetConfiguration: {
                        shape: "Sd"
                    },
                    ClientToken: {
                        shape: "Sr",
                        idempotencyToken: true
                    },
                    ScheduledQueryExecutionRoleArn: {},
                    Tags: {
                        shape: "Ss"
                    },
                    KmsKeyId: {},
                    ErrorReportConfiguration: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        },
        DeleteScheduledQuery: {
            input: {
                type: "structure",
                required: [ "ScheduledQueryArn" ],
                members: {
                    ScheduledQueryArn: {}
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        },
        DescribeEndpoints: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "Endpoints" ],
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Address", "CachePeriodInMinutes" ],
                            members: {
                                Address: {},
                                CachePeriodInMinutes: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            },
            endpointoperation: true
        },
        DescribeScheduledQuery: {
            input: {
                type: "structure",
                required: [ "ScheduledQueryArn" ],
                members: {
                    ScheduledQueryArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ScheduledQuery" ],
                members: {
                    ScheduledQuery: {
                        type: "structure",
                        required: [ "Arn", "Name", "QueryString", "State", "ScheduleConfiguration", "NotificationConfiguration" ],
                        members: {
                            Arn: {},
                            Name: {},
                            QueryString: {
                                shape: "S7"
                            },
                            CreationTime: {
                                type: "timestamp"
                            },
                            State: {},
                            PreviousInvocationTime: {
                                type: "timestamp"
                            },
                            NextInvocationTime: {
                                type: "timestamp"
                            },
                            ScheduleConfiguration: {
                                shape: "S8"
                            },
                            NotificationConfiguration: {
                                shape: "Sa"
                            },
                            TargetConfiguration: {
                                shape: "Sd"
                            },
                            ScheduledQueryExecutionRoleArn: {},
                            KmsKeyId: {},
                            ErrorReportConfiguration: {
                                shape: "Sx"
                            },
                            LastRunSummary: {
                                shape: "S1e"
                            },
                            RecentlyFailedRuns: {
                                type: "list",
                                member: {
                                    shape: "S1e"
                                }
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ExecuteScheduledQuery: {
            input: {
                type: "structure",
                required: [ "ScheduledQueryArn", "InvocationTime" ],
                members: {
                    ScheduledQueryArn: {},
                    InvocationTime: {
                        type: "timestamp"
                    },
                    ClientToken: {
                        shape: "Sr",
                        idempotencyToken: true
                    }
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        },
        ListScheduledQueries: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ScheduledQueries" ],
                members: {
                    ScheduledQueries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "Name", "State" ],
                            members: {
                                Arn: {},
                                Name: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                State: {},
                                PreviousInvocationTime: {
                                    type: "timestamp"
                                },
                                NextInvocationTime: {
                                    type: "timestamp"
                                },
                                ErrorReportConfiguration: {
                                    shape: "Sx"
                                },
                                TargetDestination: {
                                    type: "structure",
                                    members: {
                                        TimestreamDestination: {
                                            type: "structure",
                                            members: {
                                                DatabaseName: {},
                                                TableName: {}
                                            }
                                        }
                                    }
                                },
                                LastRunStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Ss"
                    },
                    NextToken: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        PrepareQuery: {
            input: {
                type: "structure",
                required: [ "QueryString" ],
                members: {
                    QueryString: {
                        shape: "S7"
                    },
                    ValidateOnly: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "QueryString", "Columns", "Parameters" ],
                members: {
                    QueryString: {
                        shape: "S7"
                    },
                    Columns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {
                                    shape: "S24"
                                },
                                DatabaseName: {},
                                TableName: {},
                                Aliased: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Type" ],
                            members: {
                                Name: {},
                                Type: {
                                    shape: "S24"
                                }
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        },
        Query: {
            input: {
                type: "structure",
                required: [ "QueryString" ],
                members: {
                    QueryString: {
                        shape: "S7"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        type: "string",
                        sensitive: true
                    },
                    NextToken: {},
                    MaxRows: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "QueryId", "Rows", "ColumnInfo" ],
                members: {
                    QueryId: {},
                    NextToken: {},
                    Rows: {
                        type: "list",
                        member: {
                            shape: "S2g"
                        }
                    },
                    ColumnInfo: {
                        shape: "S27"
                    },
                    QueryStatus: {
                        type: "structure",
                        members: {
                            ProgressPercentage: {
                                type: "double"
                            },
                            CumulativeBytesScanned: {
                                type: "long"
                            },
                            CumulativeBytesMetered: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpointdiscovery: {
                required: true
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpointdiscovery: {
                required: true
            }
        },
        UpdateScheduledQuery: {
            input: {
                type: "structure",
                required: [ "ScheduledQueryArn", "State" ],
                members: {
                    ScheduledQueryArn: {},
                    State: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        }
    },
    shapes: {
        S7: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "structure",
            required: [ "ScheduleExpression" ],
            members: {
                ScheduleExpression: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "SnsConfiguration" ],
            members: {
                SnsConfiguration: {
                    type: "structure",
                    required: [ "TopicArn" ],
                    members: {
                        TopicArn: {}
                    }
                }
            }
        },
        Sd: {
            type: "structure",
            required: [ "TimestreamConfiguration" ],
            members: {
                TimestreamConfiguration: {
                    type: "structure",
                    required: [ "DatabaseName", "TableName", "TimeColumn", "DimensionMappings" ],
                    members: {
                        DatabaseName: {},
                        TableName: {},
                        TimeColumn: {},
                        DimensionMappings: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "DimensionValueType" ],
                                members: {
                                    Name: {},
                                    DimensionValueType: {}
                                }
                            }
                        },
                        MultiMeasureMappings: {
                            type: "structure",
                            required: [ "MultiMeasureAttributeMappings" ],
                            members: {
                                TargetMultiMeasureName: {},
                                MultiMeasureAttributeMappings: {
                                    shape: "Sl"
                                }
                            }
                        },
                        MixedMeasureMappings: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "MeasureValueType" ],
                                members: {
                                    MeasureName: {},
                                    SourceColumn: {},
                                    TargetMeasureName: {},
                                    MeasureValueType: {},
                                    MultiMeasureAttributeMappings: {
                                        shape: "Sl"
                                    }
                                }
                            }
                        },
                        MeasureNameColumn: {}
                    }
                }
            }
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SourceColumn", "MeasureValueType" ],
                members: {
                    SourceColumn: {},
                    TargetMultiMeasureAttributeName: {},
                    MeasureValueType: {}
                }
            }
        },
        Sr: {
            type: "string",
            sensitive: true
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sx: {
            type: "structure",
            required: [ "S3Configuration" ],
            members: {
                S3Configuration: {
                    type: "structure",
                    required: [ "BucketName" ],
                    members: {
                        BucketName: {},
                        ObjectKeyPrefix: {},
                        EncryptionOption: {}
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                InvocationTime: {
                    type: "timestamp"
                },
                TriggerTime: {
                    type: "timestamp"
                },
                RunStatus: {},
                ExecutionStats: {
                    type: "structure",
                    members: {
                        ExecutionTimeInMillis: {
                            type: "long"
                        },
                        DataWrites: {
                            type: "long"
                        },
                        BytesMetered: {
                            type: "long"
                        },
                        RecordsIngested: {
                            type: "long"
                        },
                        QueryResultRows: {
                            type: "long"
                        }
                    }
                },
                ErrorReportLocation: {
                    type: "structure",
                    members: {
                        S3ReportLocation: {
                            type: "structure",
                            members: {
                                BucketName: {},
                                ObjectKey: {}
                            }
                        }
                    }
                },
                FailureReason: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                ScalarType: {},
                ArrayColumnInfo: {
                    shape: "S26"
                },
                TimeSeriesMeasureValueColumnInfo: {
                    shape: "S26"
                },
                RowColumnInfo: {
                    shape: "S27"
                }
            }
        },
        S26: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Name: {},
                Type: {
                    shape: "S24"
                }
            }
        },
        S27: {
            type: "list",
            member: {
                shape: "S26"
            }
        },
        S2g: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {
                    shape: "S2h"
                }
            }
        },
        S2h: {
            type: "list",
            member: {
                shape: "S2i"
            }
        },
        S2i: {
            type: "structure",
            members: {
                ScalarValue: {},
                TimeSeriesValue: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Time", "Value" ],
                        members: {
                            Time: {},
                            Value: {
                                shape: "S2i"
                            }
                        }
                    }
                },
                ArrayValue: {
                    shape: "S2h"
                },
                RowValue: {
                    shape: "S2g"
                },
                NullValue: {
                    type: "boolean"
                }
            }
        }
    },
    paginators: {
        ListScheduledQueries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScheduledQueries"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        },
        Query: {
            input_token: "NextToken",
            limit_key: "MaxRows",
            non_aggregate_keys: [ "ColumnInfo", "QueryId", "QueryStatus" ],
            output_token: "NextToken",
            result_key: "Rows"
        }
    }
};

AWS.apiLoader.services["timestreamwrite"] = {};

AWS.TimestreamWrite = AWS.Service.defineService("timestreamwrite", [ "2018-11-01" ]);

AWS.apiLoader.services["timestreamwrite"]["2018-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-01",
        endpointPrefix: "ingest.timestream",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Timestream Write",
        serviceFullName: "Amazon Timestream Write",
        serviceId: "Timestream Write",
        signatureVersion: "v4",
        signingName: "timestream",
        targetPrefix: "Timestream_20181101",
        uid: "timestream-write-2018-11-01"
    },
    operations: {
        CreateBatchLoadTask: {
            input: {
                type: "structure",
                required: [ "DataSourceConfiguration", "ReportConfiguration", "TargetDatabaseName", "TargetTableName" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        type: "string",
                        sensitive: true
                    },
                    DataModelConfiguration: {
                        shape: "S3"
                    },
                    DataSourceConfiguration: {
                        shape: "Sk"
                    },
                    ReportConfiguration: {
                        shape: "Sq"
                    },
                    TargetDatabaseName: {},
                    TargetTableName: {},
                    RecordVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TaskId" ],
                members: {
                    TaskId: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        CreateDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    DatabaseName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S15"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        CreateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    RetentionProperties: {
                        shape: "S1b"
                    },
                    Tags: {
                        shape: "S10"
                    },
                    MagneticStoreWriteProperties: {
                        shape: "S1e"
                    },
                    Schema: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "S1n"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DeleteDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    DatabaseName: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DeleteTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DescribeBatchLoadTask: {
            input: {
                type: "structure",
                required: [ "TaskId" ],
                members: {
                    TaskId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "BatchLoadTaskDescription" ],
                members: {
                    BatchLoadTaskDescription: {
                        type: "structure",
                        members: {
                            TaskId: {},
                            ErrorMessage: {},
                            DataSourceConfiguration: {
                                shape: "Sk"
                            },
                            ProgressReport: {
                                type: "structure",
                                members: {
                                    RecordsProcessed: {
                                        type: "long"
                                    },
                                    RecordsIngested: {
                                        type: "long"
                                    },
                                    ParseFailures: {
                                        type: "long"
                                    },
                                    RecordIngestionFailures: {
                                        type: "long"
                                    },
                                    FileFailures: {
                                        type: "long"
                                    },
                                    BytesMetered: {
                                        type: "long"
                                    }
                                }
                            },
                            ReportConfiguration: {
                                shape: "Sq"
                            },
                            DataModelConfiguration: {
                                shape: "S3"
                            },
                            TargetDatabaseName: {},
                            TargetTableName: {},
                            TaskStatus: {},
                            RecordVersion: {
                                type: "long"
                            },
                            CreationTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            ResumableUntil: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DescribeDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    DatabaseName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S15"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DescribeEndpoints: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "Endpoints" ],
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Address", "CachePeriodInMinutes" ],
                            members: {
                                Address: {},
                                CachePeriodInMinutes: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            },
            endpointoperation: true
        },
        DescribeTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "S1n"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListBatchLoadTasks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    TaskStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BatchLoadTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TaskId: {},
                                TaskStatus: {},
                                DatabaseName: {},
                                TableName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                ResumableUntil: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListDatabases: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Databases: {
                        type: "list",
                        member: {
                            shape: "S15"
                        }
                    },
                    NextToken: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListTables: {
            input: {
                type: "structure",
                members: {
                    DatabaseName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tables: {
                        type: "list",
                        member: {
                            shape: "S1n"
                        }
                    },
                    NextToken: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ResumeBatchLoadTask: {
            input: {
                type: "structure",
                required: [ "TaskId" ],
                members: {
                    TaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpointdiscovery: {
                required: true
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpointdiscovery: {
                required: true
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpointdiscovery: {
                required: true
            }
        },
        UpdateDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "KmsKeyId" ],
                members: {
                    DatabaseName: {},
                    KmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S15"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        UpdateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    RetentionProperties: {
                        shape: "S1b"
                    },
                    MagneticStoreWriteProperties: {
                        shape: "S1e"
                    },
                    Schema: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "S1n"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        WriteRecords: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "Records" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    CommonAttributes: {
                        shape: "S2v"
                    },
                    Records: {
                        type: "list",
                        member: {
                            shape: "S2v"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordsIngested: {
                        type: "structure",
                        members: {
                            Total: {
                                type: "integer"
                            },
                            MemoryStore: {
                                type: "integer"
                            },
                            MagneticStore: {
                                type: "integer"
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                DataModel: {
                    type: "structure",
                    required: [ "DimensionMappings" ],
                    members: {
                        TimeColumn: {},
                        TimeUnit: {},
                        DimensionMappings: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    SourceColumn: {},
                                    DestinationColumn: {}
                                }
                            }
                        },
                        MultiMeasureMappings: {
                            type: "structure",
                            required: [ "MultiMeasureAttributeMappings" ],
                            members: {
                                TargetMultiMeasureName: {},
                                MultiMeasureAttributeMappings: {
                                    shape: "Sb"
                                }
                            }
                        },
                        MixedMeasureMappings: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "MeasureValueType" ],
                                members: {
                                    MeasureName: {},
                                    SourceColumn: {},
                                    TargetMeasureName: {},
                                    MeasureValueType: {},
                                    MultiMeasureAttributeMappings: {
                                        shape: "Sb"
                                    }
                                }
                            }
                        },
                        MeasureNameColumn: {}
                    }
                },
                DataModelS3Configuration: {
                    type: "structure",
                    members: {
                        BucketName: {},
                        ObjectKey: {}
                    }
                }
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SourceColumn" ],
                members: {
                    SourceColumn: {},
                    TargetMultiMeasureAttributeName: {},
                    MeasureValueType: {}
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "DataSourceS3Configuration", "DataFormat" ],
            members: {
                DataSourceS3Configuration: {
                    type: "structure",
                    required: [ "BucketName" ],
                    members: {
                        BucketName: {},
                        ObjectKeyPrefix: {}
                    }
                },
                CsvConfiguration: {
                    type: "structure",
                    members: {
                        ColumnSeparator: {},
                        EscapeChar: {},
                        QuoteChar: {},
                        NullValue: {},
                        TrimWhiteSpace: {
                            type: "boolean"
                        }
                    }
                },
                DataFormat: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                ReportS3Configuration: {
                    type: "structure",
                    required: [ "BucketName" ],
                    members: {
                        BucketName: {},
                        ObjectKeyPrefix: {},
                        EncryptionOption: {},
                        KmsKeyId: {}
                    }
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                Arn: {},
                DatabaseName: {},
                TableCount: {
                    type: "long"
                },
                KmsKeyId: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "MemoryStoreRetentionPeriodInHours", "MagneticStoreRetentionPeriodInDays" ],
            members: {
                MemoryStoreRetentionPeriodInHours: {
                    type: "long"
                },
                MagneticStoreRetentionPeriodInDays: {
                    type: "long"
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "EnableMagneticStoreWrites" ],
            members: {
                EnableMagneticStoreWrites: {
                    type: "boolean"
                },
                MagneticStoreRejectedDataLocation: {
                    type: "structure",
                    members: {
                        S3Configuration: {
                            type: "structure",
                            members: {
                                BucketName: {},
                                ObjectKeyPrefix: {},
                                EncryptionOption: {},
                                KmsKeyId: {}
                            }
                        }
                    }
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                CompositePartitionKey: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {},
                            Name: {},
                            EnforcementInRecord: {}
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                Arn: {},
                TableName: {},
                DatabaseName: {},
                TableStatus: {},
                RetentionProperties: {
                    shape: "S1b"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                MagneticStoreWriteProperties: {
                    shape: "S1e"
                },
                Schema: {
                    shape: "S1h"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                Dimensions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Value" ],
                        members: {
                            Name: {},
                            Value: {},
                            DimensionValueType: {}
                        }
                    }
                },
                MeasureName: {},
                MeasureValue: {},
                MeasureValueType: {},
                Time: {},
                TimeUnit: {},
                Version: {
                    type: "long"
                },
                MeasureValues: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Value", "Type" ],
                        members: {
                            Name: {},
                            Value: {},
                            Type: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListBatchLoadTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDatabases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTables: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["s3outposts"] = {};

AWS.S3Outposts = AWS.Service.defineService("s3outposts", [ "2017-07-25" ]);

AWS.apiLoader.services["s3outposts"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "s3-outposts",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon S3 Outposts",
        serviceFullName: "Amazon S3 on Outposts",
        serviceId: "S3Outposts",
        signatureVersion: "v4",
        signingName: "s3-outposts",
        uid: "s3outposts-2017-07-25"
    },
    operations: {
        CreateEndpoint: {
            http: {
                requestUri: "/S3Outposts/CreateEndpoint"
            },
            input: {
                type: "structure",
                required: [ "OutpostId", "SubnetId", "SecurityGroupId" ],
                members: {
                    OutpostId: {},
                    SubnetId: {},
                    SecurityGroupId: {},
                    AccessType: {},
                    CustomerOwnedIpv4Pool: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointArn: {}
                }
            }
        },
        DeleteEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/S3Outposts/DeleteEndpoint"
            },
            input: {
                type: "structure",
                required: [ "EndpointId", "OutpostId" ],
                members: {
                    EndpointId: {
                        location: "querystring",
                        locationName: "endpointId"
                    },
                    OutpostId: {
                        location: "querystring",
                        locationName: "outpostId"
                    }
                }
            }
        },
        ListEndpoints: {
            http: {
                method: "GET",
                requestUri: "/S3Outposts/ListEndpoints"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoints: {
                        shape: "Sf"
                    },
                    NextToken: {}
                }
            }
        },
        ListOutpostsWithS3: {
            http: {
                method: "GET",
                requestUri: "/S3Outposts/ListOutpostsWithS3"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Outposts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OutpostArn: {},
                                S3OutpostArn: {},
                                OutpostId: {},
                                OwnerId: {},
                                CapacityInBytes: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSharedEndpoints: {
            http: {
                method: "GET",
                requestUri: "/S3Outposts/ListSharedEndpoints"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    OutpostId: {
                        location: "querystring",
                        locationName: "outpostId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoints: {
                        shape: "Sf"
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {
        Sf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndpointArn: {},
                    OutpostsId: {},
                    CidrBlock: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    NetworkInterfaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NetworkInterfaceId: {}
                            }
                        }
                    },
                    VpcId: {},
                    SubnetId: {},
                    SecurityGroupId: {},
                    AccessType: {},
                    CustomerOwnedIpv4Pool: {},
                    FailedReason: {
                        type: "structure",
                        members: {
                            ErrorCode: {},
                            Message: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Endpoints"
        },
        ListOutpostsWithS3: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Outposts"
        },
        ListSharedEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Endpoints"
        }
    }
};

AWS.apiLoader.services["databrew"] = {};

AWS.DataBrew = AWS.Service.defineService("databrew", [ "2017-07-25" ]);

AWS.apiLoader.services["databrew"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "databrew",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Glue DataBrew",
        serviceId: "DataBrew",
        signatureVersion: "v4",
        signingName: "databrew",
        uid: "databrew-2017-07-25"
    },
    operations: {
        BatchDeleteRecipeVersion: {
            http: {
                requestUri: "/recipes/{name}/batchDeleteRecipeVersion"
            },
            input: {
                type: "structure",
                required: [ "Name", "RecipeVersions" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeVersions: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ErrorCode: {},
                                ErrorMessage: {},
                                RecipeVersion: {}
                            }
                        }
                    }
                }
            }
        },
        CreateDataset: {
            http: {
                requestUri: "/datasets"
            },
            input: {
                type: "structure",
                required: [ "Name", "Input" ],
                members: {
                    Name: {},
                    Format: {},
                    FormatOptions: {
                        shape: "Sd"
                    },
                    Input: {
                        shape: "So"
                    },
                    PathOptions: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateProfileJob: {
            http: {
                requestUri: "/profileJobs"
            },
            input: {
                type: "structure",
                required: [ "DatasetName", "Name", "OutputLocation", "RoleArn" ],
                members: {
                    DatasetName: {},
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {},
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    OutputLocation: {
                        shape: "Sp"
                    },
                    Configuration: {
                        shape: "S1x"
                    },
                    ValidationConfigurations: {
                        shape: "S2g"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1m"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    JobSample: {
                        shape: "S2k"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                required: [ "DatasetName", "Name", "RecipeName", "RoleArn" ],
                members: {
                    DatasetName: {},
                    Name: {},
                    RecipeName: {},
                    Sample: {
                        shape: "S2q"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateRecipe: {
            http: {
                requestUri: "/recipes"
            },
            input: {
                type: "structure",
                required: [ "Name", "Steps" ],
                members: {
                    Description: {},
                    Name: {},
                    Steps: {
                        shape: "S2w"
                    },
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateRecipeJob: {
            http: {
                requestUri: "/recipeJobs"
            },
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    DatasetName: {},
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {},
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Outputs: {
                        shape: "S36"
                    },
                    DataCatalogOutputs: {
                        shape: "S3f"
                    },
                    DatabaseOutputs: {
                        shape: "S3j"
                    },
                    ProjectName: {},
                    RecipeReference: {
                        shape: "S3m"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1m"
                    },
                    Timeout: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateRuleset: {
            http: {
                requestUri: "/rulesets"
            },
            input: {
                type: "structure",
                required: [ "Name", "TargetArn", "Rules" ],
                members: {
                    Name: {},
                    Description: {},
                    TargetArn: {},
                    Rules: {
                        shape: "S3r"
                    },
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateSchedule: {
            http: {
                requestUri: "/schedules"
            },
            input: {
                type: "structure",
                required: [ "CronExpression", "Name" ],
                members: {
                    JobNames: {
                        shape: "S41"
                    },
                    CronExpression: {},
                    Tags: {
                        shape: "S1m"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/datasets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteJob: {
            http: {
                method: "DELETE",
                requestUri: "/jobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteRecipeVersion: {
            http: {
                method: "DELETE",
                requestUri: "/recipes/{name}/recipeVersion/{recipeVersion}"
            },
            input: {
                type: "structure",
                required: [ "Name", "RecipeVersion" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeVersion: {
                        location: "uri",
                        locationName: "recipeVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "RecipeVersion" ],
                members: {
                    Name: {},
                    RecipeVersion: {}
                }
            }
        },
        DeleteRuleset: {
            http: {
                method: "DELETE",
                requestUri: "/rulesets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/schedules/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DescribeDataset: {
            http: {
                method: "GET",
                requestUri: "/datasets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Input" ],
                members: {
                    CreatedBy: {},
                    CreateDate: {
                        type: "timestamp"
                    },
                    Name: {},
                    Format: {},
                    FormatOptions: {
                        shape: "Sd"
                    },
                    Input: {
                        shape: "So"
                    },
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    Source: {},
                    PathOptions: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S1m"
                    },
                    ResourceArn: {}
                }
            }
        },
        DescribeJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreateDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {},
                    DatasetName: {},
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {},
                    Type: {},
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Outputs: {
                        shape: "S36"
                    },
                    DataCatalogOutputs: {
                        shape: "S3f"
                    },
                    DatabaseOutputs: {
                        shape: "S3j"
                    },
                    ProjectName: {},
                    ProfileConfiguration: {
                        shape: "S1x"
                    },
                    ValidationConfigurations: {
                        shape: "S2g"
                    },
                    RecipeReference: {
                        shape: "S3m"
                    },
                    ResourceArn: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S1m"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    JobSample: {
                        shape: "S2k"
                    }
                }
            }
        },
        DescribeJobRun: {
            http: {
                method: "GET",
                requestUri: "/jobs/{name}/jobRun/{runId}"
            },
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RunId: {
                        location: "uri",
                        locationName: "runId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    Attempt: {
                        type: "integer"
                    },
                    CompletedOn: {
                        type: "timestamp"
                    },
                    DatasetName: {},
                    ErrorMessage: {},
                    ExecutionTime: {
                        type: "integer"
                    },
                    JobName: {},
                    ProfileConfiguration: {
                        shape: "S1x"
                    },
                    ValidationConfigurations: {
                        shape: "S2g"
                    },
                    RunId: {},
                    State: {},
                    LogSubscription: {},
                    LogGroupName: {},
                    Outputs: {
                        shape: "S36"
                    },
                    DataCatalogOutputs: {
                        shape: "S3f"
                    },
                    DatabaseOutputs: {
                        shape: "S3j"
                    },
                    RecipeReference: {
                        shape: "S3m"
                    },
                    StartedBy: {},
                    StartedOn: {
                        type: "timestamp"
                    },
                    JobSample: {
                        shape: "S2k"
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreateDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {},
                    DatasetName: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    Name: {},
                    RecipeName: {},
                    ResourceArn: {},
                    Sample: {
                        shape: "S2q"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1m"
                    },
                    SessionStatus: {},
                    OpenedBy: {},
                    OpenDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeRecipe: {
            http: {
                method: "GET",
                requestUri: "/recipes/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeVersion: {
                        location: "querystring",
                        locationName: "recipeVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreatedBy: {},
                    CreateDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    ProjectName: {},
                    PublishedBy: {},
                    PublishedDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    Name: {},
                    Steps: {
                        shape: "S2w"
                    },
                    Tags: {
                        shape: "S1m"
                    },
                    ResourceArn: {},
                    RecipeVersion: {}
                }
            }
        },
        DescribeRuleset: {
            http: {
                method: "GET",
                requestUri: "/rulesets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    TargetArn: {},
                    Rules: {
                        shape: "S3r"
                    },
                    CreateDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {},
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    ResourceArn: {},
                    Tags: {
                        shape: "S1m"
                    }
                }
            }
        },
        DescribeSchedule: {
            http: {
                method: "GET",
                requestUri: "/schedules/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreateDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {},
                    JobNames: {
                        shape: "S41"
                    },
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    ResourceArn: {},
                    CronExpression: {},
                    Tags: {
                        shape: "S1m"
                    },
                    Name: {}
                }
            }
        },
        ListDatasets: {
            http: {
                method: "GET",
                requestUri: "/datasets"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Datasets" ],
                members: {
                    Datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Input" ],
                            members: {
                                AccountId: {},
                                CreatedBy: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Format: {},
                                FormatOptions: {
                                    shape: "Sd"
                                },
                                Input: {
                                    shape: "So"
                                },
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {},
                                Source: {},
                                PathOptions: {
                                    shape: "S13"
                                },
                                Tags: {
                                    shape: "S1m"
                                },
                                ResourceArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJobRuns: {
            http: {
                method: "GET",
                requestUri: "/jobs/{name}/jobRuns"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobRuns" ],
                members: {
                    JobRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Attempt: {
                                    type: "integer"
                                },
                                CompletedOn: {
                                    type: "timestamp"
                                },
                                DatasetName: {},
                                ErrorMessage: {},
                                ExecutionTime: {
                                    type: "integer"
                                },
                                JobName: {},
                                RunId: {},
                                State: {},
                                LogSubscription: {},
                                LogGroupName: {},
                                Outputs: {
                                    shape: "S36"
                                },
                                DataCatalogOutputs: {
                                    shape: "S3f"
                                },
                                DatabaseOutputs: {
                                    shape: "S3j"
                                },
                                RecipeReference: {
                                    shape: "S3m"
                                },
                                StartedBy: {},
                                StartedOn: {
                                    type: "timestamp"
                                },
                                JobSample: {
                                    shape: "S2k"
                                },
                                ValidationConfigurations: {
                                    shape: "S2g"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/jobs"
            },
            input: {
                type: "structure",
                members: {
                    DatasetName: {
                        location: "querystring",
                        locationName: "datasetName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ProjectName: {
                        location: "querystring",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Jobs" ],
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                AccountId: {},
                                CreatedBy: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                DatasetName: {},
                                EncryptionKeyArn: {},
                                EncryptionMode: {},
                                Name: {},
                                Type: {},
                                LastModifiedBy: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LogSubscription: {},
                                MaxCapacity: {
                                    type: "integer"
                                },
                                MaxRetries: {
                                    type: "integer"
                                },
                                Outputs: {
                                    shape: "S36"
                                },
                                DataCatalogOutputs: {
                                    shape: "S3f"
                                },
                                DatabaseOutputs: {
                                    shape: "S3j"
                                },
                                ProjectName: {},
                                RecipeReference: {
                                    shape: "S3m"
                                },
                                ResourceArn: {},
                                RoleArn: {},
                                Timeout: {
                                    type: "integer"
                                },
                                Tags: {
                                    shape: "S1m"
                                },
                                JobSample: {
                                    shape: "S2k"
                                },
                                ValidationConfigurations: {
                                    shape: "S2g"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Projects" ],
                members: {
                    Projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "RecipeName" ],
                            members: {
                                AccountId: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                CreatedBy: {},
                                DatasetName: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {},
                                Name: {},
                                RecipeName: {},
                                ResourceArn: {},
                                Sample: {
                                    shape: "S2q"
                                },
                                Tags: {
                                    shape: "S1m"
                                },
                                RoleArn: {},
                                OpenedBy: {},
                                OpenDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecipeVersions: {
            http: {
                method: "GET",
                requestUri: "/recipeVersions"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Recipes" ],
                members: {
                    NextToken: {},
                    Recipes: {
                        shape: "S5v"
                    }
                }
            }
        },
        ListRecipes: {
            http: {
                method: "GET",
                requestUri: "/recipes"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RecipeVersion: {
                        location: "querystring",
                        locationName: "recipeVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Recipes" ],
                members: {
                    Recipes: {
                        shape: "S5v"
                    },
                    NextToken: {}
                }
            }
        },
        ListRulesets: {
            http: {
                method: "GET",
                requestUri: "/rulesets"
            },
            input: {
                type: "structure",
                members: {
                    TargetArn: {
                        location: "querystring",
                        locationName: "targetArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Rulesets" ],
                members: {
                    Rulesets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "TargetArn" ],
                            members: {
                                AccountId: {},
                                CreatedBy: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                Description: {},
                                LastModifiedBy: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                ResourceArn: {},
                                RuleCount: {
                                    type: "integer"
                                },
                                Tags: {
                                    shape: "S1m"
                                },
                                TargetArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSchedules: {
            http: {
                method: "GET",
                requestUri: "/schedules"
            },
            input: {
                type: "structure",
                members: {
                    JobName: {
                        location: "querystring",
                        locationName: "jobName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Schedules" ],
                members: {
                    Schedules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                AccountId: {},
                                CreatedBy: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                JobNames: {
                                    shape: "S41"
                                },
                                LastModifiedBy: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                ResourceArn: {},
                                CronExpression: {},
                                Tags: {
                                    shape: "S1m"
                                },
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1m"
                    }
                }
            }
        },
        PublishRecipe: {
            http: {
                requestUri: "/recipes/{name}/publishRecipe"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Description: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        SendProjectSessionAction: {
            http: {
                method: "PUT",
                requestUri: "/projects/{name}/sendProjectSessionAction"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Preview: {
                        type: "boolean"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeStep: {
                        shape: "S2x"
                    },
                    StepIndex: {
                        type: "integer"
                    },
                    ClientSessionId: {
                        shape: "S6f"
                    },
                    ViewFrame: {
                        type: "structure",
                        required: [ "StartColumnIndex" ],
                        members: {
                            StartColumnIndex: {
                                type: "integer"
                            },
                            ColumnRange: {
                                type: "integer"
                            },
                            HiddenColumns: {
                                type: "list",
                                member: {}
                            },
                            StartRowIndex: {
                                type: "integer"
                            },
                            RowRange: {
                                type: "integer"
                            },
                            Analytics: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Result: {},
                    Name: {},
                    ActionId: {
                        type: "integer"
                    }
                }
            }
        },
        StartJobRun: {
            http: {
                requestUri: "/jobs/{name}/startJobRun"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            }
        },
        StartProjectSession: {
            http: {
                method: "PUT",
                requestUri: "/projects/{name}/startProjectSession"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    AssumeControl: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    ClientSessionId: {
                        shape: "S6f"
                    }
                }
            }
        },
        StopJobRun: {
            http: {
                requestUri: "/jobs/{name}/jobRun/{runId}/stopJobRun"
            },
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RunId: {
                        location: "uri",
                        locationName: "runId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataset: {
            http: {
                method: "PUT",
                requestUri: "/datasets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "Input" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Format: {},
                    FormatOptions: {
                        shape: "Sd"
                    },
                    Input: {
                        shape: "So"
                    },
                    PathOptions: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateProfileJob: {
            http: {
                method: "PUT",
                requestUri: "/profileJobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "OutputLocation", "RoleArn" ],
                members: {
                    Configuration: {
                        shape: "S1x"
                    },
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    OutputLocation: {
                        shape: "Sp"
                    },
                    ValidationConfigurations: {
                        shape: "S2g"
                    },
                    RoleArn: {},
                    Timeout: {
                        type: "integer"
                    },
                    JobSample: {
                        shape: "S2k"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateProject: {
            http: {
                method: "PUT",
                requestUri: "/projects/{name}"
            },
            input: {
                type: "structure",
                required: [ "RoleArn", "Name" ],
                members: {
                    Sample: {
                        shape: "S2q"
                    },
                    RoleArn: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    Name: {}
                }
            }
        },
        UpdateRecipe: {
            http: {
                method: "PUT",
                requestUri: "/recipes/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Description: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Steps: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateRecipeJob: {
            http: {
                method: "PUT",
                requestUri: "/recipeJobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Outputs: {
                        shape: "S36"
                    },
                    DataCatalogOutputs: {
                        shape: "S3f"
                    },
                    DatabaseOutputs: {
                        shape: "S3j"
                    },
                    RoleArn: {},
                    Timeout: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateRuleset: {
            http: {
                method: "PUT",
                requestUri: "/rulesets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "Rules" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Description: {},
                    Rules: {
                        shape: "S3r"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateSchedule: {
            http: {
                method: "PUT",
                requestUri: "/schedules/{name}"
            },
            input: {
                type: "structure",
                required: [ "CronExpression", "Name" ],
                members: {
                    JobNames: {
                        shape: "S41"
                    },
                    CronExpression: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "structure",
            members: {
                Json: {
                    type: "structure",
                    members: {
                        MultiLine: {
                            type: "boolean"
                        }
                    }
                },
                Excel: {
                    type: "structure",
                    members: {
                        SheetNames: {
                            type: "list",
                            member: {}
                        },
                        SheetIndexes: {
                            type: "list",
                            member: {
                                type: "integer"
                            }
                        },
                        HeaderRow: {
                            type: "boolean"
                        }
                    }
                },
                Csv: {
                    type: "structure",
                    members: {
                        Delimiter: {},
                        HeaderRow: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        So: {
            type: "structure",
            members: {
                S3InputDefinition: {
                    shape: "Sp"
                },
                DataCatalogInputDefinition: {
                    type: "structure",
                    required: [ "DatabaseName", "TableName" ],
                    members: {
                        CatalogId: {},
                        DatabaseName: {},
                        TableName: {},
                        TempDirectory: {
                            shape: "Sp"
                        }
                    }
                },
                DatabaseInputDefinition: {
                    type: "structure",
                    required: [ "GlueConnectionName" ],
                    members: {
                        GlueConnectionName: {},
                        DatabaseTableName: {},
                        TempDirectory: {
                            shape: "Sp"
                        },
                        QueryString: {}
                    }
                },
                Metadata: {
                    type: "structure",
                    members: {
                        SourceArn: {}
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "Bucket" ],
            members: {
                Bucket: {},
                Key: {},
                BucketOwner: {}
            }
        },
        S13: {
            type: "structure",
            members: {
                LastModifiedDateCondition: {
                    shape: "S14"
                },
                FilesLimit: {
                    type: "structure",
                    required: [ "MaxFiles" ],
                    members: {
                        MaxFiles: {
                            type: "integer"
                        },
                        OrderedBy: {},
                        Order: {}
                    }
                },
                Parameters: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "Name", "Type" ],
                        members: {
                            Name: {},
                            Type: {},
                            DatetimeOptions: {
                                type: "structure",
                                required: [ "Format" ],
                                members: {
                                    Format: {},
                                    TimezoneOffset: {},
                                    LocaleCode: {}
                                }
                            },
                            CreateColumn: {
                                type: "boolean"
                            },
                            Filter: {
                                shape: "S14"
                            }
                        }
                    }
                }
            }
        },
        S14: {
            type: "structure",
            required: [ "Expression", "ValuesMap" ],
            members: {
                Expression: {},
                ValuesMap: {
                    shape: "S16"
                }
            }
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S1m: {
            type: "map",
            key: {},
            value: {}
        },
        S1x: {
            type: "structure",
            members: {
                DatasetStatisticsConfiguration: {
                    shape: "S1y"
                },
                ProfileColumns: {
                    shape: "S26"
                },
                ColumnStatisticsConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Statistics" ],
                        members: {
                            Selectors: {
                                shape: "S26"
                            },
                            Statistics: {
                                shape: "S1y"
                            }
                        }
                    }
                },
                EntityDetectorConfiguration: {
                    type: "structure",
                    required: [ "EntityTypes" ],
                    members: {
                        EntityTypes: {
                            type: "list",
                            member: {}
                        },
                        AllowedStatistics: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Statistics" ],
                                members: {
                                    Statistics: {
                                        shape: "S1z"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                IncludedStatistics: {
                    shape: "S1z"
                },
                Overrides: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Statistic", "Parameters" ],
                        members: {
                            Statistic: {},
                            Parameters: {
                                shape: "S23"
                            }
                        }
                    }
                }
            }
        },
        S1z: {
            type: "list",
            member: {}
        },
        S23: {
            type: "map",
            key: {},
            value: {}
        },
        S26: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Regex: {},
                    Name: {}
                }
            }
        },
        S2g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RulesetArn" ],
                members: {
                    RulesetArn: {},
                    ValidationMode: {}
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                Mode: {},
                Size: {
                    type: "long"
                }
            }
        },
        S2q: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Size: {
                    type: "integer"
                },
                Type: {}
            }
        },
        S2w: {
            type: "list",
            member: {
                shape: "S2x"
            }
        },
        S2x: {
            type: "structure",
            required: [ "Action" ],
            members: {
                Action: {
                    type: "structure",
                    required: [ "Operation" ],
                    members: {
                        Operation: {},
                        Parameters: {
                            shape: "S23"
                        }
                    }
                },
                ConditionExpressions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Condition", "TargetColumn" ],
                        members: {
                            Condition: {},
                            Value: {},
                            TargetColumn: {}
                        }
                    }
                }
            }
        },
        S36: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Location" ],
                members: {
                    CompressionFormat: {},
                    Format: {},
                    PartitionColumns: {
                        type: "list",
                        member: {}
                    },
                    Location: {
                        shape: "Sp"
                    },
                    Overwrite: {
                        type: "boolean"
                    },
                    FormatOptions: {
                        type: "structure",
                        members: {
                            Csv: {
                                type: "structure",
                                members: {
                                    Delimiter: {}
                                }
                            }
                        }
                    },
                    MaxOutputFiles: {
                        type: "integer"
                    }
                }
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    S3Options: {
                        type: "structure",
                        required: [ "Location" ],
                        members: {
                            Location: {
                                shape: "Sp"
                            }
                        }
                    },
                    DatabaseOptions: {
                        shape: "S3i"
                    },
                    Overwrite: {
                        type: "boolean"
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            required: [ "TableName" ],
            members: {
                TempDirectory: {
                    shape: "Sp"
                },
                TableName: {}
            }
        },
        S3j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "GlueConnectionName", "DatabaseOptions" ],
                members: {
                    GlueConnectionName: {},
                    DatabaseOptions: {
                        shape: "S3i"
                    },
                    DatabaseOutputMode: {}
                }
            }
        },
        S3m: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                RecipeVersion: {}
            }
        },
        S3r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "CheckExpression" ],
                members: {
                    Name: {},
                    Disabled: {
                        type: "boolean"
                    },
                    CheckExpression: {},
                    SubstitutionMap: {
                        shape: "S16"
                    },
                    Threshold: {
                        type: "structure",
                        required: [ "Value" ],
                        members: {
                            Value: {
                                type: "double"
                            },
                            Type: {},
                            Unit: {}
                        }
                    },
                    ColumnSelectors: {
                        shape: "S26"
                    }
                }
            }
        },
        S41: {
            type: "list",
            member: {}
        },
        S5v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreatedBy: {},
                    CreateDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    ProjectName: {},
                    PublishedBy: {},
                    PublishedDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    Name: {},
                    ResourceArn: {},
                    Steps: {
                        shape: "S2w"
                    },
                    Tags: {
                        shape: "S1m"
                    },
                    RecipeVersion: {}
                }
            }
        },
        S6f: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListDatasets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Datasets"
        },
        ListJobRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "JobRuns"
        },
        ListJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Jobs"
        },
        ListProjects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Projects"
        },
        ListRecipeVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Recipes"
        },
        ListRecipes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Recipes"
        },
        ListRulesets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Rulesets"
        },
        ListSchedules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Schedules"
        }
    }
};

AWS.apiLoader.services["servicecatalogappregistry"] = {};

AWS.ServiceCatalogAppRegistry = AWS.Service.defineService("servicecatalogappregistry", [ "2020-06-24" ]);

AWS.apiLoader.services["servicecatalogappregistry"]["2020-06-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-06-24",
        endpointPrefix: "servicecatalog-appregistry",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AppRegistry",
        serviceFullName: "AWS Service Catalog App Registry",
        serviceId: "Service Catalog AppRegistry",
        signatureVersion: "v4",
        signingName: "servicecatalog",
        uid: "AWS242AppRegistry-2020-06-24"
    },
    operations: {
        AssociateAttributeGroup: {
            http: {
                method: "PUT",
                requestUri: "/applications/{application}/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "application", "attributeGroup" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    attributeGroupArn: {}
                }
            }
        },
        AssociateResource: {
            http: {
                method: "PUT",
                requestUri: "/applications/{application}/resources/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "application", "resourceType", "resource" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    },
                    options: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    resourceArn: {},
                    options: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    application: {
                        shape: "Sm"
                    }
                }
            }
        },
        CreateAttributeGroup: {
            http: {
                requestUri: "/attribute-groups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "attributes", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    attributes: {},
                    tags: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroup: {
                        shape: "St"
                    }
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{application}"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    application: {
                        shape: "Sx"
                    }
                }
            }
        },
        DeleteAttributeGroup: {
            http: {
                method: "DELETE",
                requestUri: "/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "attributeGroup" ],
                members: {
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroup: {
                        shape: "S10"
                    }
                }
            }
        },
        DisassociateAttributeGroup: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{application}/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "application", "attributeGroup" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    attributeGroupArn: {}
                }
            }
        },
        DisassociateResource: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{application}/resources/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "application", "resourceType", "resource" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    resourceArn: {}
                }
            }
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    creationTime: {
                        shape: "So"
                    },
                    lastUpdateTime: {
                        shape: "So"
                    },
                    associatedResourceCount: {
                        type: "integer"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    integrations: {
                        type: "structure",
                        members: {
                            resourceGroup: {
                                shape: "S1a"
                            },
                            applicationTagResourceGroup: {
                                shape: "S1a"
                            }
                        }
                    },
                    applicationTag: {
                        shape: "Sp"
                    }
                }
            }
        },
        GetAssociatedResource: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}/resources/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "application", "resourceType", "resource" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    resourceTagStatus: {
                        location: "querystring",
                        locationName: "resourceTagStatus",
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resource: {
                        type: "structure",
                        members: {
                            name: {},
                            arn: {},
                            associationTime: {
                                shape: "So"
                            },
                            integrations: {
                                type: "structure",
                                members: {
                                    resourceGroup: {
                                        shape: "S1a"
                                    }
                                }
                            }
                        }
                    },
                    options: {
                        shape: "Sa"
                    },
                    applicationTagResult: {
                        type: "structure",
                        members: {
                            applicationTagStatus: {},
                            errorMessage: {},
                            resources: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        resourceArn: {},
                                        errorMessage: {},
                                        status: {},
                                        resourceType: {}
                                    }
                                }
                            },
                            nextToken: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        GetAttributeGroup: {
            http: {
                method: "GET",
                requestUri: "/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "attributeGroup" ],
                members: {
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    attributes: {},
                    creationTime: {
                        shape: "So"
                    },
                    lastUpdateTime: {
                        shape: "So"
                    },
                    tags: {
                        shape: "Sh"
                    },
                    createdBy: {}
                }
            }
        },
        GetConfiguration: {
            http: {
                method: "GET",
                requestUri: "/configuration"
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S1u"
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applications: {
                        type: "list",
                        member: {
                            shape: "Sx"
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListAssociatedAttributeGroups: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}/attribute-groups"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroups: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListAssociatedResources: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}/resources"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                resourceType: {},
                                resourceDetails: {
                                    type: "structure",
                                    members: {
                                        tagValue: {}
                                    }
                                },
                                options: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListAttributeGroups: {
            http: {
                method: "GET",
                requestUri: "/attribute-groups"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroups: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListAttributeGroupsForApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}/attribute-group-details"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroupsDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                createdBy: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        PutConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/configuration"
            },
            input: {
                type: "structure",
                required: [ "configuration" ],
                members: {
                    configuration: {
                        shape: "S1u"
                    }
                }
            }
        },
        SyncResource: {
            http: {
                requestUri: "/sync/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "resourceType", "resource" ],
                members: {
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    resourceArn: {},
                    actionTaken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{application}"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    name: {
                        deprecated: true,
                        deprecatedMessage: "Name update for application is deprecated."
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    application: {
                        shape: "Sm"
                    }
                }
            }
        },
        UpdateAttributeGroup: {
            http: {
                method: "PATCH",
                requestUri: "/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "attributeGroup" ],
                members: {
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    },
                    name: {
                        deprecated: true,
                        deprecatedMessage: "Name update for attribute group is deprecated."
                    },
                    description: {},
                    attributes: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroup: {
                        shape: "St"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "So"
                },
                lastUpdateTime: {
                    shape: "So"
                },
                tags: {
                    shape: "Sh"
                },
                applicationTag: {
                    shape: "Sp"
                }
            }
        },
        So: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sp: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "So"
                },
                lastUpdateTime: {
                    shape: "So"
                },
                tags: {
                    shape: "Sh"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "So"
                },
                lastUpdateTime: {
                    shape: "So"
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "So"
                },
                lastUpdateTime: {
                    shape: "So"
                },
                createdBy: {}
            }
        },
        S1a: {
            type: "structure",
            members: {
                state: {},
                arn: {},
                errorMessage: {}
            }
        },
        S1u: {
            type: "structure",
            members: {
                tagQueryConfiguration: {
                    type: "structure",
                    members: {
                        tagKey: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applications"
        },
        ListAssociatedAttributeGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "attributeGroups"
        },
        ListAssociatedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "resources"
        },
        ListAttributeGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "attributeGroups"
        },
        ListAttributeGroupsForApplication: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "attributeGroupsDetails"
        }
    }
};

AWS.apiLoader.services["networkfirewall"] = {};

AWS.NetworkFirewall = AWS.Service.defineService("networkfirewall", [ "2020-11-12" ]);

AWS.apiLoader.services["networkfirewall"]["2020-11-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-12",
        endpointPrefix: "network-firewall",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Network Firewall",
        serviceFullName: "AWS Network Firewall",
        serviceId: "Network Firewall",
        signatureVersion: "v4",
        signingName: "network-firewall",
        targetPrefix: "NetworkFirewall_20201112",
        uid: "network-firewall-2020-11-12"
    },
    operations: {
        AssociateFirewallPolicy: {
            input: {
                type: "structure",
                required: [ "FirewallPolicyArn" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyArn: {},
                    UpdateToken: {}
                }
            }
        },
        AssociateSubnets: {
            input: {
                type: "structure",
                required: [ "SubnetMappings" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetMappings: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetMappings: {
                        shape: "S7"
                    },
                    UpdateToken: {}
                }
            }
        },
        CreateFirewall: {
            input: {
                type: "structure",
                required: [ "FirewallName", "FirewallPolicyArn", "VpcId", "SubnetMappings" ],
                members: {
                    FirewallName: {},
                    FirewallPolicyArn: {},
                    VpcId: {},
                    SubnetMappings: {
                        shape: "S7"
                    },
                    DeleteProtection: {
                        type: "boolean"
                    },
                    SubnetChangeProtection: {
                        type: "boolean"
                    },
                    FirewallPolicyChangeProtection: {
                        type: "boolean"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sg"
                    },
                    EncryptionConfiguration: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Firewall: {
                        shape: "So"
                    },
                    FirewallStatus: {
                        shape: "Sq"
                    }
                }
            }
        },
        CreateFirewallPolicy: {
            input: {
                type: "structure",
                required: [ "FirewallPolicyName", "FirewallPolicy" ],
                members: {
                    FirewallPolicyName: {},
                    FirewallPolicy: {
                        shape: "S1b"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sg"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    EncryptionConfiguration: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicyResponse" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyResponse: {
                        shape: "S23"
                    }
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupName", "Type", "Capacity" ],
                members: {
                    RuleGroupName: {},
                    RuleGroup: {
                        shape: "S29"
                    },
                    Rules: {},
                    Type: {},
                    Description: {},
                    Capacity: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sg"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    EncryptionConfiguration: {
                        shape: "Sk"
                    },
                    SourceMetadata: {
                        shape: "S3l"
                    },
                    AnalyzeRuleGroup: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "RuleGroupResponse" ],
                members: {
                    UpdateToken: {},
                    RuleGroupResponse: {
                        shape: "S3n"
                    }
                }
            }
        },
        CreateTLSInspectionConfiguration: {
            input: {
                type: "structure",
                required: [ "TLSInspectionConfigurationName", "TLSInspectionConfiguration" ],
                members: {
                    TLSInspectionConfigurationName: {},
                    TLSInspectionConfiguration: {
                        shape: "S3t"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sg"
                    },
                    EncryptionConfiguration: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "TLSInspectionConfigurationResponse" ],
                members: {
                    UpdateToken: {},
                    TLSInspectionConfigurationResponse: {
                        shape: "S43"
                    }
                }
            }
        },
        DeleteFirewall: {
            input: {
                type: "structure",
                members: {
                    FirewallName: {},
                    FirewallArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Firewall: {
                        shape: "So"
                    },
                    FirewallStatus: {
                        shape: "Sq"
                    }
                }
            }
        },
        DeleteFirewallPolicy: {
            input: {
                type: "structure",
                members: {
                    FirewallPolicyName: {},
                    FirewallPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FirewallPolicyResponse" ],
                members: {
                    FirewallPolicyResponse: {
                        shape: "S23"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupName: {},
                    RuleGroupArn: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RuleGroupResponse" ],
                members: {
                    RuleGroupResponse: {
                        shape: "S3n"
                    }
                }
            }
        },
        DeleteTLSInspectionConfiguration: {
            input: {
                type: "structure",
                members: {
                    TLSInspectionConfigurationArn: {},
                    TLSInspectionConfigurationName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TLSInspectionConfigurationResponse" ],
                members: {
                    TLSInspectionConfigurationResponse: {
                        shape: "S43"
                    }
                }
            }
        },
        DescribeFirewall: {
            input: {
                type: "structure",
                members: {
                    FirewallName: {},
                    FirewallArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    Firewall: {
                        shape: "So"
                    },
                    FirewallStatus: {
                        shape: "Sq"
                    }
                }
            }
        },
        DescribeFirewallPolicy: {
            input: {
                type: "structure",
                members: {
                    FirewallPolicyName: {},
                    FirewallPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicyResponse" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyResponse: {
                        shape: "S23"
                    },
                    FirewallPolicy: {
                        shape: "S1b"
                    }
                }
            }
        },
        DescribeLoggingConfiguration: {
            input: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    LoggingConfiguration: {
                        shape: "S4n"
                    }
                }
            }
        },
        DescribeResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        DescribeRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupName: {},
                    RuleGroupArn: {},
                    Type: {},
                    AnalyzeRuleGroup: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "RuleGroupResponse" ],
                members: {
                    UpdateToken: {},
                    RuleGroup: {
                        shape: "S29"
                    },
                    RuleGroupResponse: {
                        shape: "S3n"
                    }
                }
            }
        },
        DescribeRuleGroupMetadata: {
            input: {
                type: "structure",
                members: {
                    RuleGroupName: {},
                    RuleGroupArn: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RuleGroupArn", "RuleGroupName" ],
                members: {
                    RuleGroupArn: {},
                    RuleGroupName: {},
                    Description: {},
                    Type: {},
                    Capacity: {
                        type: "integer"
                    },
                    StatefulRuleOptions: {
                        shape: "S3j"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeTLSInspectionConfiguration: {
            input: {
                type: "structure",
                members: {
                    TLSInspectionConfigurationArn: {},
                    TLSInspectionConfigurationName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "TLSInspectionConfigurationResponse" ],
                members: {
                    UpdateToken: {},
                    TLSInspectionConfiguration: {
                        shape: "S3t"
                    },
                    TLSInspectionConfigurationResponse: {
                        shape: "S43"
                    }
                }
            }
        },
        DisassociateSubnets: {
            input: {
                type: "structure",
                required: [ "SubnetIds" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetMappings: {
                        shape: "S7"
                    },
                    UpdateToken: {}
                }
            }
        },
        ListFirewallPolicies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewalls: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    VpcIds: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Firewalls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FirewallName: {},
                                FirewallArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Scope: {},
                    ManagedType: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTLSInspectionConfigurations: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TLSInspectionConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFirewallDeleteProtection: {
            input: {
                type: "structure",
                required: [ "DeleteProtection" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    DeleteProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    DeleteProtection: {
                        type: "boolean"
                    },
                    UpdateToken: {}
                }
            }
        },
        UpdateFirewallDescription: {
            input: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    Description: {},
                    UpdateToken: {}
                }
            }
        },
        UpdateFirewallEncryptionConfiguration: {
            input: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    EncryptionConfiguration: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    UpdateToken: {},
                    EncryptionConfiguration: {
                        shape: "Sk"
                    }
                }
            }
        },
        UpdateFirewallPolicy: {
            input: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicy" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyArn: {},
                    FirewallPolicyName: {},
                    FirewallPolicy: {
                        shape: "S1b"
                    },
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    },
                    EncryptionConfiguration: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicyResponse" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyResponse: {
                        shape: "S23"
                    }
                }
            }
        },
        UpdateFirewallPolicyChangeProtection: {
            input: {
                type: "structure",
                required: [ "FirewallPolicyChangeProtection" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyChangeProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyChangeProtection: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateLoggingConfiguration: {
            input: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    LoggingConfiguration: {
                        shape: "S4n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    LoggingConfiguration: {
                        shape: "S4n"
                    }
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "UpdateToken" ],
                members: {
                    UpdateToken: {},
                    RuleGroupArn: {},
                    RuleGroupName: {},
                    RuleGroup: {
                        shape: "S29"
                    },
                    Rules: {},
                    Type: {},
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    },
                    EncryptionConfiguration: {
                        shape: "Sk"
                    },
                    SourceMetadata: {
                        shape: "S3l"
                    },
                    AnalyzeRuleGroup: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "RuleGroupResponse" ],
                members: {
                    UpdateToken: {},
                    RuleGroupResponse: {
                        shape: "S3n"
                    }
                }
            }
        },
        UpdateSubnetChangeProtection: {
            input: {
                type: "structure",
                required: [ "SubnetChangeProtection" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetChangeProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetChangeProtection: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateTLSInspectionConfiguration: {
            input: {
                type: "structure",
                required: [ "TLSInspectionConfiguration", "UpdateToken" ],
                members: {
                    TLSInspectionConfigurationArn: {},
                    TLSInspectionConfigurationName: {},
                    TLSInspectionConfiguration: {
                        shape: "S3t"
                    },
                    Description: {},
                    EncryptionConfiguration: {
                        shape: "Sk"
                    },
                    UpdateToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "TLSInspectionConfigurationResponse" ],
                members: {
                    UpdateToken: {},
                    TLSInspectionConfigurationResponse: {
                        shape: "S43"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    SubnetId: {},
                    IPAddressType: {}
                }
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "Type" ],
            members: {
                KeyId: {},
                Type: {}
            }
        },
        So: {
            type: "structure",
            required: [ "FirewallPolicyArn", "VpcId", "SubnetMappings", "FirewallId" ],
            members: {
                FirewallName: {},
                FirewallArn: {},
                FirewallPolicyArn: {},
                VpcId: {},
                SubnetMappings: {
                    shape: "S7"
                },
                DeleteProtection: {
                    type: "boolean"
                },
                SubnetChangeProtection: {
                    type: "boolean"
                },
                FirewallPolicyChangeProtection: {
                    type: "boolean"
                },
                Description: {},
                FirewallId: {},
                Tags: {
                    shape: "Sg"
                },
                EncryptionConfiguration: {
                    shape: "Sk"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "Status", "ConfigurationSyncStateSummary" ],
            members: {
                Status: {},
                ConfigurationSyncStateSummary: {},
                SyncStates: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            Attachment: {
                                type: "structure",
                                members: {
                                    SubnetId: {},
                                    EndpointId: {},
                                    Status: {},
                                    StatusMessage: {}
                                }
                            },
                            Config: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        SyncStatus: {},
                                        UpdateToken: {}
                                    }
                                }
                            }
                        }
                    }
                },
                CapacityUsageSummary: {
                    type: "structure",
                    members: {
                        CIDRs: {
                            type: "structure",
                            members: {
                                AvailableCIDRCount: {
                                    type: "integer"
                                },
                                UtilizedCIDRCount: {
                                    type: "integer"
                                },
                                IPSetReferences: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "structure",
                                        members: {
                                            ResolvedCIDRCount: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "StatelessDefaultActions", "StatelessFragmentDefaultActions" ],
            members: {
                StatelessRuleGroupReferences: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ResourceArn", "Priority" ],
                        members: {
                            ResourceArn: {},
                            Priority: {
                                type: "integer"
                            }
                        }
                    }
                },
                StatelessDefaultActions: {
                    shape: "S1f"
                },
                StatelessFragmentDefaultActions: {
                    shape: "S1f"
                },
                StatelessCustomActions: {
                    shape: "S1g"
                },
                StatefulRuleGroupReferences: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ResourceArn" ],
                        members: {
                            ResourceArn: {},
                            Priority: {
                                type: "integer"
                            },
                            Override: {
                                type: "structure",
                                members: {
                                    Action: {}
                                }
                            }
                        }
                    }
                },
                StatefulDefaultActions: {
                    type: "list",
                    member: {}
                },
                StatefulEngineOptions: {
                    type: "structure",
                    members: {
                        RuleOrder: {},
                        StreamExceptionPolicy: {}
                    }
                },
                TLSInspectionConfigurationArn: {},
                PolicyVariables: {
                    type: "structure",
                    members: {
                        RuleVariables: {
                            shape: "S1x"
                        }
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ActionName", "ActionDefinition" ],
                members: {
                    ActionName: {},
                    ActionDefinition: {
                        type: "structure",
                        members: {
                            PublishMetricAction: {
                                type: "structure",
                                required: [ "Dimensions" ],
                                members: {
                                    Dimensions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Value" ],
                                            members: {
                                                Value: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Definition" ],
                members: {
                    Definition: {
                        shape: "S20"
                    }
                }
            }
        },
        S20: {
            type: "list",
            member: {}
        },
        S23: {
            type: "structure",
            required: [ "FirewallPolicyName", "FirewallPolicyArn", "FirewallPolicyId" ],
            members: {
                FirewallPolicyName: {},
                FirewallPolicyArn: {},
                FirewallPolicyId: {},
                Description: {},
                FirewallPolicyStatus: {},
                Tags: {
                    shape: "Sg"
                },
                ConsumedStatelessRuleCapacity: {
                    type: "integer"
                },
                ConsumedStatefulRuleCapacity: {
                    type: "integer"
                },
                NumberOfAssociations: {
                    type: "integer"
                },
                EncryptionConfiguration: {
                    shape: "Sk"
                },
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        S29: {
            type: "structure",
            required: [ "RulesSource" ],
            members: {
                RuleVariables: {
                    type: "structure",
                    members: {
                        IPSets: {
                            shape: "S1x"
                        },
                        PortSets: {
                            type: "map",
                            key: {},
                            value: {
                                type: "structure",
                                members: {
                                    Definition: {
                                        shape: "S20"
                                    }
                                }
                            }
                        }
                    }
                },
                ReferenceSets: {
                    type: "structure",
                    members: {
                        IPSetReferences: {
                            type: "map",
                            key: {},
                            value: {
                                type: "structure",
                                members: {
                                    ReferenceArn: {}
                                }
                            }
                        }
                    }
                },
                RulesSource: {
                    type: "structure",
                    members: {
                        RulesString: {},
                        RulesSourceList: {
                            type: "structure",
                            required: [ "Targets", "TargetTypes", "GeneratedRulesType" ],
                            members: {
                                Targets: {
                                    type: "list",
                                    member: {}
                                },
                                TargetTypes: {
                                    type: "list",
                                    member: {}
                                },
                                GeneratedRulesType: {}
                            }
                        },
                        StatefulRules: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Action", "Header", "RuleOptions" ],
                                members: {
                                    Action: {},
                                    Header: {
                                        type: "structure",
                                        required: [ "Protocol", "Source", "SourcePort", "Direction", "Destination", "DestinationPort" ],
                                        members: {
                                            Protocol: {},
                                            Source: {},
                                            SourcePort: {},
                                            Direction: {},
                                            Destination: {},
                                            DestinationPort: {}
                                        }
                                    },
                                    RuleOptions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Keyword" ],
                                            members: {
                                                Keyword: {},
                                                Settings: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        StatelessRulesAndCustomActions: {
                            type: "structure",
                            required: [ "StatelessRules" ],
                            members: {
                                StatelessRules: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "RuleDefinition", "Priority" ],
                                        members: {
                                            RuleDefinition: {
                                                type: "structure",
                                                required: [ "MatchAttributes", "Actions" ],
                                                members: {
                                                    MatchAttributes: {
                                                        type: "structure",
                                                        members: {
                                                            Sources: {
                                                                shape: "S37"
                                                            },
                                                            Destinations: {
                                                                shape: "S37"
                                                            },
                                                            SourcePorts: {
                                                                shape: "S3a"
                                                            },
                                                            DestinationPorts: {
                                                                shape: "S3a"
                                                            },
                                                            Protocols: {
                                                                shape: "S3d"
                                                            },
                                                            TCPFlags: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    required: [ "Flags" ],
                                                                    members: {
                                                                        Flags: {
                                                                            shape: "S3h"
                                                                        },
                                                                        Masks: {
                                                                            shape: "S3h"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    Actions: {
                                                        shape: "S1f"
                                                    }
                                                }
                                            },
                                            Priority: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                CustomActions: {
                                    shape: "S1g"
                                }
                            }
                        }
                    }
                },
                StatefulRuleOptions: {
                    shape: "S3j"
                }
            }
        },
        S37: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AddressDefinition" ],
                members: {
                    AddressDefinition: {}
                }
            }
        },
        S3a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FromPort", "ToPort" ],
                members: {
                    FromPort: {
                        type: "integer"
                    },
                    ToPort: {
                        type: "integer"
                    }
                }
            }
        },
        S3d: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S3h: {
            type: "list",
            member: {}
        },
        S3j: {
            type: "structure",
            members: {
                RuleOrder: {}
            }
        },
        S3l: {
            type: "structure",
            members: {
                SourceArn: {},
                SourceUpdateToken: {}
            }
        },
        S3n: {
            type: "structure",
            required: [ "RuleGroupArn", "RuleGroupName", "RuleGroupId" ],
            members: {
                RuleGroupArn: {},
                RuleGroupName: {},
                RuleGroupId: {},
                Description: {},
                Type: {},
                Capacity: {
                    type: "integer"
                },
                RuleGroupStatus: {},
                Tags: {
                    shape: "Sg"
                },
                ConsumedCapacity: {
                    type: "integer"
                },
                NumberOfAssociations: {
                    type: "integer"
                },
                EncryptionConfiguration: {
                    shape: "Sk"
                },
                SourceMetadata: {
                    shape: "S3l"
                },
                SnsTopic: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                AnalysisResults: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            IdentifiedRuleIds: {
                                type: "list",
                                member: {}
                            },
                            IdentifiedType: {},
                            AnalysisDetail: {}
                        }
                    }
                }
            }
        },
        S3t: {
            type: "structure",
            members: {
                ServerCertificateConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ServerCertificates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ResourceArn: {}
                                    }
                                }
                            },
                            Scopes: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Sources: {
                                            shape: "S37"
                                        },
                                        Destinations: {
                                            shape: "S37"
                                        },
                                        SourcePorts: {
                                            shape: "S3a"
                                        },
                                        DestinationPorts: {
                                            shape: "S3a"
                                        },
                                        Protocols: {
                                            shape: "S3d"
                                        }
                                    }
                                }
                            },
                            CertificateAuthorityArn: {},
                            CheckCertificateRevocationStatus: {
                                type: "structure",
                                members: {
                                    RevokedStatusAction: {},
                                    UnknownStatusAction: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S43: {
            type: "structure",
            required: [ "TLSInspectionConfigurationArn", "TLSInspectionConfigurationName", "TLSInspectionConfigurationId" ],
            members: {
                TLSInspectionConfigurationArn: {},
                TLSInspectionConfigurationName: {},
                TLSInspectionConfigurationId: {},
                TLSInspectionConfigurationStatus: {},
                Description: {},
                Tags: {
                    shape: "Sg"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                NumberOfAssociations: {
                    type: "integer"
                },
                EncryptionConfiguration: {
                    shape: "Sk"
                },
                Certificates: {
                    type: "list",
                    member: {
                        shape: "S45"
                    }
                },
                CertificateAuthority: {
                    shape: "S45"
                }
            }
        },
        S45: {
            type: "structure",
            members: {
                CertificateArn: {},
                CertificateSerial: {},
                Status: {},
                StatusMessage: {}
            }
        },
        S4n: {
            type: "structure",
            required: [ "LogDestinationConfigs" ],
            members: {
                LogDestinationConfigs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "LogType", "LogDestinationType", "LogDestination" ],
                        members: {
                            LogType: {},
                            LogDestinationType: {},
                            LogDestination: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListFirewallPolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallPolicies"
        },
        ListFirewalls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Firewalls"
        },
        ListRuleGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RuleGroups"
        },
        ListTLSInspectionConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TLSInspectionConfigurations"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["mwaa"] = {};

AWS.MWAA = AWS.Service.defineService("mwaa", [ "2020-07-01" ]);

AWS.apiLoader.services["mwaa"]["2020-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-01",
        endpointPrefix: "airflow",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AmazonMWAA",
        serviceId: "MWAA",
        signatureVersion: "v4",
        signingName: "airflow",
        uid: "mwaa-2020-07-01"
    },
    operations: {
        CreateCliToken: {
            http: {
                requestUri: "/clitoken/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CliToken: {
                        shape: "S4"
                    },
                    WebServerHostname: {}
                }
            },
            endpoint: {
                hostPrefix: "env."
            }
        },
        CreateEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DagS3Path", "ExecutionRoleArn", "Name", "NetworkConfiguration", "SourceBucketArn" ],
                members: {
                    AirflowConfigurationOptions: {
                        shape: "S7"
                    },
                    AirflowVersion: {},
                    DagS3Path: {},
                    EndpointManagement: {},
                    EnvironmentClass: {},
                    ExecutionRoleArn: {},
                    KmsKey: {},
                    LoggingConfiguration: {
                        shape: "Sg"
                    },
                    MaxWorkers: {
                        type: "integer"
                    },
                    MinWorkers: {
                        type: "integer"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NetworkConfiguration: {
                        shape: "Sm"
                    },
                    PluginsS3ObjectVersion: {},
                    PluginsS3Path: {},
                    RequirementsS3ObjectVersion: {},
                    RequirementsS3Path: {},
                    Schedulers: {
                        type: "integer"
                    },
                    SourceBucketArn: {},
                    StartupScriptS3ObjectVersion: {},
                    StartupScriptS3Path: {},
                    Tags: {
                        shape: "Su"
                    },
                    WebserverAccessMode: {},
                    WeeklyMaintenanceWindowStart: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        CreateWebLoginToken: {
            http: {
                requestUri: "/webtoken/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebServerHostname: {},
                    WebToken: {
                        shape: "S4"
                    }
                }
            },
            endpoint: {
                hostPrefix: "env."
            },
            idempotent: true
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Environment: {
                        type: "structure",
                        members: {
                            AirflowConfigurationOptions: {
                                shape: "S7"
                            },
                            AirflowVersion: {},
                            Arn: {},
                            CeleryExecutorQueue: {},
                            CreatedAt: {
                                type: "timestamp"
                            },
                            DagS3Path: {},
                            DatabaseVpcEndpointService: {},
                            EndpointManagement: {},
                            EnvironmentClass: {},
                            ExecutionRoleArn: {},
                            KmsKey: {},
                            LastUpdate: {
                                type: "structure",
                                members: {
                                    CreatedAt: {
                                        type: "timestamp"
                                    },
                                    Error: {
                                        type: "structure",
                                        members: {
                                            ErrorCode: {},
                                            ErrorMessage: {}
                                        }
                                    },
                                    Source: {},
                                    Status: {}
                                }
                            },
                            LoggingConfiguration: {
                                type: "structure",
                                members: {
                                    DagProcessingLogs: {
                                        shape: "S1j"
                                    },
                                    SchedulerLogs: {
                                        shape: "S1j"
                                    },
                                    TaskLogs: {
                                        shape: "S1j"
                                    },
                                    WebserverLogs: {
                                        shape: "S1j"
                                    },
                                    WorkerLogs: {
                                        shape: "S1j"
                                    }
                                }
                            },
                            MaxWorkers: {
                                type: "integer"
                            },
                            MinWorkers: {
                                type: "integer"
                            },
                            Name: {},
                            NetworkConfiguration: {
                                shape: "Sm"
                            },
                            PluginsS3ObjectVersion: {},
                            PluginsS3Path: {},
                            RequirementsS3ObjectVersion: {},
                            RequirementsS3Path: {},
                            Schedulers: {
                                type: "integer"
                            },
                            ServiceRoleArn: {},
                            SourceBucketArn: {},
                            StartupScriptS3ObjectVersion: {},
                            StartupScriptS3Path: {},
                            Status: {},
                            Tags: {
                                shape: "Su"
                            },
                            WebserverAccessMode: {},
                            WebserverUrl: {},
                            WebserverVpcEndpointService: {},
                            WeeklyMaintenanceWindowStart: {}
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Environments" ],
                members: {
                    Environments: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PublishMetrics: {
            http: {
                requestUri: "/metrics/environments/{EnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentName", "MetricData" ],
                members: {
                    EnvironmentName: {
                        location: "uri",
                        locationName: "EnvironmentName"
                    },
                    MetricData: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MetricName", "Timestamp" ],
                            members: {
                                Dimensions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Name", "Value" ],
                                        members: {
                                            Name: {},
                                            Value: {}
                                        },
                                        deprecated: true,
                                        deprecatedMessage: "This type is for internal use and not meant for public use. Data set for this type will be ignored."
                                    },
                                    deprecated: true,
                                    deprecatedMessage: "This type is for internal use and not meant for public use. Data set for this type will be ignored."
                                },
                                MetricName: {},
                                StatisticValues: {
                                    type: "structure",
                                    members: {
                                        Maximum: {
                                            type: "double"
                                        },
                                        Minimum: {
                                            type: "double"
                                        },
                                        SampleCount: {
                                            type: "integer"
                                        },
                                        Sum: {
                                            type: "double"
                                        }
                                    },
                                    deprecated: true,
                                    deprecatedMessage: "This type is for internal use and not meant for public use. Data set for this type will be ignored."
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Unit: {},
                                Value: {
                                    type: "double"
                                }
                            },
                            deprecated: true,
                            deprecatedMessage: "This type is for internal use and not meant for public use. Data set for this type will be ignored."
                        },
                        deprecated: true,
                        deprecatedMessage: "This type is for internal use and not meant for public use. Data set for this type will be ignored."
                    }
                },
                deprecated: true,
                deprecatedMessage: "This type is for internal use and not meant for public use. Data set for this type will be ignored."
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "This type is for internal use and not meant for public use. Data set for this type will be ignored."
            },
            deprecated: true,
            deprecatedMessage: "This API is for internal use and not meant for public use, and is no longer available.",
            endpoint: {
                hostPrefix: "ops."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "tagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    AirflowConfigurationOptions: {
                        shape: "S7"
                    },
                    AirflowVersion: {},
                    DagS3Path: {},
                    EnvironmentClass: {},
                    ExecutionRoleArn: {},
                    LoggingConfiguration: {
                        shape: "Sg"
                    },
                    MaxWorkers: {
                        type: "integer"
                    },
                    MinWorkers: {
                        type: "integer"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NetworkConfiguration: {
                        type: "structure",
                        required: [ "SecurityGroupIds" ],
                        members: {
                            SecurityGroupIds: {
                                shape: "Sn"
                            }
                        }
                    },
                    PluginsS3ObjectVersion: {},
                    PluginsS3Path: {},
                    RequirementsS3ObjectVersion: {},
                    RequirementsS3Path: {},
                    Schedulers: {
                        type: "integer"
                    },
                    SourceBucketArn: {},
                    StartupScriptS3ObjectVersion: {},
                    StartupScriptS3Path: {},
                    WebserverAccessMode: {},
                    WeeklyMaintenanceWindowStart: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        }
    },
    shapes: {
        S4: {
            type: "string",
            sensitive: true
        },
        S7: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            },
            sensitive: true
        },
        Sg: {
            type: "structure",
            members: {
                DagProcessingLogs: {
                    shape: "Sh"
                },
                SchedulerLogs: {
                    shape: "Sh"
                },
                TaskLogs: {
                    shape: "Sh"
                },
                WebserverLogs: {
                    shape: "Sh"
                },
                WorkerLogs: {
                    shape: "Sh"
                }
            }
        },
        Sh: {
            type: "structure",
            required: [ "Enabled", "LogLevel" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                LogLevel: {}
            }
        },
        Sm: {
            type: "structure",
            members: {
                SecurityGroupIds: {
                    shape: "Sn"
                },
                SubnetIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Su: {
            type: "map",
            key: {},
            value: {}
        },
        S1j: {
            type: "structure",
            members: {
                CloudWatchLogGroupArn: {},
                Enabled: {
                    type: "boolean"
                },
                LogLevel: {}
            }
        }
    },
    paginators: {
        ListEnvironments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Environments"
        }
    }
};

