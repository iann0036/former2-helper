AWS.apiLoader.services["pinpointsmsvoicev2"] = {};

AWS.PinpointSMSVoiceV2 = AWS.Service.defineService("pinpointsmsvoicev2", [ "2022-03-31" ]);

AWS.apiLoader.services["pinpointsmsvoicev2"]["2022-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-03-31",
        endpointPrefix: "sms-voice",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Pinpoint SMS Voice V2",
        serviceId: "Pinpoint SMS Voice V2",
        signatureVersion: "v4",
        signingName: "sms-voice",
        targetPrefix: "PinpointSMSVoiceV2",
        uid: "pinpoint-sms-voice-v2-2022-03-31"
    },
    operations: {
        AssociateOriginationIdentity: {
            input: {
                type: "structure",
                required: [ "PoolId", "OriginationIdentity", "IsoCountryCode" ],
                members: {
                    PoolId: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {}
                }
            }
        },
        CreateConfigurationSet: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "MatchingEventTypes" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestinationName: {},
                    MatchingEventTypes: {
                        shape: "Sj"
                    },
                    CloudWatchLogsDestination: {
                        shape: "Sl"
                    },
                    KinesisFirehoseDestination: {
                        shape: "So"
                    },
                    SnsDestination: {
                        shape: "Sq"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "St"
                    }
                }
            }
        },
        CreateOptOutList: {
            input: {
                type: "structure",
                required: [ "OptOutListName" ],
                members: {
                    OptOutListName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreatePool: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity", "IsoCountryCode", "MessageType" ],
                members: {
                    OriginationIdentity: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    Status: {},
                    MessageType: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateRegistration: {
            input: {
                type: "structure",
                required: [ "RegistrationType" ],
                members: {
                    RegistrationType: {},
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "RegistrationType", "RegistrationStatus", "CurrentVersionNumber", "CreatedTimestamp" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    RegistrationType: {},
                    RegistrationStatus: {},
                    CurrentVersionNumber: {
                        type: "long"
                    },
                    AdditionalAttributes: {
                        shape: "S19"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateRegistrationAssociation: {
            input: {
                type: "structure",
                required: [ "RegistrationId", "ResourceId" ],
                members: {
                    RegistrationId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "RegistrationType", "ResourceArn", "ResourceId", "ResourceType" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    RegistrationType: {},
                    ResourceArn: {},
                    ResourceId: {},
                    ResourceType: {},
                    IsoCountryCode: {},
                    PhoneNumber: {}
                }
            }
        },
        CreateRegistrationAttachment: {
            input: {
                type: "structure",
                members: {
                    AttachmentBody: {
                        type: "blob"
                    },
                    AttachmentUrl: {},
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationAttachmentArn", "RegistrationAttachmentId", "AttachmentStatus", "CreatedTimestamp" ],
                members: {
                    RegistrationAttachmentArn: {},
                    RegistrationAttachmentId: {},
                    AttachmentStatus: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateRegistrationVersion: {
            input: {
                type: "structure",
                required: [ "RegistrationId" ],
                members: {
                    RegistrationId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "VersionNumber", "RegistrationVersionStatus", "RegistrationVersionStatusHistory" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    RegistrationVersionStatus: {},
                    RegistrationVersionStatusHistory: {
                        shape: "S1n"
                    }
                }
            }
        },
        CreateVerifiedDestinationNumber: {
            input: {
                type: "structure",
                required: [ "DestinationPhoneNumber" ],
                members: {
                    DestinationPhoneNumber: {},
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VerifiedDestinationNumberArn", "VerifiedDestinationNumberId", "DestinationPhoneNumber", "Status", "CreatedTimestamp" ],
                members: {
                    VerifiedDestinationNumberArn: {},
                    VerifiedDestinationNumberId: {},
                    DestinationPhoneNumber: {},
                    Status: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteConfigurationSet: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestinations: {
                        shape: "S1t"
                    },
                    DefaultMessageType: {},
                    DefaultSenderId: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteDefaultMessageType: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    MessageType: {}
                }
            }
        },
        DeleteDefaultSenderId: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    SenderId: {}
                }
            }
        },
        DeleteEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestinationName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "St"
                    }
                }
            }
        },
        DeleteKeyword: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity", "Keyword" ],
                members: {
                    OriginationIdentity: {},
                    Keyword: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    Keyword: {},
                    KeywordMessage: {},
                    KeywordAction: {}
                }
            }
        },
        DeleteOptOutList: {
            input: {
                type: "structure",
                required: [ "OptOutListName" ],
                members: {
                    OptOutListName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteOptedOutNumber: {
            input: {
                type: "structure",
                required: [ "OptOutListName", "OptedOutNumber" ],
                members: {
                    OptOutListName: {},
                    OptedOutNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    OptedOutNumber: {},
                    OptedOutTimestamp: {
                        type: "timestamp"
                    },
                    EndUserOptedOut: {
                        type: "boolean"
                    }
                }
            }
        },
        DeletePool: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    Status: {},
                    MessageType: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteRegistration: {
            input: {
                type: "structure",
                required: [ "RegistrationId" ],
                members: {
                    RegistrationId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "RegistrationType", "RegistrationStatus", "CurrentVersionNumber", "CreatedTimestamp" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    RegistrationType: {},
                    RegistrationStatus: {},
                    CurrentVersionNumber: {
                        type: "long"
                    },
                    ApprovedVersionNumber: {
                        type: "long"
                    },
                    LatestDeniedVersionNumber: {
                        type: "long"
                    },
                    AdditionalAttributes: {
                        shape: "S19"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteRegistrationAttachment: {
            input: {
                type: "structure",
                required: [ "RegistrationAttachmentId" ],
                members: {
                    RegistrationAttachmentId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationAttachmentArn", "RegistrationAttachmentId", "AttachmentStatus", "CreatedTimestamp" ],
                members: {
                    RegistrationAttachmentArn: {},
                    RegistrationAttachmentId: {},
                    AttachmentStatus: {},
                    AttachmentUploadErrorReason: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteRegistrationFieldValue: {
            input: {
                type: "structure",
                required: [ "RegistrationId", "FieldPath" ],
                members: {
                    RegistrationId: {},
                    FieldPath: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "VersionNumber", "FieldPath" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    FieldPath: {},
                    SelectChoices: {
                        shape: "S2n"
                    },
                    TextValue: {},
                    RegistrationAttachmentId: {}
                }
            }
        },
        DeleteTextMessageSpendLimitOverride: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        DeleteVerifiedDestinationNumber: {
            input: {
                type: "structure",
                required: [ "VerifiedDestinationNumberId" ],
                members: {
                    VerifiedDestinationNumberId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VerifiedDestinationNumberArn", "VerifiedDestinationNumberId", "DestinationPhoneNumber", "CreatedTimestamp" ],
                members: {
                    VerifiedDestinationNumberArn: {},
                    VerifiedDestinationNumberId: {},
                    DestinationPhoneNumber: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteVoiceMessageSpendLimitOverride: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        DescribeAccountAttributes: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAttributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAccountLimits: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountLimits: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Used", "Max" ],
                            members: {
                                Name: {},
                                Used: {
                                    type: "long"
                                },
                                Max: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConfigurationSets: {
            input: {
                type: "structure",
                members: {
                    ConfigurationSetNames: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ConfigurationSetArn", "ConfigurationSetName", "EventDestinations", "CreatedTimestamp" ],
                            members: {
                                ConfigurationSetArn: {},
                                ConfigurationSetName: {},
                                EventDestinations: {
                                    shape: "S1t"
                                },
                                DefaultMessageType: {},
                                DefaultSenderId: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeKeywords: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity" ],
                members: {
                    OriginationIdentity: {},
                    Keywords: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    Keywords: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Keyword", "KeywordMessage", "KeywordAction" ],
                            members: {
                                Keyword: {},
                                KeywordMessage: {},
                                KeywordAction: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOptOutLists: {
            input: {
                type: "structure",
                members: {
                    OptOutListNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OptOutListArn", "OptOutListName", "CreatedTimestamp" ],
                            members: {
                                OptOutListArn: {},
                                OptOutListName: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOptedOutNumbers: {
            input: {
                type: "structure",
                required: [ "OptOutListName" ],
                members: {
                    OptOutListName: {},
                    OptedOutNumbers: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    OptedOutNumbers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OptedOutNumber", "OptedOutTimestamp", "EndUserOptedOut" ],
                            members: {
                                OptedOutNumber: {},
                                OptedOutTimestamp: {
                                    type: "timestamp"
                                },
                                EndUserOptedOut: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePhoneNumbers: {
            input: {
                type: "structure",
                members: {
                    PhoneNumberIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumbers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PhoneNumberArn", "PhoneNumber", "Status", "IsoCountryCode", "MessageType", "NumberCapabilities", "NumberType", "MonthlyLeasingPrice", "TwoWayEnabled", "SelfManagedOptOutsEnabled", "OptOutListName", "DeletionProtectionEnabled", "CreatedTimestamp" ],
                            members: {
                                PhoneNumberArn: {},
                                PhoneNumberId: {},
                                PhoneNumber: {},
                                Status: {},
                                IsoCountryCode: {},
                                MessageType: {},
                                NumberCapabilities: {
                                    shape: "S4g"
                                },
                                NumberType: {},
                                MonthlyLeasingPrice: {},
                                TwoWayEnabled: {
                                    type: "boolean"
                                },
                                TwoWayChannelArn: {},
                                TwoWayChannelRole: {},
                                SelfManagedOptOutsEnabled: {
                                    type: "boolean"
                                },
                                OptOutListName: {},
                                DeletionProtectionEnabled: {
                                    type: "boolean"
                                },
                                PoolId: {},
                                RegistrationId: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePools: {
            input: {
                type: "structure",
                members: {
                    PoolIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pools: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PoolArn", "PoolId", "Status", "MessageType", "TwoWayEnabled", "SelfManagedOptOutsEnabled", "OptOutListName", "SharedRoutesEnabled", "DeletionProtectionEnabled", "CreatedTimestamp" ],
                            members: {
                                PoolArn: {},
                                PoolId: {},
                                Status: {},
                                MessageType: {},
                                TwoWayEnabled: {
                                    type: "boolean"
                                },
                                TwoWayChannelArn: {},
                                TwoWayChannelRole: {},
                                SelfManagedOptOutsEnabled: {
                                    type: "boolean"
                                },
                                OptOutListName: {},
                                SharedRoutesEnabled: {
                                    type: "boolean"
                                },
                                DeletionProtectionEnabled: {
                                    type: "boolean"
                                },
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegistrationAttachments: {
            input: {
                type: "structure",
                members: {
                    RegistrationAttachmentIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationAttachments" ],
                members: {
                    RegistrationAttachments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegistrationAttachmentArn", "RegistrationAttachmentId", "AttachmentStatus", "CreatedTimestamp" ],
                            members: {
                                RegistrationAttachmentArn: {},
                                RegistrationAttachmentId: {},
                                AttachmentStatus: {},
                                AttachmentUploadErrorReason: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegistrationFieldDefinitions: {
            input: {
                type: "structure",
                required: [ "RegistrationType" ],
                members: {
                    RegistrationType: {},
                    SectionPath: {},
                    FieldPaths: {
                        shape: "S51"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationType", "RegistrationFieldDefinitions" ],
                members: {
                    RegistrationType: {},
                    RegistrationFieldDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SectionPath", "FieldPath", "FieldType", "FieldRequirement", "DisplayHints" ],
                            members: {
                                SectionPath: {},
                                FieldPath: {},
                                FieldType: {},
                                FieldRequirement: {},
                                SelectValidation: {
                                    type: "structure",
                                    required: [ "MinChoices", "MaxChoices", "Options" ],
                                    members: {
                                        MinChoices: {
                                            type: "integer"
                                        },
                                        MaxChoices: {
                                            type: "integer"
                                        },
                                        Options: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                TextValidation: {
                                    type: "structure",
                                    required: [ "MinLength", "MaxLength", "Pattern" ],
                                    members: {
                                        MinLength: {
                                            type: "integer"
                                        },
                                        MaxLength: {
                                            type: "integer"
                                        },
                                        Pattern: {}
                                    }
                                },
                                DisplayHints: {
                                    type: "structure",
                                    required: [ "Title", "ShortDescription" ],
                                    members: {
                                        Title: {},
                                        ShortDescription: {},
                                        LongDescription: {},
                                        DocumentationTitle: {},
                                        DocumentationLink: {},
                                        SelectOptionDescriptions: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Option" ],
                                                members: {
                                                    Option: {},
                                                    Title: {},
                                                    Description: {}
                                                }
                                            }
                                        },
                                        TextValidationDescription: {},
                                        ExampleTextValue: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegistrationFieldValues: {
            input: {
                type: "structure",
                required: [ "RegistrationId" ],
                members: {
                    RegistrationId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    SectionPath: {},
                    FieldPaths: {
                        shape: "S51"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "VersionNumber", "RegistrationFieldValues" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    RegistrationFieldValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FieldPath" ],
                            members: {
                                FieldPath: {},
                                SelectChoices: {
                                    shape: "S2n"
                                },
                                TextValue: {},
                                RegistrationAttachmentId: {},
                                DeniedReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegistrationSectionDefinitions: {
            input: {
                type: "structure",
                required: [ "RegistrationType" ],
                members: {
                    RegistrationType: {},
                    SectionPaths: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationType", "RegistrationSectionDefinitions" ],
                members: {
                    RegistrationType: {},
                    RegistrationSectionDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SectionPath", "DisplayHints" ],
                            members: {
                                SectionPath: {},
                                DisplayHints: {
                                    type: "structure",
                                    required: [ "Title", "ShortDescription" ],
                                    members: {
                                        Title: {},
                                        ShortDescription: {},
                                        LongDescription: {},
                                        DocumentationTitle: {},
                                        DocumentationLink: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegistrationTypeDefinitions: {
            input: {
                type: "structure",
                members: {
                    RegistrationTypes: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationTypeDefinitions" ],
                members: {
                    RegistrationTypeDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegistrationType", "DisplayHints" ],
                            members: {
                                RegistrationType: {},
                                SupportedAssociations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "ResourceType", "AssociationBehavior", "DisassociationBehavior" ],
                                        members: {
                                            ResourceType: {},
                                            IsoCountryCode: {},
                                            AssociationBehavior: {},
                                            DisassociationBehavior: {}
                                        }
                                    }
                                },
                                DisplayHints: {
                                    type: "structure",
                                    required: [ "Title" ],
                                    members: {
                                        Title: {},
                                        ShortDescription: {},
                                        LongDescription: {},
                                        DocumentationTitle: {},
                                        DocumentationLink: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegistrationVersions: {
            input: {
                type: "structure",
                required: [ "RegistrationId" ],
                members: {
                    RegistrationId: {},
                    VersionNumbers: {
                        type: "list",
                        member: {
                            type: "long"
                        }
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "RegistrationVersions" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    RegistrationVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "VersionNumber", "RegistrationVersionStatus", "RegistrationVersionStatusHistory" ],
                            members: {
                                VersionNumber: {
                                    type: "long"
                                },
                                RegistrationVersionStatus: {},
                                RegistrationVersionStatusHistory: {
                                    shape: "S1n"
                                },
                                DeniedReasons: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Reason", "ShortDescription" ],
                                        members: {
                                            Reason: {},
                                            ShortDescription: {},
                                            LongDescription: {},
                                            DocumentationTitle: {},
                                            DocumentationLink: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegistrations: {
            input: {
                type: "structure",
                members: {
                    RegistrationIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Registrations" ],
                members: {
                    Registrations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegistrationArn", "RegistrationId", "RegistrationType", "RegistrationStatus", "CurrentVersionNumber", "CreatedTimestamp" ],
                            members: {
                                RegistrationArn: {},
                                RegistrationId: {},
                                RegistrationType: {},
                                RegistrationStatus: {},
                                CurrentVersionNumber: {
                                    type: "long"
                                },
                                ApprovedVersionNumber: {
                                    type: "long"
                                },
                                LatestDeniedVersionNumber: {
                                    type: "long"
                                },
                                AdditionalAttributes: {
                                    shape: "S19"
                                },
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSenderIds: {
            input: {
                type: "structure",
                members: {
                    SenderIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SenderId", "IsoCountryCode" ],
                            members: {
                                SenderId: {},
                                IsoCountryCode: {}
                            }
                        }
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SenderIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SenderIdArn", "SenderId", "IsoCountryCode", "MessageTypes", "MonthlyLeasingPrice", "DeletionProtectionEnabled", "Registered" ],
                            members: {
                                SenderIdArn: {},
                                SenderId: {},
                                IsoCountryCode: {},
                                MessageTypes: {
                                    shape: "S6t"
                                },
                                MonthlyLeasingPrice: {},
                                DeletionProtectionEnabled: {
                                    type: "boolean"
                                },
                                Registered: {
                                    type: "boolean"
                                },
                                RegistrationId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSpendLimits: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpendLimits: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "EnforcedLimit", "MaxLimit", "Overridden" ],
                            members: {
                                Name: {},
                                EnforcedLimit: {
                                    type: "long"
                                },
                                MaxLimit: {
                                    type: "long"
                                },
                                Overridden: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeVerifiedDestinationNumbers: {
            input: {
                type: "structure",
                members: {
                    VerifiedDestinationNumberIds: {
                        type: "list",
                        member: {}
                    },
                    DestinationPhoneNumbers: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VerifiedDestinationNumbers" ],
                members: {
                    VerifiedDestinationNumbers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "VerifiedDestinationNumberArn", "VerifiedDestinationNumberId", "DestinationPhoneNumber", "Status", "CreatedTimestamp" ],
                            members: {
                                VerifiedDestinationNumberArn: {},
                                VerifiedDestinationNumberId: {},
                                DestinationPhoneNumber: {},
                                Status: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateOriginationIdentity: {
            input: {
                type: "structure",
                required: [ "PoolId", "OriginationIdentity", "IsoCountryCode" ],
                members: {
                    PoolId: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {}
                }
            }
        },
        DiscardRegistrationVersion: {
            input: {
                type: "structure",
                required: [ "RegistrationId" ],
                members: {
                    RegistrationId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "VersionNumber", "RegistrationVersionStatus", "RegistrationVersionStatusHistory" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    RegistrationVersionStatus: {},
                    RegistrationVersionStatusHistory: {
                        shape: "S1n"
                    }
                }
            }
        },
        ListPoolOriginationIdentities: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    OriginationIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OriginationIdentityArn", "OriginationIdentity", "IsoCountryCode", "NumberCapabilities" ],
                            members: {
                                OriginationIdentityArn: {},
                                OriginationIdentity: {},
                                IsoCountryCode: {},
                                NumberCapabilities: {
                                    shape: "S4g"
                                },
                                PhoneNumber: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRegistrationAssociations: {
            input: {
                type: "structure",
                required: [ "RegistrationId" ],
                members: {
                    RegistrationId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3g"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "RegistrationType", "RegistrationAssociations" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    RegistrationType: {},
                    RegistrationAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ResourceArn", "ResourceId", "ResourceType" ],
                            members: {
                                ResourceArn: {},
                                ResourceId: {},
                                ResourceType: {},
                                IsoCountryCode: {},
                                PhoneNumber: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        PutKeyword: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity", "Keyword", "KeywordMessage" ],
                members: {
                    OriginationIdentity: {},
                    Keyword: {},
                    KeywordMessage: {},
                    KeywordAction: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    Keyword: {},
                    KeywordMessage: {},
                    KeywordAction: {}
                }
            }
        },
        PutOptedOutNumber: {
            input: {
                type: "structure",
                required: [ "OptOutListName", "OptedOutNumber" ],
                members: {
                    OptOutListName: {},
                    OptedOutNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    OptedOutNumber: {},
                    OptedOutTimestamp: {
                        type: "timestamp"
                    },
                    EndUserOptedOut: {
                        type: "boolean"
                    }
                }
            }
        },
        PutRegistrationFieldValue: {
            input: {
                type: "structure",
                required: [ "RegistrationId", "FieldPath" ],
                members: {
                    RegistrationId: {},
                    FieldPath: {},
                    SelectChoices: {
                        shape: "S2n"
                    },
                    TextValue: {},
                    RegistrationAttachmentId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "VersionNumber", "FieldPath" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    FieldPath: {},
                    SelectChoices: {
                        shape: "S2n"
                    },
                    TextValue: {},
                    RegistrationAttachmentId: {}
                }
            }
        },
        ReleasePhoneNumber: {
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberArn: {},
                    PhoneNumberId: {},
                    PhoneNumber: {},
                    Status: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S4g"
                    },
                    NumberType: {},
                    MonthlyLeasingPrice: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    RegistrationId: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        ReleaseSenderId: {
            input: {
                type: "structure",
                required: [ "SenderId", "IsoCountryCode" ],
                members: {
                    SenderId: {},
                    IsoCountryCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SenderIdArn", "SenderId", "IsoCountryCode", "MessageTypes", "MonthlyLeasingPrice", "Registered" ],
                members: {
                    SenderIdArn: {},
                    SenderId: {},
                    IsoCountryCode: {},
                    MessageTypes: {
                        shape: "S6t"
                    },
                    MonthlyLeasingPrice: {},
                    Registered: {
                        type: "boolean"
                    },
                    RegistrationId: {}
                }
            }
        },
        RequestPhoneNumber: {
            input: {
                type: "structure",
                required: [ "IsoCountryCode", "MessageType", "NumberCapabilities", "NumberType" ],
                members: {
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S4g"
                    },
                    NumberType: {},
                    OptOutListName: {},
                    PoolId: {},
                    RegistrationId: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberArn: {},
                    PhoneNumberId: {},
                    PhoneNumber: {},
                    Status: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S4g"
                    },
                    NumberType: {},
                    MonthlyLeasingPrice: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    PoolId: {},
                    RegistrationId: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        RequestSenderId: {
            input: {
                type: "structure",
                required: [ "SenderId", "IsoCountryCode" ],
                members: {
                    SenderId: {},
                    IsoCountryCode: {},
                    MessageTypes: {
                        shape: "S6t"
                    },
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SenderIdArn", "SenderId", "IsoCountryCode", "MessageTypes", "MonthlyLeasingPrice", "DeletionProtectionEnabled", "Registered" ],
                members: {
                    SenderIdArn: {},
                    SenderId: {},
                    IsoCountryCode: {},
                    MessageTypes: {
                        shape: "S6t"
                    },
                    MonthlyLeasingPrice: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Registered: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        SendDestinationNumberVerificationCode: {
            input: {
                type: "structure",
                required: [ "VerifiedDestinationNumberId", "VerificationChannel" ],
                members: {
                    VerifiedDestinationNumberId: {},
                    VerificationChannel: {},
                    LanguageCode: {},
                    OriginationIdentity: {},
                    ConfigurationSetName: {},
                    Context: {
                        shape: "S8c"
                    },
                    DestinationCountryParameters: {
                        shape: "S8f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MessageId" ],
                members: {
                    MessageId: {}
                }
            }
        },
        SendTextMessage: {
            input: {
                type: "structure",
                required: [ "DestinationPhoneNumber" ],
                members: {
                    DestinationPhoneNumber: {},
                    OriginationIdentity: {},
                    MessageBody: {},
                    MessageType: {},
                    Keyword: {},
                    ConfigurationSetName: {},
                    MaxPrice: {},
                    TimeToLive: {
                        type: "integer"
                    },
                    Context: {
                        shape: "S8c"
                    },
                    DestinationCountryParameters: {
                        shape: "S8f"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendVoiceMessage: {
            input: {
                type: "structure",
                required: [ "DestinationPhoneNumber", "OriginationIdentity" ],
                members: {
                    DestinationPhoneNumber: {},
                    OriginationIdentity: {},
                    MessageBody: {},
                    MessageBodyTextType: {},
                    VoiceId: {},
                    ConfigurationSetName: {},
                    MaxPricePerMinute: {},
                    TimeToLive: {
                        type: "integer"
                    },
                    Context: {
                        shape: "S8c"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SetDefaultMessageType: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "MessageType" ],
                members: {
                    ConfigurationSetName: {},
                    MessageType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    MessageType: {}
                }
            }
        },
        SetDefaultSenderId: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "SenderId" ],
                members: {
                    ConfigurationSetName: {},
                    SenderId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    SenderId: {}
                }
            }
        },
        SetTextMessageSpendLimitOverride: {
            input: {
                type: "structure",
                required: [ "MonthlyLimit" ],
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        SetVoiceMessageSpendLimitOverride: {
            input: {
                type: "structure",
                required: [ "MonthlyLimit" ],
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        SubmitRegistrationVersion: {
            input: {
                type: "structure",
                required: [ "RegistrationId" ],
                members: {
                    RegistrationId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RegistrationArn", "RegistrationId", "VersionNumber", "RegistrationVersionStatus", "RegistrationVersionStatusHistory" ],
                members: {
                    RegistrationArn: {},
                    RegistrationId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    RegistrationVersionStatus: {},
                    RegistrationVersionStatusHistory: {
                        shape: "S1n"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        type: "list",
                        member: {
                            shape: "Sb"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestinationName: {},
                    Enabled: {
                        type: "boolean"
                    },
                    MatchingEventTypes: {
                        shape: "Sj"
                    },
                    CloudWatchLogsDestination: {
                        shape: "Sl"
                    },
                    KinesisFirehoseDestination: {
                        shape: "So"
                    },
                    SnsDestination: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "St"
                    }
                }
            }
        },
        UpdatePhoneNumber: {
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberArn: {},
                    PhoneNumberId: {},
                    PhoneNumber: {},
                    Status: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S4g"
                    },
                    NumberType: {},
                    MonthlyLeasingPrice: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    RegistrationId: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdatePool: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    Status: {},
                    MessageType: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    TwoWayChannelRole: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateSenderId: {
            input: {
                type: "structure",
                required: [ "SenderId", "IsoCountryCode" ],
                members: {
                    SenderId: {},
                    IsoCountryCode: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SenderIdArn", "SenderId", "IsoCountryCode", "MessageTypes", "MonthlyLeasingPrice", "DeletionProtectionEnabled", "Registered" ],
                members: {
                    SenderIdArn: {},
                    SenderId: {},
                    IsoCountryCode: {},
                    MessageTypes: {
                        shape: "S6t"
                    },
                    MonthlyLeasingPrice: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Registered: {
                        type: "boolean"
                    },
                    RegistrationId: {}
                }
            }
        },
        VerifyDestinationNumber: {
            input: {
                type: "structure",
                required: [ "VerifiedDestinationNumberId", "VerificationCode" ],
                members: {
                    VerifiedDestinationNumberId: {},
                    VerificationCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VerifiedDestinationNumberArn", "VerifiedDestinationNumberId", "DestinationPhoneNumber", "Status", "CreatedTimestamp" ],
                members: {
                    VerifiedDestinationNumberArn: {},
                    VerifiedDestinationNumberId: {},
                    DestinationPhoneNumber: {},
                    Status: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                shape: "Sb"
            }
        },
        Sb: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sl: {
            type: "structure",
            required: [ "IamRoleArn", "LogGroupArn" ],
            members: {
                IamRoleArn: {},
                LogGroupArn: {}
            }
        },
        So: {
            type: "structure",
            required: [ "IamRoleArn", "DeliveryStreamArn" ],
            members: {
                IamRoleArn: {},
                DeliveryStreamArn: {}
            }
        },
        Sq: {
            type: "structure",
            required: [ "TopicArn" ],
            members: {
                TopicArn: {}
            }
        },
        St: {
            type: "structure",
            required: [ "EventDestinationName", "Enabled", "MatchingEventTypes" ],
            members: {
                EventDestinationName: {},
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    shape: "Sj"
                },
                CloudWatchLogsDestination: {
                    shape: "Sl"
                },
                KinesisFirehoseDestination: {
                    shape: "So"
                },
                SnsDestination: {
                    shape: "Sq"
                }
            }
        },
        S19: {
            type: "map",
            key: {},
            value: {}
        },
        S1n: {
            type: "structure",
            required: [ "DraftTimestamp" ],
            members: {
                DraftTimestamp: {
                    type: "timestamp"
                },
                SubmittedTimestamp: {
                    type: "timestamp"
                },
                ReviewingTimestamp: {
                    type: "timestamp"
                },
                ApprovedTimestamp: {
                    type: "timestamp"
                },
                DiscardedTimestamp: {
                    type: "timestamp"
                },
                DeniedTimestamp: {
                    type: "timestamp"
                },
                RevokedTimestamp: {
                    type: "timestamp"
                },
                ArchivedTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S1t: {
            type: "list",
            member: {
                shape: "St"
            }
        },
        S2n: {
            type: "list",
            member: {}
        },
        S3g: {
            type: "list",
            member: {}
        },
        S4g: {
            type: "list",
            member: {}
        },
        S51: {
            type: "list",
            member: {}
        },
        S6t: {
            type: "list",
            member: {}
        },
        S8c: {
            type: "map",
            key: {},
            value: {}
        },
        S8f: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribeAccountAttributes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountAttributes"
        },
        DescribeAccountLimits: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountLimits"
        },
        DescribeConfigurationSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConfigurationSets"
        },
        DescribeKeywords: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Keywords"
        },
        DescribeOptOutLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OptOutLists"
        },
        DescribeOptedOutNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OptedOutNumbers"
        },
        DescribePhoneNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PhoneNumbers"
        },
        DescribePools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Pools"
        },
        DescribeRegistrationAttachments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RegistrationAttachments"
        },
        DescribeRegistrationFieldDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RegistrationFieldDefinitions"
        },
        DescribeRegistrationFieldValues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RegistrationFieldValues"
        },
        DescribeRegistrationSectionDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RegistrationSectionDefinitions"
        },
        DescribeRegistrationTypeDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RegistrationTypeDefinitions"
        },
        DescribeRegistrationVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RegistrationVersions"
        },
        DescribeRegistrations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Registrations"
        },
        DescribeSenderIds: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SenderIds"
        },
        DescribeSpendLimits: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SpendLimits"
        },
        DescribeVerifiedDestinationNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "VerifiedDestinationNumbers"
        },
        ListPoolOriginationIdentities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OriginationIdentities"
        },
        ListRegistrationAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RegistrationAssociations"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["ivschat"] = {};

AWS.Ivschat = AWS.Service.defineService("ivschat", [ "2020-07-14" ]);

AWS.apiLoader.services["ivschat"]["2020-07-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-14",
        endpointPrefix: "ivschat",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "ivschat",
        serviceFullName: "Amazon Interactive Video Service Chat",
        serviceId: "ivschat",
        signatureVersion: "v4",
        signingName: "ivschat",
        uid: "ivschat-2020-07-14"
    },
    operations: {
        CreateChatToken: {
            http: {
                requestUri: "/CreateChatToken",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "roomIdentifier", "userId" ],
                members: {
                    attributes: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    capabilities: {
                        type: "list",
                        member: {}
                    },
                    roomIdentifier: {},
                    sessionDurationInMinutes: {
                        type: "integer"
                    },
                    userId: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sessionExpirationTime: {
                        shape: "Sa"
                    },
                    token: {
                        type: "string",
                        sensitive: true
                    },
                    tokenExpirationTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateLoggingConfiguration: {
            http: {
                requestUri: "/CreateLoggingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "destinationConfiguration" ],
                members: {
                    destinationConfiguration: {
                        shape: "Sd"
                    },
                    name: {},
                    tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    destinationConfiguration: {
                        shape: "Sd"
                    },
                    id: {},
                    name: {},
                    state: {},
                    tags: {
                        shape: "Sl"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateRoom: {
            http: {
                requestUri: "/CreateRoom",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    loggingConfigurationIdentifiers: {
                        shape: "St"
                    },
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sx"
                    },
                    name: {},
                    tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    id: {},
                    loggingConfigurationIdentifiers: {
                        shape: "St"
                    },
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sx"
                    },
                    name: {},
                    tags: {
                        shape: "Sl"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        DeleteLoggingConfiguration: {
            http: {
                requestUri: "/DeleteLoggingConfiguration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {}
                }
            }
        },
        DeleteMessage: {
            http: {
                requestUri: "/DeleteMessage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "roomIdentifier" ],
                members: {
                    id: {},
                    reason: {},
                    roomIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        DeleteRoom: {
            http: {
                requestUri: "/DeleteRoom",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {}
                }
            }
        },
        DisconnectUser: {
            http: {
                requestUri: "/DisconnectUser",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "roomIdentifier", "userId" ],
                members: {
                    reason: {},
                    roomIdentifier: {},
                    userId: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetLoggingConfiguration: {
            http: {
                requestUri: "/GetLoggingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    destinationConfiguration: {
                        shape: "Sd"
                    },
                    id: {},
                    name: {},
                    state: {},
                    tags: {
                        shape: "Sl"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetRoom: {
            http: {
                requestUri: "/GetRoom",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    id: {},
                    loggingConfigurationIdentifiers: {
                        shape: "St"
                    },
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sx"
                    },
                    name: {},
                    tags: {
                        shape: "Sl"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListLoggingConfigurations: {
            http: {
                requestUri: "/ListLoggingConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "loggingConfigurations" ],
                members: {
                    loggingConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createTime: {
                                    shape: "Sa"
                                },
                                destinationConfiguration: {
                                    shape: "Sd"
                                },
                                id: {},
                                name: {},
                                state: {},
                                tags: {
                                    shape: "Sl"
                                },
                                updateTime: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRooms: {
            http: {
                requestUri: "/ListRooms",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    loggingConfigurationIdentifier: {},
                    maxResults: {
                        type: "integer"
                    },
                    messageReviewHandlerUri: {},
                    name: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "rooms" ],
                members: {
                    nextToken: {},
                    rooms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createTime: {
                                    shape: "Sa"
                                },
                                id: {},
                                loggingConfigurationIdentifiers: {
                                    shape: "St"
                                },
                                messageReviewHandler: {
                                    shape: "Sx"
                                },
                                name: {},
                                tags: {
                                    shape: "Sl"
                                },
                                updateTime: {
                                    shape: "Sa"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sl"
                    }
                }
            }
        },
        SendEvent: {
            http: {
                requestUri: "/SendEvent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "eventName", "roomIdentifier" ],
                members: {
                    attributes: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    eventName: {},
                    roomIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateLoggingConfiguration: {
            http: {
                requestUri: "/UpdateLoggingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    destinationConfiguration: {
                        shape: "Sd"
                    },
                    identifier: {},
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    destinationConfiguration: {
                        shape: "Sd"
                    },
                    id: {},
                    name: {},
                    state: {},
                    tags: {
                        shape: "Sl"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        UpdateRoom: {
            http: {
                requestUri: "/UpdateRoom",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {},
                    loggingConfigurationIdentifiers: {
                        shape: "St"
                    },
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sx"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    id: {},
                    loggingConfigurationIdentifiers: {
                        shape: "St"
                    },
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sx"
                    },
                    name: {},
                    tags: {
                        shape: "Sl"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sd: {
            type: "structure",
            members: {
                cloudWatchLogs: {
                    type: "structure",
                    required: [ "logGroupName" ],
                    members: {
                        logGroupName: {}
                    }
                },
                firehose: {
                    type: "structure",
                    required: [ "deliveryStreamName" ],
                    members: {
                        deliveryStreamName: {}
                    }
                },
                s3: {
                    type: "structure",
                    required: [ "bucketName" ],
                    members: {
                        bucketName: {}
                    }
                }
            },
            union: true
        },
        Sl: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "list",
            member: {}
        },
        Sx: {
            type: "structure",
            members: {
                fallbackResult: {},
                uri: {}
            }
        }
    },
    paginators: {
        ListLoggingConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListRooms: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["chimesdkmediapipelines"] = {};

AWS.ChimeSDKMediaPipelines = AWS.Service.defineService("chimesdkmediapipelines", [ "2021-07-15" ]);

AWS.apiLoader.services["chimesdkmediapipelines"]["2021-07-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-15",
        endpointPrefix: "media-pipelines-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Media Pipelines",
        serviceId: "Chime SDK Media Pipelines",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-media-pipelines-2021-07-15"
    },
    operations: {
        CreateMediaCapturePipeline: {
            http: {
                requestUri: "/sdk-media-capture-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "SourceType", "SourceArn", "SinkType", "SinkArn" ],
                members: {
                    SourceType: {},
                    SourceArn: {
                        shape: "S3"
                    },
                    SinkType: {},
                    SinkArn: {
                        shape: "S3"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    ChimeSdkMeetingConfiguration: {
                        shape: "S6"
                    },
                    Tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipeline: {
                        shape: "S1c"
                    }
                }
            }
        },
        CreateMediaConcatenationPipeline: {
            http: {
                requestUri: "/sdk-media-concatenation-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Sources", "Sinks" ],
                members: {
                    Sources: {
                        shape: "S1h"
                    },
                    Sinks: {
                        shape: "S1w"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaConcatenationPipeline: {
                        shape: "S21"
                    }
                }
            }
        },
        CreateMediaInsightsPipeline: {
            http: {
                requestUri: "/media-insights-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MediaInsightsPipelineConfigurationArn" ],
                members: {
                    MediaInsightsPipelineConfigurationArn: {
                        shape: "S3"
                    },
                    KinesisVideoStreamSourceRuntimeConfiguration: {
                        shape: "S23"
                    },
                    MediaInsightsRuntimeMetadata: {
                        shape: "S2g"
                    },
                    KinesisVideoStreamRecordingSourceRuntimeConfiguration: {
                        shape: "S2j"
                    },
                    S3RecordingSinkRuntimeConfiguration: {
                        shape: "S2q"
                    },
                    Tags: {
                        shape: "S17"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MediaInsightsPipeline" ],
                members: {
                    MediaInsightsPipeline: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreateMediaInsightsPipelineConfiguration: {
            http: {
                requestUri: "/media-insights-pipeline-configurations",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MediaInsightsPipelineConfigurationName", "ResourceAccessRoleArn", "Elements" ],
                members: {
                    MediaInsightsPipelineConfigurationName: {},
                    ResourceAccessRoleArn: {
                        shape: "S3"
                    },
                    RealTimeAlertConfiguration: {
                        shape: "S30"
                    },
                    Elements: {
                        shape: "S3d"
                    },
                    Tags: {
                        shape: "S17"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaInsightsPipelineConfiguration: {
                        shape: "S45"
                    }
                }
            }
        },
        CreateMediaLiveConnectorPipeline: {
            http: {
                requestUri: "/sdk-media-live-connector-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Sources", "Sinks" ],
                members: {
                    Sources: {
                        shape: "S47"
                    },
                    Sinks: {
                        shape: "S4c"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaLiveConnectorPipeline: {
                        shape: "S4k"
                    }
                }
            }
        },
        CreateMediaPipelineKinesisVideoStreamPool: {
            http: {
                requestUri: "/media-pipeline-kinesis-video-stream-pools",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "StreamConfiguration", "PoolName" ],
                members: {
                    StreamConfiguration: {
                        shape: "S4m"
                    },
                    PoolName: {},
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KinesisVideoStreamPoolConfiguration: {
                        shape: "S4r"
                    }
                }
            }
        },
        CreateMediaStreamPipeline: {
            http: {
                requestUri: "/sdk-media-stream-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Sources", "Sinks" ],
                members: {
                    Sources: {
                        shape: "S4w"
                    },
                    Sinks: {
                        shape: "S4y"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaStreamPipeline: {
                        shape: "S54"
                    }
                }
            }
        },
        DeleteMediaCapturePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/sdk-media-capture-pipelines/{mediaPipelineId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            }
        },
        DeleteMediaInsightsPipelineConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/media-insights-pipeline-configurations/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            }
        },
        DeleteMediaPipeline: {
            http: {
                method: "DELETE",
                requestUri: "/sdk-media-pipelines/{mediaPipelineId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            }
        },
        DeleteMediaPipelineKinesisVideoStreamPool: {
            http: {
                method: "DELETE",
                requestUri: "/media-pipeline-kinesis-video-stream-pools/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            }
        },
        GetMediaCapturePipeline: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-capture-pipelines/{mediaPipelineId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipeline: {
                        shape: "S1c"
                    }
                }
            }
        },
        GetMediaInsightsPipelineConfiguration: {
            http: {
                method: "GET",
                requestUri: "/media-insights-pipeline-configurations/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaInsightsPipelineConfiguration: {
                        shape: "S45"
                    }
                }
            }
        },
        GetMediaPipeline: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-pipelines/{mediaPipelineId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaPipeline: {
                        type: "structure",
                        members: {
                            MediaCapturePipeline: {
                                shape: "S1c"
                            },
                            MediaLiveConnectorPipeline: {
                                shape: "S4k"
                            },
                            MediaConcatenationPipeline: {
                                shape: "S21"
                            },
                            MediaInsightsPipeline: {
                                shape: "S2t"
                            },
                            MediaStreamPipeline: {
                                shape: "S54"
                            }
                        }
                    }
                }
            }
        },
        GetMediaPipelineKinesisVideoStreamPool: {
            http: {
                method: "GET",
                requestUri: "/media-pipeline-kinesis-video-stream-pools/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KinesisVideoStreamPoolConfiguration: {
                        shape: "S4r"
                    }
                }
            }
        },
        GetSpeakerSearchTask: {
            http: {
                method: "GET",
                requestUri: "/media-insights-pipelines/{identifier}/speaker-search-tasks/{speakerSearchTaskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier", "SpeakerSearchTaskId" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    SpeakerSearchTaskId: {
                        location: "uri",
                        locationName: "speakerSearchTaskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpeakerSearchTask: {
                        shape: "S5k"
                    }
                }
            }
        },
        GetVoiceToneAnalysisTask: {
            http: {
                method: "GET",
                requestUri: "/media-insights-pipelines/{identifier}/voice-tone-analysis-tasks/{voiceToneAnalysisTaskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier", "VoiceToneAnalysisTaskId" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    VoiceToneAnalysisTaskId: {
                        location: "uri",
                        locationName: "voiceToneAnalysisTaskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceToneAnalysisTask: {
                        shape: "S5o"
                    }
                }
            }
        },
        ListMediaCapturePipelines: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-capture-pipelines",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipelines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MediaPipelineId: {},
                                MediaPipelineArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMediaInsightsPipelineConfigurations: {
            http: {
                method: "GET",
                requestUri: "/media-insights-pipeline-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaInsightsPipelineConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MediaInsightsPipelineConfigurationName: {},
                                MediaInsightsPipelineConfigurationId: {},
                                MediaInsightsPipelineConfigurationArn: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMediaPipelineKinesisVideoStreamPools: {
            http: {
                method: "GET",
                requestUri: "/media-pipeline-kinesis-video-stream-pools",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KinesisVideoStreamPools: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PoolName: {},
                                PoolId: {},
                                PoolArn: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMediaPipelines: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-pipelines",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaPipelines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MediaPipelineId: {},
                                MediaPipelineArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S17"
                    }
                }
            }
        },
        StartSpeakerSearchTask: {
            http: {
                requestUri: "/media-insights-pipelines/{identifier}/speaker-search-tasks?operation=start",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Identifier", "VoiceProfileDomainArn" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    VoiceProfileDomainArn: {
                        shape: "S3"
                    },
                    KinesisVideoStreamSourceTaskConfiguration: {
                        shape: "S69"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpeakerSearchTask: {
                        shape: "S5k"
                    }
                }
            }
        },
        StartVoiceToneAnalysisTask: {
            http: {
                requestUri: "/media-insights-pipelines/{identifier}/voice-tone-analysis-tasks?operation=start",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Identifier", "LanguageCode" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    LanguageCode: {},
                    KinesisVideoStreamSourceTaskConfiguration: {
                        shape: "S69"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceToneAnalysisTask: {
                        shape: "S5o"
                    }
                }
            }
        },
        StopSpeakerSearchTask: {
            http: {
                requestUri: "/media-insights-pipelines/{identifier}/speaker-search-tasks/{speakerSearchTaskId}?operation=stop",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier", "SpeakerSearchTaskId" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    SpeakerSearchTaskId: {
                        location: "uri",
                        locationName: "speakerSearchTaskId"
                    }
                }
            }
        },
        StopVoiceToneAnalysisTask: {
            http: {
                requestUri: "/media-insights-pipelines/{identifier}/voice-tone-analysis-tasks/{voiceToneAnalysisTaskId}?operation=stop",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier", "VoiceToneAnalysisTaskId" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    VoiceToneAnalysisTaskId: {
                        location: "uri",
                        locationName: "voiceToneAnalysisTaskId"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMediaInsightsPipelineConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/media-insights-pipeline-configurations/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier", "ResourceAccessRoleArn", "Elements" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    ResourceAccessRoleArn: {
                        shape: "S3"
                    },
                    RealTimeAlertConfiguration: {
                        shape: "S30"
                    },
                    Elements: {
                        shape: "S3d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaInsightsPipelineConfiguration: {
                        shape: "S45"
                    }
                }
            }
        },
        UpdateMediaInsightsPipelineStatus: {
            http: {
                method: "PUT",
                requestUri: "/media-insights-pipeline-status/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier", "UpdateStatus" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    UpdateStatus: {}
                }
            }
        },
        UpdateMediaPipelineKinesisVideoStreamPool: {
            http: {
                method: "PUT",
                requestUri: "/media-pipeline-kinesis-video-stream-pools/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    StreamConfiguration: {
                        type: "structure",
                        members: {
                            DataRetentionInHours: {
                                type: "integer"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KinesisVideoStreamPoolConfiguration: {
                        shape: "S4r"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "structure",
            members: {
                SourceConfiguration: {
                    shape: "S7"
                },
                ArtifactsConfiguration: {
                    type: "structure",
                    required: [ "Audio", "Video", "Content" ],
                    members: {
                        Audio: {
                            type: "structure",
                            required: [ "MuxType" ],
                            members: {
                                MuxType: {}
                            }
                        },
                        Video: {
                            type: "structure",
                            required: [ "State" ],
                            members: {
                                State: {},
                                MuxType: {}
                            }
                        },
                        Content: {
                            type: "structure",
                            required: [ "State" ],
                            members: {
                                State: {},
                                MuxType: {}
                            }
                        },
                        CompositedVideo: {
                            shape: "Sl"
                        }
                    }
                }
            }
        },
        S7: {
            type: "structure",
            members: {
                SelectedVideoStreams: {
                    type: "structure",
                    members: {
                        AttendeeIds: {
                            type: "list",
                            member: {}
                        },
                        ExternalUserIds: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    }
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "GridViewConfiguration" ],
            members: {
                Layout: {},
                Resolution: {},
                GridViewConfiguration: {
                    type: "structure",
                    required: [ "ContentShareLayout" ],
                    members: {
                        ContentShareLayout: {},
                        PresenterOnlyConfiguration: {
                            type: "structure",
                            members: {
                                PresenterPosition: {}
                            }
                        },
                        ActiveSpeakerOnlyConfiguration: {
                            type: "structure",
                            members: {
                                ActiveSpeakerPosition: {}
                            }
                        },
                        HorizontalLayoutConfiguration: {
                            type: "structure",
                            members: {
                                TileOrder: {},
                                TilePosition: {},
                                TileCount: {
                                    type: "integer"
                                },
                                TileAspectRatio: {}
                            }
                        },
                        VerticalLayoutConfiguration: {
                            type: "structure",
                            members: {
                                TileOrder: {},
                                TilePosition: {},
                                TileCount: {
                                    type: "integer"
                                },
                                TileAspectRatio: {}
                            }
                        },
                        VideoAttribute: {
                            type: "structure",
                            members: {
                                CornerRadius: {
                                    type: "integer"
                                },
                                BorderColor: {},
                                HighlightColor: {},
                                BorderThickness: {
                                    type: "integer"
                                }
                            }
                        },
                        CanvasOrientation: {}
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                MediaPipelineId: {},
                MediaPipelineArn: {},
                SourceType: {},
                SourceArn: {
                    shape: "S3"
                },
                Status: {},
                SinkType: {},
                SinkArn: {
                    shape: "S3"
                },
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                },
                ChimeSdkMeetingConfiguration: {
                    shape: "S6"
                }
            }
        },
        S1f: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "MediaCapturePipelineSourceConfiguration" ],
                members: {
                    Type: {},
                    MediaCapturePipelineSourceConfiguration: {
                        type: "structure",
                        required: [ "MediaPipelineArn", "ChimeSdkMeetingConfiguration" ],
                        members: {
                            MediaPipelineArn: {
                                shape: "S3"
                            },
                            ChimeSdkMeetingConfiguration: {
                                type: "structure",
                                required: [ "ArtifactsConfiguration" ],
                                members: {
                                    ArtifactsConfiguration: {
                                        type: "structure",
                                        required: [ "Audio", "Video", "Content", "DataChannel", "TranscriptionMessages", "MeetingEvents", "CompositedVideo" ],
                                        members: {
                                            Audio: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            Video: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            Content: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            DataChannel: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            TranscriptionMessages: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            MeetingEvents: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            CompositedVideo: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "S3BucketSinkConfiguration" ],
                members: {
                    Type: {},
                    S3BucketSinkConfiguration: {
                        type: "structure",
                        required: [ "Destination" ],
                        members: {
                            Destination: {
                                shape: "S3"
                            }
                        }
                    }
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                MediaPipelineId: {},
                MediaPipelineArn: {},
                Sources: {
                    shape: "S1h"
                },
                Sinks: {
                    shape: "S1w"
                },
                Status: {},
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                }
            }
        },
        S23: {
            type: "structure",
            required: [ "Streams", "MediaEncoding", "MediaSampleRate" ],
            members: {
                Streams: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "StreamArn", "StreamChannelDefinition" ],
                        members: {
                            StreamArn: {},
                            FragmentNumber: {},
                            StreamChannelDefinition: {
                                type: "structure",
                                required: [ "NumberOfChannels" ],
                                members: {
                                    NumberOfChannels: {
                                        type: "integer"
                                    },
                                    ChannelDefinitions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "ChannelId" ],
                                            members: {
                                                ChannelId: {
                                                    type: "integer"
                                                },
                                                ParticipantRole: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                MediaEncoding: {},
                MediaSampleRate: {
                    type: "integer"
                }
            }
        },
        S2g: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S2j: {
            type: "structure",
            required: [ "Streams", "FragmentSelector" ],
            members: {
                Streams: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            StreamArn: {}
                        }
                    }
                },
                FragmentSelector: {
                    type: "structure",
                    required: [ "FragmentSelectorType", "TimestampRange" ],
                    members: {
                        FragmentSelectorType: {},
                        TimestampRange: {
                            type: "structure",
                            required: [ "StartTimestamp", "EndTimestamp" ],
                            members: {
                                StartTimestamp: {
                                    type: "timestamp"
                                },
                                EndTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        S2q: {
            type: "structure",
            required: [ "Destination", "RecordingFileFormat" ],
            members: {
                Destination: {
                    shape: "S3"
                },
                RecordingFileFormat: {}
            }
        },
        S2t: {
            type: "structure",
            members: {
                MediaPipelineId: {},
                MediaPipelineArn: {
                    shape: "S3"
                },
                MediaInsightsPipelineConfigurationArn: {
                    shape: "S3"
                },
                Status: {},
                KinesisVideoStreamSourceRuntimeConfiguration: {
                    shape: "S23"
                },
                MediaInsightsRuntimeMetadata: {
                    shape: "S2g"
                },
                KinesisVideoStreamRecordingSourceRuntimeConfiguration: {
                    shape: "S2j"
                },
                S3RecordingSinkRuntimeConfiguration: {
                    shape: "S2q"
                },
                CreatedTimestamp: {
                    shape: "S1f"
                },
                ElementStatuses: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Type: {},
                            Status: {}
                        }
                    }
                }
            }
        },
        S30: {
            type: "structure",
            members: {
                Disabled: {
                    type: "boolean"
                },
                Rules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {},
                            KeywordMatchConfiguration: {
                                type: "structure",
                                required: [ "RuleName", "Keywords" ],
                                members: {
                                    RuleName: {},
                                    Keywords: {
                                        type: "list",
                                        member: {}
                                    },
                                    Negate: {
                                        type: "boolean"
                                    }
                                }
                            },
                            SentimentConfiguration: {
                                type: "structure",
                                required: [ "RuleName", "SentimentType", "TimePeriod" ],
                                members: {
                                    RuleName: {},
                                    SentimentType: {},
                                    TimePeriod: {
                                        type: "integer"
                                    }
                                }
                            },
                            IssueDetectionConfiguration: {
                                type: "structure",
                                required: [ "RuleName" ],
                                members: {
                                    RuleName: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S3d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    Type: {},
                    AmazonTranscribeCallAnalyticsProcessorConfiguration: {
                        type: "structure",
                        required: [ "LanguageCode" ],
                        members: {
                            LanguageCode: {},
                            VocabularyName: {},
                            VocabularyFilterName: {},
                            VocabularyFilterMethod: {},
                            LanguageModelName: {},
                            EnablePartialResultsStabilization: {
                                type: "boolean"
                            },
                            PartialResultsStability: {},
                            ContentIdentificationType: {},
                            ContentRedactionType: {},
                            PiiEntityTypes: {},
                            FilterPartialResults: {
                                type: "boolean"
                            },
                            PostCallAnalyticsSettings: {
                                type: "structure",
                                required: [ "OutputLocation", "DataAccessRoleArn" ],
                                members: {
                                    OutputLocation: {},
                                    DataAccessRoleArn: {},
                                    ContentRedactionOutput: {},
                                    OutputEncryptionKMSKeyId: {}
                                }
                            },
                            CallAnalyticsStreamCategories: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    AmazonTranscribeProcessorConfiguration: {
                        type: "structure",
                        members: {
                            LanguageCode: {},
                            VocabularyName: {},
                            VocabularyFilterName: {},
                            VocabularyFilterMethod: {},
                            ShowSpeakerLabel: {
                                type: "boolean"
                            },
                            EnablePartialResultsStabilization: {
                                type: "boolean"
                            },
                            PartialResultsStability: {},
                            ContentIdentificationType: {},
                            ContentRedactionType: {},
                            PiiEntityTypes: {},
                            LanguageModelName: {},
                            FilterPartialResults: {
                                type: "boolean"
                            },
                            IdentifyLanguage: {
                                type: "boolean"
                            },
                            LanguageOptions: {},
                            PreferredLanguage: {},
                            VocabularyNames: {},
                            VocabularyFilterNames: {}
                        }
                    },
                    KinesisDataStreamSinkConfiguration: {
                        type: "structure",
                        members: {
                            InsightsTarget: {
                                shape: "S3"
                            }
                        }
                    },
                    S3RecordingSinkConfiguration: {
                        type: "structure",
                        members: {
                            Destination: {
                                shape: "S3"
                            },
                            RecordingFileFormat: {}
                        }
                    },
                    VoiceAnalyticsProcessorConfiguration: {
                        type: "structure",
                        members: {
                            SpeakerSearchStatus: {},
                            VoiceToneAnalysisStatus: {}
                        }
                    },
                    LambdaFunctionSinkConfiguration: {
                        type: "structure",
                        members: {
                            InsightsTarget: {
                                shape: "S3"
                            }
                        }
                    },
                    SqsQueueSinkConfiguration: {
                        type: "structure",
                        members: {
                            InsightsTarget: {
                                shape: "S3"
                            }
                        }
                    },
                    SnsTopicSinkConfiguration: {
                        type: "structure",
                        members: {
                            InsightsTarget: {
                                shape: "S3"
                            }
                        }
                    },
                    VoiceEnhancementSinkConfiguration: {
                        type: "structure",
                        members: {
                            Disabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S45: {
            type: "structure",
            members: {
                MediaInsightsPipelineConfigurationName: {},
                MediaInsightsPipelineConfigurationArn: {
                    shape: "S3"
                },
                ResourceAccessRoleArn: {
                    shape: "S3"
                },
                RealTimeAlertConfiguration: {
                    shape: "S30"
                },
                Elements: {
                    shape: "S3d"
                },
                MediaInsightsPipelineConfigurationId: {},
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                }
            }
        },
        S47: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SourceType", "ChimeSdkMeetingLiveConnectorConfiguration" ],
                members: {
                    SourceType: {},
                    ChimeSdkMeetingLiveConnectorConfiguration: {
                        type: "structure",
                        required: [ "Arn", "MuxType" ],
                        members: {
                            Arn: {
                                shape: "S3"
                            },
                            MuxType: {},
                            CompositedVideo: {
                                shape: "Sl"
                            },
                            SourceConfiguration: {
                                shape: "S7"
                            }
                        }
                    }
                }
            }
        },
        S4c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SinkType", "RTMPConfiguration" ],
                members: {
                    SinkType: {},
                    RTMPConfiguration: {
                        type: "structure",
                        required: [ "Url" ],
                        members: {
                            Url: {
                                type: "string",
                                sensitive: true
                            },
                            AudioChannels: {},
                            AudioSampleRate: {}
                        }
                    }
                }
            }
        },
        S4k: {
            type: "structure",
            members: {
                Sources: {
                    shape: "S47"
                },
                Sinks: {
                    shape: "S4c"
                },
                MediaPipelineId: {},
                MediaPipelineArn: {},
                Status: {},
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                }
            }
        },
        S4m: {
            type: "structure",
            required: [ "Region" ],
            members: {
                Region: {},
                DataRetentionInHours: {
                    type: "integer"
                }
            }
        },
        S4r: {
            type: "structure",
            members: {
                PoolArn: {
                    shape: "S3"
                },
                PoolName: {},
                PoolId: {},
                PoolStatus: {},
                PoolSize: {
                    type: "integer"
                },
                StreamConfiguration: {
                    shape: "S4m"
                },
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                }
            }
        },
        S4w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SourceType", "SourceArn" ],
                members: {
                    SourceType: {},
                    SourceArn: {
                        shape: "S3"
                    }
                }
            }
        },
        S4y: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SinkArn", "SinkType", "ReservedStreamCapacity", "MediaStreamType" ],
                members: {
                    SinkArn: {
                        shape: "S3"
                    },
                    SinkType: {},
                    ReservedStreamCapacity: {
                        type: "integer"
                    },
                    MediaStreamType: {}
                }
            }
        },
        S54: {
            type: "structure",
            members: {
                MediaPipelineId: {},
                MediaPipelineArn: {},
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                },
                Status: {},
                Sources: {
                    shape: "S4w"
                },
                Sinks: {
                    shape: "S4y"
                }
            }
        },
        S5k: {
            type: "structure",
            members: {
                SpeakerSearchTaskId: {},
                SpeakerSearchTaskStatus: {},
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                }
            }
        },
        S5o: {
            type: "structure",
            members: {
                VoiceToneAnalysisTaskId: {},
                VoiceToneAnalysisTaskStatus: {},
                CreatedTimestamp: {
                    shape: "S1f"
                },
                UpdatedTimestamp: {
                    shape: "S1f"
                }
            }
        },
        S69: {
            type: "structure",
            required: [ "StreamArn", "ChannelId" ],
            members: {
                StreamArn: {},
                ChannelId: {
                    type: "integer"
                },
                FragmentNumber: {}
            }
        }
    },
    paginators: {
        ListMediaCapturePipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMediaInsightsPipelineConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMediaPipelineKinesisVideoStreamPools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMediaPipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["emrserverless"] = {};

AWS.EMRServerless = AWS.Service.defineService("emrserverless", [ "2021-07-13" ]);

AWS.apiLoader.services["emrserverless"]["2021-07-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-13",
        endpointPrefix: "emr-serverless",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "EMR Serverless",
        serviceId: "EMR Serverless",
        signatureVersion: "v4",
        signingName: "emr-serverless",
        uid: "emr-serverless-2021-07-13"
    },
    operations: {
        CancelJobRun: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/jobruns/{jobRunId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    jobRunId: {
                        location: "uri",
                        locationName: "jobRunId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {},
                    jobRunId: {}
                }
            },
            idempotent: true
        },
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "releaseLabel", "type", "clientToken" ],
                members: {
                    name: {},
                    releaseLabel: {},
                    type: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    initialCapacity: {
                        shape: "Sa"
                    },
                    maximumCapacity: {
                        shape: "Si"
                    },
                    tags: {
                        shape: "Sj"
                    },
                    autoStartConfiguration: {
                        shape: "Sm"
                    },
                    autoStopConfiguration: {
                        shape: "So"
                    },
                    networkConfiguration: {
                        shape: "Sq"
                    },
                    architecture: {},
                    imageConfiguration: {
                        shape: "Sw"
                    },
                    workerTypeSpecifications: {
                        shape: "Sy"
                    },
                    runtimeConfiguration: {
                        shape: "S10"
                    },
                    monitoringConfiguration: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "arn" ],
                members: {
                    applicationId: {},
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetDashboardForJobRun: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/jobruns/{jobRunId}/dashboard",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    jobRunId: {
                        location: "uri",
                        locationName: "jobRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    url: {}
                }
            }
        },
        GetJobRun: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/jobruns/{jobRunId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    jobRunId: {
                        location: "uri",
                        locationName: "jobRunId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobRun" ],
                members: {
                    jobRun: {
                        type: "structure",
                        required: [ "applicationId", "jobRunId", "arn", "createdBy", "createdAt", "updatedAt", "executionRole", "state", "stateDetails", "releaseLabel", "jobDriver" ],
                        members: {
                            applicationId: {},
                            jobRunId: {},
                            name: {},
                            arn: {},
                            createdBy: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            },
                            executionRole: {},
                            state: {},
                            stateDetails: {},
                            releaseLabel: {},
                            configurationOverrides: {
                                shape: "S23"
                            },
                            jobDriver: {
                                shape: "S24"
                            },
                            tags: {
                                shape: "Sj"
                            },
                            totalResourceUtilization: {
                                type: "structure",
                                members: {
                                    vCPUHour: {
                                        type: "double"
                                    },
                                    memoryGBHour: {
                                        type: "double"
                                    },
                                    storageGBHour: {
                                        type: "double"
                                    }
                                }
                            },
                            networkConfiguration: {
                                shape: "Sq"
                            },
                            totalExecutionDurationSeconds: {
                                type: "integer"
                            },
                            executionTimeoutMinutes: {
                                type: "long"
                            },
                            billedResourceUtilization: {
                                type: "structure",
                                members: {
                                    vCPUHour: {
                                        type: "double"
                                    },
                                    memoryGBHour: {
                                        type: "double"
                                    },
                                    storageGBHour: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applications" ],
                members: {
                    applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "releaseLabel", "type", "state", "createdAt", "updatedAt" ],
                            members: {
                                id: {},
                                name: {},
                                arn: {},
                                releaseLabel: {},
                                type: {},
                                state: {},
                                stateDetails: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                architecture: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobRuns: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/jobruns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    createdAtAfter: {
                        location: "querystring",
                        locationName: "createdAtAfter",
                        type: "timestamp"
                    },
                    createdAtBefore: {
                        location: "querystring",
                        locationName: "createdAtBefore",
                        type: "timestamp"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobRuns" ],
                members: {
                    jobRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "id", "arn", "createdBy", "createdAt", "updatedAt", "executionRole", "state", "stateDetails", "releaseLabel" ],
                            members: {
                                applicationId: {},
                                id: {},
                                name: {},
                                arn: {},
                                createdBy: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                executionRole: {},
                                state: {},
                                stateDetails: {},
                                releaseLabel: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sj"
                    }
                }
            }
        },
        StartApplication: {
            http: {
                requestUri: "/applications/{applicationId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StartJobRun: {
            http: {
                requestUri: "/applications/{applicationId}/jobruns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "clientToken", "executionRoleArn" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    executionRoleArn: {},
                    jobDriver: {
                        shape: "S24"
                    },
                    configurationOverrides: {
                        shape: "S23"
                    },
                    tags: {
                        shape: "Sj"
                    },
                    executionTimeoutMinutes: {
                        type: "long"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "jobRunId", "arn" ],
                members: {
                    applicationId: {},
                    jobRunId: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        StopApplication: {
            http: {
                requestUri: "/applications/{applicationId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "clientToken" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    initialCapacity: {
                        shape: "Sa"
                    },
                    maximumCapacity: {
                        shape: "Si"
                    },
                    autoStartConfiguration: {
                        shape: "Sm"
                    },
                    autoStopConfiguration: {
                        shape: "So"
                    },
                    networkConfiguration: {
                        shape: "Sq"
                    },
                    architecture: {},
                    imageConfiguration: {
                        shape: "Sw"
                    },
                    workerTypeSpecifications: {
                        shape: "Sy"
                    },
                    releaseLabel: {},
                    runtimeConfiguration: {
                        shape: "S10"
                    },
                    monitoringConfiguration: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        shape: "S1l"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "workerCount" ],
                members: {
                    workerCount: {
                        type: "long"
                    },
                    workerConfiguration: {
                        type: "structure",
                        required: [ "cpu", "memory" ],
                        members: {
                            cpu: {},
                            memory: {},
                            disk: {}
                        }
                    }
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "cpu", "memory" ],
            members: {
                cpu: {},
                memory: {},
                disk: {}
            }
        },
        Sj: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                }
            }
        },
        So: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                },
                idleTimeoutMinutes: {
                    type: "integer"
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                subnetIds: {
                    type: "list",
                    member: {}
                },
                securityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                imageUri: {}
            }
        },
        Sy: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    imageConfiguration: {
                        shape: "Sw"
                    }
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "classification" ],
                members: {
                    classification: {},
                    properties: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    configurations: {
                        shape: "S10"
                    }
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                s3MonitoringConfiguration: {
                    type: "structure",
                    members: {
                        logUri: {},
                        encryptionKeyArn: {}
                    }
                },
                managedPersistenceMonitoringConfiguration: {
                    type: "structure",
                    members: {
                        enabled: {
                            type: "boolean"
                        },
                        encryptionKeyArn: {}
                    }
                },
                cloudWatchLoggingConfiguration: {
                    type: "structure",
                    required: [ "enabled" ],
                    members: {
                        enabled: {
                            type: "boolean"
                        },
                        logGroupName: {},
                        logStreamNamePrefix: {},
                        encryptionKeyArn: {},
                        logTypes: {
                            type: "map",
                            key: {},
                            value: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            required: [ "applicationId", "arn", "releaseLabel", "type", "state", "createdAt", "updatedAt" ],
            members: {
                applicationId: {},
                name: {},
                arn: {},
                releaseLabel: {},
                type: {},
                state: {},
                stateDetails: {},
                initialCapacity: {
                    shape: "Sa"
                },
                maximumCapacity: {
                    shape: "Si"
                },
                createdAt: {
                    type: "timestamp"
                },
                updatedAt: {
                    type: "timestamp"
                },
                tags: {
                    shape: "Sj"
                },
                autoStartConfiguration: {
                    shape: "Sm"
                },
                autoStopConfiguration: {
                    shape: "So"
                },
                networkConfiguration: {
                    shape: "Sq"
                },
                architecture: {},
                imageConfiguration: {
                    shape: "S1p"
                },
                workerTypeSpecifications: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            imageConfiguration: {
                                shape: "S1p"
                            }
                        }
                    }
                },
                runtimeConfiguration: {
                    shape: "S10"
                },
                monitoringConfiguration: {
                    shape: "S14"
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "imageUri" ],
            members: {
                imageUri: {},
                resolvedImageDigest: {}
            }
        },
        S23: {
            type: "structure",
            members: {
                applicationConfiguration: {
                    shape: "S10"
                },
                monitoringConfiguration: {
                    shape: "S14"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                sparkSubmit: {
                    type: "structure",
                    required: [ "entryPoint" ],
                    members: {
                        entryPoint: {
                            type: "string",
                            sensitive: true
                        },
                        entryPointArguments: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        },
                        sparkSubmitParameters: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                hive: {
                    type: "structure",
                    required: [ "query" ],
                    members: {
                        query: {
                            type: "string",
                            sensitive: true
                        },
                        initQueryFile: {
                            type: "string",
                            sensitive: true
                        },
                        parameters: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            },
            union: true
        }
    },
    paginators: {
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applications"
        },
        ListJobRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobRuns"
        }
    }
};

AWS.apiLoader.services["m2"] = {};

AWS.M2 = AWS.Service.defineService("m2", [ "2021-04-28" ]);

AWS.apiLoader.services["m2"]["2021-04-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-04-28",
        endpointPrefix: "m2",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWSMainframeModernization",
        serviceId: "m2",
        signatureVersion: "v4",
        signingName: "m2",
        uid: "m2-2021-04-28"
    },
    operations: {
        CancelBatchJobExecution: {
            http: {
                requestUri: "/applications/{applicationId}/batch-job-executions/{executionId}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "executionId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    executionId: {
                        location: "uri",
                        locationName: "executionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "definition", "engineType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    definition: {
                        shape: "S6"
                    },
                    description: {},
                    engineType: {},
                    kmsKeyId: {},
                    name: {},
                    roleArn: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationArn", "applicationId", "applicationVersion" ],
                members: {
                    applicationArn: {},
                    applicationId: {},
                    applicationVersion: {
                        type: "integer"
                    }
                }
            },
            idempotent: true
        },
        CreateDataSetImportTask: {
            http: {
                requestUri: "/applications/{applicationId}/dataset-import-task",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "importConfig" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    importConfig: {
                        type: "structure",
                        members: {
                            dataSets: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "dataSet", "externalLocation" ],
                                    members: {
                                        dataSet: {
                                            type: "structure",
                                            required: [ "datasetName", "datasetOrg", "recordLength" ],
                                            members: {
                                                datasetName: {},
                                                datasetOrg: {
                                                    type: "structure",
                                                    members: {
                                                        gdg: {
                                                            type: "structure",
                                                            members: {
                                                                limit: {
                                                                    type: "integer"
                                                                },
                                                                rollDisposition: {}
                                                            }
                                                        },
                                                        po: {
                                                            type: "structure",
                                                            required: [ "format", "memberFileExtensions" ],
                                                            members: {
                                                                encoding: {},
                                                                format: {},
                                                                memberFileExtensions: {
                                                                    type: "list",
                                                                    member: {}
                                                                }
                                                            }
                                                        },
                                                        ps: {
                                                            type: "structure",
                                                            required: [ "format" ],
                                                            members: {
                                                                encoding: {},
                                                                format: {}
                                                            }
                                                        },
                                                        vsam: {
                                                            type: "structure",
                                                            required: [ "format" ],
                                                            members: {
                                                                alternateKeys: {
                                                                    shape: "Sv"
                                                                },
                                                                compressed: {
                                                                    type: "boolean"
                                                                },
                                                                encoding: {},
                                                                format: {},
                                                                primaryKey: {
                                                                    shape: "Sy"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    union: true
                                                },
                                                recordLength: {
                                                    type: "structure",
                                                    required: [ "max", "min" ],
                                                    members: {
                                                        max: {
                                                            type: "integer"
                                                        },
                                                        min: {
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                relativePath: {},
                                                storageType: {}
                                            }
                                        },
                                        externalLocation: {
                                            type: "structure",
                                            members: {
                                                s3Location: {}
                                            },
                                            union: true
                                        }
                                    }
                                }
                            },
                            s3Location: {}
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {}
                }
            },
            idempotent: true
        },
        CreateDeployment: {
            http: {
                requestUri: "/applications/{applicationId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "applicationVersion", "environmentId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    applicationVersion: {
                        type: "integer"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    environmentId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {}
                }
            },
            idempotent: true
        },
        CreateEnvironment: {
            http: {
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "engineType", "instanceType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    engineType: {},
                    engineVersion: {},
                    highAvailabilityConfig: {
                        shape: "S16"
                    },
                    instanceType: {},
                    kmsKeyId: {},
                    name: {},
                    preferredMaintenanceWindow: {},
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S19"
                    },
                    storageConfigurations: {
                        shape: "S1a"
                    },
                    subnetIds: {
                        shape: "S19"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            },
            idempotent: true
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteApplicationFromEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/environment/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "environmentId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationArn", "applicationId", "creationTime", "engineType", "latestVersion", "name", "status" ],
                members: {
                    applicationArn: {},
                    applicationId: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    deployedVersion: {
                        type: "structure",
                        required: [ "applicationVersion", "status" ],
                        members: {
                            applicationVersion: {
                                type: "integer"
                            },
                            status: {},
                            statusReason: {}
                        }
                    },
                    description: {},
                    engineType: {},
                    environmentId: {},
                    kmsKeyId: {},
                    lastStartTime: {
                        type: "timestamp"
                    },
                    latestVersion: {
                        shape: "S1r"
                    },
                    listenerArns: {
                        shape: "S1t"
                    },
                    listenerPorts: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    },
                    loadBalancerDnsName: {},
                    logGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "logGroupName", "logType" ],
                            members: {
                                logGroupName: {},
                                logType: {}
                            }
                        }
                    },
                    name: {},
                    roleArn: {},
                    status: {},
                    statusReason: {},
                    tags: {
                        shape: "Sd"
                    },
                    targetGroupArns: {
                        shape: "S1t"
                    }
                }
            }
        },
        GetApplicationVersion: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/versions/{applicationVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "applicationVersion" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    applicationVersion: {
                        location: "uri",
                        locationName: "applicationVersion",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationVersion", "creationTime", "definitionContent", "name", "status" ],
                members: {
                    applicationVersion: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    definitionContent: {},
                    description: {},
                    name: {},
                    status: {},
                    statusReason: {}
                }
            }
        },
        GetBatchJobExecution: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/batch-job-executions/{executionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "executionId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    executionId: {
                        location: "uri",
                        locationName: "executionId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "executionId", "startTime", "status" ],
                members: {
                    applicationId: {},
                    batchJobIdentifier: {
                        shape: "S24"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    executionId: {},
                    jobId: {},
                    jobName: {},
                    jobType: {},
                    jobUser: {},
                    returnCode: {},
                    startTime: {
                        type: "timestamp"
                    },
                    status: {},
                    statusReason: {}
                }
            }
        },
        GetDataSetDetails: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/datasets/{dataSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSetName" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSetName: {
                        location: "uri",
                        locationName: "dataSetName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSetName" ],
                members: {
                    blocksize: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    dataSetName: {},
                    dataSetOrg: {
                        type: "structure",
                        members: {
                            gdg: {
                                type: "structure",
                                members: {
                                    limit: {
                                        type: "integer"
                                    },
                                    rollDisposition: {}
                                }
                            },
                            po: {
                                type: "structure",
                                required: [ "encoding", "format" ],
                                members: {
                                    encoding: {},
                                    format: {}
                                }
                            },
                            ps: {
                                type: "structure",
                                required: [ "encoding", "format" ],
                                members: {
                                    encoding: {},
                                    format: {}
                                }
                            },
                            vsam: {
                                type: "structure",
                                members: {
                                    alternateKeys: {
                                        shape: "Sv"
                                    },
                                    cacheAtStartup: {
                                        type: "boolean"
                                    },
                                    compressed: {
                                        type: "boolean"
                                    },
                                    encoding: {},
                                    primaryKey: {
                                        shape: "Sy"
                                    },
                                    recordFormat: {}
                                }
                            }
                        },
                        union: true
                    },
                    fileSize: {
                        type: "long"
                    },
                    lastReferencedTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    location: {},
                    recordLength: {
                        type: "integer"
                    }
                }
            }
        },
        GetDataSetImportTask: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/dataset-import-tasks/{taskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "taskId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status", "taskId" ],
                members: {
                    status: {},
                    summary: {
                        shape: "S2m"
                    },
                    taskId: {}
                }
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/deployments/{deploymentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "deploymentId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    deploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "applicationVersion", "creationTime", "deploymentId", "environmentId", "status" ],
                members: {
                    applicationId: {},
                    applicationVersion: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    deploymentId: {},
                    environmentId: {},
                    status: {},
                    statusReason: {}
                }
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environments/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "creationTime", "engineType", "engineVersion", "environmentArn", "environmentId", "instanceType", "name", "securityGroupIds", "status", "subnetIds", "vpcId" ],
                members: {
                    actualCapacity: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    description: {},
                    engineType: {},
                    engineVersion: {},
                    environmentArn: {},
                    environmentId: {},
                    highAvailabilityConfig: {
                        shape: "S16"
                    },
                    instanceType: {},
                    kmsKeyId: {},
                    loadBalancerArn: {},
                    name: {},
                    pendingMaintenance: {
                        type: "structure",
                        members: {
                            engineVersion: {},
                            schedule: {
                                type: "structure",
                                members: {
                                    endTime: {
                                        type: "timestamp"
                                    },
                                    startTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    },
                    preferredMaintenanceWindow: {},
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S19"
                    },
                    status: {},
                    statusReason: {},
                    storageConfigurations: {
                        shape: "S1a"
                    },
                    subnetIds: {
                        shape: "S19"
                    },
                    tags: {
                        shape: "Sd"
                    },
                    vpcId: {}
                }
            }
        },
        GetSignedBluinsightsUrl: {
            http: {
                method: "GET",
                requestUri: "/signed-bi-url",
                responseCode: 200
            },
            output: {
                type: "structure",
                required: [ "signedBiUrl" ],
                members: {
                    signedBiUrl: {}
                }
            }
        },
        ListApplicationVersions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationVersions" ],
                members: {
                    applicationVersions: {
                        type: "list",
                        member: {
                            shape: "S1r"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    environmentId: {
                        location: "querystring",
                        locationName: "environmentId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    names: {
                        shape: "S31",
                        location: "querystring",
                        locationName: "names"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applications" ],
                members: {
                    applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationArn", "applicationId", "applicationVersion", "creationTime", "engineType", "name", "status" ],
                            members: {
                                applicationArn: {},
                                applicationId: {},
                                applicationVersion: {
                                    type: "integer"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                description: {},
                                engineType: {},
                                environmentId: {},
                                lastStartTime: {
                                    type: "timestamp"
                                },
                                name: {},
                                roleArn: {},
                                status: {},
                                versionStatus: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBatchJobDefinitions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/batch-job-definitions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    prefix: {
                        location: "querystring",
                        locationName: "prefix"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "batchJobDefinitions" ],
                members: {
                    batchJobDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                fileBatchJobDefinition: {
                                    type: "structure",
                                    required: [ "fileName" ],
                                    members: {
                                        fileName: {},
                                        folderPath: {}
                                    }
                                },
                                scriptBatchJobDefinition: {
                                    type: "structure",
                                    required: [ "scriptName" ],
                                    members: {
                                        scriptName: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBatchJobExecutions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/batch-job-executions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    executionIds: {
                        location: "querystring",
                        locationName: "executionIds",
                        type: "list",
                        member: {}
                    },
                    jobName: {
                        location: "querystring",
                        locationName: "jobName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    startedAfter: {
                        location: "querystring",
                        locationName: "startedAfter",
                        type: "timestamp"
                    },
                    startedBefore: {
                        location: "querystring",
                        locationName: "startedBefore",
                        type: "timestamp"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "batchJobExecutions" ],
                members: {
                    batchJobExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "executionId", "startTime", "status" ],
                            members: {
                                applicationId: {},
                                batchJobIdentifier: {
                                    shape: "S24"
                                },
                                endTime: {
                                    type: "timestamp"
                                },
                                executionId: {},
                                jobId: {},
                                jobName: {},
                                jobType: {},
                                returnCode: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSetImportHistory: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/dataset-import-tasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSetImportTasks" ],
                members: {
                    dataSetImportTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "status", "summary", "taskId" ],
                            members: {
                                status: {},
                                statusReason: {},
                                summary: {
                                    shape: "S2m"
                                },
                                taskId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSets: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/datasets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameFilter: {
                        location: "querystring",
                        locationName: "nameFilter"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    prefix: {
                        location: "querystring",
                        locationName: "prefix"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSets" ],
                members: {
                    dataSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "dataSetName" ],
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                dataSetName: {},
                                dataSetOrg: {},
                                format: {},
                                lastReferencedTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "deployments" ],
                members: {
                    deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "applicationVersion", "creationTime", "deploymentId", "environmentId", "status" ],
                            members: {
                                applicationId: {},
                                applicationVersion: {
                                    type: "integer"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                deploymentId: {},
                                environmentId: {},
                                status: {},
                                statusReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEngineVersions: {
            http: {
                method: "GET",
                requestUri: "/engine-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    engineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "engineVersions" ],
                members: {
                    engineVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "engineType", "engineVersion" ],
                            members: {
                                engineType: {},
                                engineVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    engineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    names: {
                        shape: "S31",
                        location: "querystring",
                        locationName: "names"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environments" ],
                members: {
                    environments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "engineType", "engineVersion", "environmentArn", "environmentId", "instanceType", "name", "status" ],
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                engineType: {},
                                engineVersion: {},
                                environmentArn: {},
                                environmentId: {},
                                instanceType: {},
                                name: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        StartApplication: {
            http: {
                requestUri: "/applications/{applicationId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartBatchJob: {
            http: {
                requestUri: "/applications/{applicationId}/batch-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "batchJobIdentifier" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    batchJobIdentifier: {
                        shape: "S24"
                    },
                    jobParams: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "executionId" ],
                members: {
                    executionId: {}
                }
            }
        },
        StopApplication: {
            http: {
                requestUri: "/applications/{applicationId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    forceStop: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "currentApplicationVersion" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    currentApplicationVersion: {
                        type: "integer"
                    },
                    definition: {
                        shape: "S6"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "applicationVersion" ],
                members: {
                    applicationVersion: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/environments/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    applyDuringMaintenanceWindow: {
                        type: "boolean"
                    },
                    desiredCapacity: {
                        type: "integer"
                    },
                    engineVersion: {},
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    forceUpdate: {
                        type: "boolean"
                    },
                    instanceType: {},
                    preferredMaintenanceWindow: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                content: {},
                s3Location: {}
            },
            union: true
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                required: [ "length", "offset" ],
                members: {
                    allowDuplicates: {
                        type: "boolean"
                    },
                    length: {
                        type: "integer"
                    },
                    name: {},
                    offset: {
                        type: "integer"
                    }
                }
            }
        },
        Sy: {
            type: "structure",
            required: [ "length", "offset" ],
            members: {
                length: {
                    type: "integer"
                },
                name: {},
                offset: {
                    type: "integer"
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "desiredCapacity" ],
            members: {
                desiredCapacity: {
                    type: "integer"
                }
            }
        },
        S19: {
            type: "list",
            member: {}
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    efs: {
                        type: "structure",
                        required: [ "fileSystemId", "mountPoint" ],
                        members: {
                            fileSystemId: {
                                locationName: "file-system-id"
                            },
                            mountPoint: {
                                locationName: "mount-point"
                            }
                        }
                    },
                    fsx: {
                        type: "structure",
                        required: [ "fileSystemId", "mountPoint" ],
                        members: {
                            fileSystemId: {
                                locationName: "file-system-id"
                            },
                            mountPoint: {
                                locationName: "mount-point"
                            }
                        }
                    }
                },
                union: true
            }
        },
        S1r: {
            type: "structure",
            required: [ "applicationVersion", "creationTime", "status" ],
            members: {
                applicationVersion: {
                    type: "integer"
                },
                creationTime: {
                    type: "timestamp"
                },
                status: {},
                statusReason: {}
            }
        },
        S1t: {
            type: "list",
            member: {}
        },
        S24: {
            type: "structure",
            members: {
                fileBatchJobIdentifier: {
                    type: "structure",
                    required: [ "fileName" ],
                    members: {
                        fileName: {},
                        folderPath: {}
                    }
                },
                s3BatchJobIdentifier: {
                    type: "structure",
                    required: [ "bucket", "identifier" ],
                    members: {
                        bucket: {},
                        identifier: {
                            type: "structure",
                            members: {
                                fileName: {},
                                scriptName: {}
                            },
                            union: true
                        },
                        keyPrefix: {}
                    }
                },
                scriptBatchJobIdentifier: {
                    type: "structure",
                    required: [ "scriptName" ],
                    members: {
                        scriptName: {}
                    }
                }
            },
            union: true
        },
        S2m: {
            type: "structure",
            required: [ "failed", "inProgress", "pending", "succeeded", "total" ],
            members: {
                failed: {
                    type: "integer"
                },
                inProgress: {
                    type: "integer"
                },
                pending: {
                    type: "integer"
                },
                succeeded: {
                    type: "integer"
                },
                total: {
                    type: "integer"
                }
            }
        },
        S31: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListApplicationVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applicationVersions"
        },
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applications"
        },
        ListBatchJobDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "batchJobDefinitions"
        },
        ListBatchJobExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "batchJobExecutions"
        },
        ListDataSetImportHistory: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataSetImportTasks"
        },
        ListDataSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataSets"
        },
        ListDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deployments"
        },
        ListEngineVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "engineVersions"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environments"
        }
    }
};

AWS.apiLoader.services["connectcampaigns"] = {};

AWS.ConnectCampaigns = AWS.Service.defineService("connectcampaigns", [ "2021-01-30" ]);

AWS.apiLoader.services["connectcampaigns"]["2021-01-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-30",
        endpointPrefix: "connect-campaigns",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AmazonConnectCampaignService",
        serviceId: "ConnectCampaigns",
        signatureVersion: "v4",
        signingName: "connect-campaigns",
        uid: "connectcampaigns-2021-01-30"
    },
    operations: {
        CreateCampaign: {
            http: {
                method: "PUT",
                requestUri: "/campaigns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "connectInstanceId", "dialerConfig", "outboundCallConfig" ],
                members: {
                    name: {},
                    connectInstanceId: {},
                    dialerConfig: {
                        shape: "S4"
                    },
                    outboundCallConfig: {
                        shape: "Sa"
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        DeleteCampaign: {
            http: {
                method: "DELETE",
                requestUri: "/campaigns/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        DeleteConnectInstanceConfig: {
            http: {
                method: "DELETE",
                requestUri: "/connect-instance/{connectInstanceId}/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            idempotent: true
        },
        DeleteInstanceOnboardingJob: {
            http: {
                method: "DELETE",
                requestUri: "/connect-instance/{connectInstanceId}/onboarding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            idempotent: true
        },
        DescribeCampaign: {
            http: {
                method: "GET",
                requestUri: "/campaigns/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaign: {
                        type: "structure",
                        required: [ "id", "arn", "name", "connectInstanceId", "dialerConfig", "outboundCallConfig" ],
                        members: {
                            id: {},
                            arn: {},
                            name: {},
                            connectInstanceId: {},
                            dialerConfig: {
                                shape: "S4"
                            },
                            outboundCallConfig: {
                                shape: "Sa"
                            },
                            tags: {
                                shape: "Sg"
                            }
                        }
                    }
                }
            }
        },
        GetCampaignState: {
            http: {
                method: "GET",
                requestUri: "/campaigns/{id}/state",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    state: {}
                }
            }
        },
        GetCampaignStateBatch: {
            http: {
                requestUri: "/campaigns-state",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "campaignIds" ],
                members: {
                    campaignIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                campaignId: {},
                                state: {}
                            }
                        }
                    },
                    failedRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                campaignId: {},
                                failureCode: {}
                            }
                        }
                    }
                }
            }
        },
        GetConnectInstanceConfig: {
            http: {
                method: "GET",
                requestUri: "/connect-instance/{connectInstanceId}/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectInstanceConfig: {
                        type: "structure",
                        required: [ "connectInstanceId", "serviceLinkedRoleArn", "encryptionConfig" ],
                        members: {
                            connectInstanceId: {},
                            serviceLinkedRoleArn: {},
                            encryptionConfig: {
                                shape: "S17"
                            }
                        }
                    }
                }
            }
        },
        GetInstanceOnboardingJobStatus: {
            http: {
                method: "GET",
                requestUri: "/connect-instance/{connectInstanceId}/onboarding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectInstanceOnboardingJobStatus: {
                        shape: "S1d"
                    }
                }
            }
        },
        ListCampaigns: {
            http: {
                requestUri: "/campaigns-summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    filters: {
                        type: "structure",
                        members: {
                            instanceIdFilter: {
                                type: "structure",
                                required: [ "value", "operator" ],
                                members: {
                                    value: {},
                                    operator: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    campaignSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "connectInstanceId" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                connectInstanceId: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        PauseCampaign: {
            http: {
                requestUri: "/campaigns/{id}/pause",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        PutDialRequestBatch: {
            http: {
                method: "PUT",
                requestUri: "/campaigns/{id}/dial-requests",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "dialRequests" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    dialRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "clientToken", "phoneNumber", "expirationTime", "attributes" ],
                            members: {
                                clientToken: {},
                                phoneNumber: {
                                    type: "string",
                                    sensitive: true
                                },
                                expirationTime: {
                                    type: "timestamp",
                                    timestampFormat: "iso8601"
                                },
                                attributes: {
                                    type: "map",
                                    key: {},
                                    value: {},
                                    sensitive: true
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                clientToken: {},
                                id: {}
                            }
                        }
                    },
                    failedRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                clientToken: {},
                                id: {},
                                failureCode: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ResumeCampaign: {
            http: {
                requestUri: "/campaigns/{id}/resume",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        StartCampaign: {
            http: {
                requestUri: "/campaigns/{id}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        StartInstanceOnboardingJob: {
            http: {
                method: "PUT",
                requestUri: "/connect-instance/{connectInstanceId}/onboarding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId", "encryptionConfig" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    },
                    encryptionConfig: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectInstanceOnboardingJobStatus: {
                        shape: "S1d"
                    }
                }
            },
            idempotent: true
        },
        StopCampaign: {
            http: {
                requestUri: "/campaigns/{id}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tags" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tagKeys" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        },
        UpdateCampaignDialerConfig: {
            http: {
                requestUri: "/campaigns/{id}/dialer-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "dialerConfig" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    dialerConfig: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        UpdateCampaignName: {
            http: {
                requestUri: "/campaigns/{id}/name",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "name" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {}
                }
            },
            idempotent: true
        },
        UpdateCampaignOutboundCallConfig: {
            http: {
                requestUri: "/campaigns/{id}/outbound-call-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    connectContactFlowId: {},
                    connectSourcePhoneNumber: {},
                    answerMachineDetectionConfig: {
                        shape: "Se"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                progressiveDialerConfig: {
                    type: "structure",
                    required: [ "bandwidthAllocation" ],
                    members: {
                        bandwidthAllocation: {
                            type: "double"
                        },
                        dialingCapacity: {
                            type: "double"
                        }
                    }
                },
                predictiveDialerConfig: {
                    type: "structure",
                    required: [ "bandwidthAllocation" ],
                    members: {
                        bandwidthAllocation: {
                            type: "double"
                        },
                        dialingCapacity: {
                            type: "double"
                        }
                    }
                },
                agentlessDialerConfig: {
                    type: "structure",
                    members: {
                        dialingCapacity: {
                            type: "double"
                        }
                    }
                }
            },
            union: true
        },
        Sa: {
            type: "structure",
            required: [ "connectContactFlowId" ],
            members: {
                connectContactFlowId: {},
                connectSourcePhoneNumber: {},
                connectQueueId: {},
                answerMachineDetectionConfig: {
                    shape: "Se"
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "enableAnswerMachineDetection" ],
            members: {
                enableAnswerMachineDetection: {
                    type: "boolean"
                }
            }
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        S17: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                encryptionType: {},
                keyArn: {}
            }
        },
        S1d: {
            type: "structure",
            required: [ "connectInstanceId", "status" ],
            members: {
                connectInstanceId: {},
                status: {},
                failureCode: {}
            }
        }
    },
    paginators: {
        ListCampaigns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "campaignSummaryList"
        }
    }
};

AWS.apiLoader.services["redshiftserverless"] = {};

AWS.RedshiftServerless = AWS.Service.defineService("redshiftserverless", [ "2021-04-21" ]);

AWS.apiLoader.services["redshiftserverless"]["2021-04-21"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-04-21",
        endpointPrefix: "redshift-serverless",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Redshift Serverless",
        serviceId: "Redshift Serverless",
        signatureVersion: "v4",
        signingName: "redshift-serverless",
        targetPrefix: "RedshiftServerless",
        uid: "redshift-serverless-2021-04-21"
    },
    operations: {
        ConvertRecoveryPointToSnapshot: {
            input: {
                type: "structure",
                required: [ "recoveryPointId", "snapshotName" ],
                members: {
                    recoveryPointId: {},
                    retentionPeriod: {
                        type: "integer"
                    },
                    snapshotName: {},
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S9"
                    }
                }
            }
        },
        CreateCustomDomainAssociation: {
            input: {
                type: "structure",
                required: [ "customDomainCertificateArn", "customDomainName", "workgroupName" ],
                members: {
                    customDomainCertificateArn: {},
                    customDomainName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    customDomainCertificateArn: {},
                    customDomainCertificateExpiryTime: {
                        shape: "Se"
                    },
                    customDomainName: {},
                    workgroupName: {}
                }
            }
        },
        CreateEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName", "subnetIds", "workgroupName" ],
                members: {
                    endpointName: {},
                    ownerAccount: {},
                    subnetIds: {
                        shape: "Sn"
                    },
                    vpcSecurityGroupIds: {
                        shape: "Sp"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Ss"
                    }
                }
            },
            idempotent: true
        },
        CreateNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    adminPasswordSecretKmsKeyId: {},
                    adminUserPassword: {
                        shape: "Sz"
                    },
                    adminUsername: {
                        shape: "S10"
                    },
                    dbName: {},
                    defaultIamRoleArn: {},
                    iamRoles: {
                        shape: "S11"
                    },
                    kmsKeyId: {},
                    logExports: {
                        shape: "S13"
                    },
                    manageAdminPassword: {
                        type: "boolean"
                    },
                    namespaceName: {},
                    redshiftIdcApplicationArn: {},
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    namespace: {
                        shape: "S19"
                    }
                }
            },
            idempotent: true
        },
        CreateScheduledAction: {
            input: {
                type: "structure",
                required: [ "namespaceName", "roleArn", "schedule", "scheduledActionName", "targetAction" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    namespaceName: {},
                    roleArn: {},
                    schedule: {
                        shape: "S1d"
                    },
                    scheduledActionDescription: {},
                    scheduledActionName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    targetAction: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scheduledAction: {
                        shape: "S1j"
                    }
                }
            },
            idempotent: true
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "namespaceName", "snapshotName" ],
                members: {
                    namespaceName: {},
                    retentionPeriod: {
                        type: "integer"
                    },
                    snapshotName: {},
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        CreateSnapshotCopyConfiguration: {
            input: {
                type: "structure",
                required: [ "destinationRegion", "namespaceName" ],
                members: {
                    destinationKmsKeyId: {},
                    destinationRegion: {},
                    namespaceName: {},
                    snapshotRetentionPeriod: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "snapshotCopyConfiguration" ],
                members: {
                    snapshotCopyConfiguration: {
                        shape: "S1q"
                    }
                }
            },
            idempotent: true
        },
        CreateUsageLimit: {
            input: {
                type: "structure",
                required: [ "amount", "resourceArn", "usageType" ],
                members: {
                    amount: {
                        type: "long"
                    },
                    breachAction: {},
                    period: {},
                    resourceArn: {},
                    usageType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1w"
                    }
                }
            },
            idempotent: true
        },
        CreateWorkgroup: {
            input: {
                type: "structure",
                required: [ "namespaceName", "workgroupName" ],
                members: {
                    baseCapacity: {
                        type: "integer"
                    },
                    configParameters: {
                        shape: "S1y"
                    },
                    enhancedVpcRouting: {
                        type: "boolean"
                    },
                    maxCapacity: {
                        type: "integer"
                    },
                    namespaceName: {},
                    port: {
                        type: "integer"
                    },
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S22"
                    },
                    subnetIds: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "S4"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    workgroup: {
                        shape: "S25"
                    }
                }
            },
            idempotent: true
        },
        DeleteCustomDomainAssociation: {
            input: {
                type: "structure",
                required: [ "customDomainName", "workgroupName" ],
                members: {
                    customDomainName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName" ],
                members: {
                    endpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Ss"
                    }
                }
            },
            idempotent: true
        },
        DeleteNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    finalSnapshotName: {},
                    finalSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespace" ],
                members: {
                    namespace: {
                        shape: "S19"
                    }
                }
            },
            idempotent: true
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteScheduledAction: {
            input: {
                type: "structure",
                required: [ "scheduledActionName" ],
                members: {
                    scheduledActionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    scheduledAction: {
                        shape: "S1j"
                    }
                }
            },
            idempotent: true
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "snapshotName" ],
                members: {
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        DeleteSnapshotCopyConfiguration: {
            input: {
                type: "structure",
                required: [ "snapshotCopyConfigurationId" ],
                members: {
                    snapshotCopyConfigurationId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "snapshotCopyConfiguration" ],
                members: {
                    snapshotCopyConfiguration: {
                        shape: "S1q"
                    }
                }
            },
            idempotent: true
        },
        DeleteUsageLimit: {
            input: {
                type: "structure",
                required: [ "usageLimitId" ],
                members: {
                    usageLimitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1w"
                    }
                }
            },
            idempotent: true
        },
        DeleteWorkgroup: {
            input: {
                type: "structure",
                required: [ "workgroupName" ],
                members: {
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroup" ],
                members: {
                    workgroup: {
                        shape: "S25"
                    }
                }
            },
            idempotent: true
        },
        GetCredentials: {
            input: {
                type: "structure",
                members: {
                    customDomainName: {},
                    dbName: {},
                    durationSeconds: {
                        type: "integer"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    dbPassword: {
                        shape: "Sz"
                    },
                    dbUser: {
                        shape: "S10"
                    },
                    expiration: {
                        type: "timestamp"
                    },
                    nextRefreshTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetCustomDomainAssociation: {
            input: {
                type: "structure",
                required: [ "customDomainName", "workgroupName" ],
                members: {
                    customDomainName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    customDomainCertificateArn: {},
                    customDomainCertificateExpiryTime: {
                        shape: "Se"
                    },
                    customDomainName: {},
                    workgroupName: {}
                }
            }
        },
        GetEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName" ],
                members: {
                    endpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Ss"
                    }
                }
            }
        },
        GetNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespace" ],
                members: {
                    namespace: {
                        shape: "S19"
                    }
                }
            }
        },
        GetRecoveryPoint: {
            input: {
                type: "structure",
                required: [ "recoveryPointId" ],
                members: {
                    recoveryPointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recoveryPoint: {
                        shape: "S33"
                    }
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourcePolicy: {
                        shape: "S36"
                    }
                }
            }
        },
        GetScheduledAction: {
            input: {
                type: "structure",
                required: [ "scheduledActionName" ],
                members: {
                    scheduledActionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    scheduledAction: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetSnapshot: {
            input: {
                type: "structure",
                members: {
                    ownerAccount: {},
                    snapshotArn: {},
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S9"
                    }
                }
            }
        },
        GetTableRestoreStatus: {
            input: {
                type: "structure",
                required: [ "tableRestoreRequestId" ],
                members: {
                    tableRestoreRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tableRestoreStatus: {
                        shape: "S3d"
                    }
                }
            }
        },
        GetUsageLimit: {
            input: {
                type: "structure",
                required: [ "usageLimitId" ],
                members: {
                    usageLimitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetWorkgroup: {
            input: {
                type: "structure",
                required: [ "workgroupName" ],
                members: {
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroup" ],
                members: {
                    workgroup: {
                        shape: "S25"
                    }
                }
            }
        },
        ListCustomDomainAssociations: {
            input: {
                type: "structure",
                members: {
                    customDomainCertificateArn: {},
                    customDomainName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    associations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                customDomainCertificateArn: {},
                                customDomainCertificateExpiryTime: {
                                    shape: "Se"
                                },
                                customDomainName: {},
                                workgroupName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEndpointAccess: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    ownerAccount: {},
                    vpcId: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "endpoints" ],
                members: {
                    endpoints: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNamespaces: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespaces" ],
                members: {
                    namespaces: {
                        type: "list",
                        member: {
                            shape: "S19"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecoveryPoints: {
            input: {
                type: "structure",
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    namespaceArn: {},
                    namespaceName: {},
                    nextToken: {},
                    startTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    recoveryPoints: {
                        type: "list",
                        member: {
                            shape: "S33"
                        }
                    }
                }
            }
        },
        ListScheduledActions: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    namespaceName: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    scheduledActions: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListSnapshotCopyConfigurations: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    namespaceName: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "snapshotCopyConfigurations" ],
                members: {
                    nextToken: {},
                    snapshotCopyConfigurations: {
                        type: "list",
                        member: {
                            shape: "S1q"
                        }
                    }
                }
            }
        },
        ListSnapshots: {
            input: {
                type: "structure",
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    namespaceArn: {},
                    namespaceName: {},
                    nextToken: {},
                    ownerAccount: {},
                    startTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    snapshots: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    }
                }
            }
        },
        ListTableRestoreStatus: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    namespaceName: {},
                    nextToken: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tableRestoreStatuses: {
                        type: "list",
                        member: {
                            shape: "S3d"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        ListUsageLimits: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceArn: {},
                    usageType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    usageLimits: {
                        type: "list",
                        member: {
                            shape: "S1w"
                        }
                    }
                }
            }
        },
        ListWorkgroups: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    ownerAccount: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroups" ],
                members: {
                    nextToken: {},
                    workgroups: {
                        type: "list",
                        member: {
                            shape: "S25"
                        }
                    }
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "policy", "resourceArn" ],
                members: {
                    policy: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourcePolicy: {
                        shape: "S36"
                    }
                }
            }
        },
        RestoreFromRecoveryPoint: {
            input: {
                type: "structure",
                required: [ "namespaceName", "recoveryPointId", "workgroupName" ],
                members: {
                    namespaceName: {},
                    recoveryPointId: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    namespace: {
                        shape: "S19"
                    },
                    recoveryPointId: {}
                }
            }
        },
        RestoreFromSnapshot: {
            input: {
                type: "structure",
                required: [ "namespaceName", "workgroupName" ],
                members: {
                    adminPasswordSecretKmsKeyId: {},
                    manageAdminPassword: {
                        type: "boolean"
                    },
                    namespaceName: {},
                    ownerAccount: {},
                    snapshotArn: {},
                    snapshotName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    namespace: {
                        shape: "S19"
                    },
                    ownerAccount: {},
                    snapshotName: {}
                }
            },
            idempotent: true
        },
        RestoreTableFromRecoveryPoint: {
            input: {
                type: "structure",
                required: [ "namespaceName", "newTableName", "recoveryPointId", "sourceDatabaseName", "sourceTableName", "workgroupName" ],
                members: {
                    activateCaseSensitiveIdentifier: {
                        type: "boolean"
                    },
                    namespaceName: {},
                    newTableName: {},
                    recoveryPointId: {},
                    sourceDatabaseName: {},
                    sourceSchemaName: {},
                    sourceTableName: {},
                    targetDatabaseName: {},
                    targetSchemaName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tableRestoreStatus: {
                        shape: "S3d"
                    }
                }
            }
        },
        RestoreTableFromSnapshot: {
            input: {
                type: "structure",
                required: [ "namespaceName", "newTableName", "snapshotName", "sourceDatabaseName", "sourceTableName", "workgroupName" ],
                members: {
                    activateCaseSensitiveIdentifier: {
                        type: "boolean"
                    },
                    namespaceName: {},
                    newTableName: {},
                    snapshotName: {},
                    sourceDatabaseName: {},
                    sourceSchemaName: {},
                    sourceTableName: {},
                    targetDatabaseName: {},
                    targetSchemaName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tableRestoreStatus: {
                        shape: "S3d"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCustomDomainAssociation: {
            input: {
                type: "structure",
                required: [ "customDomainCertificateArn", "customDomainName", "workgroupName" ],
                members: {
                    customDomainCertificateArn: {},
                    customDomainName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    customDomainCertificateArn: {},
                    customDomainCertificateExpiryTime: {
                        shape: "Se"
                    },
                    customDomainName: {},
                    workgroupName: {}
                }
            }
        },
        UpdateEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName" ],
                members: {
                    endpointName: {},
                    vpcSecurityGroupIds: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Ss"
                    }
                }
            }
        },
        UpdateNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    adminPasswordSecretKmsKeyId: {},
                    adminUserPassword: {
                        shape: "Sz"
                    },
                    adminUsername: {
                        shape: "S10"
                    },
                    defaultIamRoleArn: {},
                    iamRoles: {
                        shape: "S11"
                    },
                    kmsKeyId: {},
                    logExports: {
                        shape: "S13"
                    },
                    manageAdminPassword: {
                        type: "boolean"
                    },
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespace" ],
                members: {
                    namespace: {
                        shape: "S19"
                    }
                }
            }
        },
        UpdateScheduledAction: {
            input: {
                type: "structure",
                required: [ "scheduledActionName" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    roleArn: {},
                    schedule: {
                        shape: "S1d"
                    },
                    scheduledActionDescription: {},
                    scheduledActionName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    targetAction: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scheduledAction: {
                        shape: "S1j"
                    }
                }
            },
            idempotent: true
        },
        UpdateSnapshot: {
            input: {
                type: "structure",
                required: [ "snapshotName" ],
                members: {
                    retentionPeriod: {
                        type: "integer"
                    },
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S9"
                    }
                }
            }
        },
        UpdateSnapshotCopyConfiguration: {
            input: {
                type: "structure",
                required: [ "snapshotCopyConfigurationId" ],
                members: {
                    snapshotCopyConfigurationId: {},
                    snapshotRetentionPeriod: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "snapshotCopyConfiguration" ],
                members: {
                    snapshotCopyConfiguration: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateUsageLimit: {
            input: {
                type: "structure",
                required: [ "usageLimitId" ],
                members: {
                    amount: {
                        type: "long"
                    },
                    breachAction: {},
                    usageLimitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1w"
                    }
                }
            }
        },
        UpdateWorkgroup: {
            input: {
                type: "structure",
                required: [ "workgroupName" ],
                members: {
                    baseCapacity: {
                        type: "integer"
                    },
                    configParameters: {
                        shape: "S1y"
                    },
                    enhancedVpcRouting: {
                        type: "boolean"
                    },
                    maxCapacity: {
                        type: "integer"
                    },
                    port: {
                        type: "integer"
                    },
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S22"
                    },
                    subnetIds: {
                        shape: "Sn"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroup" ],
                members: {
                    workgroup: {
                        shape: "S25"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S9: {
            type: "structure",
            members: {
                accountsWithProvisionedRestoreAccess: {
                    shape: "Sa"
                },
                accountsWithRestoreAccess: {
                    shape: "Sa"
                },
                actualIncrementalBackupSizeInMegaBytes: {
                    type: "double"
                },
                adminPasswordSecretArn: {},
                adminPasswordSecretKmsKeyId: {},
                adminUsername: {},
                backupProgressInMegaBytes: {
                    type: "double"
                },
                currentBackupRateInMegaBytesPerSecond: {
                    type: "double"
                },
                elapsedTimeInSeconds: {
                    type: "long"
                },
                estimatedSecondsToCompletion: {
                    type: "long"
                },
                kmsKeyId: {},
                namespaceArn: {},
                namespaceName: {},
                ownerAccount: {},
                snapshotArn: {},
                snapshotCreateTime: {
                    shape: "Se"
                },
                snapshotName: {},
                snapshotRemainingDays: {
                    type: "integer"
                },
                snapshotRetentionPeriod: {
                    type: "integer"
                },
                snapshotRetentionStartTime: {
                    shape: "Se"
                },
                status: {},
                totalBackupSizeInMegaBytes: {
                    type: "double"
                }
            }
        },
        Sa: {
            type: "list",
            member: {}
        },
        Se: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "structure",
            members: {
                address: {},
                endpointArn: {},
                endpointCreateTime: {
                    shape: "Se"
                },
                endpointName: {},
                endpointStatus: {},
                port: {
                    type: "integer"
                },
                subnetIds: {
                    shape: "Sn"
                },
                vpcEndpoint: {
                    shape: "St"
                },
                vpcSecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            status: {},
                            vpcSecurityGroupId: {}
                        }
                    }
                },
                workgroupName: {}
            }
        },
        St: {
            type: "structure",
            members: {
                networkInterfaces: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            availabilityZone: {},
                            networkInterfaceId: {},
                            privateIpAddress: {},
                            subnetId: {}
                        }
                    }
                },
                vpcEndpointId: {},
                vpcId: {}
            }
        },
        Sz: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "string",
            sensitive: true
        },
        S11: {
            type: "list",
            member: {}
        },
        S13: {
            type: "list",
            member: {}
        },
        S19: {
            type: "structure",
            members: {
                adminPasswordSecretArn: {},
                adminPasswordSecretKmsKeyId: {},
                adminUsername: {
                    shape: "S10"
                },
                creationDate: {
                    shape: "Se"
                },
                dbName: {},
                defaultIamRoleArn: {},
                iamRoles: {
                    shape: "S11"
                },
                kmsKeyId: {},
                logExports: {
                    shape: "S13"
                },
                namespaceArn: {},
                namespaceId: {},
                namespaceName: {},
                status: {}
            }
        },
        S1d: {
            type: "structure",
            members: {
                at: {
                    type: "timestamp"
                },
                cron: {}
            },
            union: true
        },
        S1f: {
            type: "structure",
            members: {
                createSnapshot: {
                    type: "structure",
                    required: [ "namespaceName", "snapshotNamePrefix" ],
                    members: {
                        namespaceName: {},
                        retentionPeriod: {
                            type: "integer"
                        },
                        snapshotNamePrefix: {},
                        tags: {
                            shape: "S4"
                        }
                    }
                }
            },
            union: true
        },
        S1j: {
            type: "structure",
            members: {
                endTime: {
                    type: "timestamp"
                },
                namespaceName: {},
                nextInvocations: {
                    type: "list",
                    member: {
                        type: "timestamp"
                    }
                },
                roleArn: {},
                schedule: {
                    shape: "S1d"
                },
                scheduledActionDescription: {},
                scheduledActionName: {},
                scheduledActionUuid: {},
                startTime: {
                    type: "timestamp"
                },
                state: {},
                targetAction: {
                    shape: "S1f"
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                destinationKmsKeyId: {},
                destinationRegion: {},
                namespaceName: {},
                snapshotCopyConfigurationArn: {},
                snapshotCopyConfigurationId: {},
                snapshotRetentionPeriod: {
                    type: "integer"
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                amount: {
                    type: "long"
                },
                breachAction: {},
                period: {},
                resourceArn: {},
                usageLimitArn: {},
                usageLimitId: {},
                usageType: {}
            }
        },
        S1y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    parameterKey: {},
                    parameterValue: {}
                }
            }
        },
        S22: {
            type: "list",
            member: {}
        },
        S25: {
            type: "structure",
            members: {
                baseCapacity: {
                    type: "integer"
                },
                configParameters: {
                    shape: "S1y"
                },
                creationDate: {
                    shape: "Se"
                },
                crossAccountVpcs: {
                    type: "list",
                    member: {}
                },
                customDomainCertificateArn: {},
                customDomainCertificateExpiryTime: {
                    shape: "Se"
                },
                customDomainName: {},
                endpoint: {
                    type: "structure",
                    members: {
                        address: {},
                        port: {
                            type: "integer"
                        },
                        vpcEndpoints: {
                            type: "list",
                            member: {
                                shape: "St"
                            }
                        }
                    }
                },
                enhancedVpcRouting: {
                    type: "boolean"
                },
                maxCapacity: {
                    type: "integer"
                },
                namespaceName: {},
                patchVersion: {},
                port: {
                    type: "integer"
                },
                publiclyAccessible: {
                    type: "boolean"
                },
                securityGroupIds: {
                    shape: "S22"
                },
                status: {},
                subnetIds: {
                    shape: "Sn"
                },
                workgroupArn: {},
                workgroupId: {},
                workgroupName: {},
                workgroupVersion: {}
            }
        },
        S33: {
            type: "structure",
            members: {
                namespaceArn: {},
                namespaceName: {},
                recoveryPointCreateTime: {
                    shape: "Se"
                },
                recoveryPointId: {},
                totalSizeInMegaBytes: {
                    type: "double"
                },
                workgroupName: {}
            }
        },
        S36: {
            type: "structure",
            members: {
                policy: {},
                resourceArn: {}
            }
        },
        S3d: {
            type: "structure",
            members: {
                message: {},
                namespaceName: {},
                newTableName: {},
                progressInMegaBytes: {
                    type: "long"
                },
                recoveryPointId: {},
                requestTime: {
                    type: "timestamp"
                },
                snapshotName: {},
                sourceDatabaseName: {},
                sourceSchemaName: {},
                sourceTableName: {},
                status: {},
                tableRestoreRequestId: {},
                targetDatabaseName: {},
                targetSchemaName: {},
                totalDataInMegaBytes: {
                    type: "long"
                },
                workgroupName: {}
            }
        }
    },
    paginators: {
        ListCustomDomainAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "associations"
        },
        ListEndpointAccess: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "endpoints"
        },
        ListNamespaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "namespaces"
        },
        ListRecoveryPoints: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recoveryPoints"
        },
        ListScheduledActions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "scheduledActions"
        },
        ListSnapshotCopyConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "snapshotCopyConfigurations"
        },
        ListSnapshots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "snapshots"
        },
        ListTableRestoreStatus: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tableRestoreStatuses"
        },
        ListUsageLimits: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "usageLimits"
        },
        ListWorkgroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workgroups"
        }
    }
};

AWS.apiLoader.services["rolesanywhere"] = {};

AWS.RolesAnywhere = AWS.Service.defineService("rolesanywhere", [ "2018-05-10" ]);

AWS.apiLoader.services["rolesanywhere"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "rolesanywhere",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "IAM Roles Anywhere",
        serviceId: "RolesAnywhere",
        signatureVersion: "v4",
        signingName: "rolesanywhere",
        uid: "rolesanywhere-2018-05-10"
    },
    operations: {
        CreateProfile: {
            http: {
                requestUri: "/profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "roleArns" ],
                members: {
                    durationSeconds: {
                        type: "integer"
                    },
                    enabled: {
                        type: "boolean"
                    },
                    managedPolicyArns: {
                        shape: "S4"
                    },
                    name: {},
                    requireInstanceProperties: {
                        type: "boolean"
                    },
                    roleArns: {
                        shape: "S7"
                    },
                    sessionPolicy: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                shape: "Se"
            }
        },
        CreateTrustAnchor: {
            http: {
                requestUri: "/trustanchors",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "source" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    name: {},
                    notificationSettings: {
                        shape: "Sl"
                    },
                    source: {
                        shape: "Sq"
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                shape: "Su"
            }
        },
        DeleteCrl: {
            http: {
                method: "DELETE",
                requestUri: "/crl/{crlId}",
                responseCode: 200
            },
            input: {
                shape: "S10"
            },
            output: {
                shape: "S11"
            },
            idempotent: true
        },
        DeleteProfile: {
            http: {
                method: "DELETE",
                requestUri: "/profile/{profileId}",
                responseCode: 200
            },
            input: {
                shape: "S14"
            },
            output: {
                shape: "Se"
            },
            idempotent: true
        },
        DeleteTrustAnchor: {
            http: {
                method: "DELETE",
                requestUri: "/trustanchor/{trustAnchorId}",
                responseCode: 200
            },
            input: {
                shape: "S15"
            },
            output: {
                shape: "Su"
            },
            idempotent: true
        },
        DisableCrl: {
            http: {
                requestUri: "/crl/{crlId}/disable",
                responseCode: 200
            },
            input: {
                shape: "S10"
            },
            output: {
                shape: "S11"
            }
        },
        DisableProfile: {
            http: {
                requestUri: "/profile/{profileId}/disable",
                responseCode: 200
            },
            input: {
                shape: "S14"
            },
            output: {
                shape: "Se"
            }
        },
        DisableTrustAnchor: {
            http: {
                requestUri: "/trustanchor/{trustAnchorId}/disable",
                responseCode: 200
            },
            input: {
                shape: "S15"
            },
            output: {
                shape: "Su"
            }
        },
        EnableCrl: {
            http: {
                requestUri: "/crl/{crlId}/enable",
                responseCode: 200
            },
            input: {
                shape: "S10"
            },
            output: {
                shape: "S11"
            }
        },
        EnableProfile: {
            http: {
                requestUri: "/profile/{profileId}/enable",
                responseCode: 200
            },
            input: {
                shape: "S14"
            },
            output: {
                shape: "Se"
            }
        },
        EnableTrustAnchor: {
            http: {
                requestUri: "/trustanchor/{trustAnchorId}/enable",
                responseCode: 200
            },
            input: {
                shape: "S15"
            },
            output: {
                shape: "Su"
            }
        },
        GetCrl: {
            http: {
                method: "GET",
                requestUri: "/crl/{crlId}",
                responseCode: 200
            },
            input: {
                shape: "S10"
            },
            output: {
                shape: "S11"
            }
        },
        GetProfile: {
            http: {
                method: "GET",
                requestUri: "/profile/{profileId}",
                responseCode: 200
            },
            input: {
                shape: "S14"
            },
            output: {
                shape: "Se"
            }
        },
        GetSubject: {
            http: {
                method: "GET",
                requestUri: "/subject/{subjectId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "subjectId" ],
                members: {
                    subjectId: {
                        location: "uri",
                        locationName: "subjectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subject: {
                        type: "structure",
                        members: {
                            createdAt: {
                                shape: "Sg"
                            },
                            credentials: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        enabled: {
                                            type: "boolean"
                                        },
                                        failed: {
                                            type: "boolean"
                                        },
                                        issuer: {},
                                        seenAt: {
                                            shape: "Sg"
                                        },
                                        serialNumber: {},
                                        x509CertificateData: {}
                                    }
                                }
                            },
                            enabled: {
                                type: "boolean"
                            },
                            instanceProperties: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        failed: {
                                            type: "boolean"
                                        },
                                        properties: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        seenAt: {
                                            shape: "Sg"
                                        }
                                    }
                                }
                            },
                            lastSeenAt: {
                                shape: "Sg"
                            },
                            subjectArn: {},
                            subjectId: {},
                            updatedAt: {
                                shape: "Sg"
                            },
                            x509Subject: {}
                        }
                    }
                }
            }
        },
        GetTrustAnchor: {
            http: {
                method: "GET",
                requestUri: "/trustanchor/{trustAnchorId}",
                responseCode: 200
            },
            input: {
                shape: "S15"
            },
            output: {
                shape: "Su"
            }
        },
        ImportCrl: {
            http: {
                requestUri: "/crls",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "crlData", "name", "trustAnchorArn" ],
                members: {
                    crlData: {
                        type: "blob"
                    },
                    enabled: {
                        type: "boolean"
                    },
                    name: {},
                    tags: {
                        shape: "Sa"
                    },
                    trustAnchorArn: {}
                }
            },
            output: {
                shape: "S11"
            }
        },
        ListCrls: {
            http: {
                method: "GET",
                requestUri: "/crls",
                responseCode: 200
            },
            input: {
                shape: "S1j"
            },
            output: {
                type: "structure",
                members: {
                    crls: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProfiles: {
            http: {
                method: "GET",
                requestUri: "/profiles",
                responseCode: 200
            },
            input: {
                shape: "S1j"
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    profiles: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    }
                }
            }
        },
        ListSubjects: {
            http: {
                method: "GET",
                requestUri: "/subjects",
                responseCode: 200
            },
            input: {
                shape: "S1j"
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    subjects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    shape: "Sg"
                                },
                                enabled: {
                                    type: "boolean"
                                },
                                lastSeenAt: {
                                    shape: "Sg"
                                },
                                subjectArn: {},
                                subjectId: {},
                                updatedAt: {
                                    shape: "Sg"
                                },
                                x509Subject: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/ListTagsForResource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListTrustAnchors: {
            http: {
                method: "GET",
                requestUri: "/trustanchors",
                responseCode: 200
            },
            input: {
                shape: "S1j"
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    trustAnchors: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    }
                }
            }
        },
        PutNotificationSettings: {
            http: {
                method: "PATCH",
                requestUri: "/put-notifications-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "notificationSettings", "trustAnchorId" ],
                members: {
                    notificationSettings: {
                        shape: "Sl"
                    },
                    trustAnchorId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "trustAnchor" ],
                members: {
                    trustAnchor: {
                        shape: "Sv"
                    }
                }
            }
        },
        ResetNotificationSettings: {
            http: {
                method: "PATCH",
                requestUri: "/reset-notifications-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "notificationSettingKeys", "trustAnchorId" ],
                members: {
                    notificationSettingKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "event" ],
                            members: {
                                channel: {},
                                event: {}
                            }
                        }
                    },
                    trustAnchorId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "trustAnchor" ],
                members: {
                    trustAnchor: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCrl: {
            http: {
                method: "PATCH",
                requestUri: "/crl/{crlId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "crlId" ],
                members: {
                    crlData: {
                        type: "blob"
                    },
                    crlId: {
                        location: "uri",
                        locationName: "crlId"
                    },
                    name: {}
                }
            },
            output: {
                shape: "S11"
            }
        },
        UpdateProfile: {
            http: {
                method: "PATCH",
                requestUri: "/profile/{profileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profileId" ],
                members: {
                    durationSeconds: {
                        type: "integer"
                    },
                    managedPolicyArns: {
                        shape: "S4"
                    },
                    name: {},
                    profileId: {
                        location: "uri",
                        locationName: "profileId"
                    },
                    roleArns: {
                        shape: "S7"
                    },
                    sessionPolicy: {}
                }
            },
            output: {
                shape: "Se"
            },
            idempotent: true
        },
        UpdateTrustAnchor: {
            http: {
                method: "PATCH",
                requestUri: "/trustanchor/{trustAnchorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustAnchorId" ],
                members: {
                    name: {},
                    source: {
                        shape: "Sq"
                    },
                    trustAnchorId: {
                        location: "uri",
                        locationName: "trustAnchorId"
                    }
                }
            },
            output: {
                shape: "Su"
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {
                        shape: "Sc"
                    },
                    value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Se: {
            type: "structure",
            members: {
                profile: {
                    shape: "Sf"
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "Sg"
                },
                createdBy: {},
                durationSeconds: {
                    type: "integer"
                },
                enabled: {
                    type: "boolean"
                },
                managedPolicyArns: {
                    shape: "S4"
                },
                name: {},
                profileArn: {},
                profileId: {},
                requireInstanceProperties: {
                    type: "boolean"
                },
                roleArns: {
                    shape: "S7"
                },
                sessionPolicy: {},
                updatedAt: {
                    shape: "Sg"
                }
            }
        },
        Sg: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "enabled", "event" ],
                members: {
                    channel: {},
                    enabled: {
                        type: "boolean"
                    },
                    event: {},
                    threshold: {
                        type: "integer"
                    }
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                sourceData: {
                    type: "structure",
                    members: {
                        acmPcaArn: {},
                        x509CertificateData: {}
                    },
                    union: true
                },
                sourceType: {}
            }
        },
        Su: {
            type: "structure",
            required: [ "trustAnchor" ],
            members: {
                trustAnchor: {
                    shape: "Sv"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "Sg"
                },
                enabled: {
                    type: "boolean"
                },
                name: {},
                notificationSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "enabled", "event" ],
                        members: {
                            channel: {},
                            configuredBy: {},
                            enabled: {
                                type: "boolean"
                            },
                            event: {},
                            threshold: {
                                type: "integer"
                            }
                        }
                    }
                },
                source: {
                    shape: "Sq"
                },
                trustAnchorArn: {},
                trustAnchorId: {},
                updatedAt: {
                    shape: "Sg"
                }
            }
        },
        S10: {
            type: "structure",
            required: [ "crlId" ],
            members: {
                crlId: {
                    location: "uri",
                    locationName: "crlId"
                }
            }
        },
        S11: {
            type: "structure",
            required: [ "crl" ],
            members: {
                crl: {
                    shape: "S12"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "Sg"
                },
                crlArn: {},
                crlData: {
                    type: "blob"
                },
                crlId: {},
                enabled: {
                    type: "boolean"
                },
                name: {},
                trustAnchorArn: {},
                updatedAt: {
                    shape: "Sg"
                }
            }
        },
        S14: {
            type: "structure",
            required: [ "profileId" ],
            members: {
                profileId: {
                    location: "uri",
                    locationName: "profileId"
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "trustAnchorId" ],
            members: {
                trustAnchorId: {
                    location: "uri",
                    locationName: "trustAnchorId"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                nextToken: {
                    location: "querystring",
                    locationName: "nextToken"
                },
                pageSize: {
                    location: "querystring",
                    locationName: "pageSize",
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListCrls: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "crls"
        },
        ListProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "profiles"
        },
        ListSubjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "subjects"
        },
        ListTrustAnchors: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "trustAnchors"
        }
    }
};

AWS.apiLoader.services["licensemanagerusersubscriptions"] = {};

AWS.LicenseManagerUserSubscriptions = AWS.Service.defineService("licensemanagerusersubscriptions", [ "2018-05-10" ]);

AWS.apiLoader.services["licensemanagerusersubscriptions"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "license-manager-user-subscriptions",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS License Manager User Subscriptions",
        serviceId: "License Manager User Subscriptions",
        signatureVersion: "v4",
        signingName: "license-manager-user-subscriptions",
        uid: "license-manager-user-subscriptions-2018-05-10"
    },
    operations: {
        AssociateUser: {
            http: {
                requestUri: "/user/AssociateUser",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "InstanceId", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    InstanceId: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InstanceUserSummary" ],
                members: {
                    InstanceUserSummary: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        DeregisterIdentityProvider: {
            http: {
                requestUri: "/identity-provider/DeregisterIdentityProvider",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product" ],
                members: {
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProviderSummary" ],
                members: {
                    IdentityProviderSummary: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        DisassociateUser: {
            http: {
                requestUri: "/user/DisassociateUser",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "InstanceId", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    InstanceId: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InstanceUserSummary" ],
                members: {
                    InstanceUserSummary: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        ListIdentityProviders: {
            http: {
                requestUri: "/identity-provider/ListIdentityProviders",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProviderSummaries" ],
                members: {
                    IdentityProviderSummaries: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstances: {
            http: {
                requestUri: "/instance/ListInstances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Sl"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InstanceId", "Products", "Status" ],
                            members: {
                                InstanceId: {},
                                LastStatusCheckDate: {},
                                Products: {
                                    type: "list",
                                    member: {}
                                },
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProductSubscriptions: {
            http: {
                requestUri: "/user/ListProductSubscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product" ],
                members: {
                    Filters: {
                        shape: "Sl"
                    },
                    IdentityProvider: {
                        shape: "S3"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Product: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ProductUserSummaries: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            }
        },
        ListUserAssociations: {
            http: {
                requestUri: "/user/ListUserAssociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "InstanceId" ],
                members: {
                    Filters: {
                        shape: "Sl"
                    },
                    IdentityProvider: {
                        shape: "S3"
                    },
                    InstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceUserSummaries: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RegisterIdentityProvider: {
            http: {
                requestUri: "/identity-provider/RegisterIdentityProvider",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product" ],
                members: {
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {},
                    Settings: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProviderSummary" ],
                members: {
                    IdentityProviderSummary: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        StartProductSubscription: {
            http: {
                requestUri: "/user/StartProductSubscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProductUserSummary" ],
                members: {
                    ProductUserSummary: {
                        shape: "Su"
                    }
                }
            }
        },
        StopProductSubscription: {
            http: {
                requestUri: "/user/StopProductSubscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProductUserSummary" ],
                members: {
                    ProductUserSummary: {
                        shape: "Su"
                    }
                }
            }
        },
        UpdateIdentityProviderSettings: {
            http: {
                requestUri: "/identity-provider/UpdateIdentityProviderSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product", "UpdateSettings" ],
                members: {
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {},
                    UpdateSettings: {
                        type: "structure",
                        required: [ "AddSubnets", "RemoveSubnets" ],
                        members: {
                            AddSubnets: {
                                shape: "S16"
                            },
                            RemoveSubnets: {
                                shape: "S16"
                            },
                            SecurityGroupId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProviderSummary" ],
                members: {
                    IdentityProviderSummary: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                ActiveDirectoryIdentityProvider: {
                    type: "structure",
                    members: {
                        DirectoryId: {}
                    }
                }
            },
            union: true
        },
        S6: {
            type: "structure",
            required: [ "IdentityProvider", "InstanceId", "Status", "Username" ],
            members: {
                AssociationDate: {},
                DisassociationDate: {},
                Domain: {},
                IdentityProvider: {
                    shape: "S3"
                },
                InstanceId: {},
                Status: {},
                StatusMessage: {},
                Username: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "IdentityProvider", "Product", "Settings", "Status" ],
            members: {
                FailureMessage: {},
                IdentityProvider: {
                    shape: "S3"
                },
                Product: {},
                Settings: {
                    shape: "Sa"
                },
                Status: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "SecurityGroupId", "Subnets" ],
            members: {
                SecurityGroupId: {},
                Subnets: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Attribute: {},
                    Operation: {},
                    Value: {}
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "IdentityProvider", "Product", "Status", "Username" ],
            members: {
                Domain: {},
                IdentityProvider: {
                    shape: "S3"
                },
                Product: {},
                Status: {},
                StatusMessage: {},
                SubscriptionEndDate: {},
                SubscriptionStartDate: {},
                Username: {}
            }
        },
        S16: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListIdentityProviders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IdentityProviderSummaries"
        },
        ListInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InstanceSummaries"
        },
        ListProductSubscriptions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ProductUserSummaries"
        },
        ListUserAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InstanceUserSummaries"
        }
    }
};

AWS.apiLoader.services["backupstorage"] = {};

AWS.BackupStorage = AWS.Service.defineService("backupstorage", [ "2018-04-10" ]);

AWS.apiLoader.services["backupstorage"]["2018-04-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-10",
        endpointPrefix: "backupstorage",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Backup Storage",
        serviceId: "BackupStorage",
        signatureVersion: "v4",
        signingName: "backup-storage",
        uid: "backupstorage-2018-04-10"
    },
    operations: {
        DeleteObject: {
            http: {
                method: "DELETE",
                requestUri: "/backup-jobs/{jobId}/object/{objectName}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "ObjectName" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectName: {
                        location: "uri",
                        locationName: "objectName"
                    }
                }
            }
        },
        GetChunk: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/chunk/{chunkToken}"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId", "ChunkToken" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ChunkToken: {
                        location: "uri",
                        locationName: "chunkToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Data", "Length", "Checksum", "ChecksumAlgorithm" ],
                members: {
                    Data: {
                        shape: "S5"
                    },
                    Length: {
                        location: "header",
                        locationName: "x-amz-data-length",
                        type: "long"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-checksum-algorithm"
                    }
                },
                payload: "Data"
            }
        },
        GetObjectMetadata: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/object/{objectToken}/metadata"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId", "ObjectToken" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectToken: {
                        location: "uri",
                        locationName: "objectToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetadataString: {
                        location: "header",
                        locationName: "x-amz-metadata-string"
                    },
                    MetadataBlob: {
                        shape: "S5"
                    },
                    MetadataBlobLength: {
                        location: "header",
                        locationName: "x-amz-data-length",
                        type: "long"
                    },
                    MetadataBlobChecksum: {
                        location: "header",
                        locationName: "x-amz-checksum"
                    },
                    MetadataBlobChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-checksum-algorithm"
                    }
                },
                payload: "MetadataBlob"
            }
        },
        ListChunks: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/chunks/{objectToken}/list"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId", "ObjectToken" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectToken: {
                        location: "uri",
                        locationName: "objectToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChunkList" ],
                members: {
                    ChunkList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Index", "Length", "Checksum", "ChecksumAlgorithm", "ChunkToken" ],
                            members: {
                                Index: {
                                    type: "long"
                                },
                                Length: {
                                    type: "long"
                                },
                                Checksum: {},
                                ChecksumAlgorithm: {},
                                ChunkToken: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListObjects: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/objects/list"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    StartingObjectName: {
                        location: "querystring",
                        locationName: "starting-object-name"
                    },
                    StartingObjectPrefix: {
                        location: "querystring",
                        locationName: "starting-object-prefix"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    CreatedBefore: {
                        location: "querystring",
                        locationName: "created-before",
                        type: "timestamp"
                    },
                    CreatedAfter: {
                        location: "querystring",
                        locationName: "created-after",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ObjectList" ],
                members: {
                    ObjectList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "ObjectChecksum", "ObjectChecksumAlgorithm", "ObjectToken" ],
                            members: {
                                Name: {},
                                ChunksCount: {
                                    type: "long"
                                },
                                MetadataString: {},
                                ObjectChecksum: {},
                                ObjectChecksumAlgorithm: {},
                                ObjectToken: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        NotifyObjectComplete: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/object/{uploadId}/complete"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "UploadId", "ObjectChecksum", "ObjectChecksumAlgorithm" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    UploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    ObjectChecksum: {
                        location: "querystring",
                        locationName: "checksum"
                    },
                    ObjectChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "checksum-algorithm"
                    },
                    MetadataString: {
                        location: "querystring",
                        locationName: "metadata-string"
                    },
                    MetadataBlob: {
                        shape: "S5"
                    },
                    MetadataBlobLength: {
                        location: "querystring",
                        locationName: "metadata-blob-length",
                        type: "long"
                    },
                    MetadataBlobChecksum: {
                        location: "querystring",
                        locationName: "metadata-checksum"
                    },
                    MetadataBlobChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "metadata-checksum-algorithm"
                    }
                },
                payload: "MetadataBlob"
            },
            output: {
                type: "structure",
                required: [ "ObjectChecksum", "ObjectChecksumAlgorithm" ],
                members: {
                    ObjectChecksum: {},
                    ObjectChecksumAlgorithm: {}
                }
            },
            authtype: "v4-unsigned-body"
        },
        PutChunk: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/chunk/{uploadId}/{chunkIndex}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "UploadId", "ChunkIndex", "Data", "Length", "Checksum", "ChecksumAlgorithm" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    UploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    ChunkIndex: {
                        location: "uri",
                        locationName: "chunkIndex",
                        type: "long"
                    },
                    Data: {
                        shape: "S5"
                    },
                    Length: {
                        location: "querystring",
                        locationName: "length",
                        type: "long"
                    },
                    Checksum: {
                        location: "querystring",
                        locationName: "checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "checksum-algorithm"
                    }
                },
                payload: "Data"
            },
            output: {
                type: "structure",
                required: [ "ChunkChecksum", "ChunkChecksumAlgorithm" ],
                members: {
                    ChunkChecksum: {},
                    ChunkChecksumAlgorithm: {}
                }
            },
            authtype: "v4-unsigned-body"
        },
        PutObject: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/object/{objectName}/put-object"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "ObjectName" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectName: {
                        location: "uri",
                        locationName: "objectName"
                    },
                    MetadataString: {
                        location: "querystring",
                        locationName: "metadata-string"
                    },
                    InlineChunk: {
                        shape: "S5"
                    },
                    InlineChunkLength: {
                        location: "querystring",
                        locationName: "length",
                        type: "long"
                    },
                    InlineChunkChecksum: {
                        location: "querystring",
                        locationName: "checksum"
                    },
                    InlineChunkChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "checksum-algorithm"
                    },
                    ObjectChecksum: {
                        location: "querystring",
                        locationName: "object-checksum"
                    },
                    ObjectChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "object-checksum-algorithm"
                    },
                    ThrowOnDuplicate: {
                        location: "querystring",
                        locationName: "throwOnDuplicate",
                        type: "boolean"
                    }
                },
                payload: "InlineChunk"
            },
            output: {
                type: "structure",
                required: [ "InlineChunkChecksum", "InlineChunkChecksumAlgorithm", "ObjectChecksum", "ObjectChecksumAlgorithm" ],
                members: {
                    InlineChunkChecksum: {},
                    InlineChunkChecksumAlgorithm: {},
                    ObjectChecksum: {},
                    ObjectChecksumAlgorithm: {}
                }
            },
            authtype: "v4-unsigned-body"
        },
        StartObject: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/object/{objectName}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "ObjectName" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectName: {
                        location: "uri",
                        locationName: "objectName"
                    },
                    ThrowOnDuplicate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UploadId" ],
                members: {
                    UploadId: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "blob",
            streaming: true
        }
    },
    paginators: {
        ListChunks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObjects: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["privatenetworks"] = {};

AWS.PrivateNetworks = AWS.Service.defineService("privatenetworks", [ "2021-12-03" ]);

AWS.apiLoader.services["privatenetworks"]["2021-12-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-12-03",
        endpointPrefix: "private-networks",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Private 5G",
        serviceId: "PrivateNetworks",
        signatureVersion: "v4",
        signingName: "private-networks",
        uid: "privatenetworks-2021-12-03"
    },
    operations: {
        AcknowledgeOrderReceipt: {
            http: {
                requestUri: "/v1/orders/acknowledge",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "orderArn" ],
                members: {
                    orderArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "order" ],
                members: {
                    order: {
                        shape: "S4"
                    }
                }
            }
        },
        ActivateDeviceIdentifier: {
            http: {
                requestUri: "/v1/device-identifiers/activate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceIdentifierArn" ],
                members: {
                    clientToken: {},
                    deviceIdentifierArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "deviceIdentifier" ],
                members: {
                    deviceIdentifier: {
                        shape: "Sm"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            },
            idempotent: true
        },
        ActivateNetworkSite: {
            http: {
                requestUri: "/v1/network-sites/activate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn", "shippingAddress" ],
                members: {
                    clientToken: {},
                    commitmentConfiguration: {
                        shape: "S9"
                    },
                    networkSiteArn: {},
                    shippingAddress: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Su"
                    }
                }
            },
            idempotent: true
        },
        ConfigureAccessPoint: {
            http: {
                requestUri: "/v1/network-resources/configure",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPointArn" ],
                members: {
                    accessPointArn: {},
                    cpiSecretKey: {
                        type: "string",
                        sensitive: true
                    },
                    cpiUserId: {
                        type: "string",
                        sensitive: true
                    },
                    cpiUserPassword: {
                        type: "string",
                        sensitive: true
                    },
                    cpiUsername: {
                        type: "string",
                        sensitive: true
                    },
                    position: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPoint" ],
                members: {
                    accessPoint: {
                        shape: "S1e"
                    }
                }
            },
            idempotent: true
        },
        CreateNetwork: {
            http: {
                requestUri: "/v1/networks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkName" ],
                members: {
                    clientToken: {},
                    description: {},
                    networkName: {},
                    tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "network" ],
                members: {
                    network: {
                        shape: "S1n"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            },
            idempotent: true
        },
        CreateNetworkSite: {
            http: {
                requestUri: "/v1/network-sites",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn", "networkSiteName" ],
                members: {
                    availabilityZone: {},
                    availabilityZoneId: {},
                    clientToken: {},
                    description: {},
                    networkArn: {},
                    networkSiteName: {},
                    pendingPlan: {
                        shape: "Sv"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Su"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            },
            idempotent: true
        },
        DeactivateDeviceIdentifier: {
            http: {
                requestUri: "/v1/device-identifiers/deactivate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceIdentifierArn" ],
                members: {
                    clientToken: {},
                    deviceIdentifierArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "deviceIdentifier" ],
                members: {
                    deviceIdentifier: {
                        shape: "Sm"
                    }
                }
            },
            idempotent: true
        },
        DeleteNetwork: {
            http: {
                method: "DELETE",
                requestUri: "/v1/networks/{networkArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    networkArn: {
                        location: "uri",
                        locationName: "networkArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "network" ],
                members: {
                    network: {
                        shape: "S1n"
                    }
                }
            },
            idempotent: true
        },
        DeleteNetworkSite: {
            http: {
                method: "DELETE",
                requestUri: "/v1/network-sites/{networkSiteArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn" ],
                members: {
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    networkSiteArn: {
                        location: "uri",
                        locationName: "networkSiteArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Su"
                    }
                }
            },
            idempotent: true
        },
        GetDeviceIdentifier: {
            http: {
                method: "GET",
                requestUri: "/v1/device-identifiers/{deviceIdentifierArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceIdentifierArn" ],
                members: {
                    deviceIdentifierArn: {
                        location: "uri",
                        locationName: "deviceIdentifierArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceIdentifier: {
                        shape: "Sm"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        GetNetwork: {
            http: {
                method: "GET",
                requestUri: "/v1/networks/{networkArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    networkArn: {
                        location: "uri",
                        locationName: "networkArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "network" ],
                members: {
                    network: {
                        shape: "S1n"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        GetNetworkResource: {
            http: {
                method: "GET",
                requestUri: "/v1/network-resources/{networkResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkResourceArn" ],
                members: {
                    networkResourceArn: {
                        location: "uri",
                        locationName: "networkResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "networkResource" ],
                members: {
                    networkResource: {
                        shape: "S1e"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        GetNetworkSite: {
            http: {
                method: "GET",
                requestUri: "/v1/network-sites/{networkSiteArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn" ],
                members: {
                    networkSiteArn: {
                        location: "uri",
                        locationName: "networkSiteArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Su"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        GetOrder: {
            http: {
                method: "GET",
                requestUri: "/v1/orders/{orderArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "orderArn" ],
                members: {
                    orderArn: {
                        location: "uri",
                        locationName: "orderArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "order" ],
                members: {
                    order: {
                        shape: "S4"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        ListDeviceIdentifiers: {
            http: {
                requestUri: "/v1/device-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceIdentifiers: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworkResources: {
            http: {
                requestUri: "/v1/network-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networkResources: {
                        type: "list",
                        member: {
                            shape: "S1e"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworkSites: {
            http: {
                requestUri: "/v1/network-sites/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSites: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworks: {
            http: {
                requestUri: "/v1/networks/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networks: {
                        type: "list",
                        member: {
                            shape: "S1n"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOrders: {
            http: {
                requestUri: "/v1/orders/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    orders: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        Ping: {
            http: {
                method: "GET",
                requestUri: "/ping",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        StartNetworkResourceUpdate: {
            http: {
                requestUri: "/v1/network-resources/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkResourceArn", "updateType" ],
                members: {
                    commitmentConfiguration: {
                        shape: "S9"
                    },
                    networkResourceArn: {},
                    returnReason: {},
                    shippingAddress: {
                        shape: "Se"
                    },
                    updateType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networkResource: {
                        shape: "S1e"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNetworkSite: {
            http: {
                method: "PUT",
                requestUri: "/v1/network-sites/site",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn" ],
                members: {
                    clientToken: {},
                    description: {},
                    networkSiteArn: {}
                }
            },
            output: {
                shape: "S3k"
            },
            idempotent: true
        },
        UpdateNetworkSitePlan: {
            http: {
                method: "PUT",
                requestUri: "/v1/network-sites/plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn", "pendingPlan" ],
                members: {
                    clientToken: {},
                    networkSiteArn: {},
                    pendingPlan: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                shape: "S3k"
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                acknowledgmentStatus: {},
                createdAt: {
                    shape: "S6"
                },
                networkArn: {},
                networkSiteArn: {},
                orderArn: {},
                orderedResources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "count", "type" ],
                        members: {
                            commitmentConfiguration: {
                                shape: "S9"
                            },
                            count: {
                                type: "integer"
                            },
                            type: {}
                        }
                    }
                },
                shippingAddress: {
                    shape: "Se"
                },
                trackingInformation: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            trackingNumber: {}
                        }
                    }
                }
            }
        },
        S6: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S9: {
            type: "structure",
            required: [ "automaticRenewal", "commitmentLength" ],
            members: {
                automaticRenewal: {
                    type: "boolean"
                },
                commitmentLength: {}
            }
        },
        Se: {
            type: "structure",
            required: [ "city", "country", "name", "postalCode", "stateOrProvince", "street1" ],
            members: {
                city: {
                    shape: "Sf"
                },
                company: {
                    shape: "Sf"
                },
                country: {
                    shape: "Sf"
                },
                emailAddress: {
                    shape: "Sf"
                },
                name: {
                    shape: "Sf"
                },
                phoneNumber: {
                    shape: "Sf"
                },
                postalCode: {
                    shape: "Sf"
                },
                stateOrProvince: {
                    shape: "Sf"
                },
                street1: {
                    shape: "Sf"
                },
                street2: {
                    shape: "Sf"
                },
                street3: {
                    shape: "Sf"
                }
            }
        },
        Sf: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "S6"
                },
                deviceIdentifierArn: {},
                iccid: {},
                imsi: {
                    type: "string",
                    sensitive: true
                },
                networkArn: {},
                orderArn: {},
                status: {},
                trafficGroupArn: {},
                vendor: {}
            }
        },
        Sp: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Su: {
            type: "structure",
            required: [ "networkArn", "networkSiteArn", "networkSiteName", "status" ],
            members: {
                availabilityZone: {},
                availabilityZoneId: {},
                createdAt: {
                    shape: "S6"
                },
                currentPlan: {
                    shape: "Sv"
                },
                description: {},
                networkArn: {},
                networkSiteArn: {},
                networkSiteName: {},
                pendingPlan: {
                    shape: "Sv"
                },
                status: {},
                statusReason: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                options: {
                    shape: "Sw"
                },
                resourceDefinitions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "count", "type" ],
                        members: {
                            count: {
                                type: "integer"
                            },
                            options: {
                                shape: "Sw"
                            },
                            type: {}
                        }
                    }
                }
            }
        },
        Sw: {
            type: "list",
            member: {
                shape: "Sx"
            }
        },
        Sx: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                value: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                elevation: {
                    type: "double"
                },
                elevationReference: {},
                elevationUnit: {},
                latitude: {
                    type: "double"
                },
                longitude: {
                    type: "double"
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                attributes: {
                    type: "list",
                    member: {
                        shape: "Sx"
                    }
                },
                commitmentInformation: {
                    type: "structure",
                    required: [ "commitmentConfiguration" ],
                    members: {
                        commitmentConfiguration: {
                            shape: "S9"
                        },
                        expiresOn: {
                            shape: "S6"
                        },
                        startAt: {
                            shape: "S6"
                        }
                    }
                },
                createdAt: {
                    shape: "S6"
                },
                description: {},
                health: {},
                model: {},
                networkArn: {},
                networkResourceArn: {},
                networkSiteArn: {},
                orderArn: {},
                position: {
                    shape: "S19"
                },
                returnInformation: {
                    type: "structure",
                    members: {
                        replacementOrderArn: {},
                        returnReason: {},
                        shippingAddress: {
                            shape: "Se"
                        },
                        shippingLabel: {}
                    }
                },
                serialNumber: {},
                status: {},
                statusReason: {},
                type: {},
                vendor: {}
            }
        },
        S1n: {
            type: "structure",
            required: [ "networkArn", "networkName", "status" ],
            members: {
                createdAt: {
                    shape: "S6"
                },
                description: {},
                networkArn: {},
                networkName: {},
                status: {},
                statusReason: {}
            }
        },
        S3k: {
            type: "structure",
            members: {
                networkSite: {
                    shape: "Su"
                },
                tags: {
                    shape: "Sp"
                }
            }
        }
    },
    paginators: {
        ListDeviceIdentifiers: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deviceIdentifiers"
        },
        ListNetworkResources: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkResources"
        },
        ListNetworkSites: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkSites"
        },
        ListNetworks: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networks"
        },
        ListOrders: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "orders"
        }
    }
};

AWS.apiLoader.services["supportapp"] = {};

AWS.SupportApp = AWS.Service.defineService("supportapp", [ "2021-08-20" ]);

AWS.apiLoader.services["supportapp"]["2021-08-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-20",
        endpointPrefix: "supportapp",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SupportApp",
        serviceFullName: "AWS Support App",
        serviceId: "Support App",
        signatureVersion: "v4",
        signingName: "supportapp",
        uid: "support-app-2021-08-20"
    },
    operations: {
        CreateSlackChannelConfiguration: {
            http: {
                requestUri: "/control/create-slack-channel-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "channelRoleArn", "notifyOnCaseSeverity", "teamId" ],
                members: {
                    channelId: {},
                    channelName: {},
                    channelRoleArn: {},
                    notifyOnAddCorrespondenceToCase: {
                        type: "boolean"
                    },
                    notifyOnCaseSeverity: {},
                    notifyOnCreateOrReopenCase: {
                        type: "boolean"
                    },
                    notifyOnResolveCase: {
                        type: "boolean"
                    },
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAccountAlias: {
            http: {
                requestUri: "/control/delete-account-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSlackChannelConfiguration: {
            http: {
                requestUri: "/control/delete-slack-channel-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "teamId" ],
                members: {
                    channelId: {},
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSlackWorkspaceConfiguration: {
            http: {
                requestUri: "/control/delete-slack-workspace-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "teamId" ],
                members: {
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccountAlias: {
            http: {
                requestUri: "/control/get-account-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    accountAlias: {}
                }
            }
        },
        ListSlackChannelConfigurations: {
            http: {
                requestUri: "/control/list-slack-channel-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "slackChannelConfigurations" ],
                members: {
                    nextToken: {},
                    slackChannelConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "channelId", "teamId" ],
                            members: {
                                channelId: {},
                                channelName: {},
                                channelRoleArn: {},
                                notifyOnAddCorrespondenceToCase: {
                                    type: "boolean"
                                },
                                notifyOnCaseSeverity: {},
                                notifyOnCreateOrReopenCase: {
                                    type: "boolean"
                                },
                                notifyOnResolveCase: {
                                    type: "boolean"
                                },
                                teamId: {}
                            }
                        }
                    }
                }
            }
        },
        ListSlackWorkspaceConfigurations: {
            http: {
                requestUri: "/control/list-slack-workspace-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    slackWorkspaceConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "teamId" ],
                            members: {
                                allowOrganizationMemberAccount: {
                                    type: "boolean"
                                },
                                teamId: {},
                                teamName: {}
                            }
                        }
                    }
                }
            }
        },
        PutAccountAlias: {
            http: {
                requestUri: "/control/put-account-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountAlias" ],
                members: {
                    accountAlias: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegisterSlackWorkspaceForOrganization: {
            http: {
                requestUri: "/control/register-slack-workspace-for-organization",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "teamId" ],
                members: {
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accountType: {},
                    teamId: {},
                    teamName: {}
                }
            }
        },
        UpdateSlackChannelConfiguration: {
            http: {
                requestUri: "/control/update-slack-channel-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "teamId" ],
                members: {
                    channelId: {},
                    channelName: {},
                    channelRoleArn: {},
                    notifyOnAddCorrespondenceToCase: {
                        type: "boolean"
                    },
                    notifyOnCaseSeverity: {},
                    notifyOnCreateOrReopenCase: {
                        type: "boolean"
                    },
                    notifyOnResolveCase: {
                        type: "boolean"
                    },
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channelId: {},
                    channelName: {},
                    channelRoleArn: {},
                    notifyOnAddCorrespondenceToCase: {
                        type: "boolean"
                    },
                    notifyOnCaseSeverity: {},
                    notifyOnCreateOrReopenCase: {
                        type: "boolean"
                    },
                    notifyOnResolveCase: {
                        type: "boolean"
                    },
                    teamId: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        ListSlackChannelConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken"
        },
        ListSlackWorkspaceConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken"
        }
    }
};

AWS.apiLoader.services["controltower"] = {};

AWS.ControlTower = AWS.Service.defineService("controltower", [ "2018-05-10" ]);

AWS.apiLoader.services["controltower"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "controltower",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Control Tower",
        serviceId: "ControlTower",
        signatureVersion: "v4",
        signingName: "controltower",
        uid: "controltower-2018-05-10"
    },
    operations: {
        CreateLandingZone: {
            http: {
                requestUri: "/create-landingzone",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "manifest", "version" ],
                members: {
                    manifest: {
                        shape: "S2"
                    },
                    tags: {
                        shape: "S3"
                    },
                    version: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "operationIdentifier" ],
                members: {
                    arn: {},
                    operationIdentifier: {}
                }
            }
        },
        DeleteLandingZone: {
            http: {
                requestUri: "/delete-landingzone",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "landingZoneIdentifier" ],
                members: {
                    landingZoneIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            },
            idempotent: true
        },
        DisableControl: {
            http: {
                requestUri: "/disable-control",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "controlIdentifier", "targetIdentifier" ],
                members: {
                    controlIdentifier: {},
                    targetIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            }
        },
        EnableControl: {
            http: {
                requestUri: "/enable-control",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "controlIdentifier", "targetIdentifier" ],
                members: {
                    controlIdentifier: {},
                    parameters: {
                        shape: "Si"
                    },
                    tags: {
                        shape: "S3"
                    },
                    targetIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    arn: {},
                    operationIdentifier: {}
                }
            }
        },
        GetControlOperation: {
            http: {
                requestUri: "/get-control-operation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "controlOperation" ],
                members: {
                    controlOperation: {
                        type: "structure",
                        members: {
                            endTime: {
                                shape: "Sp"
                            },
                            operationType: {},
                            startTime: {
                                shape: "Sp"
                            },
                            status: {},
                            statusMessage: {}
                        }
                    }
                }
            }
        },
        GetEnabledControl: {
            http: {
                requestUri: "/get-enabled-control",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "enabledControlIdentifier" ],
                members: {
                    enabledControlIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "enabledControlDetails" ],
                members: {
                    enabledControlDetails: {
                        type: "structure",
                        members: {
                            arn: {},
                            controlIdentifier: {},
                            driftStatusSummary: {
                                shape: "Sv"
                            },
                            parameters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "key", "value" ],
                                    members: {
                                        key: {},
                                        value: {
                                            shape: "Sk"
                                        }
                                    }
                                }
                            },
                            statusSummary: {
                                shape: "Sz"
                            },
                            targetIdentifier: {},
                            targetRegions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetLandingZone: {
            http: {
                requestUri: "/get-landingzone",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "landingZoneIdentifier" ],
                members: {
                    landingZoneIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "landingZone" ],
                members: {
                    landingZone: {
                        type: "structure",
                        required: [ "manifest", "version" ],
                        members: {
                            arn: {},
                            driftStatus: {
                                type: "structure",
                                members: {
                                    status: {}
                                }
                            },
                            latestAvailableVersion: {},
                            manifest: {
                                shape: "S2"
                            },
                            status: {},
                            version: {}
                        }
                    }
                }
            }
        },
        GetLandingZoneOperation: {
            http: {
                requestUri: "/get-landingzone-operation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationDetails" ],
                members: {
                    operationDetails: {
                        type: "structure",
                        members: {
                            endTime: {
                                shape: "S1d"
                            },
                            operationType: {},
                            startTime: {
                                shape: "S1d"
                            },
                            status: {},
                            statusMessage: {}
                        }
                    }
                }
            }
        },
        ListEnabledControls: {
            http: {
                requestUri: "/list-enabled-controls",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "targetIdentifier" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    targetIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "enabledControls" ],
                members: {
                    enabledControls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                controlIdentifier: {},
                                driftStatusSummary: {
                                    shape: "Sv"
                                },
                                statusSummary: {
                                    shape: "Sz"
                                },
                                targetIdentifier: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLandingZones: {
            http: {
                requestUri: "/list-landingzones",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "landingZones" ],
                members: {
                    landingZones: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "S3"
                    }
                }
            }
        },
        ResetLandingZone: {
            http: {
                requestUri: "/reset-landingzone",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "landingZoneIdentifier" ],
                members: {
                    landingZoneIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEnabledControl: {
            http: {
                requestUri: "/update-enabled-control",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "enabledControlIdentifier", "parameters" ],
                members: {
                    enabledControlIdentifier: {},
                    parameters: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            }
        },
        UpdateLandingZone: {
            http: {
                requestUri: "/update-landingzone",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "landingZoneIdentifier", "manifest", "version" ],
                members: {
                    landingZoneIdentifier: {},
                    manifest: {
                        shape: "S2"
                    },
                    version: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {},
            document: true
        },
        S3: {
            type: "map",
            key: {},
            value: {}
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            members: {},
            document: true
        },
        Sp: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sv: {
            type: "structure",
            members: {
                driftStatus: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                lastOperationIdentifier: {},
                status: {}
            }
        },
        S1d: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListEnabledControls: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "enabledControls"
        },
        ListLandingZones: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "landingZones"
        }
    }
};

AWS.apiLoader.services["iotfleetwise"] = {};

AWS.IoTFleetWise = AWS.Service.defineService("iotfleetwise", [ "2021-06-17" ]);

AWS.apiLoader.services["iotfleetwise"]["2021-06-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-06-17",
        endpointPrefix: "iotfleetwise",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS IoT FleetWise",
        serviceId: "IoTFleetWise",
        signatureVersion: "v4",
        signingName: "iotfleetwise",
        targetPrefix: "IoTAutobahnControlPlane",
        uid: "iotfleetwise-2021-06-17"
    },
    operations: {
        AssociateVehicleFleet: {
            input: {
                type: "structure",
                required: [ "vehicleName", "fleetId" ],
                members: {
                    vehicleName: {},
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchCreateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicles" ],
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "vehicleName", "modelManifestArn", "decoderManifestArn" ],
                            members: {
                                vehicleName: {},
                                modelManifestArn: {},
                                decoderManifestArn: {},
                                attributes: {
                                    shape: "S9"
                                },
                                associationBehavior: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                arn: {},
                                thingArn: {}
                            }
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchUpdateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicles" ],
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "vehicleName" ],
                            members: {
                                vehicleName: {},
                                modelManifestArn: {},
                                decoderManifestArn: {},
                                attributes: {
                                    shape: "S9"
                                },
                                attributeUpdateMode: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                arn: {}
                            }
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CreateCampaign: {
            input: {
                type: "structure",
                required: [ "name", "signalCatalogArn", "targetArn", "collectionScheme" ],
                members: {
                    name: {},
                    description: {},
                    signalCatalogArn: {},
                    targetArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    expiryTime: {
                        type: "timestamp"
                    },
                    postTriggerCollectionDuration: {
                        type: "long"
                    },
                    diagnosticsMode: {},
                    spoolingMode: {},
                    compression: {},
                    priority: {
                        type: "integer"
                    },
                    signalsToCollect: {
                        shape: "S16"
                    },
                    collectionScheme: {
                        shape: "S1a"
                    },
                    dataExtraDimensions: {
                        shape: "S1h"
                    },
                    tags: {
                        shape: "Sd"
                    },
                    dataDestinationConfigs: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name", "modelManifestArn" ],
                members: {
                    name: {},
                    description: {},
                    modelManifestArn: {},
                    signalDecoders: {
                        shape: "S1w"
                    },
                    networkInterfaces: {
                        shape: "S2m"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateFleet: {
            input: {
                type: "structure",
                required: [ "fleetId", "signalCatalogArn" ],
                members: {
                    fleetId: {},
                    description: {},
                    signalCatalogArn: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn" ],
                members: {
                    id: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateModelManifest: {
            input: {
                type: "structure",
                required: [ "name", "nodes", "signalCatalogArn" ],
                members: {
                    name: {},
                    description: {},
                    nodes: {
                        shape: "S33"
                    },
                    signalCatalogArn: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    nodes: {
                        shape: "S36"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName", "modelManifestArn", "decoderManifestArn" ],
                members: {
                    vehicleName: {},
                    modelManifestArn: {},
                    decoderManifestArn: {},
                    attributes: {
                        shape: "S9"
                    },
                    associationBehavior: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleName: {},
                    arn: {},
                    thingArn: {}
                }
            },
            idempotent: true
        },
        DeleteCampaign: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteModelManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "vehicleName", "arn" ],
                members: {
                    vehicleName: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DisassociateVehicleFleet: {
            input: {
                type: "structure",
                required: [ "vehicleName", "fleetId" ],
                members: {
                    vehicleName: {},
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetCampaign: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    signalCatalogArn: {},
                    targetArn: {},
                    status: {},
                    startTime: {
                        type: "timestamp"
                    },
                    expiryTime: {
                        type: "timestamp"
                    },
                    postTriggerCollectionDuration: {
                        type: "long"
                    },
                    diagnosticsMode: {},
                    spoolingMode: {},
                    compression: {},
                    priority: {
                        type: "integer"
                    },
                    signalsToCollect: {
                        shape: "S16"
                    },
                    collectionScheme: {
                        shape: "S1a"
                    },
                    dataExtraDimensions: {
                        shape: "S1h"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    },
                    dataDestinationConfigs: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "creationTime", "lastModificationTime" ],
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    modelManifestArn: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    },
                    message: {}
                }
            }
        },
        GetEncryptionConfiguration: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "encryptionStatus", "encryptionType" ],
                members: {
                    kmsKeyId: {},
                    encryptionStatus: {},
                    encryptionType: {},
                    errorMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "signalCatalogArn", "creationTime", "lastModificationTime" ],
                members: {
                    id: {},
                    arn: {},
                    description: {},
                    signalCatalogArn: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetLoggingOptions: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "cloudWatchLogDelivery" ],
                members: {
                    cloudWatchLogDelivery: {
                        shape: "S4e"
                    }
                }
            }
        },
        GetModelManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "creationTime", "lastModificationTime" ],
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    signalCatalogArn: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetRegisterAccountStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "customerAccountId", "accountStatus", "iamRegistrationResponse", "creationTime", "lastModificationTime" ],
                members: {
                    customerAccountId: {},
                    accountStatus: {},
                    timestreamRegistrationResponse: {
                        type: "structure",
                        required: [ "timestreamDatabaseName", "timestreamTableName", "registrationStatus" ],
                        members: {
                            timestreamDatabaseName: {},
                            timestreamTableName: {},
                            timestreamDatabaseArn: {},
                            timestreamTableArn: {},
                            registrationStatus: {},
                            errorMessage: {}
                        }
                    },
                    iamRegistrationResponse: {
                        type: "structure",
                        required: [ "roleArn", "registrationStatus" ],
                        members: {
                            roleArn: {},
                            registrationStatus: {},
                            errorMessage: {}
                        }
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "creationTime", "lastModificationTime" ],
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    nodeCounts: {
                        type: "structure",
                        members: {
                            totalNodes: {
                                type: "integer"
                            },
                            totalBranches: {
                                type: "integer"
                            },
                            totalSensors: {
                                type: "integer"
                            },
                            totalAttributes: {
                                type: "integer"
                            },
                            totalActuators: {
                                type: "integer"
                            },
                            totalStructs: {
                                type: "integer"
                            },
                            totalProperties: {
                                type: "integer"
                            }
                        }
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleName: {},
                    arn: {},
                    modelManifestArn: {},
                    decoderManifestArn: {},
                    attributes: {
                        shape: "S9"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetVehicleStatus: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    vehicleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    campaigns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                campaignName: {},
                                vehicleName: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ImportDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name", "networkFileDefinitions" ],
                members: {
                    name: {},
                    networkFileDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                canDbc: {
                                    type: "structure",
                                    required: [ "networkInterface", "canDbcFiles" ],
                                    members: {
                                        networkInterface: {},
                                        canDbcFiles: {
                                            type: "list",
                                            member: {
                                                type: "blob"
                                            }
                                        },
                                        signalsMap: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        }
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            }
        },
        ImportSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    vss: {
                        type: "structure",
                        members: {
                            vssJson: {}
                        },
                        union: true
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        ListCampaigns: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    campaignSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "lastModificationTime" ],
                            members: {
                                arn: {},
                                name: {},
                                description: {},
                                signalCatalogArn: {},
                                targetArn: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDecoderManifestNetworkInterfaces: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkInterfaces: {
                        shape: "S2m"
                    },
                    nextToken: {}
                }
            }
        },
        ListDecoderManifestSignals: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    signalDecoders: {
                        shape: "S1w"
                    },
                    nextToken: {}
                }
            }
        },
        ListDecoderManifests: {
            input: {
                type: "structure",
                members: {
                    modelManifestArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "lastModificationTime" ],
                            members: {
                                name: {},
                                arn: {},
                                modelManifestArn: {},
                                description: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                },
                                message: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFleets: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fleetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "signalCatalogArn", "creationTime" ],
                            members: {
                                id: {},
                                arn: {},
                                description: {},
                                signalCatalogArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFleetsForVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fleets: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListModelManifestNodes: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodes: {
                        shape: "S36"
                    },
                    nextToken: {}
                }
            }
        },
        ListModelManifests: {
            input: {
                type: "structure",
                members: {
                    signalCatalogArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "lastModificationTime" ],
                            members: {
                                name: {},
                                arn: {},
                                signalCatalogArn: {},
                                description: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSignalCatalogNodes: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodes: {
                        shape: "S36"
                    },
                    nextToken: {}
                }
            }
        },
        ListSignalCatalogs: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        ListVehicles: {
            input: {
                type: "structure",
                members: {
                    modelManifestArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "vehicleName", "arn", "modelManifestArn", "decoderManifestArn", "creationTime", "lastModificationTime" ],
                            members: {
                                vehicleName: {},
                                arn: {},
                                modelManifestArn: {},
                                decoderManifestArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListVehiclesInFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicles: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        PutEncryptionConfiguration: {
            input: {
                type: "structure",
                required: [ "encryptionType" ],
                members: {
                    kmsKeyId: {},
                    encryptionType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "encryptionStatus", "encryptionType" ],
                members: {
                    kmsKeyId: {},
                    encryptionStatus: {},
                    encryptionType: {}
                }
            }
        },
        PutLoggingOptions: {
            input: {
                type: "structure",
                required: [ "cloudWatchLogDelivery" ],
                members: {
                    cloudWatchLogDelivery: {
                        shape: "S4e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RegisterAccount: {
            input: {
                type: "structure",
                members: {
                    timestreamResources: {
                        shape: "S6r",
                        deprecated: true,
                        deprecatedMessage: "Amazon Timestream metadata is now passed in the CreateCampaign API."
                    },
                    iamResources: {
                        shape: "S6s",
                        deprecated: true,
                        deprecatedMessage: "iamResources is no longer used or needed as input"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "registerAccountStatus", "iamResources", "creationTime", "lastModificationTime" ],
                members: {
                    registerAccountStatus: {},
                    timestreamResources: {
                        shape: "S6r"
                    },
                    iamResources: {
                        shape: "S6s"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateCampaign: {
            input: {
                type: "structure",
                required: [ "name", "action" ],
                members: {
                    name: {},
                    description: {},
                    dataExtraDimensions: {
                        shape: "S1h"
                    },
                    action: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    status: {}
                }
            }
        },
        UpdateDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    signalDecodersToAdd: {
                        shape: "S1w"
                    },
                    signalDecodersToUpdate: {
                        shape: "S1w"
                    },
                    signalDecodersToRemove: {
                        type: "list",
                        member: {}
                    },
                    networkInterfacesToAdd: {
                        shape: "S2m"
                    },
                    networkInterfacesToUpdate: {
                        shape: "S2m"
                    },
                    networkInterfacesToRemove: {
                        type: "list",
                        member: {}
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        UpdateFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {}
                }
            }
        },
        UpdateModelManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    nodesToAdd: {
                        shape: "S79"
                    },
                    nodesToRemove: {
                        shape: "S79"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        UpdateSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    nodesToAdd: {
                        shape: "S36"
                    },
                    nodesToUpdate: {
                        shape: "S36"
                    },
                    nodesToRemove: {
                        shape: "S79"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        UpdateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {},
                    modelManifestArn: {},
                    decoderManifestArn: {},
                    attributes: {
                        shape: "S9"
                    },
                    attributeUpdateMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleName: {},
                    arn: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "map",
            key: {},
            value: {}
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    maxSampleCount: {
                        type: "long"
                    },
                    minimumSamplingIntervalMs: {
                        type: "long"
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                timeBasedCollectionScheme: {
                    type: "structure",
                    required: [ "periodMs" ],
                    members: {
                        periodMs: {
                            type: "long"
                        }
                    }
                },
                conditionBasedCollectionScheme: {
                    type: "structure",
                    required: [ "expression" ],
                    members: {
                        expression: {},
                        minimumTriggerIntervalMs: {
                            type: "long"
                        },
                        triggerMode: {},
                        conditionLanguageVersion: {
                            type: "integer"
                        }
                    }
                }
            },
            union: true
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    s3Config: {
                        type: "structure",
                        required: [ "bucketArn" ],
                        members: {
                            bucketArn: {},
                            dataFormat: {},
                            storageCompressionFormat: {},
                            prefix: {}
                        }
                    },
                    timestreamConfig: {
                        type: "structure",
                        required: [ "timestreamTableArn", "executionRoleArn" ],
                        members: {
                            timestreamTableArn: {},
                            executionRoleArn: {}
                        }
                    }
                },
                union: true
            }
        },
        S1w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "fullyQualifiedName", "type", "interfaceId" ],
                members: {
                    fullyQualifiedName: {},
                    type: {},
                    interfaceId: {},
                    canSignal: {
                        type: "structure",
                        required: [ "messageId", "isBigEndian", "isSigned", "startBit", "offset", "factor", "length" ],
                        members: {
                            messageId: {
                                type: "integer"
                            },
                            isBigEndian: {
                                type: "boolean"
                            },
                            isSigned: {
                                type: "boolean"
                            },
                            startBit: {
                                type: "integer"
                            },
                            offset: {
                                type: "double"
                            },
                            factor: {
                                type: "double"
                            },
                            length: {
                                type: "integer"
                            },
                            name: {}
                        }
                    },
                    obdSignal: {
                        type: "structure",
                        required: [ "pidResponseLength", "serviceMode", "pid", "scaling", "offset", "startByte", "byteLength" ],
                        members: {
                            pidResponseLength: {
                                type: "integer"
                            },
                            serviceMode: {
                                type: "integer"
                            },
                            pid: {
                                type: "integer"
                            },
                            scaling: {
                                type: "double"
                            },
                            offset: {
                                type: "double"
                            },
                            startByte: {
                                type: "integer"
                            },
                            byteLength: {
                                type: "integer"
                            },
                            bitRightShift: {
                                type: "integer"
                            },
                            bitMaskLength: {
                                type: "integer"
                            }
                        }
                    },
                    messageSignal: {
                        type: "structure",
                        required: [ "topicName", "structuredMessage" ],
                        members: {
                            topicName: {},
                            structuredMessage: {
                                shape: "S2c"
                            }
                        }
                    }
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                primitiveMessageDefinition: {
                    type: "structure",
                    members: {
                        ros2PrimitiveMessageDefinition: {
                            type: "structure",
                            required: [ "primitiveType" ],
                            members: {
                                primitiveType: {},
                                offset: {
                                    type: "double"
                                },
                                scaling: {
                                    type: "double"
                                },
                                upperBound: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    union: true
                },
                structuredMessageListDefinition: {
                    type: "structure",
                    required: [ "name", "memberType", "listType" ],
                    members: {
                        name: {},
                        memberType: {
                            shape: "S2c"
                        },
                        listType: {},
                        capacity: {
                            type: "integer"
                        }
                    }
                },
                structuredMessageDefinition: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "fieldName", "dataType" ],
                        members: {
                            fieldName: {},
                            dataType: {
                                shape: "S2c"
                            }
                        }
                    }
                }
            },
            union: true
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "interfaceId", "type" ],
                members: {
                    interfaceId: {},
                    type: {},
                    canInterface: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {},
                            protocolName: {},
                            protocolVersion: {}
                        }
                    },
                    obdInterface: {
                        type: "structure",
                        required: [ "name", "requestMessageId" ],
                        members: {
                            name: {},
                            requestMessageId: {
                                type: "integer"
                            },
                            obdStandard: {},
                            pidRequestIntervalSeconds: {
                                type: "integer"
                            },
                            dtcRequestIntervalSeconds: {
                                type: "integer"
                            },
                            useExtendedIds: {
                                type: "boolean"
                            },
                            hasTransmissionEcu: {
                                type: "boolean"
                            }
                        }
                    },
                    vehicleMiddleware: {
                        type: "structure",
                        required: [ "name", "protocolName" ],
                        members: {
                            name: {},
                            protocolName: {}
                        }
                    }
                }
            }
        },
        S33: {
            type: "list",
            member: {}
        },
        S36: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    branch: {
                        type: "structure",
                        required: [ "fullyQualifiedName" ],
                        members: {
                            fullyQualifiedName: {},
                            description: {},
                            deprecationMessage: {},
                            comment: {}
                        }
                    },
                    sensor: {
                        type: "structure",
                        required: [ "fullyQualifiedName", "dataType" ],
                        members: {
                            fullyQualifiedName: {},
                            dataType: {},
                            description: {},
                            unit: {},
                            allowedValues: {
                                shape: "S33"
                            },
                            min: {
                                type: "double"
                            },
                            max: {
                                type: "double"
                            },
                            deprecationMessage: {},
                            comment: {},
                            structFullyQualifiedName: {}
                        }
                    },
                    actuator: {
                        type: "structure",
                        required: [ "fullyQualifiedName", "dataType" ],
                        members: {
                            fullyQualifiedName: {},
                            dataType: {},
                            description: {},
                            unit: {},
                            allowedValues: {
                                shape: "S33"
                            },
                            min: {
                                type: "double"
                            },
                            max: {
                                type: "double"
                            },
                            assignedValue: {
                                deprecated: true,
                                deprecatedMessage: "assignedValue is no longer in use"
                            },
                            deprecationMessage: {},
                            comment: {},
                            structFullyQualifiedName: {}
                        }
                    },
                    attribute: {
                        type: "structure",
                        required: [ "fullyQualifiedName", "dataType" ],
                        members: {
                            fullyQualifiedName: {},
                            dataType: {},
                            description: {},
                            unit: {},
                            allowedValues: {
                                shape: "S33"
                            },
                            min: {
                                type: "double"
                            },
                            max: {
                                type: "double"
                            },
                            assignedValue: {
                                deprecated: true,
                                deprecatedMessage: "assignedValue is no longer in use"
                            },
                            defaultValue: {},
                            deprecationMessage: {},
                            comment: {}
                        }
                    },
                    struct: {
                        type: "structure",
                        required: [ "fullyQualifiedName" ],
                        members: {
                            fullyQualifiedName: {},
                            description: {},
                            deprecationMessage: {},
                            comment: {}
                        }
                    },
                    property: {
                        type: "structure",
                        required: [ "fullyQualifiedName", "dataType" ],
                        members: {
                            fullyQualifiedName: {},
                            dataType: {},
                            dataEncoding: {},
                            description: {},
                            deprecationMessage: {},
                            comment: {},
                            structFullyQualifiedName: {}
                        }
                    }
                },
                union: true
            }
        },
        S4e: {
            type: "structure",
            required: [ "logType" ],
            members: {
                logType: {},
                logGroupName: {}
            }
        },
        S6r: {
            type: "structure",
            required: [ "timestreamDatabaseName", "timestreamTableName" ],
            members: {
                timestreamDatabaseName: {},
                timestreamTableName: {}
            }
        },
        S6s: {
            type: "structure",
            required: [ "roleArn" ],
            members: {
                roleArn: {}
            }
        },
        S79: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetVehicleStatus: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "campaigns"
        },
        ListCampaigns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "campaignSummaries"
        },
        ListDecoderManifestNetworkInterfaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkInterfaces"
        },
        ListDecoderManifestSignals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "signalDecoders"
        },
        ListDecoderManifests: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "summaries"
        },
        ListFleets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "fleetSummaries"
        },
        ListFleetsForVehicle: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "fleets"
        },
        ListModelManifestNodes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "nodes"
        },
        ListModelManifests: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "summaries"
        },
        ListSignalCatalogNodes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "nodes"
        },
        ListSignalCatalogs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "summaries"
        },
        ListVehicles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "vehicleSummaries"
        },
        ListVehiclesInFleet: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "vehicles"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["migrationhuborchestrator"] = {};

AWS.MigrationHubOrchestrator = AWS.Service.defineService("migrationhuborchestrator", [ "2021-08-28" ]);

AWS.apiLoader.services["migrationhuborchestrator"]["2021-08-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-28",
        endpointPrefix: "migrationhub-orchestrator",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Migration Hub Orchestrator",
        serviceId: "MigrationHubOrchestrator",
        signatureVersion: "v4",
        signingName: "migrationhub-orchestrator",
        uid: "migrationhuborchestrator-2021-08-28"
    },
    operations: {
        CreateWorkflow: {
            http: {
                requestUri: "/migrationworkflow/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "templateId", "applicationConfigurationId", "inputParameters" ],
                members: {
                    name: {},
                    description: {},
                    templateId: {},
                    applicationConfigurationId: {},
                    inputParameters: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    templateId: {},
                    adsApplicationConfigurationId: {},
                    workflowInputs: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    },
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        CreateWorkflowStep: {
            http: {
                requestUri: "/workflowstep",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "stepGroupId", "workflowId", "stepActionType" ],
                members: {
                    name: {},
                    stepGroupId: {},
                    workflowId: {},
                    stepActionType: {},
                    description: {},
                    workflowStepAutomationConfiguration: {
                        shape: "Sq"
                    },
                    stepTarget: {
                        shape: "Sb"
                    },
                    outputs: {
                        shape: "Sx"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    stepGroupId: {},
                    workflowId: {},
                    name: {}
                }
            }
        },
        CreateWorkflowStepGroup: {
            http: {
                requestUri: "/workflowstepgroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "name" ],
                members: {
                    workflowId: {},
                    name: {},
                    description: {},
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    workflowId: {},
                    name: {},
                    id: {},
                    description: {},
                    tools: {
                        shape: "S18"
                    },
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    creationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteWorkflow: {
            http: {
                method: "DELETE",
                requestUri: "/migrationworkflow/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DeleteWorkflowStep: {
            http: {
                method: "DELETE",
                requestUri: "/workflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "stepGroupId", "workflowId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteWorkflowStepGroup: {
            http: {
                method: "DELETE",
                requestUri: "/workflowstepgroup/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workflowId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetTemplate: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflowtemplate/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    description: {},
                    inputs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                inputName: {},
                                dataType: {},
                                required: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    tools: {
                        shape: "S18"
                    },
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetTemplateStep: {
            http: {
                method: "GET",
                requestUri: "/templatestep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "templateId", "stepGroupId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    templateId: {
                        location: "querystring",
                        locationName: "templateId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    stepGroupId: {},
                    templateId: {},
                    name: {},
                    description: {},
                    stepActionType: {},
                    creationTime: {},
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    },
                    outputs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                dataType: {},
                                required: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    stepAutomationConfiguration: {
                        type: "structure",
                        members: {
                            scriptLocationS3Bucket: {},
                            scriptLocationS3Key: {
                                shape: "Ss"
                            },
                            command: {
                                shape: "Su"
                            },
                            runEnvironment: {},
                            targetType: {}
                        }
                    }
                }
            }
        },
        GetTemplateStepGroup: {
            http: {
                method: "GET",
                requestUri: "/templates/{templateId}/stepgroups/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "templateId", "id" ],
                members: {
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templateId: {},
                    id: {},
                    name: {},
                    description: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    tools: {
                        shape: "S18"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetWorkflow: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflow/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    templateId: {},
                    adsApplicationConfigurationId: {},
                    adsApplicationName: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastStartTime: {
                        type: "timestamp"
                    },
                    lastStopTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    tools: {
                        shape: "S18"
                    },
                    totalSteps: {
                        type: "integer"
                    },
                    completedSteps: {
                        type: "integer"
                    },
                    workflowInputs: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "Sd"
                    },
                    workflowBucket: {}
                }
            }
        },
        GetWorkflowStep: {
            http: {
                method: "GET",
                requestUri: "/workflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "stepGroupId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    stepGroupId: {},
                    workflowId: {},
                    stepId: {},
                    description: {},
                    stepActionType: {},
                    owner: {},
                    workflowStepAutomationConfiguration: {
                        shape: "Sq"
                    },
                    stepTarget: {
                        shape: "Sb"
                    },
                    outputs: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    },
                    status: {},
                    statusMessage: {},
                    scriptOutputLocation: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastStartTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    noOfSrvCompleted: {
                        type: "integer"
                    },
                    noOfSrvFailed: {
                        type: "integer"
                    },
                    totalNoOfSrv: {
                        type: "integer"
                    }
                }
            }
        },
        GetWorkflowStepGroup: {
            http: {
                method: "GET",
                requestUri: "/workflowstepgroup/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "workflowId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    workflowId: {},
                    name: {},
                    description: {},
                    status: {},
                    owner: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    tools: {
                        shape: "S18"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListPlugins: {
            http: {
                method: "GET",
                requestUri: "/plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    plugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pluginId: {},
                                hostname: {},
                                status: {},
                                ipAddress: {},
                                version: {},
                                registeredTime: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2i"
                    }
                }
            }
        },
        ListTemplateStepGroups: {
            http: {
                method: "GET",
                requestUri: "/templatestepgroups/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "templateId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "templateStepGroupSummary" ],
                members: {
                    nextToken: {},
                    templateStepGroupSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTemplateSteps: {
            http: {
                method: "GET",
                requestUri: "/templatesteps",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "templateId", "stepGroupId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    templateId: {
                        location: "querystring",
                        locationName: "templateId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    templateStepSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                stepGroupId: {},
                                templateId: {},
                                name: {},
                                stepActionType: {},
                                targetType: {},
                                owner: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTemplates: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflowtemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "templateSummary" ],
                members: {
                    nextToken: {},
                    templateSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                arn: {},
                                description: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkflowStepGroups: {
            http: {
                method: "GET",
                requestUri: "/workflowstepgroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workflowStepGroupsSummary" ],
                members: {
                    nextToken: {},
                    workflowStepGroupsSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                owner: {},
                                status: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWorkflowSteps: {
            http: {
                method: "GET",
                requestUri: "/workflow/{workflowId}/workflowstepgroups/{stepGroupId}/workflowsteps",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "stepGroupId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    workflowId: {
                        location: "uri",
                        locationName: "workflowId"
                    },
                    stepGroupId: {
                        location: "uri",
                        locationName: "stepGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workflowStepsSummary" ],
                members: {
                    nextToken: {},
                    workflowStepsSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                stepId: {},
                                name: {},
                                stepActionType: {},
                                owner: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                },
                                status: {},
                                statusMessage: {},
                                noOfSrvCompleted: {
                                    type: "integer"
                                },
                                noOfSrvFailed: {
                                    type: "integer"
                                },
                                totalNoOfSrv: {
                                    type: "integer"
                                },
                                description: {},
                                scriptLocation: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkflows: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflows",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    templateId: {
                        location: "querystring",
                        locationName: "templateId"
                    },
                    adsApplicationConfigurationName: {
                        location: "querystring",
                        locationName: "adsApplicationConfigurationName"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "migrationWorkflowSummary" ],
                members: {
                    nextToken: {},
                    migrationWorkflowSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                templateId: {},
                                adsApplicationConfigurationName: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                endTime: {
                                    type: "timestamp"
                                },
                                statusMessage: {},
                                completedSteps: {
                                    type: "integer"
                                },
                                totalSteps: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        RetryWorkflowStep: {
            http: {
                requestUri: "/retryworkflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "stepGroupId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stepGroupId: {},
                    workflowId: {},
                    id: {},
                    status: {}
                }
            }
        },
        StartWorkflow: {
            http: {
                requestUri: "/migrationworkflow/{id}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    status: {},
                    statusMessage: {},
                    lastStartTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StopWorkflow: {
            http: {
                requestUri: "/migrationworkflow/{id}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    status: {},
                    statusMessage: {},
                    lastStopTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateWorkflow: {
            http: {
                requestUri: "/migrationworkflow/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {},
                    description: {},
                    inputParameters: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    templateId: {},
                    adsApplicationConfigurationId: {},
                    workflowInputs: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    },
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        UpdateWorkflowStep: {
            http: {
                requestUri: "/workflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "stepGroupId", "workflowId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    stepGroupId: {},
                    workflowId: {},
                    name: {},
                    description: {},
                    stepActionType: {},
                    workflowStepAutomationConfiguration: {
                        shape: "Sq"
                    },
                    stepTarget: {
                        shape: "Sb"
                    },
                    outputs: {
                        shape: "Sx"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    stepGroupId: {},
                    workflowId: {},
                    name: {}
                }
            }
        },
        UpdateWorkflowStepGroup: {
            http: {
                requestUri: "/workflowstepgroup/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workflowId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {},
                    description: {},
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    workflowId: {},
                    name: {},
                    id: {},
                    description: {},
                    tools: {
                        shape: "S18"
                    },
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    integerValue: {
                        type: "integer"
                    },
                    stringValue: {},
                    listOfStringsValue: {
                        shape: "Sb"
                    },
                    mapOfStringValue: {
                        shape: "Sd"
                    }
                },
                union: true
            },
            sensitive: true
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sq: {
            type: "structure",
            members: {
                scriptLocationS3Bucket: {},
                scriptLocationS3Key: {
                    shape: "Ss"
                },
                command: {
                    shape: "Su"
                },
                runEnvironment: {},
                targetType: {}
            }
        },
        Ss: {
            type: "structure",
            members: {
                linux: {},
                windows: {}
            }
        },
        Su: {
            type: "structure",
            members: {
                linux: {},
                windows: {}
            }
        },
        Sx: {
            type: "list",
            member: {
                shape: "Sy"
            }
        },
        Sy: {
            type: "structure",
            members: {
                name: {},
                dataType: {},
                required: {
                    type: "boolean"
                },
                value: {
                    type: "structure",
                    members: {
                        integerValue: {
                            type: "integer"
                        },
                        stringValue: {},
                        listOfStringValue: {
                            shape: "Sb"
                        }
                    },
                    union: true
                }
            }
        },
        S18: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    url: {}
                }
            }
        },
        S2i: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListPlugins: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "plugins"
        },
        ListTemplateStepGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateStepGroupSummary"
        },
        ListTemplateSteps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateStepSummaryList"
        },
        ListTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateSummary"
        },
        ListWorkflowStepGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowStepGroupsSummary"
        },
        ListWorkflowSteps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowStepsSummary"
        },
        ListWorkflows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "migrationWorkflowSummary"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["connectcases"] = {};

AWS.ConnectCases = AWS.Service.defineService("connectcases", [ "2022-10-03" ]);

AWS.apiLoader.services["connectcases"]["2022-10-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-10-03",
        endpointPrefix: "cases",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "ConnectCases",
        serviceFullName: "Amazon Connect Cases",
        serviceId: "ConnectCases",
        signatureVersion: "v4",
        signingName: "cases",
        uid: "connectcases-2022-10-03"
    },
    operations: {
        BatchGetField: {
            http: {
                requestUri: "/domains/{domainId}/fields-batch",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fields" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errors", "fields" ],
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "id" ],
                            members: {
                                errorCode: {},
                                id: {},
                                message: {}
                            }
                        }
                    },
                    fields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "fieldArn", "fieldId", "name", "namespace", "type" ],
                            members: {
                                description: {},
                                fieldArn: {},
                                fieldId: {},
                                name: {},
                                namespace: {},
                                tags: {
                                    shape: "Sg"
                                },
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        BatchPutFieldOptions: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/fields/{fieldId}/options",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fieldId", "options" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fieldId: {
                        location: "uri",
                        locationName: "fieldId"
                    },
                    options: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "message", "value" ],
                            members: {
                                errorCode: {},
                                message: {},
                                value: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        CreateCase: {
            http: {
                requestUri: "/domains/{domainId}/cases",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fields", "templateId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    templateId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "caseArn", "caseId" ],
                members: {
                    caseArn: {},
                    caseId: {}
                }
            },
            idempotent: true
        },
        CreateDomain: {
            http: {
                requestUri: "/domains",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainArn", "domainId", "domainStatus" ],
                members: {
                    domainArn: {},
                    domainId: {},
                    domainStatus: {}
                }
            },
            idempotent: true
        },
        CreateField: {
            http: {
                requestUri: "/domains/{domainId}/fields",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "name", "type" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "fieldArn", "fieldId" ],
                members: {
                    fieldArn: {},
                    fieldId: {}
                }
            },
            idempotent: true
        },
        CreateLayout: {
            http: {
                requestUri: "/domains/{domainId}/layouts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "content", "domainId", "name" ],
                members: {
                    content: {
                        shape: "S1b"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "layoutArn", "layoutId" ],
                members: {
                    layoutArn: {},
                    layoutId: {}
                }
            }
        },
        CreateRelatedItem: {
            http: {
                requestUri: "/domains/{domainId}/cases/{caseId}/related-items/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "content", "domainId", "type" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    content: {
                        type: "structure",
                        members: {
                            comment: {
                                shape: "S1q"
                            },
                            contact: {
                                type: "structure",
                                required: [ "contactArn" ],
                                members: {
                                    contactArn: {}
                                }
                            }
                        },
                        union: true
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    performedBy: {
                        shape: "S1v"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "relatedItemArn", "relatedItemId" ],
                members: {
                    relatedItemArn: {},
                    relatedItemId: {}
                }
            },
            idempotent: true
        },
        CreateTemplate: {
            http: {
                requestUri: "/domains/{domainId}/templates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "name" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutConfiguration: {
                        shape: "S23"
                    },
                    name: {},
                    requiredFields: {
                        shape: "S25"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templateArn", "templateId" ],
                members: {
                    templateArn: {},
                    templateId: {}
                }
            },
            idempotent: true
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{domainId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetCase: {
            http: {
                requestUri: "/domains/{domainId}/cases/{caseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "domainId", "fields" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "fields", "templateId" ],
                members: {
                    fields: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    nextToken: {},
                    tags: {
                        shape: "Sg"
                    },
                    templateId: {}
                }
            }
        },
        GetCaseEventConfiguration: {
            http: {
                requestUri: "/domains/{domainId}/case-event-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "eventBridge" ],
                members: {
                    eventBridge: {
                        shape: "S2j"
                    }
                }
            }
        },
        GetDomain: {
            http: {
                requestUri: "/domains/{domainId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdTime", "domainArn", "domainId", "domainStatus", "name" ],
                members: {
                    createdTime: {
                        type: "timestamp",
                        timestampFormat: "iso8601"
                    },
                    domainArn: {},
                    domainId: {},
                    domainStatus: {},
                    name: {},
                    tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetLayout: {
            http: {
                requestUri: "/domains/{domainId}/layouts/{layoutId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "layoutId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutId: {
                        location: "uri",
                        locationName: "layoutId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "content", "layoutArn", "layoutId", "name" ],
                members: {
                    content: {
                        shape: "S1b"
                    },
                    layoutArn: {},
                    layoutId: {},
                    name: {},
                    tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetTemplate: {
            http: {
                requestUri: "/domains/{domainId}/templates/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "templateId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "status", "templateArn", "templateId" ],
                members: {
                    description: {},
                    layoutConfiguration: {
                        shape: "S23"
                    },
                    name: {},
                    requiredFields: {
                        shape: "S25"
                    },
                    status: {},
                    tags: {
                        shape: "Sg"
                    },
                    templateArn: {},
                    templateId: {}
                }
            }
        },
        ListCasesForContact: {
            http: {
                requestUri: "/domains/{domainId}/list-cases-for-contact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contactArn", "domainId" ],
                members: {
                    contactArn: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "cases" ],
                members: {
                    cases: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "caseId", "templateId" ],
                            members: {
                                caseId: {},
                                templateId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDomains: {
            http: {
                requestUri: "/domains-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domains" ],
                members: {
                    domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "domainArn", "domainId", "name" ],
                            members: {
                                domainArn: {},
                                domainId: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFieldOptions: {
            http: {
                requestUri: "/domains/{domainId}/fields/{fieldId}/options-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fieldId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fieldId: {
                        location: "uri",
                        locationName: "fieldId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    values: {
                        location: "querystring",
                        locationName: "values",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "options" ],
                members: {
                    nextToken: {},
                    options: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    }
                }
            }
        },
        ListFields: {
            http: {
                requestUri: "/domains/{domainId}/fields-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "fields" ],
                members: {
                    fields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "fieldArn", "fieldId", "name", "namespace", "type" ],
                            members: {
                                fieldArn: {},
                                fieldId: {},
                                name: {},
                                namespace: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLayouts: {
            http: {
                requestUri: "/domains/{domainId}/layouts-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "layouts" ],
                members: {
                    layouts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "layoutArn", "layoutId", "name" ],
                            members: {
                                layoutArn: {},
                                layoutId: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        ListTemplates: {
            http: {
                requestUri: "/domains/{domainId}/templates-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "templates" ],
                members: {
                    nextToken: {},
                    templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "status", "templateArn", "templateId" ],
                            members: {
                                name: {},
                                status: {},
                                templateArn: {},
                                templateId: {}
                            }
                        }
                    }
                }
            }
        },
        PutCaseEventConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/case-event-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "eventBridge" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    eventBridge: {
                        shape: "S2j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchCases: {
            http: {
                requestUri: "/domains/{domainId}/cases-search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    filter: {
                        shape: "S3v"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    searchTerm: {},
                    sorts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "fieldId", "sortOrder" ],
                            members: {
                                fieldId: {},
                                sortOrder: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cases" ],
                members: {
                    cases: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "caseId", "fields", "templateId" ],
                            members: {
                                caseId: {},
                                fields: {
                                    type: "list",
                                    member: {
                                        shape: "Su"
                                    }
                                },
                                tags: {
                                    shape: "Sg"
                                },
                                templateId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchRelatedItems: {
            http: {
                requestUri: "/domains/{domainId}/cases/{caseId}/related-items-search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "domainId" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                comment: {
                                    type: "structure",
                                    members: {}
                                },
                                contact: {
                                    type: "structure",
                                    members: {
                                        channel: {
                                            type: "list",
                                            member: {}
                                        },
                                        contactArn: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "relatedItems" ],
                members: {
                    nextToken: {},
                    relatedItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "associationTime", "content", "relatedItemId", "type" ],
                            members: {
                                associationTime: {
                                    type: "timestamp",
                                    timestampFormat: "iso8601"
                                },
                                content: {
                                    type: "structure",
                                    members: {
                                        comment: {
                                            shape: "S1q"
                                        },
                                        contact: {
                                            type: "structure",
                                            required: [ "channel", "connectedToSystemTime", "contactArn" ],
                                            members: {
                                                channel: {},
                                                connectedToSystemTime: {
                                                    type: "timestamp",
                                                    timestampFormat: "iso8601"
                                                },
                                                contactArn: {}
                                            }
                                        }
                                    },
                                    union: true
                                },
                                performedBy: {
                                    shape: "S1v"
                                },
                                relatedItemId: {},
                                tags: {
                                    shape: "Sg"
                                },
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tags" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tagKeys" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        },
        UpdateCase: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/cases/{caseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "domainId", "fields" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateField: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/fields/{fieldId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fieldId" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fieldId: {
                        location: "uri",
                        locationName: "fieldId"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateLayout: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/layouts/{layoutId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "layoutId" ],
                members: {
                    content: {
                        shape: "S1b"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutId: {
                        location: "uri",
                        locationName: "layoutId"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateTemplate: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/templates/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "templateId" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutConfiguration: {
                        shape: "S23"
                    },
                    name: {},
                    requiredFields: {
                        shape: "S25"
                    },
                    status: {},
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "id" ],
            members: {
                id: {}
            }
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Sk: {
            type: "structure",
            required: [ "active", "name", "value" ],
            members: {
                active: {
                    type: "boolean"
                },
                name: {},
                value: {}
            }
        },
        Su: {
            type: "structure",
            required: [ "id", "value" ],
            members: {
                id: {},
                value: {
                    type: "structure",
                    members: {
                        booleanValue: {
                            type: "boolean"
                        },
                        doubleValue: {
                            type: "double"
                        },
                        emptyValue: {
                            type: "structure",
                            members: {}
                        },
                        stringValue: {}
                    },
                    union: true
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                basic: {
                    type: "structure",
                    members: {
                        moreInfo: {
                            shape: "S1d"
                        },
                        topPanel: {
                            shape: "S1d"
                        }
                    }
                }
            },
            union: true
        },
        S1d: {
            type: "structure",
            members: {
                sections: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            fieldGroup: {
                                type: "structure",
                                required: [ "fields" ],
                                members: {
                                    fields: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "id" ],
                                            members: {
                                                id: {}
                                            }
                                        }
                                    },
                                    name: {}
                                }
                            }
                        },
                        union: true
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            required: [ "body", "contentType" ],
            members: {
                body: {},
                contentType: {}
            }
        },
        S1v: {
            type: "structure",
            members: {
                userArn: {}
            },
            union: true
        },
        S23: {
            type: "structure",
            members: {
                defaultLayout: {}
            }
        },
        S25: {
            type: "list",
            member: {
                type: "structure",
                required: [ "fieldId" ],
                members: {
                    fieldId: {}
                }
            }
        },
        S2j: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                includedData: {
                    type: "structure",
                    members: {
                        caseData: {
                            type: "structure",
                            required: [ "fields" ],
                            members: {
                                fields: {
                                    type: "list",
                                    member: {
                                        shape: "S4"
                                    }
                                }
                            }
                        },
                        relatedItemData: {
                            type: "structure",
                            required: [ "includeContent" ],
                            members: {
                                includeContent: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        S3v: {
            type: "structure",
            members: {
                andAll: {
                    type: "list",
                    member: {
                        shape: "S3v"
                    }
                },
                field: {
                    type: "structure",
                    members: {
                        contains: {
                            shape: "Su"
                        },
                        equalTo: {
                            shape: "Su"
                        },
                        greaterThan: {
                            shape: "Su"
                        },
                        greaterThanOrEqualTo: {
                            shape: "Su"
                        },
                        lessThan: {
                            shape: "Su"
                        },
                        lessThanOrEqualTo: {
                            shape: "Su"
                        }
                    },
                    union: true
                },
                not: {
                    shape: "S3v"
                },
                orAll: {
                    type: "list",
                    member: {
                        shape: "S3v"
                    }
                }
            },
            union: true
        }
    },
    paginators: {
        GetCase: {
            input_token: "nextToken",
            output_token: "nextToken"
        },
        ListCasesForContact: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDomains: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFieldOptions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFields: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListLayouts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        SearchCases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "cases"
        },
        SearchRelatedItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "relatedItems"
        }
    }
};

AWS.apiLoader.services["resourceexplorer2"] = {};

AWS.ResourceExplorer2 = AWS.Service.defineService("resourceexplorer2", [ "2022-07-28" ]);

AWS.apiLoader.services["resourceexplorer2"]["2022-07-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-07-28",
        endpointPrefix: "resource-explorer-2",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Resource Explorer",
        serviceId: "Resource Explorer 2",
        signatureVersion: "v4",
        signingName: "resource-explorer-2",
        uid: "resource-explorer-2-2022-07-28"
    },
    operations: {
        AssociateDefaultView: {
            http: {
                requestUri: "/AssociateDefaultView",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ViewArn" ],
                members: {
                    ViewArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ViewArn: {}
                }
            },
            idempotent: true
        },
        BatchGetView: {
            http: {
                requestUri: "/BatchGetView",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ViewArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ErrorMessage", "ViewArn" ],
                            members: {
                                ErrorMessage: {},
                                ViewArn: {}
                            }
                        }
                    },
                    Views: {
                        type: "list",
                        member: {
                            shape: "Sb"
                        }
                    }
                }
            }
        },
        CreateIndex: {
            http: {
                requestUri: "/CreateIndex",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedAt: {
                        shape: "Sh"
                    },
                    State: {}
                }
            },
            idempotent: true
        },
        CreateView: {
            http: {
                requestUri: "/CreateView",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ViewName" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Filters: {
                        shape: "Sc"
                    },
                    IncludedProperties: {
                        shape: "Se"
                    },
                    Scope: {},
                    Tags: {
                        shape: "Sj"
                    },
                    ViewName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    View: {
                        shape: "Sb"
                    }
                }
            }
        },
        DeleteIndex: {
            http: {
                requestUri: "/DeleteIndex",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    LastUpdatedAt: {
                        shape: "Sh"
                    },
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteView: {
            http: {
                requestUri: "/DeleteView",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ViewArn" ],
                members: {
                    ViewArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ViewArn: {}
                }
            },
            idempotent: true
        },
        DisassociateDefaultView: {
            http: {
                requestUri: "/DisassociateDefaultView",
                responseCode: 200
            },
            idempotent: true
        },
        GetAccountLevelServiceConfiguration: {
            http: {
                requestUri: "/GetAccountLevelServiceConfiguration",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    OrgConfiguration: {
                        type: "structure",
                        required: [ "AWSServiceAccessStatus" ],
                        members: {
                            AWSServiceAccessStatus: {},
                            ServiceLinkedRole: {}
                        }
                    }
                }
            }
        },
        GetDefaultView: {
            http: {
                requestUri: "/GetDefaultView",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    ViewArn: {}
                }
            }
        },
        GetIndex: {
            http: {
                requestUri: "/GetIndex",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedAt: {
                        shape: "Sh"
                    },
                    LastUpdatedAt: {
                        shape: "Sh"
                    },
                    ReplicatingFrom: {
                        shape: "S11"
                    },
                    ReplicatingTo: {
                        shape: "S11"
                    },
                    State: {},
                    Tags: {
                        shape: "Sj"
                    },
                    Type: {}
                }
            }
        },
        GetView: {
            http: {
                requestUri: "/GetView",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ViewArn" ],
                members: {
                    ViewArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sj"
                    },
                    View: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListIndexes: {
            http: {
                requestUri: "/ListIndexes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Regions: {
                        type: "list",
                        member: {}
                    },
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Indexes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Region: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIndexesForMembers: {
            http: {
                requestUri: "/ListIndexesForMembers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountIdList" ],
                members: {
                    AccountIdList: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Indexes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                Arn: {},
                                Region: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSupportedResourceTypes: {
            http: {
                requestUri: "/ListSupportedResourceTypes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ResourceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {},
                                Service: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sj"
                    }
                }
            }
        },
        ListViews: {
            http: {
                requestUri: "/ListViews",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Views: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Search: {
            http: {
                requestUri: "/Search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "QueryString" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    QueryString: {
                        type: "string",
                        sensitive: true
                    },
                    ViewArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Count: {
                        type: "structure",
                        members: {
                            Complete: {
                                type: "boolean"
                            },
                            TotalResources: {
                                type: "long"
                            }
                        }
                    },
                    NextToken: {},
                    Resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                LastReportedAt: {
                                    shape: "Sh"
                                },
                                OwningAccountId: {},
                                Properties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Data: {
                                                type: "structure",
                                                members: {},
                                                document: true
                                            },
                                            LastReportedAt: {
                                                shape: "Sh"
                                            },
                                            Name: {}
                                        }
                                    }
                                },
                                Region: {},
                                ResourceType: {},
                                Service: {}
                            }
                        }
                    },
                    ViewArn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    Tags: {
                        shape: "Sj"
                    },
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIndexType: {
            http: {
                requestUri: "/UpdateIndexType",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "Type" ],
                members: {
                    Arn: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    LastUpdatedAt: {
                        shape: "Sh"
                    },
                    State: {},
                    Type: {}
                }
            }
        },
        UpdateView: {
            http: {
                requestUri: "/UpdateView",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ViewArn" ],
                members: {
                    Filters: {
                        shape: "Sc"
                    },
                    IncludedProperties: {
                        shape: "Se"
                    },
                    ViewArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    View: {
                        shape: "Sb"
                    }
                }
            }
        }
    },
    shapes: {
        Sb: {
            type: "structure",
            members: {
                Filters: {
                    shape: "Sc"
                },
                IncludedProperties: {
                    shape: "Se"
                },
                LastUpdatedAt: {
                    shape: "Sh"
                },
                Owner: {},
                Scope: {},
                ViewArn: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "FilterString" ],
            members: {
                FilterString: {}
            },
            sensitive: true
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        Sh: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sj: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S11: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListIndexes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Indexes"
        },
        ListIndexesForMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Indexes"
        },
        ListSupportedResourceTypes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceTypes"
        },
        ListViews: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Views"
        },
        Search: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Resources"
        }
    }
};

AWS.apiLoader.services["scheduler"] = {};

AWS.Scheduler = AWS.Service.defineService("scheduler", [ "2021-06-30" ]);

AWS.apiLoader.services["scheduler"]["2021-06-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-06-30",
        endpointPrefix: "scheduler",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon EventBridge Scheduler",
        serviceId: "Scheduler",
        signatureVersion: "v4",
        signingName: "scheduler",
        uid: "scheduler-2021-06-30"
    },
    operations: {
        CreateSchedule: {
            http: {
                requestUri: "/schedules/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FlexibleTimeWindow", "Name", "ScheduleExpression", "Target" ],
                members: {
                    ActionAfterCompletion: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    EndDate: {
                        type: "timestamp"
                    },
                    FlexibleTimeWindow: {
                        shape: "S6"
                    },
                    GroupName: {},
                    KmsKeyArn: {},
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    ScheduleExpression: {},
                    ScheduleExpressionTimezone: {},
                    StartDate: {
                        type: "timestamp"
                    },
                    State: {},
                    Target: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ScheduleArn" ],
                members: {
                    ScheduleArn: {}
                }
            },
            idempotent: true
        },
        CreateScheduleGroup: {
            http: {
                requestUri: "/schedule-groups/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Tags: {
                        shape: "S22"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ScheduleGroupArn" ],
                members: {
                    ScheduleGroupArn: {}
                }
            },
            idempotent: true
        },
        DeleteSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/schedules/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    GroupName: {
                        location: "querystring",
                        locationName: "groupName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteScheduleGroup: {
            http: {
                method: "DELETE",
                requestUri: "/schedule-groups/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetSchedule: {
            http: {
                method: "GET",
                requestUri: "/schedules/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    GroupName: {
                        location: "querystring",
                        locationName: "groupName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionAfterCompletion: {},
                    Arn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    EndDate: {
                        type: "timestamp"
                    },
                    FlexibleTimeWindow: {
                        shape: "S6"
                    },
                    GroupName: {},
                    KmsKeyArn: {},
                    LastModificationDate: {
                        type: "timestamp"
                    },
                    Name: {},
                    ScheduleExpression: {},
                    ScheduleExpressionTimezone: {},
                    StartDate: {
                        type: "timestamp"
                    },
                    State: {},
                    Target: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetScheduleGroup: {
            http: {
                method: "GET",
                requestUri: "/schedule-groups/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    LastModificationDate: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            }
        },
        ListScheduleGroups: {
            http: {
                method: "GET",
                requestUri: "/schedule-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NamePrefix: {
                        location: "querystring",
                        locationName: "NamePrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ScheduleGroups" ],
                members: {
                    NextToken: {},
                    ScheduleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                LastModificationDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                State: {}
                            }
                        }
                    }
                }
            }
        },
        ListSchedules: {
            http: {
                method: "GET",
                requestUri: "/schedules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        location: "querystring",
                        locationName: "ScheduleGroup"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NamePrefix: {
                        location: "querystring",
                        locationName: "NamePrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    State: {
                        location: "querystring",
                        locationName: "State"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Schedules" ],
                members: {
                    NextToken: {},
                    Schedules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                GroupName: {},
                                LastModificationDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                State: {},
                                Target: {
                                    type: "structure",
                                    required: [ "Arn" ],
                                    members: {
                                        Arn: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S22"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S22"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateSchedule: {
            http: {
                method: "PUT",
                requestUri: "/schedules/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FlexibleTimeWindow", "Name", "ScheduleExpression", "Target" ],
                members: {
                    ActionAfterCompletion: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    EndDate: {
                        type: "timestamp"
                    },
                    FlexibleTimeWindow: {
                        shape: "S6"
                    },
                    GroupName: {},
                    KmsKeyArn: {},
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    ScheduleExpression: {},
                    ScheduleExpressionTimezone: {},
                    StartDate: {
                        type: "timestamp"
                    },
                    State: {},
                    Target: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ScheduleArn" ],
                members: {
                    ScheduleArn: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "Mode" ],
            members: {
                MaximumWindowInMinutes: {
                    type: "integer"
                },
                Mode: {}
            }
        },
        Sg: {
            type: "structure",
            required: [ "Arn", "RoleArn" ],
            members: {
                Arn: {},
                DeadLetterConfig: {
                    type: "structure",
                    members: {
                        Arn: {}
                    }
                },
                EcsParameters: {
                    type: "structure",
                    required: [ "TaskDefinitionArn" ],
                    members: {
                        CapacityProviderStrategy: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "capacityProvider" ],
                                members: {
                                    base: {
                                        type: "integer"
                                    },
                                    capacityProvider: {},
                                    weight: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        EnableECSManagedTags: {
                            type: "boolean"
                        },
                        EnableExecuteCommand: {
                            type: "boolean"
                        },
                        Group: {},
                        LaunchType: {},
                        NetworkConfiguration: {
                            type: "structure",
                            members: {
                                awsvpcConfiguration: {
                                    type: "structure",
                                    required: [ "Subnets" ],
                                    members: {
                                        AssignPublicIp: {},
                                        SecurityGroups: {
                                            type: "list",
                                            member: {}
                                        },
                                        Subnets: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        },
                        PlacementConstraints: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    expression: {},
                                    type: {}
                                }
                            }
                        },
                        PlacementStrategy: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    field: {},
                                    type: {}
                                }
                            }
                        },
                        PlatformVersion: {},
                        PropagateTags: {},
                        ReferenceId: {},
                        Tags: {
                            type: "list",
                            member: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        },
                        TaskCount: {
                            type: "integer"
                        },
                        TaskDefinitionArn: {}
                    }
                },
                EventBridgeParameters: {
                    type: "structure",
                    required: [ "DetailType", "Source" ],
                    members: {
                        DetailType: {},
                        Source: {}
                    }
                },
                Input: {},
                KinesisParameters: {
                    type: "structure",
                    required: [ "PartitionKey" ],
                    members: {
                        PartitionKey: {}
                    }
                },
                RetryPolicy: {
                    type: "structure",
                    members: {
                        MaximumEventAgeInSeconds: {
                            type: "integer"
                        },
                        MaximumRetryAttempts: {
                            type: "integer"
                        }
                    }
                },
                RoleArn: {},
                SageMakerPipelineParameters: {
                    type: "structure",
                    members: {
                        PipelineParameterList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "Value" ],
                                members: {
                                    Name: {},
                                    Value: {}
                                }
                            }
                        }
                    }
                },
                SqsParameters: {
                    type: "structure",
                    members: {
                        MessageGroupId: {}
                    }
                }
            }
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListScheduleGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ScheduleGroups"
        },
        ListSchedules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Schedules"
        }
    }
};

AWS.apiLoader.services["chimesdkvoice"] = {};

AWS.ChimeSDKVoice = AWS.Service.defineService("chimesdkvoice", [ "2022-08-03" ]);

AWS.apiLoader.services["chimesdkvoice"]["2022-08-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-08-03",
        endpointPrefix: "voice-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Voice",
        serviceId: "Chime SDK Voice",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-voice-2022-08-03"
    },
    operations: {
        AssociatePhoneNumbersWithVoiceConnector: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}?operation=associate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    E164PhoneNumbers: {
                        shape: "S3"
                    },
                    ForceAssociate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "S7"
                    }
                }
            }
        },
        AssociatePhoneNumbersWithVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}?operation=associate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    E164PhoneNumbers: {
                        shape: "S3"
                    },
                    ForceAssociate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "S7"
                    }
                }
            }
        },
        BatchDeletePhoneNumber: {
            http: {
                requestUri: "/phone-numbers?operation=batch-delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberIds" ],
                members: {
                    PhoneNumberIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "S7"
                    }
                }
            }
        },
        BatchUpdatePhoneNumber: {
            http: {
                requestUri: "/phone-numbers?operation=batch-update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UpdatePhoneNumberRequestItems" ],
                members: {
                    UpdatePhoneNumberRequestItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PhoneNumberId" ],
                            members: {
                                PhoneNumberId: {
                                    shape: "S9"
                                },
                                ProductType: {},
                                CallingName: {
                                    shape: "Sl"
                                },
                                Name: {
                                    shape: "Sm"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "S7"
                    }
                }
            }
        },
        CreatePhoneNumberOrder: {
            http: {
                requestUri: "/phone-number-orders",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ProductType", "E164PhoneNumbers" ],
                members: {
                    ProductType: {},
                    E164PhoneNumbers: {
                        shape: "S3"
                    },
                    Name: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrder: {
                        shape: "Sq"
                    }
                }
            }
        },
        CreateProxySession: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ParticipantPhoneNumbers", "Capabilities", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ParticipantPhoneNumbers: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    Name: {
                        type: "string",
                        sensitive: true
                    },
                    ExpiryMinutes: {
                        type: "integer"
                    },
                    Capabilities: {
                        shape: "S13"
                    },
                    NumberSelectionBehavior: {},
                    GeoMatchLevel: {},
                    GeoMatchParams: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S1b"
                    }
                }
            }
        },
        CreateSipMediaApplication: {
            http: {
                requestUri: "/sip-media-applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AwsRegion", "Name", "Endpoints" ],
                members: {
                    AwsRegion: {},
                    Name: {},
                    Endpoints: {
                        shape: "S1i"
                    },
                    Tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S1q"
                    }
                }
            }
        },
        CreateSipMediaApplicationCall: {
            http: {
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/calls",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FromPhoneNumber", "ToPhoneNumber", "SipMediaApplicationId" ],
                members: {
                    FromPhoneNumber: {
                        shape: "S4"
                    },
                    ToPhoneNumber: {
                        shape: "S4"
                    },
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    SipHeaders: {
                        type: "map",
                        key: {
                            shape: "S1t"
                        },
                        value: {
                            shape: "S1t"
                        }
                    },
                    ArgumentsMap: {
                        type: "map",
                        key: {
                            shape: "S1t"
                        },
                        value: {
                            shape: "S1t"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationCall: {
                        shape: "S1w"
                    }
                }
            }
        },
        CreateSipRule: {
            http: {
                requestUri: "/sip-rules",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "TriggerType", "TriggerValue" ],
                members: {
                    Name: {},
                    TriggerType: {},
                    TriggerValue: {},
                    Disabled: {
                        type: "boolean"
                    },
                    TargetApplications: {
                        shape: "S20"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S24"
                    }
                }
            }
        },
        CreateVoiceConnector: {
            http: {
                requestUri: "/voice-connectors",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "RequireEncryption" ],
                members: {
                    Name: {},
                    AwsRegion: {},
                    RequireEncryption: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S2a"
                    }
                }
            }
        },
        CreateVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    VoiceConnectorItems: {
                        shape: "S2d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S2h"
                    }
                }
            }
        },
        CreateVoiceProfile: {
            http: {
                requestUri: "/voice-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "SpeakerSearchTaskId" ],
                members: {
                    SpeakerSearchTaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfile: {
                        shape: "S2l"
                    }
                }
            }
        },
        CreateVoiceProfileDomain: {
            http: {
                requestUri: "/voice-profile-domains",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "ServerSideEncryptionConfiguration" ],
                members: {
                    Name: {},
                    Description: {},
                    ServerSideEncryptionConfiguration: {
                        shape: "S2q"
                    },
                    ClientRequestToken: {},
                    Tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfileDomain: {
                        shape: "S2t"
                    }
                }
            }
        },
        DeletePhoneNumber: {
            http: {
                method: "DELETE",
                requestUri: "/phone-numbers/{phoneNumberId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        shape: "S9",
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            }
        },
        DeleteProxySession: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    }
                }
            }
        },
        DeleteSipMediaApplication: {
            http: {
                method: "DELETE",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            }
        },
        DeleteSipRule: {
            http: {
                method: "DELETE",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "SipRuleId" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    }
                }
            }
        },
        DeleteVoiceConnector: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorGroup: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    }
                }
            }
        },
        DeleteVoiceConnectorOrigination: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorProxy: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorStreamingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorTermination: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorTerminationCredentials: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=delete",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Usernames", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Usernames: {
                        shape: "S36"
                    }
                }
            }
        },
        DeleteVoiceProfile: {
            http: {
                method: "DELETE",
                requestUri: "/voice-profiles/{VoiceProfileId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceProfileId" ],
                members: {
                    VoiceProfileId: {
                        location: "uri",
                        locationName: "VoiceProfileId"
                    }
                }
            }
        },
        DeleteVoiceProfileDomain: {
            http: {
                method: "DELETE",
                requestUri: "/voice-profile-domains/{VoiceProfileDomainId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceProfileDomainId" ],
                members: {
                    VoiceProfileDomainId: {
                        location: "uri",
                        locationName: "VoiceProfileDomainId"
                    }
                }
            }
        },
        DisassociatePhoneNumbersFromVoiceConnector: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}?operation=disassociate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    E164PhoneNumbers: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "S7"
                    }
                }
            }
        },
        DisassociatePhoneNumbersFromVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}?operation=disassociate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    E164PhoneNumbers: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "S7"
                    }
                }
            }
        },
        GetGlobalSettings: {
            http: {
                method: "GET",
                requestUri: "/settings",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S3e"
                    }
                }
            }
        },
        GetPhoneNumber: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers/{phoneNumberId}"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        shape: "S9",
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S3h"
                    }
                }
            }
        },
        GetPhoneNumberOrder: {
            http: {
                method: "GET",
                requestUri: "/phone-number-orders/{phoneNumberOrderId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberOrderId" ],
                members: {
                    PhoneNumberOrderId: {
                        location: "uri",
                        locationName: "phoneNumberOrderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrder: {
                        shape: "Sq"
                    }
                }
            }
        },
        GetPhoneNumberSettings: {
            http: {
                method: "GET",
                requestUri: "/settings/phone-number",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    CallingName: {
                        shape: "Sl"
                    },
                    CallingNameUpdatedTimestamp: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetProxySession: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S1b"
                    }
                }
            }
        },
        GetSipMediaApplication: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S1q"
                    }
                }
            }
        },
        GetSipMediaApplicationAlexaSkillConfiguration: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/alexa-skill-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationAlexaSkillConfiguration: {
                        shape: "S3z"
                    }
                }
            }
        },
        GetSipMediaApplicationLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S45"
                    }
                }
            }
        },
        GetSipRule: {
            http: {
                method: "GET",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipRuleId" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S24"
                    }
                }
            }
        },
        GetSpeakerSearchTask: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{VoiceConnectorId}/speaker-search-tasks/{SpeakerSearchTaskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "SpeakerSearchTaskId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "VoiceConnectorId"
                    },
                    SpeakerSearchTaskId: {
                        location: "uri",
                        locationName: "SpeakerSearchTaskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpeakerSearchTask: {
                        shape: "S4a"
                    }
                }
            }
        },
        GetVoiceConnector: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S2a"
                    }
                }
            }
        },
        GetVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmergencyCallingConfiguration: {
                        shape: "S4k"
                    }
                }
            }
        },
        GetVoiceConnectorGroup: {
            http: {
                method: "GET",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetVoiceConnectorLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S4r"
                    }
                }
            }
        },
        GetVoiceConnectorOrigination: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origination: {
                        shape: "S4u"
                    }
                }
            }
        },
        GetVoiceConnectorProxy: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proxy: {
                        shape: "S53"
                    }
                }
            }
        },
        GetVoiceConnectorStreamingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfiguration: {
                        shape: "S58"
                    }
                }
            }
        },
        GetVoiceConnectorTermination: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Termination: {
                        shape: "S5g"
                    }
                }
            }
        },
        GetVoiceConnectorTerminationHealth: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/health",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminationHealth: {
                        type: "structure",
                        members: {
                            Timestamp: {
                                shape: "Sx"
                            },
                            Source: {}
                        }
                    }
                }
            }
        },
        GetVoiceProfile: {
            http: {
                method: "GET",
                requestUri: "/voice-profiles/{VoiceProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceProfileId" ],
                members: {
                    VoiceProfileId: {
                        location: "uri",
                        locationName: "VoiceProfileId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfile: {
                        shape: "S2l"
                    }
                }
            }
        },
        GetVoiceProfileDomain: {
            http: {
                method: "GET",
                requestUri: "/voice-profile-domains/{VoiceProfileDomainId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceProfileDomainId" ],
                members: {
                    VoiceProfileDomainId: {
                        location: "uri",
                        locationName: "VoiceProfileDomainId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfileDomain: {
                        shape: "S2t"
                    }
                }
            }
        },
        GetVoiceToneAnalysisTask: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{VoiceConnectorId}/voice-tone-analysis-tasks/{VoiceToneAnalysisTaskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "VoiceToneAnalysisTaskId", "IsCaller" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "VoiceConnectorId"
                    },
                    VoiceToneAnalysisTaskId: {
                        location: "uri",
                        locationName: "VoiceToneAnalysisTaskId"
                    },
                    IsCaller: {
                        location: "querystring",
                        locationName: "isCaller",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceToneAnalysisTask: {
                        shape: "S5t"
                    }
                }
            }
        },
        ListAvailableVoiceConnectorRegions: {
            http: {
                method: "GET",
                requestUri: "/voice-connector-regions",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorRegions: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListPhoneNumberOrders: {
            http: {
                method: "GET",
                requestUri: "/phone-number-orders",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrders: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers"
            },
            input: {
                type: "structure",
                members: {
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    ProductType: {
                        location: "querystring",
                        locationName: "product-type"
                    },
                    FilterName: {
                        location: "querystring",
                        locationName: "filter-name"
                    },
                    FilterValue: {
                        location: "querystring",
                        locationName: "filter-value"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumbers: {
                        type: "list",
                        member: {
                            shape: "S3h"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProxySessions: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySessions: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSipMediaApplications: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplications: {
                        type: "list",
                        member: {
                            shape: "S1q"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSipRules: {
            http: {
                method: "GET",
                requestUri: "/sip-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SipMediaApplicationId: {
                        location: "querystring",
                        locationName: "sip-media-application"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRules: {
                        type: "list",
                        member: {
                            shape: "S24"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSupportedPhoneNumberCountries: {
            http: {
                method: "GET",
                requestUri: "/phone-number-countries",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ProductType" ],
                members: {
                    ProductType: {
                        location: "querystring",
                        locationName: "product-type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberCountries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CountryCode: {},
                                SupportedPhoneNumberTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        shape: "S2m",
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1l"
                    }
                }
            }
        },
        ListVoiceConnectorGroups: {
            http: {
                method: "GET",
                requestUri: "/voice-connector-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroups: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVoiceConnectorTerminationCredentials: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Usernames: {
                        shape: "S36"
                    }
                }
            }
        },
        ListVoiceConnectors: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectors: {
                        type: "list",
                        member: {
                            shape: "S2a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVoiceProfileDomains: {
            http: {
                method: "GET",
                requestUri: "/voice-profile-domains",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfileDomains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VoiceProfileDomainId: {},
                                VoiceProfileDomainArn: {
                                    shape: "S2m"
                                },
                                Name: {},
                                Description: {},
                                CreatedTimestamp: {
                                    shape: "Sx"
                                },
                                UpdatedTimestamp: {
                                    shape: "Sx"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVoiceProfiles: {
            http: {
                method: "GET",
                requestUri: "/voice-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceProfileDomainId" ],
                members: {
                    VoiceProfileDomainId: {
                        location: "querystring",
                        locationName: "voice-profile-domain-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VoiceProfileId: {},
                                VoiceProfileArn: {
                                    shape: "S2m"
                                },
                                VoiceProfileDomainId: {},
                                CreatedTimestamp: {
                                    shape: "Sx"
                                },
                                UpdatedTimestamp: {
                                    shape: "Sx"
                                },
                                ExpirationTimestamp: {
                                    shape: "Sx"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutSipMediaApplicationAlexaSkillConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/alexa-skill-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    SipMediaApplicationAlexaSkillConfiguration: {
                        shape: "S3z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationAlexaSkillConfiguration: {
                        shape: "S3z"
                    }
                }
            }
        },
        PutSipMediaApplicationLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S45"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S45"
                    }
                }
            }
        },
        PutVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "EmergencyCallingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    EmergencyCallingConfiguration: {
                        shape: "S4k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmergencyCallingConfiguration: {
                        shape: "S4k"
                    }
                }
            }
        },
        PutVoiceConnectorLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "LoggingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    LoggingConfiguration: {
                        shape: "S4r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S4r"
                    }
                }
            }
        },
        PutVoiceConnectorOrigination: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Origination" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Origination: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origination: {
                        shape: "S4u"
                    }
                }
            }
        },
        PutVoiceConnectorProxy: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy"
            },
            input: {
                type: "structure",
                required: [ "DefaultSessionExpiryMinutes", "PhoneNumberPoolCountries", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    DefaultSessionExpiryMinutes: {
                        type: "integer"
                    },
                    PhoneNumberPoolCountries: {
                        type: "list",
                        member: {}
                    },
                    FallBackPhoneNumber: {
                        shape: "S4"
                    },
                    Disabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proxy: {
                        shape: "S53"
                    }
                }
            }
        },
        PutVoiceConnectorStreamingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "StreamingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    StreamingConfiguration: {
                        shape: "S58"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfiguration: {
                        shape: "S58"
                    }
                }
            }
        },
        PutVoiceConnectorTermination: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Termination" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Termination: {
                        shape: "S5g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Termination: {
                        shape: "S5g"
                    }
                }
            }
        },
        PutVoiceConnectorTerminationCredentials: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=put",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Credentials: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Username: {
                                    shape: "S1t"
                                },
                                Password: {
                                    shape: "S1t"
                                }
                            }
                        }
                    }
                }
            }
        },
        RestorePhoneNumber: {
            http: {
                requestUri: "/phone-numbers/{phoneNumberId}?operation=restore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        shape: "S9",
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S3h"
                    }
                }
            }
        },
        SearchAvailablePhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/search?type=phone-numbers"
            },
            input: {
                type: "structure",
                members: {
                    AreaCode: {
                        location: "querystring",
                        locationName: "area-code"
                    },
                    City: {
                        location: "querystring",
                        locationName: "city"
                    },
                    Country: {
                        location: "querystring",
                        locationName: "country"
                    },
                    State: {
                        location: "querystring",
                        locationName: "state"
                    },
                    TollFreePrefix: {
                        location: "querystring",
                        locationName: "toll-free-prefix"
                    },
                    PhoneNumberType: {
                        location: "querystring",
                        locationName: "phone-number-type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    E164PhoneNumbers: {
                        shape: "S3"
                    },
                    NextToken: {}
                }
            }
        },
        StartSpeakerSearchTask: {
            http: {
                requestUri: "/voice-connectors/{VoiceConnectorId}/speaker-search-tasks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "TransactionId", "VoiceProfileDomainId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "VoiceConnectorId"
                    },
                    TransactionId: {},
                    VoiceProfileDomainId: {},
                    ClientRequestToken: {},
                    CallLeg: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SpeakerSearchTask: {
                        shape: "S4a"
                    }
                }
            }
        },
        StartVoiceToneAnalysisTask: {
            http: {
                requestUri: "/voice-connectors/{VoiceConnectorId}/voice-tone-analysis-tasks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "TransactionId", "LanguageCode" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "VoiceConnectorId"
                    },
                    TransactionId: {},
                    LanguageCode: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceToneAnalysisTask: {
                        shape: "S5t"
                    }
                }
            }
        },
        StopSpeakerSearchTask: {
            http: {
                requestUri: "/voice-connectors/{VoiceConnectorId}/speaker-search-tasks/{SpeakerSearchTaskId}?operation=stop",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "SpeakerSearchTaskId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "VoiceConnectorId"
                    },
                    SpeakerSearchTaskId: {
                        location: "uri",
                        locationName: "SpeakerSearchTaskId"
                    }
                }
            }
        },
        StopVoiceToneAnalysisTask: {
            http: {
                requestUri: "/voice-connectors/{VoiceConnectorId}/voice-tone-analysis-tasks/{VoiceToneAnalysisTaskId}?operation=stop",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "VoiceToneAnalysisTaskId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "VoiceConnectorId"
                    },
                    VoiceToneAnalysisTaskId: {
                        location: "uri",
                        locationName: "VoiceToneAnalysisTaskId"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {
                        shape: "S2m"
                    },
                    Tags: {
                        shape: "S1l"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {
                        shape: "S2m"
                    },
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "S1n"
                        }
                    }
                }
            }
        },
        UpdateGlobalSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S3e"
                    }
                }
            }
        },
        UpdatePhoneNumber: {
            http: {
                requestUri: "/phone-numbers/{phoneNumberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        shape: "S9",
                        location: "uri",
                        locationName: "phoneNumberId"
                    },
                    ProductType: {},
                    CallingName: {
                        shape: "Sl"
                    },
                    Name: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S3h"
                    }
                }
            }
        },
        UpdatePhoneNumberSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings/phone-number",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "CallingName" ],
                members: {
                    CallingName: {
                        shape: "Sl"
                    }
                }
            }
        },
        UpdateProxySession: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Capabilities", "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    },
                    Capabilities: {
                        shape: "S13"
                    },
                    ExpiryMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S1b"
                    }
                }
            }
        },
        UpdateSipMediaApplication: {
            http: {
                method: "PUT",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    Name: {},
                    Endpoints: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateSipMediaApplicationCall: {
            http: {
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/calls/{transactionId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId", "TransactionId", "Arguments" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    TransactionId: {
                        location: "uri",
                        locationName: "transactionId"
                    },
                    Arguments: {
                        type: "map",
                        key: {
                            shape: "S1t"
                        },
                        value: {
                            shape: "S1t"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationCall: {
                        shape: "S1w"
                    }
                }
            }
        },
        UpdateSipRule: {
            http: {
                method: "PUT",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "SipRuleId", "Name" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    },
                    Name: {},
                    Disabled: {
                        type: "boolean"
                    },
                    TargetApplications: {
                        shape: "S20"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S24"
                    }
                }
            }
        },
        UpdateVoiceConnector: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Name", "RequireEncryption" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Name: {},
                    RequireEncryption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S2a"
                    }
                }
            }
        },
        UpdateVoiceConnectorGroup: {
            http: {
                method: "PUT",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "Name", "VoiceConnectorItems" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    Name: {},
                    VoiceConnectorItems: {
                        shape: "S2d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S2h"
                    }
                }
            }
        },
        UpdateVoiceProfile: {
            http: {
                method: "PUT",
                requestUri: "/voice-profiles/{VoiceProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceProfileId", "SpeakerSearchTaskId" ],
                members: {
                    VoiceProfileId: {
                        location: "uri",
                        locationName: "VoiceProfileId"
                    },
                    SpeakerSearchTaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfile: {
                        shape: "S2l"
                    }
                }
            }
        },
        UpdateVoiceProfileDomain: {
            http: {
                method: "PUT",
                requestUri: "/voice-profile-domains/{VoiceProfileDomainId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceProfileDomainId" ],
                members: {
                    VoiceProfileDomainId: {
                        location: "uri",
                        locationName: "VoiceProfileDomainId"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceProfileDomain: {
                        shape: "S2t"
                    }
                }
            }
        },
        ValidateE911Address: {
            http: {
                requestUri: "/emergency-calling/address",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "StreetNumber", "StreetInfo", "City", "State", "Country", "PostalCode" ],
                members: {
                    AwsAccountId: {},
                    StreetNumber: {
                        shape: "S9"
                    },
                    StreetInfo: {
                        shape: "S9"
                    },
                    City: {
                        shape: "S9"
                    },
                    State: {
                        shape: "S9"
                    },
                    Country: {
                        shape: "S9"
                    },
                    PostalCode: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ValidationResult: {
                        type: "integer"
                    },
                    AddressExternalId: {},
                    Address: {
                        type: "structure",
                        members: {
                            streetName: {
                                shape: "S9"
                            },
                            streetSuffix: {
                                shape: "S9"
                            },
                            postDirectional: {
                                shape: "S9"
                            },
                            preDirectional: {
                                shape: "S9"
                            },
                            streetNumber: {
                                shape: "S9"
                            },
                            city: {
                                shape: "S9"
                            },
                            state: {
                                shape: "S9"
                            },
                            postalCode: {
                                shape: "S9"
                            },
                            postalCodePlus4: {
                                shape: "S9"
                            },
                            country: {
                                shape: "S9"
                            }
                        }
                    },
                    CandidateAddressList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                streetInfo: {
                                    shape: "S9"
                                },
                                streetNumber: {
                                    shape: "S9"
                                },
                                city: {
                                    shape: "S9"
                                },
                                state: {
                                    shape: "S9"
                                },
                                postalCode: {
                                    shape: "S9"
                                },
                                postalCodePlus4: {
                                    shape: "S9"
                                },
                                country: {
                                    shape: "S9"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                shape: "S4"
            }
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PhoneNumberId: {
                        shape: "S9"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "string",
            sensitive: true
        },
        Sq: {
            type: "structure",
            members: {
                PhoneNumberOrderId: {},
                ProductType: {},
                Status: {},
                OrderType: {},
                OrderedPhoneNumbers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            E164PhoneNumber: {
                                shape: "S4"
                            },
                            Status: {}
                        }
                    }
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                }
            }
        },
        Sx: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S13: {
            type: "list",
            member: {}
        },
        S17: {
            type: "structure",
            required: [ "Country", "AreaCode" ],
            members: {
                Country: {},
                AreaCode: {}
            }
        },
        S1b: {
            type: "structure",
            members: {
                VoiceConnectorId: {},
                ProxySessionId: {},
                Name: {},
                Status: {},
                ExpiryMinutes: {
                    type: "integer"
                },
                Capabilities: {
                    shape: "S13"
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                EndedTimestamp: {
                    shape: "Sx"
                },
                Participants: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PhoneNumber: {
                                shape: "S4"
                            },
                            ProxyPhoneNumber: {
                                shape: "S4"
                            }
                        }
                    }
                },
                NumberSelectionBehavior: {},
                GeoMatchLevel: {},
                GeoMatchParams: {
                    shape: "S17"
                }
            }
        },
        S1i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LambdaArn: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "S1n"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1n: {
            type: "string",
            sensitive: true
        },
        S1q: {
            type: "structure",
            members: {
                SipMediaApplicationId: {},
                AwsRegion: {},
                Name: {},
                Endpoints: {
                    shape: "S1i"
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                SipMediaApplicationArn: {}
            }
        },
        S1t: {
            type: "string",
            sensitive: true
        },
        S1w: {
            type: "structure",
            members: {
                TransactionId: {}
            }
        },
        S20: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SipMediaApplicationId: {},
                    Priority: {
                        type: "integer"
                    },
                    AwsRegion: {}
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                SipRuleId: {},
                Name: {},
                Disabled: {
                    type: "boolean"
                },
                TriggerType: {},
                TriggerValue: {},
                TargetApplications: {
                    shape: "S20"
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                VoiceConnectorId: {},
                AwsRegion: {},
                Name: {},
                OutboundHostName: {},
                RequireEncryption: {
                    type: "boolean"
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                VoiceConnectorArn: {}
            }
        },
        S2d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VoiceConnectorId", "Priority" ],
                members: {
                    VoiceConnectorId: {},
                    Priority: {
                        type: "integer"
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                VoiceConnectorGroupId: {},
                Name: {},
                VoiceConnectorItems: {
                    shape: "S2d"
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                VoiceConnectorGroupArn: {}
            }
        },
        S2l: {
            type: "structure",
            members: {
                VoiceProfileId: {},
                VoiceProfileArn: {
                    shape: "S2m"
                },
                VoiceProfileDomainId: {},
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                ExpirationTimestamp: {
                    shape: "Sx"
                }
            }
        },
        S2m: {
            type: "string",
            sensitive: true
        },
        S2q: {
            type: "structure",
            required: [ "KmsKeyArn" ],
            members: {
                KmsKeyArn: {
                    shape: "S2m"
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                VoiceProfileDomainId: {},
                VoiceProfileDomainArn: {
                    shape: "S2m"
                },
                Name: {},
                Description: {},
                ServerSideEncryptionConfiguration: {
                    shape: "S2q"
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                }
            }
        },
        S36: {
            type: "list",
            member: {
                shape: "S1t"
            }
        },
        S3e: {
            type: "structure",
            members: {
                CdrBucket: {}
            }
        },
        S3h: {
            type: "structure",
            members: {
                PhoneNumberId: {
                    shape: "S9"
                },
                E164PhoneNumber: {
                    shape: "S4"
                },
                Country: {},
                Type: {},
                ProductType: {},
                Status: {},
                Capabilities: {
                    type: "structure",
                    members: {
                        InboundCall: {
                            type: "boolean"
                        },
                        OutboundCall: {
                            type: "boolean"
                        },
                        InboundSMS: {
                            type: "boolean"
                        },
                        OutboundSMS: {
                            type: "boolean"
                        },
                        InboundMMS: {
                            type: "boolean"
                        },
                        OutboundMMS: {
                            type: "boolean"
                        }
                    }
                },
                Associations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Value: {},
                            Name: {},
                            AssociatedTimestamp: {
                                shape: "Sx"
                            }
                        }
                    }
                },
                CallingName: {
                    shape: "Sl"
                },
                CallingNameStatus: {},
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                DeletionTimestamp: {
                    shape: "Sx"
                },
                OrderId: {},
                Name: {
                    shape: "Sm"
                }
            }
        },
        S3z: {
            type: "structure",
            required: [ "AlexaSkillStatus", "AlexaSkillIds" ],
            members: {
                AlexaSkillStatus: {},
                AlexaSkillIds: {
                    type: "list",
                    member: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S45: {
            type: "structure",
            members: {
                EnableSipMediaApplicationMessageLogs: {
                    type: "boolean"
                }
            }
        },
        S4a: {
            type: "structure",
            members: {
                SpeakerSearchTaskId: {},
                SpeakerSearchTaskStatus: {},
                CallDetails: {
                    shape: "S4b"
                },
                SpeakerSearchDetails: {
                    type: "structure",
                    members: {
                        Results: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    ConfidenceScore: {
                                        type: "float"
                                    },
                                    VoiceProfileId: {}
                                }
                            }
                        },
                        VoiceprintGenerationStatus: {}
                    }
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                StartedTimestamp: {
                    shape: "Sx"
                },
                StatusMessage: {}
            }
        },
        S4b: {
            type: "structure",
            members: {
                VoiceConnectorId: {},
                TransactionId: {},
                IsCaller: {
                    type: "boolean"
                }
            }
        },
        S4k: {
            type: "structure",
            members: {
                DNIS: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "EmergencyPhoneNumber", "CallingCountry" ],
                        members: {
                            EmergencyPhoneNumber: {
                                shape: "S4"
                            },
                            TestPhoneNumber: {
                                shape: "S4"
                            },
                            CallingCountry: {}
                        }
                    }
                }
            }
        },
        S4r: {
            type: "structure",
            members: {
                EnableSIPLogs: {
                    type: "boolean"
                },
                EnableMediaMetricLogs: {
                    type: "boolean"
                }
            }
        },
        S4u: {
            type: "structure",
            members: {
                Routes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Host: {},
                            Port: {
                                type: "integer"
                            },
                            Protocol: {},
                            Priority: {
                                type: "integer"
                            },
                            Weight: {
                                type: "integer"
                            }
                        }
                    }
                },
                Disabled: {
                    type: "boolean"
                }
            }
        },
        S53: {
            type: "structure",
            members: {
                DefaultSessionExpiryMinutes: {
                    type: "integer"
                },
                Disabled: {
                    type: "boolean"
                },
                FallBackPhoneNumber: {
                    shape: "S4"
                },
                PhoneNumberCountries: {
                    shape: "S55"
                }
            }
        },
        S55: {
            type: "list",
            member: {}
        },
        S58: {
            type: "structure",
            required: [ "DataRetentionInHours", "Disabled" ],
            members: {
                DataRetentionInHours: {
                    type: "integer"
                },
                Disabled: {
                    type: "boolean"
                },
                StreamingNotificationTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            NotificationTarget: {}
                        }
                    }
                },
                MediaInsightsConfiguration: {
                    type: "structure",
                    members: {
                        Disabled: {
                            type: "boolean"
                        },
                        ConfigurationArn: {
                            shape: "S2m"
                        }
                    }
                }
            }
        },
        S5g: {
            type: "structure",
            members: {
                CpsLimit: {
                    type: "integer"
                },
                DefaultPhoneNumber: {
                    shape: "S4"
                },
                CallingRegions: {
                    type: "list",
                    member: {}
                },
                CidrAllowedList: {
                    shape: "S55"
                },
                Disabled: {
                    type: "boolean"
                }
            }
        },
        S5t: {
            type: "structure",
            members: {
                VoiceToneAnalysisTaskId: {},
                VoiceToneAnalysisTaskStatus: {},
                CallDetails: {
                    shape: "S4b"
                },
                CreatedTimestamp: {
                    shape: "Sx"
                },
                UpdatedTimestamp: {
                    shape: "Sx"
                },
                StartedTimestamp: {
                    shape: "Sx"
                },
                StatusMessage: {}
            }
        }
    },
    paginators: {
        ListPhoneNumberOrders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPhoneNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProxySessions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSipMediaApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SipMediaApplications"
        },
        ListSipRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SipRules"
        },
        ListVoiceConnectorGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVoiceConnectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVoiceProfileDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVoiceProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchAvailablePhoneNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["iotroborunner"] = {};

AWS.IoTRoboRunner = AWS.Service.defineService("iotroborunner", [ "2018-05-10" ]);

AWS.apiLoader.services["iotroborunner"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "iotroborunner",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS IoT RoboRunner",
        serviceId: "IoT RoboRunner",
        signatureVersion: "v4",
        signingName: "iotroborunner",
        uid: "iot-roborunner-2018-05-10"
    },
    operations: {
        CreateDestination: {
            http: {
                requestUri: "/createDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "site" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    site: {},
                    state: {},
                    additionalFixedProperties: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "createdAt", "updatedAt", "state" ],
                members: {
                    arn: {},
                    id: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    state: {}
                }
            },
            idempotent: true
        },
        CreateSite: {
            http: {
                requestUri: "/createSite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "countryCode" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    countryCode: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "createdAt", "updatedAt" ],
                members: {
                    arn: {},
                    id: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateWorker: {
            http: {
                requestUri: "/createWorker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "fleet" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    fleet: {},
                    additionalTransientProperties: {},
                    additionalFixedProperties: {},
                    vendorProperties: {
                        shape: "Sm"
                    },
                    position: {
                        shape: "Sr"
                    },
                    orientation: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "createdAt", "updatedAt", "site" ],
                members: {
                    arn: {},
                    id: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    site: {}
                }
            },
            idempotent: true
        },
        CreateWorkerFleet: {
            http: {
                requestUri: "/createWorkerFleet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "site" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    site: {},
                    additionalFixedProperties: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "createdAt", "updatedAt" ],
                members: {
                    arn: {},
                    id: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DeleteDestination: {
            http: {
                requestUri: "/deleteDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSite: {
            http: {
                requestUri: "/deleteSite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorker: {
            http: {
                requestUri: "/deleteWorker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkerFleet: {
            http: {
                requestUri: "/deleteWorkerFleet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDestination: {
            http: {
                method: "GET",
                requestUri: "/getDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "querystring",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "name", "site", "createdAt", "updatedAt", "state" ],
                members: {
                    arn: {},
                    id: {},
                    name: {},
                    site: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    state: {},
                    additionalFixedProperties: {}
                }
            }
        },
        GetSite: {
            http: {
                method: "GET",
                requestUri: "/getSite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "querystring",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "name", "countryCode", "createdAt", "updatedAt" ],
                members: {
                    arn: {},
                    id: {},
                    name: {},
                    countryCode: {},
                    description: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetWorker: {
            http: {
                method: "GET",
                requestUri: "/getWorker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "querystring",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "fleet", "site", "createdAt", "updatedAt", "name" ],
                members: {
                    arn: {},
                    id: {},
                    fleet: {},
                    site: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    name: {},
                    additionalTransientProperties: {},
                    additionalFixedProperties: {},
                    vendorProperties: {
                        shape: "Sm"
                    },
                    position: {
                        shape: "Sr"
                    },
                    orientation: {
                        shape: "Su"
                    }
                }
            }
        },
        GetWorkerFleet: {
            http: {
                method: "GET",
                requestUri: "/getWorkerFleet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "querystring",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "name", "site", "createdAt", "updatedAt" ],
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    site: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    additionalFixedProperties: {}
                }
            }
        },
        ListDestinations: {
            http: {
                method: "GET",
                requestUri: "/listDestinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "site" ],
                members: {
                    site: {
                        location: "querystring",
                        locationName: "site"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    state: {
                        location: "querystring",
                        locationName: "state"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    destinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "name", "site", "createdAt", "updatedAt", "state" ],
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                site: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                state: {},
                                additionalFixedProperties: {}
                            }
                        }
                    }
                }
            }
        },
        ListSites: {
            http: {
                method: "GET",
                requestUri: "/listSites",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    sites: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name", "countryCode", "createdAt" ],
                            members: {
                                arn: {},
                                name: {},
                                countryCode: {},
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWorkerFleets: {
            http: {
                method: "GET",
                requestUri: "/listWorkerFleets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "site" ],
                members: {
                    site: {
                        location: "querystring",
                        locationName: "site"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workerFleets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "name", "site", "createdAt", "updatedAt" ],
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                site: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                additionalFixedProperties: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkers: {
            http: {
                method: "GET",
                requestUri: "/listWorkers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "site" ],
                members: {
                    site: {
                        location: "querystring",
                        locationName: "site"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    fleet: {
                        location: "querystring",
                        locationName: "fleet"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "fleet", "createdAt", "updatedAt", "name", "site" ],
                            members: {
                                arn: {},
                                id: {},
                                fleet: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                site: {},
                                additionalTransientProperties: {},
                                additionalFixedProperties: {},
                                vendorProperties: {
                                    shape: "Sm"
                                },
                                position: {
                                    shape: "Sr"
                                },
                                orientation: {
                                    shape: "Su"
                                }
                            }
                        }
                    }
                }
            }
        },
        UpdateDestination: {
            http: {
                requestUri: "/updateDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    name: {},
                    state: {},
                    additionalFixedProperties: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "name", "updatedAt", "state" ],
                members: {
                    arn: {},
                    id: {},
                    name: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    state: {},
                    additionalFixedProperties: {}
                }
            }
        },
        UpdateSite: {
            http: {
                requestUri: "/updateSite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    name: {},
                    countryCode: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "name", "updatedAt" ],
                members: {
                    arn: {},
                    id: {},
                    name: {},
                    countryCode: {},
                    description: {},
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateWorker: {
            http: {
                requestUri: "/updateWorker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    name: {},
                    additionalTransientProperties: {},
                    additionalFixedProperties: {},
                    vendorProperties: {
                        shape: "Sm"
                    },
                    position: {
                        shape: "Sr"
                    },
                    orientation: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "fleet", "updatedAt", "name" ],
                members: {
                    arn: {},
                    id: {},
                    fleet: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    name: {},
                    additionalTransientProperties: {},
                    additionalFixedProperties: {},
                    orientation: {
                        shape: "Su"
                    },
                    vendorProperties: {
                        shape: "Sm"
                    },
                    position: {
                        shape: "Sr"
                    }
                }
            }
        },
        UpdateWorkerFleet: {
            http: {
                requestUri: "/updateWorkerFleet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    name: {},
                    additionalFixedProperties: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "name", "updatedAt" ],
                members: {
                    arn: {},
                    id: {},
                    name: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    additionalFixedProperties: {}
                }
            }
        }
    },
    shapes: {
        Sm: {
            type: "structure",
            required: [ "vendorWorkerId" ],
            members: {
                vendorWorkerId: {},
                vendorWorkerIpAddress: {},
                vendorAdditionalTransientProperties: {},
                vendorAdditionalFixedProperties: {}
            }
        },
        Sr: {
            type: "structure",
            members: {
                cartesianCoordinates: {
                    type: "structure",
                    required: [ "x", "y" ],
                    members: {
                        x: {
                            type: "double"
                        },
                        y: {
                            type: "double"
                        },
                        z: {
                            type: "double"
                        }
                    }
                }
            },
            union: true
        },
        Su: {
            type: "structure",
            members: {
                degrees: {
                    type: "double"
                }
            },
            union: true
        }
    },
    paginators: {
        ListDestinations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "destinations"
        },
        ListSites: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sites"
        },
        ListWorkerFleets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workerFleets"
        },
        ListWorkers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workers"
        }
    }
};

AWS.apiLoader.services["ssmsap"] = {};

AWS.SsmSap = AWS.Service.defineService("ssmsap", [ "2018-05-10" ]);

AWS.apiLoader.services["ssmsap"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "ssm-sap",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SsmSap",
        serviceFullName: "AWS Systems Manager for SAP",
        serviceId: "Ssm Sap",
        signatureVersion: "v4",
        signingName: "ssm-sap",
        uid: "ssm-sap-2018-05-10"
    },
    operations: {
        DeleteResourcePermission: {
            http: {
                requestUri: "/delete-resource-permission",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ActionType: {},
                    SourceResourceArn: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        DeregisterApplication: {
            http: {
                requestUri: "/deregister-application",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetApplication: {
            http: {
                requestUri: "/get-application",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    ApplicationArn: {},
                    AppRegistryArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Application: {
                        shape: "Sd"
                    },
                    Tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetComponent: {
            http: {
                requestUri: "/get-component",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ComponentId" ],
                members: {
                    ApplicationId: {},
                    ComponentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Component: {
                        type: "structure",
                        members: {
                            ComponentId: {},
                            Sid: {},
                            SystemNumber: {},
                            ParentComponent: {},
                            ChildComponents: {
                                shape: "Sh"
                            },
                            ApplicationId: {},
                            ComponentType: {},
                            Status: {},
                            SapHostname: {},
                            SapFeature: {},
                            SapKernelVersion: {},
                            HdbVersion: {},
                            Resilience: {
                                type: "structure",
                                members: {
                                    HsrTier: {},
                                    HsrReplicationMode: {},
                                    HsrOperationMode: {},
                                    ClusterStatus: {},
                                    EnqueueReplication: {
                                        type: "boolean"
                                    }
                                }
                            },
                            AssociatedHost: {
                                type: "structure",
                                members: {
                                    Hostname: {},
                                    Ec2InstanceId: {},
                                    IpAddresses: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                IpAddress: {},
                                                Primary: {
                                                    type: "boolean"
                                                },
                                                AllocationType: {}
                                            }
                                        }
                                    },
                                    OsVersion: {}
                                }
                            },
                            Databases: {
                                type: "list",
                                member: {}
                            },
                            Hosts: {
                                deprecated: true,
                                deprecatedMessage: "This shape is no longer used. Please use AssociatedHost.",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        HostName: {},
                                        HostIp: {},
                                        EC2InstanceId: {},
                                        InstanceId: {},
                                        HostRole: {},
                                        OsVersion: {}
                                    }
                                }
                            },
                            PrimaryHost: {
                                deprecated: true,
                                deprecatedMessage: "This shape is no longer used. Please use AssociatedHost."
                            },
                            DatabaseConnection: {
                                type: "structure",
                                members: {
                                    DatabaseConnectionMethod: {},
                                    DatabaseArn: {},
                                    ConnectionIp: {}
                                }
                            },
                            LastUpdated: {
                                type: "timestamp"
                            },
                            Arn: {}
                        }
                    },
                    Tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetDatabase: {
            http: {
                requestUri: "/get-database",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    ComponentId: {},
                    DatabaseId: {},
                    DatabaseArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            ComponentId: {},
                            Credentials: {
                                shape: "S1d"
                            },
                            DatabaseId: {},
                            DatabaseName: {},
                            DatabaseType: {},
                            Arn: {},
                            Status: {},
                            PrimaryHost: {},
                            SQLPort: {
                                type: "integer"
                            },
                            LastUpdated: {
                                type: "timestamp"
                            }
                        }
                    },
                    Tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetOperation: {
            http: {
                requestUri: "/get-operation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OperationId" ],
                members: {
                    OperationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Operation: {
                        shape: "S1o"
                    }
                }
            }
        },
        GetResourcePermission: {
            http: {
                requestUri: "/get-resource-permission",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ActionType: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        ListApplications: {
            http: {
                requestUri: "/list-applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                DiscoveryStatus: {},
                                Type: {},
                                Arn: {},
                                Tags: {
                                    shape: "Sk"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListComponents: {
            http: {
                requestUri: "/list-components",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Components: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                ComponentId: {},
                                ComponentType: {},
                                Tags: {
                                    shape: "Sk"
                                },
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDatabases: {
            http: {
                requestUri: "/list-databases",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    ComponentId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Databases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                ComponentId: {},
                                DatabaseId: {},
                                DatabaseType: {},
                                Arn: {},
                                Tags: {
                                    shape: "Sk"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOperations: {
            http: {
                requestUri: "/list-operations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Operations: {
                        type: "list",
                        member: {
                            shape: "S1o"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        PutResourcePermission: {
            http: {
                requestUri: "/put-resource-permission",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ActionType", "SourceResourceArn", "ResourceArn" ],
                members: {
                    ActionType: {},
                    SourceResourceArn: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        RegisterApplication: {
            http: {
                requestUri: "/register-application",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ApplicationType", "Instances" ],
                members: {
                    ApplicationId: {},
                    ApplicationType: {},
                    Instances: {
                        type: "list",
                        member: {}
                    },
                    SapInstanceNumber: {},
                    Sid: {},
                    Tags: {
                        shape: "Sk"
                    },
                    Credentials: {
                        shape: "S1d"
                    },
                    DatabaseArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Application: {
                        shape: "Sd"
                    },
                    OperationId: {}
                }
            }
        },
        StartApplicationRefresh: {
            http: {
                requestUri: "/start-application-refresh",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateApplicationSettings: {
            http: {
                requestUri: "/update-application-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {},
                    CredentialsToAddOrUpdate: {
                        shape: "S1d"
                    },
                    CredentialsToRemove: {
                        shape: "S1d"
                    },
                    Backint: {
                        type: "structure",
                        required: [ "BackintMode", "EnsureNoBackupInProcess" ],
                        members: {
                            BackintMode: {},
                            EnsureNoBackupInProcess: {
                                type: "boolean"
                            }
                        }
                    },
                    DatabaseArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {},
                    OperationIds: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "structure",
            members: {
                Id: {},
                Type: {},
                Arn: {},
                AppRegistryArn: {},
                Status: {},
                DiscoveryStatus: {},
                Components: {
                    shape: "Sh"
                },
                LastUpdated: {
                    type: "timestamp"
                },
                StatusMessage: {}
            }
        },
        Sh: {
            type: "list",
            member: {}
        },
        Sk: {
            type: "map",
            key: {},
            value: {}
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DatabaseName", "CredentialType", "SecretId" ],
                members: {
                    DatabaseName: {},
                    CredentialType: {},
                    SecretId: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                Id: {},
                Type: {},
                Status: {},
                StatusMessage: {},
                Properties: {
                    type: "map",
                    key: {},
                    value: {}
                },
                ResourceType: {},
                ResourceId: {},
                ResourceArn: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value", "Operator" ],
                members: {
                    Name: {},
                    Value: {},
                    Operator: {}
                }
            }
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Applications"
        },
        ListComponents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Components"
        },
        ListDatabases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Databases"
        },
        ListOperations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Operations"
        }
    }
};

AWS.apiLoader.services["oam"] = {};

AWS.OAM = AWS.Service.defineService("oam", [ "2022-06-10" ]);

AWS.apiLoader.services["oam"]["2022-06-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-06-10",
        endpointPrefix: "oam",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "CloudWatch Observability Access Manager",
        serviceId: "OAM",
        signatureVersion: "v4",
        signingName: "oam",
        uid: "oam-2022-06-10"
    },
    operations: {
        CreateLink: {
            http: {
                requestUri: "/CreateLink",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "LabelTemplate", "ResourceTypes", "SinkIdentifier" ],
                members: {
                    LabelTemplate: {},
                    ResourceTypes: {
                        shape: "S3"
                    },
                    SinkIdentifier: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Label: {},
                    LabelTemplate: {},
                    ResourceTypes: {
                        shape: "Sb"
                    },
                    SinkArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateSink: {
            http: {
                requestUri: "/CreateSink",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        DeleteLink: {
            http: {
                requestUri: "/DeleteLink",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSink: {
            http: {
                requestUri: "/DeleteSink",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetLink: {
            http: {
                requestUri: "/GetLink",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Label: {},
                    LabelTemplate: {},
                    ResourceTypes: {
                        shape: "Sb"
                    },
                    SinkArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetSink: {
            http: {
                requestUri: "/GetSink",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetSinkPolicy: {
            http: {
                requestUri: "/GetSinkPolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SinkIdentifier" ],
                members: {
                    SinkIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SinkArn: {},
                    SinkId: {},
                    Policy: {}
                }
            }
        },
        ListAttachedLinks: {
            http: {
                requestUri: "/ListAttachedLinks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SinkIdentifier" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SinkIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Items" ],
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Label: {},
                                LinkArn: {},
                                ResourceTypes: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLinks: {
            http: {
                requestUri: "/ListLinks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Items" ],
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Label: {},
                                ResourceTypes: {
                                    shape: "Sb"
                                },
                                SinkArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSinks: {
            http: {
                requestUri: "/ListSinks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Items" ],
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        PutSinkPolicy: {
            http: {
                requestUri: "/PutSinkPolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SinkIdentifier", "Policy" ],
                members: {
                    SinkIdentifier: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SinkArn: {},
                    SinkId: {},
                    Policy: {}
                }
            }
        },
        TagResource: {
            http: {
                method: "PUT",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLink: {
            http: {
                requestUri: "/UpdateLink",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier", "ResourceTypes" ],
                members: {
                    Identifier: {},
                    ResourceTypes: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Label: {},
                    LabelTemplate: {},
                    ResourceTypes: {
                        shape: "Sb"
                    },
                    SinkArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "map",
            key: {},
            value: {}
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListAttachedLinks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListLinks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListSinks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["arczonalshift"] = {};

AWS.ARCZonalShift = AWS.Service.defineService("arczonalshift", [ "2022-10-30" ]);

AWS.apiLoader.services["arczonalshift"]["2022-10-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-10-30",
        endpointPrefix: "arc-zonal-shift",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS ARC - Zonal Shift",
        serviceId: "ARC Zonal Shift",
        signatureVersion: "v4",
        signingName: "arc-zonal-shift",
        uid: "arc-zonal-shift-2022-10-30"
    },
    operations: {
        CancelZonalShift: {
            http: {
                method: "DELETE",
                requestUri: "/zonalshifts/{zonalShiftId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "zonalShiftId" ],
                members: {
                    zonalShiftId: {
                        location: "uri",
                        locationName: "zonalShiftId"
                    }
                }
            },
            output: {
                shape: "S3"
            }
        },
        CreatePracticeRunConfiguration: {
            http: {
                requestUri: "/configuration",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "outcomeAlarms", "resourceIdentifier" ],
                members: {
                    blockedDates: {
                        shape: "Sb"
                    },
                    blockedWindows: {
                        shape: "Sd"
                    },
                    blockingAlarms: {
                        shape: "Sf"
                    },
                    outcomeAlarms: {
                        shape: "Sf"
                    },
                    resourceIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "name", "practiceRunConfiguration", "zonalAutoshiftStatus" ],
                members: {
                    arn: {},
                    name: {},
                    practiceRunConfiguration: {
                        shape: "Sl"
                    },
                    zonalAutoshiftStatus: {}
                }
            }
        },
        DeletePracticeRunConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/configuration/{resourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceIdentifier" ],
                members: {
                    resourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "name", "zonalAutoshiftStatus" ],
                members: {
                    arn: {},
                    name: {},
                    zonalAutoshiftStatus: {}
                }
            },
            idempotent: true
        },
        GetManagedResource: {
            http: {
                method: "GET",
                requestUri: "/managedresources/{resourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceIdentifier" ],
                members: {
                    resourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appliedWeights", "zonalShifts" ],
                members: {
                    appliedWeights: {
                        shape: "Sr"
                    },
                    arn: {},
                    autoshifts: {
                        shape: "St"
                    },
                    name: {},
                    practiceRunConfiguration: {
                        shape: "Sl"
                    },
                    zonalAutoshiftStatus: {},
                    zonalShifts: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListAutoshifts: {
            http: {
                method: "GET",
                requestUri: "/autoshifts",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "awayFrom", "endTime", "startTime", "status" ],
                            members: {
                                awayFrom: {},
                                endTime: {
                                    type: "timestamp"
                                },
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListManagedResources: {
            http: {
                method: "GET",
                requestUri: "/managedresources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "availabilityZones" ],
                            members: {
                                appliedWeights: {
                                    shape: "Sr"
                                },
                                arn: {},
                                autoshifts: {
                                    shape: "St"
                                },
                                availabilityZones: {
                                    type: "list",
                                    member: {}
                                },
                                name: {},
                                practiceRunStatus: {},
                                zonalAutoshiftStatus: {},
                                zonalShifts: {
                                    shape: "Sw"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListZonalShifts: {
            http: {
                method: "GET",
                requestUri: "/zonalshifts",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    resourceIdentifier: {
                        location: "querystring",
                        locationName: "resourceIdentifier"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "awayFrom", "comment", "expiryTime", "resourceIdentifier", "startTime", "status", "zonalShiftId" ],
                            members: {
                                awayFrom: {},
                                comment: {},
                                expiryTime: {
                                    type: "timestamp"
                                },
                                practiceRunOutcome: {},
                                resourceIdentifier: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                zonalShiftId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartZonalShift: {
            http: {
                requestUri: "/zonalshifts",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "awayFrom", "comment", "expiresIn", "resourceIdentifier" ],
                members: {
                    awayFrom: {},
                    comment: {},
                    expiresIn: {},
                    resourceIdentifier: {}
                }
            },
            output: {
                shape: "S3"
            }
        },
        UpdatePracticeRunConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/configuration/{resourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceIdentifier" ],
                members: {
                    blockedDates: {
                        shape: "Sb"
                    },
                    blockedWindows: {
                        shape: "Sd"
                    },
                    blockingAlarms: {
                        shape: "Sf"
                    },
                    outcomeAlarms: {
                        shape: "Sf"
                    },
                    resourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "name", "practiceRunConfiguration", "zonalAutoshiftStatus" ],
                members: {
                    arn: {},
                    name: {},
                    practiceRunConfiguration: {
                        shape: "Sl"
                    },
                    zonalAutoshiftStatus: {}
                }
            }
        },
        UpdateZonalAutoshiftConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/managedresources/{resourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceIdentifier", "zonalAutoshiftStatus" ],
                members: {
                    resourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    },
                    zonalAutoshiftStatus: {}
                }
            },
            output: {
                type: "structure",
                required: [ "resourceIdentifier", "zonalAutoshiftStatus" ],
                members: {
                    resourceIdentifier: {},
                    zonalAutoshiftStatus: {}
                }
            },
            idempotent: true
        },
        UpdateZonalShift: {
            http: {
                method: "PATCH",
                requestUri: "/zonalshifts/{zonalShiftId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "zonalShiftId" ],
                members: {
                    comment: {},
                    expiresIn: {},
                    zonalShiftId: {
                        location: "uri",
                        locationName: "zonalShiftId"
                    }
                }
            },
            output: {
                shape: "S3"
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "awayFrom", "comment", "expiryTime", "resourceIdentifier", "startTime", "status", "zonalShiftId" ],
            members: {
                awayFrom: {},
                comment: {},
                expiryTime: {
                    type: "timestamp"
                },
                resourceIdentifier: {},
                startTime: {
                    type: "timestamp"
                },
                status: {},
                zonalShiftId: {}
            }
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "alarmIdentifier", "type" ],
                members: {
                    alarmIdentifier: {},
                    type: {}
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "outcomeAlarms" ],
            members: {
                blockedDates: {
                    shape: "Sb"
                },
                blockedWindows: {
                    shape: "Sd"
                },
                blockingAlarms: {
                    shape: "Sf"
                },
                outcomeAlarms: {
                    shape: "Sf"
                }
            }
        },
        Sr: {
            type: "map",
            key: {},
            value: {
                type: "float"
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "appliedStatus", "awayFrom", "startTime" ],
                members: {
                    appliedStatus: {},
                    awayFrom: {},
                    startTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "appliedStatus", "awayFrom", "comment", "expiryTime", "resourceIdentifier", "startTime", "zonalShiftId" ],
                members: {
                    appliedStatus: {},
                    awayFrom: {},
                    comment: {},
                    expiryTime: {
                        type: "timestamp"
                    },
                    practiceRunOutcome: {},
                    resourceIdentifier: {},
                    startTime: {
                        type: "timestamp"
                    },
                    zonalShiftId: {}
                }
            }
        }
    },
    paginators: {
        ListAutoshifts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListManagedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListZonalShifts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    }
};

AWS.apiLoader.services["omics"] = {};

AWS.Omics = AWS.Service.defineService("omics", [ "2022-11-28" ]);

AWS.apiLoader.services["omics"]["2022-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-11-28",
        endpointPrefix: "omics",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Omics",
        serviceId: "Omics",
        signatureVersion: "v4",
        signingName: "omics",
        uid: "omics-2022-11-28"
    },
    operations: {
        AbortMultipartReadSetUpload: {
            http: {
                method: "DELETE",
                requestUri: "/sequencestore/{sequenceStoreId}/upload/{uploadId}/abort",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "uploadId" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        AcceptShare: {
            http: {
                requestUri: "/share/{shareId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "shareId" ],
                members: {
                    shareId: {
                        location: "uri",
                        locationName: "shareId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        BatchDeleteReadSet: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/readset/batch/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ids", "sequenceStoreId" ],
                members: {
                    ids: {
                        type: "list",
                        member: {}
                    },
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "code", "message" ],
                            members: {
                                id: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            },
            idempotent: true
        },
        CancelAnnotationImportJob: {
            http: {
                method: "DELETE",
                requestUri: "/import/annotation/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "analytics-"
            },
            idempotent: true
        },
        CancelRun: {
            http: {
                requestUri: "/run/{id}/cancel",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        CancelVariantImportJob: {
            http: {
                method: "DELETE",
                requestUri: "/import/variant/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "analytics-"
            },
            idempotent: true
        },
        CompleteMultipartReadSetUpload: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/upload/{uploadId}/complete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "uploadId", "parts" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    parts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "partNumber", "partSource", "checksum" ],
                            members: {
                                partNumber: {
                                    type: "integer"
                                },
                                partSource: {},
                                checksum: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "readSetId" ],
                members: {
                    readSetId: {}
                }
            },
            endpoint: {
                hostPrefix: "storage-"
            }
        },
        CreateAnnotationStore: {
            http: {
                requestUri: "/annotationStore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "storeFormat" ],
                members: {
                    reference: {
                        shape: "St"
                    },
                    name: {},
                    description: {},
                    tags: {
                        shape: "Sx"
                    },
                    versionName: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    storeFormat: {},
                    storeOptions: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "status", "name", "versionName", "creationTime" ],
                members: {
                    id: {},
                    reference: {
                        shape: "St"
                    },
                    storeFormat: {},
                    storeOptions: {
                        shape: "S15"
                    },
                    status: {},
                    name: {},
                    versionName: {},
                    creationTime: {
                        shape: "S1h"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        CreateAnnotationStoreVersion: {
            http: {
                requestUri: "/annotationStore/{name}/version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "versionName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    versionName: {},
                    description: {},
                    versionOptions: {
                        shape: "S1j"
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "versionName", "storeId", "name", "status", "creationTime" ],
                members: {
                    id: {},
                    versionName: {},
                    storeId: {},
                    versionOptions: {
                        shape: "S1j"
                    },
                    name: {},
                    status: {},
                    creationTime: {
                        shape: "S1h"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        CreateMultipartReadSetUpload: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/upload",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "sourceFileType", "subjectId", "sampleId", "name" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    clientToken: {},
                    sourceFileType: {},
                    subjectId: {},
                    sampleId: {},
                    generatedFrom: {},
                    referenceArn: {},
                    name: {},
                    description: {},
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "sequenceStoreId", "uploadId", "sourceFileType", "subjectId", "sampleId", "referenceArn", "creationTime" ],
                members: {
                    sequenceStoreId: {},
                    uploadId: {},
                    sourceFileType: {},
                    subjectId: {},
                    sampleId: {},
                    generatedFrom: {},
                    referenceArn: {},
                    name: {},
                    description: {},
                    tags: {
                        shape: "Sx"
                    },
                    creationTime: {
                        shape: "S1x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        CreateReferenceStore: {
            http: {
                requestUri: "/referencestore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "creationTime" ],
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    creationTime: {
                        shape: "S1x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        CreateRunGroup: {
            http: {
                requestUri: "/runGroup",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "requestId" ],
                members: {
                    name: {},
                    maxCpus: {
                        type: "integer"
                    },
                    maxRuns: {
                        type: "integer"
                    },
                    maxDuration: {
                        type: "integer"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    requestId: {
                        idempotencyToken: true
                    },
                    maxGpus: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        CreateSequenceStore: {
            http: {
                requestUri: "/sequencestore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    clientToken: {},
                    fallbackLocation: {}
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "creationTime" ],
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    creationTime: {
                        shape: "S1x"
                    },
                    fallbackLocation: {}
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        CreateShare: {
            http: {
                requestUri: "/share",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "principalSubscriber" ],
                members: {
                    resourceArn: {},
                    principalSubscriber: {},
                    shareName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    shareId: {},
                    status: {},
                    shareName: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        CreateVariantStore: {
            http: {
                requestUri: "/variantStore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reference" ],
                members: {
                    reference: {
                        shape: "St"
                    },
                    name: {},
                    description: {},
                    tags: {
                        shape: "Sx"
                    },
                    sseConfig: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "status", "name", "creationTime" ],
                members: {
                    id: {},
                    reference: {
                        shape: "St"
                    },
                    status: {},
                    name: {},
                    creationTime: {
                        shape: "S1h"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        CreateWorkflow: {
            http: {
                requestUri: "/workflow",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "requestId" ],
                members: {
                    name: {},
                    description: {},
                    engine: {},
                    definitionZip: {
                        type: "blob"
                    },
                    definitionUri: {},
                    main: {},
                    parameterTemplate: {
                        shape: "S2w"
                    },
                    storageCapacity: {
                        type: "integer"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    requestId: {
                        idempotencyToken: true
                    },
                    accelerators: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    status: {},
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        DeleteAnnotationStore: {
            http: {
                method: "DELETE",
                requestUri: "/annotationStore/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            },
            idempotent: true
        },
        DeleteAnnotationStoreVersions: {
            http: {
                requestUri: "/annotationStore/{name}/versions/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "versions" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    versions: {
                        type: "list",
                        member: {}
                    },
                    force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "versionName", "message" ],
                            members: {
                                versionName: {},
                                message: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            },
            idempotent: true
        },
        DeleteReference: {
            http: {
                method: "DELETE",
                requestUri: "/referencestore/{referenceStoreId}/reference/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "referenceStoreId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    referenceStoreId: {
                        location: "uri",
                        locationName: "referenceStoreId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "control-storage-"
            },
            idempotent: true
        },
        DeleteReferenceStore: {
            http: {
                method: "DELETE",
                requestUri: "/referencestore/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "control-storage-"
            },
            idempotent: true
        },
        DeleteRun: {
            http: {
                method: "DELETE",
                requestUri: "/run/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            },
            idempotent: true
        },
        DeleteRunGroup: {
            http: {
                method: "DELETE",
                requestUri: "/runGroup/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            },
            idempotent: true
        },
        DeleteSequenceStore: {
            http: {
                method: "DELETE",
                requestUri: "/sequencestore/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "control-storage-"
            },
            idempotent: true
        },
        DeleteShare: {
            http: {
                method: "DELETE",
                requestUri: "/share/{shareId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "shareId" ],
                members: {
                    shareId: {
                        location: "uri",
                        locationName: "shareId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            },
            idempotent: true
        },
        DeleteVariantStore: {
            http: {
                method: "DELETE",
                requestUri: "/variantStore/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            },
            idempotent: true
        },
        DeleteWorkflow: {
            http: {
                method: "DELETE",
                requestUri: "/workflow/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            },
            idempotent: true
        },
        GetAnnotationImportJob: {
            http: {
                method: "GET",
                requestUri: "/import/annotation/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "destinationName", "versionName", "roleArn", "status", "statusMessage", "creationTime", "updateTime", "completionTime", "items", "runLeftNormalization", "formatOptions" ],
                members: {
                    id: {},
                    destinationName: {},
                    versionName: {},
                    roleArn: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    },
                    completionTime: {
                        shape: "S40"
                    },
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source", "jobStatus" ],
                            members: {
                                source: {},
                                jobStatus: {}
                            }
                        }
                    },
                    runLeftNormalization: {
                        type: "boolean"
                    },
                    formatOptions: {
                        shape: "S45"
                    },
                    annotationFields: {
                        shape: "S4i"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        GetAnnotationStore: {
            http: {
                method: "GET",
                requestUri: "/annotationStore/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "reference", "status", "storeArn", "name", "description", "sseConfig", "creationTime", "updateTime", "tags", "statusMessage", "storeSizeBytes", "numVersions" ],
                members: {
                    id: {},
                    reference: {
                        shape: "St"
                    },
                    status: {},
                    storeArn: {},
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    storeOptions: {
                        shape: "S15"
                    },
                    storeFormat: {},
                    statusMessage: {},
                    storeSizeBytes: {
                        type: "long"
                    },
                    numVersions: {
                        type: "integer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        GetAnnotationStoreVersion: {
            http: {
                method: "GET",
                requestUri: "/annotationStore/{name}/version/{versionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "versionName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    versionName: {
                        location: "uri",
                        locationName: "versionName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "storeId", "id", "status", "versionArn", "name", "versionName", "description", "creationTime", "updateTime", "tags", "statusMessage", "versionSizeBytes" ],
                members: {
                    storeId: {},
                    id: {},
                    status: {},
                    versionArn: {},
                    name: {},
                    versionName: {},
                    description: {},
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    versionOptions: {
                        shape: "S1j"
                    },
                    statusMessage: {},
                    versionSizeBytes: {
                        type: "long"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        GetReadSet: {
            http: {
                method: "GET",
                requestUri: "/sequencestore/{sequenceStoreId}/readset/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "sequenceStoreId", "partNumber" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    file: {
                        location: "querystring",
                        locationName: "file"
                    },
                    partNumber: {
                        location: "querystring",
                        locationName: "partNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    payload: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "payload"
            },
            endpoint: {
                hostPrefix: "storage-"
            }
        },
        GetReadSetActivationJob: {
            http: {
                method: "GET",
                requestUri: "/sequencestore/{sequenceStoreId}/activationjob/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "sequenceStoreId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "sequenceStoreId", "status", "creationTime" ],
                members: {
                    id: {},
                    sequenceStoreId: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        shape: "S1x"
                    },
                    completionTime: {
                        shape: "S1x"
                    },
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "readSetId", "status" ],
                            members: {
                                readSetId: {},
                                status: {},
                                statusMessage: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetReadSetExportJob: {
            http: {
                method: "GET",
                requestUri: "/sequencestore/{sequenceStoreId}/exportjob/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "id" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "sequenceStoreId", "destination", "status", "creationTime" ],
                members: {
                    id: {},
                    sequenceStoreId: {},
                    destination: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        shape: "S1x"
                    },
                    completionTime: {
                        shape: "S1x"
                    },
                    readSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "status" ],
                            members: {
                                id: {},
                                status: {},
                                statusMessage: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetReadSetImportJob: {
            http: {
                method: "GET",
                requestUri: "/sequencestore/{sequenceStoreId}/importjob/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "sequenceStoreId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "sequenceStoreId", "roleArn", "status", "creationTime", "sources" ],
                members: {
                    id: {},
                    sequenceStoreId: {},
                    roleArn: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        shape: "S1x"
                    },
                    completionTime: {
                        shape: "S1x"
                    },
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceFiles", "sourceFileType", "status", "subjectId", "sampleId" ],
                            members: {
                                sourceFiles: {
                                    shape: "S5j"
                                },
                                sourceFileType: {},
                                status: {},
                                statusMessage: {},
                                subjectId: {},
                                sampleId: {},
                                generatedFrom: {},
                                referenceArn: {},
                                name: {},
                                description: {},
                                tags: {
                                    shape: "Sx"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetReadSetMetadata: {
            http: {
                method: "GET",
                requestUri: "/sequencestore/{sequenceStoreId}/readset/{id}/metadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "sequenceStoreId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "sequenceStoreId", "status", "fileType", "creationTime" ],
                members: {
                    id: {},
                    arn: {},
                    sequenceStoreId: {},
                    subjectId: {},
                    sampleId: {},
                    status: {},
                    name: {},
                    description: {},
                    fileType: {},
                    creationTime: {
                        shape: "S1x"
                    },
                    sequenceInformation: {
                        shape: "S5p"
                    },
                    referenceArn: {},
                    files: {
                        type: "structure",
                        members: {
                            source1: {
                                shape: "S5r"
                            },
                            source2: {
                                shape: "S5r"
                            },
                            index: {
                                shape: "S5r"
                            }
                        }
                    },
                    statusMessage: {},
                    creationType: {},
                    etag: {
                        shape: "S5x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetReference: {
            http: {
                method: "GET",
                requestUri: "/referencestore/{referenceStoreId}/reference/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "referenceStoreId", "partNumber" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    referenceStoreId: {
                        location: "uri",
                        locationName: "referenceStoreId"
                    },
                    range: {
                        location: "header",
                        locationName: "Range"
                    },
                    partNumber: {
                        location: "querystring",
                        locationName: "partNumber",
                        type: "integer"
                    },
                    file: {
                        location: "querystring",
                        locationName: "file"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    payload: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "payload"
            },
            endpoint: {
                hostPrefix: "storage-"
            }
        },
        GetReferenceImportJob: {
            http: {
                method: "GET",
                requestUri: "/referencestore/{referenceStoreId}/importjob/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "referenceStoreId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    referenceStoreId: {
                        location: "uri",
                        locationName: "referenceStoreId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "referenceStoreId", "roleArn", "status", "creationTime", "sources" ],
                members: {
                    id: {},
                    referenceStoreId: {},
                    roleArn: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        shape: "S1x"
                    },
                    completionTime: {
                        shape: "S1x"
                    },
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "status" ],
                            members: {
                                sourceFile: {},
                                status: {},
                                statusMessage: {},
                                name: {},
                                description: {},
                                tags: {
                                    shape: "Sx"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetReferenceMetadata: {
            http: {
                method: "GET",
                requestUri: "/referencestore/{referenceStoreId}/reference/{id}/metadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "referenceStoreId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    referenceStoreId: {
                        location: "uri",
                        locationName: "referenceStoreId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "referenceStoreId", "md5", "creationTime", "updateTime" ],
                members: {
                    id: {},
                    arn: {},
                    referenceStoreId: {},
                    md5: {},
                    status: {},
                    name: {},
                    description: {},
                    creationTime: {
                        shape: "S1x"
                    },
                    updateTime: {
                        shape: "S1x"
                    },
                    files: {
                        type: "structure",
                        members: {
                            source: {
                                shape: "S5r"
                            },
                            index: {
                                shape: "S5r"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetReferenceStore: {
            http: {
                method: "GET",
                requestUri: "/referencestore/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "creationTime" ],
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    creationTime: {
                        shape: "S1x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetRun: {
            http: {
                method: "GET",
                requestUri: "/run/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    export: {
                        location: "querystring",
                        locationName: "export",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    status: {},
                    workflowId: {},
                    workflowType: {},
                    runId: {},
                    roleArn: {},
                    name: {},
                    runGroupId: {},
                    priority: {
                        type: "integer"
                    },
                    definition: {},
                    digest: {},
                    parameters: {
                        shape: "S6v"
                    },
                    storageCapacity: {
                        type: "integer"
                    },
                    outputUri: {},
                    logLevel: {},
                    resourceDigests: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    startedBy: {},
                    creationTime: {
                        shape: "S73"
                    },
                    startTime: {
                        shape: "S73"
                    },
                    stopTime: {
                        shape: "S73"
                    },
                    statusMessage: {},
                    tags: {
                        shape: "Sx"
                    },
                    accelerators: {},
                    retentionMode: {},
                    failureReason: {},
                    logLocation: {
                        type: "structure",
                        members: {
                            engineLogStream: {},
                            runLogStream: {}
                        }
                    },
                    uuid: {},
                    runOutputUri: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        GetRunGroup: {
            http: {
                method: "GET",
                requestUri: "/runGroup/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    name: {},
                    maxCpus: {
                        type: "integer"
                    },
                    maxRuns: {
                        type: "integer"
                    },
                    maxDuration: {
                        type: "integer"
                    },
                    creationTime: {
                        shape: "S7g"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    maxGpus: {
                        type: "integer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        GetRunTask: {
            http: {
                method: "GET",
                requestUri: "/run/{id}/task/{taskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "taskId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {},
                    status: {},
                    name: {},
                    cpus: {
                        type: "integer"
                    },
                    memory: {
                        type: "integer"
                    },
                    creationTime: {
                        shape: "S7p"
                    },
                    startTime: {
                        shape: "S7p"
                    },
                    stopTime: {
                        shape: "S7p"
                    },
                    statusMessage: {},
                    logStream: {},
                    gpus: {
                        type: "integer"
                    },
                    instanceType: {},
                    failureReason: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        GetSequenceStore: {
            http: {
                method: "GET",
                requestUri: "/sequencestore/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "creationTime" ],
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    creationTime: {
                        shape: "S1x"
                    },
                    fallbackLocation: {}
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        GetShare: {
            http: {
                method: "GET",
                requestUri: "/share/{shareId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "shareId" ],
                members: {
                    shareId: {
                        location: "uri",
                        locationName: "shareId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    share: {
                        shape: "S7z"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        GetVariantImportJob: {
            http: {
                method: "GET",
                requestUri: "/import/variant/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "destinationName", "roleArn", "status", "statusMessage", "creationTime", "updateTime", "items", "runLeftNormalization" ],
                members: {
                    id: {},
                    destinationName: {},
                    roleArn: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    },
                    completionTime: {
                        shape: "S40"
                    },
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source", "jobStatus" ],
                            members: {
                                source: {},
                                jobStatus: {},
                                statusMessage: {}
                            }
                        }
                    },
                    runLeftNormalization: {
                        type: "boolean"
                    },
                    annotationFields: {
                        shape: "S4i"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        GetVariantStore: {
            http: {
                method: "GET",
                requestUri: "/variantStore/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "reference", "status", "storeArn", "name", "description", "sseConfig", "creationTime", "updateTime", "tags", "statusMessage", "storeSizeBytes" ],
                members: {
                    id: {},
                    reference: {
                        shape: "St"
                    },
                    status: {},
                    storeArn: {},
                    name: {},
                    description: {},
                    sseConfig: {
                        shape: "S11"
                    },
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    statusMessage: {},
                    storeSizeBytes: {
                        type: "long"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        GetWorkflow: {
            http: {
                method: "GET",
                requestUri: "/workflow/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    export: {
                        location: "querystring",
                        locationName: "export",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    status: {},
                    type: {},
                    name: {},
                    description: {},
                    engine: {},
                    definition: {},
                    main: {},
                    digest: {},
                    parameterTemplate: {
                        shape: "S2w"
                    },
                    storageCapacity: {
                        type: "integer"
                    },
                    creationTime: {
                        shape: "S8b"
                    },
                    statusMessage: {},
                    tags: {
                        shape: "Sx"
                    },
                    metadata: {
                        shape: "S8d"
                    },
                    accelerators: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        ListAnnotationImportJobs: {
            http: {
                requestUri: "/import/annotations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ids: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {},
                            storeName: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    annotationImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "destinationName", "versionName", "roleArn", "status", "creationTime", "updateTime" ],
                            members: {
                                id: {},
                                destinationName: {},
                                versionName: {},
                                roleArn: {},
                                status: {},
                                creationTime: {
                                    shape: "S1h"
                                },
                                updateTime: {
                                    shape: "S3z"
                                },
                                completionTime: {
                                    shape: "S40"
                                },
                                runLeftNormalization: {
                                    type: "boolean"
                                },
                                annotationFields: {
                                    shape: "S4i"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        ListAnnotationStoreVersions: {
            http: {
                requestUri: "/annotationStore/{name}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    annotationStoreVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "storeId", "id", "status", "versionArn", "name", "versionName", "description", "creationTime", "updateTime", "statusMessage", "versionSizeBytes" ],
                            members: {
                                storeId: {},
                                id: {},
                                status: {},
                                versionArn: {},
                                name: {},
                                versionName: {},
                                description: {},
                                creationTime: {
                                    shape: "S1h"
                                },
                                updateTime: {
                                    shape: "S3z"
                                },
                                statusMessage: {},
                                versionSizeBytes: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        ListAnnotationStores: {
            http: {
                requestUri: "/annotationStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ids: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    annotationStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "reference", "status", "storeArn", "name", "storeFormat", "description", "sseConfig", "creationTime", "updateTime", "statusMessage", "storeSizeBytes" ],
                            members: {
                                id: {},
                                reference: {
                                    shape: "St"
                                },
                                status: {},
                                storeArn: {},
                                name: {},
                                storeFormat: {},
                                description: {},
                                sseConfig: {
                                    shape: "S11"
                                },
                                creationTime: {
                                    shape: "S1h"
                                },
                                updateTime: {
                                    shape: "S3z"
                                },
                                statusMessage: {},
                                storeSizeBytes: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        ListMultipartReadSetUploads: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/uploads",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    uploads: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sequenceStoreId", "uploadId", "sourceFileType", "subjectId", "sampleId", "generatedFrom", "referenceArn", "creationTime" ],
                            members: {
                                sequenceStoreId: {},
                                uploadId: {},
                                sourceFileType: {},
                                subjectId: {},
                                sampleId: {},
                                generatedFrom: {},
                                referenceArn: {},
                                name: {},
                                description: {},
                                tags: {
                                    shape: "Sx"
                                },
                                creationTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReadSetActivationJobs: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/activationjobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    activationJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "sequenceStoreId", "status", "creationTime" ],
                            members: {
                                id: {},
                                sequenceStoreId: {},
                                status: {},
                                creationTime: {
                                    shape: "S1x"
                                },
                                completionTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReadSetExportJobs: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/exportjobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    exportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "sequenceStoreId", "destination", "status", "creationTime" ],
                            members: {
                                id: {},
                                sequenceStoreId: {},
                                destination: {},
                                status: {},
                                creationTime: {
                                    shape: "S1x"
                                },
                                completionTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReadSetImportJobs: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/importjobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    importJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "sequenceStoreId", "roleArn", "status", "creationTime" ],
                            members: {
                                id: {},
                                sequenceStoreId: {},
                                roleArn: {},
                                status: {},
                                creationTime: {
                                    shape: "S1x"
                                },
                                completionTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReadSetUploadParts: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/upload/{uploadId}/parts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "uploadId", "partSource" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    partSource: {},
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    parts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "partNumber", "partSize", "partSource", "checksum" ],
                            members: {
                                partNumber: {
                                    type: "integer"
                                },
                                partSize: {
                                    type: "long"
                                },
                                partSource: {},
                                checksum: {},
                                creationTime: {
                                    shape: "S1x"
                                },
                                lastUpdatedTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReadSets: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/readsets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            name: {},
                            status: {},
                            referenceArn: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            },
                            sampleId: {},
                            subjectId: {},
                            generatedFrom: {},
                            creationType: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "readSets" ],
                members: {
                    nextToken: {},
                    readSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "sequenceStoreId", "status", "fileType", "creationTime" ],
                            members: {
                                id: {},
                                arn: {},
                                sequenceStoreId: {},
                                subjectId: {},
                                sampleId: {},
                                status: {},
                                name: {},
                                description: {},
                                referenceArn: {},
                                fileType: {},
                                sequenceInformation: {
                                    shape: "S5p"
                                },
                                creationTime: {
                                    shape: "S1x"
                                },
                                statusMessage: {},
                                creationType: {},
                                etag: {
                                    shape: "S5x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReferenceImportJobs: {
            http: {
                requestUri: "/referencestore/{referenceStoreId}/importjobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "referenceStoreId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    referenceStoreId: {
                        location: "uri",
                        locationName: "referenceStoreId"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    importJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "referenceStoreId", "roleArn", "status", "creationTime" ],
                            members: {
                                id: {},
                                referenceStoreId: {},
                                roleArn: {},
                                status: {},
                                creationTime: {
                                    shape: "S1x"
                                },
                                completionTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReferenceStores: {
            http: {
                requestUri: "/referencestores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            name: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "referenceStores" ],
                members: {
                    nextToken: {},
                    referenceStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "creationTime" ],
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                description: {},
                                sseConfig: {
                                    shape: "S11"
                                },
                                creationTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListReferences: {
            http: {
                requestUri: "/referencestore/{referenceStoreId}/references",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "referenceStoreId" ],
                members: {
                    referenceStoreId: {
                        location: "uri",
                        locationName: "referenceStoreId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            name: {},
                            md5: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "references" ],
                members: {
                    nextToken: {},
                    references: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "referenceStoreId", "md5", "creationTime", "updateTime" ],
                            members: {
                                id: {},
                                arn: {},
                                referenceStoreId: {},
                                md5: {},
                                status: {},
                                name: {},
                                description: {},
                                creationTime: {
                                    shape: "S1x"
                                },
                                updateTime: {
                                    shape: "S1x"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListRunGroups: {
            http: {
                method: "GET",
                requestUri: "/runGroup",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    startingToken: {
                        location: "querystring",
                        locationName: "startingToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                maxCpus: {
                                    type: "integer"
                                },
                                maxRuns: {
                                    type: "integer"
                                },
                                maxDuration: {
                                    type: "integer"
                                },
                                creationTime: {
                                    shape: "S7g"
                                },
                                maxGpus: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        ListRunTasks: {
            http: {
                method: "GET",
                requestUri: "/run/{id}/task",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    startingToken: {
                        location: "querystring",
                        locationName: "startingToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                taskId: {},
                                status: {},
                                name: {},
                                cpus: {
                                    type: "integer"
                                },
                                memory: {
                                    type: "integer"
                                },
                                creationTime: {
                                    shape: "S7p"
                                },
                                startTime: {
                                    shape: "S7p"
                                },
                                stopTime: {
                                    shape: "S7p"
                                },
                                gpus: {
                                    type: "integer"
                                },
                                instanceType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        ListRuns: {
            http: {
                method: "GET",
                requestUri: "/run",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    runGroupId: {
                        location: "querystring",
                        locationName: "runGroupId"
                    },
                    startingToken: {
                        location: "querystring",
                        locationName: "startingToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                status: {},
                                workflowId: {},
                                name: {},
                                priority: {
                                    type: "integer"
                                },
                                storageCapacity: {
                                    type: "integer"
                                },
                                creationTime: {
                                    shape: "S73"
                                },
                                startTime: {
                                    shape: "S73"
                                },
                                stopTime: {
                                    shape: "S73"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        ListSequenceStores: {
            http: {
                requestUri: "/sequencestores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            name: {},
                            createdAfter: {
                                shape: "S1x"
                            },
                            createdBefore: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "sequenceStores" ],
                members: {
                    nextToken: {},
                    sequenceStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "creationTime" ],
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                description: {},
                                sseConfig: {
                                    shape: "S11"
                                },
                                creationTime: {
                                    shape: "S1x"
                                },
                                fallbackLocation: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        ListShares: {
            http: {
                requestUri: "/shares",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceOwner: {},
                    filter: {
                        type: "structure",
                        members: {
                            resourceArns: {
                                type: "list",
                                member: {}
                            },
                            status: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "shares" ],
                members: {
                    shares: {
                        type: "list",
                        member: {
                            shape: "S7z"
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            endpoint: {
                hostPrefix: "tags-"
            }
        },
        ListVariantImportJobs: {
            http: {
                requestUri: "/import/variants",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ids: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {},
                            storeName: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    variantImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "destinationName", "roleArn", "status", "creationTime", "updateTime" ],
                            members: {
                                id: {},
                                destinationName: {},
                                roleArn: {},
                                status: {},
                                creationTime: {
                                    shape: "S1h"
                                },
                                updateTime: {
                                    shape: "S3z"
                                },
                                completionTime: {
                                    shape: "S40"
                                },
                                runLeftNormalization: {
                                    type: "boolean"
                                },
                                annotationFields: {
                                    shape: "S4i"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        ListVariantStores: {
            http: {
                requestUri: "/variantStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ids: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    variantStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "reference", "status", "storeArn", "name", "description", "sseConfig", "creationTime", "updateTime", "statusMessage", "storeSizeBytes" ],
                            members: {
                                id: {},
                                reference: {
                                    shape: "St"
                                },
                                status: {},
                                storeArn: {},
                                name: {},
                                description: {},
                                sseConfig: {
                                    shape: "S11"
                                },
                                creationTime: {
                                    shape: "S1h"
                                },
                                updateTime: {
                                    shape: "S3z"
                                },
                                statusMessage: {},
                                storeSizeBytes: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        ListWorkflows: {
            http: {
                method: "GET",
                requestUri: "/workflow",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    startingToken: {
                        location: "querystring",
                        locationName: "startingToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                status: {},
                                type: {},
                                digest: {},
                                creationTime: {
                                    shape: "S8b"
                                },
                                metadata: {
                                    shape: "S8d"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        StartAnnotationImportJob: {
            http: {
                requestUri: "/import/annotation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "destinationName", "roleArn", "items" ],
                members: {
                    destinationName: {},
                    roleArn: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source" ],
                            members: {
                                source: {}
                            }
                        }
                    },
                    versionName: {},
                    formatOptions: {
                        shape: "S45"
                    },
                    runLeftNormalization: {
                        type: "boolean"
                    },
                    annotationFields: {
                        shape: "S4i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        StartReadSetActivationJob: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/activationjob",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "sources" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    clientToken: {},
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "readSetId" ],
                            members: {
                                readSetId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "sequenceStoreId", "status", "creationTime" ],
                members: {
                    id: {},
                    sequenceStoreId: {},
                    status: {},
                    creationTime: {
                        shape: "S1x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        StartReadSetExportJob: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/exportjob",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "destination", "roleArn", "sources" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    destination: {},
                    roleArn: {},
                    clientToken: {},
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "readSetId" ],
                            members: {
                                readSetId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "sequenceStoreId", "destination", "status", "creationTime" ],
                members: {
                    id: {},
                    sequenceStoreId: {},
                    destination: {},
                    status: {},
                    creationTime: {
                        shape: "S1x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        StartReadSetImportJob: {
            http: {
                requestUri: "/sequencestore/{sequenceStoreId}/importjob",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "roleArn", "sources" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    roleArn: {},
                    clientToken: {},
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceFiles", "sourceFileType", "subjectId", "sampleId" ],
                            members: {
                                sourceFiles: {
                                    shape: "S5j"
                                },
                                sourceFileType: {},
                                subjectId: {},
                                sampleId: {},
                                generatedFrom: {},
                                referenceArn: {},
                                name: {},
                                description: {},
                                tags: {
                                    shape: "Sx"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "sequenceStoreId", "roleArn", "status", "creationTime" ],
                members: {
                    id: {},
                    sequenceStoreId: {},
                    roleArn: {},
                    status: {},
                    creationTime: {
                        shape: "S1x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        StartReferenceImportJob: {
            http: {
                requestUri: "/referencestore/{referenceStoreId}/importjob",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "referenceStoreId", "roleArn", "sources" ],
                members: {
                    referenceStoreId: {
                        location: "uri",
                        locationName: "referenceStoreId"
                    },
                    roleArn: {},
                    clientToken: {},
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceFile", "name" ],
                            members: {
                                sourceFile: {},
                                name: {},
                                description: {},
                                tags: {
                                    shape: "Sx"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "referenceStoreId", "roleArn", "status", "creationTime" ],
                members: {
                    id: {},
                    referenceStoreId: {},
                    roleArn: {},
                    status: {},
                    creationTime: {
                        shape: "S1x"
                    }
                }
            },
            endpoint: {
                hostPrefix: "control-storage-"
            }
        },
        StartRun: {
            http: {
                requestUri: "/run",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "roleArn", "requestId" ],
                members: {
                    workflowId: {},
                    workflowType: {},
                    runId: {},
                    roleArn: {},
                    name: {},
                    runGroupId: {},
                    priority: {
                        type: "integer"
                    },
                    parameters: {
                        shape: "S6v"
                    },
                    storageCapacity: {
                        type: "integer"
                    },
                    outputUri: {},
                    logLevel: {},
                    tags: {
                        shape: "Sx"
                    },
                    requestId: {
                        idempotencyToken: true
                    },
                    retentionMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    status: {},
                    tags: {
                        shape: "Sx"
                    },
                    uuid: {},
                    runOutputUri: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        StartVariantImportJob: {
            http: {
                requestUri: "/import/variant",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "destinationName", "roleArn", "items" ],
                members: {
                    destinationName: {},
                    roleArn: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source" ],
                            members: {
                                source: {}
                            }
                        }
                    },
                    runLeftNormalization: {
                        type: "boolean"
                    },
                    annotationFields: {
                        shape: "S4i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "tags-"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "tags-"
            },
            idempotent: true
        },
        UpdateAnnotationStore: {
            http: {
                requestUri: "/annotationStore/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "id", "reference", "status", "name", "description", "creationTime", "updateTime" ],
                members: {
                    id: {},
                    reference: {
                        shape: "St"
                    },
                    status: {},
                    name: {},
                    description: {},
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    },
                    storeOptions: {
                        shape: "S15"
                    },
                    storeFormat: {}
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        UpdateAnnotationStoreVersion: {
            http: {
                requestUri: "/annotationStore/{name}/version/{versionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "versionName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    versionName: {
                        location: "uri",
                        locationName: "versionName"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "storeId", "id", "status", "name", "versionName", "description", "creationTime", "updateTime" ],
                members: {
                    storeId: {},
                    id: {},
                    status: {},
                    name: {},
                    versionName: {},
                    description: {},
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        UpdateRunGroup: {
            http: {
                requestUri: "/runGroup/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {},
                    maxCpus: {
                        type: "integer"
                    },
                    maxRuns: {
                        type: "integer"
                    },
                    maxDuration: {
                        type: "integer"
                    },
                    maxGpus: {
                        type: "integer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        UpdateVariantStore: {
            http: {
                requestUri: "/variantStore/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "id", "reference", "status", "name", "description", "creationTime", "updateTime" ],
                members: {
                    id: {},
                    reference: {
                        shape: "St"
                    },
                    status: {},
                    name: {},
                    description: {},
                    creationTime: {
                        shape: "S1h"
                    },
                    updateTime: {
                        shape: "S3z"
                    }
                }
            },
            endpoint: {
                hostPrefix: "analytics-"
            }
        },
        UpdateWorkflow: {
            http: {
                requestUri: "/workflow/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {},
                    description: {}
                }
            },
            endpoint: {
                hostPrefix: "workflows-"
            }
        },
        UploadReadSetPart: {
            http: {
                method: "PUT",
                requestUri: "/sequencestore/{sequenceStoreId}/upload/{uploadId}/part",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sequenceStoreId", "uploadId", "partSource", "partNumber", "payload" ],
                members: {
                    sequenceStoreId: {
                        location: "uri",
                        locationName: "sequenceStoreId"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    partSource: {
                        location: "querystring",
                        locationName: "partSource"
                    },
                    partNumber: {
                        location: "querystring",
                        locationName: "partNumber",
                        type: "integer"
                    },
                    payload: {
                        type: "blob",
                        requiresLength: true,
                        streaming: true
                    }
                },
                payload: "payload"
            },
            output: {
                type: "structure",
                required: [ "checksum" ],
                members: {
                    checksum: {}
                }
            },
            authtype: "v4-unsigned-body",
            endpoint: {
                hostPrefix: "storage-"
            }
        }
    },
    shapes: {
        St: {
            type: "structure",
            members: {
                referenceArn: {}
            },
            union: true
        },
        Sx: {
            type: "map",
            key: {},
            value: {}
        },
        S11: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                keyArn: {}
            }
        },
        S15: {
            type: "structure",
            members: {
                tsvStoreOptions: {
                    type: "structure",
                    members: {
                        annotationType: {},
                        formatToHeader: {
                            shape: "S18"
                        },
                        schema: {
                            type: "list",
                            member: {
                                shape: "S1c"
                            }
                        }
                    }
                }
            },
            union: true
        },
        S18: {
            type: "map",
            key: {},
            value: {}
        },
        S1c: {
            type: "map",
            key: {},
            value: {}
        },
        S1h: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1j: {
            type: "structure",
            members: {
                tsvVersionOptions: {
                    type: "structure",
                    members: {
                        annotationType: {},
                        formatToHeader: {
                            shape: "S18"
                        },
                        schema: {
                            type: "list",
                            member: {
                                shape: "S1c"
                            }
                        }
                    }
                }
            },
            union: true
        },
        S1x: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S2w: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    description: {},
                    optional: {
                        type: "boolean"
                    }
                }
            }
        },
        S3z: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S40: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S45: {
            type: "structure",
            members: {
                tsvOptions: {
                    type: "structure",
                    members: {
                        readOptions: {
                            type: "structure",
                            members: {
                                sep: {},
                                encoding: {},
                                quote: {},
                                quoteAll: {
                                    type: "boolean"
                                },
                                escape: {},
                                escapeQuotes: {
                                    type: "boolean"
                                },
                                comment: {},
                                header: {
                                    type: "boolean"
                                },
                                lineSep: {}
                            }
                        }
                    }
                },
                vcfOptions: {
                    type: "structure",
                    members: {
                        ignoreQualField: {
                            type: "boolean"
                        },
                        ignoreFilterField: {
                            type: "boolean"
                        }
                    }
                }
            },
            union: true
        },
        S4i: {
            type: "map",
            key: {},
            value: {}
        },
        S5j: {
            type: "structure",
            required: [ "source1" ],
            members: {
                source1: {},
                source2: {}
            }
        },
        S5p: {
            type: "structure",
            members: {
                totalReadCount: {
                    type: "long"
                },
                totalBaseCount: {
                    type: "long"
                },
                generatedFrom: {},
                alignment: {}
            }
        },
        S5r: {
            type: "structure",
            members: {
                totalParts: {
                    type: "integer"
                },
                partSize: {
                    type: "long"
                },
                contentLength: {
                    type: "long"
                }
            }
        },
        S5x: {
            type: "structure",
            members: {
                algorithm: {},
                source1: {},
                source2: {}
            }
        },
        S6v: {
            type: "structure",
            members: {},
            document: true
        },
        S73: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S7g: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S7p: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S7z: {
            type: "structure",
            members: {
                shareId: {},
                resourceArn: {},
                principalSubscriber: {},
                ownerId: {},
                status: {},
                statusMessage: {},
                shareName: {},
                creationTime: {
                    shape: "S1h"
                },
                updateTime: {
                    shape: "S3z"
                }
            }
        },
        S8b: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S8d: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListAnnotationImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "annotationImportJobs"
        },
        ListAnnotationStoreVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "annotationStoreVersions"
        },
        ListAnnotationStores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "annotationStores"
        },
        ListMultipartReadSetUploads: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "uploads"
        },
        ListReadSetActivationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "activationJobs"
        },
        ListReadSetExportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "exportJobs"
        },
        ListReadSetImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "importJobs"
        },
        ListReadSetUploadParts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "parts"
        },
        ListReadSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "readSets"
        },
        ListReferenceImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "importJobs"
        },
        ListReferenceStores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "referenceStores"
        },
        ListReferences: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "references"
        },
        ListRunGroups: {
            input_token: "startingToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListRunTasks: {
            input_token: "startingToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListRuns: {
            input_token: "startingToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSequenceStores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sequenceStores"
        },
        ListShares: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "shares"
        },
        ListVariantImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "variantImportJobs"
        },
        ListVariantStores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "variantStores"
        },
        ListWorkflows: {
            input_token: "startingToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    },
    waiters: {
        AnnotationImportJobCreated: {
            description: "Wait until an annotation import is completed",
            delay: 30,
            maxAttempts: 20,
            operation: "GetAnnotationImportJob",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "SUBMITTED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "IN_PROGRESS"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "CANCELLED"
            }, {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            } ]
        },
        AnnotationStoreCreated: {
            description: "Wait until an annotation store is created",
            delay: 30,
            maxAttempts: 20,
            operation: "GetAnnotationStore",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CREATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        AnnotationStoreDeleted: {
            description: "Wait until an annotation store is deleted.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetAnnotationStore",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "DELETING"
            } ]
        },
        AnnotationStoreVersionCreated: {
            description: "Wait until an annotation store version is created",
            delay: 30,
            maxAttempts: 20,
            operation: "GetAnnotationStoreVersion",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CREATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        AnnotationStoreVersionDeleted: {
            description: "Wait until an annotation store version is deleted.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetAnnotationStoreVersion",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "DELETING"
            } ]
        },
        ReadSetActivationJobCompleted: {
            description: "Wait until a job is completed.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetReadSetActivationJob",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "SUBMITTED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "IN_PROGRESS"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CANCELLING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "CANCELLED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "COMPLETED_WITH_FAILURES"
            } ]
        },
        ReadSetExportJobCompleted: {
            description: "Wait until a job is completed.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetReadSetExportJob",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "SUBMITTED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "IN_PROGRESS"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CANCELLING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "CANCELLED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "COMPLETED_WITH_FAILURES"
            } ]
        },
        ReadSetImportJobCompleted: {
            description: "Wait until a job is completed.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetReadSetImportJob",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "SUBMITTED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "IN_PROGRESS"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CANCELLING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "CANCELLED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "COMPLETED_WITH_FAILURES"
            } ]
        },
        ReferenceImportJobCompleted: {
            description: "Wait until a job is completed.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetReferenceImportJob",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "SUBMITTED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "IN_PROGRESS"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CANCELLING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "CANCELLED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "COMPLETED_WITH_FAILURES"
            } ]
        },
        RunCompleted: {
            description: "Wait until a run is completed.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetRun",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "PENDING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "STARTING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "RUNNING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "STOPPING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        RunRunning: {
            description: "Wait until a run is running.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetRun",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "RUNNING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "PENDING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "STARTING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "CANCELLED"
            } ]
        },
        TaskCompleted: {
            description: "Wait until a task is completed.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetRunTask",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "PENDING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "STARTING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "RUNNING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "STOPPING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        TaskRunning: {
            description: "Wait until a task is running.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetRunTask",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "RUNNING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "PENDING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "STARTING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "CANCELLED"
            } ]
        },
        VariantImportJobCreated: {
            description: "Wait until variant import is completed",
            delay: 30,
            maxAttempts: 20,
            operation: "GetVariantImportJob",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "SUBMITTED"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "IN_PROGRESS"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "CANCELLED"
            }, {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "COMPLETED"
            } ]
        },
        VariantStoreCreated: {
            description: "Wait until a variant store is created",
            delay: 30,
            maxAttempts: 20,
            operation: "GetVariantStore",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CREATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        VariantStoreDeleted: {
            description: "Wait until a variant store is deleted.",
            delay: 30,
            maxAttempts: 20,
            operation: "GetVariantStore",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "DELETING"
            } ]
        },
        WorkflowActive: {
            description: "Wait until a workflow is active.",
            delay: 3,
            maxAttempts: 10,
            operation: "GetWorkflow",
            acceptors: [ {
                matcher: "path",
                argument: "status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "CREATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "status",
                state: "failure",
                expected: "FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["opensearchserverless"] = {};

AWS.OpenSearchServerless = AWS.Service.defineService("opensearchserverless", [ "2021-11-01" ]);

AWS.apiLoader.services["opensearchserverless"]["2021-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-11-01",
        endpointPrefix: "aoss",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "OpenSearch Service Serverless",
        serviceId: "OpenSearchServerless",
        signatureVersion: "v4",
        signingName: "aoss",
        targetPrefix: "OpenSearchServerless",
        uid: "opensearchserverless-2021-11-01"
    },
    operations: {
        BatchGetCollection: {
            input: {
                type: "structure",
                members: {
                    ids: {
                        type: "list",
                        member: {}
                    },
                    names: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    collectionDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                collectionEndpoint: {},
                                createdDate: {
                                    type: "long"
                                },
                                dashboardEndpoint: {},
                                description: {},
                                id: {},
                                kmsKeyArn: {},
                                lastModifiedDate: {
                                    type: "long"
                                },
                                name: {},
                                standbyReplicas: {},
                                status: {},
                                type: {}
                            }
                        }
                    },
                    collectionErrorDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                id: {},
                                name: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetEffectiveLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "resourceIdentifiers" ],
                members: {
                    resourceIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "resource", "type" ],
                            members: {
                                resource: {},
                                type: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    effectiveLifecyclePolicyDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                noMinRetentionPeriod: {
                                    type: "boolean"
                                },
                                policyName: {},
                                resource: {},
                                resourceType: {},
                                retentionPeriod: {},
                                type: {}
                            }
                        }
                    },
                    effectiveLifecyclePolicyErrorDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                resource: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "identifiers" ],
                members: {
                    identifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type" ],
                            members: {
                                name: {},
                                type: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicyDetails: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    lifecyclePolicyErrorDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                name: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetVpcEndpoint: {
            input: {
                type: "structure",
                required: [ "ids" ],
                members: {
                    ids: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vpcEndpointDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdDate: {
                                    type: "long"
                                },
                                id: {},
                                name: {},
                                securityGroupIds: {
                                    shape: "S1c"
                                },
                                status: {},
                                subnetIds: {
                                    shape: "S1f"
                                },
                                vpcId: {}
                            }
                        }
                    },
                    vpcEndpointErrorDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                id: {}
                            }
                        }
                    }
                }
            }
        },
        CreateAccessPolicy: {
            input: {
                type: "structure",
                required: [ "name", "policy", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    policy: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessPolicyDetail: {
                        shape: "S1p"
                    }
                }
            },
            idempotent: true
        },
        CreateCollection: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    standbyReplicas: {},
                    tags: {
                        shape: "S1s"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    createCollectionDetail: {
                        type: "structure",
                        members: {
                            arn: {},
                            createdDate: {
                                type: "long"
                            },
                            description: {},
                            id: {},
                            kmsKeyArn: {},
                            lastModifiedDate: {
                                type: "long"
                            },
                            name: {},
                            standbyReplicas: {},
                            status: {},
                            type: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        CreateLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "name", "policy", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    policy: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicyDetail: {
                        shape: "Sz"
                    }
                }
            },
            idempotent: true
        },
        CreateSecurityConfig: {
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    samlOptions: {
                        shape: "S23"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    securityConfigDetail: {
                        shape: "S2a"
                    }
                }
            },
            idempotent: true
        },
        CreateSecurityPolicy: {
            input: {
                type: "structure",
                required: [ "name", "policy", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    policy: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    securityPolicyDetail: {
                        shape: "S2f"
                    }
                }
            },
            idempotent: true
        },
        CreateVpcEndpoint: {
            input: {
                type: "structure",
                required: [ "name", "subnetIds", "vpcId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    securityGroupIds: {
                        shape: "S1c"
                    },
                    subnetIds: {
                        shape: "S1f"
                    },
                    vpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    createVpcEndpointDetail: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            status: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DeleteAccessPolicy: {
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteCollection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deleteCollectionDetail: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            status: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DeleteLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSecurityConfig: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSecurityPolicy: {
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteVpcEndpoint: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deleteVpcEndpointDetail: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            status: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        GetAccessPolicy: {
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessPolicyDetail: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetAccountSettings: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    accountSettingsDetail: {
                        shape: "S31"
                    }
                }
            }
        },
        GetPoliciesStats: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AccessPolicyStats: {
                        type: "structure",
                        members: {
                            DataPolicyCount: {
                                type: "long"
                            }
                        }
                    },
                    LifecyclePolicyStats: {
                        type: "structure",
                        members: {
                            RetentionPolicyCount: {
                                type: "long"
                            }
                        }
                    },
                    SecurityConfigStats: {
                        type: "structure",
                        members: {
                            SamlConfigCount: {
                                type: "long"
                            }
                        }
                    },
                    SecurityPolicyStats: {
                        type: "structure",
                        members: {
                            EncryptionPolicyCount: {
                                type: "long"
                            },
                            NetworkPolicyCount: {
                                type: "long"
                            }
                        }
                    },
                    TotalPolicyCount: {
                        type: "long"
                    }
                }
            }
        },
        GetSecurityConfig: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    securityConfigDetail: {
                        shape: "S2a"
                    }
                }
            }
        },
        GetSecurityPolicy: {
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    securityPolicyDetail: {
                        shape: "S2f"
                    }
                }
            }
        },
        ListAccessPolicies: {
            input: {
                type: "structure",
                required: [ "type" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resource: {
                        type: "list",
                        member: {}
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessPolicySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdDate: {
                                    type: "long"
                                },
                                description: {},
                                lastModifiedDate: {
                                    type: "long"
                                },
                                name: {},
                                policyVersion: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCollections: {
            input: {
                type: "structure",
                members: {
                    collectionFilters: {
                        type: "structure",
                        members: {
                            name: {},
                            status: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    collectionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLifecyclePolicies: {
            input: {
                type: "structure",
                required: [ "type" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resources: {
                        type: "list",
                        member: {}
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdDate: {
                                    type: "long"
                                },
                                description: {},
                                lastModifiedDate: {
                                    type: "long"
                                },
                                name: {},
                                policyVersion: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSecurityConfigs: {
            input: {
                type: "structure",
                required: [ "type" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    securityConfigSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                configVersion: {},
                                createdDate: {
                                    type: "long"
                                },
                                description: {},
                                id: {},
                                lastModifiedDate: {
                                    type: "long"
                                },
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListSecurityPolicies: {
            input: {
                type: "structure",
                required: [ "type" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resource: {
                        type: "list",
                        member: {}
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    securityPolicySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdDate: {
                                    type: "long"
                                },
                                description: {},
                                lastModifiedDate: {
                                    type: "long"
                                },
                                name: {},
                                policyVersion: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1s"
                    }
                }
            }
        },
        ListVpcEndpoints: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    vpcEndpointFilters: {
                        type: "structure",
                        members: {
                            status: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    vpcEndpointSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAccessPolicy: {
            input: {
                type: "structure",
                required: [ "name", "policyVersion", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    policy: {},
                    policyVersion: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessPolicyDetail: {
                        shape: "S1p"
                    }
                }
            },
            idempotent: true
        },
        UpdateAccountSettings: {
            input: {
                type: "structure",
                members: {
                    capacityLimits: {
                        shape: "S32"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accountSettingsDetail: {
                        shape: "S31"
                    }
                }
            }
        },
        UpdateCollection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    updateCollectionDetail: {
                        type: "structure",
                        members: {
                            arn: {},
                            createdDate: {
                                type: "long"
                            },
                            description: {},
                            id: {},
                            lastModifiedDate: {
                                type: "long"
                            },
                            name: {},
                            status: {},
                            type: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        UpdateLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "name", "policyVersion", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    policy: {},
                    policyVersion: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecyclePolicyDetail: {
                        shape: "Sz"
                    }
                }
            },
            idempotent: true
        },
        UpdateSecurityConfig: {
            input: {
                type: "structure",
                required: [ "configVersion", "id" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    configVersion: {},
                    description: {},
                    id: {},
                    samlOptions: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    securityConfigDetail: {
                        shape: "S2a"
                    }
                }
            },
            idempotent: true
        },
        UpdateSecurityPolicy: {
            input: {
                type: "structure",
                required: [ "name", "policyVersion", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    policy: {},
                    policyVersion: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    securityPolicyDetail: {
                        shape: "S2f"
                    }
                }
            },
            idempotent: true
        },
        UpdateVpcEndpoint: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    addSecurityGroupIds: {
                        shape: "S1c"
                    },
                    addSubnetIds: {
                        shape: "S1f"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    id: {},
                    removeSecurityGroupIds: {
                        shape: "S1c"
                    },
                    removeSubnetIds: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateVpcEndpointDetail: {
                        type: "structure",
                        members: {
                            id: {},
                            lastModifiedDate: {
                                type: "long"
                            },
                            name: {},
                            securityGroupIds: {
                                shape: "S1c"
                            },
                            status: {},
                            subnetIds: {
                                shape: "S1f"
                            }
                        }
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sz: {
            type: "structure",
            members: {
                createdDate: {
                    type: "long"
                },
                description: {},
                lastModifiedDate: {
                    type: "long"
                },
                name: {},
                policy: {
                    shape: "S11"
                },
                policyVersion: {},
                type: {}
            }
        },
        S11: {
            type: "structure",
            members: {},
            document: true
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "structure",
            members: {
                createdDate: {
                    type: "long"
                },
                description: {},
                lastModifiedDate: {
                    type: "long"
                },
                name: {},
                policy: {
                    shape: "S11"
                },
                policyVersion: {},
                type: {}
            }
        },
        S1s: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S23: {
            type: "structure",
            required: [ "metadata" ],
            members: {
                groupAttribute: {},
                metadata: {},
                sessionTimeout: {
                    type: "integer"
                },
                userAttribute: {}
            }
        },
        S2a: {
            type: "structure",
            members: {
                configVersion: {},
                createdDate: {
                    type: "long"
                },
                description: {},
                id: {},
                lastModifiedDate: {
                    type: "long"
                },
                samlOptions: {
                    shape: "S23"
                },
                type: {}
            }
        },
        S2f: {
            type: "structure",
            members: {
                createdDate: {
                    type: "long"
                },
                description: {},
                lastModifiedDate: {
                    type: "long"
                },
                name: {},
                policy: {
                    shape: "S11"
                },
                policyVersion: {},
                type: {}
            }
        },
        S31: {
            type: "structure",
            members: {
                capacityLimits: {
                    shape: "S32"
                }
            }
        },
        S32: {
            type: "structure",
            members: {
                maxIndexingCapacityInOCU: {
                    type: "integer"
                },
                maxSearchCapacityInOCU: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListAccessPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListCollections: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListLifecyclePolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSecurityConfigs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSecurityPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListVpcEndpoints: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["securitylake"] = {};

AWS.SecurityLake = AWS.Service.defineService("securitylake", [ "2018-05-10" ]);

AWS.apiLoader.services["securitylake"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "securitylake",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Security Lake",
        serviceId: "SecurityLake",
        signatureVersion: "v4",
        signingName: "securitylake",
        uid: "securitylake-2018-05-10"
    },
    operations: {
        CreateAwsLogSource: {
            http: {
                requestUri: "/v1/datalake/logsources/aws",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sources" ],
                members: {
                    sources: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failed: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateCustomLogSource: {
            http: {
                requestUri: "/v1/datalake/logsources/custom",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceName" ],
                members: {
                    configuration: {
                        type: "structure",
                        required: [ "crawlerConfiguration", "providerIdentity" ],
                        members: {
                            crawlerConfiguration: {
                                type: "structure",
                                required: [ "roleArn" ],
                                members: {
                                    roleArn: {}
                                }
                            },
                            providerIdentity: {
                                shape: "Sf"
                            }
                        }
                    },
                    eventClasses: {
                        shape: "Si"
                    },
                    sourceName: {},
                    sourceVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    source: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        CreateDataLake: {
            http: {
                requestUri: "/v1/datalake",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configurations", "metaStoreManagerRoleArn" ],
                members: {
                    configurations: {
                        shape: "St"
                    },
                    metaStoreManagerRoleArn: {},
                    tags: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataLakes: {
                        shape: "S1a"
                    }
                }
            }
        },
        CreateDataLakeExceptionSubscription: {
            http: {
                requestUri: "/v1/datalake/exceptions/subscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "notificationEndpoint", "subscriptionProtocol" ],
                members: {
                    exceptionTimeToLive: {
                        type: "long"
                    },
                    notificationEndpoint: {},
                    subscriptionProtocol: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDataLakeOrganizationConfiguration: {
            http: {
                requestUri: "/v1/datalake/organization/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "autoEnableNewAccount" ],
                members: {
                    autoEnableNewAccount: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateSubscriber: {
            http: {
                requestUri: "/v1/subscribers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sources", "subscriberIdentity", "subscriberName" ],
                members: {
                    accessTypes: {
                        shape: "S1s"
                    },
                    sources: {
                        shape: "S1u"
                    },
                    subscriberDescription: {},
                    subscriberIdentity: {
                        shape: "Sf"
                    },
                    subscriberName: {},
                    tags: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriber: {
                        shape: "S1z"
                    }
                }
            }
        },
        CreateSubscriberNotification: {
            http: {
                requestUri: "/v1/subscribers/{subscriberId}/notification",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuration", "subscriberId" ],
                members: {
                    configuration: {
                        shape: "S26"
                    },
                    subscriberId: {
                        location: "uri",
                        locationName: "subscriberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriberEndpoint: {}
                }
            }
        },
        DeleteAwsLogSource: {
            http: {
                requestUri: "/v1/datalake/logsources/aws/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sources" ],
                members: {
                    sources: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failed: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteCustomLogSource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/datalake/logsources/custom/{sourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceName" ],
                members: {
                    sourceName: {
                        location: "uri",
                        locationName: "sourceName"
                    },
                    sourceVersion: {
                        location: "querystring",
                        locationName: "sourceVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteDataLake: {
            http: {
                requestUri: "/v1/datalake/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "regions" ],
                members: {
                    regions: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteDataLakeExceptionSubscription: {
            http: {
                method: "DELETE",
                requestUri: "/v1/datalake/exceptions/subscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteDataLakeOrganizationConfiguration: {
            http: {
                requestUri: "/v1/datalake/organization/configuration/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "autoEnableNewAccount" ],
                members: {
                    autoEnableNewAccount: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSubscriber: {
            http: {
                method: "DELETE",
                requestUri: "/v1/subscribers/{subscriberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "subscriberId" ],
                members: {
                    subscriberId: {
                        location: "uri",
                        locationName: "subscriberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSubscriberNotification: {
            http: {
                method: "DELETE",
                requestUri: "/v1/subscribers/{subscriberId}/notification",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "subscriberId" ],
                members: {
                    subscriberId: {
                        location: "uri",
                        locationName: "subscriberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeregisterDataLakeDelegatedAdministrator: {
            http: {
                method: "DELETE",
                requestUri: "/v1/datalake/delegate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetDataLakeExceptionSubscription: {
            http: {
                method: "GET",
                requestUri: "/v1/datalake/exceptions/subscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    exceptionTimeToLive: {
                        type: "long"
                    },
                    notificationEndpoint: {},
                    subscriptionProtocol: {}
                }
            }
        },
        GetDataLakeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/datalake/organization/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    autoEnableNewAccount: {
                        shape: "S1m"
                    }
                }
            }
        },
        GetDataLakeSources: {
            http: {
                requestUri: "/v1/datalake/sources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accounts: {
                        shape: "S4"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    dataLakeArn: {},
                    dataLakeSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                account: {},
                                eventClasses: {
                                    shape: "Si"
                                },
                                sourceName: {},
                                sourceStatuses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            resource: {},
                                            status: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetSubscriber: {
            http: {
                method: "GET",
                requestUri: "/v1/subscribers/{subscriberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "subscriberId" ],
                members: {
                    subscriberId: {
                        location: "uri",
                        locationName: "subscriberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriber: {
                        shape: "S1z"
                    }
                }
            }
        },
        ListDataLakeExceptions: {
            http: {
                requestUri: "/v1/datalake/exceptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    regions: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exceptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                exception: {},
                                region: {},
                                remediation: {},
                                timestamp: {
                                    shape: "S20"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataLakes: {
            http: {
                method: "GET",
                requestUri: "/v1/datalakes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    regions: {
                        shape: "S6",
                        location: "querystring",
                        locationName: "regions"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataLakes: {
                        shape: "S1a"
                    }
                }
            }
        },
        ListLogSources: {
            http: {
                requestUri: "/v1/datalake/logsources/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accounts: {
                        shape: "S4"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    regions: {
                        shape: "S6"
                    },
                    sources: {
                        shape: "S1u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    sources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                account: {},
                                region: {},
                                sources: {
                                    shape: "S1u"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListSubscribers: {
            http: {
                method: "GET",
                requestUri: "/v1/subscribers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    subscribers: {
                        type: "list",
                        member: {
                            shape: "S1z"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S15"
                    }
                }
            }
        },
        RegisterDataLakeDelegatedAdministrator: {
            http: {
                requestUri: "/v1/datalake/delegate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateDataLake: {
            http: {
                method: "PUT",
                requestUri: "/v1/datalake",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configurations" ],
                members: {
                    configurations: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataLakes: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        UpdateDataLakeExceptionSubscription: {
            http: {
                method: "PUT",
                requestUri: "/v1/datalake/exceptions/subscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "notificationEndpoint", "subscriptionProtocol" ],
                members: {
                    exceptionTimeToLive: {
                        type: "long"
                    },
                    notificationEndpoint: {},
                    subscriptionProtocol: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateSubscriber: {
            http: {
                method: "PUT",
                requestUri: "/v1/subscribers/{subscriberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "subscriberId" ],
                members: {
                    sources: {
                        shape: "S1u"
                    },
                    subscriberDescription: {},
                    subscriberId: {
                        location: "uri",
                        locationName: "subscriberId"
                    },
                    subscriberIdentity: {
                        shape: "Sf"
                    },
                    subscriberName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriber: {
                        shape: "S1z"
                    }
                }
            },
            idempotent: true
        },
        UpdateSubscriberNotification: {
            http: {
                method: "PUT",
                requestUri: "/v1/subscribers/{subscriberId}/notification",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuration", "subscriberId" ],
                members: {
                    configuration: {
                        shape: "S26"
                    },
                    subscriberId: {
                        location: "uri",
                        locationName: "subscriberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriberEndpoint: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                type: "structure",
                required: [ "regions", "sourceName" ],
                members: {
                    accounts: {
                        shape: "S4"
                    },
                    regions: {
                        shape: "S6"
                    },
                    sourceName: {},
                    sourceVersion: {}
                }
            }
        },
        S4: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            required: [ "externalId", "principal" ],
            members: {
                externalId: {},
                principal: {}
            }
        },
        Si: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "structure",
            members: {
                attributes: {
                    type: "structure",
                    members: {
                        crawlerArn: {},
                        databaseArn: {},
                        tableArn: {}
                    }
                },
                provider: {
                    type: "structure",
                    members: {
                        location: {},
                        roleArn: {}
                    }
                },
                sourceName: {},
                sourceVersion: {}
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "region" ],
                members: {
                    encryptionConfiguration: {
                        shape: "Sv"
                    },
                    lifecycleConfiguration: {
                        shape: "Sx"
                    },
                    region: {},
                    replicationConfiguration: {
                        shape: "S14"
                    }
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                kmsKeyId: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                expiration: {
                    type: "structure",
                    members: {
                        days: {
                            type: "integer"
                        }
                    }
                },
                transitions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            days: {
                                type: "integer"
                            },
                            storageClass: {}
                        }
                    }
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                regions: {
                    shape: "S6"
                },
                roleArn: {}
            }
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "dataLakeArn", "region" ],
                members: {
                    createStatus: {},
                    dataLakeArn: {},
                    encryptionConfiguration: {
                        shape: "Sv"
                    },
                    lifecycleConfiguration: {
                        shape: "Sx"
                    },
                    region: {},
                    replicationConfiguration: {
                        shape: "S14"
                    },
                    s3BucketArn: {},
                    updateStatus: {
                        type: "structure",
                        members: {
                            exception: {
                                type: "structure",
                                members: {
                                    code: {},
                                    reason: {}
                                }
                            },
                            requestId: {},
                            status: {}
                        }
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "region", "sources" ],
                members: {
                    region: {},
                    sources: {
                        type: "list",
                        member: {
                            shape: "S1p"
                        }
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                sourceName: {},
                sourceVersion: {}
            }
        },
        S1s: {
            type: "list",
            member: {}
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    awsLogSource: {
                        shape: "S1p"
                    },
                    customLogSource: {
                        shape: "Sn"
                    }
                },
                union: true
            }
        },
        S1z: {
            type: "structure",
            required: [ "sources", "subscriberArn", "subscriberId", "subscriberIdentity", "subscriberName" ],
            members: {
                accessTypes: {
                    shape: "S1s"
                },
                createdAt: {
                    shape: "S20"
                },
                resourceShareArn: {},
                resourceShareName: {},
                roleArn: {},
                s3BucketArn: {},
                sources: {
                    shape: "S1u"
                },
                subscriberArn: {},
                subscriberDescription: {},
                subscriberEndpoint: {},
                subscriberId: {},
                subscriberIdentity: {
                    shape: "Sf"
                },
                subscriberName: {},
                subscriberStatus: {},
                updatedAt: {
                    shape: "S20"
                }
            }
        },
        S20: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S26: {
            type: "structure",
            members: {
                httpsNotificationConfiguration: {
                    type: "structure",
                    required: [ "endpoint", "targetRoleArn" ],
                    members: {
                        authorizationApiKeyName: {},
                        authorizationApiKeyValue: {},
                        endpoint: {},
                        httpMethod: {},
                        targetRoleArn: {}
                    }
                },
                sqsNotificationConfiguration: {
                    type: "structure",
                    members: {}
                }
            },
            union: true
        }
    },
    paginators: {
        GetDataLakeSources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataLakeSources"
        },
        ListDataLakeExceptions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "exceptions"
        },
        ListLogSources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sources"
        },
        ListSubscribers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "subscribers"
        }
    }
};

AWS.apiLoader.services["simspaceweaver"] = {};

AWS.SimSpaceWeaver = AWS.Service.defineService("simspaceweaver", [ "2022-10-28" ]);

AWS.apiLoader.services["simspaceweaver"]["2022-10-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-10-28",
        endpointPrefix: "simspaceweaver",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS SimSpace Weaver",
        serviceId: "SimSpaceWeaver",
        signatureVersion: "v4",
        signingName: "simspaceweaver",
        uid: "simspaceweaver-2022-10-28"
    },
    operations: {
        CreateSnapshot: {
            http: {
                requestUri: "/createsnapshot",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Destination", "Simulation" ],
                members: {
                    Destination: {
                        type: "structure",
                        required: [ "BucketName" ],
                        members: {
                            BucketName: {},
                            ObjectKeyPrefix: {}
                        }
                    },
                    Simulation: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApp: {
            http: {
                method: "DELETE",
                requestUri: "/deleteapp",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "App", "Domain", "Simulation" ],
                members: {
                    App: {
                        location: "querystring",
                        locationName: "app"
                    },
                    Domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    Simulation: {
                        location: "querystring",
                        locationName: "simulation"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSimulation: {
            http: {
                method: "DELETE",
                requestUri: "/deletesimulation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Simulation" ],
                members: {
                    Simulation: {
                        location: "querystring",
                        locationName: "simulation"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeApp: {
            http: {
                method: "GET",
                requestUri: "/describeapp",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "App", "Domain", "Simulation" ],
                members: {
                    App: {
                        location: "querystring",
                        locationName: "app"
                    },
                    Domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    Simulation: {
                        location: "querystring",
                        locationName: "simulation"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    Domain: {},
                    EndpointInfo: {
                        type: "structure",
                        members: {
                            Address: {},
                            IngressPortMappings: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Actual: {
                                            type: "integer"
                                        },
                                        Declared: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    LaunchOverrides: {
                        shape: "Sk"
                    },
                    Name: {},
                    Simulation: {},
                    Status: {},
                    TargetStatus: {}
                }
            }
        },
        DescribeSimulation: {
            http: {
                method: "GET",
                requestUri: "/describesimulation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Simulation" ],
                members: {
                    Simulation: {
                        location: "querystring",
                        locationName: "simulation"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    ExecutionId: {},
                    LiveSimulationState: {
                        type: "structure",
                        members: {
                            Clocks: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Status: {},
                                        TargetStatus: {}
                                    }
                                }
                            },
                            Domains: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Lifecycle: {},
                                        Name: {}
                                    }
                                }
                            }
                        }
                    },
                    LoggingConfiguration: {
                        type: "structure",
                        members: {
                            Destinations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CloudWatchLogsLogGroup: {
                                            type: "structure",
                                            members: {
                                                LogGroupArn: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    MaximumDuration: {},
                    Name: {},
                    RoleArn: {},
                    SchemaError: {
                        deprecated: true,
                        deprecatedMessage: "SchemaError is no longer used, check StartError instead."
                    },
                    SchemaS3Location: {
                        shape: "S19"
                    },
                    SnapshotS3Location: {
                        shape: "S19"
                    },
                    StartError: {},
                    Status: {},
                    TargetStatus: {}
                }
            }
        },
        ListApps: {
            http: {
                method: "GET",
                requestUri: "/listapps",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Simulation" ],
                members: {
                    Domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Simulation: {
                        location: "querystring",
                        locationName: "simulation"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Apps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Domain: {},
                                Name: {},
                                Simulation: {},
                                Status: {},
                                TargetStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSimulations: {
            http: {
                method: "GET",
                requestUri: "/listsimulations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Simulations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Status: {},
                                TargetStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        StartApp: {
            http: {
                requestUri: "/startapp",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Domain", "Name", "Simulation" ],
                members: {
                    ClientToken: {
                        shape: "S1s",
                        idempotencyToken: true
                    },
                    Description: {},
                    Domain: {},
                    LaunchOverrides: {
                        shape: "Sk"
                    },
                    Name: {},
                    Simulation: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {},
                    Name: {},
                    Simulation: {}
                }
            }
        },
        StartClock: {
            http: {
                requestUri: "/startclock",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Simulation" ],
                members: {
                    Simulation: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartSimulation: {
            http: {
                requestUri: "/startsimulation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    ClientToken: {
                        shape: "S1s",
                        idempotencyToken: true
                    },
                    Description: {},
                    MaximumDuration: {},
                    Name: {},
                    RoleArn: {},
                    SchemaS3Location: {
                        shape: "S19"
                    },
                    SnapshotS3Location: {
                        shape: "S19"
                    },
                    Tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ExecutionId: {}
                }
            }
        },
        StopApp: {
            http: {
                requestUri: "/stopapp",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "App", "Domain", "Simulation" ],
                members: {
                    App: {},
                    Domain: {},
                    Simulation: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopClock: {
            http: {
                requestUri: "/stopclock",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Simulation" ],
                members: {
                    Simulation: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopSimulation: {
            http: {
                requestUri: "/stopsimulation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Simulation" ],
                members: {
                    Simulation: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sk: {
            type: "structure",
            members: {
                LaunchCommands: {
                    type: "list",
                    member: {}
                }
            }
        },
        S19: {
            type: "structure",
            required: [ "BucketName", "ObjectKey" ],
            members: {
                BucketName: {},
                ObjectKey: {}
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        },
        S1s: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListApps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSimulations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["docdbelastic"] = {};

AWS.DocDBElastic = AWS.Service.defineService("docdbelastic", [ "2022-11-28" ]);

AWS.apiLoader.services["docdbelastic"]["2022-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-11-28",
        endpointPrefix: "docdb-elastic",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "DocDB Elastic",
        serviceFullName: "Amazon DocumentDB Elastic Clusters",
        serviceId: "DocDB Elastic",
        signatureVersion: "v4",
        signingName: "docdb-elastic",
        uid: "docdb-elastic-2022-11-28"
    },
    operations: {
        CreateCluster: {
            http: {
                requestUri: "/cluster",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "adminUserName", "adminUserPassword", "authType", "clusterName", "shardCapacity", "shardCount" ],
                members: {
                    adminUserName: {},
                    adminUserPassword: {
                        shape: "S3"
                    },
                    authType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    clusterName: {},
                    kmsKeyId: {},
                    preferredMaintenanceWindow: {},
                    shardCapacity: {
                        type: "integer"
                    },
                    shardCount: {
                        type: "integer"
                    },
                    subnetIds: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "S7"
                    },
                    vpcSecurityGroupIds: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {
                        shape: "Sb"
                    }
                }
            },
            idempotent: true
        },
        CreateClusterSnapshot: {
            http: {
                requestUri: "/cluster-snapshot",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clusterArn", "snapshotName" ],
                members: {
                    clusterArn: {},
                    snapshotName: {},
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "snapshot" ],
                members: {
                    snapshot: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        DeleteCluster: {
            http: {
                method: "DELETE",
                requestUri: "/cluster/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clusterArn" ],
                members: {
                    clusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {
                        shape: "Sb"
                    }
                }
            },
            idempotent: true
        },
        DeleteClusterSnapshot: {
            http: {
                method: "DELETE",
                requestUri: "/cluster-snapshot/{snapshotArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "snapshotArn" ],
                members: {
                    snapshotArn: {
                        location: "uri",
                        locationName: "snapshotArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "snapshot" ],
                members: {
                    snapshot: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        GetCluster: {
            http: {
                method: "GET",
                requestUri: "/cluster/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clusterArn" ],
                members: {
                    clusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetClusterSnapshot: {
            http: {
                method: "GET",
                requestUri: "/cluster-snapshot/{snapshotArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "snapshotArn" ],
                members: {
                    snapshotArn: {
                        location: "uri",
                        locationName: "snapshotArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "snapshot" ],
                members: {
                    snapshot: {
                        shape: "Sg"
                    }
                }
            }
        },
        ListClusterSnapshots: {
            http: {
                method: "GET",
                requestUri: "/cluster-snapshots",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clusterArn: {
                        location: "querystring",
                        locationName: "clusterArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    snapshots: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "clusterArn", "snapshotArn", "snapshotCreationTime", "snapshotName", "status" ],
                            members: {
                                clusterArn: {},
                                snapshotArn: {},
                                snapshotCreationTime: {},
                                snapshotName: {},
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        ListClusters: {
            http: {
                method: "GET",
                requestUri: "/clusters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clusters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "clusterArn", "clusterName", "status" ],
                            members: {
                                clusterArn: {},
                                clusterName: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S7"
                    }
                }
            }
        },
        RestoreClusterFromSnapshot: {
            http: {
                requestUri: "/cluster-snapshot/{snapshotArn}/restore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clusterName", "snapshotArn" ],
                members: {
                    clusterName: {},
                    kmsKeyId: {},
                    snapshotArn: {
                        location: "uri",
                        locationName: "snapshotArn"
                    },
                    subnetIds: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "S7"
                    },
                    vpcSecurityGroupIds: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {
                        shape: "Sb"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateCluster: {
            http: {
                method: "PUT",
                requestUri: "/cluster/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clusterArn" ],
                members: {
                    adminUserPassword: {
                        shape: "S3"
                    },
                    authType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    clusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    preferredMaintenanceWindow: {},
                    shardCapacity: {
                        type: "integer"
                    },
                    shardCount: {
                        type: "integer"
                    },
                    subnetIds: {
                        shape: "S6"
                    },
                    vpcSecurityGroupIds: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {
                        shape: "Sb"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "list",
            member: {}
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sb: {
            type: "structure",
            required: [ "adminUserName", "authType", "clusterArn", "clusterEndpoint", "clusterName", "createTime", "kmsKeyId", "preferredMaintenanceWindow", "shardCapacity", "shardCount", "status", "subnetIds", "vpcSecurityGroupIds" ],
            members: {
                adminUserName: {},
                authType: {},
                clusterArn: {},
                clusterEndpoint: {},
                clusterName: {},
                createTime: {},
                kmsKeyId: {},
                preferredMaintenanceWindow: {},
                shardCapacity: {
                    type: "integer"
                },
                shardCount: {
                    type: "integer"
                },
                status: {},
                subnetIds: {
                    shape: "S6"
                },
                vpcSecurityGroupIds: {
                    shape: "S6"
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "adminUserName", "clusterArn", "clusterCreationTime", "kmsKeyId", "snapshotArn", "snapshotCreationTime", "snapshotName", "status", "subnetIds", "vpcSecurityGroupIds" ],
            members: {
                adminUserName: {},
                clusterArn: {},
                clusterCreationTime: {},
                kmsKeyId: {},
                snapshotArn: {},
                snapshotCreationTime: {},
                snapshotName: {},
                status: {},
                subnetIds: {
                    shape: "S6"
                },
                vpcSecurityGroupIds: {
                    shape: "S6"
                }
            }
        }
    },
    paginators: {
        ListClusterSnapshots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "snapshots"
        },
        ListClusters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "clusters"
        }
    }
};

AWS.apiLoader.services["sagemakergeospatial"] = {};

AWS.SageMakerGeospatial = AWS.Service.defineService("sagemakergeospatial", [ "2020-05-27" ]);

AWS.apiLoader.services["sagemakergeospatial"]["2020-05-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-05-27",
        endpointPrefix: "sagemaker-geospatial",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon SageMaker geospatial capabilities",
        serviceId: "SageMaker Geospatial",
        signatureVersion: "v4",
        signingName: "sagemaker-geospatial",
        uid: "sagemaker-geospatial-2020-05-27"
    },
    operations: {
        DeleteEarthObservationJob: {
            http: {
                method: "DELETE",
                requestUri: "/earth-observation-jobs/{Arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteVectorEnrichmentJob: {
            http: {
                method: "DELETE",
                requestUri: "/vector-enrichment-jobs/{Arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        ExportEarthObservationJob: {
            http: {
                requestUri: "/export-earth-observation-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "ExecutionRoleArn", "OutputConfig" ],
                members: {
                    Arn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ExecutionRoleArn: {},
                    ExportSourceImages: {
                        type: "boolean"
                    },
                    OutputConfig: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreationTime", "ExecutionRoleArn", "ExportStatus", "OutputConfig" ],
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sg"
                    },
                    ExecutionRoleArn: {},
                    ExportSourceImages: {
                        type: "boolean"
                    },
                    ExportStatus: {},
                    OutputConfig: {
                        shape: "Sb"
                    }
                }
            }
        },
        ExportVectorEnrichmentJob: {
            http: {
                requestUri: "/export-vector-enrichment-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "ExecutionRoleArn", "OutputConfig" ],
                members: {
                    Arn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ExecutionRoleArn: {},
                    OutputConfig: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreationTime", "ExecutionRoleArn", "ExportStatus", "OutputConfig" ],
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sg"
                    },
                    ExecutionRoleArn: {},
                    ExportStatus: {},
                    OutputConfig: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetEarthObservationJob: {
            http: {
                method: "GET",
                requestUri: "/earth-observation-jobs/{Arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreationTime", "DurationInSeconds", "InputConfig", "JobConfig", "Name", "Status" ],
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sg"
                    },
                    DurationInSeconds: {
                        type: "integer"
                    },
                    ErrorDetails: {
                        type: "structure",
                        members: {
                            Message: {},
                            Type: {}
                        }
                    },
                    ExecutionRoleArn: {},
                    ExportErrorDetails: {
                        type: "structure",
                        members: {
                            ExportResults: {
                                shape: "Sv"
                            },
                            ExportSourceImages: {
                                shape: "Sv"
                            }
                        }
                    },
                    ExportStatus: {},
                    InputConfig: {
                        shape: "Sx"
                    },
                    JobConfig: {
                        shape: "S1n"
                    },
                    KmsKeyId: {},
                    Name: {},
                    OutputBands: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "BandName", "OutputDataType" ],
                            members: {
                                BandName: {},
                                OutputDataType: {}
                            }
                        }
                    },
                    Status: {},
                    Tags: {
                        shape: "S2i"
                    }
                }
            }
        },
        GetRasterDataCollection: {
            http: {
                method: "GET",
                requestUri: "/raster-data-collection/{Arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "Description", "DescriptionPageUrl", "ImageSourceBands", "Name", "SupportedFilters", "Type" ],
                members: {
                    Arn: {},
                    Description: {},
                    DescriptionPageUrl: {},
                    ImageSourceBands: {
                        type: "list",
                        member: {}
                    },
                    Name: {},
                    SupportedFilters: {
                        shape: "S2m"
                    },
                    Tags: {
                        shape: "S2i"
                    },
                    Type: {}
                }
            }
        },
        GetTile: {
            http: {
                method: "GET",
                requestUri: "/tile/{z}/{x}/{y}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "ImageAssets", "Target", "x", "y", "z" ],
                members: {
                    Arn: {
                        location: "querystring",
                        locationName: "Arn"
                    },
                    ExecutionRoleArn: {
                        location: "querystring",
                        locationName: "ExecutionRoleArn"
                    },
                    ImageAssets: {
                        shape: "S1t",
                        location: "querystring",
                        locationName: "ImageAssets"
                    },
                    ImageMask: {
                        location: "querystring",
                        locationName: "ImageMask",
                        type: "boolean"
                    },
                    OutputDataType: {
                        location: "querystring",
                        locationName: "OutputDataType"
                    },
                    OutputFormat: {
                        location: "querystring",
                        locationName: "OutputFormat"
                    },
                    PropertyFilters: {
                        location: "querystring",
                        locationName: "PropertyFilters"
                    },
                    Target: {
                        location: "querystring",
                        locationName: "Target"
                    },
                    TimeRangeFilter: {
                        location: "querystring",
                        locationName: "TimeRangeFilter"
                    },
                    x: {
                        location: "uri",
                        locationName: "x",
                        type: "integer"
                    },
                    y: {
                        location: "uri",
                        locationName: "y",
                        type: "integer"
                    },
                    z: {
                        location: "uri",
                        locationName: "z",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BinaryFile: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "BinaryFile"
            }
        },
        GetVectorEnrichmentJob: {
            http: {
                method: "GET",
                requestUri: "/vector-enrichment-jobs/{Arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreationTime", "DurationInSeconds", "ExecutionRoleArn", "InputConfig", "JobConfig", "Name", "Status", "Type" ],
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sg"
                    },
                    DurationInSeconds: {
                        type: "integer"
                    },
                    ErrorDetails: {
                        type: "structure",
                        members: {
                            ErrorMessage: {},
                            ErrorType: {}
                        }
                    },
                    ExecutionRoleArn: {},
                    ExportErrorDetails: {
                        type: "structure",
                        members: {
                            Message: {},
                            Type: {}
                        }
                    },
                    ExportStatus: {},
                    InputConfig: {
                        shape: "S2z"
                    },
                    JobConfig: {
                        shape: "S32"
                    },
                    KmsKeyId: {},
                    Name: {},
                    Status: {},
                    Tags: {
                        shape: "S2i"
                    },
                    Type: {}
                }
            }
        },
        ListEarthObservationJobs: {
            http: {
                requestUri: "/list-earth-observation-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S39"
                    },
                    SortBy: {},
                    SortOrder: {},
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EarthObservationJobSummaries" ],
                members: {
                    EarthObservationJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "CreationTime", "DurationInSeconds", "Name", "OperationType", "Status" ],
                            members: {
                                Arn: {},
                                CreationTime: {
                                    shape: "Sg"
                                },
                                DurationInSeconds: {
                                    type: "integer"
                                },
                                Name: {},
                                OperationType: {},
                                Status: {},
                                Tags: {
                                    shape: "S2i"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S39"
                    }
                }
            }
        },
        ListRasterDataCollections: {
            http: {
                method: "GET",
                requestUri: "/raster-data-collections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S39",
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RasterDataCollectionSummaries" ],
                members: {
                    NextToken: {
                        shape: "S39"
                    },
                    RasterDataCollectionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "Description", "Name", "SupportedFilters", "Type" ],
                            members: {
                                Arn: {},
                                Description: {},
                                DescriptionPageUrl: {},
                                Name: {},
                                SupportedFilters: {
                                    shape: "S2m"
                                },
                                Tags: {
                                    shape: "S2i"
                                },
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2i"
                    }
                }
            }
        },
        ListVectorEnrichmentJobs: {
            http: {
                requestUri: "/list-vector-enrichment-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S39"
                    },
                    SortBy: {},
                    SortOrder: {},
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VectorEnrichmentJobSummaries" ],
                members: {
                    NextToken: {
                        shape: "S39"
                    },
                    VectorEnrichmentJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "CreationTime", "DurationInSeconds", "Name", "Status", "Type" ],
                            members: {
                                Arn: {},
                                CreationTime: {
                                    shape: "Sg"
                                },
                                DurationInSeconds: {
                                    type: "integer"
                                },
                                Name: {},
                                Status: {},
                                Tags: {
                                    shape: "S2i"
                                },
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        SearchRasterDataCollection: {
            http: {
                requestUri: "/search-raster-data-collection",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "RasterDataCollectionQuery" ],
                members: {
                    Arn: {},
                    NextToken: {
                        shape: "S39"
                    },
                    RasterDataCollectionQuery: {
                        type: "structure",
                        required: [ "TimeRangeFilter" ],
                        members: {
                            AreaOfInterest: {
                                shape: "Sz"
                            },
                            BandFilter: {
                                shape: "S1t"
                            },
                            PropertyFilters: {
                                shape: "S18"
                            },
                            TimeRangeFilter: {
                                shape: "S3t"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApproximateResultCount" ],
                members: {
                    ApproximateResultCount: {
                        type: "integer"
                    },
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DateTime", "Geometry", "Id" ],
                            members: {
                                Assets: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "structure",
                                        members: {
                                            Href: {}
                                        }
                                    }
                                },
                                DateTime: {
                                    type: "timestamp"
                                },
                                Geometry: {
                                    type: "structure",
                                    required: [ "Coordinates", "Type" ],
                                    members: {
                                        Coordinates: {
                                            shape: "S13"
                                        },
                                        Type: {}
                                    }
                                },
                                Id: {},
                                Properties: {
                                    type: "structure",
                                    members: {
                                        EoCloudCover: {
                                            type: "float"
                                        },
                                        LandsatCloudCoverLand: {
                                            type: "float"
                                        },
                                        Platform: {},
                                        ViewOffNadir: {
                                            type: "float"
                                        },
                                        ViewSunAzimuth: {
                                            type: "float"
                                        },
                                        ViewSunElevation: {
                                            type: "float"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S39"
                    }
                }
            }
        },
        StartEarthObservationJob: {
            http: {
                requestUri: "/earth-observation-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ExecutionRoleArn", "InputConfig", "JobConfig", "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ExecutionRoleArn: {},
                    InputConfig: {
                        type: "structure",
                        members: {
                            PreviousEarthObservationJobArn: {},
                            RasterDataCollectionQuery: {
                                type: "structure",
                                required: [ "RasterDataCollectionArn", "TimeRangeFilter" ],
                                members: {
                                    AreaOfInterest: {
                                        shape: "Sz"
                                    },
                                    PropertyFilters: {
                                        shape: "S18"
                                    },
                                    RasterDataCollectionArn: {},
                                    TimeRangeFilter: {
                                        shape: "S3t"
                                    }
                                }
                            }
                        }
                    },
                    JobConfig: {
                        shape: "S1n"
                    },
                    KmsKeyId: {},
                    Name: {},
                    Tags: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreationTime", "DurationInSeconds", "ExecutionRoleArn", "JobConfig", "Name", "Status" ],
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sg"
                    },
                    DurationInSeconds: {
                        type: "integer"
                    },
                    ExecutionRoleArn: {},
                    InputConfig: {
                        shape: "Sx"
                    },
                    JobConfig: {
                        shape: "S1n"
                    },
                    KmsKeyId: {},
                    Name: {},
                    Status: {},
                    Tags: {
                        shape: "S2i"
                    }
                }
            },
            idempotent: true
        },
        StartVectorEnrichmentJob: {
            http: {
                requestUri: "/vector-enrichment-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ExecutionRoleArn", "InputConfig", "JobConfig", "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ExecutionRoleArn: {},
                    InputConfig: {
                        shape: "S2z"
                    },
                    JobConfig: {
                        shape: "S32"
                    },
                    KmsKeyId: {},
                    Name: {},
                    Tags: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreationTime", "DurationInSeconds", "ExecutionRoleArn", "InputConfig", "JobConfig", "Name", "Status", "Type" ],
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sg"
                    },
                    DurationInSeconds: {
                        type: "integer"
                    },
                    ExecutionRoleArn: {},
                    InputConfig: {
                        shape: "S2z"
                    },
                    JobConfig: {
                        shape: "S32"
                    },
                    KmsKeyId: {},
                    Name: {},
                    Status: {},
                    Tags: {
                        shape: "S2i"
                    },
                    Type: {}
                }
            },
            idempotent: true
        },
        StopEarthObservationJob: {
            http: {
                requestUri: "/earth-observation-jobs/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopVectorEnrichmentJob: {
            http: {
                requestUri: "/vector-enrichment-jobs/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                method: "PUT",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sb: {
            type: "structure",
            required: [ "S3Data" ],
            members: {
                S3Data: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        KmsKeyId: {},
                        S3Uri: {}
                    }
                }
            }
        },
        Sg: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sk: {
            type: "structure",
            required: [ "S3Data" ],
            members: {
                S3Data: {
                    shape: "Sl"
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                KmsKeyId: {},
                S3Uri: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                Message: {},
                Type: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                PreviousEarthObservationJobArn: {},
                RasterDataCollectionQuery: {
                    type: "structure",
                    required: [ "RasterDataCollectionArn", "RasterDataCollectionName", "TimeRangeFilter" ],
                    members: {
                        AreaOfInterest: {
                            shape: "Sz"
                        },
                        PropertyFilters: {
                            shape: "S18"
                        },
                        RasterDataCollectionArn: {},
                        RasterDataCollectionName: {},
                        TimeRangeFilter: {
                            type: "structure",
                            required: [ "EndTime", "StartTime" ],
                            members: {
                                EndTime: {
                                    shape: "Sg"
                                },
                                StartTime: {
                                    shape: "Sg"
                                }
                            },
                            sensitive: true
                        }
                    }
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                AreaOfInterestGeometry: {
                    type: "structure",
                    members: {
                        MultiPolygonGeometry: {
                            type: "structure",
                            required: [ "Coordinates" ],
                            members: {
                                Coordinates: {
                                    type: "list",
                                    member: {
                                        shape: "S13"
                                    }
                                }
                            }
                        },
                        PolygonGeometry: {
                            type: "structure",
                            required: [ "Coordinates" ],
                            members: {
                                Coordinates: {
                                    shape: "S13"
                                }
                            }
                        }
                    },
                    union: true
                }
            },
            union: true
        },
        S13: {
            type: "list",
            member: {
                type: "list",
                member: {
                    type: "list",
                    member: {
                        type: "double"
                    },
                    sensitive: true
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                LogicalOperator: {},
                Properties: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Property" ],
                        members: {
                            Property: {
                                type: "structure",
                                members: {
                                    EoCloudCover: {
                                        type: "structure",
                                        required: [ "LowerBound", "UpperBound" ],
                                        members: {
                                            LowerBound: {
                                                type: "float"
                                            },
                                            UpperBound: {
                                                type: "float"
                                            }
                                        }
                                    },
                                    LandsatCloudCoverLand: {
                                        type: "structure",
                                        required: [ "LowerBound", "UpperBound" ],
                                        members: {
                                            LowerBound: {
                                                type: "float"
                                            },
                                            UpperBound: {
                                                type: "float"
                                            }
                                        }
                                    },
                                    Platform: {
                                        type: "structure",
                                        required: [ "Value" ],
                                        members: {
                                            ComparisonOperator: {},
                                            Value: {}
                                        }
                                    },
                                    ViewOffNadir: {
                                        type: "structure",
                                        required: [ "LowerBound", "UpperBound" ],
                                        members: {
                                            LowerBound: {
                                                type: "float"
                                            },
                                            UpperBound: {
                                                type: "float"
                                            }
                                        }
                                    },
                                    ViewSunAzimuth: {
                                        type: "structure",
                                        required: [ "LowerBound", "UpperBound" ],
                                        members: {
                                            LowerBound: {
                                                type: "float"
                                            },
                                            UpperBound: {
                                                type: "float"
                                            }
                                        }
                                    },
                                    ViewSunElevation: {
                                        type: "structure",
                                        required: [ "LowerBound", "UpperBound" ],
                                        members: {
                                            LowerBound: {
                                                type: "float"
                                            },
                                            UpperBound: {
                                                type: "float"
                                            }
                                        }
                                    }
                                },
                                union: true
                            }
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                BandMathConfig: {
                    type: "structure",
                    members: {
                        CustomIndices: {
                            type: "structure",
                            members: {
                                Operations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Equation", "Name" ],
                                        members: {
                                            Equation: {},
                                            Name: {},
                                            OutputType: {}
                                        }
                                    }
                                }
                            }
                        },
                        PredefinedIndices: {
                            shape: "S1t"
                        }
                    }
                },
                CloudMaskingConfig: {
                    type: "structure",
                    members: {}
                },
                CloudRemovalConfig: {
                    type: "structure",
                    members: {
                        AlgorithmName: {},
                        InterpolationValue: {},
                        TargetBands: {
                            shape: "S1t"
                        }
                    }
                },
                GeoMosaicConfig: {
                    type: "structure",
                    members: {
                        AlgorithmName: {},
                        TargetBands: {
                            shape: "S1t"
                        }
                    }
                },
                LandCoverSegmentationConfig: {
                    type: "structure",
                    members: {}
                },
                ResamplingConfig: {
                    type: "structure",
                    required: [ "OutputResolution" ],
                    members: {
                        AlgorithmName: {},
                        OutputResolution: {
                            type: "structure",
                            required: [ "UserDefined" ],
                            members: {
                                UserDefined: {
                                    shape: "S23"
                                }
                            }
                        },
                        TargetBands: {
                            shape: "S1t"
                        }
                    }
                },
                StackConfig: {
                    type: "structure",
                    members: {
                        OutputResolution: {
                            type: "structure",
                            members: {
                                Predefined: {},
                                UserDefined: {
                                    shape: "S23"
                                }
                            }
                        },
                        TargetBands: {
                            shape: "S1t"
                        }
                    }
                },
                TemporalStatisticsConfig: {
                    type: "structure",
                    required: [ "Statistics" ],
                    members: {
                        GroupBy: {},
                        Statistics: {
                            type: "list",
                            member: {}
                        },
                        TargetBands: {
                            shape: "S1t"
                        }
                    }
                },
                ZonalStatisticsConfig: {
                    type: "structure",
                    required: [ "Statistics", "ZoneS3Path" ],
                    members: {
                        Statistics: {
                            type: "list",
                            member: {}
                        },
                        TargetBands: {
                            shape: "S1t"
                        },
                        ZoneS3Path: {},
                        ZoneS3PathKmsKeyId: {}
                    }
                }
            },
            union: true
        },
        S1t: {
            type: "list",
            member: {}
        },
        S23: {
            type: "structure",
            required: [ "Unit", "Value" ],
            members: {
                Unit: {},
                Value: {
                    type: "float"
                }
            }
        },
        S2i: {
            type: "map",
            key: {},
            value: {}
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Maximum: {
                        type: "float"
                    },
                    Minimum: {
                        type: "float"
                    },
                    Name: {},
                    Type: {}
                }
            }
        },
        S2z: {
            type: "structure",
            required: [ "DataSourceConfig", "DocumentType" ],
            members: {
                DataSourceConfig: {
                    type: "structure",
                    members: {
                        S3Data: {
                            shape: "Sl"
                        }
                    },
                    union: true
                },
                DocumentType: {}
            }
        },
        S32: {
            type: "structure",
            members: {
                MapMatchingConfig: {
                    type: "structure",
                    required: [ "IdAttributeName", "TimestampAttributeName", "XAttributeName", "YAttributeName" ],
                    members: {
                        IdAttributeName: {},
                        TimestampAttributeName: {},
                        XAttributeName: {},
                        YAttributeName: {}
                    }
                },
                ReverseGeocodingConfig: {
                    type: "structure",
                    required: [ "XAttributeName", "YAttributeName" ],
                    members: {
                        XAttributeName: {},
                        YAttributeName: {}
                    }
                }
            },
            union: true
        },
        S39: {
            type: "string",
            sensitive: true
        },
        S3t: {
            type: "structure",
            required: [ "EndTime", "StartTime" ],
            members: {
                EndTime: {
                    type: "timestamp"
                },
                StartTime: {
                    type: "timestamp"
                }
            },
            sensitive: true
        }
    },
    paginators: {
        ListEarthObservationJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EarthObservationJobSummaries"
        },
        ListRasterDataCollections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RasterDataCollectionSummaries"
        },
        ListVectorEnrichmentJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "VectorEnrichmentJobSummaries"
        },
        SearchRasterDataCollection: {
            input_token: "NextToken",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["codecatalyst"] = {};

AWS.CodeCatalyst = AWS.Service.defineService("codecatalyst", [ "2022-09-28" ]);

AWS.apiLoader.services["codecatalyst"]["2022-09-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-09-28",
        endpointPrefix: "codecatalyst",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CodeCatalyst",
        serviceId: "CodeCatalyst",
        signatureVersion: "bearer",
        signingName: "codecatalyst",
        uid: "codecatalyst-2022-09-28"
    },
    operations: {
        CreateAccessToken: {
            http: {
                method: "PUT",
                requestUri: "/v1/accessTokens",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    expiresTime: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "secret", "name", "expiresTime", "accessTokenId" ],
                members: {
                    secret: {
                        type: "string",
                        sensitive: true
                    },
                    name: {},
                    expiresTime: {
                        shape: "S3"
                    },
                    accessTokenId: {}
                }
            }
        },
        CreateDevEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "instanceType", "persistentStorage" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    repositories: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "repositoryName" ],
                            members: {
                                repositoryName: {},
                                branchName: {}
                            }
                        }
                    },
                    clientToken: {},
                    alias: {},
                    ides: {
                        shape: "Sf"
                    },
                    instanceType: {},
                    inactivityTimeoutMinutes: {
                        type: "integer"
                    },
                    persistentStorage: {
                        type: "structure",
                        required: [ "sizeInGiB" ],
                        members: {
                            sizeInGiB: {
                                type: "integer"
                            }
                        }
                    },
                    vpcConnectionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    vpcConnectionName: {}
                }
            },
            idempotent: true
        },
        CreateProject: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "spaceName", "displayName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    displayName: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name" ],
                members: {
                    spaceName: {},
                    name: {},
                    displayName: {},
                    description: {}
                }
            },
            idempotent: true
        },
        CreateSourceRepository: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{name}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "name" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "name" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    name: {},
                    description: {}
                }
            },
            idempotent: true
        },
        CreateSourceRepositoryBranch: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{sourceRepositoryName}/branches/{name}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "sourceRepositoryName", "name" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    sourceRepositoryName: {
                        location: "uri",
                        locationName: "sourceRepositoryName"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    headCommitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ref: {},
                    name: {},
                    lastUpdatedTime: {
                        shape: "S3"
                    },
                    headCommitId: {}
                }
            },
            idempotent: true
        },
        DeleteAccessToken: {
            http: {
                method: "DELETE",
                requestUri: "/v1/accessTokens/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteDevEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "id" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {}
                }
            },
            idempotent: true
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/v1/spaces/{spaceName}/projects/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "name" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "name" ],
                members: {
                    spaceName: {},
                    name: {},
                    displayName: {}
                }
            },
            idempotent: true
        },
        DeleteSourceRepository: {
            http: {
                method: "DELETE",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "name" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "name" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    name: {}
                }
            },
            idempotent: true
        },
        DeleteSpace: {
            http: {
                method: "DELETE",
                requestUri: "/v1/spaces/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    displayName: {}
                }
            },
            idempotent: true
        },
        GetDevEnvironment: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "id" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "lastUpdatedTime", "creatorId", "status", "repositories", "instanceType", "inactivityTimeoutMinutes", "persistentStorage" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    lastUpdatedTime: {
                        shape: "S3"
                    },
                    creatorId: {},
                    status: {},
                    statusReason: {},
                    repositories: {
                        shape: "S1f"
                    },
                    alias: {},
                    ides: {
                        shape: "S1i"
                    },
                    instanceType: {},
                    inactivityTimeoutMinutes: {
                        type: "integer"
                    },
                    persistentStorage: {
                        shape: "S1m"
                    },
                    vpcConnectionName: {}
                }
            }
        },
        GetProject: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{spaceName}/projects/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "name" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name" ],
                members: {
                    spaceName: {},
                    name: {},
                    displayName: {},
                    description: {}
                }
            }
        },
        GetSourceRepository: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "name" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "name", "lastUpdatedTime", "createdTime" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    name: {},
                    description: {},
                    lastUpdatedTime: {
                        shape: "S1s"
                    },
                    createdTime: {
                        shape: "S1s"
                    }
                }
            }
        },
        GetSourceRepositoryCloneUrls: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{sourceRepositoryName}/cloneUrls",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "sourceRepositoryName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    sourceRepositoryName: {
                        location: "uri",
                        locationName: "sourceRepositoryName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "https" ],
                members: {
                    https: {}
                }
            }
        },
        GetSpace: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "regionName" ],
                members: {
                    name: {},
                    regionName: {},
                    displayName: {},
                    description: {}
                }
            }
        },
        GetSubscription: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{spaceName}/subscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriptionType: {},
                    awsAccountName: {}
                }
            }
        },
        GetUserDetails: {
            http: {
                method: "GET",
                requestUri: "/userDetails",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    userName: {
                        location: "querystring",
                        locationName: "userName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userId: {},
                    userName: {},
                    displayName: {},
                    primaryEmail: {
                        type: "structure",
                        members: {
                            email: {},
                            verified: {
                                type: "boolean"
                            }
                        }
                    },
                    version: {}
                }
            }
        },
        GetWorkflow: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/workflows/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "id", "projectName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "name", "definition", "createdTime", "lastUpdatedTime", "runMode", "status" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    name: {},
                    sourceRepositoryName: {},
                    sourceBranchName: {},
                    definition: {
                        type: "structure",
                        required: [ "path" ],
                        members: {
                            path: {}
                        }
                    },
                    createdTime: {
                        shape: "S3"
                    },
                    lastUpdatedTime: {
                        shape: "S3"
                    },
                    runMode: {},
                    status: {}
                }
            }
        },
        GetWorkflowRun: {
            http: {
                method: "GET",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/workflowRuns/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "id", "projectName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "workflowId", "status", "startTime", "lastUpdatedTime" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    workflowId: {},
                    status: {},
                    statusReasons: {
                        shape: "S2g"
                    },
                    startTime: {
                        shape: "S3"
                    },
                    endTime: {
                        shape: "S3"
                    },
                    lastUpdatedTime: {
                        shape: "S3"
                    }
                }
            }
        },
        ListAccessTokens: {
            http: {
                requestUri: "/v1/accessTokens",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name" ],
                            members: {
                                id: {},
                                name: {},
                                expiresTime: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDevEnvironmentSessions: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{devEnvironmentId}/sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "devEnvironmentId" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    devEnvironmentId: {
                        location: "uri",
                        locationName: "devEnvironmentId"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "spaceName", "projectName", "devEnvironmentId", "startedTime", "id" ],
                            members: {
                                spaceName: {},
                                projectName: {},
                                devEnvironmentId: {},
                                startedTime: {
                                    shape: "S3"
                                },
                                id: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDevEnvironments: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/devEnvironments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "key", "values" ],
                            members: {
                                key: {},
                                values: {
                                    shape: "S2y"
                                },
                                comparisonOperator: {}
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "lastUpdatedTime", "creatorId", "status", "repositories", "instanceType", "inactivityTimeoutMinutes", "persistentStorage" ],
                            members: {
                                spaceName: {},
                                projectName: {},
                                id: {},
                                lastUpdatedTime: {
                                    shape: "S3"
                                },
                                creatorId: {},
                                status: {},
                                statusReason: {},
                                repositories: {
                                    shape: "S1f"
                                },
                                alias: {},
                                ides: {
                                    shape: "S1i"
                                },
                                instanceType: {},
                                inactivityTimeoutMinutes: {
                                    type: "integer"
                                },
                                persistentStorage: {
                                    shape: "S1m"
                                },
                                vpcConnectionName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEventLogs: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/eventLogs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "startTime", "endTime" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    startTime: {
                        shape: "S3"
                    },
                    endTime: {
                        shape: "S3"
                    },
                    eventName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    nextToken: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "eventName", "eventType", "eventCategory", "eventSource", "eventTime", "operationType", "userIdentity" ],
                            members: {
                                id: {},
                                eventName: {},
                                eventType: {},
                                eventCategory: {},
                                eventSource: {},
                                eventTime: {
                                    shape: "S3"
                                },
                                operationType: {},
                                userIdentity: {
                                    type: "structure",
                                    required: [ "userType", "principalId" ],
                                    members: {
                                        userType: {},
                                        principalId: {},
                                        userName: {},
                                        awsAccountId: {}
                                    }
                                },
                                projectInformation: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        projectId: {}
                                    }
                                },
                                requestId: {},
                                requestPayload: {
                                    shape: "S3g"
                                },
                                responsePayload: {
                                    shape: "S3g"
                                },
                                errorCode: {},
                                sourceIpAddress: {},
                                userAgent: {}
                            }
                        }
                    }
                }
            }
        },
        ListProjects: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "key", "values" ],
                            members: {
                                key: {},
                                values: {
                                    shape: "S2y"
                                },
                                comparisonOperator: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {},
                                displayName: {},
                                description: {}
                            }
                        }
                    }
                }
            }
        },
        ListSourceRepositories: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "lastUpdatedTime", "createdTime" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                lastUpdatedTime: {
                                    shape: "S1s"
                                },
                                createdTime: {
                                    shape: "S1s"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSourceRepositoryBranches: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{sourceRepositoryName}/branches",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "sourceRepositoryName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    sourceRepositoryName: {
                        location: "uri",
                        locationName: "sourceRepositoryName"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    nextToken: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ref: {},
                                name: {},
                                lastUpdatedTime: {
                                    shape: "S3"
                                },
                                headCommitId: {}
                            }
                        }
                    }
                }
            }
        },
        ListSpaces: {
            http: {
                requestUri: "/v1/spaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "regionName" ],
                            members: {
                                name: {},
                                regionName: {},
                                displayName: {},
                                description: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkflowRuns: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/workflowRuns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    sortBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "workflowId", "workflowName", "status", "startTime", "lastUpdatedTime" ],
                            members: {
                                id: {},
                                workflowId: {},
                                workflowName: {},
                                status: {},
                                statusReasons: {
                                    shape: "S2g"
                                },
                                startTime: {
                                    shape: "S3"
                                },
                                endTime: {
                                    shape: "S3"
                                },
                                lastUpdatedTime: {
                                    shape: "S3"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWorkflows: {
            http: {
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/workflows",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    sortBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "sourceRepositoryName", "sourceBranchName", "definition", "createdTime", "lastUpdatedTime", "runMode", "status" ],
                            members: {
                                id: {},
                                name: {},
                                sourceRepositoryName: {},
                                sourceBranchName: {},
                                definition: {
                                    type: "structure",
                                    required: [ "path" ],
                                    members: {
                                        path: {}
                                    }
                                },
                                createdTime: {
                                    shape: "S3"
                                },
                                lastUpdatedTime: {
                                    shape: "S3"
                                },
                                runMode: {},
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        StartDevEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "id" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    ides: {
                        shape: "Sf"
                    },
                    instanceType: {},
                    inactivityTimeoutMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "status" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    status: {}
                }
            },
            idempotent: true
        },
        StartDevEnvironmentSession: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/session",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "sessionConfiguration" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    sessionConfiguration: {
                        type: "structure",
                        required: [ "sessionType" ],
                        members: {
                            sessionType: {},
                            executeCommandSessionConfiguration: {
                                type: "structure",
                                required: [ "command" ],
                                members: {
                                    command: {},
                                    arguments: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessDetails", "spaceName", "projectName", "id" ],
                members: {
                    accessDetails: {
                        type: "structure",
                        required: [ "streamUrl", "tokenValue" ],
                        members: {
                            streamUrl: {
                                shape: "S53"
                            },
                            tokenValue: {
                                shape: "S53"
                            }
                        },
                        sensitive: true
                    },
                    sessionId: {},
                    spaceName: {},
                    projectName: {},
                    id: {}
                }
            }
        },
        StartWorkflowRun: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/workflowRuns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "workflowId" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "workflowId" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    workflowId: {}
                }
            },
            idempotent: true
        },
        StopDevEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "id" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "status" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    status: {}
                }
            },
            idempotent: true
        },
        StopDevEnvironmentSession: {
            http: {
                method: "DELETE",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/session/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "sessionId" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaceName", "projectName", "id", "sessionId" ],
                members: {
                    spaceName: {},
                    projectName: {},
                    id: {},
                    sessionId: {}
                }
            },
            idempotent: true
        },
        UpdateDevEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "projectName", "id" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    alias: {},
                    ides: {
                        shape: "Sf"
                    },
                    instanceType: {},
                    inactivityTimeoutMinutes: {
                        type: "integer"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "id", "spaceName", "projectName" ],
                members: {
                    id: {},
                    spaceName: {},
                    projectName: {},
                    alias: {},
                    ides: {
                        shape: "Sf"
                    },
                    instanceType: {},
                    inactivityTimeoutMinutes: {
                        type: "integer"
                    },
                    clientToken: {}
                }
            },
            idempotent: true
        },
        UpdateProject: {
            http: {
                method: "PATCH",
                requestUri: "/v1/spaces/{spaceName}/projects/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceName", "name" ],
                members: {
                    spaceName: {
                        location: "uri",
                        locationName: "spaceName"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    spaceName: {},
                    name: {},
                    displayName: {},
                    description: {}
                }
            },
            idempotent: true
        },
        UpdateSpace: {
            http: {
                method: "PATCH",
                requestUri: "/v1/spaces/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    displayName: {},
                    description: {}
                }
            },
            idempotent: true
        },
        VerifySession: {
            http: {
                method: "GET",
                requestUri: "/session",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    identity: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    runtime: {},
                    name: {}
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    branchName: {}
                }
            }
        },
        S1i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    runtime: {},
                    name: {}
                }
            }
        },
        S1m: {
            type: "structure",
            required: [ "sizeInGiB" ],
            members: {
                sizeInGiB: {
                    type: "integer"
                }
            }
        },
        S1s: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S2g: {
            type: "list",
            member: {
                type: "structure",
                members: {}
            }
        },
        S2y: {
            type: "list",
            member: {}
        },
        S3g: {
            type: "structure",
            members: {
                contentType: {},
                data: {}
            }
        },
        S53: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListAccessTokens: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListDevEnvironmentSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListDevEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListEventLogs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSourceRepositories: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSourceRepositoryBranches: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSpaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "items"
        },
        ListWorkflowRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListWorkflows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["pipes"] = {};

AWS.Pipes = AWS.Service.defineService("pipes", [ "2015-10-07" ]);

AWS.apiLoader.services["pipes"]["2015-10-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-10-07",
        endpointPrefix: "pipes",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon EventBridge Pipes",
        serviceId: "Pipes",
        signatureVersion: "v4",
        signingName: "pipes",
        uid: "pipes-2015-10-07"
    },
    operations: {
        CreatePipe: {
            http: {
                requestUri: "/v1/pipes/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "RoleArn", "Source", "Target" ],
                members: {
                    Description: {
                        shape: "S2"
                    },
                    DesiredState: {},
                    Enrichment: {},
                    EnrichmentParameters: {
                        shape: "S5"
                    },
                    LogConfiguration: {
                        shape: "Sg"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    RoleArn: {},
                    Source: {},
                    SourceParameters: {
                        shape: "Sw"
                    },
                    Tags: {
                        shape: "S1z"
                    },
                    Target: {},
                    TargetParameters: {
                        shape: "S22"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CurrentState: {},
                    DesiredState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Name: {}
                }
            },
            idempotent: true
        },
        DeletePipe: {
            http: {
                method: "DELETE",
                requestUri: "/v1/pipes/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CurrentState: {},
                    DesiredState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Name: {}
                }
            },
            idempotent: true
        },
        DescribePipe: {
            http: {
                method: "GET",
                requestUri: "/v1/pipes/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CurrentState: {},
                    Description: {
                        shape: "S2"
                    },
                    DesiredState: {},
                    Enrichment: {},
                    EnrichmentParameters: {
                        shape: "S5"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LogConfiguration: {
                        type: "structure",
                        members: {
                            CloudwatchLogsLogDestination: {
                                type: "structure",
                                members: {
                                    LogGroupArn: {}
                                }
                            },
                            FirehoseLogDestination: {
                                type: "structure",
                                members: {
                                    DeliveryStreamArn: {}
                                }
                            },
                            IncludeExecutionData: {
                                shape: "Sl"
                            },
                            Level: {},
                            S3LogDestination: {
                                type: "structure",
                                members: {
                                    BucketName: {},
                                    BucketOwner: {},
                                    OutputFormat: {},
                                    Prefix: {}
                                }
                            }
                        }
                    },
                    Name: {},
                    RoleArn: {},
                    Source: {},
                    SourceParameters: {
                        shape: "Sw"
                    },
                    StateReason: {},
                    Tags: {
                        shape: "S1z"
                    },
                    Target: {},
                    TargetParameters: {
                        shape: "S22"
                    }
                }
            }
        },
        ListPipes: {
            http: {
                method: "GET",
                requestUri: "/v1/pipes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CurrentState: {
                        location: "querystring",
                        locationName: "CurrentState"
                    },
                    DesiredState: {
                        location: "querystring",
                        locationName: "DesiredState"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "Limit",
                        type: "integer"
                    },
                    NamePrefix: {
                        location: "querystring",
                        locationName: "NamePrefix"
                    },
                    NextToken: {
                        shape: "S51",
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SourcePrefix: {
                        location: "querystring",
                        locationName: "SourcePrefix"
                    },
                    TargetPrefix: {
                        location: "querystring",
                        locationName: "TargetPrefix"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        shape: "S51"
                    },
                    Pipes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CurrentState: {},
                                DesiredState: {},
                                Enrichment: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Source: {},
                                StateReason: {},
                                Target: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1z"
                    }
                }
            }
        },
        StartPipe: {
            http: {
                requestUri: "/v1/pipes/{Name}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CurrentState: {},
                    DesiredState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Name: {}
                }
            }
        },
        StopPipe: {
            http: {
                requestUri: "/v1/pipes/{Name}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CurrentState: {},
                    DesiredState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Name: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdatePipe: {
            http: {
                method: "PUT",
                requestUri: "/v1/pipes/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    Description: {
                        shape: "S2"
                    },
                    DesiredState: {},
                    Enrichment: {},
                    EnrichmentParameters: {
                        shape: "S5"
                    },
                    LogConfiguration: {
                        shape: "Sg"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    RoleArn: {},
                    SourceParameters: {
                        type: "structure",
                        members: {
                            ActiveMQBrokerParameters: {
                                type: "structure",
                                required: [ "Credentials" ],
                                members: {
                                    BatchSize: {
                                        type: "integer"
                                    },
                                    Credentials: {
                                        shape: "Sz"
                                    },
                                    MaximumBatchingWindowInSeconds: {
                                        type: "integer"
                                    }
                                }
                            },
                            DynamoDBStreamParameters: {
                                type: "structure",
                                members: {
                                    BatchSize: {
                                        type: "integer"
                                    },
                                    DeadLetterConfig: {
                                        shape: "S14"
                                    },
                                    MaximumBatchingWindowInSeconds: {
                                        type: "integer"
                                    },
                                    MaximumRecordAgeInSeconds: {
                                        type: "integer"
                                    },
                                    MaximumRetryAttempts: {
                                        type: "integer"
                                    },
                                    OnPartialBatchItemFailure: {},
                                    ParallelizationFactor: {
                                        type: "integer"
                                    }
                                }
                            },
                            FilterCriteria: {
                                shape: "S1b"
                            },
                            KinesisStreamParameters: {
                                type: "structure",
                                members: {
                                    BatchSize: {
                                        type: "integer"
                                    },
                                    DeadLetterConfig: {
                                        shape: "S14"
                                    },
                                    MaximumBatchingWindowInSeconds: {
                                        type: "integer"
                                    },
                                    MaximumRecordAgeInSeconds: {
                                        type: "integer"
                                    },
                                    MaximumRetryAttempts: {
                                        type: "integer"
                                    },
                                    OnPartialBatchItemFailure: {},
                                    ParallelizationFactor: {
                                        type: "integer"
                                    }
                                }
                            },
                            ManagedStreamingKafkaParameters: {
                                type: "structure",
                                members: {
                                    BatchSize: {
                                        type: "integer"
                                    },
                                    Credentials: {
                                        shape: "S1k"
                                    },
                                    MaximumBatchingWindowInSeconds: {
                                        type: "integer"
                                    }
                                }
                            },
                            RabbitMQBrokerParameters: {
                                type: "structure",
                                required: [ "Credentials" ],
                                members: {
                                    BatchSize: {
                                        type: "integer"
                                    },
                                    Credentials: {
                                        shape: "Sz"
                                    },
                                    MaximumBatchingWindowInSeconds: {
                                        type: "integer"
                                    }
                                }
                            },
                            SelfManagedKafkaParameters: {
                                type: "structure",
                                members: {
                                    BatchSize: {
                                        type: "integer"
                                    },
                                    Credentials: {
                                        shape: "S1r"
                                    },
                                    MaximumBatchingWindowInSeconds: {
                                        type: "integer"
                                    },
                                    ServerRootCaCertificate: {},
                                    Vpc: {
                                        shape: "S1t"
                                    }
                                }
                            },
                            SqsQueueParameters: {
                                type: "structure",
                                members: {
                                    BatchSize: {
                                        type: "integer"
                                    },
                                    MaximumBatchingWindowInSeconds: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    Target: {},
                    TargetParameters: {
                        shape: "S22"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CurrentState: {},
                    DesiredState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Name: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "structure",
            members: {
                HttpParameters: {
                    type: "structure",
                    members: {
                        HeaderParameters: {
                            shape: "S7"
                        },
                        PathParameterValues: {
                            shape: "Sa"
                        },
                        QueryStringParameters: {
                            shape: "Sc"
                        }
                    }
                },
                InputTemplate: {
                    shape: "Sf"
                }
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        Sc: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        Sf: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "structure",
            required: [ "Level" ],
            members: {
                CloudwatchLogsLogDestination: {
                    type: "structure",
                    required: [ "LogGroupArn" ],
                    members: {
                        LogGroupArn: {}
                    }
                },
                FirehoseLogDestination: {
                    type: "structure",
                    required: [ "DeliveryStreamArn" ],
                    members: {
                        DeliveryStreamArn: {}
                    }
                },
                IncludeExecutionData: {
                    shape: "Sl"
                },
                Level: {},
                S3LogDestination: {
                    type: "structure",
                    required: [ "BucketName", "BucketOwner" ],
                    members: {
                        BucketName: {},
                        BucketOwner: {},
                        OutputFormat: {},
                        Prefix: {}
                    }
                }
            }
        },
        Sl: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "structure",
            members: {
                ActiveMQBrokerParameters: {
                    type: "structure",
                    required: [ "Credentials", "QueueName" ],
                    members: {
                        BatchSize: {
                            type: "integer"
                        },
                        Credentials: {
                            shape: "Sz"
                        },
                        MaximumBatchingWindowInSeconds: {
                            type: "integer"
                        },
                        QueueName: {
                            shape: "S12"
                        }
                    }
                },
                DynamoDBStreamParameters: {
                    type: "structure",
                    required: [ "StartingPosition" ],
                    members: {
                        BatchSize: {
                            type: "integer"
                        },
                        DeadLetterConfig: {
                            shape: "S14"
                        },
                        MaximumBatchingWindowInSeconds: {
                            type: "integer"
                        },
                        MaximumRecordAgeInSeconds: {
                            type: "integer"
                        },
                        MaximumRetryAttempts: {
                            type: "integer"
                        },
                        OnPartialBatchItemFailure: {},
                        ParallelizationFactor: {
                            type: "integer"
                        },
                        StartingPosition: {}
                    }
                },
                FilterCriteria: {
                    shape: "S1b"
                },
                KinesisStreamParameters: {
                    type: "structure",
                    required: [ "StartingPosition" ],
                    members: {
                        BatchSize: {
                            type: "integer"
                        },
                        DeadLetterConfig: {
                            shape: "S14"
                        },
                        MaximumBatchingWindowInSeconds: {
                            type: "integer"
                        },
                        MaximumRecordAgeInSeconds: {
                            type: "integer"
                        },
                        MaximumRetryAttempts: {
                            type: "integer"
                        },
                        OnPartialBatchItemFailure: {},
                        ParallelizationFactor: {
                            type: "integer"
                        },
                        StartingPosition: {},
                        StartingPositionTimestamp: {
                            type: "timestamp"
                        }
                    }
                },
                ManagedStreamingKafkaParameters: {
                    type: "structure",
                    required: [ "TopicName" ],
                    members: {
                        BatchSize: {
                            type: "integer"
                        },
                        ConsumerGroupID: {
                            shape: "S1j"
                        },
                        Credentials: {
                            shape: "S1k"
                        },
                        MaximumBatchingWindowInSeconds: {
                            type: "integer"
                        },
                        StartingPosition: {},
                        TopicName: {
                            shape: "S1m"
                        }
                    }
                },
                RabbitMQBrokerParameters: {
                    type: "structure",
                    required: [ "Credentials", "QueueName" ],
                    members: {
                        BatchSize: {
                            type: "integer"
                        },
                        Credentials: {
                            shape: "Sz"
                        },
                        MaximumBatchingWindowInSeconds: {
                            type: "integer"
                        },
                        QueueName: {
                            shape: "S12"
                        },
                        VirtualHost: {
                            shape: "S1j"
                        }
                    }
                },
                SelfManagedKafkaParameters: {
                    type: "structure",
                    required: [ "TopicName" ],
                    members: {
                        AdditionalBootstrapServers: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        },
                        BatchSize: {
                            type: "integer"
                        },
                        ConsumerGroupID: {
                            shape: "S1j"
                        },
                        Credentials: {
                            shape: "S1r"
                        },
                        MaximumBatchingWindowInSeconds: {
                            type: "integer"
                        },
                        ServerRootCaCertificate: {},
                        StartingPosition: {},
                        TopicName: {
                            shape: "S1m"
                        },
                        Vpc: {
                            shape: "S1t"
                        }
                    }
                },
                SqsQueueParameters: {
                    type: "structure",
                    members: {
                        BatchSize: {
                            type: "integer"
                        },
                        MaximumBatchingWindowInSeconds: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                BasicAuth: {}
            },
            union: true
        },
        S12: {
            type: "string",
            sensitive: true
        },
        S14: {
            type: "structure",
            members: {
                Arn: {}
            }
        },
        S1b: {
            type: "structure",
            members: {
                Filters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Pattern: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    }
                }
            }
        },
        S1j: {
            type: "string",
            sensitive: true
        },
        S1k: {
            type: "structure",
            members: {
                ClientCertificateTlsAuth: {},
                SaslScram512Auth: {}
            },
            union: true
        },
        S1m: {
            type: "string",
            sensitive: true
        },
        S1r: {
            type: "structure",
            members: {
                BasicAuth: {},
                ClientCertificateTlsAuth: {},
                SaslScram256Auth: {},
                SaslScram512Auth: {}
            },
            union: true
        },
        S1t: {
            type: "structure",
            members: {
                SecurityGroup: {
                    type: "list",
                    member: {
                        type: "string",
                        sensitive: true
                    }
                },
                Subnets: {
                    type: "list",
                    member: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1z: {
            type: "map",
            key: {},
            value: {
                shape: "S21"
            }
        },
        S21: {
            type: "string",
            sensitive: true
        },
        S22: {
            type: "structure",
            members: {
                BatchJobParameters: {
                    type: "structure",
                    required: [ "JobDefinition", "JobName" ],
                    members: {
                        ArrayProperties: {
                            type: "structure",
                            members: {
                                Size: {
                                    type: "integer"
                                }
                            }
                        },
                        ContainerOverrides: {
                            type: "structure",
                            members: {
                                Command: {
                                    shape: "S27"
                                },
                                Environment: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Value: {}
                                        }
                                    }
                                },
                                InstanceType: {},
                                ResourceRequirements: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Type", "Value" ],
                                        members: {
                                            Type: {},
                                            Value: {}
                                        }
                                    }
                                }
                            }
                        },
                        DependsOn: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    JobId: {},
                                    Type: {}
                                }
                            }
                        },
                        JobDefinition: {},
                        JobName: {},
                        Parameters: {
                            type: "map",
                            key: {},
                            value: {}
                        },
                        RetryStrategy: {
                            type: "structure",
                            members: {
                                Attempts: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                CloudWatchLogsParameters: {
                    type: "structure",
                    members: {
                        LogStreamName: {},
                        Timestamp: {}
                    }
                },
                EcsTaskParameters: {
                    type: "structure",
                    required: [ "TaskDefinitionArn" ],
                    members: {
                        CapacityProviderStrategy: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "capacityProvider" ],
                                members: {
                                    base: {
                                        type: "integer"
                                    },
                                    capacityProvider: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    weight: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        EnableECSManagedTags: {
                            type: "boolean"
                        },
                        EnableExecuteCommand: {
                            type: "boolean"
                        },
                        Group: {},
                        LaunchType: {},
                        NetworkConfiguration: {
                            type: "structure",
                            members: {
                                awsvpcConfiguration: {
                                    type: "structure",
                                    required: [ "Subnets" ],
                                    members: {
                                        AssignPublicIp: {},
                                        SecurityGroups: {
                                            type: "list",
                                            member: {
                                                type: "string",
                                                sensitive: true
                                            }
                                        },
                                        Subnets: {
                                            type: "list",
                                            member: {
                                                type: "string",
                                                sensitive: true
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        Overrides: {
                            type: "structure",
                            members: {
                                ContainerOverrides: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Command: {
                                                shape: "S27"
                                            },
                                            Cpu: {
                                                type: "integer"
                                            },
                                            Environment: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        name: {},
                                                        value: {}
                                                    }
                                                }
                                            },
                                            EnvironmentFiles: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "type", "value" ],
                                                    members: {
                                                        type: {},
                                                        value: {}
                                                    }
                                                }
                                            },
                                            Memory: {
                                                type: "integer"
                                            },
                                            MemoryReservation: {
                                                type: "integer"
                                            },
                                            Name: {},
                                            ResourceRequirements: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "type", "value" ],
                                                    members: {
                                                        type: {},
                                                        value: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Cpu: {},
                                EphemeralStorage: {
                                    type: "structure",
                                    required: [ "sizeInGiB" ],
                                    members: {
                                        sizeInGiB: {
                                            type: "integer"
                                        }
                                    }
                                },
                                ExecutionRoleArn: {},
                                InferenceAcceleratorOverrides: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            deviceName: {},
                                            deviceType: {}
                                        }
                                    }
                                },
                                Memory: {},
                                TaskRoleArn: {}
                            }
                        },
                        PlacementConstraints: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    expression: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    type: {}
                                }
                            }
                        },
                        PlacementStrategy: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    field: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    type: {}
                                }
                            }
                        },
                        PlatformVersion: {},
                        PropagateTags: {},
                        ReferenceId: {
                            type: "string",
                            sensitive: true
                        },
                        Tags: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Key", "Value" ],
                                members: {
                                    Key: {},
                                    Value: {
                                        shape: "S21"
                                    }
                                }
                            }
                        },
                        TaskCount: {
                            type: "integer"
                        },
                        TaskDefinitionArn: {}
                    }
                },
                EventBridgeEventBusParameters: {
                    type: "structure",
                    members: {
                        DetailType: {
                            type: "string",
                            sensitive: true
                        },
                        EndpointId: {
                            type: "string",
                            sensitive: true
                        },
                        Resources: {
                            type: "list",
                            member: {}
                        },
                        Source: {
                            type: "string",
                            sensitive: true
                        },
                        Time: {}
                    }
                },
                HttpParameters: {
                    type: "structure",
                    members: {
                        HeaderParameters: {
                            shape: "S7"
                        },
                        PathParameterValues: {
                            shape: "Sa"
                        },
                        QueryStringParameters: {
                            shape: "Sc"
                        }
                    }
                },
                InputTemplate: {
                    shape: "Sf"
                },
                KinesisStreamParameters: {
                    type: "structure",
                    required: [ "PartitionKey" ],
                    members: {
                        PartitionKey: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                LambdaFunctionParameters: {
                    type: "structure",
                    members: {
                        InvocationType: {}
                    }
                },
                RedshiftDataParameters: {
                    type: "structure",
                    required: [ "Database", "Sqls" ],
                    members: {
                        Database: {
                            type: "string",
                            sensitive: true
                        },
                        DbUser: {
                            type: "string",
                            sensitive: true
                        },
                        SecretManagerArn: {},
                        Sqls: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        },
                        StatementName: {
                            type: "string",
                            sensitive: true
                        },
                        WithEvent: {
                            type: "boolean"
                        }
                    }
                },
                SageMakerPipelineParameters: {
                    type: "structure",
                    members: {
                        PipelineParameterList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "Value" ],
                                members: {
                                    Name: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    Value: {
                                        type: "string",
                                        sensitive: true
                                    }
                                }
                            }
                        }
                    }
                },
                SqsQueueParameters: {
                    type: "structure",
                    members: {
                        MessageDeduplicationId: {
                            type: "string",
                            sensitive: true
                        },
                        MessageGroupId: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                StepFunctionStateMachineParameters: {
                    type: "structure",
                    members: {
                        InvocationType: {}
                    }
                }
            }
        },
        S27: {
            type: "list",
            member: {}
        },
        S51: {
            type: "string",
            sensitive: true
        }
    },
    xmlNamespace: "http://events.amazonaws.com/doc/2015-10-07",
    paginators: {
        ListPipes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Pipes"
        }
    }
};

AWS.apiLoader.services["sagemakermetrics"] = {};

AWS.SageMakerMetrics = AWS.Service.defineService("sagemakermetrics", [ "2022-09-30" ]);

AWS.apiLoader.services["sagemakermetrics"]["2022-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-09-30",
        endpointPrefix: "metrics.sagemaker",
        protocol: "rest-json",
        serviceAbbreviation: "SageMaker Metrics",
        serviceFullName: "Amazon SageMaker Metrics Service",
        serviceId: "SageMaker Metrics",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "sagemaker-metrics-2022-09-30"
    },
    operations: {
        BatchPutMetrics: {
            http: {
                method: "PUT",
                requestUri: "/BatchPutMetrics"
            },
            input: {
                type: "structure",
                required: [ "TrialComponentName", "MetricData" ],
                members: {
                    TrialComponentName: {},
                    MetricData: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MetricName", "Timestamp", "Value" ],
                            members: {
                                MetricName: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Step: {
                                    type: "integer"
                                },
                                Value: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Code: {},
                                MetricIndex: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["kinesisvideowebrtcstorage"] = {};

AWS.KinesisVideoWebRTCStorage = AWS.Service.defineService("kinesisvideowebrtcstorage", [ "2018-05-10" ]);

AWS.apiLoader.services["kinesisvideowebrtcstorage"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "kinesisvideo",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Kinesis Video WebRTC Storage",
        serviceId: "Kinesis Video WebRTC Storage",
        signatureVersion: "v4",
        signingName: "kinesisvideo",
        uid: "kinesis-video-webrtc-storage-2018-05-10"
    },
    operations: {
        JoinStorageSession: {
            http: {
                requestUri: "/joinStorageSession",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["licensemanagerlinuxsubscriptions"] = {};

AWS.LicenseManagerLinuxSubscriptions = AWS.Service.defineService("licensemanagerlinuxsubscriptions", [ "2018-05-10" ]);

AWS.apiLoader.services["licensemanagerlinuxsubscriptions"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "license-manager-linux-subscriptions",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS License Manager Linux Subscriptions",
        serviceId: "License Manager Linux Subscriptions",
        signatureVersion: "v4",
        signingName: "license-manager-linux-subscriptions",
        uid: "license-manager-linux-subscriptions-2018-05-10"
    },
    operations: {
        GetServiceSettings: {
            http: {
                requestUri: "/subscription/GetServiceSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    HomeRegions: {
                        shape: "S3"
                    },
                    LinuxSubscriptionsDiscovery: {},
                    LinuxSubscriptionsDiscoverySettings: {
                        shape: "S6"
                    },
                    Status: {},
                    StatusMessage: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        ListLinuxSubscriptionInstances: {
            http: {
                requestUri: "/subscription/ListLinuxSubscriptionInstances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Sc"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountID: {},
                                AmiId: {},
                                InstanceID: {},
                                InstanceType: {},
                                LastUpdatedTime: {},
                                ProductCode: {
                                    type: "list",
                                    member: {}
                                },
                                Region: {},
                                Status: {},
                                SubscriptionName: {},
                                UsageOperation: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListLinuxSubscriptions: {
            http: {
                requestUri: "/subscription/ListLinuxSubscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Sc"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Subscriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceCount: {
                                    type: "long"
                                },
                                Name: {},
                                Type: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        UpdateServiceSettings: {
            http: {
                requestUri: "/subscription/UpdateServiceSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "LinuxSubscriptionsDiscovery", "LinuxSubscriptionsDiscoverySettings" ],
                members: {
                    AllowUpdate: {
                        type: "boolean"
                    },
                    LinuxSubscriptionsDiscovery: {},
                    LinuxSubscriptionsDiscoverySettings: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HomeRegions: {
                        shape: "S3"
                    },
                    LinuxSubscriptionsDiscovery: {},
                    LinuxSubscriptionsDiscoverySettings: {
                        shape: "S6"
                    },
                    Status: {},
                    StatusMessage: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "structure",
            required: [ "OrganizationIntegration", "SourceRegions" ],
            members: {
                OrganizationIntegration: {},
                SourceRegions: {
                    shape: "S3"
                }
            }
        },
        S9: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Operator: {},
                    Values: {
                        shape: "S3"
                    }
                }
            }
        }
    },
    paginators: {
        ListLinuxSubscriptionInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Instances"
        },
        ListLinuxSubscriptions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Subscriptions"
        }
    }
};

AWS.apiLoader.services["kendraranking"] = {};

AWS.KendraRanking = AWS.Service.defineService("kendraranking", [ "2022-10-19" ]);

AWS.apiLoader.services["kendraranking"]["2022-10-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-10-19",
        endpointPrefix: "kendra-ranking",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Kendra Ranking",
        serviceFullName: "Amazon Kendra Intelligent Ranking",
        serviceId: "Kendra Ranking",
        signatureVersion: "v4",
        signingName: "kendra-ranking",
        targetPrefix: "AWSKendraRerankingFrontendService",
        uid: "kendra-ranking-2022-10-19"
    },
    operations: {
        CreateRescoreExecutionPlan: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    CapacityUnits: {
                        shape: "S4"
                    },
                    Tags: {
                        shape: "S6"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id", "Arn" ],
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        DeleteRescoreExecutionPlan: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        DescribeRescoreExecutionPlan: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {},
                    Name: {},
                    Description: {},
                    CapacityUnits: {
                        shape: "S4"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    Status: {},
                    ErrorMessage: {}
                }
            }
        },
        ListRescoreExecutionPlans: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Id: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        Rescore: {
            input: {
                type: "structure",
                required: [ "RescoreExecutionPlanId", "SearchQuery", "Documents" ],
                members: {
                    RescoreExecutionPlanId: {},
                    SearchQuery: {},
                    Documents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "OriginalScore" ],
                            members: {
                                Id: {},
                                GroupId: {},
                                Title: {},
                                Body: {},
                                TokenizedTitle: {
                                    type: "list",
                                    member: {}
                                },
                                TokenizedBody: {
                                    type: "list",
                                    member: {}
                                },
                                OriginalScore: {
                                    type: "float"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RescoreId: {},
                    ResultItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentId: {},
                                Score: {
                                    type: "float"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRescoreExecutionPlan: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    Name: {},
                    Description: {},
                    CapacityUnits: {
                        shape: "S4"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "RescoreCapacityUnits" ],
            members: {
                RescoreCapacityUnits: {
                    type: "integer"
                }
            }
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListRescoreExecutionPlans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["cleanrooms"] = {};

AWS.CleanRooms = AWS.Service.defineService("cleanrooms", [ "2022-02-17" ]);

AWS.apiLoader.services["cleanrooms"]["2022-02-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-02-17",
        endpointPrefix: "cleanrooms",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Clean Rooms Service",
        serviceId: "CleanRooms",
        signatureVersion: "v4",
        signingName: "cleanrooms",
        uid: "cleanrooms-2022-02-17"
    },
    operations: {
        BatchGetCollaborationAnalysisTemplate: {
            http: {
                requestUri: "/collaborations/{collaborationIdentifier}/batch-analysistemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "analysisTemplateArns" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    analysisTemplateArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationAnalysisTemplates", "errors" ],
                members: {
                    collaborationAnalysisTemplates: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "code", "message" ],
                            members: {
                                arn: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetSchema: {
            http: {
                requestUri: "/collaborations/{collaborationIdentifier}/batch-schema",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "names" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    names: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "schemas", "errors" ],
                members: {
                    schemas: {
                        type: "list",
                        member: {
                            shape: "Sx"
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "code", "message" ],
                            members: {
                                name: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CreateAnalysisTemplate: {
            http: {
                requestUri: "/memberships/{membershipIdentifier}/analysistemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "name", "format", "source" ],
                members: {
                    description: {},
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    name: {},
                    format: {},
                    source: {
                        shape: "Sj"
                    },
                    tags: {
                        shape: "S1b"
                    },
                    analysisParameters: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisTemplate" ],
                members: {
                    analysisTemplate: {
                        shape: "S1f"
                    }
                }
            }
        },
        CreateCollaboration: {
            http: {
                requestUri: "/collaborations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "members", "name", "description", "creatorMemberAbilities", "creatorDisplayName", "queryLogStatus" ],
                members: {
                    members: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "memberAbilities", "displayName" ],
                            members: {
                                accountId: {},
                                memberAbilities: {
                                    shape: "S1k"
                                },
                                displayName: {},
                                paymentConfiguration: {
                                    shape: "S1n"
                                }
                            }
                        }
                    },
                    name: {},
                    description: {},
                    creatorMemberAbilities: {
                        shape: "S1k"
                    },
                    creatorDisplayName: {},
                    dataEncryptionMetadata: {
                        shape: "S1s"
                    },
                    queryLogStatus: {},
                    tags: {
                        shape: "S1b"
                    },
                    creatorPaymentConfiguration: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaboration" ],
                members: {
                    collaboration: {
                        shape: "S1v"
                    }
                }
            }
        },
        CreateConfiguredAudienceModelAssociation: {
            http: {
                requestUri: "/memberships/{membershipIdentifier}/configuredaudiencemodelassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "configuredAudienceModelArn", "configuredAudienceModelAssociationName", "manageResourcePolicies" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    configuredAudienceModelArn: {},
                    configuredAudienceModelAssociationName: {},
                    manageResourcePolicies: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S1b"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelAssociation" ],
                members: {
                    configuredAudienceModelAssociation: {
                        shape: "S21"
                    }
                }
            }
        },
        CreateConfiguredTable: {
            http: {
                requestUri: "/configuredTables",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "tableReference", "allowedColumns", "analysisMethod" ],
                members: {
                    name: {},
                    description: {},
                    tableReference: {
                        shape: "S25"
                    },
                    allowedColumns: {
                        shape: "S29"
                    },
                    analysisMethod: {},
                    tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTable" ],
                members: {
                    configuredTable: {
                        shape: "S2b"
                    }
                }
            },
            idempotent: true
        },
        CreateConfiguredTableAnalysisRule: {
            http: {
                requestUri: "/configuredTables/{configuredTableIdentifier}/analysisRule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredTableIdentifier", "analysisRuleType", "analysisRulePolicy" ],
                members: {
                    configuredTableIdentifier: {
                        location: "uri",
                        locationName: "configuredTableIdentifier"
                    },
                    analysisRuleType: {},
                    analysisRulePolicy: {
                        shape: "S2h"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisRule" ],
                members: {
                    analysisRule: {
                        shape: "S39"
                    }
                }
            },
            idempotent: true
        },
        CreateConfiguredTableAssociation: {
            http: {
                requestUri: "/memberships/{membershipIdentifier}/configuredTableAssociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "membershipIdentifier", "configuredTableIdentifier", "roleArn" ],
                members: {
                    name: {},
                    description: {},
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    configuredTableIdentifier: {},
                    roleArn: {},
                    tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTableAssociation" ],
                members: {
                    configuredTableAssociation: {
                        shape: "S3d"
                    }
                }
            }
        },
        CreateMembership: {
            http: {
                requestUri: "/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "queryLogStatus" ],
                members: {
                    collaborationIdentifier: {},
                    queryLogStatus: {},
                    tags: {
                        shape: "S1b"
                    },
                    defaultResultConfiguration: {
                        shape: "S3h"
                    },
                    paymentConfiguration: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "membership" ],
                members: {
                    membership: {
                        shape: "S3q"
                    }
                }
            }
        },
        CreatePrivacyBudgetTemplate: {
            http: {
                requestUri: "/memberships/{membershipIdentifier}/privacybudgettemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "autoRefresh", "privacyBudgetType", "parameters" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    autoRefresh: {},
                    privacyBudgetType: {},
                    parameters: {
                        type: "structure",
                        members: {
                            differentialPrivacy: {
                                type: "structure",
                                required: [ "epsilon", "usersNoisePerQuery" ],
                                members: {
                                    epsilon: {
                                        type: "integer"
                                    },
                                    usersNoisePerQuery: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "privacyBudgetTemplate" ],
                members: {
                    privacyBudgetTemplate: {
                        shape: "S40"
                    }
                }
            }
        },
        DeleteAnalysisTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/memberships/{membershipIdentifier}/analysistemplates/{analysisTemplateIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "analysisTemplateIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    analysisTemplateIdentifier: {
                        location: "uri",
                        locationName: "analysisTemplateIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteCollaboration: {
            http: {
                method: "DELETE",
                requestUri: "/collaborations/{collaborationIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteConfiguredAudienceModelAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/memberships/{membershipIdentifier}/configuredaudiencemodelassociations/{configuredAudienceModelAssociationIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelAssociationIdentifier", "membershipIdentifier" ],
                members: {
                    configuredAudienceModelAssociationIdentifier: {
                        location: "uri",
                        locationName: "configuredAudienceModelAssociationIdentifier"
                    },
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteConfiguredTable: {
            http: {
                method: "DELETE",
                requestUri: "/configuredTables/{configuredTableIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "configuredTableIdentifier" ],
                members: {
                    configuredTableIdentifier: {
                        location: "uri",
                        locationName: "configuredTableIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteConfiguredTableAnalysisRule: {
            http: {
                method: "DELETE",
                requestUri: "/configuredTables/{configuredTableIdentifier}/analysisRule/{analysisRuleType}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "configuredTableIdentifier", "analysisRuleType" ],
                members: {
                    configuredTableIdentifier: {
                        location: "uri",
                        locationName: "configuredTableIdentifier"
                    },
                    analysisRuleType: {
                        location: "uri",
                        locationName: "analysisRuleType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteConfiguredTableAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/memberships/{membershipIdentifier}/configuredTableAssociations/{configuredTableAssociationIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "configuredTableAssociationIdentifier", "membershipIdentifier" ],
                members: {
                    configuredTableAssociationIdentifier: {
                        location: "uri",
                        locationName: "configuredTableAssociationIdentifier"
                    },
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteMember: {
            http: {
                method: "DELETE",
                requestUri: "/collaborations/{collaborationIdentifier}/member/{accountId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "accountId" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteMembership: {
            http: {
                method: "DELETE",
                requestUri: "/memberships/{membershipIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePrivacyBudgetTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/memberships/{membershipIdentifier}/privacybudgettemplates/{privacyBudgetTemplateIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "privacyBudgetTemplateIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    privacyBudgetTemplateIdentifier: {
                        location: "uri",
                        locationName: "privacyBudgetTemplateIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAnalysisTemplate: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/analysistemplates/{analysisTemplateIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "analysisTemplateIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    analysisTemplateIdentifier: {
                        location: "uri",
                        locationName: "analysisTemplateIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisTemplate" ],
                members: {
                    analysisTemplate: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetCollaboration: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaboration" ],
                members: {
                    collaboration: {
                        shape: "S1v"
                    }
                }
            }
        },
        GetCollaborationAnalysisTemplate: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/analysistemplates/{analysisTemplateArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "analysisTemplateArn" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    analysisTemplateArn: {
                        location: "uri",
                        locationName: "analysisTemplateArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationAnalysisTemplate" ],
                members: {
                    collaborationAnalysisTemplate: {
                        shape: "S7"
                    }
                }
            }
        },
        GetCollaborationConfiguredAudienceModelAssociation: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/configuredaudiencemodelassociations/{configuredAudienceModelAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "configuredAudienceModelAssociationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    configuredAudienceModelAssociationIdentifier: {
                        location: "uri",
                        locationName: "configuredAudienceModelAssociationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationConfiguredAudienceModelAssociation" ],
                members: {
                    collaborationConfiguredAudienceModelAssociation: {
                        type: "structure",
                        required: [ "id", "arn", "collaborationId", "collaborationArn", "configuredAudienceModelArn", "name", "creatorAccountId", "createTime", "updateTime" ],
                        members: {
                            id: {},
                            arn: {},
                            collaborationId: {},
                            collaborationArn: {},
                            configuredAudienceModelArn: {},
                            name: {},
                            description: {},
                            creatorAccountId: {},
                            createTime: {
                                type: "timestamp"
                            },
                            updateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetCollaborationPrivacyBudgetTemplate: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/privacybudgettemplates/{privacyBudgetTemplateIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "privacyBudgetTemplateIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    privacyBudgetTemplateIdentifier: {
                        location: "uri",
                        locationName: "privacyBudgetTemplateIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationPrivacyBudgetTemplate" ],
                members: {
                    collaborationPrivacyBudgetTemplate: {
                        type: "structure",
                        required: [ "id", "arn", "collaborationId", "collaborationArn", "creatorAccountId", "createTime", "updateTime", "privacyBudgetType", "autoRefresh", "parameters" ],
                        members: {
                            id: {},
                            arn: {},
                            collaborationId: {},
                            collaborationArn: {},
                            creatorAccountId: {},
                            createTime: {
                                type: "timestamp"
                            },
                            updateTime: {
                                type: "timestamp"
                            },
                            privacyBudgetType: {},
                            autoRefresh: {},
                            parameters: {
                                shape: "S43"
                            }
                        }
                    }
                }
            }
        },
        GetConfiguredAudienceModelAssociation: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/configuredaudiencemodelassociations/{configuredAudienceModelAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelAssociationIdentifier", "membershipIdentifier" ],
                members: {
                    configuredAudienceModelAssociationIdentifier: {
                        location: "uri",
                        locationName: "configuredAudienceModelAssociationIdentifier"
                    },
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelAssociation" ],
                members: {
                    configuredAudienceModelAssociation: {
                        shape: "S21"
                    }
                }
            }
        },
        GetConfiguredTable: {
            http: {
                method: "GET",
                requestUri: "/configuredTables/{configuredTableIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredTableIdentifier" ],
                members: {
                    configuredTableIdentifier: {
                        location: "uri",
                        locationName: "configuredTableIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTable" ],
                members: {
                    configuredTable: {
                        shape: "S2b"
                    }
                }
            }
        },
        GetConfiguredTableAnalysisRule: {
            http: {
                method: "GET",
                requestUri: "/configuredTables/{configuredTableIdentifier}/analysisRule/{analysisRuleType}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredTableIdentifier", "analysisRuleType" ],
                members: {
                    configuredTableIdentifier: {
                        location: "uri",
                        locationName: "configuredTableIdentifier"
                    },
                    analysisRuleType: {
                        location: "uri",
                        locationName: "analysisRuleType"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisRule" ],
                members: {
                    analysisRule: {
                        shape: "S39"
                    }
                }
            }
        },
        GetConfiguredTableAssociation: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/configuredTableAssociations/{configuredTableAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredTableAssociationIdentifier", "membershipIdentifier" ],
                members: {
                    configuredTableAssociationIdentifier: {
                        location: "uri",
                        locationName: "configuredTableAssociationIdentifier"
                    },
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTableAssociation" ],
                members: {
                    configuredTableAssociation: {
                        shape: "S3d"
                    }
                }
            }
        },
        GetMembership: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "membership" ],
                members: {
                    membership: {
                        shape: "S3q"
                    }
                }
            }
        },
        GetPrivacyBudgetTemplate: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/privacybudgettemplates/{privacyBudgetTemplateIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "privacyBudgetTemplateIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    privacyBudgetTemplateIdentifier: {
                        location: "uri",
                        locationName: "privacyBudgetTemplateIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "privacyBudgetTemplate" ],
                members: {
                    privacyBudgetTemplate: {
                        shape: "S40"
                    }
                }
            }
        },
        GetProtectedQuery: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/protectedQueries/{protectedQueryIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "protectedQueryIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    protectedQueryIdentifier: {
                        location: "uri",
                        locationName: "protectedQueryIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "protectedQuery" ],
                members: {
                    protectedQuery: {
                        shape: "S5f"
                    }
                }
            }
        },
        GetSchema: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/schemas/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "name" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "schema" ],
                members: {
                    schema: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetSchemaAnalysisRule: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/schemas/{name}/analysisRule/{type}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "name", "type" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    type: {
                        location: "uri",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisRule" ],
                members: {
                    analysisRule: {
                        type: "structure",
                        required: [ "collaborationId", "type", "name", "createTime", "updateTime", "policy" ],
                        members: {
                            collaborationId: {},
                            type: {},
                            name: {},
                            createTime: {
                                type: "timestamp"
                            },
                            updateTime: {
                                type: "timestamp"
                            },
                            policy: {
                                type: "structure",
                                members: {
                                    v1: {
                                        type: "structure",
                                        members: {
                                            list: {
                                                shape: "S2j"
                                            },
                                            aggregation: {
                                                shape: "S2p"
                                            },
                                            custom: {
                                                shape: "S31"
                                            }
                                        },
                                        union: true
                                    }
                                },
                                union: true
                            }
                        }
                    }
                }
            }
        },
        ListAnalysisTemplates: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/analysistemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisTemplateSummaries" ],
                members: {
                    nextToken: {},
                    analysisTemplateSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createTime", "id", "name", "updateTime", "membershipArn", "membershipId", "collaborationArn", "collaborationId" ],
                            members: {
                                arn: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                id: {},
                                name: {},
                                updateTime: {
                                    type: "timestamp"
                                },
                                membershipArn: {},
                                membershipId: {},
                                collaborationArn: {},
                                collaborationId: {},
                                description: {}
                            }
                        }
                    }
                }
            }
        },
        ListCollaborationAnalysisTemplates: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/analysistemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationAnalysisTemplateSummaries" ],
                members: {
                    nextToken: {},
                    collaborationAnalysisTemplateSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createTime", "id", "name", "updateTime", "collaborationArn", "collaborationId", "creatorAccountId" ],
                            members: {
                                arn: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                id: {},
                                name: {},
                                updateTime: {
                                    type: "timestamp"
                                },
                                collaborationArn: {},
                                collaborationId: {},
                                creatorAccountId: {},
                                description: {}
                            }
                        }
                    }
                }
            }
        },
        ListCollaborationConfiguredAudienceModelAssociations: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/configuredaudiencemodelassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationConfiguredAudienceModelAssociationSummaries" ],
                members: {
                    collaborationConfiguredAudienceModelAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createTime", "id", "name", "updateTime", "collaborationArn", "collaborationId", "creatorAccountId" ],
                            members: {
                                arn: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                id: {},
                                name: {},
                                updateTime: {
                                    type: "timestamp"
                                },
                                collaborationArn: {},
                                collaborationId: {},
                                creatorAccountId: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCollaborationPrivacyBudgetTemplates: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/privacybudgettemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationPrivacyBudgetTemplateSummaries" ],
                members: {
                    nextToken: {},
                    collaborationPrivacyBudgetTemplateSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "collaborationId", "collaborationArn", "creatorAccountId", "privacyBudgetType", "createTime", "updateTime" ],
                            members: {
                                id: {},
                                arn: {},
                                collaborationId: {},
                                collaborationArn: {},
                                creatorAccountId: {},
                                privacyBudgetType: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListCollaborationPrivacyBudgets: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/privacybudgets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier", "privacyBudgetType" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    privacyBudgetType: {
                        location: "querystring",
                        locationName: "privacyBudgetType"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationPrivacyBudgetSummaries" ],
                members: {
                    collaborationPrivacyBudgetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "privacyBudgetTemplateId", "privacyBudgetTemplateArn", "collaborationId", "collaborationArn", "creatorAccountId", "type", "createTime", "updateTime", "budget" ],
                            members: {
                                id: {},
                                privacyBudgetTemplateId: {},
                                privacyBudgetTemplateArn: {},
                                collaborationId: {},
                                collaborationArn: {},
                                creatorAccountId: {},
                                type: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                budget: {
                                    shape: "S6u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCollaborations: {
            http: {
                method: "GET",
                requestUri: "/collaborations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    memberStatus: {
                        location: "querystring",
                        locationName: "memberStatus"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "collaborationList" ],
                members: {
                    nextToken: {},
                    collaborationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "creatorAccountId", "creatorDisplayName", "createTime", "updateTime", "memberStatus" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                creatorAccountId: {},
                                creatorDisplayName: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                memberStatus: {},
                                membershipId: {},
                                membershipArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListConfiguredAudienceModelAssociations: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/configuredaudiencemodelassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelAssociationSummaries" ],
                members: {
                    configuredAudienceModelAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "membershipId", "membershipArn", "collaborationArn", "collaborationId", "createTime", "updateTime", "id", "arn", "name", "configuredAudienceModelArn" ],
                            members: {
                                membershipId: {},
                                membershipArn: {},
                                collaborationArn: {},
                                collaborationId: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                id: {},
                                arn: {},
                                name: {},
                                configuredAudienceModelArn: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConfiguredTableAssociations: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/configuredTableAssociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTableAssociationSummaries" ],
                members: {
                    configuredTableAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "configuredTableId", "membershipId", "membershipArn", "name", "createTime", "updateTime", "id", "arn" ],
                            members: {
                                configuredTableId: {},
                                membershipId: {},
                                membershipArn: {},
                                name: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                id: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConfiguredTables: {
            http: {
                method: "GET",
                requestUri: "/configuredTables",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTableSummaries" ],
                members: {
                    configuredTableSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "createTime", "updateTime", "analysisRuleTypes", "analysisMethod" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                analysisRuleTypes: {
                                    shape: "S2d"
                                },
                                analysisMethod: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/members",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "memberSummaries" ],
                members: {
                    nextToken: {},
                    memberSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "status", "displayName", "abilities", "createTime", "updateTime", "paymentConfiguration" ],
                            members: {
                                accountId: {},
                                status: {},
                                displayName: {},
                                abilities: {
                                    shape: "S1k"
                                },
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                membershipId: {},
                                membershipArn: {},
                                paymentConfiguration: {
                                    shape: "S1n"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListMemberships: {
            http: {
                method: "GET",
                requestUri: "/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "membershipSummaries" ],
                members: {
                    nextToken: {},
                    membershipSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "collaborationArn", "collaborationId", "collaborationCreatorAccountId", "collaborationCreatorDisplayName", "collaborationName", "createTime", "updateTime", "status", "memberAbilities", "paymentConfiguration" ],
                            members: {
                                id: {},
                                arn: {},
                                collaborationArn: {},
                                collaborationId: {},
                                collaborationCreatorAccountId: {},
                                collaborationCreatorDisplayName: {},
                                collaborationName: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                memberAbilities: {
                                    shape: "S1k"
                                },
                                paymentConfiguration: {
                                    shape: "S3n"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPrivacyBudgetTemplates: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/privacybudgettemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "privacyBudgetTemplateSummaries" ],
                members: {
                    nextToken: {},
                    privacyBudgetTemplateSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "membershipId", "membershipArn", "collaborationId", "collaborationArn", "privacyBudgetType", "createTime", "updateTime" ],
                            members: {
                                id: {},
                                arn: {},
                                membershipId: {},
                                membershipArn: {},
                                collaborationId: {},
                                collaborationArn: {},
                                privacyBudgetType: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPrivacyBudgets: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/privacybudgets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "privacyBudgetType" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    privacyBudgetType: {
                        location: "querystring",
                        locationName: "privacyBudgetType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "privacyBudgetSummaries" ],
                members: {
                    privacyBudgetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "privacyBudgetTemplateId", "privacyBudgetTemplateArn", "membershipId", "membershipArn", "collaborationId", "collaborationArn", "type", "createTime", "updateTime", "budget" ],
                            members: {
                                id: {},
                                privacyBudgetTemplateId: {},
                                privacyBudgetTemplateArn: {},
                                membershipId: {},
                                membershipArn: {},
                                collaborationId: {},
                                collaborationArn: {},
                                type: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                budget: {
                                    shape: "S6u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProtectedQueries: {
            http: {
                method: "GET",
                requestUri: "/memberships/{membershipIdentifier}/protectedQueries",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "protectedQueries" ],
                members: {
                    nextToken: {},
                    protectedQueries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "membershipId", "membershipArn", "createTime", "status" ],
                            members: {
                                id: {},
                                membershipId: {},
                                membershipArn: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        ListSchemas: {
            http: {
                method: "GET",
                requestUri: "/collaborations/{collaborationIdentifier}/schemas",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    schemaType: {
                        location: "querystring",
                        locationName: "schemaType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "schemaSummaries" ],
                members: {
                    schemaSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type", "creatorAccountId", "createTime", "updateTime", "collaborationId", "collaborationArn", "analysisRuleTypes" ],
                            members: {
                                name: {},
                                type: {},
                                creatorAccountId: {},
                                createTime: {
                                    type: "timestamp"
                                },
                                updateTime: {
                                    type: "timestamp"
                                },
                                collaborationId: {},
                                collaborationArn: {},
                                analysisRuleTypes: {
                                    shape: "S12"
                                },
                                analysisMethod: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "S1b"
                    }
                }
            }
        },
        PreviewPrivacyImpact: {
            http: {
                requestUri: "/memberships/{membershipIdentifier}/previewprivacyimpact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "parameters" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    parameters: {
                        type: "structure",
                        members: {
                            differentialPrivacy: {
                                type: "structure",
                                required: [ "epsilon", "usersNoisePerQuery" ],
                                members: {
                                    epsilon: {
                                        type: "integer"
                                    },
                                    usersNoisePerQuery: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "privacyImpact" ],
                members: {
                    privacyImpact: {
                        type: "structure",
                        members: {
                            differentialPrivacy: {
                                type: "structure",
                                required: [ "aggregations" ],
                                members: {
                                    aggregations: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "type", "maxCount" ],
                                            members: {
                                                type: {},
                                                maxCount: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            }
        },
        StartProtectedQuery: {
            http: {
                requestUri: "/memberships/{membershipIdentifier}/protectedQueries",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "type", "membershipIdentifier", "sqlParameters" ],
                members: {
                    type: {},
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    sqlParameters: {
                        shape: "S5g"
                    },
                    resultConfiguration: {
                        shape: "S5k"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "protectedQuery" ],
                members: {
                    protectedQuery: {
                        shape: "S5f"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAnalysisTemplate: {
            http: {
                method: "PATCH",
                requestUri: "/memberships/{membershipIdentifier}/analysistemplates/{analysisTemplateIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "analysisTemplateIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    analysisTemplateIdentifier: {
                        location: "uri",
                        locationName: "analysisTemplateIdentifier"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "analysisTemplate" ],
                members: {
                    analysisTemplate: {
                        shape: "S1f"
                    }
                }
            }
        },
        UpdateCollaboration: {
            http: {
                method: "PATCH",
                requestUri: "/collaborations/{collaborationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "collaborationIdentifier" ],
                members: {
                    collaborationIdentifier: {
                        location: "uri",
                        locationName: "collaborationIdentifier"
                    },
                    name: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "collaboration" ],
                members: {
                    collaboration: {
                        shape: "S1v"
                    }
                }
            }
        },
        UpdateConfiguredAudienceModelAssociation: {
            http: {
                method: "PATCH",
                requestUri: "/memberships/{membershipIdentifier}/configuredaudiencemodelassociations/{configuredAudienceModelAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelAssociationIdentifier", "membershipIdentifier" ],
                members: {
                    configuredAudienceModelAssociationIdentifier: {
                        location: "uri",
                        locationName: "configuredAudienceModelAssociationIdentifier"
                    },
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    description: {},
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelAssociation" ],
                members: {
                    configuredAudienceModelAssociation: {
                        shape: "S21"
                    }
                }
            }
        },
        UpdateConfiguredTable: {
            http: {
                method: "PATCH",
                requestUri: "/configuredTables/{configuredTableIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredTableIdentifier" ],
                members: {
                    configuredTableIdentifier: {
                        location: "uri",
                        locationName: "configuredTableIdentifier"
                    },
                    name: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTable" ],
                members: {
                    configuredTable: {
                        shape: "S2b"
                    }
                }
            }
        },
        UpdateConfiguredTableAnalysisRule: {
            http: {
                method: "PATCH",
                requestUri: "/configuredTables/{configuredTableIdentifier}/analysisRule/{analysisRuleType}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredTableIdentifier", "analysisRuleType", "analysisRulePolicy" ],
                members: {
                    configuredTableIdentifier: {
                        location: "uri",
                        locationName: "configuredTableIdentifier"
                    },
                    analysisRuleType: {
                        location: "uri",
                        locationName: "analysisRuleType"
                    },
                    analysisRulePolicy: {
                        shape: "S2h"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisRule" ],
                members: {
                    analysisRule: {
                        shape: "S39"
                    }
                }
            }
        },
        UpdateConfiguredTableAssociation: {
            http: {
                method: "PATCH",
                requestUri: "/memberships/{membershipIdentifier}/configuredTableAssociations/{configuredTableAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredTableAssociationIdentifier", "membershipIdentifier" ],
                members: {
                    configuredTableAssociationIdentifier: {
                        location: "uri",
                        locationName: "configuredTableAssociationIdentifier"
                    },
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    description: {},
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "configuredTableAssociation" ],
                members: {
                    configuredTableAssociation: {
                        shape: "S3d"
                    }
                }
            }
        },
        UpdateMembership: {
            http: {
                method: "PATCH",
                requestUri: "/memberships/{membershipIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    queryLogStatus: {},
                    defaultResultConfiguration: {
                        shape: "S3h"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "membership" ],
                members: {
                    membership: {
                        shape: "S3q"
                    }
                }
            }
        },
        UpdatePrivacyBudgetTemplate: {
            http: {
                method: "PATCH",
                requestUri: "/memberships/{membershipIdentifier}/privacybudgettemplates/{privacyBudgetTemplateIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "privacyBudgetTemplateIdentifier", "privacyBudgetType" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    privacyBudgetTemplateIdentifier: {
                        location: "uri",
                        locationName: "privacyBudgetTemplateIdentifier"
                    },
                    privacyBudgetType: {},
                    parameters: {
                        type: "structure",
                        members: {
                            differentialPrivacy: {
                                type: "structure",
                                members: {
                                    epsilon: {
                                        type: "integer"
                                    },
                                    usersNoisePerQuery: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "privacyBudgetTemplate" ],
                members: {
                    privacyBudgetTemplate: {
                        shape: "S40"
                    }
                }
            }
        },
        UpdateProtectedQuery: {
            http: {
                method: "PATCH",
                requestUri: "/memberships/{membershipIdentifier}/protectedQueries/{protectedQueryIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "membershipIdentifier", "protectedQueryIdentifier", "targetStatus" ],
                members: {
                    membershipIdentifier: {
                        location: "uri",
                        locationName: "membershipIdentifier"
                    },
                    protectedQueryIdentifier: {
                        location: "uri",
                        locationName: "protectedQueryIdentifier"
                    },
                    targetStatus: {}
                }
            },
            output: {
                type: "structure",
                required: [ "protectedQuery" ],
                members: {
                    protectedQuery: {
                        shape: "S5f"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "id", "arn", "collaborationId", "collaborationArn", "creatorAccountId", "name", "createTime", "updateTime", "schema", "format", "source" ],
            members: {
                id: {},
                arn: {},
                collaborationId: {},
                collaborationArn: {},
                description: {},
                creatorAccountId: {},
                name: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                schema: {
                    shape: "Sf"
                },
                format: {},
                source: {
                    shape: "Sj"
                },
                analysisParameters: {
                    shape: "Sl"
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                referencedTables: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                text: {}
            },
            sensitive: true,
            union: true
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    type: {},
                    defaultValue: {}
                },
                sensitive: true
            }
        },
        Sx: {
            type: "structure",
            required: [ "columns", "partitionKeys", "analysisRuleTypes", "creatorAccountId", "name", "collaborationId", "collaborationArn", "description", "createTime", "updateTime", "type" ],
            members: {
                columns: {
                    shape: "Sy"
                },
                partitionKeys: {
                    shape: "Sy"
                },
                analysisRuleTypes: {
                    shape: "S12"
                },
                analysisMethod: {},
                creatorAccountId: {},
                name: {},
                collaborationId: {},
                collaborationArn: {},
                description: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                type: {}
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    type: {}
                }
            }
        },
        S12: {
            type: "list",
            member: {}
        },
        S1b: {
            type: "map",
            key: {},
            value: {}
        },
        S1f: {
            type: "structure",
            required: [ "id", "arn", "collaborationId", "collaborationArn", "membershipId", "membershipArn", "name", "createTime", "updateTime", "schema", "format", "source" ],
            members: {
                id: {},
                arn: {},
                collaborationId: {},
                collaborationArn: {},
                membershipId: {},
                membershipArn: {},
                description: {},
                name: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                schema: {
                    shape: "Sf"
                },
                format: {},
                source: {
                    shape: "Sj"
                },
                analysisParameters: {
                    shape: "Sl"
                }
            }
        },
        S1k: {
            type: "list",
            member: {}
        },
        S1n: {
            type: "structure",
            required: [ "queryCompute" ],
            members: {
                queryCompute: {
                    type: "structure",
                    required: [ "isResponsible" ],
                    members: {
                        isResponsible: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S1s: {
            type: "structure",
            required: [ "allowCleartext", "allowDuplicates", "allowJoinsOnColumnsWithDifferentNames", "preserveNulls" ],
            members: {
                allowCleartext: {
                    type: "boolean"
                },
                allowDuplicates: {
                    type: "boolean"
                },
                allowJoinsOnColumnsWithDifferentNames: {
                    type: "boolean"
                },
                preserveNulls: {
                    type: "boolean"
                }
            }
        },
        S1v: {
            type: "structure",
            required: [ "id", "arn", "name", "creatorAccountId", "creatorDisplayName", "createTime", "updateTime", "memberStatus", "queryLogStatus" ],
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creatorAccountId: {},
                creatorDisplayName: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                memberStatus: {},
                membershipId: {},
                membershipArn: {},
                dataEncryptionMetadata: {
                    shape: "S1s"
                },
                queryLogStatus: {}
            }
        },
        S21: {
            type: "structure",
            required: [ "id", "arn", "configuredAudienceModelArn", "membershipId", "membershipArn", "collaborationId", "collaborationArn", "name", "manageResourcePolicies", "createTime", "updateTime" ],
            members: {
                id: {},
                arn: {},
                configuredAudienceModelArn: {},
                membershipId: {},
                membershipArn: {},
                collaborationId: {},
                collaborationArn: {},
                name: {},
                manageResourcePolicies: {
                    type: "boolean"
                },
                description: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                glue: {
                    type: "structure",
                    required: [ "tableName", "databaseName" ],
                    members: {
                        tableName: {},
                        databaseName: {}
                    }
                }
            },
            union: true
        },
        S29: {
            type: "list",
            member: {}
        },
        S2b: {
            type: "structure",
            required: [ "id", "arn", "name", "tableReference", "createTime", "updateTime", "analysisRuleTypes", "analysisMethod", "allowedColumns" ],
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                tableReference: {
                    shape: "S25"
                },
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                analysisRuleTypes: {
                    shape: "S2d"
                },
                analysisMethod: {},
                allowedColumns: {
                    shape: "S29"
                }
            }
        },
        S2d: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "structure",
            members: {
                v1: {
                    type: "structure",
                    members: {
                        list: {
                            shape: "S2j"
                        },
                        aggregation: {
                            shape: "S2p"
                        },
                        custom: {
                            shape: "S31"
                        }
                    },
                    union: true
                }
            },
            union: true
        },
        S2j: {
            type: "structure",
            required: [ "joinColumns", "listColumns" ],
            members: {
                joinColumns: {
                    type: "list",
                    member: {}
                },
                allowedJoinOperators: {
                    shape: "S2m"
                },
                listColumns: {
                    shape: "S2o"
                }
            }
        },
        S2m: {
            type: "list",
            member: {}
        },
        S2o: {
            type: "list",
            member: {}
        },
        S2p: {
            type: "structure",
            required: [ "aggregateColumns", "joinColumns", "dimensionColumns", "scalarFunctions", "outputConstraints" ],
            members: {
                aggregateColumns: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "columnNames", "function" ],
                        members: {
                            columnNames: {
                                type: "list",
                                member: {}
                            },
                            function: {}
                        }
                    }
                },
                joinColumns: {
                    shape: "S2o"
                },
                joinRequired: {},
                allowedJoinOperators: {
                    shape: "S2m"
                },
                dimensionColumns: {
                    shape: "S2o"
                },
                scalarFunctions: {
                    type: "list",
                    member: {}
                },
                outputConstraints: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "columnName", "minimum", "type" ],
                        members: {
                            columnName: {},
                            minimum: {
                                type: "integer"
                            },
                            type: {}
                        }
                    }
                }
            }
        },
        S31: {
            type: "structure",
            required: [ "allowedAnalyses" ],
            members: {
                allowedAnalyses: {
                    type: "list",
                    member: {}
                },
                allowedAnalysisProviders: {
                    type: "list",
                    member: {}
                },
                differentialPrivacy: {
                    type: "structure",
                    required: [ "columns" ],
                    members: {
                        columns: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    name: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S39: {
            type: "structure",
            required: [ "configuredTableId", "configuredTableArn", "policy", "type", "createTime", "updateTime" ],
            members: {
                configuredTableId: {},
                configuredTableArn: {},
                policy: {
                    shape: "S2h"
                },
                type: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                }
            }
        },
        S3d: {
            type: "structure",
            required: [ "arn", "id", "configuredTableId", "configuredTableArn", "membershipId", "membershipArn", "roleArn", "name", "createTime", "updateTime" ],
            members: {
                arn: {},
                id: {},
                configuredTableId: {},
                configuredTableArn: {},
                membershipId: {},
                membershipArn: {},
                roleArn: {},
                name: {},
                description: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                }
            }
        },
        S3h: {
            type: "structure",
            required: [ "outputConfiguration" ],
            members: {
                outputConfiguration: {
                    type: "structure",
                    members: {
                        s3: {
                            shape: "S3j"
                        }
                    },
                    union: true
                },
                roleArn: {}
            }
        },
        S3j: {
            type: "structure",
            required: [ "resultFormat", "bucket" ],
            members: {
                resultFormat: {},
                bucket: {},
                keyPrefix: {}
            }
        },
        S3n: {
            type: "structure",
            required: [ "queryCompute" ],
            members: {
                queryCompute: {
                    type: "structure",
                    required: [ "isResponsible" ],
                    members: {
                        isResponsible: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S3q: {
            type: "structure",
            required: [ "id", "arn", "collaborationArn", "collaborationId", "collaborationCreatorAccountId", "collaborationCreatorDisplayName", "collaborationName", "createTime", "updateTime", "status", "memberAbilities", "queryLogStatus", "paymentConfiguration" ],
            members: {
                id: {},
                arn: {},
                collaborationArn: {},
                collaborationId: {},
                collaborationCreatorAccountId: {},
                collaborationCreatorDisplayName: {},
                collaborationName: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                status: {},
                memberAbilities: {
                    shape: "S1k"
                },
                queryLogStatus: {},
                defaultResultConfiguration: {
                    shape: "S3h"
                },
                paymentConfiguration: {
                    shape: "S3n"
                }
            }
        },
        S40: {
            type: "structure",
            required: [ "id", "arn", "membershipId", "membershipArn", "collaborationId", "collaborationArn", "createTime", "updateTime", "privacyBudgetType", "autoRefresh", "parameters" ],
            members: {
                id: {},
                arn: {},
                membershipId: {},
                membershipArn: {},
                collaborationId: {},
                collaborationArn: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                privacyBudgetType: {},
                autoRefresh: {},
                parameters: {
                    shape: "S43"
                }
            }
        },
        S43: {
            type: "structure",
            members: {
                differentialPrivacy: {
                    type: "structure",
                    required: [ "epsilon", "usersNoisePerQuery" ],
                    members: {
                        epsilon: {
                            type: "integer"
                        },
                        usersNoisePerQuery: {
                            type: "integer"
                        }
                    }
                }
            },
            union: true
        },
        S5f: {
            type: "structure",
            required: [ "id", "membershipId", "membershipArn", "createTime", "status" ],
            members: {
                id: {},
                membershipId: {},
                membershipArn: {},
                createTime: {
                    type: "timestamp"
                },
                sqlParameters: {
                    shape: "S5g"
                },
                status: {},
                resultConfiguration: {
                    shape: "S5k"
                },
                statistics: {
                    type: "structure",
                    members: {
                        totalDurationInMillis: {
                            type: "long"
                        }
                    }
                },
                result: {
                    type: "structure",
                    required: [ "output" ],
                    members: {
                        output: {
                            type: "structure",
                            members: {
                                s3: {
                                    type: "structure",
                                    required: [ "location" ],
                                    members: {
                                        location: {}
                                    }
                                },
                                memberList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "accountId" ],
                                        members: {
                                            accountId: {}
                                        }
                                    }
                                }
                            },
                            union: true
                        }
                    }
                },
                error: {
                    type: "structure",
                    required: [ "message", "code" ],
                    members: {
                        message: {},
                        code: {}
                    }
                },
                differentialPrivacy: {
                    type: "structure",
                    required: [ "sensitivityParameters" ],
                    members: {
                        sensitivityParameters: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "aggregationType", "aggregationExpression", "userContributionLimit" ],
                                members: {
                                    aggregationType: {},
                                    aggregationExpression: {},
                                    userContributionLimit: {
                                        type: "integer"
                                    },
                                    minColumnValue: {
                                        type: "float"
                                    },
                                    maxColumnValue: {
                                        type: "float"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S5g: {
            type: "structure",
            members: {
                queryString: {},
                analysisTemplateArn: {},
                parameters: {
                    type: "map",
                    key: {},
                    value: {}
                }
            },
            sensitive: true
        },
        S5k: {
            type: "structure",
            required: [ "outputConfiguration" ],
            members: {
                outputConfiguration: {
                    type: "structure",
                    members: {
                        s3: {
                            shape: "S3j"
                        }
                    },
                    union: true
                }
            }
        },
        S6u: {
            type: "structure",
            members: {
                differentialPrivacy: {
                    type: "structure",
                    required: [ "aggregations", "epsilon" ],
                    members: {
                        aggregations: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "type", "maxCount", "remainingCount" ],
                                members: {
                                    type: {},
                                    maxCount: {
                                        type: "integer"
                                    },
                                    remainingCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        epsilon: {
                            type: "integer"
                        }
                    }
                }
            },
            union: true
        }
    },
    paginators: {
        ListAnalysisTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "analysisTemplateSummaries"
        },
        ListCollaborationAnalysisTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "collaborationAnalysisTemplateSummaries"
        },
        ListCollaborationConfiguredAudienceModelAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "collaborationConfiguredAudienceModelAssociationSummaries"
        },
        ListCollaborationPrivacyBudgetTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "collaborationPrivacyBudgetTemplateSummaries"
        },
        ListCollaborationPrivacyBudgets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "collaborationPrivacyBudgetSummaries"
        },
        ListCollaborations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "collaborationList"
        },
        ListConfiguredAudienceModelAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "configuredAudienceModelAssociationSummaries"
        },
        ListConfiguredTableAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "configuredTableAssociationSummaries"
        },
        ListConfiguredTables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "configuredTableSummaries"
        },
        ListMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "memberSummaries"
        },
        ListMemberships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "membershipSummaries"
        },
        ListPrivacyBudgetTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "privacyBudgetTemplateSummaries"
        },
        ListPrivacyBudgets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "privacyBudgetSummaries"
        },
        ListProtectedQueries: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "protectedQueries"
        },
        ListSchemas: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "schemaSummaries"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["cloudtraildata"] = {};

AWS.CloudTrailData = AWS.Service.defineService("cloudtraildata", [ "2021-08-11" ]);

AWS.apiLoader.services["cloudtraildata"]["2021-08-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-11",
        endpointPrefix: "cloudtrail-data",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS CloudTrail Data Service",
        serviceId: "CloudTrail Data",
        signatureVersion: "v4",
        signingName: "cloudtrail-data",
        uid: "cloudtrail-data-2021-08-11"
    },
    operations: {
        PutAuditEvents: {
            http: {
                requestUri: "/PutAuditEvents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "auditEvents", "channelArn" ],
                members: {
                    auditEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventData", "id" ],
                            members: {
                                eventData: {},
                                eventDataChecksum: {},
                                id: {}
                            }
                        }
                    },
                    channelArn: {
                        location: "querystring",
                        locationName: "channelArn"
                    },
                    externalId: {
                        location: "querystring",
                        locationName: "externalId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "failed", "successful" ],
                members: {
                    failed: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "errorMessage", "id" ],
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                id: {}
                            }
                        }
                    },
                    successful: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventID", "id" ],
                            members: {
                                eventID: {},
                                id: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["tnb"] = {};

AWS.Tnb = AWS.Service.defineService("tnb", [ "2008-10-21" ]);

AWS.apiLoader.services["tnb"]["2008-10-21"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2008-10-21",
        endpointPrefix: "tnb",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Telco Network Builder",
        serviceId: "tnb",
        signatureVersion: "v4",
        signingName: "tnb",
        uid: "tnb-2008-10-21"
    },
    operations: {
        CancelSolNetworkOperation: {
            http: {
                requestUri: "/sol/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}/cancel",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "nsLcmOpOccId" ],
                members: {
                    nsLcmOpOccId: {
                        location: "uri",
                        locationName: "nsLcmOpOccId"
                    }
                }
            }
        },
        CreateSolFunctionPackage: {
            http: {
                requestUri: "/sol/vnfpkgm/v1/vnf_packages",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "onboardingState", "operationalState", "usageState" ],
                members: {
                    arn: {},
                    id: {},
                    onboardingState: {},
                    operationalState: {},
                    tags: {
                        shape: "S4"
                    },
                    usageState: {}
                }
            }
        },
        CreateSolNetworkInstance: {
            http: {
                requestUri: "/sol/nslcm/v1/ns_instances",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "nsName", "nsdInfoId" ],
                members: {
                    nsDescription: {},
                    nsName: {},
                    nsdInfoId: {},
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "nsInstanceName", "nsdInfoId" ],
                members: {
                    arn: {},
                    id: {},
                    nsInstanceName: {},
                    nsdInfoId: {},
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateSolNetworkPackage: {
            http: {
                requestUri: "/sol/nsd/v1/ns_descriptors",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "nsdOnboardingState", "nsdOperationalState", "nsdUsageState" ],
                members: {
                    arn: {},
                    id: {},
                    nsdOnboardingState: {},
                    nsdOperationalState: {},
                    nsdUsageState: {},
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteSolFunctionPackage: {
            http: {
                method: "DELETE",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "vnfPkgId" ],
                members: {
                    vnfPkgId: {
                        location: "uri",
                        locationName: "vnfPkgId"
                    }
                }
            },
            idempotent: true
        },
        DeleteSolNetworkInstance: {
            http: {
                method: "DELETE",
                requestUri: "/sol/nslcm/v1/ns_instances/{nsInstanceId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "nsInstanceId" ],
                members: {
                    nsInstanceId: {
                        location: "uri",
                        locationName: "nsInstanceId"
                    }
                }
            },
            idempotent: true
        },
        DeleteSolNetworkPackage: {
            http: {
                method: "DELETE",
                requestUri: "/sol/nsd/v1/ns_descriptors/{nsdInfoId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "nsdInfoId" ],
                members: {
                    nsdInfoId: {
                        location: "uri",
                        locationName: "nsdInfoId"
                    }
                }
            },
            idempotent: true
        },
        GetSolFunctionInstance: {
            http: {
                method: "GET",
                requestUri: "/sol/vnflcm/v1/vnf_instances/{vnfInstanceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "vnfInstanceId" ],
                members: {
                    vnfInstanceId: {
                        location: "uri",
                        locationName: "vnfInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "instantiationState", "metadata", "nsInstanceId", "vnfPkgId", "vnfdId" ],
                members: {
                    arn: {},
                    id: {},
                    instantiatedVnfInfo: {
                        type: "structure",
                        members: {
                            vnfState: {},
                            vnfcResourceInfo: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        metadata: {
                                            type: "structure",
                                            members: {
                                                cluster: {},
                                                helmChart: {},
                                                nodeGroup: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    instantiationState: {},
                    metadata: {
                        type: "structure",
                        required: [ "createdAt", "lastModified" ],
                        members: {
                            createdAt: {
                                shape: "S15"
                            },
                            lastModified: {
                                shape: "S15"
                            }
                        }
                    },
                    nsInstanceId: {},
                    tags: {
                        shape: "S4"
                    },
                    vnfPkgId: {},
                    vnfProductName: {},
                    vnfProvider: {},
                    vnfdId: {},
                    vnfdVersion: {}
                }
            }
        },
        GetSolFunctionPackage: {
            http: {
                method: "GET",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "vnfPkgId" ],
                members: {
                    vnfPkgId: {
                        location: "uri",
                        locationName: "vnfPkgId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "onboardingState", "operationalState", "usageState" ],
                members: {
                    arn: {},
                    id: {},
                    metadata: {
                        type: "structure",
                        required: [ "createdAt", "lastModified" ],
                        members: {
                            createdAt: {
                                shape: "S15"
                            },
                            lastModified: {
                                shape: "S15"
                            },
                            vnfd: {
                                shape: "S1a"
                            }
                        }
                    },
                    onboardingState: {},
                    operationalState: {},
                    tags: {
                        shape: "S4"
                    },
                    usageState: {},
                    vnfProductName: {},
                    vnfProvider: {},
                    vnfdId: {},
                    vnfdVersion: {}
                }
            }
        },
        GetSolFunctionPackageContent: {
            http: {
                method: "GET",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accept", "vnfPkgId" ],
                members: {
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    vnfPkgId: {
                        location: "uri",
                        locationName: "vnfPkgId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    packageContent: {
                        type: "blob"
                    }
                },
                payload: "packageContent"
            }
        },
        GetSolFunctionPackageDescriptor: {
            http: {
                method: "GET",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/vnfd",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accept", "vnfPkgId" ],
                members: {
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    vnfPkgId: {
                        location: "uri",
                        locationName: "vnfPkgId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    vnfd: {
                        type: "blob"
                    }
                },
                payload: "vnfd"
            }
        },
        GetSolNetworkInstance: {
            http: {
                method: "GET",
                requestUri: "/sol/nslcm/v1/ns_instances/{nsInstanceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "nsInstanceId" ],
                members: {
                    nsInstanceId: {
                        location: "uri",
                        locationName: "nsInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "metadata", "nsInstanceDescription", "nsInstanceName", "nsdId", "nsdInfoId" ],
                members: {
                    arn: {},
                    id: {},
                    lcmOpInfo: {
                        type: "structure",
                        required: [ "nsLcmOpOccId" ],
                        members: {
                            nsLcmOpOccId: {}
                        }
                    },
                    metadata: {
                        type: "structure",
                        required: [ "createdAt", "lastModified" ],
                        members: {
                            createdAt: {
                                shape: "S15"
                            },
                            lastModified: {
                                shape: "S15"
                            }
                        }
                    },
                    nsInstanceDescription: {},
                    nsInstanceName: {},
                    nsState: {},
                    nsdId: {},
                    nsdInfoId: {},
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        GetSolNetworkOperation: {
            http: {
                method: "GET",
                requestUri: "/sol/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "nsLcmOpOccId" ],
                members: {
                    nsLcmOpOccId: {
                        location: "uri",
                        locationName: "nsLcmOpOccId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    error: {
                        shape: "S1t"
                    },
                    id: {},
                    lcmOperationType: {},
                    metadata: {
                        type: "structure",
                        required: [ "createdAt", "lastModified" ],
                        members: {
                            createdAt: {
                                shape: "S15"
                            },
                            lastModified: {
                                shape: "S15"
                            }
                        }
                    },
                    nsInstanceId: {},
                    operationState: {},
                    tags: {
                        shape: "S4"
                    },
                    tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                taskContext: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                },
                                taskEndTime: {
                                    shape: "S15"
                                },
                                taskErrorDetails: {
                                    type: "structure",
                                    members: {
                                        cause: {},
                                        details: {}
                                    }
                                },
                                taskName: {},
                                taskStartTime: {
                                    shape: "S15"
                                },
                                taskStatus: {}
                            }
                        }
                    }
                }
            }
        },
        GetSolNetworkPackage: {
            http: {
                method: "GET",
                requestUri: "/sol/nsd/v1/ns_descriptors/{nsdInfoId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "nsdInfoId" ],
                members: {
                    nsdInfoId: {
                        location: "uri",
                        locationName: "nsdInfoId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "metadata", "nsdId", "nsdName", "nsdOnboardingState", "nsdOperationalState", "nsdUsageState", "nsdVersion", "vnfPkgIds" ],
                members: {
                    arn: {},
                    id: {},
                    metadata: {
                        type: "structure",
                        required: [ "createdAt", "lastModified" ],
                        members: {
                            createdAt: {
                                shape: "S15"
                            },
                            lastModified: {
                                shape: "S15"
                            },
                            nsd: {
                                shape: "S27"
                            }
                        }
                    },
                    nsdId: {},
                    nsdName: {},
                    nsdOnboardingState: {},
                    nsdOperationalState: {},
                    nsdUsageState: {},
                    nsdVersion: {},
                    tags: {
                        shape: "S4"
                    },
                    vnfPkgIds: {
                        shape: "S28"
                    }
                }
            }
        },
        GetSolNetworkPackageContent: {
            http: {
                method: "GET",
                requestUri: "/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accept", "nsdInfoId" ],
                members: {
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    nsdInfoId: {
                        location: "uri",
                        locationName: "nsdInfoId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    nsdContent: {
                        type: "blob"
                    }
                },
                payload: "nsdContent"
            }
        },
        GetSolNetworkPackageDescriptor: {
            http: {
                method: "GET",
                requestUri: "/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "nsdInfoId" ],
                members: {
                    nsdInfoId: {
                        location: "uri",
                        locationName: "nsdInfoId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    nsd: {
                        type: "blob"
                    }
                },
                payload: "nsd"
            }
        },
        InstantiateSolNetworkInstance: {
            http: {
                requestUri: "/sol/nslcm/v1/ns_instances/{nsInstanceId}/instantiate",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "nsInstanceId" ],
                members: {
                    additionalParamsForNs: {
                        shape: "S2e"
                    },
                    dryRun: {
                        location: "querystring",
                        locationName: "dry_run",
                        type: "boolean"
                    },
                    nsInstanceId: {
                        location: "uri",
                        locationName: "nsInstanceId"
                    },
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "nsLcmOpOccId" ],
                members: {
                    nsLcmOpOccId: {},
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        ListSolFunctionInstances: {
            http: {
                method: "GET",
                requestUri: "/sol/vnflcm/v1/vnf_instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextpage_opaque_marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    functionInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "instantiationState", "metadata", "nsInstanceId", "vnfPkgId" ],
                            members: {
                                arn: {},
                                id: {},
                                instantiatedVnfInfo: {
                                    type: "structure",
                                    members: {
                                        vnfState: {}
                                    }
                                },
                                instantiationState: {},
                                metadata: {
                                    type: "structure",
                                    required: [ "createdAt", "lastModified" ],
                                    members: {
                                        createdAt: {
                                            shape: "S15"
                                        },
                                        lastModified: {
                                            shape: "S15"
                                        }
                                    }
                                },
                                nsInstanceId: {},
                                vnfPkgId: {},
                                vnfPkgName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSolFunctionPackages: {
            http: {
                method: "GET",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextpage_opaque_marker"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "functionPackages" ],
                members: {
                    functionPackages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "onboardingState", "operationalState", "usageState" ],
                            members: {
                                arn: {},
                                id: {},
                                metadata: {
                                    type: "structure",
                                    required: [ "createdAt", "lastModified" ],
                                    members: {
                                        createdAt: {
                                            shape: "S15"
                                        },
                                        lastModified: {
                                            shape: "S15"
                                        }
                                    }
                                },
                                onboardingState: {},
                                operationalState: {},
                                usageState: {},
                                vnfProductName: {},
                                vnfProvider: {},
                                vnfdId: {},
                                vnfdVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSolNetworkInstances: {
            http: {
                method: "GET",
                requestUri: "/sol/nslcm/v1/ns_instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextpage_opaque_marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "metadata", "nsInstanceDescription", "nsInstanceName", "nsState", "nsdId", "nsdInfoId" ],
                            members: {
                                arn: {},
                                id: {},
                                metadata: {
                                    type: "structure",
                                    required: [ "createdAt", "lastModified" ],
                                    members: {
                                        createdAt: {
                                            shape: "S15"
                                        },
                                        lastModified: {
                                            shape: "S15"
                                        }
                                    }
                                },
                                nsInstanceDescription: {},
                                nsInstanceName: {},
                                nsState: {},
                                nsdId: {},
                                nsdInfoId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSolNetworkOperations: {
            http: {
                method: "GET",
                requestUri: "/sol/nslcm/v1/ns_lcm_op_occs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextpage_opaque_marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkOperations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "lcmOperationType", "nsInstanceId", "operationState" ],
                            members: {
                                arn: {},
                                error: {
                                    shape: "S1t"
                                },
                                id: {},
                                lcmOperationType: {},
                                metadata: {
                                    type: "structure",
                                    required: [ "createdAt", "lastModified" ],
                                    members: {
                                        createdAt: {
                                            shape: "S15"
                                        },
                                        lastModified: {
                                            shape: "S15"
                                        }
                                    }
                                },
                                nsInstanceId: {},
                                operationState: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSolNetworkPackages: {
            http: {
                method: "GET",
                requestUri: "/sol/nsd/v1/ns_descriptors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextpage_opaque_marker"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "networkPackages" ],
                members: {
                    networkPackages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "metadata", "nsdOnboardingState", "nsdOperationalState", "nsdUsageState" ],
                            members: {
                                arn: {},
                                id: {},
                                metadata: {
                                    type: "structure",
                                    required: [ "createdAt", "lastModified" ],
                                    members: {
                                        createdAt: {
                                            shape: "S15"
                                        },
                                        lastModified: {
                                            shape: "S15"
                                        }
                                    }
                                },
                                nsdDesigner: {},
                                nsdId: {},
                                nsdInvariantId: {},
                                nsdName: {},
                                nsdOnboardingState: {},
                                nsdOperationalState: {},
                                nsdUsageState: {},
                                nsdVersion: {},
                                vnfPkgIds: {
                                    shape: "S28"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        PutSolFunctionPackageContent: {
            http: {
                method: "PUT",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "file", "vnfPkgId" ],
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    file: {
                        type: "blob"
                    },
                    vnfPkgId: {
                        location: "uri",
                        locationName: "vnfPkgId"
                    }
                },
                payload: "file"
            },
            output: {
                type: "structure",
                required: [ "id", "metadata", "vnfProductName", "vnfProvider", "vnfdId", "vnfdVersion" ],
                members: {
                    id: {},
                    metadata: {
                        type: "structure",
                        members: {
                            vnfd: {
                                shape: "S1a"
                            }
                        }
                    },
                    vnfProductName: {},
                    vnfProvider: {},
                    vnfdId: {},
                    vnfdVersion: {}
                }
            },
            idempotent: true
        },
        PutSolNetworkPackageContent: {
            http: {
                method: "PUT",
                requestUri: "/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "file", "nsdInfoId" ],
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    file: {
                        type: "blob"
                    },
                    nsdInfoId: {
                        location: "uri",
                        locationName: "nsdInfoId"
                    }
                },
                payload: "file"
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "metadata", "nsdId", "nsdName", "nsdVersion", "vnfPkgIds" ],
                members: {
                    arn: {},
                    id: {},
                    metadata: {
                        type: "structure",
                        members: {
                            nsd: {
                                shape: "S27"
                            }
                        }
                    },
                    nsdId: {},
                    nsdName: {},
                    nsdVersion: {},
                    vnfPkgIds: {
                        shape: "S28"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TerminateSolNetworkInstance: {
            http: {
                requestUri: "/sol/nslcm/v1/ns_instances/{nsInstanceId}/terminate",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "nsInstanceId" ],
                members: {
                    nsInstanceId: {
                        location: "uri",
                        locationName: "nsInstanceId"
                    },
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nsLcmOpOccId: {},
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateSolFunctionPackage: {
            http: {
                method: "PATCH",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "operationalState", "vnfPkgId" ],
                members: {
                    operationalState: {},
                    vnfPkgId: {
                        location: "uri",
                        locationName: "vnfPkgId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "operationalState" ],
                members: {
                    operationalState: {}
                }
            }
        },
        UpdateSolNetworkInstance: {
            http: {
                requestUri: "/sol/nslcm/v1/ns_instances/{nsInstanceId}/update",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "nsInstanceId", "updateType" ],
                members: {
                    modifyVnfInfoData: {
                        type: "structure",
                        required: [ "vnfConfigurableProperties", "vnfInstanceId" ],
                        members: {
                            vnfConfigurableProperties: {
                                shape: "S2e"
                            },
                            vnfInstanceId: {}
                        }
                    },
                    nsInstanceId: {
                        location: "uri",
                        locationName: "nsInstanceId"
                    },
                    tags: {
                        shape: "S4"
                    },
                    updateType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nsLcmOpOccId: {},
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        UpdateSolNetworkPackage: {
            http: {
                method: "PATCH",
                requestUri: "/sol/nsd/v1/ns_descriptors/{nsdInfoId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "nsdInfoId", "nsdOperationalState" ],
                members: {
                    nsdInfoId: {
                        location: "uri",
                        locationName: "nsdInfoId"
                    },
                    nsdOperationalState: {}
                }
            },
            output: {
                type: "structure",
                required: [ "nsdOperationalState" ],
                members: {
                    nsdOperationalState: {}
                }
            }
        },
        ValidateSolFunctionPackageContent: {
            http: {
                method: "PUT",
                requestUri: "/sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content/validate",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "file", "vnfPkgId" ],
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    file: {
                        type: "blob"
                    },
                    vnfPkgId: {
                        location: "uri",
                        locationName: "vnfPkgId"
                    }
                },
                payload: "file"
            },
            output: {
                type: "structure",
                required: [ "id", "metadata", "vnfProductName", "vnfProvider", "vnfdId", "vnfdVersion" ],
                members: {
                    id: {},
                    metadata: {
                        type: "structure",
                        members: {
                            vnfd: {
                                shape: "S1a"
                            }
                        }
                    },
                    vnfProductName: {},
                    vnfProvider: {},
                    vnfdId: {},
                    vnfdVersion: {}
                }
            },
            idempotent: true
        },
        ValidateSolNetworkPackageContent: {
            http: {
                method: "PUT",
                requestUri: "/sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content/validate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "file", "nsdInfoId" ],
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    file: {
                        type: "blob"
                    },
                    nsdInfoId: {
                        location: "uri",
                        locationName: "nsdInfoId"
                    }
                },
                payload: "file"
            },
            output: {
                type: "structure",
                required: [ "arn", "id", "metadata", "nsdId", "nsdName", "nsdVersion", "vnfPkgIds" ],
                members: {
                    arn: {},
                    id: {},
                    metadata: {
                        type: "structure",
                        members: {
                            nsd: {
                                shape: "S27"
                            }
                        }
                    },
                    nsdId: {},
                    nsdName: {},
                    nsdVersion: {},
                    vnfPkgIds: {
                        shape: "S28"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S15: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1a: {
            type: "structure",
            members: {
                overrides: {
                    shape: "S1b"
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    defaultValue: {},
                    name: {}
                }
            }
        },
        S1t: {
            type: "structure",
            required: [ "detail" ],
            members: {
                detail: {},
                title: {}
            }
        },
        S27: {
            type: "structure",
            members: {
                overrides: {
                    shape: "S1b"
                }
            }
        },
        S28: {
            type: "list",
            member: {}
        },
        S2e: {
            type: "structure",
            members: {},
            document: true
        }
    },
    paginators: {
        ListSolFunctionInstances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "functionInstances"
        },
        ListSolFunctionPackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "functionPackages"
        },
        ListSolNetworkInstances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkInstances"
        },
        ListSolNetworkOperations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkOperations"
        },
        ListSolNetworkPackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkPackages"
        }
    }
};

AWS.apiLoader.services["internetmonitor"] = {};

AWS.InternetMonitor = AWS.Service.defineService("internetmonitor", [ "2021-06-03" ]);

AWS.apiLoader.services["internetmonitor"]["2021-06-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-06-03",
        endpointPrefix: "internetmonitor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CloudWatch Internet Monitor",
        serviceId: "InternetMonitor",
        signatureVersion: "v4",
        signingName: "internetmonitor",
        uid: "internetmonitor-2021-06-03"
    },
    operations: {
        CreateMonitor: {
            http: {
                requestUri: "/v20210603/Monitors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName" ],
                members: {
                    MonitorName: {},
                    Resources: {
                        shape: "S3"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S6"
                    },
                    MaxCityNetworksToMonitor: {
                        type: "integer"
                    },
                    InternetMeasurementsLogDelivery: {
                        shape: "Sa"
                    },
                    TrafficPercentageToMonitor: {
                        type: "integer"
                    },
                    HealthEventsConfig: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "Status" ],
                members: {
                    Arn: {},
                    Status: {}
                }
            },
            idempotent: true
        },
        DeleteMonitor: {
            http: {
                method: "DELETE",
                requestUri: "/v20210603/Monitors/{MonitorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetHealthEvent: {
            http: {
                method: "GET",
                requestUri: "/v20210603/Monitors/{MonitorName}/HealthEvents/{EventId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName", "EventId" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    },
                    EventId: {
                        location: "uri",
                        locationName: "EventId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EventArn", "EventId", "StartedAt", "LastUpdatedAt", "ImpactedLocations", "Status", "ImpactType" ],
                members: {
                    EventArn: {},
                    EventId: {},
                    StartedAt: {
                        shape: "Sr"
                    },
                    EndedAt: {
                        shape: "Sr"
                    },
                    CreatedAt: {
                        shape: "Sr"
                    },
                    LastUpdatedAt: {
                        shape: "Sr"
                    },
                    ImpactedLocations: {
                        shape: "Ss"
                    },
                    Status: {},
                    PercentOfTotalTrafficImpacted: {
                        type: "double"
                    },
                    ImpactType: {},
                    HealthScoreThreshold: {
                        type: "double"
                    }
                }
            }
        },
        GetMonitor: {
            http: {
                method: "GET",
                requestUri: "/v20210603/Monitors/{MonitorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitorName", "MonitorArn", "Resources", "Status", "CreatedAt", "ModifiedAt" ],
                members: {
                    MonitorName: {},
                    MonitorArn: {},
                    Resources: {
                        shape: "S3"
                    },
                    Status: {},
                    CreatedAt: {
                        shape: "Sr"
                    },
                    ModifiedAt: {
                        shape: "Sr"
                    },
                    ProcessingStatus: {},
                    ProcessingStatusInfo: {},
                    Tags: {
                        shape: "S6"
                    },
                    MaxCityNetworksToMonitor: {
                        type: "integer"
                    },
                    InternetMeasurementsLogDelivery: {
                        shape: "Sa"
                    },
                    TrafficPercentageToMonitor: {
                        type: "integer"
                    },
                    HealthEventsConfig: {
                        shape: "Sf"
                    }
                }
            }
        },
        GetQueryResults: {
            http: {
                method: "GET",
                requestUri: "/v20210603/Monitors/{MonitorName}/Queries/{QueryId}/Results",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName", "QueryId" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    },
                    QueryId: {
                        location: "uri",
                        locationName: "QueryId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Fields", "Data" ],
                members: {
                    Fields: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {}
                            }
                        }
                    },
                    Data: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {}
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetQueryStatus: {
            http: {
                method: "GET",
                requestUri: "/v20210603/Monitors/{MonitorName}/Queries/{QueryId}/Status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName", "QueryId" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    },
                    QueryId: {
                        location: "uri",
                        locationName: "QueryId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {}
                }
            }
        },
        ListHealthEvents: {
            http: {
                method: "GET",
                requestUri: "/v20210603/Monitors/{MonitorName}/HealthEvents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    },
                    StartTime: {
                        shape: "Sr",
                        location: "querystring",
                        locationName: "StartTime"
                    },
                    EndTime: {
                        shape: "Sr",
                        location: "querystring",
                        locationName: "EndTime"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    EventStatus: {
                        location: "querystring",
                        locationName: "EventStatus"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HealthEvents" ],
                members: {
                    HealthEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EventArn", "EventId", "StartedAt", "LastUpdatedAt", "ImpactedLocations", "Status", "ImpactType" ],
                            members: {
                                EventArn: {},
                                EventId: {},
                                StartedAt: {
                                    shape: "Sr"
                                },
                                EndedAt: {
                                    shape: "Sr"
                                },
                                CreatedAt: {
                                    shape: "Sr"
                                },
                                LastUpdatedAt: {
                                    shape: "Sr"
                                },
                                ImpactedLocations: {
                                    shape: "Ss"
                                },
                                Status: {},
                                PercentOfTotalTrafficImpacted: {
                                    type: "double"
                                },
                                ImpactType: {},
                                HealthScoreThreshold: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitors: {
            http: {
                method: "GET",
                requestUri: "/v20210603/Monitors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    MonitorStatus: {
                        location: "querystring",
                        locationName: "MonitorStatus"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Monitors" ],
                members: {
                    Monitors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MonitorName", "MonitorArn", "Status" ],
                            members: {
                                MonitorName: {},
                                MonitorArn: {},
                                Status: {},
                                ProcessingStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        StartQuery: {
            http: {
                requestUri: "/v20210603/Monitors/{MonitorName}/Queries",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName", "StartTime", "EndTime", "QueryType" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    },
                    StartTime: {
                        shape: "Sr"
                    },
                    EndTime: {
                        shape: "Sr"
                    },
                    QueryType: {},
                    FilterParameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Field: {},
                                Operator: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    QueryId: {}
                }
            }
        },
        StopQuery: {
            http: {
                method: "DELETE",
                requestUri: "/v20210603/Monitors/{MonitorName}/Queries/{QueryId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName", "QueryId" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    },
                    QueryId: {
                        location: "uri",
                        locationName: "QueryId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateMonitor: {
            http: {
                method: "PATCH",
                requestUri: "/v20210603/Monitors/{MonitorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MonitorName" ],
                members: {
                    MonitorName: {
                        location: "uri",
                        locationName: "MonitorName"
                    },
                    ResourcesToAdd: {
                        shape: "S3"
                    },
                    ResourcesToRemove: {
                        shape: "S3"
                    },
                    Status: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    MaxCityNetworksToMonitor: {
                        type: "integer"
                    },
                    InternetMeasurementsLogDelivery: {
                        shape: "Sa"
                    },
                    TrafficPercentageToMonitor: {
                        type: "integer"
                    },
                    HealthEventsConfig: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitorArn", "Status" ],
                members: {
                    MonitorArn: {},
                    Status: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "map",
            key: {},
            value: {}
        },
        Sa: {
            type: "structure",
            members: {
                S3Config: {
                    type: "structure",
                    members: {
                        BucketName: {},
                        BucketPrefix: {},
                        LogDeliveryStatus: {}
                    }
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                AvailabilityScoreThreshold: {
                    type: "double"
                },
                PerformanceScoreThreshold: {
                    type: "double"
                },
                AvailabilityLocalHealthEventsConfig: {
                    shape: "Sh"
                },
                PerformanceLocalHealthEventsConfig: {
                    shape: "Sh"
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                Status: {},
                HealthScoreThreshold: {
                    type: "double"
                },
                MinTrafficImpact: {
                    type: "double"
                }
            }
        },
        Sr: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ASName", "ASNumber", "Country", "Status" ],
                members: {
                    ASName: {},
                    ASNumber: {
                        type: "long"
                    },
                    Country: {},
                    Subdivision: {},
                    Metro: {},
                    City: {},
                    Latitude: {
                        type: "double"
                    },
                    Longitude: {
                        type: "double"
                    },
                    CountryCode: {},
                    SubdivisionCode: {},
                    ServiceLocation: {},
                    Status: {},
                    CausedBy: {
                        type: "structure",
                        required: [ "Networks", "AsPath", "NetworkEventType" ],
                        members: {
                            Networks: {
                                shape: "Sy"
                            },
                            AsPath: {
                                shape: "Sy"
                            },
                            NetworkEventType: {}
                        }
                    },
                    InternetHealth: {
                        type: "structure",
                        members: {
                            Availability: {
                                type: "structure",
                                members: {
                                    ExperienceScore: {
                                        type: "double"
                                    },
                                    PercentOfTotalTrafficImpacted: {
                                        type: "double"
                                    },
                                    PercentOfClientLocationImpacted: {
                                        type: "double"
                                    }
                                }
                            },
                            Performance: {
                                type: "structure",
                                members: {
                                    ExperienceScore: {
                                        type: "double"
                                    },
                                    PercentOfTotalTrafficImpacted: {
                                        type: "double"
                                    },
                                    PercentOfClientLocationImpacted: {
                                        type: "double"
                                    },
                                    RoundTripTime: {
                                        type: "structure",
                                        members: {
                                            P50: {
                                                type: "double"
                                            },
                                            P90: {
                                                type: "double"
                                            },
                                            P95: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ASName", "ASNumber" ],
                members: {
                    ASName: {},
                    ASNumber: {
                        type: "long"
                    }
                }
            }
        }
    },
    paginators: {
        GetQueryResults: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListHealthEvents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HealthEvents"
        },
        ListMonitors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Monitors"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["ivsrealtime"] = {};

AWS.IVSRealTime = AWS.Service.defineService("ivsrealtime", [ "2020-07-14" ]);

AWS.apiLoader.services["ivsrealtime"]["2020-07-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-14",
        endpointPrefix: "ivsrealtime",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "ivsrealtime",
        serviceFullName: "Amazon Interactive Video Service RealTime",
        serviceId: "IVS RealTime",
        signatureVersion: "v4",
        signingName: "ivs",
        uid: "ivs-realtime-2020-07-14"
    },
    operations: {
        CreateEncoderConfiguration: {
            http: {
                requestUri: "/CreateEncoderConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    name: {},
                    tags: {
                        shape: "S3"
                    },
                    video: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    encoderConfiguration: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateParticipantToken: {
            http: {
                requestUri: "/CreateParticipantToken",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "stageArn" ],
                members: {
                    attributes: {
                        shape: "Sf"
                    },
                    capabilities: {
                        shape: "Sh"
                    },
                    duration: {
                        type: "integer"
                    },
                    stageArn: {},
                    userId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    participantToken: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateStage: {
            http: {
                requestUri: "/CreateStage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    name: {},
                    participantTokenConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                attributes: {
                                    shape: "Sf"
                                },
                                capabilities: {
                                    shape: "Sh"
                                },
                                duration: {
                                    type: "integer"
                                },
                                userId: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    participantTokens: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    },
                    stage: {
                        shape: "Sx"
                    }
                }
            }
        },
        CreateStorageConfiguration: {
            http: {
                requestUri: "/CreateStorageConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "s3" ],
                members: {
                    name: {},
                    s3: {
                        shape: "S11"
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    storageConfiguration: {
                        shape: "S14"
                    }
                }
            }
        },
        DeleteEncoderConfiguration: {
            http: {
                requestUri: "/DeleteEncoderConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStage: {
            http: {
                requestUri: "/DeleteStage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStorageConfiguration: {
            http: {
                requestUri: "/DeleteStorageConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisconnectParticipant: {
            http: {
                requestUri: "/DisconnectParticipant",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "participantId", "stageArn" ],
                members: {
                    participantId: {},
                    reason: {},
                    stageArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetComposition: {
            http: {
                requestUri: "/GetComposition",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    composition: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetEncoderConfiguration: {
            http: {
                requestUri: "/GetEncoderConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    encoderConfiguration: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetParticipant: {
            http: {
                requestUri: "/GetParticipant",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "participantId", "sessionId", "stageArn" ],
                members: {
                    participantId: {},
                    sessionId: {},
                    stageArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    participant: {
                        type: "structure",
                        members: {
                            attributes: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            browserName: {},
                            browserVersion: {},
                            firstJoinTime: {
                                shape: "S1v"
                            },
                            ispName: {},
                            osName: {},
                            osVersion: {},
                            participantId: {},
                            published: {
                                type: "boolean"
                            },
                            sdkVersion: {},
                            state: {},
                            userId: {}
                        }
                    }
                }
            }
        },
        GetStage: {
            http: {
                requestUri: "/GetStage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stage: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetStageSession: {
            http: {
                requestUri: "/GetStageSession",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "stageArn" ],
                members: {
                    sessionId: {},
                    stageArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stageSession: {
                        type: "structure",
                        members: {
                            endTime: {
                                shape: "S1v"
                            },
                            sessionId: {},
                            startTime: {
                                shape: "S1v"
                            }
                        }
                    }
                }
            }
        },
        GetStorageConfiguration: {
            http: {
                requestUri: "/GetStorageConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    storageConfiguration: {
                        shape: "S14"
                    }
                }
            }
        },
        ListCompositions: {
            http: {
                requestUri: "/ListCompositions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterByEncoderConfigurationArn: {},
                    filterByStageArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "compositions" ],
                members: {
                    compositions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "destinations", "stageArn", "state" ],
                            members: {
                                arn: {},
                                destinations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "id", "state" ],
                                        members: {
                                            endTime: {
                                                shape: "S1v"
                                            },
                                            id: {},
                                            startTime: {
                                                shape: "S1v"
                                            },
                                            state: {}
                                        }
                                    }
                                },
                                endTime: {
                                    shape: "S1v"
                                },
                                stageArn: {},
                                startTime: {
                                    shape: "S1v"
                                },
                                state: {},
                                tags: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEncoderConfigurations: {
            http: {
                requestUri: "/ListEncoderConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "encoderConfigurations" ],
                members: {
                    encoderConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn" ],
                            members: {
                                arn: {},
                                name: {},
                                tags: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListParticipantEvents: {
            http: {
                requestUri: "/ListParticipantEvents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "participantId", "sessionId", "stageArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    participantId: {},
                    sessionId: {},
                    stageArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "events" ],
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorCode: {},
                                eventTime: {
                                    shape: "S1v"
                                },
                                name: {},
                                participantId: {},
                                remoteParticipantId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListParticipants: {
            http: {
                requestUri: "/ListParticipants",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "stageArn" ],
                members: {
                    filterByPublished: {
                        type: "boolean"
                    },
                    filterByState: {},
                    filterByUserId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sessionId: {},
                    stageArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "participants" ],
                members: {
                    nextToken: {},
                    participants: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                firstJoinTime: {
                                    shape: "S1v"
                                },
                                participantId: {},
                                published: {
                                    type: "boolean"
                                },
                                state: {},
                                userId: {}
                            }
                        }
                    }
                }
            }
        },
        ListStageSessions: {
            http: {
                requestUri: "/ListStageSessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "stageArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    stageArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stageSessions" ],
                members: {
                    nextToken: {},
                    stageSessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                endTime: {
                                    shape: "S1v"
                                },
                                sessionId: {},
                                startTime: {
                                    shape: "S1v"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListStages: {
            http: {
                requestUri: "/ListStages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stages" ],
                members: {
                    nextToken: {},
                    stages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn" ],
                            members: {
                                activeSessionId: {},
                                arn: {},
                                name: {},
                                tags: {
                                    shape: "S3"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListStorageConfigurations: {
            http: {
                requestUri: "/ListStorageConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "storageConfigurations" ],
                members: {
                    nextToken: {},
                    storageConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn" ],
                            members: {
                                arn: {},
                                name: {},
                                s3: {
                                    shape: "S11"
                                },
                                tags: {
                                    shape: "S3"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "S3"
                    }
                }
            }
        },
        StartComposition: {
            http: {
                requestUri: "/StartComposition",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "destinations", "stageArn" ],
                members: {
                    destinations: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    },
                    idempotencyToken: {
                        idempotencyToken: true
                    },
                    layout: {
                        shape: "S1x"
                    },
                    stageArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    composition: {
                        shape: "S1i"
                    }
                }
            }
        },
        StopComposition: {
            http: {
                requestUri: "/StopComposition",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateStage: {
            http: {
                requestUri: "/UpdateStage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stage: {
                        shape: "Sx"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "map",
            key: {},
            value: {}
        },
        S6: {
            type: "structure",
            members: {
                bitrate: {
                    type: "integer"
                },
                framerate: {
                    type: "float"
                },
                height: {
                    type: "integer"
                },
                width: {
                    type: "integer"
                }
            }
        },
        Sc: {
            type: "structure",
            required: [ "arn" ],
            members: {
                arn: {},
                name: {},
                tags: {
                    shape: "S3"
                },
                video: {
                    shape: "S6"
                }
            }
        },
        Sf: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "structure",
            members: {
                attributes: {
                    shape: "Sf"
                },
                capabilities: {
                    shape: "Sh"
                },
                duration: {
                    type: "integer"
                },
                expirationTime: {
                    type: "timestamp",
                    timestampFormat: "iso8601"
                },
                participantId: {},
                token: {
                    type: "string",
                    sensitive: true
                },
                userId: {}
            }
        },
        Sx: {
            type: "structure",
            required: [ "arn" ],
            members: {
                activeSessionId: {},
                arn: {},
                name: {},
                tags: {
                    shape: "S3"
                }
            }
        },
        S11: {
            type: "structure",
            required: [ "bucketName" ],
            members: {
                bucketName: {}
            }
        },
        S14: {
            type: "structure",
            required: [ "arn" ],
            members: {
                arn: {},
                name: {},
                s3: {
                    shape: "S11"
                },
                tags: {
                    shape: "S3"
                }
            }
        },
        S1i: {
            type: "structure",
            required: [ "arn", "destinations", "layout", "stageArn", "state" ],
            members: {
                arn: {},
                destinations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "configuration", "id", "state" ],
                        members: {
                            configuration: {
                                shape: "S1l"
                            },
                            detail: {
                                type: "structure",
                                members: {
                                    s3: {
                                        type: "structure",
                                        required: [ "recordingPrefix" ],
                                        members: {
                                            recordingPrefix: {}
                                        }
                                    }
                                }
                            },
                            endTime: {
                                shape: "S1v"
                            },
                            id: {},
                            startTime: {
                                shape: "S1v"
                            },
                            state: {}
                        }
                    }
                },
                endTime: {
                    shape: "S1v"
                },
                layout: {
                    shape: "S1x"
                },
                stageArn: {},
                startTime: {
                    shape: "S1v"
                },
                state: {},
                tags: {
                    shape: "S3"
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                channel: {
                    type: "structure",
                    required: [ "channelArn" ],
                    members: {
                        channelArn: {},
                        encoderConfigurationArn: {}
                    }
                },
                name: {},
                s3: {
                    type: "structure",
                    required: [ "encoderConfigurationArns", "storageConfigurationArn" ],
                    members: {
                        encoderConfigurationArns: {
                            type: "list",
                            member: {}
                        },
                        recordingConfiguration: {
                            type: "structure",
                            members: {
                                format: {}
                            }
                        },
                        storageConfigurationArn: {}
                    }
                }
            }
        },
        S1v: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1x: {
            type: "structure",
            members: {
                grid: {
                    type: "structure",
                    members: {
                        featuredParticipantAttribute: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListCompositions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListEncoderConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListParticipantEvents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListParticipants: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStageSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStorageConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["vpclattice"] = {};

AWS.VPCLattice = AWS.Service.defineService("vpclattice", [ "2022-11-30" ]);

AWS.apiLoader.services["vpclattice"]["2022-11-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-11-30",
        endpointPrefix: "vpc-lattice",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon VPC Lattice",
        serviceId: "VPC Lattice",
        signatureVersion: "v4",
        signingName: "vpc-lattice",
        uid: "vpc-lattice-2022-11-30"
    },
    operations: {
        BatchUpdateRule: {
            http: {
                method: "PATCH",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "listenerIdentifier", "rules", "serviceIdentifier" ],
                members: {
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ruleIdentifier" ],
                            members: {
                                action: {
                                    shape: "S5"
                                },
                                match: {
                                    shape: "Sd"
                                },
                                priority: {
                                    type: "integer"
                                },
                                ruleIdentifier: {}
                            }
                        }
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successful: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                action: {
                                    shape: "S5"
                                },
                                arn: {},
                                id: {},
                                isDefault: {
                                    type: "boolean"
                                },
                                match: {
                                    shape: "Sd"
                                },
                                name: {},
                                priority: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    unsuccessful: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                failureCode: {},
                                failureMessage: {},
                                ruleIdentifier: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        CreateAccessLogSubscription: {
            http: {
                requestUri: "/accesslogsubscriptions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "destinationArn", "resourceIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    destinationArn: {},
                    resourceIdentifier: {},
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "destinationArn", "id", "resourceArn", "resourceId" ],
                members: {
                    arn: {},
                    destinationArn: {},
                    id: {},
                    resourceArn: {},
                    resourceId: {}
                }
            },
            idempotent: true
        },
        CreateListener: {
            http: {
                requestUri: "/services/{serviceIdentifier}/listeners",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "defaultAction", "name", "protocol", "serviceIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    defaultAction: {
                        shape: "S5"
                    },
                    name: {},
                    port: {
                        type: "integer"
                    },
                    protocol: {},
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    },
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    defaultAction: {
                        shape: "S5"
                    },
                    id: {},
                    name: {},
                    port: {
                        type: "integer"
                    },
                    protocol: {},
                    serviceArn: {},
                    serviceId: {}
                }
            },
            idempotent: true
        },
        CreateRule: {
            http: {
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "action", "listenerIdentifier", "match", "name", "priority", "serviceIdentifier" ],
                members: {
                    action: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    match: {
                        shape: "Sd"
                    },
                    name: {},
                    priority: {
                        type: "integer"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    },
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        shape: "S5"
                    },
                    arn: {},
                    id: {},
                    match: {
                        shape: "Sd"
                    },
                    name: {},
                    priority: {
                        type: "integer"
                    }
                }
            },
            idempotent: true
        },
        CreateService: {
            http: {
                requestUri: "/services",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    authType: {},
                    certificateArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    customDomainName: {},
                    name: {},
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    authType: {},
                    certificateArn: {},
                    customDomainName: {},
                    dnsEntry: {
                        shape: "S1y"
                    },
                    id: {},
                    name: {},
                    status: {}
                }
            },
            idempotent: true
        },
        CreateServiceNetwork: {
            http: {
                requestUri: "/servicenetworks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    authType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    authType: {},
                    id: {},
                    name: {}
                }
            },
            idempotent: true
        },
        CreateServiceNetworkServiceAssociation: {
            http: {
                requestUri: "/servicenetworkserviceassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceIdentifier", "serviceNetworkIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    serviceIdentifier: {},
                    serviceNetworkIdentifier: {},
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createdBy: {},
                    customDomainName: {},
                    dnsEntry: {
                        shape: "S1y"
                    },
                    id: {},
                    status: {}
                }
            },
            idempotent: true
        },
        CreateServiceNetworkVpcAssociation: {
            http: {
                requestUri: "/servicenetworkvpcassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceNetworkIdentifier", "vpcIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    securityGroupIds: {
                        type: "list",
                        member: {}
                    },
                    serviceNetworkIdentifier: {},
                    tags: {
                        shape: "S19"
                    },
                    vpcIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createdBy: {},
                    id: {},
                    securityGroupIds: {
                        shape: "S2k"
                    },
                    status: {}
                }
            },
            idempotent: true
        },
        CreateTargetGroup: {
            http: {
                requestUri: "/targetgroups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    config: {
                        shape: "S2n"
                    },
                    name: {},
                    tags: {
                        shape: "S19"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    config: {
                        shape: "S2n"
                    },
                    id: {},
                    name: {},
                    status: {},
                    type: {}
                }
            },
            idempotent: true
        },
        DeleteAccessLogSubscription: {
            http: {
                method: "DELETE",
                requestUri: "/accesslogsubscriptions/{accessLogSubscriptionIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accessLogSubscriptionIdentifier" ],
                members: {
                    accessLogSubscriptionIdentifier: {
                        location: "uri",
                        locationName: "accessLogSubscriptionIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAuthPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/authpolicy/{resourceIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceIdentifier" ],
                members: {
                    resourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteListener: {
            http: {
                method: "DELETE",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "listenerIdentifier", "serviceIdentifier" ],
                members: {
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/resourcepolicy/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRule: {
            http: {
                method: "DELETE",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "listenerIdentifier", "ruleIdentifier", "serviceIdentifier" ],
                members: {
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    ruleIdentifier: {
                        location: "uri",
                        locationName: "ruleIdentifier"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteService: {
            http: {
                method: "DELETE",
                requestUri: "/services/{serviceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceIdentifier" ],
                members: {
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    name: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DeleteServiceNetwork: {
            http: {
                method: "DELETE",
                requestUri: "/servicenetworks/{serviceNetworkIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "serviceNetworkIdentifier" ],
                members: {
                    serviceNetworkIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteServiceNetworkServiceAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/servicenetworkserviceassociations/{serviceNetworkServiceAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceNetworkServiceAssociationIdentifier" ],
                members: {
                    serviceNetworkServiceAssociationIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkServiceAssociationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DeleteServiceNetworkVpcAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceNetworkVpcAssociationIdentifier" ],
                members: {
                    serviceNetworkVpcAssociationIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkVpcAssociationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DeleteTargetGroup: {
            http: {
                method: "DELETE",
                requestUri: "/targetgroups/{targetGroupIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "targetGroupIdentifier" ],
                members: {
                    targetGroupIdentifier: {
                        location: "uri",
                        locationName: "targetGroupIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DeregisterTargets: {
            http: {
                requestUri: "/targetgroups/{targetGroupIdentifier}/deregistertargets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "targetGroupIdentifier", "targets" ],
                members: {
                    targetGroupIdentifier: {
                        location: "uri",
                        locationName: "targetGroupIdentifier"
                    },
                    targets: {
                        type: "list",
                        member: {
                            shape: "S3w"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successful: {
                        shape: "S3z"
                    },
                    unsuccessful: {
                        shape: "S40"
                    }
                }
            },
            idempotent: true
        },
        GetAccessLogSubscription: {
            http: {
                method: "GET",
                requestUri: "/accesslogsubscriptions/{accessLogSubscriptionIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessLogSubscriptionIdentifier" ],
                members: {
                    accessLogSubscriptionIdentifier: {
                        location: "uri",
                        locationName: "accessLogSubscriptionIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "createdAt", "destinationArn", "id", "lastUpdatedAt", "resourceArn", "resourceId" ],
                members: {
                    arn: {},
                    createdAt: {
                        shape: "S44"
                    },
                    destinationArn: {},
                    id: {},
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    resourceArn: {},
                    resourceId: {}
                }
            }
        },
        GetAuthPolicy: {
            http: {
                method: "GET",
                requestUri: "/authpolicy/{resourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceIdentifier" ],
                members: {
                    resourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    createdAt: {
                        shape: "S44"
                    },
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    policy: {},
                    state: {}
                }
            }
        },
        GetListener: {
            http: {
                method: "GET",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "listenerIdentifier", "serviceIdentifier" ],
                members: {
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createdAt: {
                        shape: "S44"
                    },
                    defaultAction: {
                        shape: "S5"
                    },
                    id: {},
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    name: {},
                    port: {
                        type: "integer"
                    },
                    protocol: {},
                    serviceArn: {},
                    serviceId: {}
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/resourcepolicy/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {}
                }
            }
        },
        GetRule: {
            http: {
                method: "GET",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "listenerIdentifier", "ruleIdentifier", "serviceIdentifier" ],
                members: {
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    ruleIdentifier: {
                        location: "uri",
                        locationName: "ruleIdentifier"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        shape: "S5"
                    },
                    arn: {},
                    createdAt: {
                        shape: "S44"
                    },
                    id: {},
                    isDefault: {
                        type: "boolean"
                    },
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    match: {
                        shape: "Sd"
                    },
                    name: {},
                    priority: {
                        type: "integer"
                    }
                }
            }
        },
        GetService: {
            http: {
                method: "GET",
                requestUri: "/services/{serviceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceIdentifier" ],
                members: {
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    authType: {},
                    certificateArn: {},
                    createdAt: {
                        shape: "S44"
                    },
                    customDomainName: {},
                    dnsEntry: {
                        shape: "S1y"
                    },
                    failureCode: {},
                    failureMessage: {},
                    id: {},
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    name: {},
                    status: {}
                }
            }
        },
        GetServiceNetwork: {
            http: {
                method: "GET",
                requestUri: "/servicenetworks/{serviceNetworkIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceNetworkIdentifier" ],
                members: {
                    serviceNetworkIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    authType: {},
                    createdAt: {
                        shape: "S44"
                    },
                    id: {},
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    name: {},
                    numberOfAssociatedServices: {
                        type: "long"
                    },
                    numberOfAssociatedVPCs: {
                        type: "long"
                    }
                }
            }
        },
        GetServiceNetworkServiceAssociation: {
            http: {
                method: "GET",
                requestUri: "/servicenetworkserviceassociations/{serviceNetworkServiceAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceNetworkServiceAssociationIdentifier" ],
                members: {
                    serviceNetworkServiceAssociationIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkServiceAssociationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createdAt: {
                        shape: "S44"
                    },
                    createdBy: {},
                    customDomainName: {},
                    dnsEntry: {
                        shape: "S1y"
                    },
                    failureCode: {},
                    failureMessage: {},
                    id: {},
                    serviceArn: {},
                    serviceId: {},
                    serviceName: {},
                    serviceNetworkArn: {},
                    serviceNetworkId: {},
                    serviceNetworkName: {},
                    status: {}
                }
            }
        },
        GetServiceNetworkVpcAssociation: {
            http: {
                method: "GET",
                requestUri: "/servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceNetworkVpcAssociationIdentifier" ],
                members: {
                    serviceNetworkVpcAssociationIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkVpcAssociationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createdAt: {
                        shape: "S44"
                    },
                    createdBy: {},
                    failureCode: {},
                    failureMessage: {},
                    id: {},
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    securityGroupIds: {
                        shape: "S2k"
                    },
                    serviceNetworkArn: {},
                    serviceNetworkId: {},
                    serviceNetworkName: {},
                    status: {},
                    vpcId: {}
                }
            }
        },
        GetTargetGroup: {
            http: {
                method: "GET",
                requestUri: "/targetgroups/{targetGroupIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "targetGroupIdentifier" ],
                members: {
                    targetGroupIdentifier: {
                        location: "uri",
                        locationName: "targetGroupIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    config: {
                        shape: "S2n"
                    },
                    createdAt: {
                        shape: "S44"
                    },
                    failureCode: {},
                    failureMessage: {},
                    id: {},
                    lastUpdatedAt: {
                        shape: "S44"
                    },
                    name: {},
                    serviceArns: {
                        shape: "S4r"
                    },
                    status: {},
                    type: {}
                }
            }
        },
        ListAccessLogSubscriptions: {
            http: {
                method: "GET",
                requestUri: "/accesslogsubscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceIdentifier" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    resourceIdentifier: {
                        location: "querystring",
                        locationName: "resourceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "destinationArn", "id", "lastUpdatedAt", "resourceArn", "resourceId" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                destinationArn: {},
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S44"
                                },
                                resourceArn: {},
                                resourceId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListListeners: {
            http: {
                method: "GET",
                requestUri: "/services/{serviceIdentifier}/listeners",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceIdentifier" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S44"
                                },
                                name: {},
                                port: {
                                    type: "integer"
                                },
                                protocol: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRules: {
            http: {
                method: "GET",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "listenerIdentifier", "serviceIdentifier" ],
                members: {
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                id: {},
                                isDefault: {
                                    type: "boolean"
                                },
                                lastUpdatedAt: {
                                    shape: "S44"
                                },
                                name: {},
                                priority: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListServiceNetworkServiceAssociations: {
            http: {
                method: "GET",
                requestUri: "/servicenetworkserviceassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    serviceIdentifier: {
                        location: "querystring",
                        locationName: "serviceIdentifier"
                    },
                    serviceNetworkIdentifier: {
                        location: "querystring",
                        locationName: "serviceNetworkIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                createdBy: {},
                                customDomainName: {},
                                dnsEntry: {
                                    shape: "S1y"
                                },
                                id: {},
                                serviceArn: {},
                                serviceId: {},
                                serviceName: {},
                                serviceNetworkArn: {},
                                serviceNetworkId: {},
                                serviceNetworkName: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListServiceNetworkVpcAssociations: {
            http: {
                method: "GET",
                requestUri: "/servicenetworkvpcassociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    serviceNetworkIdentifier: {
                        location: "querystring",
                        locationName: "serviceNetworkIdentifier"
                    },
                    vpcIdentifier: {
                        location: "querystring",
                        locationName: "vpcIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                createdBy: {},
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S44"
                                },
                                serviceNetworkArn: {},
                                serviceNetworkId: {},
                                serviceNetworkName: {},
                                status: {},
                                vpcId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListServiceNetworks: {
            http: {
                method: "GET",
                requestUri: "/servicenetworks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S44"
                                },
                                name: {},
                                numberOfAssociatedServices: {
                                    type: "long"
                                },
                                numberOfAssociatedVPCs: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListServices: {
            http: {
                method: "GET",
                requestUri: "/services",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                customDomainName: {},
                                dnsEntry: {
                                    shape: "S1y"
                                },
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S44"
                                },
                                name: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S19"
                    }
                }
            }
        },
        ListTargetGroups: {
            http: {
                method: "GET",
                requestUri: "/targetgroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    targetGroupType: {
                        location: "querystring",
                        locationName: "targetGroupType"
                    },
                    vpcIdentifier: {
                        location: "querystring",
                        locationName: "vpcIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    shape: "S44"
                                },
                                id: {},
                                ipAddressType: {},
                                lambdaEventStructureVersion: {},
                                lastUpdatedAt: {
                                    shape: "S44"
                                },
                                name: {},
                                port: {
                                    type: "integer"
                                },
                                protocol: {},
                                serviceArns: {
                                    shape: "S4r"
                                },
                                status: {},
                                type: {},
                                vpcIdentifier: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTargets: {
            http: {
                requestUri: "/targetgroups/{targetGroupIdentifier}/listtargets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "targetGroupIdentifier" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    targetGroupIdentifier: {
                        location: "uri",
                        locationName: "targetGroupIdentifier"
                    },
                    targets: {
                        type: "list",
                        member: {
                            shape: "S3w"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                port: {
                                    type: "integer"
                                },
                                reasonCode: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutAuthPolicy: {
            http: {
                method: "PUT",
                requestUri: "/authpolicy/{resourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policy", "resourceIdentifier" ],
                members: {
                    policy: {},
                    resourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {},
                    state: {}
                }
            }
        },
        PutResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/resourcepolicy/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policy", "resourceArn" ],
                members: {
                    policy: {},
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RegisterTargets: {
            http: {
                requestUri: "/targetgroups/{targetGroupIdentifier}/registertargets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "targetGroupIdentifier", "targets" ],
                members: {
                    targetGroupIdentifier: {
                        location: "uri",
                        locationName: "targetGroupIdentifier"
                    },
                    targets: {
                        type: "list",
                        member: {
                            shape: "S3w"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successful: {
                        shape: "S3z"
                    },
                    unsuccessful: {
                        shape: "S40"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAccessLogSubscription: {
            http: {
                method: "PATCH",
                requestUri: "/accesslogsubscriptions/{accessLogSubscriptionIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessLogSubscriptionIdentifier", "destinationArn" ],
                members: {
                    accessLogSubscriptionIdentifier: {
                        location: "uri",
                        locationName: "accessLogSubscriptionIdentifier"
                    },
                    destinationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "destinationArn", "id", "resourceArn", "resourceId" ],
                members: {
                    arn: {},
                    destinationArn: {},
                    id: {},
                    resourceArn: {},
                    resourceId: {}
                }
            },
            idempotent: true
        },
        UpdateListener: {
            http: {
                method: "PATCH",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "defaultAction", "listenerIdentifier", "serviceIdentifier" ],
                members: {
                    defaultAction: {
                        shape: "S5"
                    },
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    defaultAction: {
                        shape: "S5"
                    },
                    id: {},
                    name: {},
                    port: {
                        type: "integer"
                    },
                    protocol: {},
                    serviceArn: {},
                    serviceId: {}
                }
            },
            idempotent: true
        },
        UpdateRule: {
            http: {
                method: "PATCH",
                requestUri: "/services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "listenerIdentifier", "ruleIdentifier", "serviceIdentifier" ],
                members: {
                    action: {
                        shape: "S5"
                    },
                    listenerIdentifier: {
                        location: "uri",
                        locationName: "listenerIdentifier"
                    },
                    match: {
                        shape: "Sd"
                    },
                    priority: {
                        type: "integer"
                    },
                    ruleIdentifier: {
                        location: "uri",
                        locationName: "ruleIdentifier"
                    },
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        shape: "S5"
                    },
                    arn: {},
                    id: {},
                    isDefault: {
                        type: "boolean"
                    },
                    match: {
                        shape: "Sd"
                    },
                    name: {},
                    priority: {
                        type: "integer"
                    }
                }
            },
            idempotent: true
        },
        UpdateService: {
            http: {
                method: "PATCH",
                requestUri: "/services/{serviceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serviceIdentifier" ],
                members: {
                    authType: {},
                    certificateArn: {},
                    serviceIdentifier: {
                        location: "uri",
                        locationName: "serviceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    authType: {},
                    certificateArn: {},
                    customDomainName: {},
                    id: {},
                    name: {}
                }
            }
        },
        UpdateServiceNetwork: {
            http: {
                method: "PATCH",
                requestUri: "/servicenetworks/{serviceNetworkIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "authType", "serviceNetworkIdentifier" ],
                members: {
                    authType: {},
                    serviceNetworkIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    authType: {},
                    id: {},
                    name: {}
                }
            },
            idempotent: true
        },
        UpdateServiceNetworkVpcAssociation: {
            http: {
                method: "PATCH",
                requestUri: "/servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "securityGroupIds", "serviceNetworkVpcAssociationIdentifier" ],
                members: {
                    securityGroupIds: {
                        type: "list",
                        member: {}
                    },
                    serviceNetworkVpcAssociationIdentifier: {
                        location: "uri",
                        locationName: "serviceNetworkVpcAssociationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createdBy: {},
                    id: {},
                    securityGroupIds: {
                        shape: "S2k"
                    },
                    status: {}
                }
            },
            idempotent: true
        },
        UpdateTargetGroup: {
            http: {
                method: "PATCH",
                requestUri: "/targetgroups/{targetGroupIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "healthCheck", "targetGroupIdentifier" ],
                members: {
                    healthCheck: {
                        shape: "S2o"
                    },
                    targetGroupIdentifier: {
                        location: "uri",
                        locationName: "targetGroupIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    config: {
                        shape: "S2n"
                    },
                    id: {},
                    name: {},
                    status: {},
                    type: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                fixedResponse: {
                    type: "structure",
                    required: [ "statusCode" ],
                    members: {
                        statusCode: {
                            type: "integer"
                        }
                    }
                },
                forward: {
                    type: "structure",
                    required: [ "targetGroups" ],
                    members: {
                        targetGroups: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "targetGroupIdentifier" ],
                                members: {
                                    targetGroupIdentifier: {},
                                    weight: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            union: true
        },
        Sd: {
            type: "structure",
            members: {
                httpMatch: {
                    type: "structure",
                    members: {
                        headerMatches: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "match", "name" ],
                                members: {
                                    caseSensitive: {
                                        type: "boolean"
                                    },
                                    match: {
                                        type: "structure",
                                        members: {
                                            contains: {},
                                            exact: {},
                                            prefix: {}
                                        },
                                        union: true
                                    },
                                    name: {}
                                }
                            }
                        },
                        method: {},
                        pathMatch: {
                            type: "structure",
                            required: [ "match" ],
                            members: {
                                caseSensitive: {
                                    type: "boolean"
                                },
                                match: {
                                    type: "structure",
                                    members: {
                                        exact: {},
                                        prefix: {}
                                    },
                                    union: true
                                }
                            }
                        }
                    }
                }
            },
            union: true
        },
        S19: {
            type: "map",
            key: {},
            value: {}
        },
        S1y: {
            type: "structure",
            members: {
                domainName: {},
                hostedZoneId: {}
            }
        },
        S2k: {
            type: "list",
            member: {}
        },
        S2n: {
            type: "structure",
            members: {
                healthCheck: {
                    shape: "S2o"
                },
                ipAddressType: {},
                lambdaEventStructureVersion: {},
                port: {
                    type: "integer"
                },
                protocol: {},
                protocolVersion: {},
                vpcIdentifier: {}
            }
        },
        S2o: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                },
                healthCheckIntervalSeconds: {
                    type: "integer"
                },
                healthCheckTimeoutSeconds: {
                    type: "integer"
                },
                healthyThresholdCount: {
                    type: "integer"
                },
                matcher: {
                    type: "structure",
                    members: {
                        httpCode: {}
                    },
                    union: true
                },
                path: {},
                port: {
                    type: "integer"
                },
                protocol: {},
                protocolVersion: {},
                unhealthyThresholdCount: {
                    type: "integer"
                }
            }
        },
        S3w: {
            type: "structure",
            required: [ "id" ],
            members: {
                id: {},
                port: {
                    type: "integer"
                }
            }
        },
        S3z: {
            type: "list",
            member: {
                shape: "S3w"
            }
        },
        S40: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    failureCode: {},
                    failureMessage: {},
                    id: {},
                    port: {
                        type: "integer"
                    }
                }
            }
        },
        S44: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S4r: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAccessLogSubscriptions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListListeners: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListRules: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListServiceNetworkServiceAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListServiceNetworkVpcAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListServiceNetworks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListServices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListTargetGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListTargets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    }
};

AWS.apiLoader.services["osis"] = {};

AWS.OSIS = AWS.Service.defineService("osis", [ "2022-01-01" ]);

AWS.apiLoader.services["osis"]["2022-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-01-01",
        endpointPrefix: "osis",
        protocol: "rest-json",
        serviceFullName: "Amazon OpenSearch Ingestion",
        serviceId: "OSIS",
        signatureVersion: "v4",
        uid: "osis-2022-01-01"
    },
    operations: {
        CreatePipeline: {
            http: {
                requestUri: "/2022-01-01/osis/createPipeline"
            },
            input: {
                type: "structure",
                required: [ "PipelineName", "MinUnits", "MaxUnits", "PipelineConfigurationBody" ],
                members: {
                    PipelineName: {},
                    MinUnits: {
                        type: "integer"
                    },
                    MaxUnits: {
                        type: "integer"
                    },
                    PipelineConfigurationBody: {},
                    LogPublishingOptions: {
                        shape: "S5"
                    },
                    VpcOptions: {
                        shape: "S9"
                    },
                    BufferOptions: {
                        shape: "Se"
                    },
                    EncryptionAtRestOptions: {
                        shape: "Sf"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "Sm"
                    }
                }
            }
        },
        DeletePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/2022-01-01/osis/deletePipeline/{PipelineName}"
            },
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {
                        location: "uri",
                        locationName: "PipelineName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetPipeline: {
            http: {
                method: "GET",
                requestUri: "/2022-01-01/osis/getPipeline/{PipelineName}"
            },
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {
                        location: "uri",
                        locationName: "PipelineName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetPipelineBlueprint: {
            http: {
                method: "GET",
                requestUri: "/2022-01-01/osis/getPipelineBlueprint/{BlueprintName}"
            },
            input: {
                type: "structure",
                required: [ "BlueprintName" ],
                members: {
                    BlueprintName: {
                        location: "uri",
                        locationName: "BlueprintName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blueprint: {
                        type: "structure",
                        members: {
                            BlueprintName: {},
                            PipelineConfigurationBody: {}
                        }
                    }
                }
            }
        },
        GetPipelineChangeProgress: {
            http: {
                method: "GET",
                requestUri: "/2022-01-01/osis/getPipelineChangeProgress/{PipelineName}"
            },
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {
                        location: "uri",
                        locationName: "PipelineName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeProgressStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                TotalNumberOfStages: {
                                    type: "integer"
                                },
                                ChangeProgressStages: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Status: {},
                                            Description: {},
                                            LastUpdatedAt: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPipelineBlueprints: {
            http: {
                requestUri: "/2022-01-01/osis/listPipelineBlueprints"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Blueprints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BlueprintName: {}
                            }
                        }
                    }
                }
            }
        },
        ListPipelines: {
            http: {
                method: "GET",
                requestUri: "/2022-01-01/osis/listPipelines"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Pipelines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Status: {},
                                StatusReason: {
                                    shape: "Sq"
                                },
                                PipelineName: {},
                                PipelineArn: {},
                                MinUnits: {
                                    type: "integer"
                                },
                                MaxUnits: {
                                    type: "integer"
                                },
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2022-01-01/osis/listTagsForResource/"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        StartPipeline: {
            http: {
                method: "PUT",
                requestUri: "/2022-01-01/osis/startPipeline/{PipelineName}"
            },
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {
                        location: "uri",
                        locationName: "PipelineName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "Sm"
                    }
                }
            }
        },
        StopPipeline: {
            http: {
                method: "PUT",
                requestUri: "/2022-01-01/osis/stopPipeline/{PipelineName}"
            },
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {
                        location: "uri",
                        locationName: "PipelineName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "Sm"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/2022-01-01/osis/tagResource/"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {
                        location: "querystring",
                        locationName: "arn"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/2022-01-01/osis/untagResource/"
            },
            input: {
                type: "structure",
                required: [ "Arn", "TagKeys" ],
                members: {
                    Arn: {
                        location: "querystring",
                        locationName: "arn"
                    },
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePipeline: {
            http: {
                method: "PUT",
                requestUri: "/2022-01-01/osis/updatePipeline/{PipelineName}"
            },
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {
                        location: "uri",
                        locationName: "PipelineName"
                    },
                    MinUnits: {
                        type: "integer"
                    },
                    MaxUnits: {
                        type: "integer"
                    },
                    PipelineConfigurationBody: {},
                    LogPublishingOptions: {
                        shape: "S5"
                    },
                    BufferOptions: {
                        shape: "Se"
                    },
                    EncryptionAtRestOptions: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "Sm"
                    }
                }
            }
        },
        ValidatePipeline: {
            http: {
                requestUri: "/2022-01-01/osis/validatePipeline"
            },
            input: {
                type: "structure",
                required: [ "PipelineConfigurationBody" ],
                members: {
                    PipelineConfigurationBody: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    isValid: {
                        type: "boolean"
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Message: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                IsLoggingEnabled: {
                    type: "boolean"
                },
                CloudWatchLogDestination: {
                    type: "structure",
                    required: [ "LogGroup" ],
                    members: {
                        LogGroup: {}
                    }
                }
            }
        },
        S9: {
            type: "structure",
            required: [ "SubnetIds" ],
            members: {
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "PersistentBufferEnabled" ],
            members: {
                PersistentBufferEnabled: {
                    type: "boolean"
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "KmsKeyArn" ],
            members: {
                KmsKeyArn: {}
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                PipelineName: {},
                PipelineArn: {},
                MinUnits: {
                    type: "integer"
                },
                MaxUnits: {
                    type: "integer"
                },
                Status: {},
                StatusReason: {
                    shape: "Sq"
                },
                PipelineConfigurationBody: {},
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                },
                IngestEndpointUrls: {
                    type: "list",
                    member: {}
                },
                LogPublishingOptions: {
                    shape: "S5"
                },
                VpcEndpoints: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            VpcEndpointId: {},
                            VpcId: {},
                            VpcOptions: {
                                shape: "S9"
                            }
                        }
                    }
                },
                BufferOptions: {
                    shape: "Se"
                },
                EncryptionAtRestOptions: {
                    shape: "Sf"
                },
                ServiceVpcEndpoints: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ServiceName: {},
                            VpcEndpointId: {}
                        }
                    }
                },
                Tags: {
                    shape: "Sh"
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                Description: {}
            }
        }
    },
    paginators: {
        ListPipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mediapackagev2"] = {};

AWS.MediaPackageV2 = AWS.Service.defineService("mediapackagev2", [ "2022-12-25" ]);

AWS.apiLoader.services["mediapackagev2"]["2022-12-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-12-25",
        endpointPrefix: "mediapackagev2",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "mediapackagev2",
        serviceFullName: "AWS Elemental MediaPackage v2",
        serviceId: "MediaPackageV2",
        signatureVersion: "v4",
        signingName: "mediapackagev2",
        uid: "mediapackagev2-2022-12-25"
    },
    operations: {
        CreateChannel: {
            http: {
                requestUri: "/channelGroup/{ChannelGroupName}/channel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {},
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "x-amzn-client-token"
                    },
                    Description: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "ChannelName", "ChannelGroupName", "CreatedAt", "ModifiedAt" ],
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelGroupName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    IngestEndpoints: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        CreateChannelGroup: {
            http: {
                requestUri: "/channelGroup",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName" ],
                members: {
                    ChannelGroupName: {},
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "x-amzn-client-token"
                    },
                    Description: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChannelGroupName", "Arn", "EgressDomain", "CreatedAt", "ModifiedAt" ],
                members: {
                    ChannelGroupName: {},
                    Arn: {},
                    EgressDomain: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        CreateOriginEndpoint: {
            http: {
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName", "ContainerType" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    OriginEndpointName: {},
                    ContainerType: {},
                    Segment: {
                        shape: "Sh"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "x-amzn-client-token"
                    },
                    Description: {},
                    StartoverWindowSeconds: {
                        type: "integer"
                    },
                    HlsManifests: {
                        shape: "S14"
                    },
                    LowLatencyHlsManifests: {
                        shape: "S1e"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "ChannelGroupName", "ChannelName", "OriginEndpointName", "ContainerType", "Segment", "CreatedAt", "ModifiedAt" ],
                members: {
                    Arn: {},
                    ChannelGroupName: {},
                    ChannelName: {},
                    OriginEndpointName: {},
                    ContainerType: {},
                    Segment: {
                        shape: "Sh"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    StartoverWindowSeconds: {
                        type: "integer"
                    },
                    HlsManifests: {
                        shape: "S1k"
                    },
                    LowLatencyHlsManifests: {
                        shape: "S1m"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteChannelGroup: {
            http: {
                method: "DELETE",
                requestUri: "/channelGroup/{ChannelGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteChannelPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteOriginEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    OriginEndpointName: {
                        location: "uri",
                        locationName: "OriginEndpointName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteOriginEndpointPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    OriginEndpointName: {
                        location: "uri",
                        locationName: "OriginEndpointName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetChannel: {
            http: {
                method: "GET",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "ChannelName", "ChannelGroupName", "CreatedAt", "ModifiedAt" ],
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelGroupName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    IngestEndpoints: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        GetChannelGroup: {
            http: {
                method: "GET",
                requestUri: "/channelGroup/{ChannelGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChannelGroupName", "Arn", "EgressDomain", "CreatedAt", "ModifiedAt" ],
                members: {
                    ChannelGroupName: {},
                    Arn: {},
                    EgressDomain: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        GetChannelPolicy: {
            http: {
                method: "GET",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "Policy" ],
                members: {
                    ChannelGroupName: {},
                    ChannelName: {},
                    Policy: {}
                }
            }
        },
        GetOriginEndpoint: {
            http: {
                method: "GET",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    OriginEndpointName: {
                        location: "uri",
                        locationName: "OriginEndpointName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "ChannelGroupName", "ChannelName", "OriginEndpointName", "ContainerType", "Segment", "CreatedAt", "ModifiedAt" ],
                members: {
                    Arn: {},
                    ChannelGroupName: {},
                    ChannelName: {},
                    OriginEndpointName: {},
                    ContainerType: {},
                    Segment: {
                        shape: "Sh"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    StartoverWindowSeconds: {
                        type: "integer"
                    },
                    HlsManifests: {
                        shape: "S1k"
                    },
                    LowLatencyHlsManifests: {
                        shape: "S1m"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        GetOriginEndpointPolicy: {
            http: {
                method: "GET",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    OriginEndpointName: {
                        location: "uri",
                        locationName: "OriginEndpointName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName", "Policy" ],
                members: {
                    ChannelGroupName: {},
                    ChannelName: {},
                    OriginEndpointName: {},
                    Policy: {}
                }
            }
        },
        ListChannelGroups: {
            http: {
                method: "GET",
                requestUri: "/channelGroup",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ChannelGroupName", "Arn", "CreatedAt", "ModifiedAt" ],
                            members: {
                                ChannelGroupName: {},
                                Arn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                ModifiedAt: {
                                    type: "timestamp"
                                },
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channelGroup/{ChannelGroupName}/channel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "ChannelName", "ChannelGroupName", "CreatedAt", "ModifiedAt" ],
                            members: {
                                Arn: {},
                                ChannelName: {},
                                ChannelGroupName: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                ModifiedAt: {
                                    type: "timestamp"
                                },
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOriginEndpoints: {
            http: {
                method: "GET",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "ChannelGroupName", "ChannelName", "OriginEndpointName", "ContainerType" ],
                            members: {
                                Arn: {},
                                ChannelGroupName: {},
                                ChannelName: {},
                                OriginEndpointName: {},
                                ContainerType: {},
                                Description: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                ModifiedAt: {
                                    type: "timestamp"
                                },
                                HlsManifests: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "ManifestName" ],
                                        members: {
                                            ManifestName: {},
                                            ChildManifestName: {},
                                            Url: {}
                                        }
                                    }
                                },
                                LowLatencyHlsManifests: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "ManifestName" ],
                                        members: {
                                            ManifestName: {},
                                            ChildManifestName: {},
                                            Url: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        PutChannelPolicy: {
            http: {
                method: "PUT",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "Policy" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutOriginEndpointPolicy: {
            http: {
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName", "Policy" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    OriginEndpointName: {
                        location: "uri",
                        locationName: "OriginEndpointName"
                    },
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "ChannelName", "ChannelGroupName", "CreatedAt", "ModifiedAt" ],
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelGroupName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    IngestEndpoints: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            },
            idempotent: true
        },
        UpdateChannelGroup: {
            http: {
                method: "PUT",
                requestUri: "/channelGroup/{ChannelGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ChannelGroupName", "Arn", "EgressDomain", "CreatedAt", "ModifiedAt" ],
                members: {
                    ChannelGroupName: {},
                    Arn: {},
                    EgressDomain: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            },
            idempotent: true
        },
        UpdateOriginEndpoint: {
            http: {
                method: "PUT",
                requestUri: "/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelGroupName", "ChannelName", "OriginEndpointName", "ContainerType" ],
                members: {
                    ChannelGroupName: {
                        location: "uri",
                        locationName: "ChannelGroupName"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    OriginEndpointName: {
                        location: "uri",
                        locationName: "OriginEndpointName"
                    },
                    ContainerType: {},
                    Segment: {
                        shape: "Sh"
                    },
                    Description: {},
                    StartoverWindowSeconds: {
                        type: "integer"
                    },
                    HlsManifests: {
                        shape: "S14"
                    },
                    LowLatencyHlsManifests: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "ChannelGroupName", "ChannelName", "OriginEndpointName", "ContainerType", "Segment", "CreatedAt", "ModifiedAt" ],
                members: {
                    Arn: {},
                    ChannelGroupName: {},
                    ChannelName: {},
                    OriginEndpointName: {},
                    ContainerType: {},
                    Segment: {
                        shape: "Sh"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ModifiedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    StartoverWindowSeconds: {
                        type: "integer"
                    },
                    HlsManifests: {
                        shape: "S1k"
                    },
                    LowLatencyHlsManifests: {
                        shape: "S1m"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Url: {}
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                SegmentDurationSeconds: {
                    type: "integer"
                },
                SegmentName: {},
                TsUseAudioRenditionGroup: {
                    type: "boolean"
                },
                IncludeIframeOnlyStreams: {
                    type: "boolean"
                },
                TsIncludeDvbSubtitles: {
                    type: "boolean"
                },
                Scte: {
                    type: "structure",
                    members: {
                        ScteFilter: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                Encryption: {
                    type: "structure",
                    required: [ "EncryptionMethod", "SpekeKeyProvider" ],
                    members: {
                        ConstantInitializationVector: {},
                        EncryptionMethod: {
                            type: "structure",
                            members: {
                                TsEncryptionMethod: {},
                                CmafEncryptionMethod: {}
                            }
                        },
                        KeyRotationIntervalSeconds: {
                            type: "integer"
                        },
                        SpekeKeyProvider: {
                            type: "structure",
                            required: [ "EncryptionContractConfiguration", "ResourceId", "DrmSystems", "RoleArn", "Url" ],
                            members: {
                                EncryptionContractConfiguration: {
                                    type: "structure",
                                    required: [ "PresetSpeke20Audio", "PresetSpeke20Video" ],
                                    members: {
                                        PresetSpeke20Audio: {},
                                        PresetSpeke20Video: {}
                                    }
                                },
                                ResourceId: {},
                                DrmSystems: {
                                    type: "list",
                                    member: {}
                                },
                                RoleArn: {},
                                Url: {}
                            }
                        }
                    }
                }
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ManifestName" ],
                members: {
                    ManifestName: {},
                    ChildManifestName: {},
                    ScteHls: {
                        shape: "S17"
                    },
                    ManifestWindowSeconds: {
                        type: "integer"
                    },
                    ProgramDateTimeIntervalSeconds: {
                        type: "integer"
                    },
                    FilterConfiguration: {
                        shape: "S1b"
                    }
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                AdMarkerHls: {}
            }
        },
        S1b: {
            type: "structure",
            members: {
                ManifestFilter: {},
                Start: {
                    type: "timestamp"
                },
                End: {
                    type: "timestamp"
                },
                TimeDelaySeconds: {
                    type: "integer"
                }
            }
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ManifestName" ],
                members: {
                    ManifestName: {},
                    ChildManifestName: {},
                    ScteHls: {
                        shape: "S17"
                    },
                    ManifestWindowSeconds: {
                        type: "integer"
                    },
                    ProgramDateTimeIntervalSeconds: {
                        type: "integer"
                    },
                    FilterConfiguration: {
                        shape: "S1b"
                    }
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ManifestName", "Url" ],
                members: {
                    ManifestName: {},
                    Url: {},
                    ChildManifestName: {},
                    ManifestWindowSeconds: {
                        type: "integer"
                    },
                    ProgramDateTimeIntervalSeconds: {
                        type: "integer"
                    },
                    ScteHls: {
                        shape: "S17"
                    },
                    FilterConfiguration: {
                        shape: "S1b"
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ManifestName", "Url" ],
                members: {
                    ManifestName: {},
                    Url: {},
                    ChildManifestName: {},
                    ManifestWindowSeconds: {
                        type: "integer"
                    },
                    ProgramDateTimeIntervalSeconds: {
                        type: "integer"
                    },
                    ScteHls: {
                        shape: "S17"
                    },
                    FilterConfiguration: {
                        shape: "S1b"
                    }
                }
            }
        }
    },
    paginators: {
        ListChannelGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListOriginEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["paymentcryptography"] = {};

AWS.PaymentCryptography = AWS.Service.defineService("paymentcryptography", [ "2021-09-14" ]);

AWS.apiLoader.services["paymentcryptography"]["2021-09-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-14",
        endpointPrefix: "controlplane.payment-cryptography",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Payment Cryptography Control Plane",
        serviceId: "Payment Cryptography",
        signatureVersion: "v4",
        signingName: "payment-cryptography",
        targetPrefix: "PaymentCryptographyControlPlane",
        uid: "payment-cryptography-2021-09-14"
    },
    operations: {
        CreateAlias: {
            input: {
                type: "structure",
                required: [ "AliasName" ],
                members: {
                    AliasName: {},
                    KeyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Alias" ],
                members: {
                    Alias: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        CreateKey: {
            input: {
                type: "structure",
                required: [ "Exportable", "KeyAttributes" ],
                members: {
                    Enabled: {
                        type: "boolean"
                    },
                    Exportable: {
                        type: "boolean"
                    },
                    KeyAttributes: {
                        shape: "S8"
                    },
                    KeyCheckValueAlgorithm: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {
                        shape: "Sk"
                    }
                }
            }
        },
        DeleteAlias: {
            input: {
                type: "structure",
                required: [ "AliasName" ],
                members: {
                    AliasName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteKey: {
            input: {
                type: "structure",
                required: [ "KeyIdentifier" ],
                members: {
                    DeleteKeyInDays: {
                        type: "integer"
                    },
                    KeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {
                        shape: "Sk"
                    }
                }
            },
            idempotent: true
        },
        ExportKey: {
            input: {
                type: "structure",
                required: [ "ExportKeyIdentifier", "KeyMaterial" ],
                members: {
                    ExportAttributes: {
                        type: "structure",
                        members: {
                            ExportDukptInitialKey: {
                                type: "structure",
                                required: [ "KeySerialNumber" ],
                                members: {
                                    KeySerialNumber: {}
                                }
                            },
                            KeyCheckValueAlgorithm: {}
                        }
                    },
                    ExportKeyIdentifier: {},
                    KeyMaterial: {
                        type: "structure",
                        members: {
                            Tr31KeyBlock: {
                                type: "structure",
                                required: [ "WrappingKeyIdentifier" ],
                                members: {
                                    WrappingKeyIdentifier: {}
                                }
                            },
                            Tr34KeyBlock: {
                                type: "structure",
                                required: [ "CertificateAuthorityPublicKeyIdentifier", "ExportToken", "KeyBlockFormat", "WrappingKeyCertificate" ],
                                members: {
                                    CertificateAuthorityPublicKeyIdentifier: {},
                                    ExportToken: {},
                                    KeyBlockFormat: {},
                                    RandomNonce: {},
                                    WrappingKeyCertificate: {
                                        shape: "S15"
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WrappedKey: {
                        type: "structure",
                        required: [ "KeyMaterial", "WrappedKeyMaterialFormat", "WrappingKeyArn" ],
                        members: {
                            KeyCheckValue: {},
                            KeyCheckValueAlgorithm: {},
                            KeyMaterial: {
                                type: "string",
                                sensitive: true
                            },
                            WrappedKeyMaterialFormat: {},
                            WrappingKeyArn: {}
                        }
                    }
                }
            }
        },
        GetAlias: {
            input: {
                type: "structure",
                required: [ "AliasName" ],
                members: {
                    AliasName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Alias" ],
                members: {
                    Alias: {
                        shape: "S5"
                    }
                }
            }
        },
        GetKey: {
            input: {
                type: "structure",
                required: [ "KeyIdentifier" ],
                members: {
                    KeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetParametersForExport: {
            input: {
                type: "structure",
                required: [ "KeyMaterialType", "SigningKeyAlgorithm" ],
                members: {
                    KeyMaterialType: {},
                    SigningKeyAlgorithm: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ExportToken", "ParametersValidUntilTimestamp", "SigningKeyAlgorithm", "SigningKeyCertificate", "SigningKeyCertificateChain" ],
                members: {
                    ExportToken: {},
                    ParametersValidUntilTimestamp: {
                        type: "timestamp"
                    },
                    SigningKeyAlgorithm: {},
                    SigningKeyCertificate: {
                        shape: "S15"
                    },
                    SigningKeyCertificateChain: {
                        shape: "S15"
                    }
                }
            }
        },
        GetParametersForImport: {
            input: {
                type: "structure",
                required: [ "KeyMaterialType", "WrappingKeyAlgorithm" ],
                members: {
                    KeyMaterialType: {},
                    WrappingKeyAlgorithm: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ImportToken", "ParametersValidUntilTimestamp", "WrappingKeyAlgorithm", "WrappingKeyCertificate", "WrappingKeyCertificateChain" ],
                members: {
                    ImportToken: {},
                    ParametersValidUntilTimestamp: {
                        type: "timestamp"
                    },
                    WrappingKeyAlgorithm: {},
                    WrappingKeyCertificate: {
                        shape: "S15"
                    },
                    WrappingKeyCertificateChain: {
                        shape: "S15"
                    }
                }
            }
        },
        GetPublicKeyCertificate: {
            input: {
                type: "structure",
                required: [ "KeyIdentifier" ],
                members: {
                    KeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "KeyCertificate", "KeyCertificateChain" ],
                members: {
                    KeyCertificate: {
                        shape: "S15"
                    },
                    KeyCertificateChain: {
                        shape: "S15"
                    }
                }
            }
        },
        ImportKey: {
            input: {
                type: "structure",
                required: [ "KeyMaterial" ],
                members: {
                    Enabled: {
                        type: "boolean"
                    },
                    KeyCheckValueAlgorithm: {},
                    KeyMaterial: {
                        type: "structure",
                        members: {
                            RootCertificatePublicKey: {
                                type: "structure",
                                required: [ "KeyAttributes", "PublicKeyCertificate" ],
                                members: {
                                    KeyAttributes: {
                                        shape: "S8"
                                    },
                                    PublicKeyCertificate: {
                                        shape: "S15"
                                    }
                                }
                            },
                            Tr31KeyBlock: {
                                type: "structure",
                                required: [ "WrappedKeyBlock", "WrappingKeyIdentifier" ],
                                members: {
                                    WrappedKeyBlock: {},
                                    WrappingKeyIdentifier: {}
                                }
                            },
                            Tr34KeyBlock: {
                                type: "structure",
                                required: [ "CertificateAuthorityPublicKeyIdentifier", "ImportToken", "KeyBlockFormat", "SigningKeyCertificate", "WrappedKeyBlock" ],
                                members: {
                                    CertificateAuthorityPublicKeyIdentifier: {},
                                    ImportToken: {},
                                    KeyBlockFormat: {},
                                    RandomNonce: {},
                                    SigningKeyCertificate: {
                                        shape: "S15"
                                    },
                                    WrappedKeyBlock: {}
                                }
                            },
                            TrustedCertificatePublicKey: {
                                type: "structure",
                                required: [ "CertificateAuthorityPublicKeyIdentifier", "KeyAttributes", "PublicKeyCertificate" ],
                                members: {
                                    CertificateAuthorityPublicKeyIdentifier: {},
                                    KeyAttributes: {
                                        shape: "S8"
                                    },
                                    PublicKeyCertificate: {
                                        shape: "S15"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {
                        shape: "Sk"
                    }
                }
            }
        },
        ListAliases: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Aliases" ],
                members: {
                    Aliases: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListKeys: {
            input: {
                type: "structure",
                members: {
                    KeyState: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Keys" ],
                members: {
                    Keys: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Enabled", "Exportable", "KeyArn", "KeyAttributes", "KeyCheckValue", "KeyState" ],
                            members: {
                                Enabled: {
                                    type: "boolean"
                                },
                                Exportable: {
                                    type: "boolean"
                                },
                                KeyArn: {},
                                KeyAttributes: {
                                    shape: "S8"
                                },
                                KeyCheckValue: {},
                                KeyState: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        RestoreKey: {
            input: {
                type: "structure",
                required: [ "KeyIdentifier" ],
                members: {
                    KeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {
                        shape: "Sk"
                    }
                }
            }
        },
        StartKeyUsage: {
            input: {
                type: "structure",
                required: [ "KeyIdentifier" ],
                members: {
                    KeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {
                        shape: "Sk"
                    }
                }
            }
        },
        StopKeyUsage: {
            input: {
                type: "structure",
                required: [ "KeyIdentifier" ],
                members: {
                    KeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {
                        shape: "Sk"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAlias: {
            input: {
                type: "structure",
                required: [ "AliasName" ],
                members: {
                    AliasName: {},
                    KeyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Alias" ],
                members: {
                    Alias: {
                        shape: "S5"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "AliasName" ],
            members: {
                AliasName: {},
                KeyArn: {}
            }
        },
        S8: {
            type: "structure",
            required: [ "KeyAlgorithm", "KeyClass", "KeyModesOfUse", "KeyUsage" ],
            members: {
                KeyAlgorithm: {},
                KeyClass: {},
                KeyModesOfUse: {
                    type: "structure",
                    members: {
                        Decrypt: {
                            type: "boolean"
                        },
                        DeriveKey: {
                            type: "boolean"
                        },
                        Encrypt: {
                            type: "boolean"
                        },
                        Generate: {
                            type: "boolean"
                        },
                        NoRestrictions: {
                            type: "boolean"
                        },
                        Sign: {
                            type: "boolean"
                        },
                        Unwrap: {
                            type: "boolean"
                        },
                        Verify: {
                            type: "boolean"
                        },
                        Wrap: {
                            type: "boolean"
                        }
                    }
                },
                KeyUsage: {}
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "CreateTimestamp", "Enabled", "Exportable", "KeyArn", "KeyAttributes", "KeyCheckValue", "KeyCheckValueAlgorithm", "KeyOrigin", "KeyState" ],
            members: {
                CreateTimestamp: {
                    type: "timestamp"
                },
                DeletePendingTimestamp: {
                    type: "timestamp"
                },
                DeleteTimestamp: {
                    type: "timestamp"
                },
                Enabled: {
                    type: "boolean"
                },
                Exportable: {
                    type: "boolean"
                },
                KeyArn: {},
                KeyAttributes: {
                    shape: "S8"
                },
                KeyCheckValue: {},
                KeyCheckValueAlgorithm: {},
                KeyOrigin: {},
                KeyState: {},
                UsageStartTimestamp: {
                    type: "timestamp"
                },
                UsageStopTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S15: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Aliases"
        },
        ListKeys: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Keys"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["paymentcryptographydata"] = {};

AWS.PaymentCryptographyData = AWS.Service.defineService("paymentcryptographydata", [ "2022-02-03" ]);

AWS.apiLoader.services["paymentcryptographydata"]["2022-02-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-02-03",
        endpointPrefix: "dataplane.payment-cryptography",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Payment Cryptography Data Plane",
        serviceId: "Payment Cryptography Data",
        signatureVersion: "v4",
        signingName: "payment-cryptography",
        uid: "payment-cryptography-data-2022-02-03"
    },
    operations: {
        DecryptData: {
            http: {
                requestUri: "/keys/{KeyIdentifier}/decrypt",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CipherText", "DecryptionAttributes", "KeyIdentifier" ],
                members: {
                    CipherText: {
                        shape: "S2"
                    },
                    DecryptionAttributes: {
                        shape: "S3"
                    },
                    KeyIdentifier: {
                        location: "uri",
                        locationName: "KeyIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyCheckValue", "PlainText" ],
                members: {
                    KeyArn: {},
                    KeyCheckValue: {},
                    PlainText: {
                        shape: "S2"
                    }
                }
            }
        },
        EncryptData: {
            http: {
                requestUri: "/keys/{KeyIdentifier}/encrypt",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EncryptionAttributes", "KeyIdentifier", "PlainText" ],
                members: {
                    EncryptionAttributes: {
                        shape: "S3"
                    },
                    KeyIdentifier: {
                        location: "uri",
                        locationName: "KeyIdentifier"
                    },
                    PlainText: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CipherText", "KeyArn" ],
                members: {
                    CipherText: {
                        shape: "S2"
                    },
                    KeyArn: {},
                    KeyCheckValue: {}
                }
            }
        },
        GenerateCardValidationData: {
            http: {
                requestUri: "/cardvalidationdata/generate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GenerationAttributes", "KeyIdentifier", "PrimaryAccountNumber" ],
                members: {
                    GenerationAttributes: {
                        type: "structure",
                        members: {
                            AmexCardSecurityCodeVersion1: {
                                shape: "Sn"
                            },
                            AmexCardSecurityCodeVersion2: {
                                shape: "Sp"
                            },
                            CardHolderVerificationValue: {
                                shape: "Sr"
                            },
                            CardVerificationValue1: {
                                shape: "Sv"
                            },
                            CardVerificationValue2: {
                                shape: "Sw"
                            },
                            DynamicCardVerificationCode: {
                                shape: "Sx"
                            },
                            DynamicCardVerificationValue: {
                                shape: "Sz"
                            }
                        },
                        union: true
                    },
                    KeyIdentifier: {},
                    PrimaryAccountNumber: {
                        shape: "S10"
                    },
                    ValidationDataLength: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyCheckValue", "ValidationData" ],
                members: {
                    KeyArn: {},
                    KeyCheckValue: {},
                    ValidationData: {}
                }
            }
        },
        GenerateMac: {
            http: {
                requestUri: "/mac/generate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GenerationAttributes", "KeyIdentifier", "MessageData" ],
                members: {
                    GenerationAttributes: {
                        shape: "S15"
                    },
                    KeyIdentifier: {},
                    MacLength: {
                        type: "integer"
                    },
                    MessageData: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyCheckValue", "Mac" ],
                members: {
                    KeyArn: {},
                    KeyCheckValue: {},
                    Mac: {}
                }
            }
        },
        GeneratePinData: {
            http: {
                requestUri: "/pindata/generate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EncryptionKeyIdentifier", "GenerationAttributes", "GenerationKeyIdentifier", "PinBlockFormat", "PrimaryAccountNumber" ],
                members: {
                    EncryptionKeyIdentifier: {},
                    GenerationAttributes: {
                        type: "structure",
                        members: {
                            Ibm3624NaturalPin: {
                                type: "structure",
                                required: [ "DecimalizationTable", "PinValidationData", "PinValidationDataPadCharacter" ],
                                members: {
                                    DecimalizationTable: {},
                                    PinValidationData: {},
                                    PinValidationDataPadCharacter: {}
                                }
                            },
                            Ibm3624PinFromOffset: {
                                type: "structure",
                                required: [ "DecimalizationTable", "PinOffset", "PinValidationData", "PinValidationDataPadCharacter" ],
                                members: {
                                    DecimalizationTable: {},
                                    PinOffset: {},
                                    PinValidationData: {},
                                    PinValidationDataPadCharacter: {}
                                }
                            },
                            Ibm3624PinOffset: {
                                type: "structure",
                                required: [ "DecimalizationTable", "EncryptedPinBlock", "PinValidationData", "PinValidationDataPadCharacter" ],
                                members: {
                                    DecimalizationTable: {},
                                    EncryptedPinBlock: {},
                                    PinValidationData: {},
                                    PinValidationDataPadCharacter: {}
                                }
                            },
                            Ibm3624RandomPin: {
                                type: "structure",
                                required: [ "DecimalizationTable", "PinValidationData", "PinValidationDataPadCharacter" ],
                                members: {
                                    DecimalizationTable: {},
                                    PinValidationData: {},
                                    PinValidationDataPadCharacter: {}
                                }
                            },
                            VisaPin: {
                                type: "structure",
                                required: [ "PinVerificationKeyIndex" ],
                                members: {
                                    PinVerificationKeyIndex: {
                                        type: "integer"
                                    }
                                }
                            },
                            VisaPinVerificationValue: {
                                type: "structure",
                                required: [ "EncryptedPinBlock", "PinVerificationKeyIndex" ],
                                members: {
                                    EncryptedPinBlock: {},
                                    PinVerificationKeyIndex: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    GenerationKeyIdentifier: {},
                    PinBlockFormat: {},
                    PinDataLength: {
                        type: "integer"
                    },
                    PrimaryAccountNumber: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EncryptedPinBlock", "EncryptionKeyArn", "EncryptionKeyCheckValue", "GenerationKeyArn", "GenerationKeyCheckValue", "PinData" ],
                members: {
                    EncryptedPinBlock: {},
                    EncryptionKeyArn: {},
                    EncryptionKeyCheckValue: {},
                    GenerationKeyArn: {},
                    GenerationKeyCheckValue: {},
                    PinData: {
                        type: "structure",
                        members: {
                            PinOffset: {},
                            VerificationValue: {}
                        },
                        union: true
                    }
                }
            }
        },
        ReEncryptData: {
            http: {
                requestUri: "/keys/{IncomingKeyIdentifier}/reencrypt",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CipherText", "IncomingEncryptionAttributes", "IncomingKeyIdentifier", "OutgoingEncryptionAttributes", "OutgoingKeyIdentifier" ],
                members: {
                    CipherText: {
                        shape: "S2"
                    },
                    IncomingEncryptionAttributes: {
                        shape: "S20"
                    },
                    IncomingKeyIdentifier: {
                        location: "uri",
                        locationName: "IncomingKeyIdentifier"
                    },
                    OutgoingEncryptionAttributes: {
                        shape: "S20"
                    },
                    OutgoingKeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CipherText", "KeyArn", "KeyCheckValue" ],
                members: {
                    CipherText: {
                        shape: "S2"
                    },
                    KeyArn: {},
                    KeyCheckValue: {}
                }
            }
        },
        TranslatePinData: {
            http: {
                requestUri: "/pindata/translate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EncryptedPinBlock", "IncomingKeyIdentifier", "IncomingTranslationAttributes", "OutgoingKeyIdentifier", "OutgoingTranslationAttributes" ],
                members: {
                    EncryptedPinBlock: {
                        type: "string",
                        sensitive: true
                    },
                    IncomingDukptAttributes: {
                        shape: "S24"
                    },
                    IncomingKeyIdentifier: {},
                    IncomingTranslationAttributes: {
                        shape: "S25"
                    },
                    OutgoingDukptAttributes: {
                        shape: "S24"
                    },
                    OutgoingKeyIdentifier: {},
                    OutgoingTranslationAttributes: {
                        shape: "S25"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyCheckValue", "PinBlock" ],
                members: {
                    KeyArn: {},
                    KeyCheckValue: {},
                    PinBlock: {}
                }
            }
        },
        VerifyAuthRequestCryptogram: {
            http: {
                requestUri: "/cryptogram/verify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AuthRequestCryptogram", "KeyIdentifier", "MajorKeyDerivationMode", "SessionKeyDerivationAttributes", "TransactionData" ],
                members: {
                    AuthRequestCryptogram: {},
                    AuthResponseAttributes: {
                        type: "structure",
                        members: {
                            ArpcMethod1: {
                                type: "structure",
                                required: [ "AuthResponseCode" ],
                                members: {
                                    AuthResponseCode: {}
                                }
                            },
                            ArpcMethod2: {
                                type: "structure",
                                required: [ "CardStatusUpdate" ],
                                members: {
                                    CardStatusUpdate: {},
                                    ProprietaryAuthenticationData: {}
                                }
                            }
                        },
                        union: true
                    },
                    KeyIdentifier: {},
                    MajorKeyDerivationMode: {},
                    SessionKeyDerivationAttributes: {
                        type: "structure",
                        members: {
                            Amex: {
                                type: "structure",
                                required: [ "PanSequenceNumber", "PrimaryAccountNumber" ],
                                members: {
                                    PanSequenceNumber: {},
                                    PrimaryAccountNumber: {
                                        shape: "S10"
                                    }
                                }
                            },
                            Emv2000: {
                                type: "structure",
                                required: [ "ApplicationTransactionCounter", "PanSequenceNumber", "PrimaryAccountNumber" ],
                                members: {
                                    ApplicationTransactionCounter: {},
                                    PanSequenceNumber: {},
                                    PrimaryAccountNumber: {
                                        shape: "S10"
                                    }
                                }
                            },
                            EmvCommon: {
                                type: "structure",
                                required: [ "ApplicationTransactionCounter", "PanSequenceNumber", "PrimaryAccountNumber" ],
                                members: {
                                    ApplicationTransactionCounter: {},
                                    PanSequenceNumber: {},
                                    PrimaryAccountNumber: {
                                        shape: "S10"
                                    }
                                }
                            },
                            Mastercard: {
                                type: "structure",
                                required: [ "ApplicationTransactionCounter", "PanSequenceNumber", "PrimaryAccountNumber", "UnpredictableNumber" ],
                                members: {
                                    ApplicationTransactionCounter: {},
                                    PanSequenceNumber: {},
                                    PrimaryAccountNumber: {
                                        shape: "S10"
                                    },
                                    UnpredictableNumber: {}
                                }
                            },
                            Visa: {
                                type: "structure",
                                required: [ "PanSequenceNumber", "PrimaryAccountNumber" ],
                                members: {
                                    PanSequenceNumber: {},
                                    PrimaryAccountNumber: {
                                        shape: "S10"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    TransactionData: {}
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyCheckValue" ],
                members: {
                    AuthResponseValue: {},
                    KeyArn: {},
                    KeyCheckValue: {}
                }
            }
        },
        VerifyCardValidationData: {
            http: {
                requestUri: "/cardvalidationdata/verify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KeyIdentifier", "PrimaryAccountNumber", "ValidationData", "VerificationAttributes" ],
                members: {
                    KeyIdentifier: {},
                    PrimaryAccountNumber: {
                        shape: "S10"
                    },
                    ValidationData: {},
                    VerificationAttributes: {
                        type: "structure",
                        members: {
                            AmexCardSecurityCodeVersion1: {
                                shape: "Sn"
                            },
                            AmexCardSecurityCodeVersion2: {
                                shape: "Sp"
                            },
                            CardHolderVerificationValue: {
                                shape: "Sr"
                            },
                            CardVerificationValue1: {
                                shape: "Sv"
                            },
                            CardVerificationValue2: {
                                shape: "Sw"
                            },
                            DiscoverDynamicCardVerificationCode: {
                                type: "structure",
                                required: [ "ApplicationTransactionCounter", "CardExpiryDate", "UnpredictableNumber" ],
                                members: {
                                    ApplicationTransactionCounter: {},
                                    CardExpiryDate: {},
                                    UnpredictableNumber: {}
                                }
                            },
                            DynamicCardVerificationCode: {
                                shape: "Sx"
                            },
                            DynamicCardVerificationValue: {
                                shape: "Sz"
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyCheckValue" ],
                members: {
                    KeyArn: {},
                    KeyCheckValue: {}
                }
            }
        },
        VerifyMac: {
            http: {
                requestUri: "/mac/verify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KeyIdentifier", "Mac", "MessageData", "VerificationAttributes" ],
                members: {
                    KeyIdentifier: {},
                    Mac: {
                        type: "string",
                        sensitive: true
                    },
                    MacLength: {
                        type: "integer"
                    },
                    MessageData: {
                        shape: "S1e"
                    },
                    VerificationAttributes: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyCheckValue" ],
                members: {
                    KeyArn: {},
                    KeyCheckValue: {}
                }
            }
        },
        VerifyPinData: {
            http: {
                requestUri: "/pindata/verify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EncryptedPinBlock", "EncryptionKeyIdentifier", "PinBlockFormat", "PrimaryAccountNumber", "VerificationAttributes", "VerificationKeyIdentifier" ],
                members: {
                    DukptAttributes: {
                        type: "structure",
                        required: [ "DukptDerivationType", "KeySerialNumber" ],
                        members: {
                            DukptDerivationType: {},
                            KeySerialNumber: {}
                        }
                    },
                    EncryptedPinBlock: {},
                    EncryptionKeyIdentifier: {},
                    PinBlockFormat: {},
                    PinDataLength: {
                        type: "integer"
                    },
                    PrimaryAccountNumber: {
                        shape: "S10"
                    },
                    VerificationAttributes: {
                        type: "structure",
                        members: {
                            Ibm3624Pin: {
                                type: "structure",
                                required: [ "DecimalizationTable", "PinOffset", "PinValidationData", "PinValidationDataPadCharacter" ],
                                members: {
                                    DecimalizationTable: {},
                                    PinOffset: {},
                                    PinValidationData: {},
                                    PinValidationDataPadCharacter: {}
                                }
                            },
                            VisaPin: {
                                type: "structure",
                                required: [ "PinVerificationKeyIndex", "VerificationValue" ],
                                members: {
                                    PinVerificationKeyIndex: {
                                        type: "integer"
                                    },
                                    VerificationValue: {}
                                }
                            }
                        },
                        union: true
                    },
                    VerificationKeyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EncryptionKeyArn", "EncryptionKeyCheckValue", "VerificationKeyArn", "VerificationKeyCheckValue" ],
                members: {
                    EncryptionKeyArn: {},
                    EncryptionKeyCheckValue: {},
                    VerificationKeyArn: {},
                    VerificationKeyCheckValue: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S3: {
            type: "structure",
            members: {
                Asymmetric: {
                    type: "structure",
                    members: {
                        PaddingType: {}
                    }
                },
                Dukpt: {
                    shape: "S6"
                },
                Symmetric: {
                    shape: "Sc"
                }
            },
            union: true
        },
        S6: {
            type: "structure",
            required: [ "KeySerialNumber" ],
            members: {
                DukptKeyDerivationType: {},
                DukptKeyVariant: {},
                InitializationVector: {
                    shape: "S9"
                },
                KeySerialNumber: {},
                Mode: {}
            }
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "structure",
            required: [ "Mode" ],
            members: {
                InitializationVector: {
                    shape: "S9"
                },
                Mode: {},
                PaddingType: {}
            }
        },
        Sn: {
            type: "structure",
            required: [ "CardExpiryDate" ],
            members: {
                CardExpiryDate: {}
            }
        },
        Sp: {
            type: "structure",
            required: [ "CardExpiryDate", "ServiceCode" ],
            members: {
                CardExpiryDate: {},
                ServiceCode: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "ApplicationTransactionCounter", "PanSequenceNumber", "UnpredictableNumber" ],
            members: {
                ApplicationTransactionCounter: {},
                PanSequenceNumber: {},
                UnpredictableNumber: {}
            }
        },
        Sv: {
            type: "structure",
            required: [ "CardExpiryDate", "ServiceCode" ],
            members: {
                CardExpiryDate: {},
                ServiceCode: {}
            }
        },
        Sw: {
            type: "structure",
            required: [ "CardExpiryDate" ],
            members: {
                CardExpiryDate: {}
            }
        },
        Sx: {
            type: "structure",
            required: [ "ApplicationTransactionCounter", "PanSequenceNumber", "TrackData", "UnpredictableNumber" ],
            members: {
                ApplicationTransactionCounter: {},
                PanSequenceNumber: {},
                TrackData: {},
                UnpredictableNumber: {}
            }
        },
        Sz: {
            type: "structure",
            required: [ "ApplicationTransactionCounter", "CardExpiryDate", "PanSequenceNumber", "ServiceCode" ],
            members: {
                ApplicationTransactionCounter: {},
                CardExpiryDate: {},
                PanSequenceNumber: {},
                ServiceCode: {}
            }
        },
        S10: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "structure",
            members: {
                Algorithm: {},
                DukptCmac: {
                    shape: "S17"
                },
                DukptIso9797Algorithm1: {
                    shape: "S17"
                },
                DukptIso9797Algorithm3: {
                    shape: "S17"
                },
                EmvMac: {
                    type: "structure",
                    required: [ "MajorKeyDerivationMode", "PanSequenceNumber", "PrimaryAccountNumber", "SessionKeyDerivationMode", "SessionKeyDerivationValue" ],
                    members: {
                        MajorKeyDerivationMode: {},
                        PanSequenceNumber: {},
                        PrimaryAccountNumber: {
                            shape: "S10"
                        },
                        SessionKeyDerivationMode: {},
                        SessionKeyDerivationValue: {
                            type: "structure",
                            members: {
                                ApplicationCryptogram: {},
                                ApplicationTransactionCounter: {}
                            },
                            union: true
                        }
                    }
                }
            },
            union: true
        },
        S17: {
            type: "structure",
            required: [ "DukptKeyVariant", "KeySerialNumber" ],
            members: {
                DukptDerivationType: {},
                DukptKeyVariant: {},
                KeySerialNumber: {}
            }
        },
        S1e: {
            type: "string",
            sensitive: true
        },
        S20: {
            type: "structure",
            members: {
                Dukpt: {
                    shape: "S6"
                },
                Symmetric: {
                    shape: "Sc"
                }
            },
            union: true
        },
        S24: {
            type: "structure",
            required: [ "KeySerialNumber" ],
            members: {
                DukptKeyDerivationType: {},
                DukptKeyVariant: {},
                KeySerialNumber: {}
            }
        },
        S25: {
            type: "structure",
            members: {
                IsoFormat0: {
                    shape: "S26"
                },
                IsoFormat1: {
                    type: "structure",
                    members: {}
                },
                IsoFormat3: {
                    shape: "S26"
                },
                IsoFormat4: {
                    shape: "S26"
                }
            },
            union: true
        },
        S26: {
            type: "structure",
            required: [ "PrimaryAccountNumber" ],
            members: {
                PrimaryAccountNumber: {
                    shape: "S10"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["codegurusecurity"] = {};

AWS.CodeGuruSecurity = AWS.Service.defineService("codegurusecurity", [ "2018-05-10" ]);

AWS.apiLoader.services["codegurusecurity"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "codeguru-security",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CodeGuru Security",
        serviceId: "CodeGuru Security",
        signatureVersion: "v4",
        signingName: "codeguru-security",
        uid: "codeguru-security-2018-05-10"
    },
    operations: {
        BatchGetFindings: {
            http: {
                requestUri: "/batchGetFindings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "findingIdentifiers" ],
                members: {
                    findingIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "findingId", "scanName" ],
                            members: {
                                findingId: {},
                                scanName: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "failedFindings", "findings" ],
                members: {
                    failedFindings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "findingId", "message", "scanName" ],
                            members: {
                                errorCode: {},
                                findingId: {},
                                message: {},
                                scanName: {}
                            }
                        }
                    },
                    findings: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateScan: {
            http: {
                requestUri: "/scans",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceId", "scanName" ],
                members: {
                    analysisType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    resourceId: {
                        shape: "Sv"
                    },
                    scanName: {},
                    scanType: {},
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceId", "runId", "scanName", "scanState" ],
                members: {
                    resourceId: {
                        shape: "Sv"
                    },
                    runId: {},
                    scanName: {},
                    scanNameArn: {},
                    scanState: {}
                }
            }
        },
        CreateUploadUrl: {
            http: {
                requestUri: "/uploadUrl",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "scanName" ],
                members: {
                    scanName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "codeArtifactId", "requestHeaders", "s3Url" ],
                members: {
                    codeArtifactId: {},
                    requestHeaders: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    s3Url: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetAccountConfiguration: {
            http: {
                method: "GET",
                requestUri: "/accountConfiguration/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "encryptionConfig" ],
                members: {
                    encryptionConfig: {
                        shape: "S1c"
                    }
                }
            }
        },
        GetFindings: {
            http: {
                method: "GET",
                requestUri: "/findings/{scanName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "scanName" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    scanName: {
                        location: "uri",
                        locationName: "scanName"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findings: {
                        shape: "Sa"
                    },
                    nextToken: {}
                }
            }
        },
        GetMetricsSummary: {
            http: {
                method: "GET",
                requestUri: "/metrics/summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "date" ],
                members: {
                    date: {
                        location: "querystring",
                        locationName: "date",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricsSummary: {
                        type: "structure",
                        members: {
                            categoriesWithMostFindings: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        categoryName: {},
                                        findingNumber: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            date: {
                                type: "timestamp"
                            },
                            openFindings: {
                                shape: "S1n"
                            },
                            scansWithMostOpenCriticalFindings: {
                                type: "list",
                                member: {
                                    shape: "S1q"
                                }
                            },
                            scansWithMostOpenFindings: {
                                type: "list",
                                member: {
                                    shape: "S1q"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetScan: {
            http: {
                method: "GET",
                requestUri: "/scans/{scanName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "scanName" ],
                members: {
                    runId: {
                        location: "querystring",
                        locationName: "runId"
                    },
                    scanName: {
                        location: "uri",
                        locationName: "scanName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analysisType", "createdAt", "runId", "scanName", "scanState" ],
                members: {
                    analysisType: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    numberOfRevisions: {
                        type: "long"
                    },
                    runId: {},
                    scanName: {},
                    scanNameArn: {},
                    scanState: {},
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListFindingsMetrics: {
            http: {
                method: "GET",
                requestUri: "/metrics/findings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endDate", "startDate" ],
                members: {
                    endDate: {
                        location: "querystring",
                        locationName: "endDate",
                        type: "timestamp"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    startDate: {
                        location: "querystring",
                        locationName: "startDate",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findingsMetrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                closedFindings: {
                                    shape: "S1n"
                                },
                                date: {
                                    type: "timestamp"
                                },
                                meanTimeToClose: {
                                    shape: "S1n"
                                },
                                newFindings: {
                                    shape: "S1n"
                                },
                                openFindings: {
                                    shape: "S1n"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListScans: {
            http: {
                method: "GET",
                requestUri: "/scans",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "runId", "scanName", "scanState" ],
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                runId: {},
                                scanName: {},
                                scanNameArn: {},
                                scanState: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAccountConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/updateAccountConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "encryptionConfig" ],
                members: {
                    encryptionConfig: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "encryptionConfig" ],
                members: {
                    encryptionConfig: {
                        shape: "S1c"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    detectorId: {},
                    detectorName: {},
                    detectorTags: {
                        type: "list",
                        member: {}
                    },
                    generatorId: {},
                    id: {},
                    remediation: {
                        type: "structure",
                        members: {
                            recommendation: {
                                type: "structure",
                                members: {
                                    text: {},
                                    url: {}
                                }
                            },
                            suggestedFixes: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        code: {},
                                        description: {}
                                    }
                                }
                            }
                        }
                    },
                    resource: {
                        type: "structure",
                        members: {
                            id: {},
                            subResourceId: {}
                        }
                    },
                    ruleId: {},
                    severity: {},
                    status: {},
                    title: {},
                    type: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    vulnerability: {
                        type: "structure",
                        members: {
                            filePath: {
                                type: "structure",
                                members: {
                                    codeSnippet: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                content: {},
                                                number: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    },
                                    endLine: {
                                        type: "integer"
                                    },
                                    name: {},
                                    path: {},
                                    startLine: {
                                        type: "integer"
                                    }
                                }
                            },
                            id: {},
                            itemCount: {
                                type: "integer"
                            },
                            referenceUrls: {
                                type: "list",
                                member: {}
                            },
                            relatedVulnerabilities: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                codeArtifactId: {}
            },
            union: true
        },
        Sy: {
            type: "map",
            key: {},
            value: {}
        },
        S1c: {
            type: "structure",
            members: {
                kmsKeyArn: {}
            }
        },
        S1n: {
            type: "structure",
            members: {
                critical: {
                    type: "double"
                },
                high: {
                    type: "double"
                },
                info: {
                    type: "double"
                },
                low: {
                    type: "double"
                },
                medium: {
                    type: "double"
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                findingNumber: {
                    type: "integer"
                },
                scanName: {}
            }
        }
    },
    paginators: {
        GetFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListFindingsMetrics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingsMetrics"
        },
        ListScans: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "summaries"
        }
    }
};

AWS.apiLoader.services["verifiedpermissions"] = {};

AWS.VerifiedPermissions = AWS.Service.defineService("verifiedpermissions", [ "2021-12-01" ]);

AWS.apiLoader.services["verifiedpermissions"]["2021-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-12-01",
        endpointPrefix: "verifiedpermissions",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Verified Permissions",
        serviceId: "VerifiedPermissions",
        signatureVersion: "v4",
        signingName: "verifiedpermissions",
        targetPrefix: "VerifiedPermissions",
        uid: "verifiedpermissions-2021-12-01"
    },
    operations: {
        BatchIsAuthorized: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "requests" ],
                members: {
                    policyStoreId: {},
                    entities: {
                        shape: "S3"
                    },
                    requests: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "request", "decision", "determiningPolicies", "errors" ],
                            members: {
                                request: {
                                    shape: "Sj"
                                },
                                decision: {},
                                determiningPolicies: {
                                    shape: "St"
                                },
                                errors: {
                                    shape: "Sw"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateIdentitySource: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "configuration" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    policyStoreId: {},
                    configuration: {
                        type: "structure",
                        members: {
                            cognitoUserPoolConfiguration: {
                                type: "structure",
                                required: [ "userPoolArn" ],
                                members: {
                                    userPoolArn: {},
                                    clientIds: {
                                        shape: "S13"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    principalEntityType: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdDate", "identitySourceId", "lastUpdatedDate", "policyStoreId" ],
                members: {
                    createdDate: {
                        shape: "S17"
                    },
                    identitySourceId: {},
                    lastUpdatedDate: {
                        shape: "S17"
                    },
                    policyStoreId: {}
                }
            },
            idempotent: true
        },
        CreatePolicy: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "definition" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    policyStoreId: {},
                    definition: {
                        type: "structure",
                        members: {
                            static: {
                                type: "structure",
                                required: [ "statement" ],
                                members: {
                                    description: {
                                        shape: "S1c"
                                    },
                                    statement: {
                                        shape: "S1d"
                                    }
                                }
                            },
                            templateLinked: {
                                type: "structure",
                                required: [ "policyTemplateId" ],
                                members: {
                                    policyTemplateId: {},
                                    principal: {
                                        shape: "S6"
                                    },
                                    resource: {
                                        shape: "S6"
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "policyId", "policyType", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    policyId: {},
                    policyType: {},
                    principal: {
                        shape: "S6"
                    },
                    resource: {
                        shape: "S6"
                    },
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        },
        CreatePolicyStore: {
            input: {
                type: "structure",
                required: [ "validationSettings" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    validationSettings: {
                        shape: "S1j"
                    },
                    description: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "arn", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    arn: {},
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        },
        CreatePolicyTemplate: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "statement" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    policyStoreId: {},
                    description: {
                        shape: "S1p"
                    },
                    statement: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "policyTemplateId", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    policyTemplateId: {},
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        },
        DeleteIdentitySource: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "identitySourceId" ],
                members: {
                    policyStoreId: {},
                    identitySourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "policyId" ],
                members: {
                    policyStoreId: {},
                    policyId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePolicyStore: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePolicyTemplate: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "policyTemplateId" ],
                members: {
                    policyStoreId: {},
                    policyTemplateId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetIdentitySource: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "identitySourceId" ],
                members: {
                    policyStoreId: {},
                    identitySourceId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "createdDate", "details", "identitySourceId", "lastUpdatedDate", "policyStoreId", "principalEntityType" ],
                members: {
                    createdDate: {
                        shape: "S17"
                    },
                    details: {
                        type: "structure",
                        members: {
                            clientIds: {
                                shape: "S13"
                            },
                            userPoolArn: {},
                            discoveryUrl: {},
                            openIdIssuer: {}
                        }
                    },
                    identitySourceId: {},
                    lastUpdatedDate: {
                        shape: "S17"
                    },
                    policyStoreId: {},
                    principalEntityType: {
                        shape: "S15"
                    }
                }
            }
        },
        GetPolicy: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "policyId" ],
                members: {
                    policyStoreId: {},
                    policyId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "policyId", "policyType", "definition", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    policyId: {},
                    policyType: {},
                    principal: {
                        shape: "S6"
                    },
                    resource: {
                        shape: "S6"
                    },
                    definition: {
                        type: "structure",
                        members: {
                            static: {
                                type: "structure",
                                required: [ "statement" ],
                                members: {
                                    description: {
                                        shape: "S1c"
                                    },
                                    statement: {
                                        shape: "S1d"
                                    }
                                }
                            },
                            templateLinked: {
                                type: "structure",
                                required: [ "policyTemplateId" ],
                                members: {
                                    policyTemplateId: {},
                                    principal: {
                                        shape: "S6"
                                    },
                                    resource: {
                                        shape: "S6"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            }
        },
        GetPolicyStore: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "arn", "validationSettings", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    arn: {},
                    validationSettings: {
                        shape: "S1j"
                    },
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    },
                    description: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetPolicyTemplate: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "policyTemplateId" ],
                members: {
                    policyStoreId: {},
                    policyTemplateId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "policyTemplateId", "statement", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    policyTemplateId: {},
                    description: {
                        shape: "S1p"
                    },
                    statement: {
                        shape: "S1d"
                    },
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            }
        },
        GetSchema: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "schema", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    schema: {
                        shape: "S2f"
                    },
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    },
                    namespaces: {
                        shape: "S2g"
                    }
                }
            }
        },
        IsAuthorized: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {},
                    principal: {
                        shape: "S6"
                    },
                    action: {
                        shape: "Sk"
                    },
                    resource: {
                        shape: "S6"
                    },
                    context: {
                        shape: "Sn"
                    },
                    entities: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "decision", "determiningPolicies", "errors" ],
                members: {
                    decision: {},
                    determiningPolicies: {
                        shape: "St"
                    },
                    errors: {
                        shape: "Sw"
                    }
                }
            }
        },
        IsAuthorizedWithToken: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {},
                    identityToken: {
                        shape: "S2l"
                    },
                    accessToken: {
                        shape: "S2l"
                    },
                    action: {
                        shape: "Sk"
                    },
                    resource: {
                        shape: "S6"
                    },
                    context: {
                        shape: "Sn"
                    },
                    entities: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "decision", "determiningPolicies", "errors" ],
                members: {
                    decision: {},
                    determiningPolicies: {
                        shape: "St"
                    },
                    errors: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListIdentitySources: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                principalEntityType: {
                                    shape: "S15"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "identitySources" ],
                members: {
                    nextToken: {},
                    identitySources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdDate", "details", "identitySourceId", "lastUpdatedDate", "policyStoreId", "principalEntityType" ],
                            members: {
                                createdDate: {
                                    shape: "S17"
                                },
                                details: {
                                    type: "structure",
                                    members: {
                                        clientIds: {
                                            shape: "S13"
                                        },
                                        userPoolArn: {},
                                        discoveryUrl: {},
                                        openIdIssuer: {}
                                    }
                                },
                                identitySourceId: {},
                                lastUpdatedDate: {
                                    shape: "S17"
                                },
                                policyStoreId: {},
                                principalEntityType: {
                                    shape: "S15"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPolicies: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            principal: {
                                shape: "S2z"
                            },
                            resource: {
                                shape: "S2z"
                            },
                            policyType: {},
                            policyTemplateId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policies" ],
                members: {
                    nextToken: {},
                    policies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "policyStoreId", "policyId", "policyType", "definition", "createdDate", "lastUpdatedDate" ],
                            members: {
                                policyStoreId: {},
                                policyId: {},
                                policyType: {},
                                principal: {
                                    shape: "S6"
                                },
                                resource: {
                                    shape: "S6"
                                },
                                definition: {
                                    type: "structure",
                                    members: {
                                        static: {
                                            type: "structure",
                                            members: {
                                                description: {
                                                    shape: "S1c"
                                                }
                                            }
                                        },
                                        templateLinked: {
                                            type: "structure",
                                            required: [ "policyTemplateId" ],
                                            members: {
                                                policyTemplateId: {},
                                                principal: {
                                                    shape: "S6"
                                                },
                                                resource: {
                                                    shape: "S6"
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                },
                                createdDate: {
                                    shape: "S17"
                                },
                                lastUpdatedDate: {
                                    shape: "S17"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPolicyStores: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStores" ],
                members: {
                    nextToken: {},
                    policyStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "policyStoreId", "arn", "createdDate" ],
                            members: {
                                policyStoreId: {},
                                arn: {},
                                createdDate: {
                                    shape: "S17"
                                },
                                lastUpdatedDate: {
                                    shape: "S17"
                                },
                                description: {
                                    shape: "S1l"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPolicyTemplates: {
            input: {
                type: "structure",
                required: [ "policyStoreId" ],
                members: {
                    policyStoreId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyTemplates" ],
                members: {
                    nextToken: {},
                    policyTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "policyStoreId", "policyTemplateId", "createdDate", "lastUpdatedDate" ],
                            members: {
                                policyStoreId: {},
                                policyTemplateId: {},
                                description: {
                                    shape: "S1p"
                                },
                                createdDate: {
                                    shape: "S17"
                                },
                                lastUpdatedDate: {
                                    shape: "S17"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutSchema: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "definition" ],
                members: {
                    policyStoreId: {},
                    definition: {
                        type: "structure",
                        members: {
                            cedarJson: {
                                shape: "S2f"
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "namespaces", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    namespaces: {
                        shape: "S2g"
                    },
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        },
        UpdateIdentitySource: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "identitySourceId", "updateConfiguration" ],
                members: {
                    policyStoreId: {},
                    identitySourceId: {},
                    updateConfiguration: {
                        type: "structure",
                        members: {
                            cognitoUserPoolConfiguration: {
                                type: "structure",
                                required: [ "userPoolArn" ],
                                members: {
                                    userPoolArn: {},
                                    clientIds: {
                                        shape: "S13"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    principalEntityType: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdDate", "identitySourceId", "lastUpdatedDate", "policyStoreId" ],
                members: {
                    createdDate: {
                        shape: "S17"
                    },
                    identitySourceId: {},
                    lastUpdatedDate: {
                        shape: "S17"
                    },
                    policyStoreId: {}
                }
            },
            idempotent: true
        },
        UpdatePolicy: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "policyId", "definition" ],
                members: {
                    policyStoreId: {},
                    policyId: {},
                    definition: {
                        type: "structure",
                        members: {
                            static: {
                                type: "structure",
                                required: [ "statement" ],
                                members: {
                                    description: {
                                        shape: "S1c"
                                    },
                                    statement: {
                                        shape: "S1d"
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "policyId", "policyType", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    policyId: {},
                    policyType: {},
                    principal: {
                        shape: "S6"
                    },
                    resource: {
                        shape: "S6"
                    },
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        },
        UpdatePolicyStore: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "validationSettings" ],
                members: {
                    policyStoreId: {},
                    validationSettings: {
                        shape: "S1j"
                    },
                    description: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "arn", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    arn: {},
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        },
        UpdatePolicyTemplate: {
            input: {
                type: "structure",
                required: [ "policyStoreId", "policyTemplateId", "statement" ],
                members: {
                    policyStoreId: {},
                    policyTemplateId: {},
                    description: {
                        shape: "S1p"
                    },
                    statement: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyStoreId", "policyTemplateId", "createdDate", "lastUpdatedDate" ],
                members: {
                    policyStoreId: {},
                    policyTemplateId: {},
                    createdDate: {
                        shape: "S17"
                    },
                    lastUpdatedDate: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                entityList: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "identifier" ],
                        members: {
                            identifier: {
                                shape: "S6"
                            },
                            attributes: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Sb"
                                }
                            },
                            parents: {
                                type: "list",
                                member: {
                                    shape: "S6"
                                }
                            }
                        }
                    }
                }
            },
            union: true
        },
        S6: {
            type: "structure",
            required: [ "entityType", "entityId" ],
            members: {
                entityType: {
                    type: "string",
                    sensitive: true
                },
                entityId: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                boolean: {
                    type: "boolean",
                    sensitive: true
                },
                entityIdentifier: {
                    shape: "S6"
                },
                long: {
                    type: "long",
                    sensitive: true
                },
                string: {
                    type: "string",
                    sensitive: true
                },
                set: {
                    type: "list",
                    member: {
                        shape: "Sb"
                    }
                },
                record: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "Sb"
                    }
                }
            },
            union: true
        },
        Sj: {
            type: "structure",
            members: {
                principal: {
                    shape: "S6"
                },
                action: {
                    shape: "Sk"
                },
                resource: {
                    shape: "S6"
                },
                context: {
                    shape: "Sn"
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "actionType", "actionId" ],
            members: {
                actionType: {
                    type: "string",
                    sensitive: true
                },
                actionId: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                contextMap: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "Sb"
                    }
                }
            },
            union: true
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "policyId" ],
                members: {
                    policyId: {}
                }
            }
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "errorDescription" ],
                members: {
                    errorDescription: {}
                },
                sensitive: true
            }
        },
        S13: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        S15: {
            type: "string",
            sensitive: true
        },
        S17: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1c: {
            type: "string",
            sensitive: true
        },
        S1d: {
            type: "string",
            sensitive: true
        },
        S1j: {
            type: "structure",
            required: [ "mode" ],
            members: {
                mode: {}
            }
        },
        S1l: {
            type: "string",
            sensitive: true
        },
        S1p: {
            type: "string",
            sensitive: true
        },
        S2f: {
            type: "string",
            sensitive: true
        },
        S2g: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        S2l: {
            type: "string",
            sensitive: true
        },
        S2z: {
            type: "structure",
            members: {
                unspecified: {
                    type: "boolean"
                },
                identifier: {
                    shape: "S6"
                }
            },
            union: true
        }
    },
    paginators: {
        ListIdentitySources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "identitySources"
        },
        ListPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "policies"
        },
        ListPolicyStores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "policyStores"
        },
        ListPolicyTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "policyTemplates"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["appfabric"] = {};

AWS.AppFabric = AWS.Service.defineService("appfabric", [ "2023-05-19" ]);

AWS.apiLoader.services["appfabric"]["2023-05-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-05-19",
        endpointPrefix: "appfabric",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AppFabric",
        serviceId: "AppFabric",
        signatureVersion: "v4",
        signingName: "appfabric",
        uid: "appfabric-2023-05-19"
    },
    operations: {
        BatchGetUserAccessTasks: {
            http: {
                requestUri: "/useraccess/batchget",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "taskIdList" ],
                members: {
                    appBundleIdentifier: {},
                    taskIdList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userAccessResultsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                app: {},
                                tenantId: {},
                                tenantDisplayName: {},
                                taskId: {},
                                resultStatus: {},
                                email: {
                                    shape: "Sc"
                                },
                                userId: {
                                    shape: "Sd"
                                },
                                userFullName: {
                                    shape: "Sd"
                                },
                                userFirstName: {
                                    shape: "Sd"
                                },
                                userLastName: {
                                    shape: "Sd"
                                },
                                userStatus: {},
                                taskError: {
                                    shape: "Sf"
                                }
                            }
                        }
                    }
                }
            }
        },
        ConnectAppAuthorization: {
            http: {
                requestUri: "/appbundles/{appBundleIdentifier}/appauthorizations/{appAuthorizationIdentifier}/connect",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "appAuthorizationIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    appAuthorizationIdentifier: {
                        location: "uri",
                        locationName: "appAuthorizationIdentifier"
                    },
                    authRequest: {
                        type: "structure",
                        required: [ "redirectUri", "code" ],
                        members: {
                            redirectUri: {},
                            code: {
                                shape: "Sd"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appAuthorizationSummary" ],
                members: {
                    appAuthorizationSummary: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateAppAuthorization: {
            http: {
                requestUri: "/appbundles/{appBundleIdentifier}/appauthorizations",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "app", "credential", "tenant", "authType" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    app: {},
                    credential: {
                        shape: "Sq"
                    },
                    tenant: {
                        shape: "Sm"
                    },
                    authType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appAuthorization" ],
                members: {
                    appAuthorization: {
                        shape: "Sz"
                    }
                }
            },
            idempotent: true
        },
        CreateAppBundle: {
            http: {
                requestUri: "/appbundles",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    customerManagedKeyIdentifier: {},
                    tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appBundle" ],
                members: {
                    appBundle: {
                        shape: "S13"
                    }
                }
            },
            idempotent: true
        },
        CreateIngestion: {
            http: {
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "app", "tenantId", "ingestionType" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    app: {},
                    tenantId: {},
                    ingestionType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestion" ],
                members: {
                    ingestion: {
                        shape: "S17"
                    }
                }
            },
            idempotent: true
        },
        CreateIngestionDestination: {
            http: {
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}/ingestiondestinations",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "ingestionIdentifier", "processingConfiguration", "destinationConfiguration" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    },
                    processingConfiguration: {
                        shape: "S1a"
                    },
                    destinationConfiguration: {
                        shape: "S1e"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestionDestination" ],
                members: {
                    ingestionDestination: {
                        shape: "S1n"
                    }
                }
            },
            idempotent: true
        },
        DeleteAppAuthorization: {
            http: {
                method: "DELETE",
                requestUri: "/appbundles/{appBundleIdentifier}/appauthorizations/{appAuthorizationIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "appAuthorizationIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    appAuthorizationIdentifier: {
                        location: "uri",
                        locationName: "appAuthorizationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAppBundle: {
            http: {
                method: "DELETE",
                requestUri: "/appbundles/{appBundleIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteIngestion: {
            http: {
                method: "DELETE",
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "ingestionIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteIngestionDestination: {
            http: {
                method: "DELETE",
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}/ingestiondestinations/{ingestionDestinationIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "ingestionIdentifier", "ingestionDestinationIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    },
                    ingestionDestinationIdentifier: {
                        location: "uri",
                        locationName: "ingestionDestinationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAppAuthorization: {
            http: {
                method: "GET",
                requestUri: "/appbundles/{appBundleIdentifier}/appauthorizations/{appAuthorizationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "appAuthorizationIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    appAuthorizationIdentifier: {
                        location: "uri",
                        locationName: "appAuthorizationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appAuthorization" ],
                members: {
                    appAuthorization: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetAppBundle: {
            http: {
                method: "GET",
                requestUri: "/appbundles/{appBundleIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appBundle" ],
                members: {
                    appBundle: {
                        shape: "S13"
                    }
                }
            }
        },
        GetIngestion: {
            http: {
                method: "GET",
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "ingestionIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestion" ],
                members: {
                    ingestion: {
                        shape: "S17"
                    }
                }
            }
        },
        GetIngestionDestination: {
            http: {
                method: "GET",
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}/ingestiondestinations/{ingestionDestinationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "ingestionIdentifier", "ingestionDestinationIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    },
                    ingestionDestinationIdentifier: {
                        location: "uri",
                        locationName: "ingestionDestinationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestionDestination" ],
                members: {
                    ingestionDestination: {
                        shape: "S1n"
                    }
                }
            }
        },
        ListAppAuthorizations: {
            http: {
                method: "GET",
                requestUri: "/appbundles/{appBundleIdentifier}/appauthorizations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appAuthorizationSummaryList" ],
                members: {
                    appAuthorizationSummaryList: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppBundles: {
            http: {
                method: "GET",
                requestUri: "/appbundles",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appBundleSummaryList" ],
                members: {
                    appBundleSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn" ],
                            members: {
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIngestionDestinations: {
            http: {
                method: "GET",
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}/ingestiondestinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "ingestionIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestionDestinations" ],
                members: {
                    ingestionDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn" ],
                            members: {
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIngestions: {
            http: {
                method: "GET",
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestions" ],
                members: {
                    ingestions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "app", "tenantId", "state" ],
                            members: {
                                arn: {},
                                app: {},
                                tenantId: {},
                                state: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Su"
                    }
                }
            }
        },
        StartIngestion: {
            http: {
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ingestionIdentifier", "appBundleIdentifier" ],
                members: {
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    },
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartUserAccessTasks: {
            http: {
                requestUri: "/useraccess/start",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "email" ],
                members: {
                    appBundleIdentifier: {},
                    email: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userAccessTasksList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "app", "tenantId" ],
                            members: {
                                app: {},
                                tenantId: {},
                                taskId: {},
                                error: {
                                    shape: "Sf"
                                }
                            }
                        }
                    }
                }
            }
        },
        StopIngestion: {
            http: {
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ingestionIdentifier", "appBundleIdentifier" ],
                members: {
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    },
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAppAuthorization: {
            http: {
                method: "PATCH",
                requestUri: "/appbundles/{appBundleIdentifier}/appauthorizations/{appAuthorizationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "appAuthorizationIdentifier" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    appAuthorizationIdentifier: {
                        location: "uri",
                        locationName: "appAuthorizationIdentifier"
                    },
                    credential: {
                        shape: "Sq"
                    },
                    tenant: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appAuthorization" ],
                members: {
                    appAuthorization: {
                        shape: "Sz"
                    }
                }
            }
        },
        UpdateIngestionDestination: {
            http: {
                method: "PATCH",
                requestUri: "/appbundles/{appBundleIdentifier}/ingestions/{ingestionIdentifier}/ingestiondestinations/{ingestionDestinationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appBundleIdentifier", "ingestionIdentifier", "ingestionDestinationIdentifier", "destinationConfiguration" ],
                members: {
                    appBundleIdentifier: {
                        location: "uri",
                        locationName: "appBundleIdentifier"
                    },
                    ingestionIdentifier: {
                        location: "uri",
                        locationName: "ingestionIdentifier"
                    },
                    ingestionDestinationIdentifier: {
                        location: "uri",
                        locationName: "ingestionDestinationIdentifier"
                    },
                    destinationConfiguration: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestionDestination" ],
                members: {
                    ingestionDestination: {
                        shape: "S1n"
                    }
                }
            }
        }
    },
    shapes: {
        Sc: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "string",
            sensitive: true
        },
        Sf: {
            type: "structure",
            members: {
                errorCode: {},
                errorMessage: {}
            }
        },
        Sk: {
            type: "structure",
            required: [ "appAuthorizationArn", "appBundleArn", "app", "tenant", "status", "updatedAt" ],
            members: {
                appAuthorizationArn: {},
                appBundleArn: {},
                app: {},
                tenant: {
                    shape: "Sm"
                },
                status: {},
                updatedAt: {
                    shape: "So"
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "tenantIdentifier", "tenantDisplayName" ],
            members: {
                tenantIdentifier: {},
                tenantDisplayName: {}
            }
        },
        So: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sq: {
            type: "structure",
            members: {
                oauth2Credential: {
                    type: "structure",
                    required: [ "clientId", "clientSecret" ],
                    members: {
                        clientId: {},
                        clientSecret: {
                            shape: "Sd"
                        }
                    }
                },
                apiKeyCredential: {
                    type: "structure",
                    required: [ "apiKey" ],
                    members: {
                        apiKey: {
                            shape: "Sd"
                        }
                    }
                }
            },
            union: true
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sz: {
            type: "structure",
            required: [ "appAuthorizationArn", "appBundleArn", "app", "tenant", "authType", "status", "createdAt", "updatedAt" ],
            members: {
                appAuthorizationArn: {},
                appBundleArn: {},
                app: {},
                tenant: {
                    shape: "Sm"
                },
                authType: {},
                status: {},
                createdAt: {
                    shape: "So"
                },
                updatedAt: {
                    shape: "So"
                },
                persona: {},
                authUrl: {}
            }
        },
        S13: {
            type: "structure",
            required: [ "arn" ],
            members: {
                arn: {},
                customerManagedKeyArn: {}
            }
        },
        S17: {
            type: "structure",
            required: [ "arn", "appBundleArn", "app", "tenantId", "createdAt", "updatedAt", "state", "ingestionType" ],
            members: {
                arn: {},
                appBundleArn: {},
                app: {},
                tenantId: {},
                createdAt: {
                    shape: "So"
                },
                updatedAt: {
                    shape: "So"
                },
                state: {},
                ingestionType: {}
            }
        },
        S1a: {
            type: "structure",
            members: {
                auditLog: {
                    type: "structure",
                    required: [ "schema", "format" ],
                    members: {
                        schema: {},
                        format: {}
                    }
                }
            },
            union: true
        },
        S1e: {
            type: "structure",
            members: {
                auditLog: {
                    type: "structure",
                    required: [ "destination" ],
                    members: {
                        destination: {
                            type: "structure",
                            members: {
                                s3Bucket: {
                                    type: "structure",
                                    required: [ "bucketName" ],
                                    members: {
                                        bucketName: {},
                                        prefix: {}
                                    }
                                },
                                firehoseStream: {
                                    type: "structure",
                                    required: [ "streamName" ],
                                    members: {
                                        streamName: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            },
            union: true
        },
        S1n: {
            type: "structure",
            required: [ "arn", "ingestionArn", "processingConfiguration", "destinationConfiguration" ],
            members: {
                arn: {},
                ingestionArn: {},
                processingConfiguration: {
                    shape: "S1a"
                },
                destinationConfiguration: {
                    shape: "S1e"
                },
                status: {},
                statusReason: {},
                createdAt: {
                    shape: "So"
                },
                updatedAt: {
                    shape: "So"
                }
            }
        }
    },
    paginators: {
        ListAppAuthorizations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "appAuthorizationSummaryList"
        },
        ListAppBundles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "appBundleSummaryList"
        },
        ListIngestionDestinations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "ingestionDestinations"
        },
        ListIngestions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "ingestions"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["medicalimaging"] = {};

AWS.MedicalImaging = AWS.Service.defineService("medicalimaging", [ "2023-07-19" ]);

AWS.apiLoader.services["medicalimaging"]["2023-07-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-07-19",
        endpointPrefix: "medical-imaging",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Health Imaging",
        serviceId: "Medical Imaging",
        signatureVersion: "v4",
        signingName: "medical-imaging",
        uid: "medical-imaging-2023-07-19"
    },
    operations: {
        CopyImageSet: {
            http: {
                requestUri: "/datastore/{datastoreId}/imageSet/{sourceImageSetId}/copyImageSet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "sourceImageSetId", "copyImageSetInformation" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    sourceImageSetId: {
                        location: "uri",
                        locationName: "sourceImageSetId"
                    },
                    copyImageSetInformation: {
                        type: "structure",
                        required: [ "sourceImageSet" ],
                        members: {
                            sourceImageSet: {
                                type: "structure",
                                required: [ "latestVersionId" ],
                                members: {
                                    latestVersionId: {}
                                }
                            },
                            destinationImageSet: {
                                type: "structure",
                                required: [ "imageSetId", "latestVersionId" ],
                                members: {
                                    imageSetId: {},
                                    latestVersionId: {}
                                }
                            }
                        }
                    }
                },
                payload: "copyImageSetInformation"
            },
            output: {
                type: "structure",
                required: [ "datastoreId", "sourceImageSetProperties", "destinationImageSetProperties" ],
                members: {
                    datastoreId: {},
                    sourceImageSetProperties: {
                        type: "structure",
                        required: [ "imageSetId", "latestVersionId" ],
                        members: {
                            imageSetId: {},
                            latestVersionId: {},
                            imageSetState: {},
                            imageSetWorkflowStatus: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            },
                            imageSetArn: {}
                        }
                    },
                    destinationImageSetProperties: {
                        type: "structure",
                        required: [ "imageSetId", "latestVersionId" ],
                        members: {
                            imageSetId: {},
                            latestVersionId: {},
                            imageSetState: {},
                            imageSetWorkflowStatus: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            },
                            imageSetArn: {}
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "runtime-"
            }
        },
        CreateDatastore: {
            http: {
                requestUri: "/datastore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken" ],
                members: {
                    datastoreName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Si"
                    },
                    kmsKeyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "datastoreId", "datastoreStatus" ],
                members: {
                    datastoreId: {},
                    datastoreStatus: {}
                }
            },
            idempotent: true
        },
        DeleteDatastore: {
            http: {
                method: "DELETE",
                requestUri: "/datastore/{datastoreId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "datastoreId", "datastoreStatus" ],
                members: {
                    datastoreId: {},
                    datastoreStatus: {}
                }
            },
            idempotent: true
        },
        DeleteImageSet: {
            http: {
                requestUri: "/datastore/{datastoreId}/imageSet/{imageSetId}/deleteImageSet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "imageSetId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    imageSetId: {
                        location: "uri",
                        locationName: "imageSetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "datastoreId", "imageSetId", "imageSetState", "imageSetWorkflowStatus" ],
                members: {
                    datastoreId: {},
                    imageSetId: {},
                    imageSetState: {},
                    imageSetWorkflowStatus: {}
                }
            },
            endpoint: {
                hostPrefix: "runtime-"
            },
            idempotent: true
        },
        GetDICOMImportJob: {
            http: {
                method: "GET",
                requestUri: "/getDICOMImportJob/datastore/{datastoreId}/job/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "jobId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobProperties" ],
                members: {
                    jobProperties: {
                        type: "structure",
                        required: [ "jobId", "jobName", "jobStatus", "datastoreId", "dataAccessRoleArn", "inputS3Uri", "outputS3Uri" ],
                        members: {
                            jobId: {},
                            jobName: {},
                            jobStatus: {},
                            datastoreId: {},
                            dataAccessRoleArn: {},
                            endedAt: {
                                type: "timestamp"
                            },
                            submittedAt: {
                                type: "timestamp"
                            },
                            inputS3Uri: {},
                            outputS3Uri: {},
                            message: {}
                        }
                    }
                }
            }
        },
        GetDatastore: {
            http: {
                method: "GET",
                requestUri: "/datastore/{datastoreId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "datastoreProperties" ],
                members: {
                    datastoreProperties: {
                        type: "structure",
                        required: [ "datastoreId", "datastoreName", "datastoreStatus" ],
                        members: {
                            datastoreId: {},
                            datastoreName: {},
                            datastoreStatus: {},
                            kmsKeyArn: {},
                            datastoreArn: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetImageFrame: {
            http: {
                requestUri: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageFrame",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "imageSetId", "imageFrameInformation" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    imageSetId: {
                        location: "uri",
                        locationName: "imageSetId"
                    },
                    imageFrameInformation: {
                        type: "structure",
                        required: [ "imageFrameId" ],
                        members: {
                            imageFrameId: {}
                        }
                    }
                },
                payload: "imageFrameInformation"
            },
            output: {
                type: "structure",
                required: [ "imageFrameBlob" ],
                members: {
                    imageFrameBlob: {
                        type: "blob",
                        streaming: true
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "imageFrameBlob"
            },
            endpoint: {
                hostPrefix: "runtime-"
            }
        },
        GetImageSet: {
            http: {
                requestUri: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageSet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "imageSetId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    imageSetId: {
                        location: "uri",
                        locationName: "imageSetId"
                    },
                    versionId: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "datastoreId", "imageSetId", "versionId", "imageSetState" ],
                members: {
                    datastoreId: {},
                    imageSetId: {},
                    versionId: {},
                    imageSetState: {},
                    imageSetWorkflowStatus: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    deletedAt: {
                        type: "timestamp"
                    },
                    message: {},
                    imageSetArn: {}
                }
            },
            endpoint: {
                hostPrefix: "runtime-"
            }
        },
        GetImageSetMetadata: {
            http: {
                requestUri: "/datastore/{datastoreId}/imageSet/{imageSetId}/getImageSetMetadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "imageSetId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    imageSetId: {
                        location: "uri",
                        locationName: "imageSetId"
                    },
                    versionId: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "imageSetMetadataBlob" ],
                members: {
                    imageSetMetadataBlob: {
                        type: "blob",
                        streaming: true
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    contentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    }
                },
                payload: "imageSetMetadataBlob"
            },
            endpoint: {
                hostPrefix: "runtime-"
            }
        },
        ListDICOMImportJobs: {
            http: {
                method: "GET",
                requestUri: "/listDICOMImportJobs/datastore/{datastoreId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    jobStatus: {
                        location: "querystring",
                        locationName: "jobStatus"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummaries" ],
                members: {
                    jobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobId", "jobName", "jobStatus", "datastoreId" ],
                            members: {
                                jobId: {},
                                jobName: {},
                                jobStatus: {},
                                datastoreId: {},
                                dataAccessRoleArn: {},
                                endedAt: {
                                    type: "timestamp"
                                },
                                submittedAt: {
                                    type: "timestamp"
                                },
                                message: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDatastores: {
            http: {
                method: "GET",
                requestUri: "/datastore",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    datastoreStatus: {
                        location: "querystring",
                        locationName: "datastoreStatus"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datastoreSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "datastoreId", "datastoreName", "datastoreStatus" ],
                            members: {
                                datastoreId: {},
                                datastoreName: {},
                                datastoreStatus: {},
                                datastoreArn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImageSetVersions: {
            http: {
                requestUri: "/datastore/{datastoreId}/imageSet/{imageSetId}/listImageSetVersions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "imageSetId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    imageSetId: {
                        location: "uri",
                        locationName: "imageSetId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "imageSetPropertiesList" ],
                members: {
                    imageSetPropertiesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "imageSetId", "versionId", "imageSetState" ],
                            members: {
                                imageSetId: {},
                                versionId: {},
                                imageSetState: {},
                                ImageSetWorkflowStatus: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                deletedAt: {
                                    type: "timestamp"
                                },
                                message: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "runtime-"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        SearchImageSets: {
            http: {
                requestUri: "/datastore/{datastoreId}/searchImageSets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    searchCriteria: {
                        type: "structure",
                        members: {
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "values", "operator" ],
                                    members: {
                                        values: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    DICOMPatientId: {
                                                        shape: "S23"
                                                    },
                                                    DICOMAccessionNumber: {
                                                        shape: "S24"
                                                    },
                                                    DICOMStudyId: {
                                                        shape: "S25"
                                                    },
                                                    DICOMStudyInstanceUID: {
                                                        shape: "S26"
                                                    },
                                                    createdAt: {
                                                        type: "timestamp"
                                                    },
                                                    DICOMStudyDateAndTime: {
                                                        type: "structure",
                                                        required: [ "DICOMStudyDate" ],
                                                        members: {
                                                            DICOMStudyDate: {
                                                                shape: "S28"
                                                            },
                                                            DICOMStudyTime: {
                                                                shape: "S29"
                                                            }
                                                        }
                                                    }
                                                },
                                                union: true
                                            }
                                        },
                                        operator: {}
                                    }
                                }
                            }
                        },
                        sensitive: true
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                payload: "searchCriteria"
            },
            output: {
                type: "structure",
                required: [ "imageSetsMetadataSummaries" ],
                members: {
                    imageSetsMetadataSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "imageSetId" ],
                            members: {
                                imageSetId: {},
                                version: {
                                    type: "integer"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                DICOMTags: {
                                    type: "structure",
                                    members: {
                                        DICOMPatientId: {
                                            shape: "S23"
                                        },
                                        DICOMPatientName: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        DICOMPatientBirthDate: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        DICOMPatientSex: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        DICOMStudyInstanceUID: {
                                            shape: "S26"
                                        },
                                        DICOMStudyId: {
                                            shape: "S25"
                                        },
                                        DICOMStudyDescription: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        DICOMNumberOfStudyRelatedSeries: {
                                            type: "integer"
                                        },
                                        DICOMNumberOfStudyRelatedInstances: {
                                            type: "integer"
                                        },
                                        DICOMAccessionNumber: {
                                            shape: "S24"
                                        },
                                        DICOMStudyDate: {
                                            shape: "S28"
                                        },
                                        DICOMStudyTime: {
                                            shape: "S29"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "runtime-"
            }
        },
        StartDICOMImportJob: {
            http: {
                requestUri: "/startDICOMImportJob/datastore/{datastoreId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataAccessRoleArn", "clientToken", "datastoreId", "inputS3Uri", "outputS3Uri" ],
                members: {
                    jobName: {},
                    dataAccessRoleArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    inputS3Uri: {},
                    outputS3Uri: {}
                }
            },
            output: {
                type: "structure",
                required: [ "datastoreId", "jobId", "jobStatus", "submittedAt" ],
                members: {
                    datastoreId: {},
                    jobId: {},
                    jobStatus: {},
                    submittedAt: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateImageSetMetadata: {
            http: {
                requestUri: "/datastore/{datastoreId}/imageSet/{imageSetId}/updateImageSetMetadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "datastoreId", "imageSetId", "latestVersionId", "updateImageSetMetadataUpdates" ],
                members: {
                    datastoreId: {
                        location: "uri",
                        locationName: "datastoreId"
                    },
                    imageSetId: {
                        location: "uri",
                        locationName: "imageSetId"
                    },
                    latestVersionId: {
                        location: "querystring",
                        locationName: "latestVersion"
                    },
                    updateImageSetMetadataUpdates: {
                        type: "structure",
                        members: {
                            DICOMUpdates: {
                                type: "structure",
                                members: {
                                    removableAttributes: {
                                        shape: "S2x"
                                    },
                                    updatableAttributes: {
                                        shape: "S2x"
                                    }
                                }
                            }
                        },
                        union: true
                    }
                },
                payload: "updateImageSetMetadataUpdates"
            },
            output: {
                type: "structure",
                required: [ "datastoreId", "imageSetId", "latestVersionId", "imageSetState" ],
                members: {
                    datastoreId: {},
                    imageSetId: {},
                    latestVersionId: {},
                    imageSetState: {},
                    imageSetWorkflowStatus: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    message: {}
                }
            },
            endpoint: {
                hostPrefix: "runtime-"
            }
        }
    },
    shapes: {
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        S23: {
            type: "string",
            sensitive: true
        },
        S24: {
            type: "string",
            sensitive: true
        },
        S25: {
            type: "string",
            sensitive: true
        },
        S26: {
            type: "string",
            sensitive: true
        },
        S28: {
            type: "string",
            sensitive: true
        },
        S29: {
            type: "string",
            sensitive: true
        },
        S2x: {
            type: "blob",
            sensitive: true
        }
    },
    paginators: {
        ListDICOMImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobSummaries"
        },
        ListDatastores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "datastoreSummaries"
        },
        ListImageSetVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageSetPropertiesList"
        },
        SearchImageSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageSetsMetadataSummaries"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["entityresolution"] = {};

AWS.EntityResolution = AWS.Service.defineService("entityresolution", [ "2018-05-10" ]);

AWS.apiLoader.services["entityresolution"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "entityresolution",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWSEntityResolution",
        serviceFullName: "AWS EntityResolution",
        serviceId: "EntityResolution",
        signatureVersion: "v4",
        signingName: "entityresolution",
        uid: "entityresolution-2018-05-10"
    },
    operations: {
        CreateIdMappingWorkflow: {
            http: {
                requestUri: "/idmappingworkflows",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "idMappingTechniques", "inputSourceConfig", "outputSourceConfig", "roleArn", "workflowName" ],
                members: {
                    description: {},
                    idMappingTechniques: {
                        shape: "S3"
                    },
                    inputSourceConfig: {
                        shape: "Sa"
                    },
                    outputSourceConfig: {
                        shape: "Se"
                    },
                    roleArn: {},
                    tags: {
                        shape: "Si"
                    },
                    workflowName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "idMappingTechniques", "inputSourceConfig", "outputSourceConfig", "roleArn", "workflowArn", "workflowName" ],
                members: {
                    description: {},
                    idMappingTechniques: {
                        shape: "S3"
                    },
                    inputSourceConfig: {
                        shape: "Sa"
                    },
                    outputSourceConfig: {
                        shape: "Se"
                    },
                    roleArn: {},
                    workflowArn: {},
                    workflowName: {}
                }
            }
        },
        CreateMatchingWorkflow: {
            http: {
                requestUri: "/matchingworkflows",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "inputSourceConfig", "outputSourceConfig", "resolutionTechniques", "roleArn", "workflowName" ],
                members: {
                    description: {},
                    incrementalRunConfig: {
                        shape: "So"
                    },
                    inputSourceConfig: {
                        shape: "Sq"
                    },
                    outputSourceConfig: {
                        shape: "Su"
                    },
                    resolutionTechniques: {
                        shape: "Sz"
                    },
                    roleArn: {},
                    tags: {
                        shape: "Si"
                    },
                    workflowName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "inputSourceConfig", "outputSourceConfig", "resolutionTechniques", "roleArn", "workflowArn", "workflowName" ],
                members: {
                    description: {},
                    incrementalRunConfig: {
                        shape: "So"
                    },
                    inputSourceConfig: {
                        shape: "Sq"
                    },
                    outputSourceConfig: {
                        shape: "Su"
                    },
                    resolutionTechniques: {
                        shape: "Sz"
                    },
                    roleArn: {},
                    workflowArn: {},
                    workflowName: {}
                }
            }
        },
        CreateSchemaMapping: {
            http: {
                requestUri: "/schemas",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "mappedInputFields", "schemaName" ],
                members: {
                    description: {},
                    mappedInputFields: {
                        shape: "S1b"
                    },
                    schemaName: {},
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "description", "mappedInputFields", "schemaArn", "schemaName" ],
                members: {
                    description: {},
                    mappedInputFields: {
                        shape: "S1b"
                    },
                    schemaArn: {},
                    schemaName: {}
                }
            }
        },
        DeleteIdMappingWorkflow: {
            http: {
                method: "DELETE",
                requestUri: "/idmappingworkflows/{workflowName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "message" ],
                members: {
                    message: {}
                }
            },
            idempotent: true
        },
        DeleteMatchingWorkflow: {
            http: {
                method: "DELETE",
                requestUri: "/matchingworkflows/{workflowName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "message" ],
                members: {
                    message: {}
                }
            },
            idempotent: true
        },
        DeleteSchemaMapping: {
            http: {
                method: "DELETE",
                requestUri: "/schemas/{schemaName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "schemaName" ],
                members: {
                    schemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "message" ],
                members: {
                    message: {}
                }
            },
            idempotent: true
        },
        GetIdMappingJob: {
            http: {
                method: "GET",
                requestUri: "/idmappingworkflows/{workflowName}/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId", "workflowName" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId", "startTime", "status" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    errorDetails: {
                        shape: "S1q"
                    },
                    jobId: {},
                    metrics: {
                        type: "structure",
                        members: {
                            inputRecords: {
                                type: "integer"
                            },
                            recordsNotProcessed: {
                                type: "integer"
                            },
                            totalRecordsProcessed: {
                                type: "integer"
                            }
                        }
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        GetIdMappingWorkflow: {
            http: {
                method: "GET",
                requestUri: "/idmappingworkflows/{workflowName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "idMappingTechniques", "inputSourceConfig", "outputSourceConfig", "roleArn", "updatedAt", "workflowArn", "workflowName" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    idMappingTechniques: {
                        shape: "S3"
                    },
                    inputSourceConfig: {
                        shape: "Sa"
                    },
                    outputSourceConfig: {
                        shape: "Se"
                    },
                    roleArn: {},
                    tags: {
                        shape: "Si"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    workflowArn: {},
                    workflowName: {}
                }
            }
        },
        GetMatchId: {
            http: {
                requestUri: "/matchingworkflows/{workflowName}/matches",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "record", "workflowName" ],
                members: {
                    record: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    matchId: {}
                }
            }
        },
        GetMatchingJob: {
            http: {
                method: "GET",
                requestUri: "/matchingworkflows/{workflowName}/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId", "workflowName" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId", "startTime", "status" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    errorDetails: {
                        shape: "S1q"
                    },
                    jobId: {},
                    metrics: {
                        type: "structure",
                        members: {
                            inputRecords: {
                                type: "integer"
                            },
                            matchIDs: {
                                type: "integer"
                            },
                            recordsNotProcessed: {
                                type: "integer"
                            },
                            totalRecordsProcessed: {
                                type: "integer"
                            }
                        }
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        GetMatchingWorkflow: {
            http: {
                method: "GET",
                requestUri: "/matchingworkflows/{workflowName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "inputSourceConfig", "outputSourceConfig", "resolutionTechniques", "roleArn", "updatedAt", "workflowArn", "workflowName" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    incrementalRunConfig: {
                        shape: "So"
                    },
                    inputSourceConfig: {
                        shape: "Sq"
                    },
                    outputSourceConfig: {
                        shape: "Su"
                    },
                    resolutionTechniques: {
                        shape: "Sz"
                    },
                    roleArn: {},
                    tags: {
                        shape: "Si"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    workflowArn: {},
                    workflowName: {}
                }
            }
        },
        GetProviderService: {
            http: {
                method: "GET",
                requestUri: "/providerservices/{providerName}/{providerServiceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "providerName", "providerServiceName" ],
                members: {
                    providerName: {
                        location: "uri",
                        locationName: "providerName"
                    },
                    providerServiceName: {
                        location: "uri",
                        locationName: "providerServiceName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "anonymizedOutput", "providerEndpointConfiguration", "providerEntityOutputDefinition", "providerName", "providerServiceArn", "providerServiceDisplayName", "providerServiceName", "providerServiceType" ],
                members: {
                    anonymizedOutput: {
                        type: "boolean"
                    },
                    providerConfigurationDefinition: {
                        shape: "S8"
                    },
                    providerEndpointConfiguration: {
                        type: "structure",
                        members: {
                            marketplaceConfiguration: {
                                type: "structure",
                                required: [ "assetId", "dataSetId", "listingId", "revisionId" ],
                                members: {
                                    assetId: {},
                                    dataSetId: {},
                                    listingId: {},
                                    revisionId: {}
                                }
                            }
                        },
                        union: true
                    },
                    providerEntityOutputDefinition: {
                        shape: "S8"
                    },
                    providerIntermediateDataAccessConfiguration: {
                        type: "structure",
                        members: {
                            awsAccountIds: {
                                type: "list",
                                member: {}
                            },
                            requiredBucketActions: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    providerName: {},
                    providerServiceArn: {},
                    providerServiceDisplayName: {},
                    providerServiceName: {},
                    providerServiceType: {}
                }
            }
        },
        GetSchemaMapping: {
            http: {
                method: "GET",
                requestUri: "/schemas/{schemaName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "schemaName" ],
                members: {
                    schemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "hasWorkflows", "mappedInputFields", "schemaArn", "schemaName", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    hasWorkflows: {
                        type: "boolean"
                    },
                    mappedInputFields: {
                        shape: "S1b"
                    },
                    schemaArn: {},
                    schemaName: {},
                    tags: {
                        shape: "Si"
                    },
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListIdMappingJobs: {
            http: {
                method: "GET",
                requestUri: "/idmappingworkflows/{workflowName}/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        shape: "S2n"
                    },
                    nextToken: {}
                }
            }
        },
        ListIdMappingWorkflows: {
            http: {
                method: "GET",
                requestUri: "/idmappingworkflows",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workflowSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "updatedAt", "workflowArn", "workflowName" ],
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                workflowArn: {},
                                workflowName: {}
                            }
                        }
                    }
                }
            }
        },
        ListMatchingJobs: {
            http: {
                method: "GET",
                requestUri: "/matchingworkflows/{workflowName}/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        shape: "S2n"
                    },
                    nextToken: {}
                }
            }
        },
        ListMatchingWorkflows: {
            http: {
                method: "GET",
                requestUri: "/matchingworkflows",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workflowSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "resolutionType", "updatedAt", "workflowArn", "workflowName" ],
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                resolutionType: {},
                                updatedAt: {
                                    type: "timestamp"
                                },
                                workflowArn: {},
                                workflowName: {}
                            }
                        }
                    }
                }
            }
        },
        ListProviderServices: {
            http: {
                method: "GET",
                requestUri: "/providerservices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    providerName: {
                        location: "querystring",
                        locationName: "providerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    providerServiceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "providerName", "providerServiceArn", "providerServiceDisplayName", "providerServiceName", "providerServiceType" ],
                            members: {
                                providerName: {},
                                providerServiceArn: {},
                                providerServiceDisplayName: {},
                                providerServiceName: {},
                                providerServiceType: {}
                            }
                        }
                    }
                }
            }
        },
        ListSchemaMappings: {
            http: {
                method: "GET",
                requestUri: "/schemas",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    schemaList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "hasWorkflows", "schemaArn", "schemaName", "updatedAt" ],
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                hasWorkflows: {
                                    type: "boolean"
                                },
                                schemaArn: {},
                                schemaName: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        StartIdMappingJob: {
            http: {
                requestUri: "/idmappingworkflows/{workflowName}/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            }
        },
        StartMatchingJob: {
            http: {
                requestUri: "/matchingworkflows/{workflowName}/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowName" ],
                members: {
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateIdMappingWorkflow: {
            http: {
                method: "PUT",
                requestUri: "/idmappingworkflows/{workflowName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "idMappingTechniques", "inputSourceConfig", "outputSourceConfig", "roleArn", "workflowName" ],
                members: {
                    description: {},
                    idMappingTechniques: {
                        shape: "S3"
                    },
                    inputSourceConfig: {
                        shape: "Sa"
                    },
                    outputSourceConfig: {
                        shape: "Se"
                    },
                    roleArn: {},
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "idMappingTechniques", "inputSourceConfig", "outputSourceConfig", "roleArn", "workflowArn", "workflowName" ],
                members: {
                    description: {},
                    idMappingTechniques: {
                        shape: "S3"
                    },
                    inputSourceConfig: {
                        shape: "Sa"
                    },
                    outputSourceConfig: {
                        shape: "Se"
                    },
                    roleArn: {},
                    workflowArn: {},
                    workflowName: {}
                }
            },
            idempotent: true
        },
        UpdateMatchingWorkflow: {
            http: {
                method: "PUT",
                requestUri: "/matchingworkflows/{workflowName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "inputSourceConfig", "outputSourceConfig", "resolutionTechniques", "roleArn", "workflowName" ],
                members: {
                    description: {},
                    incrementalRunConfig: {
                        shape: "So"
                    },
                    inputSourceConfig: {
                        shape: "Sq"
                    },
                    outputSourceConfig: {
                        shape: "Su"
                    },
                    resolutionTechniques: {
                        shape: "Sz"
                    },
                    roleArn: {},
                    workflowName: {
                        location: "uri",
                        locationName: "workflowName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "inputSourceConfig", "outputSourceConfig", "resolutionTechniques", "roleArn", "workflowName" ],
                members: {
                    description: {},
                    incrementalRunConfig: {
                        shape: "So"
                    },
                    inputSourceConfig: {
                        shape: "Sq"
                    },
                    outputSourceConfig: {
                        shape: "Su"
                    },
                    resolutionTechniques: {
                        shape: "Sz"
                    },
                    roleArn: {},
                    workflowName: {}
                }
            },
            idempotent: true
        },
        UpdateSchemaMapping: {
            http: {
                method: "PUT",
                requestUri: "/schemas/{schemaName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "mappedInputFields", "schemaName" ],
                members: {
                    description: {},
                    mappedInputFields: {
                        shape: "S1b"
                    },
                    schemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mappedInputFields", "schemaArn", "schemaName" ],
                members: {
                    description: {},
                    mappedInputFields: {
                        shape: "S1b"
                    },
                    schemaArn: {},
                    schemaName: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "idMappingType", "providerProperties" ],
            members: {
                idMappingType: {},
                providerProperties: {
                    shape: "S5"
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "providerServiceArn" ],
            members: {
                intermediateSourceConfiguration: {
                    type: "structure",
                    required: [ "intermediateS3Path" ],
                    members: {
                        intermediateS3Path: {}
                    }
                },
                providerConfiguration: {
                    shape: "S8"
                },
                providerServiceArn: {}
            }
        },
        S8: {
            type: "structure",
            members: {},
            document: true
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "inputSourceARN", "schemaName" ],
                members: {
                    inputSourceARN: {},
                    schemaName: {}
                }
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "outputS3Path" ],
                members: {
                    KMSArn: {},
                    outputS3Path: {}
                }
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        So: {
            type: "structure",
            members: {
                incrementalRunType: {}
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "inputSourceARN", "schemaName" ],
                members: {
                    applyNormalization: {
                        type: "boolean"
                    },
                    inputSourceARN: {},
                    schemaName: {}
                }
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                required: [ "output", "outputS3Path" ],
                members: {
                    KMSArn: {},
                    applyNormalization: {
                        type: "boolean"
                    },
                    output: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                hashed: {
                                    type: "boolean"
                                },
                                name: {}
                            }
                        }
                    },
                    outputS3Path: {}
                }
            }
        },
        Sz: {
            type: "structure",
            required: [ "resolutionType" ],
            members: {
                providerProperties: {
                    shape: "S5"
                },
                resolutionType: {},
                ruleBasedProperties: {
                    type: "structure",
                    required: [ "attributeMatchingModel", "rules" ],
                    members: {
                        attributeMatchingModel: {},
                        rules: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "matchingKeys", "ruleName" ],
                                members: {
                                    matchingKeys: {
                                        type: "list",
                                        member: {}
                                    },
                                    ruleName: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "fieldName", "type" ],
                members: {
                    fieldName: {},
                    groupName: {},
                    matchKey: {},
                    subType: {},
                    type: {}
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                errorMessage: {}
            }
        },
        S2n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "jobId", "startTime", "status" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    jobId: {},
                    startTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        }
    },
    paginators: {
        ListIdMappingJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobs"
        },
        ListIdMappingWorkflows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowSummaries"
        },
        ListMatchingJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobs"
        },
        ListMatchingWorkflows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowSummaries"
        },
        ListProviderServices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "providerServiceSummaries"
        },
        ListSchemaMappings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "schemaList"
        }
    }
};

AWS.apiLoader.services["managedblockchainquery"] = {};

AWS.ManagedBlockchainQuery = AWS.Service.defineService("managedblockchainquery", [ "2023-05-04" ]);

AWS.apiLoader.services["managedblockchainquery"]["2023-05-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-05-04",
        endpointPrefix: "managedblockchain-query",
        jsonVersion: "1.1",
        protocol: "rest-json",
        ripServiceName: "chainquery",
        serviceFullName: "Amazon Managed Blockchain Query",
        serviceId: "ManagedBlockchain Query",
        signatureVersion: "v4",
        signingName: "managedblockchain-query",
        uid: "managedblockchain-query-2023-05-04"
    },
    operations: {
        BatchGetTokenBalance: {
            http: {
                requestUri: "/batch-get-token-balance",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    getTokenBalanceInputs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "tokenIdentifier", "ownerIdentifier" ],
                            members: {
                                tokenIdentifier: {
                                    shape: "S4"
                                },
                                ownerIdentifier: {
                                    shape: "S8"
                                },
                                atBlockchainInstant: {
                                    shape: "S9"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tokenBalances", "errors" ],
                members: {
                    tokenBalances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "balance", "atBlockchainInstant" ],
                            members: {
                                ownerIdentifier: {
                                    shape: "S8"
                                },
                                tokenIdentifier: {
                                    shape: "S4"
                                },
                                balance: {},
                                atBlockchainInstant: {
                                    shape: "S9"
                                },
                                lastUpdatedTime: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "errorMessage", "errorType" ],
                            members: {
                                tokenIdentifier: {
                                    shape: "S4"
                                },
                                ownerIdentifier: {
                                    shape: "S8"
                                },
                                atBlockchainInstant: {
                                    shape: "S9"
                                },
                                errorCode: {},
                                errorMessage: {},
                                errorType: {}
                            }
                        }
                    }
                }
            }
        },
        GetAssetContract: {
            http: {
                requestUri: "/get-asset-contract",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contractIdentifier" ],
                members: {
                    contractIdentifier: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contractIdentifier", "tokenStandard", "deployerAddress" ],
                members: {
                    contractIdentifier: {
                        shape: "Sj"
                    },
                    tokenStandard: {},
                    deployerAddress: {},
                    metadata: {
                        type: "structure",
                        members: {
                            name: {},
                            symbol: {},
                            decimals: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        GetTokenBalance: {
            http: {
                requestUri: "/get-token-balance",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "tokenIdentifier", "ownerIdentifier" ],
                members: {
                    tokenIdentifier: {
                        shape: "S4"
                    },
                    ownerIdentifier: {
                        shape: "S8"
                    },
                    atBlockchainInstant: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "balance", "atBlockchainInstant" ],
                members: {
                    ownerIdentifier: {
                        shape: "S8"
                    },
                    tokenIdentifier: {
                        shape: "S4"
                    },
                    balance: {},
                    atBlockchainInstant: {
                        shape: "S9"
                    },
                    lastUpdatedTime: {
                        shape: "S9"
                    }
                }
            }
        },
        GetTransaction: {
            http: {
                requestUri: "/get-transaction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "transactionHash", "network" ],
                members: {
                    transactionHash: {},
                    network: {}
                }
            },
            output: {
                type: "structure",
                required: [ "transaction" ],
                members: {
                    transaction: {
                        type: "structure",
                        required: [ "network", "transactionHash", "transactionTimestamp", "transactionIndex", "numberOfTransactions", "status", "to" ],
                        members: {
                            network: {},
                            blockHash: {},
                            transactionHash: {},
                            blockNumber: {},
                            transactionTimestamp: {
                                type: "timestamp"
                            },
                            transactionIndex: {
                                type: "long"
                            },
                            numberOfTransactions: {
                                type: "long"
                            },
                            status: {},
                            to: {},
                            from: {},
                            contractAddress: {},
                            gasUsed: {},
                            cumulativeGasUsed: {},
                            effectiveGasPrice: {},
                            signatureV: {
                                type: "integer"
                            },
                            signatureR: {},
                            signatureS: {},
                            transactionFee: {},
                            transactionId: {}
                        }
                    }
                }
            }
        },
        ListAssetContracts: {
            http: {
                requestUri: "/list-asset-contracts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contractFilter" ],
                members: {
                    contractFilter: {
                        type: "structure",
                        required: [ "network", "tokenStandard", "deployerAddress" ],
                        members: {
                            network: {},
                            tokenStandard: {},
                            deployerAddress: {}
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contracts" ],
                members: {
                    contracts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "contractIdentifier", "tokenStandard", "deployerAddress" ],
                            members: {
                                contractIdentifier: {
                                    shape: "Sj"
                                },
                                tokenStandard: {},
                                deployerAddress: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTokenBalances: {
            http: {
                requestUri: "/list-token-balances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "tokenFilter" ],
                members: {
                    ownerFilter: {
                        type: "structure",
                        required: [ "address" ],
                        members: {
                            address: {}
                        }
                    },
                    tokenFilter: {
                        type: "structure",
                        required: [ "network" ],
                        members: {
                            network: {},
                            contractAddress: {},
                            tokenId: {}
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tokenBalances" ],
                members: {
                    tokenBalances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "balance", "atBlockchainInstant" ],
                            members: {
                                ownerIdentifier: {
                                    shape: "S8"
                                },
                                tokenIdentifier: {
                                    shape: "S4"
                                },
                                balance: {},
                                atBlockchainInstant: {
                                    shape: "S9"
                                },
                                lastUpdatedTime: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTransactionEvents: {
            http: {
                requestUri: "/list-transaction-events",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "transactionHash", "network" ],
                members: {
                    transactionHash: {},
                    network: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "events" ],
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "network", "transactionHash", "eventType" ],
                            members: {
                                network: {},
                                transactionHash: {},
                                eventType: {},
                                from: {},
                                to: {},
                                value: {},
                                contractAddress: {},
                                tokenId: {},
                                transactionId: {},
                                voutIndex: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTransactions: {
            http: {
                requestUri: "/list-transactions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "address", "network" ],
                members: {
                    address: {},
                    network: {},
                    fromBlockchainInstant: {
                        shape: "S9"
                    },
                    toBlockchainInstant: {
                        shape: "S9"
                    },
                    sort: {
                        type: "structure",
                        members: {
                            sortBy: {},
                            sortOrder: {}
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "transactions" ],
                members: {
                    transactions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "transactionHash", "network", "transactionTimestamp" ],
                            members: {
                                transactionHash: {},
                                network: {},
                                transactionTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "network" ],
            members: {
                network: {},
                contractAddress: {},
                tokenId: {}
            }
        },
        S8: {
            type: "structure",
            required: [ "address" ],
            members: {
                address: {}
            }
        },
        S9: {
            type: "structure",
            members: {
                time: {
                    type: "timestamp"
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "network", "contractAddress" ],
            members: {
                network: {},
                contractAddress: {}
            }
        }
    },
    paginators: {
        ListAssetContracts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contracts"
        },
        ListTokenBalances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tokenBalances"
        },
        ListTransactionEvents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "events"
        },
        ListTransactions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "transactions"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["neptunedata"] = {};

AWS.Neptunedata = AWS.Service.defineService("neptunedata", [ "2023-08-01" ]);

AWS.apiLoader.services["neptunedata"]["2023-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-08-01",
        endpointPrefix: "neptune-db",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon NeptuneData",
        serviceId: "neptunedata",
        signatureVersion: "v4",
        signingName: "neptune-db",
        uid: "neptunedata-2023-08-01"
    },
    operations: {
        CancelGremlinQuery: {
            http: {
                method: "DELETE",
                requestUri: "/gremlin/status/{queryId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "queryId" ],
                members: {
                    queryId: {
                        location: "uri",
                        locationName: "queryId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            idempotent: true
        },
        CancelLoaderJob: {
            http: {
                method: "DELETE",
                requestUri: "/loader/{loadId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "loadId" ],
                members: {
                    loadId: {
                        location: "uri",
                        locationName: "loadId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            idempotent: true
        },
        CancelMLDataProcessingJob: {
            http: {
                method: "DELETE",
                requestUri: "/ml/dataprocessing/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    },
                    clean: {
                        location: "querystring",
                        locationName: "clean",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            idempotent: true
        },
        CancelMLModelTrainingJob: {
            http: {
                method: "DELETE",
                requestUri: "/ml/modeltraining/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    },
                    clean: {
                        location: "querystring",
                        locationName: "clean",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            idempotent: true
        },
        CancelMLModelTransformJob: {
            http: {
                method: "DELETE",
                requestUri: "/ml/modeltransform/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    },
                    clean: {
                        location: "querystring",
                        locationName: "clean",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            idempotent: true
        },
        CancelOpenCypherQuery: {
            http: {
                method: "DELETE",
                requestUri: "/opencypher/status/{queryId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "queryId" ],
                members: {
                    queryId: {
                        location: "uri",
                        locationName: "queryId"
                    },
                    silent: {
                        location: "querystring",
                        locationName: "silent",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    payload: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        CreateMLEndpoint: {
            http: {
                requestUri: "/ml/endpoints",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {},
                    mlModelTrainingJobId: {},
                    mlModelTransformJobId: {},
                    update: {
                        type: "boolean"
                    },
                    neptuneIamRoleArn: {},
                    modelName: {},
                    instanceType: {},
                    instanceCount: {
                        type: "integer"
                    },
                    volumeEncryptionKMSKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    creationTimeInMillis: {
                        type: "long"
                    }
                }
            }
        },
        DeleteMLEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/ml/endpoints/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    },
                    clean: {
                        location: "querystring",
                        locationName: "clean",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            },
            idempotent: true
        },
        DeletePropertygraphStatistics: {
            http: {
                method: "DELETE",
                requestUri: "/propertygraph/statistics",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    statusCode: {
                        location: "statusCode",
                        type: "integer"
                    },
                    status: {},
                    payload: {
                        shape: "Sm"
                    }
                }
            },
            idempotent: true
        },
        DeleteSparqlStatistics: {
            http: {
                method: "DELETE",
                requestUri: "/sparql/statistics",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    statusCode: {
                        location: "statusCode",
                        type: "integer"
                    },
                    status: {},
                    payload: {
                        shape: "Sm"
                    }
                }
            },
            idempotent: true
        },
        ExecuteFastReset: {
            http: {
                requestUri: "/system",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "action" ],
                members: {
                    action: {},
                    token: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {},
                    payload: {
                        type: "structure",
                        members: {
                            token: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        ExecuteGremlinExplainQuery: {
            http: {
                requestUri: "/gremlin/explain",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gremlinQuery" ],
                members: {
                    gremlinQuery: {
                        locationName: "gremlin"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    output: {
                        type: "blob"
                    }
                },
                payload: "output"
            }
        },
        ExecuteGremlinProfileQuery: {
            http: {
                requestUri: "/gremlin/profile",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gremlinQuery" ],
                members: {
                    gremlinQuery: {
                        locationName: "gremlin"
                    },
                    results: {
                        locationName: "profile.results",
                        type: "boolean"
                    },
                    chop: {
                        locationName: "profile.chop",
                        type: "integer"
                    },
                    serializer: {
                        locationName: "profile.serializer"
                    },
                    indexOps: {
                        locationName: "profile.indexOps",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    output: {
                        type: "blob"
                    }
                },
                payload: "output"
            }
        },
        ExecuteGremlinQuery: {
            http: {
                requestUri: "/gremlin",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gremlinQuery" ],
                members: {
                    gremlinQuery: {
                        locationName: "gremlin"
                    },
                    serializer: {
                        location: "header",
                        locationName: "accept"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    status: {
                        type: "structure",
                        members: {
                            message: {},
                            code: {
                                type: "integer"
                            },
                            attributes: {
                                shape: "S10"
                            }
                        }
                    },
                    result: {
                        shape: "S10"
                    },
                    meta: {
                        shape: "S10"
                    }
                }
            }
        },
        ExecuteOpenCypherExplainQuery: {
            http: {
                requestUri: "/opencypher/explain",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "openCypherQuery", "explainMode" ],
                members: {
                    openCypherQuery: {
                        locationName: "query"
                    },
                    parameters: {},
                    explainMode: {
                        locationName: "explain"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    results: {
                        type: "blob"
                    }
                },
                payload: "results"
            }
        },
        ExecuteOpenCypherQuery: {
            http: {
                requestUri: "/opencypher",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "openCypherQuery" ],
                members: {
                    openCypherQuery: {
                        locationName: "query"
                    },
                    parameters: {}
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    results: {
                        shape: "S10"
                    }
                }
            }
        },
        GetEngineStatus: {
            http: {
                method: "GET",
                requestUri: "/status",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    startTime: {},
                    dbEngineVersion: {},
                    role: {},
                    dfeQueryEngine: {},
                    gremlin: {
                        shape: "S18"
                    },
                    sparql: {
                        shape: "S18"
                    },
                    opencypher: {
                        shape: "S18"
                    },
                    labMode: {
                        shape: "S19"
                    },
                    rollingBackTrxCount: {
                        type: "integer"
                    },
                    rollingBackTrxEarliestStartTime: {},
                    features: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S10"
                        }
                    },
                    settings: {
                        shape: "S19"
                    }
                }
            }
        },
        GetGremlinQueryStatus: {
            http: {
                method: "GET",
                requestUri: "/gremlin/status/{queryId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "queryId" ],
                members: {
                    queryId: {
                        location: "uri",
                        locationName: "queryId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    queryId: {},
                    queryString: {},
                    queryEvalStats: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetLoaderJobStatus: {
            http: {
                method: "GET",
                requestUri: "/loader/{loadId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "loadId" ],
                members: {
                    loadId: {
                        location: "uri",
                        locationName: "loadId"
                    },
                    details: {
                        location: "querystring",
                        locationName: "details",
                        type: "boolean"
                    },
                    errors: {
                        location: "querystring",
                        locationName: "errors",
                        type: "boolean"
                    },
                    page: {
                        location: "querystring",
                        locationName: "page",
                        type: "integer"
                    },
                    errorsPerPage: {
                        location: "querystring",
                        locationName: "errorsPerPage",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status", "payload" ],
                members: {
                    status: {},
                    payload: {
                        shape: "S10"
                    }
                }
            }
        },
        GetMLDataProcessingJob: {
            http: {
                method: "GET",
                requestUri: "/ml/dataprocessing/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    id: {},
                    processingJob: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetMLEndpoint: {
            http: {
                method: "GET",
                requestUri: "/ml/endpoints/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    id: {},
                    endpoint: {
                        shape: "S1j"
                    },
                    endpointConfig: {
                        shape: "S1m"
                    }
                }
            }
        },
        GetMLModelTrainingJob: {
            http: {
                method: "GET",
                requestUri: "/ml/modeltraining/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    id: {},
                    processingJob: {
                        shape: "S1j"
                    },
                    hpoJob: {
                        shape: "S1j"
                    },
                    modelTransformJob: {
                        shape: "S1j"
                    },
                    mlModels: {
                        type: "list",
                        member: {
                            shape: "S1m"
                        }
                    }
                }
            }
        },
        GetMLModelTransformJob: {
            http: {
                method: "GET",
                requestUri: "/ml/modeltransform/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    id: {},
                    baseProcessingJob: {
                        shape: "S1j"
                    },
                    remoteModelTransformJob: {
                        shape: "S1j"
                    },
                    models: {
                        type: "list",
                        member: {
                            shape: "S1m"
                        }
                    }
                }
            }
        },
        GetOpenCypherQueryStatus: {
            http: {
                method: "GET",
                requestUri: "/opencypher/status/{queryId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "queryId" ],
                members: {
                    queryId: {
                        location: "uri",
                        locationName: "queryId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    queryId: {},
                    queryString: {},
                    queryEvalStats: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetPropertygraphStatistics: {
            http: {
                method: "GET",
                requestUri: "/propertygraph/statistics",
                responseCode: 200
            },
            output: {
                type: "structure",
                required: [ "status", "payload" ],
                members: {
                    status: {},
                    payload: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetPropertygraphStream: {
            http: {
                method: "GET",
                requestUri: "/propertygraph/stream",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "long"
                    },
                    iteratorType: {
                        location: "querystring",
                        locationName: "iteratorType"
                    },
                    commitNum: {
                        location: "querystring",
                        locationName: "commitNum",
                        type: "long"
                    },
                    opNum: {
                        location: "querystring",
                        locationName: "opNum",
                        type: "long"
                    },
                    encoding: {
                        location: "header",
                        locationName: "Accept-Encoding"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "lastEventId", "lastTrxTimestampInMillis", "format", "records", "totalRecords" ],
                members: {
                    lastEventId: {
                        shape: "S19"
                    },
                    lastTrxTimestampInMillis: {
                        locationName: "lastTrxTimestamp",
                        type: "long"
                    },
                    format: {},
                    records: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "commitTimestampInMillis", "eventId", "data", "op" ],
                            members: {
                                commitTimestampInMillis: {
                                    locationName: "commitTimestamp",
                                    type: "long"
                                },
                                eventId: {
                                    shape: "S19"
                                },
                                data: {
                                    type: "structure",
                                    required: [ "id", "type", "key", "value" ],
                                    members: {
                                        id: {},
                                        type: {},
                                        key: {},
                                        value: {
                                            shape: "S10"
                                        },
                                        from: {},
                                        to: {}
                                    }
                                },
                                op: {},
                                isLastOp: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    totalRecords: {
                        type: "integer"
                    }
                }
            }
        },
        GetPropertygraphSummary: {
            http: {
                method: "GET",
                requestUri: "/propertygraph/statistics/summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    mode: {
                        location: "querystring",
                        locationName: "mode"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    statusCode: {
                        location: "statusCode",
                        type: "integer"
                    },
                    payload: {
                        type: "structure",
                        members: {
                            version: {},
                            lastStatisticsComputationTime: {
                                shape: "S1x"
                            },
                            graphSummary: {
                                type: "structure",
                                members: {
                                    numNodes: {
                                        type: "long"
                                    },
                                    numEdges: {
                                        type: "long"
                                    },
                                    numNodeLabels: {
                                        type: "long"
                                    },
                                    numEdgeLabels: {
                                        type: "long"
                                    },
                                    nodeLabels: {
                                        type: "list",
                                        member: {}
                                    },
                                    edgeLabels: {
                                        type: "list",
                                        member: {}
                                    },
                                    numNodeProperties: {
                                        type: "long"
                                    },
                                    numEdgeProperties: {
                                        type: "long"
                                    },
                                    nodeProperties: {
                                        shape: "S2e"
                                    },
                                    edgeProperties: {
                                        shape: "S2e"
                                    },
                                    totalNodePropertyValues: {
                                        type: "long"
                                    },
                                    totalEdgePropertyValues: {
                                        type: "long"
                                    },
                                    nodeStructures: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                count: {
                                                    type: "long"
                                                },
                                                nodeProperties: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                distinctOutgoingEdgeLabels: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    },
                                    edgeStructures: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                count: {
                                                    type: "long"
                                                },
                                                edgeProperties: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetRDFGraphSummary: {
            http: {
                method: "GET",
                requestUri: "/rdf/statistics/summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    mode: {
                        location: "querystring",
                        locationName: "mode"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    statusCode: {
                        location: "statusCode",
                        type: "integer"
                    },
                    payload: {
                        type: "structure",
                        members: {
                            version: {},
                            lastStatisticsComputationTime: {
                                shape: "S1x"
                            },
                            graphSummary: {
                                type: "structure",
                                members: {
                                    numDistinctSubjects: {
                                        type: "long"
                                    },
                                    numDistinctPredicates: {
                                        type: "long"
                                    },
                                    numQuads: {
                                        type: "long"
                                    },
                                    numClasses: {
                                        type: "long"
                                    },
                                    classes: {
                                        type: "list",
                                        member: {}
                                    },
                                    predicates: {
                                        shape: "S2e"
                                    },
                                    subjectStructures: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                count: {
                                                    type: "long"
                                                },
                                                predicates: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSparqlStatistics: {
            http: {
                method: "GET",
                requestUri: "/sparql/statistics",
                responseCode: 200
            },
            output: {
                type: "structure",
                required: [ "status", "payload" ],
                members: {
                    status: {},
                    payload: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetSparqlStream: {
            http: {
                method: "GET",
                requestUri: "/sparql/stream",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "long"
                    },
                    iteratorType: {
                        location: "querystring",
                        locationName: "iteratorType"
                    },
                    commitNum: {
                        location: "querystring",
                        locationName: "commitNum",
                        type: "long"
                    },
                    opNum: {
                        location: "querystring",
                        locationName: "opNum",
                        type: "long"
                    },
                    encoding: {
                        location: "header",
                        locationName: "Accept-Encoding"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "lastEventId", "lastTrxTimestampInMillis", "format", "records", "totalRecords" ],
                members: {
                    lastEventId: {
                        shape: "S19"
                    },
                    lastTrxTimestampInMillis: {
                        locationName: "lastTrxTimestamp",
                        type: "long"
                    },
                    format: {},
                    records: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "commitTimestampInMillis", "eventId", "data", "op" ],
                            members: {
                                commitTimestampInMillis: {
                                    locationName: "commitTimestamp",
                                    type: "long"
                                },
                                eventId: {
                                    shape: "S19"
                                },
                                data: {
                                    type: "structure",
                                    required: [ "stmt" ],
                                    members: {
                                        stmt: {}
                                    }
                                },
                                op: {},
                                isLastOp: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    totalRecords: {
                        type: "integer"
                    }
                }
            }
        },
        ListGremlinQueries: {
            http: {
                method: "GET",
                requestUri: "/gremlin/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    includeWaiting: {
                        location: "querystring",
                        locationName: "includeWaiting",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    acceptedQueryCount: {
                        type: "integer"
                    },
                    runningQueryCount: {
                        type: "integer"
                    },
                    queries: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    }
                }
            }
        },
        ListLoaderJobs: {
            http: {
                method: "GET",
                requestUri: "/loader",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    includeQueuedLoads: {
                        location: "querystring",
                        locationName: "includeQueuedLoads",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status", "payload" ],
                members: {
                    status: {},
                    payload: {
                        type: "structure",
                        members: {
                            loadIds: {
                                shape: "S3a"
                            }
                        }
                    }
                }
            }
        },
        ListMLDataProcessingJobs: {
            http: {
                method: "GET",
                requestUri: "/ml/dataprocessing",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S3a"
                    }
                }
            }
        },
        ListMLEndpoints: {
            http: {
                method: "GET",
                requestUri: "/ml/endpoints",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S3a"
                    }
                }
            }
        },
        ListMLModelTrainingJobs: {
            http: {
                method: "GET",
                requestUri: "/ml/modeltraining",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S3a"
                    }
                }
            }
        },
        ListMLModelTransformJobs: {
            http: {
                method: "GET",
                requestUri: "/ml/modeltransform",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    neptuneIamRoleArn: {
                        location: "querystring",
                        locationName: "neptuneIamRoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S3a"
                    }
                }
            }
        },
        ListOpenCypherQueries: {
            http: {
                method: "GET",
                requestUri: "/opencypher/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    includeWaiting: {
                        location: "querystring",
                        locationName: "includeWaiting",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    acceptedQueryCount: {
                        type: "integer"
                    },
                    runningQueryCount: {
                        type: "integer"
                    },
                    queries: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    }
                }
            }
        },
        ManagePropertygraphStatistics: {
            http: {
                requestUri: "/propertygraph/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    mode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {},
                    payload: {
                        shape: "S3t"
                    }
                }
            },
            idempotent: true
        },
        ManageSparqlStatistics: {
            http: {
                requestUri: "/sparql/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    mode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {},
                    payload: {
                        shape: "S3t"
                    }
                }
            },
            idempotent: true
        },
        StartLoaderJob: {
            http: {
                requestUri: "/loader",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "source", "format", "s3BucketRegion", "iamRoleArn" ],
                members: {
                    source: {},
                    format: {},
                    s3BucketRegion: {
                        locationName: "region"
                    },
                    iamRoleArn: {},
                    mode: {},
                    failOnError: {
                        type: "boolean"
                    },
                    parallelism: {},
                    parserConfiguration: {
                        shape: "S19"
                    },
                    updateSingleCardinalityProperties: {
                        type: "boolean"
                    },
                    queueRequest: {
                        type: "boolean"
                    },
                    dependencies: {
                        shape: "S3a"
                    },
                    userProvidedEdgeIds: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status", "payload" ],
                members: {
                    status: {},
                    payload: {
                        shape: "S19"
                    }
                }
            },
            idempotent: true
        },
        StartMLDataProcessingJob: {
            http: {
                requestUri: "/ml/dataprocessing",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "inputDataS3Location", "processedDataS3Location" ],
                members: {
                    id: {},
                    previousDataProcessingJobId: {},
                    inputDataS3Location: {},
                    processedDataS3Location: {},
                    sagemakerIamRoleArn: {},
                    neptuneIamRoleArn: {},
                    processingInstanceType: {},
                    processingInstanceVolumeSizeInGB: {
                        type: "integer"
                    },
                    processingTimeOutInSeconds: {
                        type: "integer"
                    },
                    modelType: {},
                    configFileName: {},
                    subnets: {
                        shape: "S3a"
                    },
                    securityGroupIds: {
                        shape: "S3a"
                    },
                    volumeEncryptionKMSKey: {},
                    s3OutputEncryptionKMSKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    creationTimeInMillis: {
                        type: "long"
                    }
                }
            }
        },
        StartMLModelTrainingJob: {
            http: {
                requestUri: "/ml/modeltraining",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataProcessingJobId", "trainModelS3Location" ],
                members: {
                    id: {},
                    previousModelTrainingJobId: {},
                    dataProcessingJobId: {},
                    trainModelS3Location: {},
                    sagemakerIamRoleArn: {},
                    neptuneIamRoleArn: {},
                    baseProcessingInstanceType: {},
                    trainingInstanceType: {},
                    trainingInstanceVolumeSizeInGB: {
                        type: "integer"
                    },
                    trainingTimeOutInSeconds: {
                        type: "integer"
                    },
                    maxHPONumberOfTrainingJobs: {
                        type: "integer"
                    },
                    maxHPOParallelTrainingJobs: {
                        type: "integer"
                    },
                    subnets: {
                        shape: "S3a"
                    },
                    securityGroupIds: {
                        shape: "S3a"
                    },
                    volumeEncryptionKMSKey: {},
                    s3OutputEncryptionKMSKey: {},
                    enableManagedSpotTraining: {
                        type: "boolean"
                    },
                    customModelTrainingParameters: {
                        type: "structure",
                        required: [ "sourceS3DirectoryPath" ],
                        members: {
                            sourceS3DirectoryPath: {},
                            trainingEntryPointScript: {},
                            transformEntryPointScript: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    creationTimeInMillis: {
                        type: "long"
                    }
                }
            }
        },
        StartMLModelTransformJob: {
            http: {
                requestUri: "/ml/modeltransform",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "modelTransformOutputS3Location" ],
                members: {
                    id: {},
                    dataProcessingJobId: {},
                    mlModelTrainingJobId: {},
                    trainingJobName: {},
                    modelTransformOutputS3Location: {},
                    sagemakerIamRoleArn: {},
                    neptuneIamRoleArn: {},
                    customModelTransformParameters: {
                        type: "structure",
                        required: [ "sourceS3DirectoryPath" ],
                        members: {
                            sourceS3DirectoryPath: {},
                            transformEntryPointScript: {}
                        }
                    },
                    baseProcessingInstanceType: {},
                    baseProcessingInstanceVolumeSizeInGB: {
                        type: "integer"
                    },
                    subnets: {
                        shape: "S3a"
                    },
                    securityGroupIds: {
                        shape: "S3a"
                    },
                    volumeEncryptionKMSKey: {},
                    s3OutputEncryptionKMSKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    creationTimeInMillis: {
                        type: "long"
                    }
                }
            }
        }
    },
    shapes: {
        Sm: {
            type: "structure",
            members: {
                active: {
                    type: "boolean"
                },
                statisticsId: {}
            }
        },
        S10: {
            type: "structure",
            members: {},
            document: true
        },
        S18: {
            type: "structure",
            required: [ "version" ],
            members: {
                version: {}
            }
        },
        S19: {
            type: "map",
            key: {},
            value: {}
        },
        S1d: {
            type: "structure",
            members: {
                waited: {
                    type: "integer"
                },
                elapsed: {
                    type: "integer"
                },
                cancelled: {
                    type: "boolean"
                },
                subqueries: {
                    shape: "S10"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                status: {},
                outputLocation: {},
                failureReason: {},
                cloudwatchLogUrl: {}
            }
        },
        S1m: {
            type: "structure",
            members: {
                name: {},
                arn: {}
            }
        },
        S1w: {
            type: "structure",
            members: {
                autoCompute: {
                    type: "boolean"
                },
                active: {
                    type: "boolean"
                },
                statisticsId: {},
                date: {
                    shape: "S1x"
                },
                note: {},
                signatureInfo: {
                    type: "structure",
                    members: {
                        signatureCount: {
                            type: "integer"
                        },
                        instanceCount: {
                            type: "integer"
                        },
                        predicateCount: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1x: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S2e: {
            type: "list",
            member: {
                type: "map",
                key: {},
                value: {
                    type: "long"
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                queryId: {},
                queryString: {},
                queryEvalStats: {
                    shape: "S1d"
                }
            }
        },
        S3a: {
            type: "list",
            member: {}
        },
        S3t: {
            type: "structure",
            members: {
                statisticsId: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["pcaconnectorad"] = {};

AWS.PcaConnectorAd = AWS.Service.defineService("pcaconnectorad", [ "2018-05-10" ]);

AWS.apiLoader.services["pcaconnectorad"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "pca-connector-ad",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "PcaConnectorAd",
        serviceId: "Pca Connector Ad",
        signatureVersion: "v4",
        signingName: "pca-connector-ad",
        uid: "pca-connector-ad-2018-05-10"
    },
    operations: {
        CreateConnector: {
            http: {
                requestUri: "/connectors",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "DirectoryId", "VpcInformation" ],
                members: {
                    CertificateAuthorityArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DirectoryId: {},
                    Tags: {
                        shape: "S5"
                    },
                    VpcInformation: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectorArn: {}
                }
            }
        },
        CreateDirectoryRegistration: {
            http: {
                requestUri: "/directoryRegistrations",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DirectoryId: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryRegistrationArn: {}
                }
            }
        },
        CreateServicePrincipalName: {
            http: {
                requestUri: "/directoryRegistrations/{DirectoryRegistrationArn}/servicePrincipalNames/{ConnectorArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ConnectorArn", "DirectoryRegistrationArn" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectorArn: {
                        location: "uri",
                        locationName: "ConnectorArn"
                    },
                    DirectoryRegistrationArn: {
                        location: "uri",
                        locationName: "DirectoryRegistrationArn"
                    }
                }
            },
            idempotent: true
        },
        CreateTemplate: {
            http: {
                requestUri: "/templates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConnectorArn", "Definition", "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectorArn: {},
                    Definition: {
                        shape: "Sh"
                    },
                    Name: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {}
                }
            }
        },
        CreateTemplateGroupAccessControlEntry: {
            http: {
                requestUri: "/templates/{TemplateArn}/accessControlEntries",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccessRights", "GroupDisplayName", "GroupSecurityIdentifier", "TemplateArn" ],
                members: {
                    AccessRights: {
                        shape: "S1y"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    GroupDisplayName: {},
                    GroupSecurityIdentifier: {},
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteConnector: {
            http: {
                method: "DELETE",
                requestUri: "/connectors/{ConnectorArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ConnectorArn" ],
                members: {
                    ConnectorArn: {
                        location: "uri",
                        locationName: "ConnectorArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteDirectoryRegistration: {
            http: {
                method: "DELETE",
                requestUri: "/directoryRegistrations/{DirectoryRegistrationArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "DirectoryRegistrationArn" ],
                members: {
                    DirectoryRegistrationArn: {
                        location: "uri",
                        locationName: "DirectoryRegistrationArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteServicePrincipalName: {
            http: {
                method: "DELETE",
                requestUri: "/directoryRegistrations/{DirectoryRegistrationArn}/servicePrincipalNames/{ConnectorArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ConnectorArn", "DirectoryRegistrationArn" ],
                members: {
                    ConnectorArn: {
                        location: "uri",
                        locationName: "ConnectorArn"
                    },
                    DirectoryRegistrationArn: {
                        location: "uri",
                        locationName: "DirectoryRegistrationArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/templates/{TemplateArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "TemplateArn" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteTemplateGroupAccessControlEntry: {
            http: {
                method: "DELETE",
                requestUri: "/templates/{TemplateArn}/accessControlEntries/{GroupSecurityIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GroupSecurityIdentifier", "TemplateArn" ],
                members: {
                    GroupSecurityIdentifier: {
                        location: "uri",
                        locationName: "GroupSecurityIdentifier"
                    },
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            },
            idempotent: true
        },
        GetConnector: {
            http: {
                method: "GET",
                requestUri: "/connectors/{ConnectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConnectorArn" ],
                members: {
                    ConnectorArn: {
                        location: "uri",
                        locationName: "ConnectorArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connector: {
                        type: "structure",
                        members: {
                            Arn: {},
                            CertificateAuthorityArn: {},
                            CertificateEnrollmentPolicyServerEndpoint: {},
                            CreatedAt: {
                                type: "timestamp"
                            },
                            DirectoryId: {},
                            Status: {},
                            StatusReason: {},
                            UpdatedAt: {
                                type: "timestamp"
                            },
                            VpcInformation: {
                                shape: "S7"
                            }
                        }
                    }
                }
            }
        },
        GetDirectoryRegistration: {
            http: {
                method: "GET",
                requestUri: "/directoryRegistrations/{DirectoryRegistrationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryRegistrationArn" ],
                members: {
                    DirectoryRegistrationArn: {
                        location: "uri",
                        locationName: "DirectoryRegistrationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryRegistration: {
                        type: "structure",
                        members: {
                            Arn: {},
                            CreatedAt: {
                                type: "timestamp"
                            },
                            DirectoryId: {},
                            Status: {},
                            StatusReason: {},
                            UpdatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetServicePrincipalName: {
            http: {
                method: "GET",
                requestUri: "/directoryRegistrations/{DirectoryRegistrationArn}/servicePrincipalNames/{ConnectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConnectorArn", "DirectoryRegistrationArn" ],
                members: {
                    ConnectorArn: {
                        location: "uri",
                        locationName: "ConnectorArn"
                    },
                    DirectoryRegistrationArn: {
                        location: "uri",
                        locationName: "DirectoryRegistrationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServicePrincipalName: {
                        type: "structure",
                        members: {
                            ConnectorArn: {},
                            CreatedAt: {
                                type: "timestamp"
                            },
                            DirectoryRegistrationArn: {},
                            Status: {},
                            StatusReason: {},
                            UpdatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetTemplate: {
            http: {
                method: "GET",
                requestUri: "/templates/{TemplateArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TemplateArn" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Template: {
                        type: "structure",
                        members: {
                            Arn: {},
                            ConnectorArn: {},
                            CreatedAt: {
                                type: "timestamp"
                            },
                            Definition: {
                                shape: "Sh"
                            },
                            Name: {},
                            ObjectIdentifier: {},
                            PolicySchema: {
                                type: "integer"
                            },
                            Revision: {
                                shape: "S2r"
                            },
                            Status: {},
                            UpdatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetTemplateGroupAccessControlEntry: {
            http: {
                method: "GET",
                requestUri: "/templates/{TemplateArn}/accessControlEntries/{GroupSecurityIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GroupSecurityIdentifier", "TemplateArn" ],
                members: {
                    GroupSecurityIdentifier: {
                        location: "uri",
                        locationName: "GroupSecurityIdentifier"
                    },
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessControlEntry: {
                        type: "structure",
                        members: {
                            AccessRights: {
                                shape: "S1y"
                            },
                            CreatedAt: {
                                type: "timestamp"
                            },
                            GroupDisplayName: {},
                            GroupSecurityIdentifier: {},
                            TemplateArn: {},
                            UpdatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ListConnectors: {
            http: {
                method: "GET",
                requestUri: "/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CertificateAuthorityArn: {},
                                CertificateEnrollmentPolicyServerEndpoint: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DirectoryId: {},
                                Status: {},
                                StatusReason: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                VpcInformation: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDirectoryRegistrations: {
            http: {
                method: "GET",
                requestUri: "/directoryRegistrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryRegistrations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DirectoryId: {},
                                Status: {},
                                StatusReason: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServicePrincipalNames: {
            http: {
                method: "GET",
                requestUri: "/directoryRegistrations/{DirectoryRegistrationArn}/servicePrincipalNames",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryRegistrationArn" ],
                members: {
                    DirectoryRegistrationArn: {
                        location: "uri",
                        locationName: "DirectoryRegistrationArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ServicePrincipalNames: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectorArn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DirectoryRegistrationArn: {},
                                Status: {},
                                StatusReason: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        ListTemplateGroupAccessControlEntries: {
            http: {
                method: "GET",
                requestUri: "/templates/{TemplateArn}/accessControlEntries",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TemplateArn" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessControlEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccessRights: {
                                    shape: "S1y"
                                },
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                GroupDisplayName: {},
                                GroupSecurityIdentifier: {},
                                TemplateArn: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTemplates: {
            http: {
                method: "GET",
                requestUri: "/templates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConnectorArn" ],
                members: {
                    ConnectorArn: {
                        location: "querystring",
                        locationName: "ConnectorArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                ConnectorArn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Definition: {
                                    shape: "Sh"
                                },
                                Name: {},
                                ObjectIdentifier: {},
                                PolicySchema: {
                                    type: "integer"
                                },
                                Revision: {
                                    shape: "S2r"
                                },
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        },
        UpdateTemplate: {
            http: {
                method: "PATCH",
                requestUri: "/templates/{TemplateArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TemplateArn" ],
                members: {
                    Definition: {
                        shape: "Sh"
                    },
                    ReenrollAllCertificateHolders: {
                        type: "boolean"
                    },
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            }
        },
        UpdateTemplateGroupAccessControlEntry: {
            http: {
                method: "PATCH",
                requestUri: "/templates/{TemplateArn}/accessControlEntries/{GroupSecurityIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GroupSecurityIdentifier", "TemplateArn" ],
                members: {
                    AccessRights: {
                        shape: "S1y"
                    },
                    GroupDisplayName: {},
                    GroupSecurityIdentifier: {
                        location: "uri",
                        locationName: "GroupSecurityIdentifier"
                    },
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        S7: {
            type: "structure",
            required: [ "SecurityGroupIds" ],
            members: {
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                TemplateV2: {
                    type: "structure",
                    required: [ "CertificateValidity", "EnrollmentFlags", "Extensions", "GeneralFlags", "PrivateKeyAttributes", "PrivateKeyFlags", "SubjectNameFlags" ],
                    members: {
                        CertificateValidity: {
                            shape: "Sj"
                        },
                        EnrollmentFlags: {
                            type: "structure",
                            members: {
                                EnableKeyReuseOnNtTokenKeysetStorageFull: {
                                    type: "boolean"
                                },
                                IncludeSymmetricAlgorithms: {
                                    type: "boolean"
                                },
                                NoSecurityExtension: {
                                    type: "boolean"
                                },
                                RemoveInvalidCertificateFromPersonalStore: {
                                    type: "boolean"
                                },
                                UserInteractionRequired: {
                                    type: "boolean"
                                }
                            }
                        },
                        Extensions: {
                            type: "structure",
                            required: [ "KeyUsage" ],
                            members: {
                                ApplicationPolicies: {
                                    shape: "Sq"
                                },
                                KeyUsage: {
                                    shape: "Sv"
                                }
                            }
                        },
                        GeneralFlags: {
                            type: "structure",
                            members: {
                                AutoEnrollment: {
                                    type: "boolean"
                                },
                                MachineType: {
                                    type: "boolean"
                                }
                            }
                        },
                        PrivateKeyAttributes: {
                            type: "structure",
                            required: [ "KeySpec", "MinimalKeyLength" ],
                            members: {
                                CryptoProviders: {
                                    shape: "Sz"
                                },
                                KeySpec: {},
                                MinimalKeyLength: {
                                    type: "integer"
                                }
                            }
                        },
                        PrivateKeyFlags: {
                            type: "structure",
                            required: [ "ClientVersion" ],
                            members: {
                                ClientVersion: {},
                                ExportableKey: {
                                    type: "boolean"
                                },
                                StrongKeyProtectionRequired: {
                                    type: "boolean"
                                }
                            }
                        },
                        SubjectNameFlags: {
                            type: "structure",
                            members: {
                                RequireCommonName: {
                                    type: "boolean"
                                },
                                RequireDirectoryPath: {
                                    type: "boolean"
                                },
                                RequireDnsAsCn: {
                                    type: "boolean"
                                },
                                RequireEmail: {
                                    type: "boolean"
                                },
                                SanRequireDirectoryGuid: {
                                    type: "boolean"
                                },
                                SanRequireDns: {
                                    type: "boolean"
                                },
                                SanRequireDomainDns: {
                                    type: "boolean"
                                },
                                SanRequireEmail: {
                                    type: "boolean"
                                },
                                SanRequireSpn: {
                                    type: "boolean"
                                },
                                SanRequireUpn: {
                                    type: "boolean"
                                }
                            }
                        },
                        SupersededTemplates: {
                            shape: "S16"
                        }
                    }
                },
                TemplateV3: {
                    type: "structure",
                    required: [ "CertificateValidity", "EnrollmentFlags", "Extensions", "GeneralFlags", "HashAlgorithm", "PrivateKeyAttributes", "PrivateKeyFlags", "SubjectNameFlags" ],
                    members: {
                        CertificateValidity: {
                            shape: "Sj"
                        },
                        EnrollmentFlags: {
                            type: "structure",
                            members: {
                                EnableKeyReuseOnNtTokenKeysetStorageFull: {
                                    type: "boolean"
                                },
                                IncludeSymmetricAlgorithms: {
                                    type: "boolean"
                                },
                                NoSecurityExtension: {
                                    type: "boolean"
                                },
                                RemoveInvalidCertificateFromPersonalStore: {
                                    type: "boolean"
                                },
                                UserInteractionRequired: {
                                    type: "boolean"
                                }
                            }
                        },
                        Extensions: {
                            type: "structure",
                            required: [ "KeyUsage" ],
                            members: {
                                ApplicationPolicies: {
                                    shape: "Sq"
                                },
                                KeyUsage: {
                                    shape: "Sv"
                                }
                            }
                        },
                        GeneralFlags: {
                            type: "structure",
                            members: {
                                AutoEnrollment: {
                                    type: "boolean"
                                },
                                MachineType: {
                                    type: "boolean"
                                }
                            }
                        },
                        HashAlgorithm: {},
                        PrivateKeyAttributes: {
                            type: "structure",
                            required: [ "Algorithm", "KeySpec", "KeyUsageProperty", "MinimalKeyLength" ],
                            members: {
                                Algorithm: {},
                                CryptoProviders: {
                                    shape: "Sz"
                                },
                                KeySpec: {},
                                KeyUsageProperty: {
                                    shape: "S1f"
                                },
                                MinimalKeyLength: {
                                    type: "integer"
                                }
                            }
                        },
                        PrivateKeyFlags: {
                            type: "structure",
                            required: [ "ClientVersion" ],
                            members: {
                                ClientVersion: {},
                                ExportableKey: {
                                    type: "boolean"
                                },
                                RequireAlternateSignatureAlgorithm: {
                                    type: "boolean"
                                },
                                StrongKeyProtectionRequired: {
                                    type: "boolean"
                                }
                            }
                        },
                        SubjectNameFlags: {
                            type: "structure",
                            members: {
                                RequireCommonName: {
                                    type: "boolean"
                                },
                                RequireDirectoryPath: {
                                    type: "boolean"
                                },
                                RequireDnsAsCn: {
                                    type: "boolean"
                                },
                                RequireEmail: {
                                    type: "boolean"
                                },
                                SanRequireDirectoryGuid: {
                                    type: "boolean"
                                },
                                SanRequireDns: {
                                    type: "boolean"
                                },
                                SanRequireDomainDns: {
                                    type: "boolean"
                                },
                                SanRequireEmail: {
                                    type: "boolean"
                                },
                                SanRequireSpn: {
                                    type: "boolean"
                                },
                                SanRequireUpn: {
                                    type: "boolean"
                                }
                            }
                        },
                        SupersededTemplates: {
                            shape: "S16"
                        }
                    }
                },
                TemplateV4: {
                    type: "structure",
                    required: [ "CertificateValidity", "EnrollmentFlags", "Extensions", "GeneralFlags", "PrivateKeyAttributes", "PrivateKeyFlags", "SubjectNameFlags" ],
                    members: {
                        CertificateValidity: {
                            shape: "Sj"
                        },
                        EnrollmentFlags: {
                            type: "structure",
                            members: {
                                EnableKeyReuseOnNtTokenKeysetStorageFull: {
                                    type: "boolean"
                                },
                                IncludeSymmetricAlgorithms: {
                                    type: "boolean"
                                },
                                NoSecurityExtension: {
                                    type: "boolean"
                                },
                                RemoveInvalidCertificateFromPersonalStore: {
                                    type: "boolean"
                                },
                                UserInteractionRequired: {
                                    type: "boolean"
                                }
                            }
                        },
                        Extensions: {
                            type: "structure",
                            required: [ "KeyUsage" ],
                            members: {
                                ApplicationPolicies: {
                                    shape: "Sq"
                                },
                                KeyUsage: {
                                    shape: "Sv"
                                }
                            }
                        },
                        GeneralFlags: {
                            type: "structure",
                            members: {
                                AutoEnrollment: {
                                    type: "boolean"
                                },
                                MachineType: {
                                    type: "boolean"
                                }
                            }
                        },
                        HashAlgorithm: {},
                        PrivateKeyAttributes: {
                            type: "structure",
                            required: [ "KeySpec", "MinimalKeyLength" ],
                            members: {
                                Algorithm: {},
                                CryptoProviders: {
                                    shape: "Sz"
                                },
                                KeySpec: {},
                                KeyUsageProperty: {
                                    shape: "S1f"
                                },
                                MinimalKeyLength: {
                                    type: "integer"
                                }
                            }
                        },
                        PrivateKeyFlags: {
                            type: "structure",
                            required: [ "ClientVersion" ],
                            members: {
                                ClientVersion: {},
                                ExportableKey: {
                                    type: "boolean"
                                },
                                RequireAlternateSignatureAlgorithm: {
                                    type: "boolean"
                                },
                                RequireSameKeyRenewal: {
                                    type: "boolean"
                                },
                                StrongKeyProtectionRequired: {
                                    type: "boolean"
                                },
                                UseLegacyProvider: {
                                    type: "boolean"
                                }
                            }
                        },
                        SubjectNameFlags: {
                            type: "structure",
                            members: {
                                RequireCommonName: {
                                    type: "boolean"
                                },
                                RequireDirectoryPath: {
                                    type: "boolean"
                                },
                                RequireDnsAsCn: {
                                    type: "boolean"
                                },
                                RequireEmail: {
                                    type: "boolean"
                                },
                                SanRequireDirectoryGuid: {
                                    type: "boolean"
                                },
                                SanRequireDns: {
                                    type: "boolean"
                                },
                                SanRequireDomainDns: {
                                    type: "boolean"
                                },
                                SanRequireEmail: {
                                    type: "boolean"
                                },
                                SanRequireSpn: {
                                    type: "boolean"
                                },
                                SanRequireUpn: {
                                    type: "boolean"
                                }
                            }
                        },
                        SupersededTemplates: {
                            shape: "S16"
                        }
                    }
                }
            },
            union: true
        },
        Sj: {
            type: "structure",
            required: [ "RenewalPeriod", "ValidityPeriod" ],
            members: {
                RenewalPeriod: {
                    shape: "Sk"
                },
                ValidityPeriod: {
                    shape: "Sk"
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "Period", "PeriodType" ],
            members: {
                Period: {
                    type: "long"
                },
                PeriodType: {}
            }
        },
        Sq: {
            type: "structure",
            required: [ "Policies" ],
            members: {
                Critical: {
                    type: "boolean"
                },
                Policies: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PolicyObjectIdentifier: {},
                            PolicyType: {}
                        },
                        union: true
                    }
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "UsageFlags" ],
            members: {
                Critical: {
                    type: "boolean"
                },
                UsageFlags: {
                    type: "structure",
                    members: {
                        DataEncipherment: {
                            type: "boolean"
                        },
                        DigitalSignature: {
                            type: "boolean"
                        },
                        KeyAgreement: {
                            type: "boolean"
                        },
                        KeyEncipherment: {
                            type: "boolean"
                        },
                        NonRepudiation: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S16: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "structure",
            members: {
                PropertyFlags: {
                    type: "structure",
                    members: {
                        Decrypt: {
                            type: "boolean"
                        },
                        KeyAgreement: {
                            type: "boolean"
                        },
                        Sign: {
                            type: "boolean"
                        }
                    }
                },
                PropertyType: {}
            },
            union: true
        },
        S1y: {
            type: "structure",
            members: {
                AutoEnroll: {},
                Enroll: {}
            }
        },
        S2r: {
            type: "structure",
            required: [ "MajorRevision", "MinorRevision" ],
            members: {
                MajorRevision: {
                    type: "integer"
                },
                MinorRevision: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListConnectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Connectors"
        },
        ListDirectoryRegistrations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DirectoryRegistrations"
        },
        ListServicePrincipalNames: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ServicePrincipalNames"
        },
        ListTemplateGroupAccessControlEntries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccessControlEntries"
        },
        ListTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Templates"
        }
    }
};

AWS.apiLoader.services["bedrock"] = {};

AWS.Bedrock = AWS.Service.defineService("bedrock", [ "2023-04-20" ]);

AWS.apiLoader.services["bedrock"]["2023-04-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-04-20",
        endpointPrefix: "bedrock",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Bedrock",
        serviceId: "Bedrock",
        signatureVersion: "v4",
        signingName: "bedrock",
        uid: "bedrock-2023-04-20"
    },
    operations: {
        CreateModelCustomizationJob: {
            http: {
                requestUri: "/model-customization-jobs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "jobName", "customModelName", "roleArn", "baseModelIdentifier", "trainingDataConfig", "outputDataConfig", "hyperParameters" ],
                members: {
                    jobName: {},
                    customModelName: {},
                    roleArn: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    baseModelIdentifier: {},
                    customizationType: {},
                    customModelKmsKeyId: {},
                    jobTags: {
                        shape: "S9"
                    },
                    customModelTags: {
                        shape: "S9"
                    },
                    trainingDataConfig: {
                        shape: "Sd"
                    },
                    validationDataConfig: {
                        shape: "Sf"
                    },
                    outputDataConfig: {
                        shape: "Si"
                    },
                    hyperParameters: {
                        shape: "Sj"
                    },
                    vpcConfig: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobArn" ],
                members: {
                    jobArn: {}
                }
            },
            idempotent: true
        },
        CreateProvisionedModelThroughput: {
            http: {
                requestUri: "/provisioned-model-throughput",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "modelUnits", "provisionedModelName", "modelId" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    modelUnits: {
                        type: "integer"
                    },
                    provisionedModelName: {},
                    modelId: {},
                    commitmentDuration: {},
                    tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "provisionedModelArn" ],
                members: {
                    provisionedModelArn: {}
                }
            },
            idempotent: true
        },
        DeleteCustomModel: {
            http: {
                method: "DELETE",
                requestUri: "/custom-models/{modelIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "modelIdentifier" ],
                members: {
                    modelIdentifier: {
                        location: "uri",
                        locationName: "modelIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteModelInvocationLoggingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/logging/modelinvocations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteProvisionedModelThroughput: {
            http: {
                method: "DELETE",
                requestUri: "/provisioned-model-throughput/{provisionedModelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "provisionedModelId" ],
                members: {
                    provisionedModelId: {
                        location: "uri",
                        locationName: "provisionedModelId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetCustomModel: {
            http: {
                method: "GET",
                requestUri: "/custom-models/{modelIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "modelIdentifier" ],
                members: {
                    modelIdentifier: {
                        location: "uri",
                        locationName: "modelIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "modelArn", "modelName", "jobArn", "baseModelArn", "trainingDataConfig", "outputDataConfig", "creationTime" ],
                members: {
                    modelArn: {},
                    modelName: {},
                    jobName: {},
                    jobArn: {},
                    baseModelArn: {},
                    customizationType: {},
                    modelKmsKeyArn: {},
                    hyperParameters: {
                        shape: "Sj"
                    },
                    trainingDataConfig: {
                        shape: "Sd"
                    },
                    validationDataConfig: {
                        shape: "Sf"
                    },
                    outputDataConfig: {
                        shape: "Si"
                    },
                    trainingMetrics: {
                        shape: "S1a"
                    },
                    validationMetrics: {
                        shape: "S1c"
                    },
                    creationTime: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetFoundationModel: {
            http: {
                method: "GET",
                requestUri: "/foundation-models/{modelIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "modelIdentifier" ],
                members: {
                    modelIdentifier: {
                        location: "uri",
                        locationName: "modelIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelDetails: {
                        type: "structure",
                        required: [ "modelArn", "modelId" ],
                        members: {
                            modelArn: {},
                            modelId: {},
                            modelName: {},
                            providerName: {},
                            inputModalities: {
                                shape: "S1l"
                            },
                            outputModalities: {
                                shape: "S1l"
                            },
                            responseStreamingSupported: {
                                type: "boolean"
                            },
                            customizationsSupported: {
                                shape: "S1o"
                            },
                            inferenceTypesSupported: {
                                shape: "S1q"
                            },
                            modelLifecycle: {
                                shape: "S1s"
                            }
                        }
                    }
                }
            }
        },
        GetModelCustomizationJob: {
            http: {
                method: "GET",
                requestUri: "/model-customization-jobs/{jobIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobIdentifier" ],
                members: {
                    jobIdentifier: {
                        location: "uri",
                        locationName: "jobIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobArn", "jobName", "outputModelName", "roleArn", "creationTime", "baseModelArn", "hyperParameters", "trainingDataConfig", "validationDataConfig", "outputDataConfig" ],
                members: {
                    jobArn: {},
                    jobName: {},
                    outputModelName: {},
                    outputModelArn: {},
                    clientRequestToken: {},
                    roleArn: {},
                    status: {},
                    failureMessage: {},
                    creationTime: {
                        shape: "S1e"
                    },
                    lastModifiedTime: {
                        shape: "S1e"
                    },
                    endTime: {
                        shape: "S1e"
                    },
                    baseModelArn: {},
                    hyperParameters: {
                        shape: "Sj"
                    },
                    trainingDataConfig: {
                        shape: "Sd"
                    },
                    validationDataConfig: {
                        shape: "Sf"
                    },
                    outputDataConfig: {
                        shape: "Si"
                    },
                    customizationType: {},
                    outputModelKmsKeyArn: {},
                    trainingMetrics: {
                        shape: "S1a"
                    },
                    validationMetrics: {
                        shape: "S1c"
                    },
                    vpcConfig: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetModelInvocationLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/logging/modelinvocations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    loggingConfig: {
                        shape: "S22"
                    }
                }
            }
        },
        GetProvisionedModelThroughput: {
            http: {
                method: "GET",
                requestUri: "/provisioned-model-throughput/{provisionedModelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "provisionedModelId" ],
                members: {
                    provisionedModelId: {
                        location: "uri",
                        locationName: "provisionedModelId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "modelUnits", "desiredModelUnits", "provisionedModelName", "provisionedModelArn", "modelArn", "desiredModelArn", "foundationModelArn", "status", "creationTime", "lastModifiedTime" ],
                members: {
                    modelUnits: {
                        type: "integer"
                    },
                    desiredModelUnits: {
                        type: "integer"
                    },
                    provisionedModelName: {},
                    provisionedModelArn: {},
                    modelArn: {},
                    desiredModelArn: {},
                    foundationModelArn: {},
                    status: {},
                    creationTime: {
                        shape: "S1e"
                    },
                    lastModifiedTime: {
                        shape: "S1e"
                    },
                    failureMessage: {},
                    commitmentDuration: {},
                    commitmentExpirationTime: {
                        shape: "S1e"
                    }
                }
            }
        },
        ListCustomModels: {
            http: {
                method: "GET",
                requestUri: "/custom-models",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    creationTimeBefore: {
                        shape: "S1e",
                        location: "querystring",
                        locationName: "creationTimeBefore"
                    },
                    creationTimeAfter: {
                        shape: "S1e",
                        location: "querystring",
                        locationName: "creationTimeAfter"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    },
                    baseModelArnEquals: {
                        location: "querystring",
                        locationName: "baseModelArnEquals"
                    },
                    foundationModelArnEquals: {
                        location: "querystring",
                        locationName: "foundationModelArnEquals"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    modelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "modelArn", "modelName", "creationTime", "baseModelArn", "baseModelName" ],
                            members: {
                                modelArn: {},
                                modelName: {},
                                creationTime: {
                                    shape: "S1e"
                                },
                                baseModelArn: {},
                                baseModelName: {},
                                customizationType: {}
                            }
                        }
                    }
                }
            }
        },
        ListFoundationModels: {
            http: {
                method: "GET",
                requestUri: "/foundation-models",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    byProvider: {
                        location: "querystring",
                        locationName: "byProvider"
                    },
                    byCustomizationType: {
                        location: "querystring",
                        locationName: "byCustomizationType"
                    },
                    byOutputModality: {
                        location: "querystring",
                        locationName: "byOutputModality"
                    },
                    byInferenceType: {
                        location: "querystring",
                        locationName: "byInferenceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "modelArn", "modelId" ],
                            members: {
                                modelArn: {},
                                modelId: {},
                                modelName: {},
                                providerName: {},
                                inputModalities: {
                                    shape: "S1l"
                                },
                                outputModalities: {
                                    shape: "S1l"
                                },
                                responseStreamingSupported: {
                                    type: "boolean"
                                },
                                customizationsSupported: {
                                    shape: "S1o"
                                },
                                inferenceTypesSupported: {
                                    shape: "S1q"
                                },
                                modelLifecycle: {
                                    shape: "S1s"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListModelCustomizationJobs: {
            http: {
                method: "GET",
                requestUri: "/model-customization-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    creationTimeAfter: {
                        shape: "S1e",
                        location: "querystring",
                        locationName: "creationTimeAfter"
                    },
                    creationTimeBefore: {
                        shape: "S1e",
                        location: "querystring",
                        locationName: "creationTimeBefore"
                    },
                    statusEquals: {
                        location: "querystring",
                        locationName: "statusEquals"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    modelCustomizationJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobArn", "baseModelArn", "jobName", "status", "creationTime" ],
                            members: {
                                jobArn: {},
                                baseModelArn: {},
                                jobName: {},
                                status: {},
                                lastModifiedTime: {
                                    shape: "S1e"
                                },
                                creationTime: {
                                    shape: "S1e"
                                },
                                endTime: {
                                    shape: "S1e"
                                },
                                customModelArn: {},
                                customModelName: {},
                                customizationType: {}
                            }
                        }
                    }
                }
            }
        },
        ListProvisionedModelThroughputs: {
            http: {
                method: "GET",
                requestUri: "/provisioned-model-throughputs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    creationTimeAfter: {
                        shape: "S1e",
                        location: "querystring",
                        locationName: "creationTimeAfter"
                    },
                    creationTimeBefore: {
                        shape: "S1e",
                        location: "querystring",
                        locationName: "creationTimeBefore"
                    },
                    statusEquals: {
                        location: "querystring",
                        locationName: "statusEquals"
                    },
                    modelArnEquals: {
                        location: "querystring",
                        locationName: "modelArnEquals"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    provisionedModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "provisionedModelName", "provisionedModelArn", "modelArn", "desiredModelArn", "foundationModelArn", "modelUnits", "desiredModelUnits", "status", "creationTime", "lastModifiedTime" ],
                            members: {
                                provisionedModelName: {},
                                provisionedModelArn: {},
                                modelArn: {},
                                desiredModelArn: {},
                                foundationModelArn: {},
                                modelUnits: {
                                    type: "integer"
                                },
                                desiredModelUnits: {
                                    type: "integer"
                                },
                                status: {},
                                commitmentDuration: {},
                                commitmentExpirationTime: {
                                    shape: "S1e"
                                },
                                creationTime: {
                                    shape: "S1e"
                                },
                                lastModifiedTime: {
                                    shape: "S1e"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/listTagsForResource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    resourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S9"
                    }
                }
            }
        },
        PutModelInvocationLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/logging/modelinvocations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "loggingConfig" ],
                members: {
                    loggingConfig: {
                        shape: "S22"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StopModelCustomizationJob: {
            http: {
                requestUri: "/model-customization-jobs/{jobIdentifier}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobIdentifier" ],
                members: {
                    jobIdentifier: {
                        location: "uri",
                        locationName: "jobIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tagResource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {},
                    tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/untagResource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateProvisionedModelThroughput: {
            http: {
                method: "PATCH",
                requestUri: "/provisioned-model-throughput/{provisionedModelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "provisionedModelId" ],
                members: {
                    provisionedModelId: {
                        location: "uri",
                        locationName: "provisionedModelId"
                    },
                    desiredProvisionedModelName: {},
                    desiredModelId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sd: {
            type: "structure",
            required: [ "s3Uri" ],
            members: {
                s3Uri: {}
            }
        },
        Sf: {
            type: "structure",
            required: [ "validators" ],
            members: {
                validators: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "s3Uri" ],
                        members: {
                            s3Uri: {}
                        }
                    }
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "s3Uri" ],
            members: {
                s3Uri: {}
            }
        },
        Sj: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "structure",
            required: [ "subnetIds", "securityGroupIds" ],
            members: {
                subnetIds: {
                    type: "list",
                    member: {}
                },
                securityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                trainingLoss: {
                    type: "float"
                }
            }
        },
        S1c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    validationLoss: {
                        type: "float"
                    }
                }
            }
        },
        S1e: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1l: {
            type: "list",
            member: {}
        },
        S1o: {
            type: "list",
            member: {}
        },
        S1q: {
            type: "list",
            member: {}
        },
        S1s: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        },
        S22: {
            type: "structure",
            members: {
                cloudWatchConfig: {
                    type: "structure",
                    required: [ "logGroupName", "roleArn" ],
                    members: {
                        logGroupName: {},
                        roleArn: {},
                        largeDataDeliveryS3Config: {
                            shape: "S25"
                        }
                    }
                },
                s3Config: {
                    shape: "S25"
                },
                textDataDeliveryEnabled: {
                    type: "boolean"
                },
                imageDataDeliveryEnabled: {
                    type: "boolean"
                },
                embeddingDataDeliveryEnabled: {
                    type: "boolean"
                }
            }
        },
        S25: {
            type: "structure",
            required: [ "bucketName" ],
            members: {
                bucketName: {},
                keyPrefix: {}
            }
        }
    },
    paginators: {
        ListCustomModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "modelSummaries"
        },
        ListModelCustomizationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "modelCustomizationJobSummaries"
        },
        ListProvisionedModelThroughputs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "provisionedModelSummaries"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["bedrockruntime"] = {};

AWS.BedrockRuntime = AWS.Service.defineService("bedrockruntime", [ "2023-09-30" ]);

AWS.apiLoader.services["bedrockruntime"]["2023-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-09-30",
        endpointPrefix: "bedrock-runtime",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Bedrock Runtime",
        serviceId: "Bedrock Runtime",
        signatureVersion: "v4",
        signingName: "bedrock",
        uid: "bedrock-runtime-2023-09-30"
    },
    operations: {
        InvokeModel: {
            http: {
                requestUri: "/model/{modelId}/invoke",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "body", "modelId" ],
                members: {
                    body: {
                        shape: "S2"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    modelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                payload: "body"
            },
            output: {
                type: "structure",
                required: [ "body", "contentType" ],
                members: {
                    body: {
                        shape: "S2"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "body"
            }
        },
        InvokeModelWithResponseStream: {
            http: {
                requestUri: "/model/{modelId}/invoke-with-response-stream",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "body", "modelId" ],
                members: {
                    body: {
                        shape: "S2"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    accept: {
                        location: "header",
                        locationName: "X-Amzn-Bedrock-Accept"
                    },
                    modelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                payload: "body"
            },
            output: {
                type: "structure",
                required: [ "body", "contentType" ],
                members: {
                    body: {
                        type: "structure",
                        members: {
                            chunk: {
                                type: "structure",
                                members: {
                                    bytes: {
                                        type: "blob",
                                        sensitive: true
                                    }
                                },
                                event: true,
                                sensitive: true
                            },
                            internalServerException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 500
                                },
                                exception: true,
                                fault: true
                            },
                            modelStreamErrorException: {
                                type: "structure",
                                members: {
                                    message: {},
                                    originalStatusCode: {
                                        type: "integer"
                                    },
                                    originalMessage: {}
                                },
                                error: {
                                    httpStatusCode: 424,
                                    senderFault: true
                                },
                                exception: true
                            },
                            validationException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 400,
                                    senderFault: true
                                },
                                exception: true
                            },
                            throttlingException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 429,
                                    senderFault: true
                                },
                                exception: true
                            },
                            modelTimeoutException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 408,
                                    senderFault: true
                                },
                                exception: true
                            }
                        },
                        eventstream: true
                    },
                    contentType: {
                        location: "header",
                        locationName: "X-Amzn-Bedrock-Content-Type"
                    }
                },
                payload: "body"
            }
        }
    },
    shapes: {
        S2: {
            type: "blob",
            sensitive: true
        }
    },
    paginators: {},
    waiters: {}
};

AWS.apiLoader.services["datazone"] = {};

AWS.DataZone = AWS.Service.defineService("datazone", [ "2018-05-10" ]);

AWS.apiLoader.services["datazone"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "datazone",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon DataZone",
        serviceId: "DataZone",
        signatureVersion: "v4",
        signingName: "datazone",
        uid: "datazone-2018-05-10"
    },
    operations: {
        AcceptPredictions: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/assets/{identifier}/accept-predictions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    acceptChoices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                predictionChoice: {
                                    type: "integer"
                                },
                                predictionTarget: {}
                            }
                        }
                    },
                    acceptRule: {
                        type: "structure",
                        members: {
                            rule: {},
                            threshold: {
                                type: "float"
                            }
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    revision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "domainId", "revision" ],
                members: {
                    assetId: {},
                    domainId: {},
                    revision: {}
                }
            },
            idempotent: true
        },
        AcceptSubscriptionRequest: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/accept",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    decisionComment: {
                        shape: "Sg"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "requestReason", "status", "subscribedListings", "subscribedPrincipals", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    decisionComment: {
                        shape: "Sg"
                    },
                    domainId: {},
                    id: {},
                    requestReason: {
                        shape: "Sl"
                    },
                    reviewerId: {},
                    status: {},
                    subscribedListings: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    subscribedPrincipals: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            },
            idempotent: true
        },
        CancelSubscription: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "status", "subscribedListing", "subscribedPrincipal", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    id: {},
                    retainPermissions: {
                        type: "boolean"
                    },
                    status: {},
                    subscribedListing: {
                        shape: "So"
                    },
                    subscribedPrincipal: {
                        shape: "S12"
                    },
                    subscriptionRequestId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            },
            idempotent: true
        },
        CreateAsset: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/assets",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "name", "owningProjectIdentifier", "typeIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    externalIdentifier: {
                        shape: "S1d"
                    },
                    formsInput: {
                        shape: "S1e"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    name: {
                        shape: "S1l"
                    },
                    owningProjectIdentifier: {},
                    predictionConfiguration: {
                        shape: "S1m"
                    },
                    typeIdentifier: {},
                    typeRevision: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "formsOutput", "id", "name", "owningProjectId", "revision", "typeIdentifier", "typeRevision" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    externalIdentifier: {
                        shape: "S1d"
                    },
                    firstRevisionCreatedAt: {
                        type: "timestamp"
                    },
                    firstRevisionCreatedBy: {},
                    formsOutput: {
                        shape: "S1q"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    listing: {
                        shape: "S1t"
                    },
                    name: {
                        shape: "S1l"
                    },
                    owningProjectId: {},
                    predictionConfiguration: {
                        shape: "S1m"
                    },
                    readOnlyFormsOutput: {
                        shape: "S1q"
                    },
                    revision: {},
                    typeIdentifier: {},
                    typeRevision: {}
                }
            },
            idempotent: true
        },
        CreateAssetRevision: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    formsInput: {
                        shape: "S1e"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    name: {
                        shape: "S1l"
                    },
                    predictionConfiguration: {
                        shape: "S1m"
                    },
                    typeRevision: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "formsOutput", "id", "name", "owningProjectId", "revision", "typeIdentifier", "typeRevision" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    externalIdentifier: {
                        shape: "S1d"
                    },
                    firstRevisionCreatedAt: {
                        type: "timestamp"
                    },
                    firstRevisionCreatedBy: {},
                    formsOutput: {
                        shape: "S1q"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    listing: {
                        shape: "S1t"
                    },
                    name: {
                        shape: "S1l"
                    },
                    owningProjectId: {},
                    predictionConfiguration: {
                        shape: "S1m"
                    },
                    readOnlyFormsOutput: {
                        shape: "S1q"
                    },
                    revision: {},
                    typeIdentifier: {},
                    typeRevision: {}
                }
            },
            idempotent: true
        },
        CreateAssetType: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/asset-types",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "formsInput", "name", "owningProjectIdentifier" ],
                members: {
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    formsInput: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "typeIdentifier", "typeRevision" ],
                            members: {
                                required: {
                                    type: "boolean"
                                },
                                typeIdentifier: {},
                                typeRevision: {}
                            }
                        }
                    },
                    name: {},
                    owningProjectIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "formsOutput", "name", "revision" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    formsOutput: {
                        shape: "S21"
                    },
                    name: {},
                    originDomainId: {},
                    originProjectId: {},
                    owningProjectId: {},
                    revision: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        CreateDataSource: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/data-sources",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentIdentifier", "name", "projectIdentifier", "type" ],
                members: {
                    assetFormsInput: {
                        shape: "S1e"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    configuration: {
                        shape: "S24"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    enableSetting: {},
                    environmentIdentifier: {},
                    name: {
                        shape: "S2p"
                    },
                    projectIdentifier: {},
                    publishOnImport: {
                        type: "boolean"
                    },
                    recommendation: {
                        shape: "S2q"
                    },
                    schedule: {
                        shape: "S2r"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "environmentId", "id", "name", "projectId" ],
                members: {
                    assetFormsOutput: {
                        shape: "S1q"
                    },
                    configuration: {
                        shape: "S2w"
                    },
                    createdAt: {
                        shape: "S35"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    enableSetting: {},
                    environmentId: {},
                    errorMessage: {
                        shape: "S37"
                    },
                    id: {},
                    lastRunAt: {
                        shape: "S35"
                    },
                    lastRunErrorMessage: {
                        shape: "S37"
                    },
                    lastRunStatus: {},
                    name: {
                        shape: "S2p"
                    },
                    projectId: {},
                    publishOnImport: {
                        type: "boolean"
                    },
                    recommendation: {
                        shape: "S2q"
                    },
                    schedule: {
                        shape: "S2r"
                    },
                    status: {},
                    type: {},
                    updatedAt: {
                        shape: "S35"
                    }
                }
            },
            idempotent: true
        },
        CreateDomain: {
            http: {
                requestUri: "/v2/domains",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainExecutionRole", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    domainExecutionRole: {},
                    kmsKeyIdentifier: {},
                    name: {},
                    singleSignOn: {
                        shape: "S3f"
                    },
                    tags: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id" ],
                members: {
                    arn: {},
                    description: {},
                    domainExecutionRole: {},
                    id: {},
                    kmsKeyIdentifier: {},
                    name: {},
                    portalUrl: {},
                    singleSignOn: {
                        shape: "S3f"
                    },
                    status: {},
                    tags: {
                        shape: "S3i"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironment: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/environments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentProfileIdentifier", "name", "projectIdentifier" ],
                members: {
                    description: {},
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentProfileIdentifier: {},
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    name: {},
                    projectIdentifier: {},
                    userParameters: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "environmentProfileId", "name", "projectId", "provider" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    deploymentProperties: {
                        shape: "S3v"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    environmentActions: {
                        shape: "S3y"
                    },
                    environmentBlueprintId: {},
                    environmentProfileId: {},
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    lastDeployment: {
                        shape: "S44"
                    },
                    name: {
                        shape: "S4a"
                    },
                    projectId: {},
                    provider: {},
                    provisionedResources: {
                        shape: "S4b"
                    },
                    provisioningProperties: {
                        shape: "S4d"
                    },
                    status: {},
                    updatedAt: {
                        shape: "S3u"
                    },
                    userParameters: {
                        shape: "S4g"
                    }
                }
            }
        },
        CreateEnvironmentProfile: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/environment-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentBlueprintIdentifier", "name", "projectIdentifier" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentBlueprintIdentifier: {},
                    name: {
                        shape: "S4k"
                    },
                    projectIdentifier: {},
                    userParameters: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "environmentBlueprintId", "id", "name" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    environmentBlueprintId: {},
                    id: {},
                    name: {
                        shape: "S4k"
                    },
                    projectId: {},
                    updatedAt: {
                        shape: "S3u"
                    },
                    userParameters: {
                        shape: "S4g"
                    }
                }
            }
        },
        CreateFormType: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/form-types",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "model", "name", "owningProjectIdentifier" ],
                members: {
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    model: {
                        shape: "S4n"
                    },
                    name: {
                        shape: "S1s"
                    },
                    owningProjectIdentifier: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "name", "revision" ],
                members: {
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    name: {
                        shape: "S1s"
                    },
                    originDomainId: {},
                    originProjectId: {},
                    owningProjectId: {},
                    revision: {}
                }
            }
        },
        CreateGlossary: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/glossaries",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "name", "owningProjectIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "S4s"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    name: {
                        shape: "S4t"
                    },
                    owningProjectIdentifier: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "id", "name", "owningProjectId" ],
                members: {
                    description: {
                        shape: "S4s"
                    },
                    domainId: {},
                    id: {},
                    name: {
                        shape: "S4t"
                    },
                    owningProjectId: {},
                    status: {}
                }
            },
            idempotent: true
        },
        CreateGlossaryTerm: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/glossary-terms",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "glossaryIdentifier", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    glossaryIdentifier: {},
                    longDescription: {
                        shape: "S4y"
                    },
                    name: {
                        shape: "Sx"
                    },
                    shortDescription: {
                        shape: "Sy"
                    },
                    status: {},
                    termRelations: {
                        shape: "S50"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "glossaryId", "id", "name", "status" ],
                members: {
                    domainId: {},
                    glossaryId: {},
                    id: {},
                    longDescription: {
                        shape: "S4y"
                    },
                    name: {
                        shape: "Sx"
                    },
                    shortDescription: {
                        shape: "Sy"
                    },
                    status: {},
                    termRelations: {
                        shape: "S50"
                    }
                }
            },
            idempotent: true
        },
        CreateGroupProfile: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/group-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "groupIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    groupIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domainId: {},
                    groupName: {
                        shape: "S57"
                    },
                    id: {},
                    status: {}
                }
            },
            idempotent: true
        },
        CreateListingChangeSet: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/listings/change-set",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "action", "domainIdentifier", "entityIdentifier", "entityType" ],
                members: {
                    action: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    entityIdentifier: {},
                    entityRevision: {},
                    entityType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "listingId", "listingRevision", "status" ],
                members: {
                    listingId: {},
                    listingRevision: {},
                    status: {}
                }
            }
        },
        CreateProject: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/projects",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "name" ],
                members: {
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    name: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "id", "name" ],
                members: {
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    lastUpdatedAt: {
                        shape: "S3u"
                    },
                    name: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateProjectMembership: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/createMembership",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "designation", "domainIdentifier", "member", "projectIdentifier" ],
                members: {
                    designation: {},
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    member: {
                        shape: "S5j"
                    },
                    projectIdentifier: {
                        location: "uri",
                        locationName: "projectIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateSubscriptionGrant: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/subscription-grants",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentIdentifier", "grantedEntity", "subscriptionTargetIdentifier" ],
                members: {
                    assetTargetNames: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assetId", "targetName" ],
                            members: {
                                assetId: {},
                                targetName: {}
                            }
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentIdentifier: {},
                    grantedEntity: {
                        type: "structure",
                        members: {
                            listing: {
                                type: "structure",
                                required: [ "identifier", "revision" ],
                                members: {
                                    identifier: {},
                                    revision: {}
                                }
                            }
                        },
                        union: true
                    },
                    subscriptionTargetIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "grantedEntity", "id", "status", "subscriptionTargetId", "updatedAt" ],
                members: {
                    assets: {
                        shape: "S5s"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    grantedEntity: {
                        shape: "S5x"
                    },
                    id: {},
                    status: {},
                    subscriptionId: {},
                    subscriptionTargetId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        CreateSubscriptionRequest: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/subscription-requests",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "requestReason", "subscribedListings", "subscribedPrincipals" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    requestReason: {
                        shape: "Sl"
                    },
                    subscribedListings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "identifier" ],
                            members: {
                                identifier: {}
                            }
                        }
                    },
                    subscribedPrincipals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                project: {
                                    type: "structure",
                                    members: {
                                        identifier: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "requestReason", "status", "subscribedListings", "subscribedPrincipals", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    decisionComment: {
                        shape: "Sg"
                    },
                    domainId: {},
                    id: {},
                    requestReason: {
                        shape: "Sl"
                    },
                    reviewerId: {},
                    status: {},
                    subscribedListings: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    subscribedPrincipals: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        CreateSubscriptionTarget: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicableAssetTypes", "authorizedPrincipals", "domainIdentifier", "environmentIdentifier", "manageAccessRole", "name", "subscriptionTargetConfig", "type" ],
                members: {
                    applicableAssetTypes: {
                        shape: "S6b"
                    },
                    authorizedPrincipals: {
                        shape: "S6c"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentIdentifier: {
                        location: "uri",
                        locationName: "environmentIdentifier"
                    },
                    manageAccessRole: {},
                    name: {
                        shape: "S6e"
                    },
                    provider: {},
                    subscriptionTargetConfig: {
                        shape: "S6f"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "applicableAssetTypes", "authorizedPrincipals", "createdAt", "createdBy", "domainId", "environmentId", "id", "manageAccessRole", "name", "projectId", "provider", "subscriptionTargetConfig", "type" ],
                members: {
                    applicableAssetTypes: {
                        shape: "S6b"
                    },
                    authorizedPrincipals: {
                        shape: "S6c"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    environmentId: {},
                    id: {},
                    manageAccessRole: {},
                    name: {
                        shape: "S6e"
                    },
                    projectId: {},
                    provider: {},
                    subscriptionTargetConfig: {
                        shape: "S6f"
                    },
                    type: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        CreateUserProfile: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/user-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "userIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    userIdentifier: {},
                    userType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S6m"
                    },
                    domainId: {},
                    id: {},
                    status: {},
                    type: {}
                }
            },
            idempotent: true
        },
        DeleteAsset: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/assets/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAssetType: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/asset-types/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/data-sources/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "environmentId", "id", "name", "projectId" ],
                members: {
                    assetFormsOutput: {
                        shape: "S1q"
                    },
                    configuration: {
                        shape: "S2w"
                    },
                    createdAt: {
                        shape: "S35"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    enableSetting: {},
                    environmentId: {},
                    errorMessage: {
                        shape: "S37"
                    },
                    id: {},
                    lastRunAt: {
                        shape: "S35"
                    },
                    lastRunErrorMessage: {
                        shape: "S37"
                    },
                    lastRunStatus: {},
                    name: {
                        shape: "S2p"
                    },
                    projectId: {},
                    publishOnImport: {
                        type: "boolean"
                    },
                    schedule: {
                        shape: "S2r"
                    },
                    status: {},
                    type: {},
                    updatedAt: {
                        shape: "S35"
                    }
                }
            },
            idempotent: true
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{identifier}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {}
                }
            },
            idempotent: true
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/environments/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironmentBlueprintConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentBlueprintIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentBlueprintIdentifier: {
                        location: "uri",
                        locationName: "environmentBlueprintIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteEnvironmentProfile: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            idempotent: true
        },
        DeleteFormType: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "formTypeIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    formTypeIdentifier: {
                        location: "uri",
                        locationName: "formTypeIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteGlossary: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/glossaries/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteGlossaryTerm: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteListing: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/listings/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/projects/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteProjectMembership: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/deleteMembership",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "member", "projectIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    member: {
                        shape: "S5j"
                    },
                    projectIdentifier: {
                        location: "uri",
                        locationName: "projectIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSubscriptionGrant: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "grantedEntity", "id", "status", "subscriptionTargetId", "updatedAt" ],
                members: {
                    assets: {
                        shape: "S5s"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    grantedEntity: {
                        shape: "S5x"
                    },
                    id: {},
                    status: {},
                    subscriptionId: {},
                    subscriptionTargetId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        DeleteSubscriptionRequest: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            }
        },
        DeleteSubscriptionTarget: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentIdentifier: {
                        location: "uri",
                        locationName: "environmentIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            }
        },
        GetAsset: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/assets/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    revision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "formsOutput", "id", "name", "owningProjectId", "revision", "typeIdentifier", "typeRevision" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    externalIdentifier: {
                        shape: "S1d"
                    },
                    firstRevisionCreatedAt: {
                        type: "timestamp"
                    },
                    firstRevisionCreatedBy: {},
                    formsOutput: {
                        shape: "S1q"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    listing: {
                        shape: "S1t"
                    },
                    name: {
                        shape: "S1l"
                    },
                    owningProjectId: {},
                    readOnlyFormsOutput: {
                        shape: "S1q"
                    },
                    revision: {},
                    typeIdentifier: {},
                    typeRevision: {}
                }
            }
        },
        GetAssetType: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/asset-types/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    revision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "formsOutput", "name", "owningProjectId", "revision" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    formsOutput: {
                        shape: "S21"
                    },
                    name: {},
                    originDomainId: {},
                    originProjectId: {},
                    owningProjectId: {},
                    revision: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetDataSource: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/data-sources/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "environmentId", "id", "name", "projectId" ],
                members: {
                    assetFormsOutput: {
                        shape: "S1q"
                    },
                    configuration: {
                        shape: "S2w"
                    },
                    createdAt: {
                        shape: "S35"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    enableSetting: {},
                    environmentId: {},
                    errorMessage: {
                        shape: "S37"
                    },
                    id: {},
                    lastRunAssetCount: {
                        type: "integer"
                    },
                    lastRunAt: {
                        shape: "S35"
                    },
                    lastRunErrorMessage: {
                        shape: "S37"
                    },
                    lastRunStatus: {},
                    name: {
                        shape: "S2p"
                    },
                    projectId: {},
                    publishOnImport: {
                        type: "boolean"
                    },
                    recommendation: {
                        shape: "S2q"
                    },
                    schedule: {
                        shape: "S2r"
                    },
                    status: {},
                    type: {},
                    updatedAt: {
                        shape: "S35"
                    }
                }
            }
        },
        GetDataSourceRun: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "dataSourceId", "domainId", "id", "projectId", "status", "type", "updatedAt" ],
                members: {
                    createdAt: {
                        shape: "S35"
                    },
                    dataSourceConfigurationSnapshot: {},
                    dataSourceId: {},
                    domainId: {},
                    errorMessage: {
                        shape: "S37"
                    },
                    id: {},
                    projectId: {},
                    runStatisticsForAssets: {
                        shape: "S7w"
                    },
                    startedAt: {
                        shape: "S35"
                    },
                    status: {},
                    stoppedAt: {
                        shape: "S35"
                    },
                    type: {},
                    updatedAt: {
                        shape: "S35"
                    }
                }
            }
        },
        GetDomain: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainExecutionRole", "id", "status" ],
                members: {
                    arn: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    domainExecutionRole: {},
                    id: {},
                    kmsKeyIdentifier: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    name: {},
                    portalUrl: {},
                    singleSignOn: {
                        shape: "S3f"
                    },
                    status: {},
                    tags: {
                        shape: "S3i"
                    }
                }
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environments/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "environmentProfileId", "name", "projectId", "provider" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    deploymentProperties: {
                        shape: "S3v"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    environmentActions: {
                        shape: "S3y"
                    },
                    environmentBlueprintId: {},
                    environmentProfileId: {},
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    lastDeployment: {
                        shape: "S44"
                    },
                    name: {
                        shape: "S4a"
                    },
                    projectId: {},
                    provider: {},
                    provisionedResources: {
                        shape: "S4b"
                    },
                    provisioningProperties: {
                        shape: "S4d"
                    },
                    status: {},
                    updatedAt: {
                        shape: "S3u"
                    },
                    userParameters: {
                        shape: "S4g"
                    }
                }
            }
        },
        GetEnvironmentBlueprint: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environment-blueprints/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "provider", "provisioningProperties" ],
                members: {
                    createdAt: {
                        shape: "S3u"
                    },
                    deploymentProperties: {
                        shape: "S3v"
                    },
                    description: {
                        shape: "Sp"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    name: {},
                    provider: {},
                    provisioningProperties: {
                        shape: "S4d"
                    },
                    updatedAt: {
                        shape: "S3u"
                    },
                    userParameters: {
                        shape: "S4g"
                    }
                }
            }
        },
        GetEnvironmentBlueprintConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentBlueprintIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentBlueprintIdentifier: {
                        location: "uri",
                        locationName: "environmentBlueprintIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "environmentBlueprintId" ],
                members: {
                    createdAt: {
                        shape: "S3u"
                    },
                    domainId: {},
                    enabledRegions: {
                        shape: "S87"
                    },
                    environmentBlueprintId: {},
                    manageAccessRoleArn: {},
                    provisioningRoleArn: {},
                    regionalParameters: {
                        shape: "S89"
                    },
                    updatedAt: {
                        shape: "S3u"
                    }
                }
            }
        },
        GetEnvironmentProfile: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "environmentBlueprintId", "id", "name" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    environmentBlueprintId: {},
                    id: {},
                    name: {
                        shape: "S4k"
                    },
                    projectId: {},
                    updatedAt: {
                        shape: "S3u"
                    },
                    userParameters: {
                        shape: "S4g"
                    }
                }
            }
        },
        GetFormType: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/form-types/{formTypeIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "formTypeIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    formTypeIdentifier: {
                        location: "uri",
                        locationName: "formTypeIdentifier"
                    },
                    revision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "model", "name", "revision" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    imports: {
                        shape: "S8f"
                    },
                    model: {
                        shape: "S4n"
                    },
                    name: {
                        shape: "S1s"
                    },
                    originDomainId: {},
                    originProjectId: {},
                    owningProjectId: {},
                    revision: {},
                    status: {}
                }
            }
        },
        GetGlossary: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/glossaries/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "id", "name", "owningProjectId", "status" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "S4s"
                    },
                    domainId: {},
                    id: {},
                    name: {
                        shape: "S4t"
                    },
                    owningProjectId: {},
                    status: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetGlossaryTerm: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "glossaryId", "id", "name", "status" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    glossaryId: {},
                    id: {},
                    longDescription: {
                        shape: "S4y"
                    },
                    name: {
                        shape: "Sx"
                    },
                    shortDescription: {
                        shape: "Sy"
                    },
                    status: {},
                    termRelations: {
                        shape: "S50"
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetGroupProfile: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "groupIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    groupIdentifier: {
                        location: "uri",
                        locationName: "groupIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domainId: {},
                    groupName: {
                        shape: "S57"
                    },
                    id: {},
                    status: {}
                }
            }
        },
        GetIamPortalLoginUrl: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/get-portal-login-url",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "userProfileId" ],
                members: {
                    authCodeUrl: {},
                    userProfileId: {}
                }
            }
        },
        GetListing: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/listings/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    listingRevision: {
                        location: "querystring",
                        locationName: "listingRevision"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "id", "listingRevision" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    id: {},
                    item: {
                        type: "structure",
                        members: {
                            assetListing: {
                                type: "structure",
                                members: {
                                    assetId: {},
                                    assetRevision: {},
                                    assetType: {},
                                    createdAt: {
                                        type: "timestamp"
                                    },
                                    forms: {},
                                    glossaryTerms: {
                                        shape: "Sv"
                                    },
                                    owningProjectId: {}
                                }
                            }
                        },
                        union: true
                    },
                    listingRevision: {},
                    name: {},
                    status: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetProject: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/projects/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "id", "name" ],
                members: {
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    lastUpdatedAt: {
                        shape: "S3u"
                    },
                    name: {
                        shape: "S14"
                    }
                }
            }
        },
        GetSubscription: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "status", "subscribedListing", "subscribedPrincipal", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    id: {},
                    retainPermissions: {
                        type: "boolean"
                    },
                    status: {},
                    subscribedListing: {
                        shape: "So"
                    },
                    subscribedPrincipal: {
                        shape: "S12"
                    },
                    subscriptionRequestId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetSubscriptionGrant: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "grantedEntity", "id", "status", "subscriptionTargetId", "updatedAt" ],
                members: {
                    assets: {
                        shape: "S5s"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    grantedEntity: {
                        shape: "S5x"
                    },
                    id: {},
                    status: {},
                    subscriptionId: {},
                    subscriptionTargetId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetSubscriptionRequestDetails: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "requestReason", "status", "subscribedListings", "subscribedPrincipals", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    decisionComment: {
                        shape: "Sg"
                    },
                    domainId: {},
                    id: {},
                    requestReason: {
                        shape: "Sl"
                    },
                    reviewerId: {},
                    status: {},
                    subscribedListings: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    subscribedPrincipals: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetSubscriptionTarget: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentIdentifier: {
                        location: "uri",
                        locationName: "environmentIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicableAssetTypes", "authorizedPrincipals", "createdAt", "createdBy", "domainId", "environmentId", "id", "manageAccessRole", "name", "projectId", "provider", "subscriptionTargetConfig", "type" ],
                members: {
                    applicableAssetTypes: {
                        shape: "S6b"
                    },
                    authorizedPrincipals: {
                        shape: "S6c"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    environmentId: {},
                    id: {},
                    manageAccessRole: {},
                    name: {
                        shape: "S6e"
                    },
                    projectId: {},
                    provider: {},
                    subscriptionTargetConfig: {
                        shape: "S6f"
                    },
                    type: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            }
        },
        GetUserProfile: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "userIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    userIdentifier: {
                        location: "uri",
                        locationName: "userIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S6m"
                    },
                    domainId: {},
                    id: {},
                    status: {},
                    type: {}
                }
            }
        },
        ListAssetRevisions: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/assets/{identifier}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                domainId: {},
                                id: {},
                                revision: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSourceRunActivities: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/data-source-runs/{identifier}/activities",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "dataAssetStatus", "dataSourceRunId", "database", "projectId", "technicalName", "updatedAt" ],
                            members: {
                                createdAt: {
                                    shape: "S35"
                                },
                                dataAssetId: {},
                                dataAssetStatus: {},
                                dataSourceRunId: {},
                                database: {
                                    shape: "S2p"
                                },
                                errorMessage: {
                                    shape: "S37"
                                },
                                projectId: {},
                                technicalDescription: {
                                    shape: "Sp"
                                },
                                technicalName: {
                                    shape: "S2p"
                                },
                                updatedAt: {
                                    shape: "S35"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSourceRuns: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataSourceIdentifier", "domainIdentifier" ],
                members: {
                    dataSourceIdentifier: {
                        location: "uri",
                        locationName: "dataSourceIdentifier"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "dataSourceId", "id", "projectId", "status", "type", "updatedAt" ],
                            members: {
                                createdAt: {
                                    shape: "S35"
                                },
                                dataSourceId: {},
                                errorMessage: {
                                    shape: "S37"
                                },
                                id: {},
                                projectId: {},
                                runStatisticsForAssets: {
                                    shape: "S7w"
                                },
                                startedAt: {
                                    shape: "S35"
                                },
                                status: {},
                                stoppedAt: {
                                    shape: "S35"
                                },
                                type: {},
                                updatedAt: {
                                    shape: "S35"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/data-sources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "projectIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentIdentifier: {
                        location: "querystring",
                        locationName: "environmentIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        shape: "S2p",
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    projectIdentifier: {
                        location: "querystring",
                        locationName: "projectIdentifier"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "dataSourceId", "domainId", "environmentId", "name", "status", "type" ],
                            members: {
                                createdAt: {
                                    shape: "S35"
                                },
                                dataSourceId: {},
                                domainId: {},
                                enableSetting: {},
                                environmentId: {},
                                lastRunAssetCount: {
                                    type: "integer"
                                },
                                lastRunAt: {
                                    shape: "S35"
                                },
                                lastRunErrorMessage: {
                                    shape: "S37"
                                },
                                lastRunStatus: {},
                                name: {
                                    shape: "S2p"
                                },
                                schedule: {
                                    shape: "S2r"
                                },
                                status: {},
                                type: {},
                                updatedAt: {
                                    shape: "S35"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDomains: {
            http: {
                method: "GET",
                requestUri: "/v2/domains",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "id", "managedAccountId", "name", "status" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    type: "string",
                                    sensitive: true
                                },
                                id: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                managedAccountId: {},
                                name: {
                                    type: "string",
                                    sensitive: true
                                },
                                portalUrl: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironmentBlueprintConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "domainId", "environmentBlueprintId" ],
                            members: {
                                createdAt: {
                                    shape: "S3u"
                                },
                                domainId: {},
                                enabledRegions: {
                                    shape: "S87"
                                },
                                environmentBlueprintId: {},
                                manageAccessRoleArn: {},
                                provisioningRoleArn: {},
                                regionalParameters: {
                                    shape: "S89"
                                },
                                updatedAt: {
                                    shape: "S3u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironmentBlueprints: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environment-blueprints",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    managed: {
                        location: "querystring",
                        locationName: "managed",
                        type: "boolean"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "provider", "provisioningProperties" ],
                            members: {
                                createdAt: {
                                    shape: "S3u"
                                },
                                description: {
                                    shape: "Sp"
                                },
                                id: {},
                                name: {},
                                provider: {},
                                provisioningProperties: {
                                    shape: "S4d"
                                },
                                updatedAt: {
                                    shape: "S3u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironmentProfiles: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environment-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    awsAccountId: {
                        location: "querystring",
                        locationName: "awsAccountId"
                    },
                    awsAccountRegion: {
                        location: "querystring",
                        locationName: "awsAccountRegion"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentBlueprintIdentifier: {
                        location: "querystring",
                        locationName: "environmentBlueprintIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        shape: "S4k",
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    projectIdentifier: {
                        location: "querystring",
                        locationName: "projectIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdBy", "domainId", "environmentBlueprintId", "id", "name" ],
                            members: {
                                awsAccountId: {},
                                awsAccountRegion: {},
                                createdAt: {
                                    shape: "S3u"
                                },
                                createdBy: {},
                                description: {
                                    shape: "Sp"
                                },
                                domainId: {},
                                environmentBlueprintId: {},
                                id: {},
                                name: {
                                    shape: "S4k"
                                },
                                projectId: {},
                                updatedAt: {
                                    shape: "S3u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "projectIdentifier" ],
                members: {
                    awsAccountId: {
                        location: "querystring",
                        locationName: "awsAccountId"
                    },
                    awsAccountRegion: {
                        location: "querystring",
                        locationName: "awsAccountRegion"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentBlueprintIdentifier: {
                        location: "querystring",
                        locationName: "environmentBlueprintIdentifier"
                    },
                    environmentProfileIdentifier: {
                        location: "querystring",
                        locationName: "environmentProfileIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    projectIdentifier: {
                        location: "querystring",
                        locationName: "projectIdentifier"
                    },
                    provider: {
                        location: "querystring",
                        locationName: "provider"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdBy", "domainId", "environmentProfileId", "name", "projectId", "provider" ],
                            members: {
                                awsAccountId: {},
                                awsAccountRegion: {},
                                createdAt: {
                                    shape: "S3u"
                                },
                                createdBy: {},
                                description: {
                                    shape: "Sp"
                                },
                                domainId: {},
                                environmentProfileId: {},
                                id: {},
                                name: {
                                    shape: "S4a"
                                },
                                projectId: {},
                                provider: {},
                                status: {},
                                updatedAt: {
                                    shape: "S3u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNotifications: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/notifications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "type" ],
                members: {
                    afterTimestamp: {
                        location: "querystring",
                        locationName: "afterTimestamp",
                        type: "timestamp"
                    },
                    beforeTimestamp: {
                        location: "querystring",
                        locationName: "beforeTimestamp",
                        type: "timestamp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    subjects: {
                        location: "querystring",
                        locationName: "subjects",
                        type: "list",
                        member: {}
                    },
                    taskStatus: {
                        location: "querystring",
                        locationName: "taskStatus"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    notifications: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "actionLink", "creationTimestamp", "domainIdentifier", "identifier", "lastUpdatedTimestamp", "message", "title", "topic", "type" ],
                            members: {
                                actionLink: {
                                    type: "string",
                                    sensitive: true
                                },
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                domainIdentifier: {},
                                identifier: {},
                                lastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                message: {
                                    type: "string",
                                    sensitive: true
                                },
                                metadata: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                },
                                status: {},
                                title: {
                                    type: "string",
                                    sensitive: true
                                },
                                topic: {
                                    type: "structure",
                                    required: [ "resource", "role", "subject" ],
                                    members: {
                                        resource: {
                                            type: "structure",
                                            required: [ "id", "type" ],
                                            members: {
                                                id: {},
                                                name: {},
                                                type: {}
                                            }
                                        },
                                        role: {},
                                        subject: {}
                                    }
                                },
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListProjectMemberships: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/projects/{projectIdentifier}/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "projectIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    projectIdentifier: {
                        location: "uri",
                        locationName: "projectIdentifier"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "members" ],
                members: {
                    members: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "designation", "memberDetails" ],
                            members: {
                                designation: {},
                                memberDetails: {
                                    type: "structure",
                                    members: {
                                        group: {
                                            type: "structure",
                                            required: [ "groupId" ],
                                            members: {
                                                groupId: {}
                                            }
                                        },
                                        user: {
                                            type: "structure",
                                            required: [ "userId" ],
                                            members: {
                                                userId: {}
                                            }
                                        }
                                    },
                                    union: true
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    groupIdentifier: {
                        location: "querystring",
                        locationName: "groupIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        shape: "S14",
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    userIdentifier: {
                        location: "querystring",
                        locationName: "userIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdBy", "domainId", "id", "name" ],
                            members: {
                                createdAt: {
                                    shape: "S3u"
                                },
                                createdBy: {},
                                description: {
                                    shape: "Sp"
                                },
                                domainId: {},
                                id: {},
                                name: {
                                    shape: "S14"
                                },
                                updatedAt: {
                                    shape: "S3u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSubscriptionGrants: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-grants",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentId: {
                        location: "querystring",
                        locationName: "environmentId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    },
                    subscribedListingId: {
                        location: "querystring",
                        locationName: "subscribedListingId"
                    },
                    subscriptionId: {
                        location: "querystring",
                        locationName: "subscriptionId"
                    },
                    subscriptionTargetId: {
                        location: "querystring",
                        locationName: "subscriptionTargetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "createdBy", "domainId", "grantedEntity", "id", "status", "subscriptionTargetId", "updatedAt" ],
                            members: {
                                assets: {
                                    shape: "S5s"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                domainId: {},
                                grantedEntity: {
                                    shape: "S5x"
                                },
                                id: {},
                                status: {},
                                subscriptionId: {},
                                subscriptionTargetId: {},
                                updatedAt: {
                                    type: "timestamp"
                                },
                                updatedBy: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSubscriptionRequests: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-requests",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    approverProjectId: {
                        location: "querystring",
                        locationName: "approverProjectId"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    owningProjectId: {
                        location: "querystring",
                        locationName: "owningProjectId"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    subscribedListingId: {
                        location: "querystring",
                        locationName: "subscribedListingId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "createdBy", "domainId", "id", "requestReason", "status", "subscribedListings", "subscribedPrincipals", "updatedAt" ],
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                decisionComment: {
                                    shape: "Sg"
                                },
                                domainId: {},
                                id: {},
                                requestReason: {
                                    shape: "Sl"
                                },
                                reviewerId: {},
                                status: {},
                                subscribedListings: {
                                    type: "list",
                                    member: {
                                        shape: "So"
                                    }
                                },
                                subscribedPrincipals: {
                                    type: "list",
                                    member: {
                                        shape: "S12"
                                    }
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                updatedBy: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSubscriptionTargets: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentIdentifier: {
                        location: "uri",
                        locationName: "environmentIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicableAssetTypes", "authorizedPrincipals", "createdAt", "createdBy", "domainId", "environmentId", "id", "manageAccessRole", "name", "projectId", "provider", "subscriptionTargetConfig", "type" ],
                            members: {
                                applicableAssetTypes: {
                                    shape: "S6b"
                                },
                                authorizedPrincipals: {
                                    shape: "S6c"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                domainId: {},
                                environmentId: {},
                                id: {},
                                manageAccessRole: {},
                                name: {
                                    shape: "S6e"
                                },
                                projectId: {},
                                provider: {},
                                subscriptionTargetConfig: {
                                    shape: "S6f"
                                },
                                type: {},
                                updatedAt: {
                                    type: "timestamp"
                                },
                                updatedBy: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSubscriptions: {
            http: {
                method: "GET",
                requestUri: "/v2/domains/{domainIdentifier}/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    approverProjectId: {
                        location: "querystring",
                        locationName: "approverProjectId"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    owningProjectId: {
                        location: "querystring",
                        locationName: "owningProjectId"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    sortOrder: {
                        location: "querystring",
                        locationName: "sortOrder"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    subscribedListingId: {
                        location: "querystring",
                        locationName: "subscribedListingId"
                    },
                    subscriptionRequestIdentifier: {
                        location: "querystring",
                        locationName: "subscriptionRequestIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "createdBy", "domainId", "id", "status", "subscribedListing", "subscribedPrincipal", "updatedAt" ],
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                domainId: {},
                                id: {},
                                retainPermissions: {
                                    type: "boolean"
                                },
                                status: {},
                                subscribedListing: {
                                    shape: "So"
                                },
                                subscribedPrincipal: {
                                    shape: "S12"
                                },
                                subscriptionRequestId: {},
                                updatedAt: {
                                    type: "timestamp"
                                },
                                updatedBy: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S3i"
                    }
                }
            }
        },
        PutEnvironmentBlueprintConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/environment-blueprint-configurations/{environmentBlueprintIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "enabledRegions", "environmentBlueprintIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    enabledRegions: {
                        shape: "S87"
                    },
                    environmentBlueprintIdentifier: {
                        location: "uri",
                        locationName: "environmentBlueprintIdentifier"
                    },
                    manageAccessRoleArn: {},
                    provisioningRoleArn: {},
                    regionalParameters: {
                        shape: "S89"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "environmentBlueprintId" ],
                members: {
                    createdAt: {
                        shape: "S3u"
                    },
                    domainId: {},
                    enabledRegions: {
                        shape: "S87"
                    },
                    environmentBlueprintId: {},
                    manageAccessRoleArn: {},
                    provisioningRoleArn: {},
                    regionalParameters: {
                        shape: "S89"
                    },
                    updatedAt: {
                        shape: "S3u"
                    }
                }
            },
            idempotent: true
        },
        RejectPredictions: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/assets/{identifier}/reject-predictions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    rejectChoices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                predictionChoices: {
                                    type: "list",
                                    member: {
                                        type: "integer"
                                    }
                                },
                                predictionTarget: {}
                            }
                        }
                    },
                    rejectRule: {
                        type: "structure",
                        members: {
                            rule: {},
                            threshold: {
                                type: "float"
                            }
                        }
                    },
                    revision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetRevision", "domainId" ],
                members: {
                    assetId: {},
                    assetRevision: {},
                    domainId: {}
                }
            },
            idempotent: true
        },
        RejectSubscriptionRequest: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}/reject",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    decisionComment: {
                        shape: "Sg"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "requestReason", "status", "subscribedListings", "subscribedPrincipals", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    decisionComment: {
                        shape: "Sg"
                    },
                    domainId: {},
                    id: {},
                    requestReason: {
                        shape: "Sl"
                    },
                    reviewerId: {},
                    status: {},
                    subscribedListings: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    subscribedPrincipals: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            },
            idempotent: true
        },
        RevokeSubscription: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/subscriptions/{identifier}/revoke",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    retainPermissions: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "status", "subscribedListing", "subscribedPrincipal", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    id: {},
                    retainPermissions: {
                        type: "boolean"
                    },
                    status: {},
                    subscribedListing: {
                        shape: "So"
                    },
                    subscribedPrincipal: {
                        shape: "S12"
                    },
                    subscriptionRequestId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            },
            idempotent: true
        },
        Search: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "searchScope" ],
                members: {
                    additionalAttributes: {
                        shape: "Sc7"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    filters: {
                        shape: "Sc9"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    owningProjectIdentifier: {},
                    searchIn: {
                        shape: "Sce"
                    },
                    searchScope: {},
                    searchText: {},
                    sort: {
                        shape: "Sci"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                assetItem: {
                                    type: "structure",
                                    required: [ "domainId", "identifier", "name", "owningProjectId", "typeIdentifier", "typeRevision" ],
                                    members: {
                                        additionalAttributes: {
                                            type: "structure",
                                            members: {
                                                formsOutput: {
                                                    shape: "S1q"
                                                },
                                                readOnlyFormsOutput: {
                                                    shape: "S1q"
                                                }
                                            }
                                        },
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        createdBy: {},
                                        description: {
                                            shape: "Sp"
                                        },
                                        domainId: {},
                                        externalIdentifier: {
                                            shape: "S1d"
                                        },
                                        firstRevisionCreatedAt: {
                                            type: "timestamp"
                                        },
                                        firstRevisionCreatedBy: {},
                                        glossaryTerms: {
                                            shape: "S1j"
                                        },
                                        identifier: {},
                                        name: {
                                            shape: "S1l"
                                        },
                                        owningProjectId: {},
                                        typeIdentifier: {},
                                        typeRevision: {}
                                    }
                                },
                                dataProductItem: {
                                    type: "structure",
                                    required: [ "domainId", "id", "name", "owningProjectId" ],
                                    members: {
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        createdBy: {},
                                        dataProductItems: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    domainId: {},
                                                    itemId: {}
                                                }
                                            }
                                        },
                                        description: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        domainId: {},
                                        glossaryTerms: {
                                            shape: "S1j"
                                        },
                                        id: {},
                                        name: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        owningProjectId: {},
                                        updatedAt: {
                                            type: "timestamp"
                                        },
                                        updatedBy: {}
                                    }
                                },
                                glossaryItem: {
                                    type: "structure",
                                    required: [ "domainId", "id", "name", "owningProjectId", "status" ],
                                    members: {
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        createdBy: {},
                                        description: {
                                            shape: "S4s"
                                        },
                                        domainId: {},
                                        id: {},
                                        name: {
                                            shape: "S4t"
                                        },
                                        owningProjectId: {},
                                        status: {},
                                        updatedAt: {
                                            type: "timestamp"
                                        },
                                        updatedBy: {}
                                    }
                                },
                                glossaryTermItem: {
                                    type: "structure",
                                    required: [ "domainId", "glossaryId", "id", "name", "status" ],
                                    members: {
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        createdBy: {},
                                        domainId: {},
                                        glossaryId: {},
                                        id: {},
                                        longDescription: {
                                            shape: "S4y"
                                        },
                                        name: {
                                            shape: "Sx"
                                        },
                                        shortDescription: {
                                            shape: "Sy"
                                        },
                                        status: {},
                                        termRelations: {
                                            shape: "S50"
                                        },
                                        updatedAt: {
                                            type: "timestamp"
                                        },
                                        updatedBy: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    nextToken: {},
                    totalMatchCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchGroupProfiles: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/search-group-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "groupType" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    groupType: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    searchText: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                domainId: {},
                                groupName: {
                                    shape: "S57"
                                },
                                id: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchListings: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/listings/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier" ],
                members: {
                    additionalAttributes: {
                        shape: "Sc7"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    filters: {
                        shape: "Sc9"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    searchIn: {
                        shape: "Sce"
                    },
                    searchText: {},
                    sort: {
                        shape: "Sci"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                assetListing: {
                                    type: "structure",
                                    members: {
                                        additionalAttributes: {
                                            type: "structure",
                                            members: {
                                                forms: {}
                                            }
                                        },
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        description: {
                                            shape: "Sp"
                                        },
                                        entityId: {},
                                        entityRevision: {},
                                        entityType: {},
                                        glossaryTerms: {
                                            shape: "Sv"
                                        },
                                        listingCreatedBy: {},
                                        listingId: {},
                                        listingRevision: {},
                                        listingUpdatedBy: {},
                                        name: {
                                            shape: "S1l"
                                        },
                                        owningProjectId: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    nextToken: {},
                    totalMatchCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchTypes: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/types-search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "managed", "searchScope" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    filters: {
                        shape: "Sc9"
                    },
                    managed: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    searchIn: {
                        shape: "Sce"
                    },
                    searchScope: {},
                    searchText: {},
                    sort: {
                        shape: "Sci"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                assetTypeItem: {
                                    type: "structure",
                                    required: [ "domainId", "formsOutput", "name", "owningProjectId", "revision" ],
                                    members: {
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        createdBy: {},
                                        description: {
                                            shape: "Sp"
                                        },
                                        domainId: {},
                                        formsOutput: {
                                            shape: "S21"
                                        },
                                        name: {},
                                        originDomainId: {},
                                        originProjectId: {},
                                        owningProjectId: {},
                                        revision: {},
                                        updatedAt: {
                                            type: "timestamp"
                                        },
                                        updatedBy: {}
                                    }
                                },
                                formTypeItem: {
                                    type: "structure",
                                    required: [ "domainId", "name", "revision" ],
                                    members: {
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        createdBy: {},
                                        description: {
                                            shape: "Sp"
                                        },
                                        domainId: {},
                                        imports: {
                                            shape: "S8f"
                                        },
                                        model: {
                                            shape: "S4n"
                                        },
                                        name: {
                                            shape: "S1s"
                                        },
                                        originDomainId: {},
                                        originProjectId: {},
                                        owningProjectId: {},
                                        revision: {},
                                        status: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    nextToken: {},
                    totalMatchCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchUserProfiles: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/search-user-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "userType" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    searchText: {
                        type: "string",
                        sensitive: true
                    },
                    userType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                details: {
                                    shape: "S6m"
                                },
                                domainId: {},
                                id: {},
                                status: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartDataSourceRun: {
            http: {
                requestUri: "/v2/domains/{domainIdentifier}/data-sources/{dataSourceIdentifier}/runs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataSourceIdentifier", "domainIdentifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    dataSourceIdentifier: {
                        location: "uri",
                        locationName: "dataSourceIdentifier"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "dataSourceId", "domainId", "id", "projectId", "status", "type", "updatedAt" ],
                members: {
                    createdAt: {
                        shape: "S35"
                    },
                    dataSourceConfigurationSnapshot: {},
                    dataSourceId: {},
                    domainId: {},
                    errorMessage: {
                        shape: "S37"
                    },
                    id: {},
                    projectId: {},
                    runStatisticsForAssets: {
                        shape: "S7w"
                    },
                    startedAt: {
                        shape: "S35"
                    },
                    status: {},
                    stoppedAt: {
                        shape: "S35"
                    },
                    type: {},
                    updatedAt: {
                        shape: "S35"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateDataSource: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/data-sources/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    assetFormsInput: {
                        shape: "S1e"
                    },
                    configuration: {
                        shape: "S24"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    enableSetting: {},
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    name: {
                        shape: "S2p"
                    },
                    publishOnImport: {
                        type: "boolean"
                    },
                    recommendation: {
                        shape: "S2q"
                    },
                    schedule: {
                        shape: "S2r"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "environmentId", "id", "name", "projectId" ],
                members: {
                    assetFormsOutput: {
                        shape: "S1q"
                    },
                    configuration: {
                        shape: "S2w"
                    },
                    createdAt: {
                        shape: "S35"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    enableSetting: {},
                    environmentId: {},
                    errorMessage: {
                        shape: "S37"
                    },
                    id: {},
                    lastRunAt: {
                        shape: "S35"
                    },
                    lastRunErrorMessage: {
                        shape: "S37"
                    },
                    lastRunStatus: {},
                    name: {
                        shape: "S2p"
                    },
                    projectId: {},
                    publishOnImport: {
                        type: "boolean"
                    },
                    recommendation: {
                        shape: "S2q"
                    },
                    schedule: {
                        shape: "S2r"
                    },
                    status: {},
                    type: {},
                    updatedAt: {
                        shape: "S35"
                    }
                }
            },
            idempotent: true
        },
        UpdateDomain: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    description: {},
                    domainExecutionRole: {},
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    name: {},
                    singleSignOn: {
                        shape: "S3f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id" ],
                members: {
                    description: {},
                    domainExecutionRole: {},
                    id: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    name: {},
                    singleSignOn: {
                        shape: "S3f"
                    }
                }
            },
            idempotent: true
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/environments/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    description: {},
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "environmentProfileId", "name", "projectId", "provider" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    deploymentProperties: {
                        shape: "S3v"
                    },
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    environmentActions: {
                        shape: "S3y"
                    },
                    environmentBlueprintId: {},
                    environmentProfileId: {},
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    lastDeployment: {
                        shape: "S44"
                    },
                    name: {
                        shape: "S4a"
                    },
                    projectId: {},
                    provider: {},
                    provisionedResources: {
                        shape: "S4b"
                    },
                    provisioningProperties: {
                        shape: "S4d"
                    },
                    status: {},
                    updatedAt: {
                        shape: "S3u"
                    },
                    userParameters: {
                        shape: "S4g"
                    }
                }
            }
        },
        UpdateEnvironmentProfile: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/environment-profiles/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    description: {},
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    name: {
                        shape: "S4k"
                    },
                    userParameters: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "environmentBlueprintId", "id", "name" ],
                members: {
                    awsAccountId: {},
                    awsAccountRegion: {},
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    environmentBlueprintId: {},
                    id: {},
                    name: {
                        shape: "S4k"
                    },
                    projectId: {},
                    updatedAt: {
                        shape: "S3u"
                    },
                    userParameters: {
                        shape: "S4g"
                    }
                }
            }
        },
        UpdateGlossary: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/glossaries/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "S4s"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    name: {
                        shape: "S4t"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "id", "name", "owningProjectId" ],
                members: {
                    description: {
                        shape: "S4s"
                    },
                    domainId: {},
                    id: {},
                    name: {
                        shape: "S4t"
                    },
                    owningProjectId: {},
                    status: {}
                }
            },
            idempotent: true
        },
        UpdateGlossaryTerm: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/glossary-terms/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    glossaryIdentifier: {},
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    longDescription: {
                        shape: "S4y"
                    },
                    name: {
                        shape: "Sx"
                    },
                    shortDescription: {
                        shape: "Sy"
                    },
                    status: {},
                    termRelations: {
                        shape: "S50"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainId", "glossaryId", "id", "name", "status" ],
                members: {
                    domainId: {},
                    glossaryId: {},
                    id: {},
                    longDescription: {
                        shape: "S4y"
                    },
                    name: {
                        shape: "Sx"
                    },
                    shortDescription: {
                        shape: "Sy"
                    },
                    status: {},
                    termRelations: {
                        shape: "S50"
                    }
                }
            },
            idempotent: true
        },
        UpdateGroupProfile: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/group-profiles/{groupIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "groupIdentifier", "status" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    groupIdentifier: {
                        location: "uri",
                        locationName: "groupIdentifier"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domainId: {},
                    groupName: {
                        shape: "S57"
                    },
                    id: {},
                    status: {}
                }
            }
        },
        UpdateProject: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/projects/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier" ],
                members: {
                    description: {
                        shape: "Sp"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    name: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdBy", "domainId", "id", "name" ],
                members: {
                    createdAt: {
                        shape: "S3u"
                    },
                    createdBy: {},
                    description: {
                        shape: "Sp"
                    },
                    domainId: {},
                    glossaryTerms: {
                        shape: "S1j"
                    },
                    id: {},
                    lastUpdatedAt: {
                        shape: "S3u"
                    },
                    name: {
                        shape: "S14"
                    }
                }
            },
            idempotent: true
        },
        UpdateSubscriptionGrantStatus: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-grants/{identifier}/status/{assetIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assetIdentifier", "domainIdentifier", "identifier", "status" ],
                members: {
                    assetIdentifier: {
                        location: "uri",
                        locationName: "assetIdentifier"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    failureCause: {
                        shape: "S5u"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    status: {},
                    targetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "grantedEntity", "id", "status", "subscriptionTargetId", "updatedAt" ],
                members: {
                    assets: {
                        shape: "S5s"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    grantedEntity: {
                        shape: "S5x"
                    },
                    id: {},
                    status: {},
                    subscriptionId: {},
                    subscriptionTargetId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            },
            idempotent: true
        },
        UpdateSubscriptionRequest: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/subscription-requests/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "identifier", "requestReason" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    requestReason: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "createdBy", "domainId", "id", "requestReason", "status", "subscribedListings", "subscribedPrincipals", "updatedAt" ],
                members: {
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    decisionComment: {
                        shape: "Sg"
                    },
                    domainId: {},
                    id: {},
                    requestReason: {
                        shape: "Sl"
                    },
                    reviewerId: {},
                    status: {},
                    subscribedListings: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    subscribedPrincipals: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            },
            idempotent: true
        },
        UpdateSubscriptionTarget: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domains/{domainIdentifier}/environments/{environmentIdentifier}/subscription-targets/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "environmentIdentifier", "identifier" ],
                members: {
                    applicableAssetTypes: {
                        shape: "S6b"
                    },
                    authorizedPrincipals: {
                        shape: "S6c"
                    },
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    environmentIdentifier: {
                        location: "uri",
                        locationName: "environmentIdentifier"
                    },
                    identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    manageAccessRole: {},
                    name: {
                        shape: "S6e"
                    },
                    provider: {},
                    subscriptionTargetConfig: {
                        shape: "S6f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicableAssetTypes", "authorizedPrincipals", "createdAt", "createdBy", "domainId", "environmentId", "id", "manageAccessRole", "name", "projectId", "provider", "subscriptionTargetConfig", "type" ],
                members: {
                    applicableAssetTypes: {
                        shape: "S6b"
                    },
                    authorizedPrincipals: {
                        shape: "S6c"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    domainId: {},
                    environmentId: {},
                    id: {},
                    manageAccessRole: {},
                    name: {
                        shape: "S6e"
                    },
                    projectId: {},
                    provider: {},
                    subscriptionTargetConfig: {
                        shape: "S6f"
                    },
                    type: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    updatedBy: {}
                }
            },
            idempotent: true
        },
        UpdateUserProfile: {
            http: {
                method: "PUT",
                requestUri: "/v2/domains/{domainIdentifier}/user-profiles/{userIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainIdentifier", "status", "userIdentifier" ],
                members: {
                    domainIdentifier: {
                        location: "uri",
                        locationName: "domainIdentifier"
                    },
                    status: {},
                    type: {},
                    userIdentifier: {
                        location: "uri",
                        locationName: "userIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S6m"
                    },
                    domainId: {},
                    id: {},
                    status: {},
                    type: {}
                }
            }
        }
    },
    shapes: {
        Sg: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "structure",
            required: [ "description", "id", "item", "name", "ownerProjectId" ],
            members: {
                description: {
                    shape: "Sp"
                },
                id: {},
                item: {
                    type: "structure",
                    members: {
                        assetListing: {
                            type: "structure",
                            members: {
                                entityId: {},
                                entityRevision: {},
                                entityType: {},
                                forms: {},
                                glossaryTerms: {
                                    shape: "Sv"
                                }
                            }
                        }
                    },
                    union: true
                },
                name: {},
                ownerProjectId: {},
                ownerProjectName: {},
                revision: {}
            }
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {
                        shape: "Sx"
                    },
                    shortDescription: {
                        shape: "Sy"
                    }
                }
            }
        },
        Sx: {
            type: "string",
            sensitive: true
        },
        Sy: {
            type: "string",
            sensitive: true
        },
        S12: {
            type: "structure",
            members: {
                project: {
                    type: "structure",
                    members: {
                        id: {},
                        name: {
                            shape: "S14"
                        }
                    }
                }
            },
            union: true
        },
        S14: {
            type: "string",
            sensitive: true
        },
        S1d: {
            type: "string",
            sensitive: true
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "formName" ],
                members: {
                    content: {},
                    formName: {},
                    typeIdentifier: {},
                    typeRevision: {}
                },
                sensitive: true
            },
            sensitive: true
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1l: {
            type: "string",
            sensitive: true
        },
        S1m: {
            type: "structure",
            members: {
                businessNameGeneration: {
                    type: "structure",
                    members: {
                        enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "formName" ],
                members: {
                    content: {},
                    formName: {},
                    typeName: {
                        shape: "S1s"
                    },
                    typeRevision: {}
                }
            }
        },
        S1s: {
            type: "string",
            sensitive: true
        },
        S1t: {
            type: "structure",
            required: [ "listingId", "listingStatus" ],
            members: {
                listingId: {},
                listingStatus: {}
            }
        },
        S21: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "typeName", "typeRevision" ],
                members: {
                    required: {
                        type: "boolean"
                    },
                    typeName: {
                        shape: "S1s"
                    },
                    typeRevision: {}
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                glueRunConfiguration: {
                    type: "structure",
                    required: [ "relationalFilterConfigurations" ],
                    members: {
                        dataAccessRole: {},
                        relationalFilterConfigurations: {
                            shape: "S27"
                        }
                    }
                },
                redshiftRunConfiguration: {
                    type: "structure",
                    required: [ "redshiftCredentialConfiguration", "redshiftStorage", "relationalFilterConfigurations" ],
                    members: {
                        dataAccessRole: {},
                        redshiftCredentialConfiguration: {
                            shape: "S2h"
                        },
                        redshiftStorage: {
                            shape: "S2j"
                        },
                        relationalFilterConfigurations: {
                            shape: "S27"
                        }
                    }
                }
            },
            union: true
        },
        S27: {
            type: "list",
            member: {
                type: "structure",
                required: [ "databaseName" ],
                members: {
                    databaseName: {},
                    filterExpressions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "expression", "type" ],
                            members: {
                                expression: {},
                                type: {}
                            }
                        }
                    },
                    schemaName: {}
                }
            }
        },
        S2h: {
            type: "structure",
            required: [ "secretManagerArn" ],
            members: {
                secretManagerArn: {}
            }
        },
        S2j: {
            type: "structure",
            members: {
                redshiftClusterSource: {
                    type: "structure",
                    required: [ "clusterName" ],
                    members: {
                        clusterName: {}
                    }
                },
                redshiftServerlessSource: {
                    type: "structure",
                    required: [ "workgroupName" ],
                    members: {
                        workgroupName: {}
                    }
                }
            },
            union: true
        },
        S2p: {
            type: "string",
            sensitive: true
        },
        S2q: {
            type: "structure",
            members: {
                enableBusinessNameGeneration: {
                    type: "boolean"
                }
            }
        },
        S2r: {
            type: "structure",
            members: {
                schedule: {},
                timezone: {}
            },
            sensitive: true
        },
        S2w: {
            type: "structure",
            members: {
                glueRunConfiguration: {
                    type: "structure",
                    required: [ "relationalFilterConfigurations" ],
                    members: {
                        accountId: {},
                        dataAccessRole: {},
                        region: {},
                        relationalFilterConfigurations: {
                            shape: "S27"
                        }
                    }
                },
                redshiftRunConfiguration: {
                    type: "structure",
                    required: [ "redshiftCredentialConfiguration", "redshiftStorage", "relationalFilterConfigurations" ],
                    members: {
                        accountId: {},
                        dataAccessRole: {},
                        redshiftCredentialConfiguration: {
                            shape: "S2h"
                        },
                        redshiftStorage: {
                            shape: "S2j"
                        },
                        region: {},
                        relationalFilterConfigurations: {
                            shape: "S27"
                        }
                    }
                }
            },
            union: true
        },
        S35: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S37: {
            type: "structure",
            required: [ "errorType" ],
            members: {
                errorDetail: {},
                errorType: {}
            }
        },
        S3f: {
            type: "structure",
            members: {
                type: {},
                userAssignment: {}
            }
        },
        S3i: {
            type: "map",
            key: {},
            value: {}
        },
        S3p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        S3u: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S3v: {
            type: "structure",
            members: {
                endTimeoutMinutes: {
                    type: "integer"
                },
                startTimeoutMinutes: {
                    type: "integer"
                }
            }
        },
        S3y: {
            type: "list",
            member: {
                type: "structure",
                required: [ "parameters", "type" ],
                members: {
                    auth: {},
                    parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                key: {},
                                value: {}
                            }
                        }
                    },
                    type: {}
                }
            }
        },
        S44: {
            type: "structure",
            members: {
                deploymentId: {},
                deploymentStatus: {},
                deploymentType: {},
                failureReason: {
                    type: "structure",
                    required: [ "message" ],
                    members: {
                        code: {},
                        message: {}
                    }
                },
                isDeploymentComplete: {
                    type: "boolean"
                },
                messages: {
                    type: "list",
                    member: {}
                }
            }
        },
        S4a: {
            type: "string",
            sensitive: true
        },
        S4b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "type", "value" ],
                members: {
                    name: {},
                    provider: {},
                    type: {},
                    value: {}
                }
            }
        },
        S4d: {
            type: "structure",
            members: {
                cloudFormation: {
                    type: "structure",
                    required: [ "templateUrl" ],
                    members: {
                        templateUrl: {}
                    }
                }
            },
            union: true
        },
        S4g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "fieldType", "keyName" ],
                members: {
                    defaultValue: {},
                    description: {
                        shape: "Sp"
                    },
                    fieldType: {},
                    isEditable: {
                        type: "boolean"
                    },
                    isOptional: {
                        type: "boolean"
                    },
                    keyName: {}
                }
            }
        },
        S4k: {
            type: "string",
            sensitive: true
        },
        S4n: {
            type: "structure",
            members: {
                smithy: {}
            },
            sensitive: true,
            union: true
        },
        S4s: {
            type: "string",
            sensitive: true
        },
        S4t: {
            type: "string",
            sensitive: true
        },
        S4y: {
            type: "string",
            sensitive: true
        },
        S50: {
            type: "structure",
            members: {
                classifies: {
                    type: "list",
                    member: {}
                },
                isA: {
                    type: "list",
                    member: {}
                }
            }
        },
        S57: {
            type: "string",
            sensitive: true
        },
        S5j: {
            type: "structure",
            members: {
                groupIdentifier: {},
                userIdentifier: {}
            },
            union: true
        },
        S5s: {
            type: "list",
            member: {
                type: "structure",
                required: [ "assetId", "assetRevision", "status" ],
                members: {
                    assetId: {},
                    assetRevision: {},
                    failureCause: {
                        shape: "S5u"
                    },
                    failureTimestamp: {
                        type: "timestamp"
                    },
                    grantedTimestamp: {
                        type: "timestamp"
                    },
                    status: {},
                    targetName: {}
                }
            }
        },
        S5u: {
            type: "structure",
            members: {
                message: {}
            }
        },
        S5x: {
            type: "structure",
            members: {
                listing: {
                    type: "structure",
                    required: [ "id", "revision" ],
                    members: {
                        id: {},
                        revision: {}
                    }
                }
            },
            union: true
        },
        S6b: {
            type: "list",
            member: {}
        },
        S6c: {
            type: "list",
            member: {}
        },
        S6e: {
            type: "string",
            sensitive: true
        },
        S6f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "content", "formName" ],
                members: {
                    content: {},
                    formName: {}
                }
            }
        },
        S6m: {
            type: "structure",
            members: {
                iam: {
                    type: "structure",
                    members: {
                        arn: {}
                    }
                },
                sso: {
                    type: "structure",
                    members: {
                        firstName: {
                            type: "string",
                            sensitive: true
                        },
                        lastName: {
                            type: "string",
                            sensitive: true
                        },
                        username: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            },
            union: true
        },
        S7w: {
            type: "structure",
            members: {
                added: {
                    type: "integer"
                },
                failed: {
                    type: "integer"
                },
                skipped: {
                    type: "integer"
                },
                unchanged: {
                    type: "integer"
                },
                updated: {
                    type: "integer"
                }
            }
        },
        S87: {
            type: "list",
            member: {}
        },
        S89: {
            type: "map",
            key: {},
            value: {
                type: "map",
                key: {},
                value: {}
            }
        },
        S8f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "revision" ],
                members: {
                    name: {
                        shape: "S1s"
                    },
                    revision: {}
                }
            }
        },
        Sc7: {
            type: "list",
            member: {}
        },
        Sc9: {
            type: "structure",
            members: {
                and: {
                    shape: "Sca"
                },
                filter: {
                    type: "structure",
                    required: [ "attribute", "value" ],
                    members: {
                        attribute: {},
                        value: {}
                    }
                },
                or: {
                    shape: "Sca"
                }
            },
            union: true
        },
        Sca: {
            type: "list",
            member: {
                shape: "Sc9"
            }
        },
        Sce: {
            type: "list",
            member: {
                type: "structure",
                required: [ "attribute" ],
                members: {
                    attribute: {}
                }
            }
        },
        Sci: {
            type: "structure",
            required: [ "attribute" ],
            members: {
                attribute: {},
                order: {}
            }
        }
    },
    paginators: {
        ListAssetRevisions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListDataSourceRunActivities: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListDataSourceRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListDataSources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListDomains: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListEnvironmentBlueprintConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListEnvironmentBlueprints: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListEnvironmentProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListNotifications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "notifications"
        },
        ListProjectMemberships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSubscriptionGrants: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSubscriptionRequests: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSubscriptionTargets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSubscriptions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        Search: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        SearchGroupProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        SearchListings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        SearchTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        SearchUserProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    }
};

AWS.apiLoader.services["launchwizard"] = {};

AWS.LaunchWizard = AWS.Service.defineService("launchwizard", [ "2018-05-10" ]);

AWS.apiLoader.services["launchwizard"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "launchwizard",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Launch Wizard",
        serviceId: "Launch Wizard",
        signatureVersion: "v4",
        signingName: "launchwizard",
        uid: "launch-wizard-2018-05-10"
    },
    operations: {
        CreateDeployment: {
            http: {
                requestUri: "/createDeployment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deploymentPatternName", "name", "specifications", "workloadName" ],
                members: {
                    deploymentPatternName: {},
                    dryRun: {
                        type: "boolean"
                    },
                    name: {},
                    specifications: {
                        shape: "S5"
                    },
                    workloadName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentId: {}
                }
            }
        },
        DeleteDeployment: {
            http: {
                requestUri: "/deleteDeployment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    statusReason: {}
                }
            },
            idempotent: true
        },
        GetDeployment: {
            http: {
                requestUri: "/getDeployment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deployment: {
                        type: "structure",
                        members: {
                            createdAt: {
                                type: "timestamp"
                            },
                            deletedAt: {
                                type: "timestamp"
                            },
                            id: {},
                            name: {},
                            patternName: {},
                            resourceGroup: {},
                            specifications: {
                                shape: "S5"
                            },
                            status: {},
                            workloadName: {}
                        }
                    }
                }
            }
        },
        GetWorkload: {
            http: {
                requestUri: "/getWorkload",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workloadName" ],
                members: {
                    workloadName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    workload: {
                        type: "structure",
                        members: {
                            description: {},
                            displayName: {},
                            documentationUrl: {},
                            iconUrl: {},
                            status: {},
                            statusMessage: {},
                            workloadName: {}
                        }
                    }
                }
            }
        },
        ListDeploymentEvents: {
            http: {
                requestUri: "/listDeploymentEvents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                description: {},
                                name: {},
                                status: {},
                                statusReason: {},
                                timestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                requestUri: "/listDeployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                id: {},
                                name: {},
                                patternName: {},
                                status: {},
                                workloadName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorkloadDeploymentPatterns: {
            http: {
                requestUri: "/listWorkloadDeploymentPatterns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workloadName" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    workloadName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workloadDeploymentPatterns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                deploymentPatternName: {},
                                description: {},
                                displayName: {},
                                status: {},
                                statusMessage: {},
                                workloadName: {},
                                workloadVersionName: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkloads: {
            http: {
                requestUri: "/listWorkloads",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workloads: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                displayName: {},
                                workloadName: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        }
    },
    paginators: {
        ListDeploymentEvents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deploymentEvents"
        },
        ListDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deployments"
        },
        ListWorkloadDeploymentPatterns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workloadDeploymentPatterns"
        },
        ListWorkloads: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workloads"
        }
    }
};

AWS.apiLoader.services["trustedadvisor"] = {};

AWS.TrustedAdvisor = AWS.Service.defineService("trustedadvisor", [ "2022-09-15" ]);

AWS.apiLoader.services["trustedadvisor"]["2022-09-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-09-15",
        endpointPrefix: "trustedadvisor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "TrustedAdvisor Public API",
        serviceId: "TrustedAdvisor",
        signatureVersion: "v4",
        signingName: "trustedadvisor",
        uid: "trustedadvisor-2022-09-15"
    },
    operations: {
        GetOrganizationRecommendation: {
            http: {
                method: "GET",
                requestUri: "/v1/organization-recommendations/{organizationRecommendationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "organizationRecommendationIdentifier" ],
                members: {
                    organizationRecommendationIdentifier: {
                        location: "uri",
                        locationName: "organizationRecommendationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    organizationRecommendation: {
                        type: "structure",
                        required: [ "arn", "description", "id", "name", "pillars", "resourcesAggregates", "source", "status", "type" ],
                        members: {
                            arn: {},
                            awsServices: {
                                shape: "S6"
                            },
                            checkArn: {},
                            createdAt: {
                                shape: "S9"
                            },
                            createdBy: {},
                            description: {},
                            id: {},
                            lastUpdatedAt: {
                                shape: "S9"
                            },
                            lifecycleStage: {},
                            name: {},
                            pillarSpecificAggregates: {
                                shape: "Sb"
                            },
                            pillars: {
                                shape: "Se"
                            },
                            resolvedAt: {
                                shape: "S9"
                            },
                            resourcesAggregates: {
                                shape: "Sg"
                            },
                            source: {},
                            status: {},
                            type: {},
                            updateReason: {
                                shape: "Sl"
                            },
                            updateReasonCode: {},
                            updatedOnBehalfOf: {},
                            updatedOnBehalfOfJobTitle: {}
                        }
                    }
                }
            }
        },
        GetRecommendation: {
            http: {
                method: "GET",
                requestUri: "/v1/recommendations/{recommendationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recommendationIdentifier" ],
                members: {
                    recommendationIdentifier: {
                        location: "uri",
                        locationName: "recommendationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendation: {
                        type: "structure",
                        required: [ "arn", "description", "id", "name", "pillars", "resourcesAggregates", "source", "status", "type" ],
                        members: {
                            arn: {},
                            awsServices: {
                                shape: "S6"
                            },
                            checkArn: {},
                            createdAt: {
                                shape: "S9"
                            },
                            createdBy: {},
                            description: {},
                            id: {},
                            lastUpdatedAt: {
                                shape: "S9"
                            },
                            lifecycleStage: {},
                            name: {},
                            pillarSpecificAggregates: {
                                shape: "Sb"
                            },
                            pillars: {
                                shape: "Se"
                            },
                            resolvedAt: {
                                shape: "S9"
                            },
                            resourcesAggregates: {
                                shape: "Sg"
                            },
                            source: {},
                            status: {},
                            type: {},
                            updateReason: {
                                shape: "Sl"
                            },
                            updateReasonCode: {},
                            updatedOnBehalfOf: {},
                            updatedOnBehalfOfJobTitle: {}
                        }
                    }
                }
            }
        },
        ListChecks: {
            http: {
                method: "GET",
                requestUri: "/v1/checks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    awsService: {
                        location: "querystring",
                        locationName: "awsService"
                    },
                    language: {
                        location: "querystring",
                        locationName: "language"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    pillar: {
                        location: "querystring",
                        locationName: "pillar"
                    },
                    source: {
                        location: "querystring",
                        locationName: "source"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "checkSummaries" ],
                members: {
                    checkSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "awsServices", "description", "id", "metadata", "name", "pillars", "source" ],
                            members: {
                                arn: {},
                                awsServices: {
                                    shape: "S6"
                                },
                                description: {},
                                id: {},
                                metadata: {
                                    shape: "S10"
                                },
                                name: {},
                                pillars: {
                                    shape: "Se"
                                },
                                source: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOrganizationRecommendationAccounts: {
            http: {
                method: "GET",
                requestUri: "/v1/organization-recommendations/{organizationRecommendationIdentifier}/accounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "organizationRecommendationIdentifier" ],
                members: {
                    affectedAccountId: {
                        location: "querystring",
                        locationName: "affectedAccountId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    organizationRecommendationIdentifier: {
                        location: "uri",
                        locationName: "organizationRecommendationIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accountRecommendationLifecycleSummaries" ],
                members: {
                    accountRecommendationLifecycleSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                accountRecommendationArn: {},
                                lastUpdatedAt: {
                                    shape: "S9"
                                },
                                lifecycleStage: {},
                                updateReason: {
                                    shape: "Sl"
                                },
                                updateReasonCode: {},
                                updatedOnBehalfOf: {},
                                updatedOnBehalfOfJobTitle: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOrganizationRecommendationResources: {
            http: {
                method: "GET",
                requestUri: "/v1/organization-recommendations/{organizationRecommendationIdentifier}/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "organizationRecommendationIdentifier" ],
                members: {
                    affectedAccountId: {
                        location: "querystring",
                        locationName: "affectedAccountId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    organizationRecommendationIdentifier: {
                        location: "uri",
                        locationName: "organizationRecommendationIdentifier"
                    },
                    regionCode: {
                        location: "querystring",
                        locationName: "regionCode"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "organizationRecommendationResourceSummaries" ],
                members: {
                    nextToken: {},
                    organizationRecommendationResourceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "awsResourceId", "id", "lastUpdatedAt", "metadata", "recommendationArn", "regionCode", "status" ],
                            members: {
                                accountId: {},
                                arn: {},
                                awsResourceId: {},
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S9"
                                },
                                metadata: {
                                    shape: "S10"
                                },
                                recommendationArn: {},
                                regionCode: {},
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        ListOrganizationRecommendations: {
            http: {
                method: "GET",
                requestUri: "/v1/organization-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    afterLastUpdatedAt: {
                        location: "querystring",
                        locationName: "afterLastUpdatedAt",
                        type: "timestamp"
                    },
                    awsService: {
                        location: "querystring",
                        locationName: "awsService"
                    },
                    beforeLastUpdatedAt: {
                        location: "querystring",
                        locationName: "beforeLastUpdatedAt",
                        type: "timestamp"
                    },
                    checkIdentifier: {
                        location: "querystring",
                        locationName: "checkIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    pillar: {
                        location: "querystring",
                        locationName: "pillar"
                    },
                    source: {
                        location: "querystring",
                        locationName: "source"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "organizationRecommendationSummaries" ],
                members: {
                    nextToken: {},
                    organizationRecommendationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "name", "pillars", "resourcesAggregates", "source", "status", "type" ],
                            members: {
                                arn: {},
                                awsServices: {
                                    shape: "S6"
                                },
                                checkArn: {},
                                createdAt: {
                                    shape: "S9"
                                },
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S9"
                                },
                                lifecycleStage: {},
                                name: {},
                                pillarSpecificAggregates: {
                                    shape: "Sb"
                                },
                                pillars: {
                                    shape: "Se"
                                },
                                resourcesAggregates: {
                                    shape: "Sg"
                                },
                                source: {},
                                status: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListRecommendationResources: {
            http: {
                method: "GET",
                requestUri: "/v1/recommendations/{recommendationIdentifier}/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recommendationIdentifier" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    recommendationIdentifier: {
                        location: "uri",
                        locationName: "recommendationIdentifier"
                    },
                    regionCode: {
                        location: "querystring",
                        locationName: "regionCode"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recommendationResourceSummaries" ],
                members: {
                    nextToken: {},
                    recommendationResourceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "awsResourceId", "id", "lastUpdatedAt", "metadata", "recommendationArn", "regionCode", "status" ],
                            members: {
                                arn: {},
                                awsResourceId: {},
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S9"
                                },
                                metadata: {
                                    shape: "S10"
                                },
                                recommendationArn: {},
                                regionCode: {},
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        ListRecommendations: {
            http: {
                method: "GET",
                requestUri: "/v1/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    afterLastUpdatedAt: {
                        location: "querystring",
                        locationName: "afterLastUpdatedAt",
                        type: "timestamp"
                    },
                    awsService: {
                        location: "querystring",
                        locationName: "awsService"
                    },
                    beforeLastUpdatedAt: {
                        location: "querystring",
                        locationName: "beforeLastUpdatedAt",
                        type: "timestamp"
                    },
                    checkIdentifier: {
                        location: "querystring",
                        locationName: "checkIdentifier"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    pillar: {
                        location: "querystring",
                        locationName: "pillar"
                    },
                    source: {
                        location: "querystring",
                        locationName: "source"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recommendationSummaries" ],
                members: {
                    nextToken: {},
                    recommendationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "id", "name", "pillars", "resourcesAggregates", "source", "status", "type" ],
                            members: {
                                arn: {},
                                awsServices: {
                                    shape: "S6"
                                },
                                checkArn: {},
                                createdAt: {
                                    shape: "S9"
                                },
                                id: {},
                                lastUpdatedAt: {
                                    shape: "S9"
                                },
                                lifecycleStage: {},
                                name: {},
                                pillarSpecificAggregates: {
                                    shape: "Sb"
                                },
                                pillars: {
                                    shape: "Se"
                                },
                                resourcesAggregates: {
                                    shape: "Sg"
                                },
                                source: {},
                                status: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateOrganizationRecommendationLifecycle: {
            http: {
                method: "PUT",
                requestUri: "/v1/organization-recommendations/{organizationRecommendationIdentifier}/lifecycle",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "lifecycleStage", "organizationRecommendationIdentifier" ],
                members: {
                    lifecycleStage: {},
                    organizationRecommendationIdentifier: {
                        location: "uri",
                        locationName: "organizationRecommendationIdentifier"
                    },
                    updateReason: {
                        shape: "Sl"
                    },
                    updateReasonCode: {}
                }
            },
            idempotent: true
        },
        UpdateRecommendationLifecycle: {
            http: {
                method: "PUT",
                requestUri: "/v1/recommendations/{recommendationIdentifier}/lifecycle",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "lifecycleStage", "recommendationIdentifier" ],
                members: {
                    lifecycleStage: {},
                    recommendationIdentifier: {
                        location: "uri",
                        locationName: "recommendationIdentifier"
                    },
                    updateReason: {
                        shape: "Sl"
                    },
                    updateReasonCode: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {}
        },
        S9: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sb: {
            type: "structure",
            members: {
                costOptimizing: {
                    type: "structure",
                    required: [ "estimatedMonthlySavings", "estimatedPercentMonthlySavings" ],
                    members: {
                        estimatedMonthlySavings: {
                            type: "double"
                        },
                        estimatedPercentMonthlySavings: {
                            type: "double"
                        }
                    }
                }
            }
        },
        Se: {
            type: "list",
            member: {}
        },
        Sg: {
            type: "structure",
            required: [ "errorCount", "okCount", "warningCount" ],
            members: {
                errorCount: {
                    type: "long"
                },
                okCount: {
                    type: "long"
                },
                warningCount: {
                    type: "long"
                }
            }
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListChecks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "checkSummaries"
        },
        ListOrganizationRecommendationAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accountRecommendationLifecycleSummaries"
        },
        ListOrganizationRecommendationResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "organizationRecommendationResourceSummaries"
        },
        ListOrganizationRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "organizationRecommendationSummaries"
        },
        ListRecommendationResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recommendationResourceSummaries"
        },
        ListRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recommendationSummaries"
        }
    }
};

AWS.apiLoader.services["cloudfrontkeyvaluestore"] = {};

AWS.CloudFrontKeyValueStore = AWS.Service.defineService("cloudfrontkeyvaluestore", [ "2022-07-26" ]);

AWS.apiLoader.services["cloudfrontkeyvaluestore"]["2022-07-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-07-26",
        endpointPrefix: "cloudfront-keyvaluestore",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CloudFront KeyValueStore",
        serviceId: "CloudFront KeyValueStore",
        signatureVersion: "v4",
        signingName: "cloudfront-keyvaluestore",
        uid: "cloudfront-keyvaluestore-2022-07-26"
    },
    operations: {
        DeleteKey: {
            http: {
                method: "DELETE",
                requestUri: "/key-value-stores/{KvsARN}/keys/{Key}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KvsARN", "Key", "IfMatch" ],
                members: {
                    KvsARN: {
                        contextParam: {
                            name: "KvsARN"
                        },
                        location: "uri",
                        locationName: "KvsARN"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ItemCount", "TotalSizeInBytes", "ETag" ],
                members: {
                    ItemCount: {
                        type: "integer"
                    },
                    TotalSizeInBytes: {
                        type: "long"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                }
            },
            idempotent: true
        },
        DescribeKeyValueStore: {
            http: {
                method: "GET",
                requestUri: "/key-value-stores/{KvsARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KvsARN" ],
                members: {
                    KvsARN: {
                        contextParam: {
                            name: "KvsARN"
                        },
                        location: "uri",
                        locationName: "KvsARN"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ItemCount", "TotalSizeInBytes", "KvsARN", "Created", "ETag" ],
                members: {
                    ItemCount: {
                        type: "integer"
                    },
                    TotalSizeInBytes: {
                        type: "long"
                    },
                    KvsARN: {},
                    Created: {
                        type: "timestamp"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    LastModified: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetKey: {
            http: {
                method: "GET",
                requestUri: "/key-value-stores/{KvsARN}/keys/{Key}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KvsARN", "Key" ],
                members: {
                    KvsARN: {
                        contextParam: {
                            name: "KvsARN"
                        },
                        location: "uri",
                        locationName: "KvsARN"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Key", "Value", "ItemCount", "TotalSizeInBytes" ],
                members: {
                    Key: {},
                    Value: {
                        shape: "Sd"
                    },
                    ItemCount: {
                        type: "integer"
                    },
                    TotalSizeInBytes: {
                        type: "long"
                    }
                }
            }
        },
        ListKeys: {
            http: {
                method: "GET",
                requestUri: "/key-value-stores/{KvsARN}/keys",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KvsARN" ],
                members: {
                    KvsARN: {
                        contextParam: {
                            name: "KvsARN"
                        },
                        location: "uri",
                        locationName: "KvsARN"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value" ],
                            members: {
                                Key: {},
                                Value: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutKey: {
            http: {
                method: "PUT",
                requestUri: "/key-value-stores/{KvsARN}/keys/{Key}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Key", "Value", "KvsARN", "IfMatch" ],
                members: {
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    Value: {
                        shape: "Sd"
                    },
                    KvsARN: {
                        contextParam: {
                            name: "KvsARN"
                        },
                        location: "uri",
                        locationName: "KvsARN"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ItemCount", "TotalSizeInBytes", "ETag" ],
                members: {
                    ItemCount: {
                        type: "integer"
                    },
                    TotalSizeInBytes: {
                        type: "long"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                }
            },
            idempotent: true
        },
        UpdateKeys: {
            http: {
                requestUri: "/key-value-stores/{KvsARN}/keys",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KvsARN", "IfMatch" ],
                members: {
                    KvsARN: {
                        contextParam: {
                            name: "KvsARN"
                        },
                        location: "uri",
                        locationName: "KvsARN"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    },
                    Puts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value" ],
                            members: {
                                Key: {},
                                Value: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    Deletes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key" ],
                            members: {
                                Key: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ItemCount", "TotalSizeInBytes", "ETag" ],
                members: {
                    ItemCount: {
                        type: "integer"
                    },
                    TotalSizeInBytes: {
                        type: "long"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sd: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListKeys: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["inspectorscan"] = {};

AWS.InspectorScan = AWS.Service.defineService("inspectorscan", [ "2023-08-08" ]);

AWS.apiLoader.services["inspectorscan"]["2023-08-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-08-08",
        endpointPrefix: "inspector-scan",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "inspector-scan",
        serviceFullName: "Inspector Scan",
        serviceId: "Inspector Scan",
        signatureVersion: "v4",
        signingName: "inspector-scan",
        uid: "inspector-scan-2023-08-08"
    },
    operations: {
        ScanSbom: {
            http: {
                requestUri: "/scan/sbom",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sbom" ],
                members: {
                    sbom: {
                        shape: "S2"
                    },
                    outputFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sbom: {
                        shape: "S2"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {},
            document: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["bcmdataexports"] = {};

AWS.BCMDataExports = AWS.Service.defineService("bcmdataexports", [ "2023-11-26" ]);

AWS.apiLoader.services["bcmdataexports"]["2023-11-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-11-26",
        endpointPrefix: "bcm-data-exports",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Billing and Cost Management Data Exports",
        serviceId: "BCM Data Exports",
        signatureVersion: "v4",
        signingName: "bcm-data-exports",
        targetPrefix: "AWSBillingAndCostManagementDataExports",
        uid: "bcm-data-exports-2023-11-26"
    },
    operations: {
        CreateExport: {
            input: {
                type: "structure",
                required: [ "Export" ],
                members: {
                    Export: {
                        shape: "S2"
                    },
                    ResourceTags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportArn: {}
                }
            }
        },
        DeleteExport: {
            input: {
                type: "structure",
                required: [ "ExportArn" ],
                members: {
                    ExportArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportArn: {}
                }
            },
            idempotent: true
        },
        GetExecution: {
            input: {
                type: "structure",
                required: [ "ExecutionId", "ExportArn" ],
                members: {
                    ExecutionId: {},
                    ExportArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExecutionId: {},
                    ExecutionStatus: {
                        shape: "Su"
                    },
                    Export: {
                        shape: "S2"
                    }
                }
            }
        },
        GetExport: {
            input: {
                type: "structure",
                required: [ "ExportArn" ],
                members: {
                    ExportArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Export: {
                        shape: "S2"
                    },
                    ExportStatus: {
                        shape: "S10"
                    }
                }
            }
        },
        GetTable: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {},
                    TableProperties: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    Schema: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                Name: {},
                                Type: {}
                            }
                        }
                    },
                    TableName: {},
                    TableProperties: {
                        shape: "S7"
                    }
                }
            }
        },
        ListExecutions: {
            input: {
                type: "structure",
                required: [ "ExportArn" ],
                members: {
                    ExportArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Executions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ExecutionId", "ExecutionStatus" ],
                            members: {
                                ExecutionId: {},
                                ExecutionStatus: {
                                    shape: "Su"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExports: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Exports: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ExportArn", "ExportName", "ExportStatus" ],
                            members: {
                                ExportArn: {},
                                ExportName: {},
                                ExportStatus: {
                                    shape: "S10"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTables: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                TableName: {},
                                TableProperties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {},
                                            Description: {},
                                            Name: {},
                                            ValidValues: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ResourceTags: {
                        shape: "Sl"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "ResourceTags" ],
                members: {
                    ResourceArn: {},
                    ResourceTags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "ResourceTagKeys" ],
                members: {
                    ResourceArn: {},
                    ResourceTagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateExport: {
            input: {
                type: "structure",
                required: [ "Export", "ExportArn" ],
                members: {
                    Export: {
                        shape: "S2"
                    },
                    ExportArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportArn: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "DataQuery", "DestinationConfigurations", "Name", "RefreshCadence" ],
            members: {
                DataQuery: {
                    type: "structure",
                    required: [ "QueryStatement" ],
                    members: {
                        QueryStatement: {},
                        TableConfigurations: {
                            type: "map",
                            key: {},
                            value: {
                                shape: "S7"
                            }
                        }
                    }
                },
                Description: {},
                DestinationConfigurations: {
                    type: "structure",
                    required: [ "S3Destination" ],
                    members: {
                        S3Destination: {
                            type: "structure",
                            required: [ "S3Bucket", "S3OutputConfigurations", "S3Prefix", "S3Region" ],
                            members: {
                                S3Bucket: {},
                                S3OutputConfigurations: {
                                    type: "structure",
                                    required: [ "Compression", "Format", "OutputType", "Overwrite" ],
                                    members: {
                                        Compression: {},
                                        Format: {},
                                        OutputType: {},
                                        Overwrite: {}
                                    }
                                },
                                S3Prefix: {},
                                S3Region: {}
                            }
                        }
                    }
                },
                ExportArn: {},
                Name: {},
                RefreshCadence: {
                    type: "structure",
                    required: [ "Frequency" ],
                    members: {
                        Frequency: {}
                    }
                }
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                CompletedAt: {
                    shape: "Sv"
                },
                CreatedAt: {
                    shape: "Sv"
                },
                LastUpdatedAt: {
                    shape: "Sv"
                },
                StatusCode: {},
                StatusReason: {}
            }
        },
        Sv: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S10: {
            type: "structure",
            members: {
                CreatedAt: {
                    shape: "Sv"
                },
                LastRefreshedAt: {
                    shape: "Sv"
                },
                LastUpdatedAt: {
                    shape: "Sv"
                },
                StatusCode: {},
                StatusReason: {}
            }
        }
    },
    paginators: {
        ListExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Executions"
        },
        ListExports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Exports"
        },
        ListTables: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tables"
        }
    }
};

AWS.apiLoader.services["costoptimizationhub"] = {};

AWS.CostOptimizationHub = AWS.Service.defineService("costoptimizationhub", [ "2022-07-26" ]);

AWS.apiLoader.services["costoptimizationhub"]["2022-07-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-07-26",
        endpointPrefix: "cost-optimization-hub",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Cost Optimization Hub",
        serviceId: "Cost Optimization Hub",
        signatureVersion: "v4",
        signingName: "cost-optimization-hub",
        targetPrefix: "CostOptimizationHubService",
        uid: "cost-optimization-hub-2022-07-26"
    },
    operations: {
        GetPreferences: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    memberAccountDiscountVisibility: {},
                    savingsEstimationMode: {}
                }
            }
        },
        GetRecommendation: {
            input: {
                type: "structure",
                required: [ "recommendationId" ],
                members: {
                    recommendationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accountId: {},
                    actionType: {},
                    costCalculationLookbackPeriodInDays: {
                        type: "integer"
                    },
                    currencyCode: {},
                    currentResourceDetails: {
                        shape: "Sa"
                    },
                    currentResourceType: {},
                    estimatedMonthlyCost: {
                        type: "double"
                    },
                    estimatedMonthlySavings: {
                        type: "double"
                    },
                    estimatedSavingsOverCostCalculationLookbackPeriod: {
                        type: "double"
                    },
                    estimatedSavingsPercentage: {
                        type: "double"
                    },
                    implementationEffort: {},
                    lastRefreshTimestamp: {
                        type: "timestamp"
                    },
                    recommendationId: {},
                    recommendationLookbackPeriodInDays: {
                        type: "integer"
                    },
                    recommendedResourceDetails: {
                        shape: "Sa"
                    },
                    recommendedResourceType: {},
                    region: {},
                    resourceArn: {},
                    resourceId: {},
                    restartNeeded: {
                        type: "boolean"
                    },
                    rollbackPossible: {
                        type: "boolean"
                    },
                    source: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        ListEnrollmentStatuses: {
            input: {
                type: "structure",
                members: {
                    accountId: {},
                    includeOrganizationInfo: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                createdTimestamp: {
                                    type: "timestamp"
                                },
                                lastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecommendationSummaries: {
            input: {
                type: "structure",
                required: [ "groupBy" ],
                members: {
                    filter: {
                        shape: "S1w"
                    },
                    groupBy: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    currencyCode: {},
                    estimatedTotalDedupedSavings: {
                        type: "double"
                    },
                    groupBy: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                estimatedMonthlySavings: {
                                    type: "double"
                                },
                                group: {},
                                recommendationCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecommendations: {
            input: {
                type: "structure",
                members: {
                    filter: {
                        shape: "S1w"
                    },
                    includeAllRecommendations: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    orderBy: {
                        type: "structure",
                        members: {
                            dimension: {},
                            order: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                actionType: {},
                                currencyCode: {},
                                currentResourceSummary: {},
                                currentResourceType: {},
                                estimatedMonthlyCost: {
                                    type: "double"
                                },
                                estimatedMonthlySavings: {
                                    type: "double"
                                },
                                estimatedSavingsPercentage: {
                                    type: "double"
                                },
                                implementationEffort: {},
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                recommendationId: {},
                                recommendationLookbackPeriodInDays: {
                                    type: "integer"
                                },
                                recommendedResourceSummary: {},
                                recommendedResourceType: {},
                                region: {},
                                resourceArn: {},
                                resourceId: {},
                                restartNeeded: {
                                    type: "boolean"
                                },
                                rollbackPossible: {
                                    type: "boolean"
                                },
                                source: {},
                                tags: {
                                    shape: "S1k"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        UpdateEnrollmentStatus: {
            input: {
                type: "structure",
                required: [ "status" ],
                members: {
                    includeMemberAccounts: {
                        type: "boolean"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        UpdatePreferences: {
            input: {
                type: "structure",
                members: {
                    memberAccountDiscountVisibility: {},
                    savingsEstimationMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    memberAccountDiscountVisibility: {},
                    savingsEstimationMode: {}
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                computeSavingsPlans: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                hourlyCommitment: {},
                                paymentOption: {},
                                term: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sd"
                        }
                    }
                },
                ebsVolume: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                attachmentState: {},
                                performance: {
                                    type: "structure",
                                    members: {
                                        iops: {
                                            type: "double"
                                        },
                                        throughput: {
                                            type: "double"
                                        }
                                    }
                                },
                                storage: {
                                    type: "structure",
                                    members: {
                                        sizeInGb: {
                                            type: "double"
                                        },
                                        type: {}
                                    }
                                }
                            }
                        },
                        costCalculation: {
                            shape: "Sk"
                        }
                    }
                },
                ec2AutoScalingGroup: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                instance: {
                                    shape: "Sr"
                                }
                            }
                        },
                        costCalculation: {
                            shape: "Sk"
                        }
                    }
                },
                ec2Instance: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                instance: {
                                    shape: "Sr"
                                }
                            }
                        },
                        costCalculation: {
                            shape: "Sk"
                        }
                    }
                },
                ec2InstanceSavingsPlans: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                hourlyCommitment: {},
                                instanceFamily: {},
                                paymentOption: {},
                                savingsPlansRegion: {},
                                term: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sd"
                        }
                    }
                },
                ec2ReservedInstances: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                currentGeneration: {},
                                instanceFamily: {},
                                instanceType: {},
                                monthlyRecurringCost: {},
                                normalizedUnitsToPurchase: {},
                                numberOfInstancesToPurchase: {},
                                offeringClass: {},
                                paymentOption: {},
                                platform: {},
                                reservedInstancesRegion: {},
                                service: {},
                                sizeFlexEligible: {
                                    type: "boolean"
                                },
                                tenancy: {},
                                term: {},
                                upfrontCost: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sz"
                        }
                    }
                },
                ecsService: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                compute: {
                                    shape: "S13"
                                }
                            }
                        },
                        costCalculation: {
                            shape: "Sk"
                        }
                    }
                },
                elastiCacheReservedInstances: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                currentGeneration: {},
                                instanceFamily: {},
                                instanceType: {},
                                monthlyRecurringCost: {},
                                normalizedUnitsToPurchase: {},
                                numberOfInstancesToPurchase: {},
                                paymentOption: {},
                                reservedInstancesRegion: {},
                                service: {},
                                sizeFlexEligible: {
                                    type: "boolean"
                                },
                                term: {},
                                upfrontCost: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sz"
                        }
                    }
                },
                lambdaFunction: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                compute: {
                                    shape: "S13"
                                }
                            }
                        },
                        costCalculation: {
                            shape: "Sk"
                        }
                    }
                },
                openSearchReservedInstances: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                currentGeneration: {},
                                instanceType: {},
                                monthlyRecurringCost: {},
                                normalizedUnitsToPurchase: {},
                                numberOfInstancesToPurchase: {},
                                paymentOption: {},
                                reservedInstancesRegion: {},
                                service: {},
                                sizeFlexEligible: {
                                    type: "boolean"
                                },
                                term: {},
                                upfrontCost: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sz"
                        }
                    }
                },
                rdsReservedInstances: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                currentGeneration: {},
                                databaseEdition: {},
                                databaseEngine: {},
                                deploymentOption: {},
                                instanceFamily: {},
                                instanceType: {},
                                licenseModel: {},
                                monthlyRecurringCost: {},
                                normalizedUnitsToPurchase: {},
                                numberOfInstancesToPurchase: {},
                                paymentOption: {},
                                reservedInstancesRegion: {},
                                service: {},
                                sizeFlexEligible: {
                                    type: "boolean"
                                },
                                term: {},
                                upfrontCost: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sz"
                        }
                    }
                },
                redshiftReservedInstances: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                currentGeneration: {},
                                instanceFamily: {},
                                instanceType: {},
                                monthlyRecurringCost: {},
                                normalizedUnitsToPurchase: {},
                                numberOfInstancesToPurchase: {},
                                paymentOption: {},
                                reservedInstancesRegion: {},
                                service: {},
                                sizeFlexEligible: {
                                    type: "boolean"
                                },
                                term: {},
                                upfrontCost: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sz"
                        }
                    }
                },
                sageMakerSavingsPlans: {
                    type: "structure",
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                accountScope: {},
                                hourlyCommitment: {},
                                paymentOption: {},
                                term: {}
                            }
                        },
                        costCalculation: {
                            shape: "Sd"
                        }
                    }
                }
            },
            union: true
        },
        Sd: {
            type: "structure",
            members: {
                pricing: {
                    type: "structure",
                    members: {
                        estimatedMonthlyCommitment: {
                            type: "double"
                        },
                        estimatedOnDemandCost: {
                            type: "double"
                        },
                        monthlySavingsPlansEligibleCost: {
                            type: "double"
                        },
                        savingsPercentage: {
                            type: "double"
                        }
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                pricing: {
                    type: "structure",
                    members: {
                        estimatedCostAfterDiscounts: {
                            type: "double"
                        },
                        estimatedCostBeforeDiscounts: {
                            type: "double"
                        },
                        estimatedDiscounts: {
                            type: "structure",
                            members: {
                                otherDiscount: {
                                    type: "double"
                                },
                                reservedInstancesDiscount: {
                                    type: "double"
                                },
                                savingsPlansDiscount: {
                                    type: "double"
                                }
                            }
                        },
                        estimatedNetUnusedAmortizedCommitments: {
                            type: "double"
                        }
                    }
                },
                usages: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            operation: {},
                            productCode: {},
                            unit: {},
                            usageAmount: {
                                type: "double"
                            },
                            usageType: {}
                        }
                    }
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                type: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                pricing: {
                    type: "structure",
                    members: {
                        estimatedMonthlyAmortizedReservationCost: {
                            type: "double"
                        },
                        estimatedOnDemandCost: {
                            type: "double"
                        },
                        monthlyReservationEligibleCost: {
                            type: "double"
                        },
                        savingsPercentage: {
                            type: "double"
                        }
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                architecture: {},
                memorySizeInMB: {
                    type: "integer"
                },
                platform: {},
                vCpu: {
                    type: "double"
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                accountIds: {
                    type: "list",
                    member: {}
                },
                actionTypes: {
                    type: "list",
                    member: {}
                },
                implementationEfforts: {
                    type: "list",
                    member: {}
                },
                recommendationIds: {
                    type: "list",
                    member: {}
                },
                regions: {
                    type: "list",
                    member: {}
                },
                resourceArns: {
                    type: "list",
                    member: {}
                },
                resourceIds: {
                    type: "list",
                    member: {}
                },
                resourceTypes: {
                    type: "list",
                    member: {}
                },
                restartNeeded: {
                    type: "boolean"
                },
                rollbackPossible: {
                    type: "boolean"
                },
                tags: {
                    shape: "S1k"
                }
            }
        }
    },
    paginators: {
        ListEnrollmentStatuses: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListRecommendationSummaries: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    }
};

AWS.apiLoader.services["eksauth"] = {};

AWS.EKSAuth = AWS.Service.defineService("eksauth", [ "2023-11-26" ]);

AWS.apiLoader.services["eksauth"]["2023-11-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-11-26",
        endpointPrefix: "eks-auth",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon EKS Auth",
        serviceId: "EKS Auth",
        signatureVersion: "v4",
        signingName: "eks-auth",
        uid: "eks-auth-2023-11-26"
    },
    operations: {
        AssumeRoleForPodIdentity: {
            http: {
                requestUri: "/clusters/{clusterName}/assume-role-for-pod-identity",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clusterName", "token" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "clusterName"
                    },
                    token: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "subject", "audience", "podIdentityAssociation", "assumedRoleUser", "credentials" ],
                members: {
                    subject: {
                        type: "structure",
                        required: [ "namespace", "serviceAccount" ],
                        members: {
                            namespace: {},
                            serviceAccount: {}
                        }
                    },
                    audience: {},
                    podIdentityAssociation: {
                        type: "structure",
                        required: [ "associationArn", "associationId" ],
                        members: {
                            associationArn: {},
                            associationId: {}
                        }
                    },
                    assumedRoleUser: {
                        type: "structure",
                        required: [ "arn", "assumeRoleId" ],
                        members: {
                            arn: {},
                            assumeRoleId: {}
                        }
                    },
                    credentials: {
                        type: "structure",
                        required: [ "sessionToken", "secretAccessKey", "accessKeyId", "expiration" ],
                        members: {
                            sessionToken: {},
                            secretAccessKey: {},
                            accessKeyId: {},
                            expiration: {
                                type: "timestamp"
                            }
                        },
                        sensitive: true
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {},
    waiters: {}
};

AWS.apiLoader.services["freetier"] = {};

AWS.FreeTier = AWS.Service.defineService("freetier", [ "2023-09-07" ]);

AWS.apiLoader.services["freetier"]["2023-09-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-09-07",
        endpointPrefix: "freetier",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS Free Tier",
        serviceId: "FreeTier",
        signatureVersion: "v4",
        signingName: "freetier",
        targetPrefix: "AWSFreeTierService",
        uid: "freetier-2023-09-07"
    },
    operations: {
        GetFreeTierUsage: {
            input: {
                type: "structure",
                members: {
                    filter: {
                        shape: "S2"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "freeTierUsages" ],
                members: {
                    freeTierUsages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                actualUsageAmount: {
                                    type: "double"
                                },
                                description: {},
                                forecastedUsageAmount: {
                                    type: "double"
                                },
                                freeTierType: {},
                                limit: {
                                    type: "double"
                                },
                                operation: {},
                                region: {},
                                service: {},
                                unit: {},
                                usageType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                And: {
                    shape: "S3"
                },
                Dimensions: {
                    type: "structure",
                    required: [ "Key", "MatchOptions", "Values" ],
                    members: {
                        Key: {},
                        MatchOptions: {
                            type: "list",
                            member: {}
                        },
                        Values: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                Not: {
                    shape: "S2"
                },
                Or: {
                    shape: "S3"
                }
            }
        },
        S3: {
            type: "list",
            member: {
                shape: "S2"
            }
        }
    },
    paginators: {
        GetFreeTierUsage: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "freeTierUsages"
        }
    }
};

AWS.apiLoader.services["repostspace"] = {};

AWS.Repostspace = AWS.Service.defineService("repostspace", [ "2022-05-13" ]);

AWS.apiLoader.services["repostspace"]["2022-05-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-05-13",
        endpointPrefix: "repostspace",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS re:Post Private",
        serviceId: "repostspace",
        signatureVersion: "v4",
        signingName: "repostspace",
        uid: "repostspace-2022-05-13"
    },
    operations: {
        CreateSpace: {
            http: {
                requestUri: "/spaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "subdomain", "tier" ],
                members: {
                    description: {
                        shape: "S2"
                    },
                    name: {
                        shape: "S3"
                    },
                    roleArn: {},
                    subdomain: {},
                    tags: {
                        shape: "S6"
                    },
                    tier: {},
                    userKMSKey: {}
                }
            },
            output: {
                type: "structure",
                required: [ "spaceId" ],
                members: {
                    spaceId: {}
                }
            },
            idempotent: true
        },
        DeleteSpace: {
            http: {
                method: "DELETE",
                requestUri: "/spaces/{spaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceId" ],
                members: {
                    spaceId: {
                        location: "uri",
                        locationName: "spaceId"
                    }
                }
            },
            idempotent: true
        },
        DeregisterAdmin: {
            http: {
                method: "DELETE",
                requestUri: "/spaces/{spaceId}/admins/{adminId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "adminId", "spaceId" ],
                members: {
                    adminId: {
                        location: "uri",
                        locationName: "adminId"
                    },
                    spaceId: {
                        location: "uri",
                        locationName: "spaceId"
                    }
                }
            },
            idempotent: true
        },
        GetSpace: {
            http: {
                method: "GET",
                requestUri: "/spaces/{spaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceId" ],
                members: {
                    spaceId: {
                        location: "uri",
                        locationName: "spaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "clientId", "configurationStatus", "createDateTime", "name", "randomDomain", "spaceId", "status", "storageLimit", "tier", "vanityDomain", "vanityDomainStatus" ],
                members: {
                    arn: {},
                    clientId: {},
                    configurationStatus: {},
                    contentSize: {
                        type: "long"
                    },
                    createDateTime: {
                        shape: "Sl"
                    },
                    customerRoleArn: {},
                    deleteDateTime: {
                        shape: "Sl"
                    },
                    description: {
                        shape: "S2"
                    },
                    groupAdmins: {
                        type: "list",
                        member: {}
                    },
                    name: {
                        shape: "S3"
                    },
                    randomDomain: {},
                    spaceId: {},
                    status: {},
                    storageLimit: {
                        type: "long"
                    },
                    tier: {},
                    userAdmins: {
                        type: "list",
                        member: {}
                    },
                    userCount: {
                        type: "integer"
                    },
                    userKMSKey: {},
                    vanityDomain: {},
                    vanityDomainStatus: {}
                }
            }
        },
        ListSpaces: {
            http: {
                method: "GET",
                requestUri: "/spaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "spaces" ],
                members: {
                    nextToken: {},
                    spaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "configurationStatus", "createDateTime", "name", "randomDomain", "spaceId", "status", "storageLimit", "tier", "vanityDomain", "vanityDomainStatus" ],
                            members: {
                                arn: {},
                                configurationStatus: {},
                                contentSize: {
                                    type: "long"
                                },
                                createDateTime: {
                                    shape: "Sl"
                                },
                                deleteDateTime: {
                                    shape: "Sl"
                                },
                                description: {
                                    shape: "S2"
                                },
                                name: {
                                    shape: "S3"
                                },
                                randomDomain: {},
                                spaceId: {},
                                status: {},
                                storageLimit: {
                                    type: "long"
                                },
                                tier: {},
                                userCount: {
                                    type: "integer"
                                },
                                userKMSKey: {},
                                vanityDomain: {},
                                vanityDomainStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        RegisterAdmin: {
            http: {
                requestUri: "/spaces/{spaceId}/admins/{adminId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "adminId", "spaceId" ],
                members: {
                    adminId: {
                        location: "uri",
                        locationName: "adminId"
                    },
                    spaceId: {
                        location: "uri",
                        locationName: "spaceId"
                    }
                }
            },
            idempotent: true
        },
        SendInvites: {
            http: {
                requestUri: "/spaces/{spaceId}/invite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessorIds", "body", "spaceId", "title" ],
                members: {
                    accessorIds: {
                        type: "list",
                        member: {}
                    },
                    body: {
                        type: "string",
                        sensitive: true
                    },
                    spaceId: {
                        location: "uri",
                        locationName: "spaceId"
                    },
                    title: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateSpace: {
            http: {
                method: "PUT",
                requestUri: "/spaces/{spaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "spaceId" ],
                members: {
                    description: {
                        shape: "S2"
                    },
                    roleArn: {},
                    spaceId: {
                        location: "uri",
                        locationName: "spaceId"
                    },
                    tier: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S3: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sl: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListSpaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "spaces"
        }
    }
};

AWS.apiLoader.services["workspacesthinclient"] = {};

AWS.WorkSpacesThinClient = AWS.Service.defineService("workspacesthinclient", [ "2023-08-22" ]);

AWS.apiLoader.services["workspacesthinclient"]["2023-08-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-08-22",
        endpointPrefix: "thinclient",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon WorkSpaces Thin Client",
        serviceId: "WorkSpaces Thin Client",
        signatureVersion: "v4",
        signingName: "thinclient",
        uid: "workspaces-thin-client-2023-08-22"
    },
    operations: {
        CreateEnvironment: {
            http: {
                requestUri: "/environments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "desktopArn" ],
                members: {
                    name: {
                        shape: "S2"
                    },
                    desktopArn: {},
                    desktopEndpoint: {
                        shape: "S4"
                    },
                    softwareSetUpdateSchedule: {},
                    maintenanceWindow: {
                        shape: "S6"
                    },
                    softwareSetUpdateMode: {},
                    desiredSoftwareSetId: {},
                    kmsKeyArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "Sk"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteDevice: {
            http: {
                method: "DELETE",
                requestUri: "/devices/{id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        DeregisterDevice: {
            http: {
                requestUri: "/deregister-device/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    targetDeviceStatus: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        GetDevice: {
            http: {
                method: "GET",
                requestUri: "/devices/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    device: {
                        type: "structure",
                        members: {
                            id: {},
                            serialNumber: {},
                            name: {
                                shape: "S11"
                            },
                            model: {},
                            environmentId: {},
                            status: {},
                            currentSoftwareSetId: {},
                            currentSoftwareSetVersion: {},
                            desiredSoftwareSetId: {},
                            pendingSoftwareSetId: {},
                            pendingSoftwareSetVersion: {},
                            softwareSetUpdateSchedule: {},
                            softwareSetComplianceStatus: {},
                            softwareSetUpdateStatus: {},
                            lastConnectedAt: {
                                type: "timestamp"
                            },
                            lastPostureAt: {
                                type: "timestamp"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            },
                            arn: {},
                            kmsKeyArn: {},
                            tags: {
                                shape: "Sp"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {
                                shape: "S2"
                            },
                            desktopArn: {},
                            desktopEndpoint: {
                                shape: "S4"
                            },
                            desktopType: {},
                            activationCode: {},
                            registeredDevicesCount: {
                                type: "integer"
                            },
                            softwareSetUpdateSchedule: {},
                            maintenanceWindow: {
                                shape: "S6"
                            },
                            softwareSetUpdateMode: {},
                            desiredSoftwareSetId: {},
                            pendingSoftwareSetId: {},
                            pendingSoftwareSetVersion: {},
                            softwareSetComplianceStatus: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            },
                            arn: {},
                            kmsKeyArn: {},
                            tags: {
                                shape: "Sp"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetSoftwareSet: {
            http: {
                method: "GET",
                requestUri: "/softwaresets/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    softwareSet: {
                        type: "structure",
                        members: {
                            id: {},
                            version: {},
                            releasedAt: {
                                type: "timestamp"
                            },
                            supportedUntil: {
                                type: "timestamp"
                            },
                            validationStatus: {},
                            software: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        version: {}
                                    }
                                }
                            },
                            arn: {}
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    devices: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environments: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListSoftwareSets: {
            http: {
                method: "GET",
                requestUri: "/softwaresets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    softwareSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                version: {},
                                releasedAt: {
                                    type: "timestamp"
                                },
                                supportedUntil: {
                                    type: "timestamp"
                                },
                                validationStatus: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        UpdateDevice: {
            http: {
                method: "PATCH",
                requestUri: "/devices/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {
                        shape: "S11"
                    },
                    desiredSoftwareSetId: {},
                    softwareSetUpdateSchedule: {},
                    kmsKeyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    device: {
                        shape: "S1l"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/environments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {
                        shape: "S2"
                    },
                    desktopArn: {},
                    desktopEndpoint: {
                        shape: "S4"
                    },
                    softwareSetUpdateSchedule: {},
                    maintenanceWindow: {
                        shape: "S6"
                    },
                    softwareSetUpdateMode: {},
                    desiredSoftwareSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "Sk"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        UpdateSoftwareSet: {
            http: {
                method: "PATCH",
                requestUri: "/softwaresets/{id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "id", "validationStatus" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    validationStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "structure",
            members: {
                type: {},
                startTimeHour: {
                    type: "integer"
                },
                startTimeMinute: {
                    type: "integer"
                },
                endTimeHour: {
                    type: "integer"
                },
                endTimeMinute: {
                    type: "integer"
                },
                daysOfTheWeek: {
                    type: "list",
                    member: {}
                },
                applyTimeOf: {}
            }
        },
        Sh: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sk: {
            type: "structure",
            members: {
                id: {},
                name: {
                    shape: "S2"
                },
                desktopArn: {},
                desktopEndpoint: {
                    shape: "S4"
                },
                desktopType: {},
                activationCode: {},
                softwareSetUpdateSchedule: {},
                maintenanceWindow: {
                    shape: "S6"
                },
                softwareSetUpdateMode: {},
                desiredSoftwareSetId: {},
                pendingSoftwareSetId: {},
                createdAt: {
                    type: "timestamp"
                },
                updatedAt: {
                    type: "timestamp"
                },
                arn: {},
                tags: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                resourceArn: {},
                internalId: {}
            },
            sensitive: true
        },
        S11: {
            type: "string",
            sensitive: true
        },
        S1l: {
            type: "structure",
            members: {
                id: {},
                serialNumber: {},
                name: {
                    shape: "S11"
                },
                model: {},
                environmentId: {},
                status: {},
                currentSoftwareSetId: {},
                desiredSoftwareSetId: {},
                pendingSoftwareSetId: {},
                softwareSetUpdateSchedule: {},
                lastConnectedAt: {
                    type: "timestamp"
                },
                lastPostureAt: {
                    type: "timestamp"
                },
                createdAt: {
                    type: "timestamp"
                },
                updatedAt: {
                    type: "timestamp"
                },
                arn: {},
                tags: {
                    shape: "Sp"
                }
            }
        }
    },
    paginators: {
        ListDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "devices"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environments"
        },
        ListSoftwareSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "softwareSets"
        }
    }
};

AWS.apiLoader.services["b2bi"] = {};

AWS.B2bi = AWS.Service.defineService("b2bi", [ "2022-06-23" ]);

AWS.apiLoader.services["b2bi"]["2022-06-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-06-23",
        endpointPrefix: "b2bi",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "AWS B2BI",
        serviceFullName: "AWS B2B Data Interchange",
        serviceId: "b2bi",
        signatureVersion: "v4",
        signingName: "b2bi",
        targetPrefix: "B2BI",
        uid: "b2bi-2022-06-23"
    },
    operations: {
        CreateCapability: {
            input: {
                type: "structure",
                required: [ "name", "type", "configuration" ],
                members: {
                    name: {},
                    type: {},
                    configuration: {
                        shape: "S4"
                    },
                    instructionsDocuments: {
                        shape: "Se"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "capabilityId", "capabilityArn", "name", "type", "configuration", "createdAt" ],
                members: {
                    capabilityId: {},
                    capabilityArn: {},
                    name: {},
                    type: {},
                    configuration: {
                        shape: "S4"
                    },
                    instructionsDocuments: {
                        shape: "Se"
                    },
                    createdAt: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        CreatePartnership: {
            input: {
                type: "structure",
                required: [ "profileId", "name", "email" ],
                members: {
                    profileId: {},
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    capabilities: {
                        shape: "St"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profileId", "partnershipId", "partnershipArn", "createdAt" ],
                members: {
                    profileId: {},
                    partnershipId: {},
                    partnershipArn: {},
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    capabilities: {
                        shape: "St"
                    },
                    tradingPartnerId: {},
                    createdAt: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        CreateProfile: {
            input: {
                type: "structure",
                required: [ "name", "phone", "businessName", "logging" ],
                members: {
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    businessName: {},
                    logging: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profileId", "profileArn", "name", "businessName", "phone", "createdAt" ],
                members: {
                    profileId: {},
                    profileArn: {},
                    name: {},
                    businessName: {},
                    phone: {
                        shape: "Ss"
                    },
                    email: {
                        shape: "Sr"
                    },
                    logging: {},
                    logGroupName: {},
                    createdAt: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        CreateTransformer: {
            input: {
                type: "structure",
                required: [ "name", "fileFormat", "mappingTemplate", "ediType" ],
                members: {
                    name: {},
                    fileFormat: {},
                    mappingTemplate: {},
                    ediType: {
                        shape: "S6"
                    },
                    sampleDocument: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "transformerId", "transformerArn", "name", "fileFormat", "mappingTemplate", "status", "ediType", "createdAt" ],
                members: {
                    transformerId: {},
                    transformerArn: {},
                    name: {},
                    fileFormat: {},
                    mappingTemplate: {},
                    status: {},
                    ediType: {
                        shape: "S6"
                    },
                    sampleDocument: {},
                    createdAt: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        DeleteCapability: {
            input: {
                type: "structure",
                required: [ "capabilityId" ],
                members: {
                    capabilityId: {}
                }
            },
            idempotent: true
        },
        DeletePartnership: {
            input: {
                type: "structure",
                required: [ "partnershipId" ],
                members: {
                    partnershipId: {}
                }
            },
            idempotent: true
        },
        DeleteProfile: {
            input: {
                type: "structure",
                required: [ "profileId" ],
                members: {
                    profileId: {}
                }
            },
            idempotent: true
        },
        DeleteTransformer: {
            input: {
                type: "structure",
                required: [ "transformerId" ],
                members: {
                    transformerId: {}
                }
            },
            idempotent: true
        },
        GetCapability: {
            input: {
                type: "structure",
                required: [ "capabilityId" ],
                members: {
                    capabilityId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "capabilityId", "capabilityArn", "name", "type", "configuration", "createdAt" ],
                members: {
                    capabilityId: {},
                    capabilityArn: {},
                    name: {},
                    type: {},
                    configuration: {
                        shape: "S4"
                    },
                    instructionsDocuments: {
                        shape: "Se"
                    },
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            }
        },
        GetPartnership: {
            input: {
                type: "structure",
                required: [ "partnershipId" ],
                members: {
                    partnershipId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "profileId", "partnershipId", "partnershipArn", "createdAt" ],
                members: {
                    profileId: {},
                    partnershipId: {},
                    partnershipArn: {},
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    capabilities: {
                        shape: "St"
                    },
                    tradingPartnerId: {},
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            }
        },
        GetProfile: {
            input: {
                type: "structure",
                required: [ "profileId" ],
                members: {
                    profileId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "profileId", "profileArn", "name", "phone", "businessName", "createdAt" ],
                members: {
                    profileId: {},
                    profileArn: {},
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    businessName: {},
                    logging: {},
                    logGroupName: {},
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            }
        },
        GetTransformer: {
            input: {
                type: "structure",
                required: [ "transformerId" ],
                members: {
                    transformerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "transformerId", "transformerArn", "name", "fileFormat", "mappingTemplate", "status", "ediType", "createdAt" ],
                members: {
                    transformerId: {},
                    transformerArn: {},
                    name: {},
                    fileFormat: {},
                    mappingTemplate: {},
                    status: {},
                    ediType: {
                        shape: "S6"
                    },
                    sampleDocument: {},
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            }
        },
        GetTransformerJob: {
            input: {
                type: "structure",
                required: [ "transformerJobId", "transformerId" ],
                members: {
                    transformerJobId: {},
                    transformerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {},
                    outputFiles: {
                        type: "list",
                        member: {
                            shape: "Sa"
                        }
                    },
                    message: {}
                }
            }
        },
        ListCapabilities: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "capabilities" ],
                members: {
                    capabilities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "capabilityId", "name", "type", "createdAt" ],
                            members: {
                                capabilityId: {},
                                name: {},
                                type: {},
                                createdAt: {
                                    shape: "Sn"
                                },
                                modifiedAt: {
                                    shape: "S1g"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPartnerships: {
            input: {
                type: "structure",
                members: {
                    profileId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "partnerships" ],
                members: {
                    partnerships: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "profileId", "partnershipId", "createdAt" ],
                            members: {
                                profileId: {},
                                partnershipId: {},
                                name: {},
                                capabilities: {
                                    shape: "St"
                                },
                                tradingPartnerId: {},
                                createdAt: {
                                    shape: "Sn"
                                },
                                modifiedAt: {
                                    shape: "S1g"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProfiles: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profiles" ],
                members: {
                    profiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "profileId", "name", "businessName", "createdAt" ],
                            members: {
                                profileId: {},
                                name: {},
                                businessName: {},
                                logging: {},
                                logGroupName: {},
                                createdAt: {
                                    shape: "Sn"
                                },
                                modifiedAt: {
                                    shape: "S1g"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        ListTransformers: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "transformers" ],
                members: {
                    transformers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "transformerId", "name", "fileFormat", "mappingTemplate", "status", "ediType", "createdAt" ],
                            members: {
                                transformerId: {},
                                name: {},
                                fileFormat: {},
                                mappingTemplate: {},
                                status: {},
                                ediType: {
                                    shape: "S6"
                                },
                                sampleDocument: {},
                                createdAt: {
                                    shape: "Sn"
                                },
                                modifiedAt: {
                                    shape: "S1g"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartTransformerJob: {
            input: {
                type: "structure",
                required: [ "inputFile", "outputLocation", "transformerId" ],
                members: {
                    inputFile: {
                        shape: "Sa"
                    },
                    outputLocation: {
                        shape: "Sa"
                    },
                    transformerId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "transformerJobId" ],
                members: {
                    transformerJobId: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        TestMapping: {
            input: {
                type: "structure",
                required: [ "inputFileContent", "mappingTemplate", "fileFormat" ],
                members: {
                    inputFileContent: {},
                    mappingTemplate: {},
                    fileFormat: {}
                }
            },
            output: {
                type: "structure",
                required: [ "mappedFileContent" ],
                members: {
                    mappedFileContent: {}
                }
            },
            idempotent: true
        },
        TestParsing: {
            input: {
                type: "structure",
                required: [ "inputFile", "fileFormat", "ediType" ],
                members: {
                    inputFile: {
                        shape: "Sa"
                    },
                    fileFormat: {},
                    ediType: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "parsedFileContent" ],
                members: {
                    parsedFileContent: {}
                }
            },
            idempotent: true
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        },
        UpdateCapability: {
            input: {
                type: "structure",
                required: [ "capabilityId" ],
                members: {
                    capabilityId: {},
                    name: {},
                    configuration: {
                        shape: "S4"
                    },
                    instructionsDocuments: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "capabilityId", "capabilityArn", "name", "type", "configuration", "createdAt" ],
                members: {
                    capabilityId: {},
                    capabilityArn: {},
                    name: {},
                    type: {},
                    configuration: {
                        shape: "S4"
                    },
                    instructionsDocuments: {
                        shape: "Se"
                    },
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            },
            idempotent: true
        },
        UpdatePartnership: {
            input: {
                type: "structure",
                required: [ "partnershipId" ],
                members: {
                    partnershipId: {},
                    name: {},
                    capabilities: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profileId", "partnershipId", "partnershipArn", "createdAt" ],
                members: {
                    profileId: {},
                    partnershipId: {},
                    partnershipArn: {},
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    capabilities: {
                        shape: "St"
                    },
                    tradingPartnerId: {},
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            },
            idempotent: true
        },
        UpdateProfile: {
            input: {
                type: "structure",
                required: [ "profileId" ],
                members: {
                    profileId: {},
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    businessName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "profileId", "profileArn", "name", "phone", "businessName", "createdAt" ],
                members: {
                    profileId: {},
                    profileArn: {},
                    name: {},
                    email: {
                        shape: "Sr"
                    },
                    phone: {
                        shape: "Ss"
                    },
                    businessName: {},
                    logging: {},
                    logGroupName: {},
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            },
            idempotent: true
        },
        UpdateTransformer: {
            input: {
                type: "structure",
                required: [ "transformerId" ],
                members: {
                    transformerId: {},
                    name: {},
                    fileFormat: {},
                    mappingTemplate: {},
                    status: {},
                    ediType: {
                        shape: "S6"
                    },
                    sampleDocument: {}
                }
            },
            output: {
                type: "structure",
                required: [ "transformerId", "transformerArn", "name", "fileFormat", "mappingTemplate", "status", "ediType", "createdAt", "modifiedAt" ],
                members: {
                    transformerId: {},
                    transformerArn: {},
                    name: {},
                    fileFormat: {},
                    mappingTemplate: {},
                    status: {},
                    ediType: {
                        shape: "S6"
                    },
                    sampleDocument: {},
                    createdAt: {
                        shape: "Sn"
                    },
                    modifiedAt: {
                        shape: "S1g"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                edi: {
                    type: "structure",
                    required: [ "type", "inputLocation", "outputLocation", "transformerId" ],
                    members: {
                        type: {
                            shape: "S6"
                        },
                        inputLocation: {
                            shape: "Sa"
                        },
                        outputLocation: {
                            shape: "Sa"
                        },
                        transformerId: {}
                    }
                }
            },
            union: true
        },
        S6: {
            type: "structure",
            members: {
                x12Details: {
                    type: "structure",
                    members: {
                        transactionSet: {},
                        version: {}
                    }
                }
            },
            union: true
        },
        Sa: {
            type: "structure",
            members: {
                bucketName: {},
                key: {}
            }
        },
        Se: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sn: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sr: {
            type: "string",
            sensitive: true
        },
        Ss: {
            type: "string",
            sensitive: true
        },
        St: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListCapabilities: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "capabilities"
        },
        ListPartnerships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "partnerships"
        },
        ListProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "profiles"
        },
        ListTransformers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "transformers"
        }
    }
};

AWS.apiLoader.services["bedrockagent"] = {};

AWS.BedrockAgent = AWS.Service.defineService("bedrockagent", [ "2023-06-05" ]);

AWS.apiLoader.services["bedrockagent"]["2023-06-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-06-05",
        endpointPrefix: "bedrock-agent",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Agents for Amazon Bedrock",
        serviceId: "Bedrock Agent",
        signatureVersion: "v4",
        signingName: "bedrock",
        uid: "bedrock-agent-2023-06-05"
    },
    operations: {
        AssociateAgentKnowledgeBase: {
            http: {
                method: "PUT",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "knowledgeBaseId", "description" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    knowledgeBaseId: {},
                    description: {},
                    knowledgeBaseState: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentKnowledgeBase" ],
                members: {
                    agentKnowledgeBase: {
                        shape: "S7"
                    }
                }
            },
            idempotent: true
        },
        CreateAgent: {
            http: {
                method: "PUT",
                requestUri: "/agents/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentName", "agentResourceRoleArn" ],
                members: {
                    agentName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    instruction: {
                        shape: "Sd"
                    },
                    foundationModel: {},
                    description: {},
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    agentResourceRoleArn: {},
                    customerEncryptionKeyArn: {},
                    tags: {
                        shape: "Si"
                    },
                    promptOverrideConfiguration: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agent" ],
                members: {
                    agent: {
                        shape: "S11"
                    }
                }
            },
            idempotent: true
        },
        CreateAgentActionGroup: {
            http: {
                method: "PUT",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "actionGroupName" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    actionGroupName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    parentActionGroupSignature: {},
                    actionGroupExecutor: {
                        shape: "S1a"
                    },
                    apiSchema: {
                        shape: "S1b"
                    },
                    actionGroupState: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentActionGroup" ],
                members: {
                    agentActionGroup: {
                        shape: "S1i"
                    }
                }
            },
            idempotent: true
        },
        CreateAgentAlias: {
            http: {
                method: "PUT",
                requestUri: "/agents/{agentId}/agentaliases/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentAliasName" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentAliasName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    routingConfiguration: {
                        shape: "S1k"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentAlias" ],
                members: {
                    agentAlias: {
                        shape: "S1n"
                    }
                }
            },
            idempotent: true
        },
        CreateDataSource: {
            http: {
                method: "PUT",
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "name", "dataSourceConfiguration" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    description: {},
                    dataSourceConfiguration: {
                        shape: "S1u"
                    },
                    serverSideEncryptionConfiguration: {
                        shape: "S20"
                    },
                    vectorIngestionConfiguration: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSource" ],
                members: {
                    dataSource: {
                        shape: "S28"
                    }
                }
            },
            idempotent: true
        },
        CreateKnowledgeBase: {
            http: {
                method: "PUT",
                requestUri: "/knowledgebases/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "name", "roleArn", "knowledgeBaseConfiguration", "storageConfiguration" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    description: {},
                    roleArn: {},
                    knowledgeBaseConfiguration: {
                        shape: "S2c"
                    },
                    storageConfiguration: {
                        shape: "S2g"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBase" ],
                members: {
                    knowledgeBase: {
                        shape: "S2x"
                    }
                }
            },
            idempotent: true
        },
        DeleteAgent: {
            http: {
                method: "DELETE",
                requestUri: "/agents/{agentId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentId", "agentStatus" ],
                members: {
                    agentId: {},
                    agentStatus: {}
                }
            },
            idempotent: true
        },
        DeleteAgentActionGroup: {
            http: {
                method: "DELETE",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "actionGroupId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    actionGroupId: {
                        location: "uri",
                        locationName: "actionGroupId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAgentAlias: {
            http: {
                method: "DELETE",
                requestUri: "/agents/{agentId}/agentaliases/{agentAliasId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentAliasId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentAliasId: {
                        location: "uri",
                        locationName: "agentAliasId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentId", "agentAliasId", "agentAliasStatus" ],
                members: {
                    agentId: {},
                    agentAliasId: {},
                    agentAliasStatus: {}
                }
            },
            idempotent: true
        },
        DeleteAgentVersion: {
            http: {
                method: "DELETE",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentId", "agentVersion", "agentStatus" ],
                members: {
                    agentId: {},
                    agentVersion: {},
                    agentStatus: {}
                }
            },
            idempotent: true
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "dataSourceId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBaseId", "dataSourceId", "status" ],
                members: {
                    knowledgeBaseId: {},
                    dataSourceId: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DeleteKnowledgeBase: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgebases/{knowledgeBaseId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBaseId", "status" ],
                members: {
                    knowledgeBaseId: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DisassociateAgentKnowledgeBase: {
            http: {
                method: "DELETE",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "knowledgeBaseId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAgent: {
            http: {
                method: "GET",
                requestUri: "/agents/{agentId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agent" ],
                members: {
                    agent: {
                        shape: "S11"
                    }
                }
            }
        },
        GetAgentActionGroup: {
            http: {
                method: "GET",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "actionGroupId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    actionGroupId: {
                        location: "uri",
                        locationName: "actionGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentActionGroup" ],
                members: {
                    agentActionGroup: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetAgentAlias: {
            http: {
                method: "GET",
                requestUri: "/agents/{agentId}/agentaliases/{agentAliasId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentAliasId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentAliasId: {
                        location: "uri",
                        locationName: "agentAliasId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentAlias" ],
                members: {
                    agentAlias: {
                        shape: "S1n"
                    }
                }
            }
        },
        GetAgentKnowledgeBase: {
            http: {
                method: "GET",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "knowledgeBaseId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentKnowledgeBase" ],
                members: {
                    agentKnowledgeBase: {
                        shape: "S7"
                    }
                }
            }
        },
        GetAgentVersion: {
            http: {
                method: "GET",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentVersion" ],
                members: {
                    agentVersion: {
                        type: "structure",
                        required: [ "agentId", "agentName", "agentArn", "version", "agentStatus", "idleSessionTTLInSeconds", "agentResourceRoleArn", "createdAt", "updatedAt" ],
                        members: {
                            agentId: {},
                            agentName: {},
                            agentArn: {},
                            version: {},
                            instruction: {
                                shape: "Sd"
                            },
                            agentStatus: {},
                            foundationModel: {},
                            description: {},
                            idleSessionTTLInSeconds: {
                                type: "integer"
                            },
                            agentResourceRoleArn: {},
                            customerEncryptionKeyArn: {},
                            createdAt: {
                                shape: "S9"
                            },
                            updatedAt: {
                                shape: "S9"
                            },
                            failureReasons: {
                                shape: "S14"
                            },
                            recommendedActions: {
                                shape: "S16"
                            },
                            promptOverrideConfiguration: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            }
        },
        GetDataSource: {
            http: {
                method: "GET",
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "dataSourceId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSource" ],
                members: {
                    dataSource: {
                        shape: "S28"
                    }
                }
            }
        },
        GetIngestionJob: {
            http: {
                method: "GET",
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/{ingestionJobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "dataSourceId", "ingestionJobId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    ingestionJobId: {
                        location: "uri",
                        locationName: "ingestionJobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ingestionJob" ],
                members: {
                    ingestionJob: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetKnowledgeBase: {
            http: {
                method: "GET",
                requestUri: "/knowledgebases/{knowledgeBaseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBase" ],
                members: {
                    knowledgeBase: {
                        shape: "S2x"
                    }
                }
            }
        },
        ListAgentActionGroups: {
            http: {
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "actionGroupSummaries" ],
                members: {
                    actionGroupSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "actionGroupId", "actionGroupName", "actionGroupState", "updatedAt" ],
                            members: {
                                actionGroupId: {},
                                actionGroupName: {},
                                actionGroupState: {},
                                description: {},
                                updatedAt: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAgentAliases: {
            http: {
                requestUri: "/agents/{agentId}/agentaliases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentAliasSummaries" ],
                members: {
                    agentAliasSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "agentAliasId", "agentAliasName", "agentAliasStatus", "createdAt", "updatedAt" ],
                            members: {
                                agentAliasId: {},
                                agentAliasName: {},
                                description: {},
                                routingConfiguration: {
                                    shape: "S1k"
                                },
                                agentAliasStatus: {},
                                createdAt: {
                                    shape: "S9"
                                },
                                updatedAt: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAgentKnowledgeBases: {
            http: {
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentKnowledgeBaseSummaries" ],
                members: {
                    agentKnowledgeBaseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseId", "knowledgeBaseState", "updatedAt" ],
                            members: {
                                knowledgeBaseId: {},
                                description: {},
                                knowledgeBaseState: {},
                                updatedAt: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAgentVersions: {
            http: {
                requestUri: "/agents/{agentId}/agentversions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentVersionSummaries" ],
                members: {
                    agentVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "agentName", "agentStatus", "agentVersion", "createdAt", "updatedAt" ],
                            members: {
                                agentName: {},
                                agentStatus: {},
                                agentVersion: {},
                                createdAt: {
                                    shape: "S9"
                                },
                                updatedAt: {
                                    shape: "S9"
                                },
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAgents: {
            http: {
                requestUri: "/agents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentSummaries" ],
                members: {
                    agentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "agentId", "agentName", "agentStatus", "updatedAt" ],
                            members: {
                                agentId: {},
                                agentName: {},
                                agentStatus: {},
                                description: {},
                                updatedAt: {
                                    shape: "S9"
                                },
                                latestAgentVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSources: {
            http: {
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "dataSourceSummaries" ],
                members: {
                    dataSourceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseId", "dataSourceId", "name", "status", "updatedAt" ],
                            members: {
                                knowledgeBaseId: {},
                                dataSourceId: {},
                                name: {},
                                status: {},
                                description: {},
                                updatedAt: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIngestionJobs: {
            http: {
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "dataSourceId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "attribute", "operator", "values" ],
                            members: {
                                attribute: {},
                                operator: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ingestionJobSummaries" ],
                members: {
                    ingestionJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseId", "dataSourceId", "ingestionJobId", "status", "startedAt", "updatedAt" ],
                            members: {
                                knowledgeBaseId: {},
                                dataSourceId: {},
                                ingestionJobId: {},
                                description: {},
                                status: {},
                                startedAt: {
                                    shape: "S9"
                                },
                                updatedAt: {
                                    shape: "S9"
                                },
                                statistics: {
                                    shape: "S3x"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKnowledgeBases: {
            http: {
                requestUri: "/knowledgebases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBaseSummaries" ],
                members: {
                    knowledgeBaseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseId", "name", "status", "updatedAt" ],
                            members: {
                                knowledgeBaseId: {},
                                name: {},
                                description: {},
                                status: {},
                                updatedAt: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        PrepareAgent: {
            http: {
                requestUri: "/agents/{agentId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentId", "agentStatus", "agentVersion", "preparedAt" ],
                members: {
                    agentId: {},
                    agentStatus: {},
                    agentVersion: {},
                    preparedAt: {
                        shape: "S9"
                    }
                }
            }
        },
        StartIngestionJob: {
            http: {
                method: "PUT",
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}/ingestionjobs/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "dataSourceId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ingestionJob" ],
                members: {
                    ingestionJob: {
                        shape: "S3v"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAgent: {
            http: {
                method: "PUT",
                requestUri: "/agents/{agentId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentName", "agentResourceRoleArn" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentName: {},
                    instruction: {
                        shape: "Sd"
                    },
                    foundationModel: {},
                    description: {},
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    agentResourceRoleArn: {},
                    customerEncryptionKeyArn: {},
                    promptOverrideConfiguration: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agent" ],
                members: {
                    agent: {
                        shape: "S11"
                    }
                }
            },
            idempotent: true
        },
        UpdateAgentActionGroup: {
            http: {
                method: "PUT",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/actiongroups/{actionGroupId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "actionGroupId", "actionGroupName" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    actionGroupId: {
                        location: "uri",
                        locationName: "actionGroupId"
                    },
                    actionGroupName: {},
                    description: {},
                    parentActionGroupSignature: {},
                    actionGroupExecutor: {
                        shape: "S1a"
                    },
                    actionGroupState: {},
                    apiSchema: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentActionGroup" ],
                members: {
                    agentActionGroup: {
                        shape: "S1i"
                    }
                }
            },
            idempotent: true
        },
        UpdateAgentAlias: {
            http: {
                method: "PUT",
                requestUri: "/agents/{agentId}/agentaliases/{agentAliasId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentAliasId", "agentAliasName" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentAliasId: {
                        location: "uri",
                        locationName: "agentAliasId"
                    },
                    agentAliasName: {},
                    description: {},
                    routingConfiguration: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentAlias" ],
                members: {
                    agentAlias: {
                        shape: "S1n"
                    }
                }
            },
            idempotent: true
        },
        UpdateAgentKnowledgeBase: {
            http: {
                method: "PUT",
                requestUri: "/agents/{agentId}/agentversions/{agentVersion}/knowledgebases/{knowledgeBaseId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentVersion", "knowledgeBaseId" ],
                members: {
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentVersion: {
                        location: "uri",
                        locationName: "agentVersion"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    description: {},
                    knowledgeBaseState: {}
                }
            },
            output: {
                type: "structure",
                required: [ "agentKnowledgeBase" ],
                members: {
                    agentKnowledgeBase: {
                        shape: "S7"
                    }
                }
            },
            idempotent: true
        },
        UpdateDataSource: {
            http: {
                method: "PUT",
                requestUri: "/knowledgebases/{knowledgeBaseId}/datasources/{dataSourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "dataSourceId", "name", "dataSourceConfiguration" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    name: {},
                    description: {},
                    dataSourceConfiguration: {
                        shape: "S1u"
                    },
                    serverSideEncryptionConfiguration: {
                        shape: "S20"
                    },
                    vectorIngestionConfiguration: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSource" ],
                members: {
                    dataSource: {
                        shape: "S28"
                    }
                }
            },
            idempotent: true
        },
        UpdateKnowledgeBase: {
            http: {
                method: "PUT",
                requestUri: "/knowledgebases/{knowledgeBaseId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "name", "roleArn", "knowledgeBaseConfiguration", "storageConfiguration" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    name: {},
                    description: {},
                    roleArn: {},
                    knowledgeBaseConfiguration: {
                        shape: "S2c"
                    },
                    storageConfiguration: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBase" ],
                members: {
                    knowledgeBase: {
                        shape: "S2x"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "agentId", "agentVersion", "knowledgeBaseId", "description", "createdAt", "updatedAt", "knowledgeBaseState" ],
            members: {
                agentId: {},
                agentVersion: {},
                knowledgeBaseId: {},
                description: {},
                createdAt: {
                    shape: "S9"
                },
                updatedAt: {
                    shape: "S9"
                },
                knowledgeBaseState: {}
            }
        },
        S9: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sd: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "structure",
            required: [ "promptConfigurations" ],
            members: {
                promptConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            promptType: {},
                            promptCreationMode: {},
                            promptState: {},
                            basePromptTemplate: {},
                            inferenceConfiguration: {
                                type: "structure",
                                members: {
                                    temperature: {
                                        type: "float"
                                    },
                                    topP: {
                                        type: "float"
                                    },
                                    topK: {
                                        type: "integer"
                                    },
                                    maximumLength: {
                                        type: "integer"
                                    },
                                    stopSequences: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            parserMode: {}
                        }
                    }
                },
                overrideLambda: {}
            },
            sensitive: true
        },
        S11: {
            type: "structure",
            required: [ "agentId", "agentName", "agentArn", "agentVersion", "agentStatus", "idleSessionTTLInSeconds", "agentResourceRoleArn", "createdAt", "updatedAt" ],
            members: {
                agentId: {},
                agentName: {},
                agentArn: {},
                agentVersion: {},
                clientToken: {},
                instruction: {
                    shape: "Sd"
                },
                agentStatus: {},
                foundationModel: {},
                description: {},
                idleSessionTTLInSeconds: {
                    type: "integer"
                },
                agentResourceRoleArn: {},
                customerEncryptionKeyArn: {},
                createdAt: {
                    shape: "S9"
                },
                updatedAt: {
                    shape: "S9"
                },
                preparedAt: {
                    shape: "S9"
                },
                failureReasons: {
                    shape: "S14"
                },
                recommendedActions: {
                    shape: "S16"
                },
                promptOverrideConfiguration: {
                    shape: "Sl"
                }
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S16: {
            type: "list",
            member: {}
        },
        S1a: {
            type: "structure",
            members: {
                lambda: {}
            },
            union: true
        },
        S1b: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    members: {
                        s3BucketName: {},
                        s3ObjectKey: {}
                    }
                },
                payload: {
                    type: "string",
                    sensitive: true
                }
            },
            union: true
        },
        S1i: {
            type: "structure",
            required: [ "agentId", "agentVersion", "actionGroupId", "actionGroupName", "createdAt", "updatedAt", "actionGroupState" ],
            members: {
                agentId: {},
                agentVersion: {},
                actionGroupId: {},
                actionGroupName: {},
                clientToken: {},
                description: {},
                createdAt: {
                    shape: "S9"
                },
                updatedAt: {
                    shape: "S9"
                },
                parentActionSignature: {},
                actionGroupExecutor: {
                    shape: "S1a"
                },
                apiSchema: {
                    shape: "S1b"
                },
                actionGroupState: {}
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                required: [ "agentVersion" ],
                members: {
                    agentVersion: {}
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "agentId", "agentAliasId", "agentAliasName", "agentAliasArn", "routingConfiguration", "createdAt", "updatedAt", "agentAliasStatus" ],
            members: {
                agentId: {},
                agentAliasId: {},
                agentAliasName: {},
                agentAliasArn: {},
                clientToken: {},
                description: {},
                routingConfiguration: {
                    shape: "S1k"
                },
                createdAt: {
                    shape: "S9"
                },
                updatedAt: {
                    shape: "S9"
                },
                agentAliasHistoryEvents: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            routingConfiguration: {
                                shape: "S1k"
                            },
                            endDate: {
                                shape: "S9"
                            },
                            startDate: {
                                shape: "S9"
                            }
                        }
                    }
                },
                agentAliasStatus: {}
            }
        },
        S1u: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                s3Configuration: {
                    type: "structure",
                    required: [ "bucketArn" ],
                    members: {
                        bucketArn: {},
                        inclusionPrefixes: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                kmsKeyArn: {}
            }
        },
        S21: {
            type: "structure",
            members: {
                chunkingConfiguration: {
                    type: "structure",
                    required: [ "chunkingStrategy" ],
                    members: {
                        chunkingStrategy: {},
                        fixedSizeChunkingConfiguration: {
                            type: "structure",
                            required: [ "maxTokens", "overlapPercentage" ],
                            members: {
                                maxTokens: {
                                    type: "integer"
                                },
                                overlapPercentage: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        S28: {
            type: "structure",
            required: [ "knowledgeBaseId", "dataSourceId", "name", "status", "dataSourceConfiguration", "createdAt", "updatedAt" ],
            members: {
                knowledgeBaseId: {},
                dataSourceId: {},
                name: {},
                status: {},
                description: {},
                dataSourceConfiguration: {
                    shape: "S1u"
                },
                serverSideEncryptionConfiguration: {
                    shape: "S20"
                },
                vectorIngestionConfiguration: {
                    shape: "S21"
                },
                createdAt: {
                    shape: "S9"
                },
                updatedAt: {
                    shape: "S9"
                }
            }
        },
        S2c: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                vectorKnowledgeBaseConfiguration: {
                    type: "structure",
                    required: [ "embeddingModelArn" ],
                    members: {
                        embeddingModelArn: {}
                    }
                }
            }
        },
        S2g: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                opensearchServerlessConfiguration: {
                    type: "structure",
                    required: [ "collectionArn", "vectorIndexName", "fieldMapping" ],
                    members: {
                        collectionArn: {},
                        vectorIndexName: {},
                        fieldMapping: {
                            type: "structure",
                            required: [ "vectorField", "textField", "metadataField" ],
                            members: {
                                vectorField: {},
                                textField: {},
                                metadataField: {}
                            }
                        }
                    }
                },
                pineconeConfiguration: {
                    type: "structure",
                    required: [ "connectionString", "credentialsSecretArn", "fieldMapping" ],
                    members: {
                        connectionString: {},
                        credentialsSecretArn: {},
                        namespace: {},
                        fieldMapping: {
                            type: "structure",
                            required: [ "textField", "metadataField" ],
                            members: {
                                textField: {},
                                metadataField: {}
                            }
                        }
                    }
                },
                redisEnterpriseCloudConfiguration: {
                    type: "structure",
                    required: [ "endpoint", "vectorIndexName", "credentialsSecretArn", "fieldMapping" ],
                    members: {
                        endpoint: {},
                        vectorIndexName: {},
                        credentialsSecretArn: {},
                        fieldMapping: {
                            type: "structure",
                            required: [ "vectorField", "textField", "metadataField" ],
                            members: {
                                vectorField: {},
                                textField: {},
                                metadataField: {}
                            }
                        }
                    }
                }
            }
        },
        S2x: {
            type: "structure",
            required: [ "knowledgeBaseId", "name", "knowledgeBaseArn", "roleArn", "knowledgeBaseConfiguration", "storageConfiguration", "status", "createdAt", "updatedAt" ],
            members: {
                knowledgeBaseId: {},
                name: {},
                knowledgeBaseArn: {},
                description: {},
                roleArn: {},
                knowledgeBaseConfiguration: {
                    shape: "S2c"
                },
                storageConfiguration: {
                    shape: "S2g"
                },
                status: {},
                createdAt: {
                    shape: "S9"
                },
                updatedAt: {
                    shape: "S9"
                },
                failureReasons: {
                    shape: "S14"
                }
            }
        },
        S3v: {
            type: "structure",
            required: [ "knowledgeBaseId", "dataSourceId", "ingestionJobId", "status", "startedAt", "updatedAt" ],
            members: {
                knowledgeBaseId: {},
                dataSourceId: {},
                ingestionJobId: {},
                description: {},
                status: {},
                statistics: {
                    shape: "S3x"
                },
                failureReasons: {
                    shape: "S14"
                },
                startedAt: {
                    shape: "S9"
                },
                updatedAt: {
                    shape: "S9"
                }
            }
        },
        S3x: {
            type: "structure",
            members: {
                numberOfDocumentsScanned: {
                    type: "long"
                },
                numberOfNewDocumentsIndexed: {
                    type: "long"
                },
                numberOfModifiedDocumentsIndexed: {
                    type: "long"
                },
                numberOfDocumentsDeleted: {
                    type: "long"
                },
                numberOfDocumentsFailed: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        ListAgentActionGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "actionGroupSummaries"
        },
        ListAgentAliases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "agentAliasSummaries"
        },
        ListAgentKnowledgeBases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "agentKnowledgeBaseSummaries"
        },
        ListAgentVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "agentVersionSummaries"
        },
        ListAgents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "agentSummaries"
        },
        ListDataSources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataSourceSummaries"
        },
        ListIngestionJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "ingestionJobSummaries"
        },
        ListKnowledgeBases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "knowledgeBaseSummaries"
        }
    }
};

AWS.apiLoader.services["bedrockagentruntime"] = {};

AWS.BedrockAgentRuntime = AWS.Service.defineService("bedrockagentruntime", [ "2023-07-26" ]);

AWS.apiLoader.services["bedrockagentruntime"]["2023-07-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-07-26",
        endpointPrefix: "bedrock-agent-runtime",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Agents for Amazon Bedrock Runtime",
        serviceId: "Bedrock Agent Runtime",
        signatureVersion: "v4",
        signingName: "bedrock",
        uid: "bedrock-agent-runtime-2023-07-26"
    },
    operations: {
        InvokeAgent: {
            http: {
                requestUri: "/agents/{agentId}/agentAliases/{agentAliasId}/sessions/{sessionId}/text",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentId", "agentAliasId", "sessionId", "inputText" ],
                members: {
                    sessionState: {
                        type: "structure",
                        members: {
                            sessionAttributes: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            promptSessionAttributes: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    agentId: {
                        location: "uri",
                        locationName: "agentId"
                    },
                    agentAliasId: {
                        location: "uri",
                        locationName: "agentAliasId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    endSession: {
                        type: "boolean"
                    },
                    enableTrace: {
                        type: "boolean"
                    },
                    inputText: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "completion", "contentType", "sessionId" ],
                members: {
                    completion: {
                        type: "structure",
                        members: {
                            chunk: {
                                type: "structure",
                                members: {
                                    bytes: {
                                        type: "blob",
                                        sensitive: true
                                    },
                                    attribution: {
                                        type: "structure",
                                        members: {
                                            citations: {
                                                shape: "Sg"
                                            }
                                        }
                                    }
                                },
                                event: true,
                                sensitive: true
                            },
                            trace: {
                                type: "structure",
                                members: {
                                    agentId: {},
                                    agentAliasId: {},
                                    sessionId: {},
                                    trace: {
                                        type: "structure",
                                        members: {
                                            preProcessingTrace: {
                                                type: "structure",
                                                members: {
                                                    modelInvocationInput: {
                                                        shape: "Sw"
                                                    },
                                                    modelInvocationOutput: {
                                                        type: "structure",
                                                        members: {
                                                            traceId: {},
                                                            parsedResponse: {
                                                                type: "structure",
                                                                members: {
                                                                    rationale: {
                                                                        shape: "S1a"
                                                                    },
                                                                    isValid: {
                                                                        type: "boolean"
                                                                    }
                                                                },
                                                                sensitive: true
                                                            }
                                                        },
                                                        sensitive: true
                                                    }
                                                },
                                                sensitive: true,
                                                union: true
                                            },
                                            orchestrationTrace: {
                                                type: "structure",
                                                members: {
                                                    rationale: {
                                                        type: "structure",
                                                        members: {
                                                            traceId: {},
                                                            text: {
                                                                shape: "S1a"
                                                            }
                                                        },
                                                        sensitive: true
                                                    },
                                                    invocationInput: {
                                                        type: "structure",
                                                        members: {
                                                            traceId: {},
                                                            invocationType: {},
                                                            actionGroupInvocationInput: {
                                                                type: "structure",
                                                                members: {
                                                                    actionGroupName: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    },
                                                                    verb: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    },
                                                                    apiPath: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    },
                                                                    parameters: {
                                                                        shape: "S1j"
                                                                    },
                                                                    requestBody: {
                                                                        type: "structure",
                                                                        members: {
                                                                            content: {
                                                                                type: "map",
                                                                                key: {},
                                                                                value: {
                                                                                    shape: "S1j"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            knowledgeBaseLookupInput: {
                                                                type: "structure",
                                                                members: {
                                                                    text: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    },
                                                                    knowledgeBaseId: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        sensitive: true
                                                    },
                                                    observation: {
                                                        type: "structure",
                                                        members: {
                                                            traceId: {},
                                                            type: {},
                                                            actionGroupInvocationOutput: {
                                                                type: "structure",
                                                                members: {
                                                                    text: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    }
                                                                }
                                                            },
                                                            knowledgeBaseLookupOutput: {
                                                                type: "structure",
                                                                members: {
                                                                    retrievedReferences: {
                                                                        shape: "Sn"
                                                                    }
                                                                }
                                                            },
                                                            finalResponse: {
                                                                type: "structure",
                                                                members: {
                                                                    text: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    }
                                                                }
                                                            },
                                                            repromptResponse: {
                                                                type: "structure",
                                                                members: {
                                                                    text: {},
                                                                    source: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    }
                                                                },
                                                                sensitive: true
                                                            }
                                                        },
                                                        sensitive: true
                                                    },
                                                    modelInvocationInput: {
                                                        shape: "Sw"
                                                    }
                                                },
                                                sensitive: true,
                                                union: true
                                            },
                                            postProcessingTrace: {
                                                type: "structure",
                                                members: {
                                                    modelInvocationInput: {
                                                        shape: "Sw"
                                                    },
                                                    modelInvocationOutput: {
                                                        type: "structure",
                                                        members: {
                                                            traceId: {},
                                                            parsedResponse: {
                                                                type: "structure",
                                                                members: {
                                                                    text: {
                                                                        type: "string",
                                                                        sensitive: true
                                                                    }
                                                                },
                                                                sensitive: true
                                                            }
                                                        },
                                                        sensitive: true
                                                    }
                                                },
                                                sensitive: true,
                                                union: true
                                            },
                                            failureTrace: {
                                                type: "structure",
                                                members: {
                                                    traceId: {},
                                                    failureReason: {
                                                        type: "string",
                                                        sensitive: true
                                                    }
                                                },
                                                sensitive: true
                                            }
                                        },
                                        sensitive: true,
                                        union: true
                                    }
                                },
                                event: true,
                                sensitive: true
                            },
                            internalServerException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 500
                                },
                                exception: true,
                                fault: true
                            },
                            validationException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 400,
                                    senderFault: true
                                },
                                exception: true
                            },
                            resourceNotFoundException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 404,
                                    senderFault: true
                                },
                                exception: true
                            },
                            serviceQuotaExceededException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 400,
                                    senderFault: true
                                },
                                exception: true
                            },
                            throttlingException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 429,
                                    senderFault: true
                                },
                                exception: true
                            },
                            accessDeniedException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 403,
                                    senderFault: true
                                },
                                exception: true
                            },
                            conflictException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                error: {
                                    httpStatusCode: 409,
                                    senderFault: true
                                },
                                exception: true
                            },
                            dependencyFailedException: {
                                type: "structure",
                                members: {
                                    message: {},
                                    resourceName: {}
                                },
                                error: {
                                    httpStatusCode: 424,
                                    senderFault: true
                                },
                                exception: true
                            },
                            badGatewayException: {
                                type: "structure",
                                members: {
                                    message: {},
                                    resourceName: {}
                                },
                                error: {
                                    httpStatusCode: 502
                                },
                                exception: true,
                                fault: true
                            }
                        },
                        eventstream: true
                    },
                    contentType: {
                        location: "header",
                        locationName: "x-amzn-bedrock-agent-content-type"
                    },
                    sessionId: {
                        location: "header",
                        locationName: "x-amz-bedrock-agent-session-id"
                    }
                },
                payload: "completion"
            }
        },
        Retrieve: {
            http: {
                requestUri: "/knowledgebases/{knowledgeBaseId}/retrieve",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "retrievalQuery" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    retrievalQuery: {
                        type: "structure",
                        required: [ "text" ],
                        members: {
                            text: {}
                        },
                        sensitive: true
                    },
                    retrievalConfiguration: {
                        type: "structure",
                        required: [ "vectorSearchConfiguration" ],
                        members: {
                            vectorSearchConfiguration: {
                                type: "structure",
                                required: [ "numberOfResults" ],
                                members: {
                                    numberOfResults: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "retrievalResults" ],
                members: {
                    retrievalResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "content" ],
                            members: {
                                content: {
                                    shape: "Sp"
                                },
                                location: {
                                    shape: "Sq"
                                },
                                score: {
                                    type: "double"
                                }
                            }
                        },
                        sensitive: true
                    },
                    nextToken: {}
                }
            }
        },
        RetrieveAndGenerate: {
            http: {
                requestUri: "/retrieveAndGenerate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "input" ],
                members: {
                    sessionId: {},
                    input: {
                        type: "structure",
                        required: [ "text" ],
                        members: {
                            text: {}
                        },
                        sensitive: true
                    },
                    retrieveAndGenerateConfiguration: {
                        type: "structure",
                        required: [ "type" ],
                        members: {
                            type: {},
                            knowledgeBaseConfiguration: {
                                type: "structure",
                                required: [ "knowledgeBaseId", "modelArn" ],
                                members: {
                                    knowledgeBaseId: {},
                                    modelArn: {}
                                }
                            }
                        }
                    },
                    sessionConfiguration: {
                        type: "structure",
                        required: [ "kmsKeyArn" ],
                        members: {
                            kmsKeyArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "sessionId", "output" ],
                members: {
                    sessionId: {},
                    output: {
                        type: "structure",
                        required: [ "text" ],
                        members: {
                            text: {}
                        },
                        sensitive: true
                    },
                    citations: {
                        shape: "Sg"
                    }
                }
            }
        }
    },
    shapes: {
        Sg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    generatedResponsePart: {
                        type: "structure",
                        members: {
                            textResponsePart: {
                                type: "structure",
                                members: {
                                    text: {},
                                    span: {
                                        type: "structure",
                                        members: {
                                            start: {
                                                type: "integer"
                                            },
                                            end: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    retrievedReferences: {
                        shape: "Sn"
                    }
                }
            }
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    content: {
                        shape: "Sp"
                    },
                    location: {
                        shape: "Sq"
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "text" ],
            members: {
                text: {}
            }
        },
        Sq: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                s3Location: {
                    type: "structure",
                    members: {
                        uri: {}
                    }
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                traceId: {},
                text: {
                    type: "string",
                    sensitive: true
                },
                type: {},
                inferenceConfiguration: {
                    type: "structure",
                    members: {
                        temperature: {
                            type: "float"
                        },
                        topP: {
                            type: "float"
                        },
                        topK: {
                            type: "integer"
                        },
                        maximumLength: {
                            type: "integer"
                        },
                        stopSequences: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                overrideLambda: {},
                promptCreationMode: {},
                parserMode: {}
            },
            sensitive: true
        },
        S1a: {
            type: "string",
            sensitive: true
        },
        S1j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    type: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        Retrieve: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "retrievalResults"
        }
    }
};

AWS.apiLoader.services["qbusiness"] = {};

AWS.QBusiness = AWS.Service.defineService("qbusiness", [ "2023-11-27" ]);

AWS.apiLoader.services["qbusiness"]["2023-11-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-11-27",
        endpointPrefix: "qbusiness",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "QBusiness",
        serviceId: "QBusiness",
        signatureVersion: "v4",
        signingName: "qbusiness",
        uid: "qbusiness-2023-11-27"
    },
    operations: {
        BatchDeleteDocument: {
            http: {
                requestUri: "/applications/{applicationId}/indices/{indexId}/documents/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "documents", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceSyncId: {},
                    documents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "documentId" ],
                            members: {
                                documentId: {}
                            }
                        }
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failedDocuments: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchPutDocument: {
            http: {
                requestUri: "/applications/{applicationId}/indices/{indexId}/documents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "documents", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceSyncId: {},
                    documents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id" ],
                            members: {
                                accessConfiguration: {
                                    type: "structure",
                                    required: [ "accessControls" ],
                                    members: {
                                        accessControls: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "principals" ],
                                                members: {
                                                    memberRelation: {},
                                                    principals: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                group: {
                                                                    type: "structure",
                                                                    required: [ "access" ],
                                                                    members: {
                                                                        access: {},
                                                                        membershipType: {},
                                                                        name: {}
                                                                    }
                                                                },
                                                                user: {
                                                                    type: "structure",
                                                                    required: [ "access" ],
                                                                    members: {
                                                                        access: {},
                                                                        id: {},
                                                                        membershipType: {}
                                                                    }
                                                                }
                                                            },
                                                            union: true
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        memberRelation: {}
                                    }
                                },
                                attributes: {
                                    type: "list",
                                    member: {
                                        shape: "Sv"
                                    }
                                },
                                content: {
                                    type: "structure",
                                    members: {
                                        blob: {
                                            type: "blob"
                                        },
                                        s3: {
                                            type: "structure",
                                            required: [ "bucket", "key" ],
                                            members: {
                                                bucket: {},
                                                key: {}
                                            }
                                        }
                                    },
                                    union: true
                                },
                                contentType: {},
                                documentEnrichmentConfiguration: {
                                    shape: "S19"
                                },
                                id: {},
                                title: {}
                            }
                        }
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    failedDocuments: {
                        shape: "S9"
                    }
                }
            }
        },
        ChatSync: {
            http: {
                requestUri: "/applications/{applicationId}/conversations?sync",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "userId" ],
                members: {
                    actionExecution: {
                        shape: "S1n"
                    },
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    attachments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "data", "name" ],
                            members: {
                                data: {
                                    type: "blob"
                                },
                                name: {}
                            }
                        }
                    },
                    attributeFilter: {
                        shape: "S1x"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    conversationId: {},
                    parentMessageId: {},
                    userGroups: {
                        shape: "S22",
                        location: "querystring",
                        locationName: "userGroups"
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    userMessage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    actionReview: {
                        shape: "S25"
                    },
                    conversationId: {},
                    failedAttachments: {
                        shape: "S2e"
                    },
                    sourceAttributions: {
                        shape: "S2h"
                    },
                    systemMessage: {},
                    systemMessageId: {},
                    userMessageId: {}
                }
            }
        },
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "displayName", "roleArn" ],
                members: {
                    attachmentsConfiguration: {
                        shape: "S2m"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    displayName: {},
                    encryptionConfiguration: {
                        shape: "S2q"
                    },
                    roleArn: {},
                    tags: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    applicationId: {}
                }
            },
            idempotent: true
        },
        CreateDataSource: {
            http: {
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "configuration", "displayName", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    configuration: {
                        shape: "S2z"
                    },
                    description: {},
                    displayName: {},
                    documentEnrichmentConfiguration: {
                        shape: "S19"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    roleArn: {},
                    syncSchedule: {},
                    tags: {
                        shape: "S2s"
                    },
                    vpcConfiguration: {
                        shape: "S32"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSourceArn: {},
                    dataSourceId: {}
                }
            },
            idempotent: true
        },
        CreateIndex: {
            http: {
                requestUri: "/applications/{applicationId}/indices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "displayName" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    capacityConfiguration: {
                        shape: "S3a"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    displayName: {},
                    tags: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    indexArn: {},
                    indexId: {}
                }
            }
        },
        CreatePlugin: {
            http: {
                requestUri: "/applications/{applicationId}/plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "authConfiguration", "displayName", "serverUrl", "type" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    authConfiguration: {
                        shape: "S3g"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    displayName: {},
                    serverUrl: {},
                    tags: {
                        shape: "S2s"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pluginArn: {},
                    pluginId: {}
                }
            },
            idempotent: true
        },
        CreateRetriever: {
            http: {
                requestUri: "/applications/{applicationId}/retrievers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "configuration", "displayName", "type" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    configuration: {
                        shape: "S3p"
                    },
                    displayName: {},
                    roleArn: {},
                    tags: {
                        shape: "S2s"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    retrieverArn: {},
                    retrieverId: {}
                }
            }
        },
        CreateUser: {
            http: {
                requestUri: "/applications/{applicationId}/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    userAliases: {
                        type: "list",
                        member: {
                            shape: "S40"
                        }
                    },
                    userId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateWebExperience: {
            http: {
                requestUri: "/applications/{applicationId}/experiences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    samplePromptsControlMode: {},
                    subtitle: {},
                    tags: {
                        shape: "S2s"
                    },
                    title: {},
                    welcomeMessage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    webExperienceArn: {},
                    webExperienceId: {}
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteChatControlsConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/chatcontrols",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteConversation: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/conversations/{conversationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "conversationId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    conversationId: {
                        location: "uri",
                        locationName: "conversationId"
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSourceId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteGroup: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/indices/{indexId}/groups/{groupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "groupName", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "querystring",
                        locationName: "dataSourceId"
                    },
                    groupName: {
                        location: "uri",
                        locationName: "groupName"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteIndex: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/indices/{indexId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePlugin: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/plugins/{pluginId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "pluginId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    pluginId: {
                        location: "uri",
                        locationName: "pluginId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRetriever: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/retrievers/{retrieverId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "retrieverId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    retrieverId: {
                        location: "uri",
                        locationName: "retrieverId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/users/{userId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteWebExperience: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/experiences/{webExperienceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "webExperienceId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    webExperienceId: {
                        location: "uri",
                        locationName: "webExperienceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    applicationId: {},
                    attachmentsConfiguration: {
                        type: "structure",
                        members: {
                            attachmentsControlMode: {}
                        }
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    displayName: {},
                    encryptionConfiguration: {
                        shape: "S2q"
                    },
                    error: {
                        shape: "Sc"
                    },
                    roleArn: {},
                    status: {},
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetChatControlsConfiguration: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/chatcontrols",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    blockedPhrases: {
                        type: "structure",
                        members: {
                            blockedPhrases: {
                                shape: "S53"
                            },
                            systemMessageOverride: {}
                        }
                    },
                    nextToken: {},
                    responseScope: {},
                    topicConfigurations: {
                        shape: "S57"
                    }
                }
            }
        },
        GetDataSource: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSourceId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationId: {},
                    configuration: {
                        shape: "S2z"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    dataSourceArn: {},
                    dataSourceId: {},
                    description: {},
                    displayName: {},
                    documentEnrichmentConfiguration: {
                        shape: "S19"
                    },
                    error: {
                        shape: "Sc"
                    },
                    indexId: {},
                    roleArn: {},
                    status: {},
                    syncSchedule: {},
                    type: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    vpcConfiguration: {
                        shape: "S32"
                    }
                }
            }
        },
        GetGroup: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/indices/{indexId}/groups/{groupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "groupName", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "querystring",
                        locationName: "dataSourceId"
                    },
                    groupName: {
                        location: "uri",
                        locationName: "groupName"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {
                        shape: "S5s"
                    },
                    statusHistory: {
                        type: "list",
                        member: {
                            shape: "S5s"
                        }
                    }
                }
            }
        },
        GetIndex: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/indices/{indexId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationId: {},
                    capacityConfiguration: {
                        shape: "S3a"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    displayName: {},
                    documentAttributeConfigurations: {
                        shape: "S5x"
                    },
                    error: {
                        shape: "Sc"
                    },
                    indexArn: {},
                    indexId: {},
                    indexStatistics: {
                        type: "structure",
                        members: {
                            textDocumentStatistics: {
                                type: "structure",
                                members: {
                                    indexedTextBytes: {
                                        type: "long"
                                    },
                                    indexedTextDocumentCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    status: {},
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetPlugin: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/plugins/{pluginId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "pluginId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    pluginId: {
                        location: "uri",
                        locationName: "pluginId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationId: {},
                    authConfiguration: {
                        shape: "S3g"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    displayName: {},
                    pluginArn: {},
                    pluginId: {},
                    serverUrl: {},
                    state: {},
                    type: {},
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetRetriever: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/retrievers/{retrieverId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "retrieverId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    retrieverId: {
                        location: "uri",
                        locationName: "retrieverId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationId: {},
                    configuration: {
                        shape: "S3p"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    displayName: {},
                    retrieverArn: {},
                    retrieverId: {},
                    roleArn: {},
                    status: {},
                    type: {},
                    updatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetUser: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/users/{userId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userAliases: {
                        shape: "S6e"
                    }
                }
            }
        },
        GetWebExperience: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/experiences/{webExperienceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "webExperienceId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    webExperienceId: {
                        location: "uri",
                        locationName: "webExperienceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationId: {},
                    authenticationConfiguration: {
                        shape: "S6h"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    defaultEndpoint: {},
                    error: {
                        shape: "Sc"
                    },
                    samplePromptsControlMode: {},
                    status: {},
                    subtitle: {},
                    title: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    webExperienceArn: {},
                    webExperienceId: {},
                    welcomeMessage: {}
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                applicationId: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                displayName: {},
                                status: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConversations: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/conversations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    conversations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                conversationId: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                title: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSourceSyncJobs: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/syncjobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSourceId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    statusFilter: {
                        location: "querystring",
                        locationName: "syncStatus"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    history: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                dataSourceErrorCode: {},
                                endTime: {
                                    type: "timestamp"
                                },
                                error: {
                                    shape: "Sc"
                                },
                                executionId: {},
                                metrics: {
                                    type: "structure",
                                    members: {
                                        documentsAdded: {},
                                        documentsDeleted: {},
                                        documentsFailed: {},
                                        documentsModified: {},
                                        documentsScanned: {}
                                    }
                                },
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                dataSourceId: {},
                                displayName: {},
                                status: {},
                                type: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDocuments: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/index/{indexId}/documents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceIds: {
                        location: "querystring",
                        locationName: "dataSourceIds",
                        type: "list",
                        member: {}
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    documentDetailList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                documentId: {},
                                error: {
                                    shape: "Sc"
                                },
                                status: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListGroups: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/indices/{indexId}/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "indexId", "updatedEarlierThan" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "querystring",
                        locationName: "dataSourceId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    updatedEarlierThan: {
                        location: "querystring",
                        locationName: "updatedEarlierThan",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                groupName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIndices: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/indices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    indices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                displayName: {},
                                indexId: {},
                                status: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMessages: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/conversations/{conversationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "conversationId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    conversationId: {
                        location: "uri",
                        locationName: "conversationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                actionExecution: {
                                    shape: "S1n"
                                },
                                actionReview: {
                                    shape: "S25"
                                },
                                attachments: {
                                    shape: "S2e"
                                },
                                body: {},
                                messageId: {},
                                sourceAttribution: {
                                    shape: "S2h"
                                },
                                time: {
                                    type: "timestamp"
                                },
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPlugins: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    plugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                displayName: {},
                                pluginId: {},
                                serverUrl: {},
                                state: {},
                                type: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListRetrievers: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/retrievers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    retrievers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                applicationId: {},
                                displayName: {},
                                retrieverId: {},
                                status: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2s"
                    }
                }
            }
        },
        ListWebExperiences: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/experiences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    webExperiences: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                defaultEndpoint: {},
                                status: {},
                                updatedAt: {
                                    type: "timestamp"
                                },
                                webExperienceId: {}
                            }
                        }
                    }
                }
            }
        },
        PutFeedback: {
            http: {
                requestUri: "/applications/{applicationId}/conversations/{conversationId}/messages/{messageId}/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "conversationId", "messageId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    conversationId: {
                        location: "uri",
                        locationName: "conversationId"
                    },
                    messageCopiedAt: {
                        type: "timestamp"
                    },
                    messageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    messageUsefulness: {
                        type: "structure",
                        required: [ "submittedAt", "usefulness" ],
                        members: {
                            comment: {},
                            reason: {},
                            submittedAt: {
                                type: "timestamp"
                            },
                            usefulness: {}
                        }
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    }
                }
            }
        },
        PutGroup: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/indices/{indexId}/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "groupMembers", "groupName", "indexId", "type" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {},
                    groupMembers: {
                        type: "structure",
                        members: {
                            memberGroups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "groupName" ],
                                    members: {
                                        groupName: {},
                                        type: {}
                                    }
                                }
                            },
                            memberUsers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "userId" ],
                                    members: {
                                        type: {},
                                        userId: {}
                                    }
                                }
                            }
                        }
                    },
                    groupName: {},
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StartDataSourceSyncJob: {
            http: {
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/startsync",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSourceId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executionId: {}
                }
            }
        },
        StopDataSourceSyncJob: {
            http: {
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}/stopsync",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSourceId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    },
                    tags: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateApplication: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    attachmentsConfiguration: {
                        shape: "S2m"
                    },
                    description: {},
                    displayName: {},
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateChatControlsConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}/chatcontrols",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    blockedPhrasesConfigurationUpdate: {
                        type: "structure",
                        members: {
                            blockedPhrasesToCreateOrUpdate: {
                                shape: "S53"
                            },
                            blockedPhrasesToDelete: {
                                shape: "S53"
                            },
                            systemMessageOverride: {}
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    responseScope: {},
                    topicConfigurationsToCreateOrUpdate: {
                        shape: "S57"
                    },
                    topicConfigurationsToDelete: {
                        shape: "S57"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateDataSource: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/indices/{indexId}/datasources/{dataSourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSourceId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    configuration: {
                        shape: "S2z"
                    },
                    dataSourceId: {
                        location: "uri",
                        locationName: "dataSourceId"
                    },
                    description: {},
                    displayName: {},
                    documentEnrichmentConfiguration: {
                        shape: "S19"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    },
                    roleArn: {},
                    syncSchedule: {},
                    vpcConfiguration: {
                        shape: "S32"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateIndex: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/indices/{indexId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "indexId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    capacityConfiguration: {
                        shape: "S3a"
                    },
                    description: {},
                    displayName: {},
                    documentAttributeConfigurations: {
                        shape: "S5x"
                    },
                    indexId: {
                        location: "uri",
                        locationName: "indexId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdatePlugin: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/plugins/{pluginId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "pluginId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    authConfiguration: {
                        shape: "S3g"
                    },
                    displayName: {},
                    pluginId: {
                        location: "uri",
                        locationName: "pluginId"
                    },
                    serverUrl: {},
                    state: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateRetriever: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/retrievers/{retrieverId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "retrieverId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    configuration: {
                        shape: "S3p"
                    },
                    displayName: {},
                    retrieverId: {
                        location: "uri",
                        locationName: "retrieverId"
                    },
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateUser: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/users/{userId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "userId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    userAliasesToDelete: {
                        shape: "S6e"
                    },
                    userAliasesToUpdate: {
                        shape: "S6e"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userAliasesAdded: {
                        shape: "S6e"
                    },
                    userAliasesDeleted: {
                        shape: "S6e"
                    },
                    userAliasesUpdated: {
                        shape: "S6e"
                    }
                }
            },
            idempotent: true
        },
        UpdateWebExperience: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/experiences/{webExperienceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "webExperienceId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    authenticationConfiguration: {
                        shape: "S6h"
                    },
                    samplePromptsControlMode: {},
                    subtitle: {},
                    title: {},
                    webExperienceId: {
                        location: "uri",
                        locationName: "webExperienceId"
                    },
                    welcomeMessage: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    dataSourceId: {},
                    error: {
                        shape: "Sc"
                    },
                    id: {}
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                errorCode: {},
                errorMessage: {}
            }
        },
        Sv: {
            type: "structure",
            required: [ "name", "value" ],
            members: {
                name: {},
                value: {
                    shape: "Sx"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                dateValue: {
                    type: "timestamp"
                },
                longValue: {
                    type: "long"
                },
                stringListValue: {
                    type: "list",
                    member: {}
                },
                stringValue: {}
            },
            union: true
        },
        S19: {
            type: "structure",
            members: {
                inlineConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            condition: {
                                shape: "S1c"
                            },
                            documentContentOperator: {},
                            target: {
                                type: "structure",
                                required: [ "key" ],
                                members: {
                                    attributeValueOperator: {},
                                    key: {},
                                    value: {
                                        shape: "Sx"
                                    }
                                }
                            }
                        }
                    }
                },
                postExtractionHookConfiguration: {
                    shape: "S1h"
                },
                preExtractionHookConfiguration: {
                    shape: "S1h"
                }
            }
        },
        S1c: {
            type: "structure",
            required: [ "key", "operator" ],
            members: {
                key: {},
                operator: {},
                value: {
                    shape: "Sx"
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                invocationCondition: {
                    shape: "S1c"
                },
                lambdaArn: {},
                roleArn: {},
                s3BucketName: {}
            }
        },
        S1n: {
            type: "structure",
            required: [ "payload", "payloadFieldNameSeparator", "pluginId" ],
            members: {
                payload: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "value" ],
                        members: {
                            value: {
                                shape: "S1r"
                            }
                        }
                    }
                },
                payloadFieldNameSeparator: {},
                pluginId: {}
            }
        },
        S1r: {
            type: "structure",
            members: {},
            document: true
        },
        S1x: {
            type: "structure",
            members: {
                andAllFilters: {
                    shape: "S1y"
                },
                containsAll: {
                    shape: "Sv"
                },
                containsAny: {
                    shape: "Sv"
                },
                equalsTo: {
                    shape: "Sv"
                },
                greaterThan: {
                    shape: "Sv"
                },
                greaterThanOrEquals: {
                    shape: "Sv"
                },
                lessThan: {
                    shape: "Sv"
                },
                lessThanOrEquals: {
                    shape: "Sv"
                },
                notFilter: {
                    shape: "S1x"
                },
                orAllFilters: {
                    shape: "S1y"
                }
            }
        },
        S1y: {
            type: "list",
            member: {
                shape: "S1x"
            }
        },
        S22: {
            type: "list",
            member: {}
        },
        S25: {
            type: "structure",
            members: {
                payload: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            allowedValues: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        displayValue: {
                                            shape: "S1r"
                                        },
                                        value: {
                                            shape: "S1r"
                                        }
                                    }
                                }
                            },
                            displayName: {},
                            displayOrder: {
                                type: "integer"
                            },
                            required: {
                                type: "boolean"
                            },
                            type: {},
                            value: {
                                shape: "S1r"
                            }
                        }
                    }
                },
                payloadFieldNameSeparator: {},
                pluginId: {},
                pluginType: {}
            }
        },
        S2e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    error: {
                        shape: "Sc"
                    },
                    name: {},
                    status: {}
                }
            }
        },
        S2h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    citationNumber: {
                        type: "integer"
                    },
                    snippet: {},
                    textMessageSegments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                beginOffset: {
                                    type: "integer"
                                },
                                endOffset: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    title: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    url: {}
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "attachmentsControlMode" ],
            members: {
                attachmentsControlMode: {}
            }
        },
        S2q: {
            type: "structure",
            members: {
                kmsKeyId: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S2s: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S2z: {
            type: "structure",
            members: {},
            document: true
        },
        S32: {
            type: "structure",
            required: [ "securityGroupIds", "subnetIds" ],
            members: {
                securityGroupIds: {
                    type: "list",
                    member: {}
                },
                subnetIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                units: {
                    type: "integer"
                }
            }
        },
        S3g: {
            type: "structure",
            members: {
                basicAuthConfiguration: {
                    type: "structure",
                    required: [ "roleArn", "secretArn" ],
                    members: {
                        roleArn: {},
                        secretArn: {}
                    }
                },
                oAuth2ClientCredentialConfiguration: {
                    type: "structure",
                    required: [ "roleArn", "secretArn" ],
                    members: {
                        roleArn: {},
                        secretArn: {}
                    }
                }
            },
            union: true
        },
        S3p: {
            type: "structure",
            members: {
                kendraIndexConfiguration: {
                    type: "structure",
                    required: [ "indexId" ],
                    members: {
                        indexId: {}
                    }
                },
                nativeIndexConfiguration: {
                    type: "structure",
                    required: [ "indexId" ],
                    members: {
                        indexId: {}
                    }
                }
            },
            union: true
        },
        S40: {
            type: "structure",
            required: [ "userId" ],
            members: {
                dataSourceId: {},
                indexId: {},
                userId: {}
            }
        },
        S53: {
            type: "list",
            member: {}
        },
        S57: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "rules" ],
                members: {
                    description: {},
                    exampleChatMessages: {
                        type: "list",
                        member: {}
                    },
                    name: {},
                    rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ruleType" ],
                            members: {
                                excludedUsersAndGroups: {
                                    shape: "S5f"
                                },
                                includedUsersAndGroups: {
                                    shape: "S5f"
                                },
                                ruleConfiguration: {
                                    type: "structure",
                                    members: {
                                        contentBlockerRule: {
                                            type: "structure",
                                            members: {
                                                systemMessageOverride: {}
                                            }
                                        },
                                        contentRetrievalRule: {
                                            type: "structure",
                                            members: {
                                                eligibleDataSources: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            dataSourceId: {},
                                                            indexId: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                },
                                ruleType: {}
                            }
                        }
                    }
                }
            }
        },
        S5f: {
            type: "structure",
            members: {
                userGroups: {
                    shape: "S22"
                },
                userIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S5s: {
            type: "structure",
            members: {
                errorDetail: {
                    shape: "Sc"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                status: {}
            }
        },
        S5x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    search: {},
                    type: {}
                }
            }
        },
        S6e: {
            type: "list",
            member: {
                shape: "S40"
            }
        },
        S6h: {
            type: "structure",
            members: {
                samlConfiguration: {
                    type: "structure",
                    required: [ "metadataXML", "roleArn", "userIdAttribute" ],
                    members: {
                        metadataXML: {},
                        roleArn: {},
                        userGroupAttribute: {},
                        userIdAttribute: {}
                    }
                }
            },
            union: true
        }
    },
    paginators: {
        GetChatControlsConfiguration: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "topicConfigurations"
        },
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applications"
        },
        ListConversations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "conversations"
        },
        ListDataSourceSyncJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "history"
        },
        ListDataSources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataSources"
        },
        ListDocuments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "documentDetailList"
        },
        ListGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListIndices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "indices"
        },
        ListMessages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "messages"
        },
        ListPlugins: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "plugins"
        },
        ListRetrievers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "retrievers"
        },
        ListWebExperiences: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "webExperiences"
        }
    }
};

AWS.apiLoader.services["qconnect"] = {};

AWS.QConnect = AWS.Service.defineService("qconnect", [ "2020-10-19" ]);

AWS.apiLoader.services["qconnect"]["2020-10-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-19",
        endpointPrefix: "wisdom",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Q Connect",
        serviceId: "QConnect",
        signatureVersion: "v4",
        signingName: "wisdom",
        uid: "qconnect-2020-10-19"
    },
    operations: {
        CreateAssistant: {
            http: {
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    tags: {
                        shape: "S7"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        CreateAssistantAssociation: {
            http: {
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "association", "associationType" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    association: {
                        type: "structure",
                        members: {
                            knowledgeBaseId: {}
                        },
                        union: true
                    },
                    associationType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sp"
                    }
                }
            },
            idempotent: true
        },
        CreateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "name", "uploadId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "St"
                    },
                    name: {},
                    overrideLinkOutUri: {},
                    tags: {
                        shape: "S7"
                    },
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "Sy"
                    }
                }
            },
            idempotent: true
        },
        CreateKnowledgeBase: {
            http: {
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    knowledgeBaseType: {},
                    name: {},
                    renderingConfiguration: {
                        shape: "S15"
                    },
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    sourceConfiguration: {
                        shape: "S16"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        CreateQuickResponse: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "content", "knowledgeBaseId", "name" ],
                members: {
                    channels: {
                        shape: "S1d"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    content: {
                        shape: "S1f"
                    },
                    contentType: {},
                    description: {},
                    groupingConfiguration: {
                        shape: "S1j"
                    },
                    isActive: {
                        type: "boolean"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    language: {},
                    name: {},
                    shortcutKey: {},
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    quickResponse: {
                        shape: "S1s"
                    }
                }
            },
            idempotent: true
        },
        CreateSession: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "name" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1y"
                    }
                }
            },
            idempotent: true
        },
        DeleteAssistant: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAssistantAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteContent: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteImportJob: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "importJobId", "knowledgeBaseId" ],
                members: {
                    importJobId: {
                        location: "uri",
                        locationName: "importJobId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteKnowledgeBase: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteQuickResponse: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "quickResponseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    quickResponseId: {
                        location: "uri",
                        locationName: "quickResponseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAssistant: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetAssistantAssociation: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sp"
                    }
                }
            }
        },
        GetContent: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "Sy"
                    }
                }
            }
        },
        GetContentSummary: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentSummary: {
                        shape: "S2k"
                    }
                }
            }
        },
        GetImportJob: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importJobId", "knowledgeBaseId" ],
                members: {
                    importJobId: {
                        location: "uri",
                        locationName: "importJobId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importJob: {
                        shape: "S2n"
                    }
                }
            }
        },
        GetKnowledgeBase: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S1a"
                    }
                }
            }
        },
        GetQuickResponse: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "quickResponseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    quickResponseId: {
                        location: "uri",
                        locationName: "quickResponseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    quickResponse: {
                        shape: "S1s"
                    }
                }
            }
        },
        GetRecommendations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    waitTimeSeconds: {
                        location: "querystring",
                        locationName: "waitTimeSeconds",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recommendations" ],
                members: {
                    recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "recommendationId" ],
                            members: {
                                data: {
                                    shape: "S34"
                                },
                                document: {
                                    shape: "S3o"
                                },
                                recommendationId: {},
                                relevanceLevel: {},
                                relevanceScore: {
                                    type: "double"
                                },
                                type: {}
                            }
                        }
                    },
                    triggers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "data", "id", "recommendationIds", "source", "type" ],
                            members: {
                                data: {
                                    type: "structure",
                                    members: {
                                        query: {
                                            type: "structure",
                                            members: {
                                                text: {
                                                    shape: "S3v"
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                },
                                id: {},
                                recommendationIds: {
                                    shape: "S3w"
                                },
                                source: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        GetSession: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1y"
                    }
                }
            }
        },
        ListAssistantAssociations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantAssociationSummaries" ],
                members: {
                    assistantAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
                            members: {
                                assistantArn: {},
                                assistantAssociationArn: {},
                                assistantAssociationId: {},
                                assistantId: {},
                                associationData: {
                                    shape: "Sq"
                                },
                                associationType: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssistants: {
            http: {
                method: "GET",
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantSummaries" ],
                members: {
                    assistantSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                capabilityConfiguration: {
                                    shape: "Sf"
                                },
                                description: {},
                                integrationConfiguration: {
                                    shape: "Sh"
                                },
                                name: {},
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                },
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContents: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S4c"
                    },
                    nextToken: {}
                }
            }
        },
        ListImportJobs: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "importJobSummaries" ],
                members: {
                    importJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdTime", "importJobId", "importJobType", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "status", "uploadId" ],
                            members: {
                                createdTime: {
                                    shape: "S12"
                                },
                                externalSourceConfiguration: {
                                    shape: "S2o"
                                },
                                importJobId: {},
                                importJobType: {},
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                lastModifiedTime: {
                                    shape: "S12"
                                },
                                metadata: {
                                    shape: "St"
                                },
                                status: {},
                                uploadId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKnowledgeBases: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBaseSummaries" ],
                members: {
                    knowledgeBaseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
                            members: {
                                description: {},
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                knowledgeBaseType: {},
                                name: {},
                                renderingConfiguration: {
                                    shape: "S15"
                                },
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                sourceConfiguration: {
                                    shape: "S16"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListQuickResponses: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "quickResponseSummaries" ],
                members: {
                    nextToken: {},
                    quickResponseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "contentType", "createdTime", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "name", "quickResponseArn", "quickResponseId", "status" ],
                            members: {
                                channels: {
                                    shape: "S1d"
                                },
                                contentType: {},
                                createdTime: {
                                    shape: "S12"
                                },
                                description: {},
                                isActive: {
                                    type: "boolean"
                                },
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                lastModifiedBy: {},
                                lastModifiedTime: {
                                    shape: "S12"
                                },
                                name: {},
                                quickResponseArn: {},
                                quickResponseId: {},
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S7"
                    }
                }
            }
        },
        NotifyRecommendationsReceived: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "recommendationIds", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    recommendationIds: {
                        shape: "S3w"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                message: {},
                                recommendationId: {}
                            }
                        }
                    },
                    recommendationIds: {
                        shape: "S3w"
                    }
                }
            },
            idempotent: true
        },
        PutFeedback: {
            http: {
                method: "PUT",
                requestUri: "/assistants/{assistantId}/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "contentFeedback", "targetId", "targetType" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    contentFeedback: {
                        shape: "S4x"
                    },
                    targetId: {},
                    targetType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assistantArn", "assistantId", "contentFeedback", "targetId", "targetType" ],
                members: {
                    assistantArn: {},
                    assistantId: {},
                    contentFeedback: {
                        shape: "S4x"
                    },
                    targetId: {},
                    targetType: {}
                }
            },
            idempotent: true
        },
        QueryAssistant: {
            http: {
                requestUri: "/assistants/{assistantId}/query",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "queryText" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    queryCondition: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                single: {
                                    type: "structure",
                                    required: [ "comparator", "field", "value" ],
                                    members: {
                                        comparator: {},
                                        field: {},
                                        value: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    queryText: {
                        shape: "S3v"
                    },
                    sessionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    nextToken: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "resultId" ],
                            members: {
                                data: {
                                    shape: "S34"
                                },
                                document: {
                                    shape: "S3o"
                                },
                                relevanceScore: {
                                    type: "double"
                                },
                                resultId: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        RemoveKnowledgeBaseTemplateUri: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "searchExpression" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S4c"
                    },
                    nextToken: {}
                }
            }
        },
        SearchQuickResponses: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/search/quickResponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "searchExpression" ],
                members: {
                    attributes: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        type: "structure",
                        members: {
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "operator" ],
                                    members: {
                                        includeNoExistence: {
                                            type: "boolean"
                                        },
                                        name: {},
                                        operator: {},
                                        values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            orderOnField: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    name: {},
                                    order: {}
                                }
                            },
                            queries: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "operator", "values" ],
                                    members: {
                                        allowFuzziness: {
                                            type: "boolean"
                                        },
                                        name: {},
                                        operator: {},
                                        priority: {},
                                        values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    nextToken: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "contentType", "contents", "createdTime", "isActive", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "name", "quickResponseArn", "quickResponseId", "status" ],
                            members: {
                                attributesInterpolated: {
                                    shape: "S66"
                                },
                                attributesNotInterpolated: {
                                    shape: "S66"
                                },
                                channels: {
                                    shape: "S1d"
                                },
                                contentType: {},
                                contents: {
                                    shape: "S1t"
                                },
                                createdTime: {
                                    shape: "S12"
                                },
                                description: {},
                                groupingConfiguration: {
                                    shape: "S1j"
                                },
                                isActive: {
                                    type: "boolean"
                                },
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                language: {},
                                lastModifiedBy: {},
                                lastModifiedTime: {
                                    shape: "S12"
                                },
                                name: {},
                                quickResponseArn: {},
                                quickResponseId: {},
                                shortcutKey: {},
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    }
                }
            }
        },
        SearchSessions: {
            http: {
                requestUri: "/assistants/{assistantId}/searchSessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "searchExpression" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "sessionSummaries" ],
                members: {
                    nextToken: {},
                    sessionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "sessionArn", "sessionId" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                sessionArn: {},
                                sessionId: {}
                            }
                        }
                    }
                }
            }
        },
        StartContentUpload: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/upload",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentType", "knowledgeBaseId" ],
                members: {
                    contentType: {},
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    presignedUrlTimeToLive: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "headersToInclude", "uploadId", "url", "urlExpiry" ],
                members: {
                    headersToInclude: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    uploadId: {},
                    url: {
                        shape: "S11"
                    },
                    urlExpiry: {
                        shape: "S12"
                    }
                }
            }
        },
        StartImportJob: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importJobType", "knowledgeBaseId", "uploadId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    externalSourceConfiguration: {
                        shape: "S2o"
                    },
                    importJobType: {},
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "St"
                    },
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    importJob: {
                        shape: "S2n"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "St"
                    },
                    overrideLinkOutUri: {},
                    removeOverrideLinkOutUri: {
                        type: "boolean"
                    },
                    revisionId: {},
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "Sy"
                    }
                }
            }
        },
        UpdateKnowledgeBaseTemplateUri: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "templateUri" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    templateUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S1a"
                    }
                }
            }
        },
        UpdateQuickResponse: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "quickResponseId" ],
                members: {
                    channels: {
                        shape: "S1d"
                    },
                    content: {
                        shape: "S1f"
                    },
                    contentType: {},
                    description: {},
                    groupingConfiguration: {
                        shape: "S1j"
                    },
                    isActive: {
                        type: "boolean"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    language: {},
                    name: {},
                    quickResponseId: {
                        location: "uri",
                        locationName: "quickResponseId"
                    },
                    removeDescription: {
                        type: "boolean"
                    },
                    removeGroupingConfiguration: {
                        type: "boolean"
                    },
                    removeShortcutKey: {
                        type: "boolean"
                    },
                    shortcutKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    quickResponse: {
                        shape: "S1s"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                kmsKeyId: {}
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "structure",
            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
            members: {
                assistantArn: {},
                assistantId: {},
                capabilityConfiguration: {
                    shape: "Sf"
                },
                description: {},
                integrationConfiguration: {
                    shape: "Sh"
                },
                name: {},
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                status: {},
                tags: {
                    shape: "S7"
                },
                type: {}
            }
        },
        Sf: {
            type: "structure",
            members: {
                type: {}
            }
        },
        Sh: {
            type: "structure",
            members: {
                topicIntegrationArn: {}
            }
        },
        Sp: {
            type: "structure",
            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
            members: {
                assistantArn: {},
                assistantAssociationArn: {},
                assistantAssociationId: {},
                assistantId: {},
                associationData: {
                    shape: "Sq"
                },
                associationType: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                knowledgeBaseAssociation: {
                    type: "structure",
                    members: {
                        knowledgeBaseArn: {},
                        knowledgeBaseId: {}
                    }
                }
            },
            union: true
        },
        St: {
            type: "map",
            key: {},
            value: {}
        },
        Sy: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title", "url", "urlExpiry" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                linkOutUri: {},
                metadata: {
                    shape: "St"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {},
                url: {
                    shape: "S11"
                },
                urlExpiry: {
                    shape: "S12"
                }
            }
        },
        S11: {
            type: "string",
            sensitive: true
        },
        S12: {
            type: "timestamp",
            timestampFormat: "unixTimestamp"
        },
        S15: {
            type: "structure",
            members: {
                templateUri: {}
            }
        },
        S16: {
            type: "structure",
            members: {
                appIntegrations: {
                    type: "structure",
                    required: [ "appIntegrationArn" ],
                    members: {
                        appIntegrationArn: {},
                        objectFields: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            union: true
        },
        S1a: {
            type: "structure",
            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
            members: {
                description: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                knowledgeBaseType: {},
                lastContentModificationTime: {
                    shape: "S12"
                },
                name: {},
                renderingConfiguration: {
                    shape: "S15"
                },
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                sourceConfiguration: {
                    shape: "S16"
                },
                status: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        S1f: {
            type: "structure",
            members: {
                content: {
                    shape: "S1g"
                }
            },
            union: true
        },
        S1g: {
            type: "string",
            sensitive: true
        },
        S1j: {
            type: "structure",
            members: {
                criteria: {
                    type: "string",
                    sensitive: true
                },
                values: {
                    type: "list",
                    member: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1s: {
            type: "structure",
            required: [ "contentType", "createdTime", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "name", "quickResponseArn", "quickResponseId", "status" ],
            members: {
                channels: {
                    shape: "S1d"
                },
                contentType: {},
                contents: {
                    shape: "S1t"
                },
                createdTime: {
                    shape: "S12"
                },
                description: {},
                groupingConfiguration: {
                    shape: "S1j"
                },
                isActive: {
                    type: "boolean"
                },
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                language: {},
                lastModifiedBy: {},
                lastModifiedTime: {
                    shape: "S12"
                },
                name: {},
                quickResponseArn: {},
                quickResponseId: {},
                shortcutKey: {},
                status: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                markdown: {
                    shape: "S1u"
                },
                plainText: {
                    shape: "S1u"
                }
            }
        },
        S1u: {
            type: "structure",
            members: {
                content: {
                    shape: "S1g"
                }
            },
            union: true
        },
        S1y: {
            type: "structure",
            required: [ "name", "sessionArn", "sessionId" ],
            members: {
                description: {},
                integrationConfiguration: {
                    type: "structure",
                    members: {
                        topicIntegrationArn: {}
                    }
                },
                name: {},
                sessionArn: {},
                sessionId: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S2k: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                metadata: {
                    shape: "St"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {}
            }
        },
        S2n: {
            type: "structure",
            required: [ "createdTime", "importJobId", "importJobType", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "status", "uploadId", "url", "urlExpiry" ],
            members: {
                createdTime: {
                    shape: "S12"
                },
                externalSourceConfiguration: {
                    shape: "S2o"
                },
                failedRecordReport: {
                    shape: "S11"
                },
                importJobId: {},
                importJobType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                lastModifiedTime: {
                    shape: "S12"
                },
                metadata: {
                    shape: "St"
                },
                status: {},
                uploadId: {},
                url: {
                    shape: "S11"
                },
                urlExpiry: {
                    shape: "S12"
                }
            }
        },
        S2o: {
            type: "structure",
            required: [ "configuration", "source" ],
            members: {
                configuration: {
                    type: "structure",
                    members: {
                        connectConfiguration: {
                            type: "structure",
                            members: {
                                instanceId: {}
                            }
                        }
                    },
                    union: true
                },
                source: {}
            }
        },
        S34: {
            type: "structure",
            required: [ "details", "reference" ],
            members: {
                details: {
                    type: "structure",
                    members: {
                        contentData: {
                            type: "structure",
                            required: [ "rankingData", "textData" ],
                            members: {
                                rankingData: {
                                    shape: "S37"
                                },
                                textData: {
                                    shape: "S3a"
                                }
                            }
                        },
                        generativeData: {
                            type: "structure",
                            required: [ "completion", "rankingData", "references" ],
                            members: {
                                completion: {
                                    shape: "S3f"
                                },
                                rankingData: {
                                    shape: "S37"
                                },
                                references: {
                                    type: "list",
                                    member: {
                                        shape: "S34"
                                    }
                                }
                            }
                        },
                        sourceContentData: {
                            type: "structure",
                            required: [ "id", "rankingData", "textData", "type" ],
                            members: {
                                id: {},
                                rankingData: {
                                    shape: "S37"
                                },
                                textData: {
                                    shape: "S3a"
                                },
                                type: {}
                            }
                        }
                    },
                    union: true
                },
                reference: {
                    type: "structure",
                    members: {
                        contentReference: {
                            shape: "S3l"
                        },
                        generativeReference: {
                            type: "structure",
                            members: {
                                generationId: {},
                                modelId: {}
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S37: {
            type: "structure",
            members: {
                relevanceLevel: {},
                relevanceScore: {
                    type: "double"
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                excerpt: {
                    shape: "S3b"
                },
                title: {
                    shape: "S3b"
                }
            }
        },
        S3b: {
            type: "structure",
            members: {
                highlights: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            beginOffsetInclusive: {
                                type: "integer"
                            },
                            endOffsetExclusive: {
                                type: "integer"
                            }
                        }
                    }
                },
                text: {
                    shape: "S3f"
                }
            }
        },
        S3f: {
            type: "string",
            sensitive: true
        },
        S3l: {
            type: "structure",
            members: {
                contentArn: {},
                contentId: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {}
            }
        },
        S3o: {
            type: "structure",
            required: [ "contentReference" ],
            members: {
                contentReference: {
                    shape: "S3l"
                },
                excerpt: {
                    shape: "S3b"
                },
                title: {
                    shape: "S3b"
                }
            }
        },
        S3v: {
            type: "string",
            sensitive: true
        },
        S3w: {
            type: "list",
            member: {}
        },
        S4c: {
            type: "list",
            member: {
                shape: "S2k"
            }
        },
        S4x: {
            type: "structure",
            members: {
                generativeContentFeedbackData: {
                    type: "structure",
                    required: [ "relevance" ],
                    members: {
                        relevance: {}
                    }
                }
            },
            union: true
        },
        S5f: {
            type: "structure",
            required: [ "filters" ],
            members: {
                filters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "field", "operator", "value" ],
                        members: {
                            field: {},
                            operator: {},
                            value: {}
                        }
                    }
                }
            }
        },
        S66: {
            type: "list",
            member: {},
            sensitive: true
        }
    },
    paginators: {
        ListAssistantAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantAssociationSummaries"
        },
        ListAssistants: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantSummaries"
        },
        ListContents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        ListImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "importJobSummaries"
        },
        ListKnowledgeBases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "knowledgeBaseSummaries"
        },
        ListQuickResponses: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "quickResponseSummaries"
        },
        QueryAssistant: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "results"
        },
        SearchContent: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        SearchQuickResponses: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "results"
        },
        SearchSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sessionSummaries"
        }
    }
};

AWS.apiLoader.services["cleanroomsml"] = {};

AWS.CleanRoomsML = AWS.Service.defineService("cleanroomsml", [ "2023-09-06" ]);

AWS.apiLoader.services["cleanroomsml"]["2023-09-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-09-06",
        endpointPrefix: "cleanrooms-ml",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Clean Rooms ML",
        serviceId: "CleanRoomsML",
        signatureVersion: "v4",
        signingName: "cleanrooms-ml",
        uid: "cleanroomsml-2023-09-06"
    },
    operations: {
        CreateAudienceModel: {
            http: {
                requestUri: "/audience-model",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "trainingDatasetArn" ],
                members: {
                    description: {},
                    kmsKeyArn: {},
                    name: {},
                    tags: {
                        shape: "S5"
                    },
                    trainingDataEndTime: {
                        shape: "S8"
                    },
                    trainingDataStartTime: {
                        shape: "S8"
                    },
                    trainingDatasetArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "audienceModelArn" ],
                members: {
                    audienceModelArn: {}
                }
            },
            idempotent: true
        },
        CreateConfiguredAudienceModel: {
            http: {
                requestUri: "/configured-audience-model",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "audienceModelArn", "name", "outputConfig", "sharedAudienceMetrics" ],
                members: {
                    audienceModelArn: {},
                    audienceSizeConfig: {
                        shape: "Sd"
                    },
                    childResourceTagOnCreatePolicy: {},
                    description: {},
                    minMatchingSeedSize: {
                        type: "integer"
                    },
                    name: {},
                    outputConfig: {
                        shape: "Sj"
                    },
                    sharedAudienceMetrics: {
                        shape: "So"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelArn" ],
                members: {
                    configuredAudienceModelArn: {}
                }
            },
            idempotent: true
        },
        CreateTrainingDataset: {
            http: {
                requestUri: "/training-dataset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "roleArn", "trainingData" ],
                members: {
                    description: {},
                    name: {},
                    roleArn: {},
                    tags: {
                        shape: "S5"
                    },
                    trainingData: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trainingDatasetArn" ],
                members: {
                    trainingDatasetArn: {}
                }
            },
            idempotent: true
        },
        DeleteAudienceGenerationJob: {
            http: {
                method: "DELETE",
                requestUri: "/audience-generation-job/{audienceGenerationJobArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "audienceGenerationJobArn" ],
                members: {
                    audienceGenerationJobArn: {
                        location: "uri",
                        locationName: "audienceGenerationJobArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteAudienceModel: {
            http: {
                method: "DELETE",
                requestUri: "/audience-model/{audienceModelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "audienceModelArn" ],
                members: {
                    audienceModelArn: {
                        location: "uri",
                        locationName: "audienceModelArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteConfiguredAudienceModel: {
            http: {
                method: "DELETE",
                requestUri: "/configured-audience-model/{configuredAudienceModelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelArn" ],
                members: {
                    configuredAudienceModelArn: {
                        location: "uri",
                        locationName: "configuredAudienceModelArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteConfiguredAudienceModelPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/configured-audience-model/{configuredAudienceModelArn}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelArn" ],
                members: {
                    configuredAudienceModelArn: {
                        location: "uri",
                        locationName: "configuredAudienceModelArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteTrainingDataset: {
            http: {
                method: "DELETE",
                requestUri: "/training-dataset/{trainingDatasetArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trainingDatasetArn" ],
                members: {
                    trainingDatasetArn: {
                        location: "uri",
                        locationName: "trainingDatasetArn"
                    }
                }
            },
            idempotent: true
        },
        GetAudienceGenerationJob: {
            http: {
                method: "GET",
                requestUri: "/audience-generation-job/{audienceGenerationJobArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "audienceGenerationJobArn" ],
                members: {
                    audienceGenerationJobArn: {
                        location: "uri",
                        locationName: "audienceGenerationJobArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "audienceGenerationJobArn", "configuredAudienceModelArn", "createTime", "name", "status", "updateTime" ],
                members: {
                    audienceGenerationJobArn: {},
                    collaborationId: {},
                    configuredAudienceModelArn: {},
                    createTime: {
                        shape: "S8"
                    },
                    description: {},
                    includeSeedInOutput: {
                        type: "boolean"
                    },
                    metrics: {
                        type: "structure",
                        required: [ "relevanceMetrics" ],
                        members: {
                            relevanceMetrics: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "audienceSize" ],
                                    members: {
                                        audienceSize: {
                                            shape: "S1l"
                                        },
                                        score: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    name: {},
                    seedAudience: {
                        shape: "S1n"
                    },
                    startedBy: {},
                    status: {},
                    statusDetails: {
                        shape: "S1p"
                    },
                    tags: {
                        shape: "S5"
                    },
                    updateTime: {
                        shape: "S8"
                    }
                }
            }
        },
        GetAudienceModel: {
            http: {
                method: "GET",
                requestUri: "/audience-model/{audienceModelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "audienceModelArn" ],
                members: {
                    audienceModelArn: {
                        location: "uri",
                        locationName: "audienceModelArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "audienceModelArn", "createTime", "name", "status", "trainingDatasetArn", "updateTime" ],
                members: {
                    audienceModelArn: {},
                    createTime: {
                        shape: "S8"
                    },
                    description: {},
                    kmsKeyArn: {},
                    metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "forTopKItemPredictions", "type", "value" ],
                            members: {
                                forTopKItemPredictions: {
                                    type: "integer"
                                },
                                type: {},
                                value: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    name: {},
                    status: {},
                    statusDetails: {
                        shape: "S1p"
                    },
                    tags: {
                        shape: "S5"
                    },
                    trainingDataEndTime: {
                        shape: "S8"
                    },
                    trainingDataStartTime: {
                        shape: "S8"
                    },
                    trainingDatasetArn: {},
                    updateTime: {
                        shape: "S8"
                    }
                }
            }
        },
        GetConfiguredAudienceModel: {
            http: {
                method: "GET",
                requestUri: "/configured-audience-model/{configuredAudienceModelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelArn" ],
                members: {
                    configuredAudienceModelArn: {
                        location: "uri",
                        locationName: "configuredAudienceModelArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "audienceModelArn", "configuredAudienceModelArn", "createTime", "name", "outputConfig", "sharedAudienceMetrics", "status", "updateTime" ],
                members: {
                    audienceModelArn: {},
                    audienceSizeConfig: {
                        shape: "Sd"
                    },
                    childResourceTagOnCreatePolicy: {},
                    configuredAudienceModelArn: {},
                    createTime: {
                        shape: "S8"
                    },
                    description: {},
                    minMatchingSeedSize: {
                        type: "integer"
                    },
                    name: {},
                    outputConfig: {
                        shape: "Sj"
                    },
                    sharedAudienceMetrics: {
                        shape: "So"
                    },
                    status: {},
                    tags: {
                        shape: "S5"
                    },
                    updateTime: {
                        shape: "S8"
                    }
                }
            }
        },
        GetConfiguredAudienceModelPolicy: {
            http: {
                method: "GET",
                requestUri: "/configured-audience-model/{configuredAudienceModelArn}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelArn" ],
                members: {
                    configuredAudienceModelArn: {
                        location: "uri",
                        locationName: "configuredAudienceModelArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelArn", "configuredAudienceModelPolicy", "policyHash" ],
                members: {
                    configuredAudienceModelArn: {},
                    configuredAudienceModelPolicy: {},
                    policyHash: {}
                }
            }
        },
        GetTrainingDataset: {
            http: {
                method: "GET",
                requestUri: "/training-dataset/{trainingDatasetArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trainingDatasetArn" ],
                members: {
                    trainingDatasetArn: {
                        location: "uri",
                        locationName: "trainingDatasetArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createTime", "name", "roleArn", "status", "trainingData", "trainingDatasetArn", "updateTime" ],
                members: {
                    createTime: {
                        shape: "S8"
                    },
                    description: {},
                    name: {},
                    roleArn: {},
                    status: {},
                    tags: {
                        shape: "S5"
                    },
                    trainingData: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    trainingDatasetArn: {},
                    updateTime: {
                        shape: "S8"
                    }
                }
            }
        },
        ListAudienceExportJobs: {
            http: {
                method: "GET",
                requestUri: "/audience-export-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    audienceGenerationJobArn: {
                        location: "querystring",
                        locationName: "audienceGenerationJobArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "audienceExportJobs" ],
                members: {
                    audienceExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "audienceGenerationJobArn", "audienceSize", "createTime", "name", "status", "updateTime" ],
                            members: {
                                audienceGenerationJobArn: {},
                                audienceSize: {
                                    shape: "S1l"
                                },
                                createTime: {
                                    shape: "S8"
                                },
                                description: {},
                                name: {},
                                outputLocation: {},
                                status: {},
                                statusDetails: {
                                    shape: "S1p"
                                },
                                updateTime: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAudienceGenerationJobs: {
            http: {
                method: "GET",
                requestUri: "/audience-generation-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    collaborationId: {
                        location: "querystring",
                        locationName: "collaborationId"
                    },
                    configuredAudienceModelArn: {
                        location: "querystring",
                        locationName: "configuredAudienceModelArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "audienceGenerationJobs" ],
                members: {
                    audienceGenerationJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "audienceGenerationJobArn", "configuredAudienceModelArn", "createTime", "name", "status", "updateTime" ],
                            members: {
                                audienceGenerationJobArn: {},
                                collaborationId: {},
                                configuredAudienceModelArn: {},
                                createTime: {
                                    shape: "S8"
                                },
                                description: {},
                                name: {},
                                startedBy: {},
                                status: {},
                                updateTime: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAudienceModels: {
            http: {
                method: "GET",
                requestUri: "/audience-model",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "audienceModels" ],
                members: {
                    audienceModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "audienceModelArn", "createTime", "name", "status", "trainingDatasetArn", "updateTime" ],
                            members: {
                                audienceModelArn: {},
                                createTime: {
                                    shape: "S8"
                                },
                                description: {},
                                name: {},
                                status: {},
                                trainingDatasetArn: {},
                                updateTime: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConfiguredAudienceModels: {
            http: {
                method: "GET",
                requestUri: "/configured-audience-model",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModels" ],
                members: {
                    configuredAudienceModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "audienceModelArn", "configuredAudienceModelArn", "createTime", "name", "outputConfig", "status", "updateTime" ],
                            members: {
                                audienceModelArn: {},
                                configuredAudienceModelArn: {},
                                createTime: {
                                    shape: "S8"
                                },
                                description: {},
                                name: {},
                                outputConfig: {
                                    shape: "Sj"
                                },
                                status: {},
                                updateTime: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "S5"
                    }
                }
            }
        },
        ListTrainingDatasets: {
            http: {
                method: "GET",
                requestUri: "/training-dataset",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trainingDatasets" ],
                members: {
                    nextToken: {},
                    trainingDatasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createTime", "name", "status", "trainingDatasetArn", "updateTime" ],
                            members: {
                                createTime: {
                                    shape: "S8"
                                },
                                description: {},
                                name: {},
                                status: {},
                                trainingDatasetArn: {},
                                updateTime: {
                                    shape: "S8"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutConfiguredAudienceModelPolicy: {
            http: {
                method: "PUT",
                requestUri: "/configured-audience-model/{configuredAudienceModelArn}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelArn", "configuredAudienceModelPolicy" ],
                members: {
                    configuredAudienceModelArn: {
                        location: "uri",
                        locationName: "configuredAudienceModelArn"
                    },
                    configuredAudienceModelPolicy: {},
                    policyExistenceCondition: {},
                    previousPolicyHash: {}
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelPolicy", "policyHash" ],
                members: {
                    configuredAudienceModelPolicy: {},
                    policyHash: {}
                }
            },
            idempotent: true
        },
        StartAudienceExportJob: {
            http: {
                requestUri: "/audience-export-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "audienceGenerationJobArn", "audienceSize", "name" ],
                members: {
                    audienceGenerationJobArn: {},
                    audienceSize: {
                        shape: "S1l"
                    },
                    description: {},
                    name: {}
                }
            },
            idempotent: true
        },
        StartAudienceGenerationJob: {
            http: {
                requestUri: "/audience-generation-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelArn", "name", "seedAudience" ],
                members: {
                    collaborationId: {},
                    configuredAudienceModelArn: {},
                    description: {},
                    includeSeedInOutput: {
                        type: "boolean"
                    },
                    name: {},
                    seedAudience: {
                        shape: "S1n"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "audienceGenerationJobArn" ],
                members: {
                    audienceGenerationJobArn: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateConfiguredAudienceModel: {
            http: {
                method: "PATCH",
                requestUri: "/configured-audience-model/{configuredAudienceModelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configuredAudienceModelArn" ],
                members: {
                    audienceModelArn: {},
                    audienceSizeConfig: {
                        shape: "Sd"
                    },
                    configuredAudienceModelArn: {
                        location: "uri",
                        locationName: "configuredAudienceModelArn"
                    },
                    description: {},
                    minMatchingSeedSize: {
                        type: "integer"
                    },
                    outputConfig: {
                        shape: "Sj"
                    },
                    sharedAudienceMetrics: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuredAudienceModelArn" ],
                members: {
                    configuredAudienceModelArn: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        S8: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sd: {
            type: "structure",
            required: [ "audienceSizeBins", "audienceSizeType" ],
            members: {
                audienceSizeBins: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                audienceSizeType: {}
            }
        },
        Sj: {
            type: "structure",
            required: [ "destination", "roleArn" ],
            members: {
                destination: {
                    type: "structure",
                    required: [ "s3Destination" ],
                    members: {
                        s3Destination: {
                            shape: "Sl"
                        }
                    }
                },
                roleArn: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "s3Uri" ],
            members: {
                s3Uri: {}
            }
        },
        So: {
            type: "list",
            member: {}
        },
        Su: {
            type: "structure",
            required: [ "inputConfig", "type" ],
            members: {
                inputConfig: {
                    type: "structure",
                    required: [ "dataSource", "schema" ],
                    members: {
                        dataSource: {
                            type: "structure",
                            required: [ "glueDataSource" ],
                            members: {
                                glueDataSource: {
                                    type: "structure",
                                    required: [ "databaseName", "tableName" ],
                                    members: {
                                        catalogId: {},
                                        databaseName: {},
                                        tableName: {}
                                    }
                                }
                            }
                        },
                        schema: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "columnName", "columnTypes" ],
                                members: {
                                    columnName: {},
                                    columnTypes: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    }
                },
                type: {}
            }
        },
        S1l: {
            type: "structure",
            required: [ "type", "value" ],
            members: {
                type: {},
                value: {
                    type: "integer"
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "dataSource", "roleArn" ],
            members: {
                dataSource: {
                    shape: "Sl"
                },
                roleArn: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                message: {},
                statusCode: {}
            }
        }
    },
    paginators: {
        ListAudienceExportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "audienceExportJobs"
        },
        ListAudienceGenerationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "audienceGenerationJobs"
        },
        ListAudienceModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "audienceModels"
        },
        ListConfiguredAudienceModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "configuredAudienceModels"
        },
        ListTrainingDatasets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "trainingDatasets"
        }
    }
};

AWS.apiLoader.services["marketplaceagreement"] = {};

AWS.MarketplaceAgreement = AWS.Service.defineService("marketplaceagreement", [ "2020-03-01" ]);

AWS.apiLoader.services["marketplaceagreement"]["2020-03-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-03-01",
        endpointPrefix: "agreement-marketplace",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Agreement Service",
        serviceFullName: "AWS Marketplace Agreement Service",
        serviceId: "Marketplace Agreement",
        signatureVersion: "v4",
        signingName: "aws-marketplace",
        targetPrefix: "AWSMPCommerceService_v20200301",
        uid: "marketplace-agreement-2020-03-01"
    },
    operations: {
        DescribeAgreement: {
            input: {
                type: "structure",
                required: [ "agreementId" ],
                members: {
                    agreementId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    acceptanceTime: {
                        type: "timestamp"
                    },
                    acceptor: {
                        shape: "S5"
                    },
                    agreementId: {},
                    agreementType: {},
                    endTime: {
                        type: "timestamp"
                    },
                    estimatedCharges: {
                        type: "structure",
                        members: {
                            agreementValue: {},
                            currencyCode: {}
                        }
                    },
                    proposalSummary: {
                        shape: "Sb"
                    },
                    proposer: {
                        shape: "Sg"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        GetAgreementTerms: {
            input: {
                type: "structure",
                required: [ "agreementId" ],
                members: {
                    agreementId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    acceptedTerms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                byolPricingTerm: {
                                    type: "structure",
                                    members: {
                                        type: {}
                                    }
                                },
                                configurableUpfrontPricingTerm: {
                                    type: "structure",
                                    members: {
                                        configuration: {
                                            type: "structure",
                                            required: [ "dimensions", "selectorValue" ],
                                            members: {
                                                dimensions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "dimensionKey", "dimensionValue" ],
                                                        members: {
                                                            dimensionKey: {},
                                                            dimensionValue: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                },
                                                selectorValue: {}
                                            }
                                        },
                                        currencyCode: {},
                                        rateCards: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    constraints: {
                                                        type: "structure",
                                                        members: {
                                                            multipleDimensionSelection: {},
                                                            quantityConfiguration: {}
                                                        }
                                                    },
                                                    rateCard: {
                                                        shape: "Sy"
                                                    },
                                                    selector: {
                                                        type: "structure",
                                                        members: {
                                                            type: {},
                                                            value: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        type: {}
                                    }
                                },
                                fixedUpfrontPricingTerm: {
                                    type: "structure",
                                    members: {
                                        currencyCode: {},
                                        duration: {},
                                        grants: {
                                            shape: "S12"
                                        },
                                        price: {},
                                        type: {}
                                    }
                                },
                                freeTrialPricingTerm: {
                                    type: "structure",
                                    members: {
                                        duration: {},
                                        grants: {
                                            shape: "S12"
                                        },
                                        type: {}
                                    }
                                },
                                legalTerm: {
                                    type: "structure",
                                    members: {
                                        documents: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    type: {},
                                                    url: {},
                                                    version: {}
                                                }
                                            }
                                        },
                                        type: {}
                                    }
                                },
                                paymentScheduleTerm: {
                                    type: "structure",
                                    members: {
                                        currencyCode: {},
                                        schedule: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    chargeAmount: {},
                                                    chargeDate: {
                                                        type: "timestamp"
                                                    }
                                                }
                                            }
                                        },
                                        type: {}
                                    }
                                },
                                recurringPaymentTerm: {
                                    type: "structure",
                                    members: {
                                        billingPeriod: {},
                                        currencyCode: {},
                                        price: {},
                                        type: {}
                                    }
                                },
                                renewalTerm: {
                                    type: "structure",
                                    members: {
                                        configuration: {
                                            type: "structure",
                                            required: [ "enableAutoRenew" ],
                                            members: {
                                                enableAutoRenew: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        type: {}
                                    }
                                },
                                supportTerm: {
                                    type: "structure",
                                    members: {
                                        refundPolicy: {},
                                        type: {}
                                    }
                                },
                                usageBasedPricingTerm: {
                                    type: "structure",
                                    members: {
                                        currencyCode: {},
                                        rateCards: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    rateCard: {
                                                        shape: "Sy"
                                                    }
                                                }
                                            }
                                        },
                                        type: {}
                                    }
                                },
                                validityTerm: {
                                    type: "structure",
                                    members: {
                                        agreementDuration: {},
                                        agreementEndDate: {
                                            type: "timestamp"
                                        },
                                        agreementStartDate: {
                                            type: "timestamp"
                                        },
                                        type: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchAgreements: {
            input: {
                type: "structure",
                members: {
                    catalog: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sort: {
                        type: "structure",
                        members: {
                            sortBy: {},
                            sortOrder: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    agreementViewSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                acceptanceTime: {
                                    type: "timestamp"
                                },
                                acceptor: {
                                    shape: "S5"
                                },
                                agreementId: {},
                                agreementType: {},
                                endTime: {
                                    type: "timestamp"
                                },
                                proposalSummary: {
                                    shape: "Sb"
                                },
                                proposer: {
                                    shape: "Sg"
                                },
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                accountId: {}
            }
        },
        Sb: {
            type: "structure",
            members: {
                offerId: {},
                resources: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            id: {},
                            type: {}
                        }
                    }
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                accountId: {}
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    dimensionKey: {},
                    price: {}
                }
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    dimensionKey: {},
                    maxQuantity: {
                        type: "integer"
                    }
                }
            }
        }
    },
    paginators: {
        GetAgreementTerms: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        SearchAgreements: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["marketplacedeployment"] = {};

AWS.MarketplaceDeployment = AWS.Service.defineService("marketplacedeployment", [ "2023-01-25" ]);

AWS.apiLoader.services["marketplacedeployment"]["2023-01-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-01-25",
        endpointPrefix: "deployment-marketplace",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Marketplace Deployment Service",
        serviceId: "Marketplace Deployment",
        signatureVersion: "v4",
        signingName: "aws-marketplace",
        uid: "marketplace-deployment-2023-01-25"
    },
    operations: {
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4"
                    }
                }
            }
        },
        PutDeploymentParameter: {
            http: {
                requestUri: "/catalogs/{catalog}/products/{productId}/deployment-parameters",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agreementId", "catalog", "deploymentParameter", "productId" ],
                members: {
                    agreementId: {},
                    catalog: {
                        location: "uri",
                        locationName: "catalog"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    deploymentParameter: {
                        type: "structure",
                        required: [ "name", "secretString" ],
                        members: {
                            name: {},
                            secretString: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    },
                    expirationDate: {
                        type: "timestamp",
                        timestampFormat: "iso8601"
                    },
                    productId: {
                        location: "uri",
                        locationName: "productId"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agreementId", "deploymentParameterId", "resourceArn" ],
                members: {
                    agreementId: {},
                    deploymentParameterId: {},
                    resourceArn: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["neptunegraph"] = {};

AWS.NeptuneGraph = AWS.Service.defineService("neptunegraph", [ "2023-11-29" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    109: [ function(require, module, exports) {
        var AWS = require("../core");
        if (AWS.NeptuneGraph) {
            AWS.util.update(AWS.NeptuneGraph.prototype, {
                validateService: function validateService() {
                    var msg = "AWS Neptune Graph is not available in the AWS SDK for JavaScript v2, consider using the AWS SDK for JavaScript v3: https://www.npmjs.com/package/@aws-sdk/client-neptune-graph";
                    throw AWS.util.error(new Error(), {
                        name: "ServiceExcludedFromV2",
                        message: msg
                    });
                }
            });
        }
    }, {
        "../core": 44
    } ]
}, {}, [ 109 ]);

AWS.apiLoader.services["neptunegraph"]["2023-11-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2023-11-29",
        endpointPrefix: "neptune-graph",
        jsonVersion: "1.1",
        protocol: "rest-json",
        ripServiceName: "neptune-graph",
        serviceAbbreviation: "Neptune Graph",
        serviceFullName: "Amazon Neptune Graph",
        serviceId: "Neptune Graph",
        signatureVersion: "v4",
        signingName: "neptune-graph",
        uid: "neptune-graph-2023-11-29"
    },
    operations: {
        CancelImportTask: {
            http: {
                method: "DELETE",
                requestUri: "/importtasks/{taskIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskIdentifier" ],
                members: {
                    taskIdentifier: {
                        location: "uri",
                        locationName: "taskIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "taskId", "source", "roleArn", "status" ],
                members: {
                    graphId: {},
                    taskId: {},
                    source: {},
                    format: {},
                    roleArn: {},
                    status: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        CreateGraph: {
            http: {
                requestUri: "/graphs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "graphName", "provisionedMemory" ],
                members: {
                    graphName: {},
                    tags: {
                        shape: "Sb"
                    },
                    publicConnectivity: {
                        type: "boolean"
                    },
                    kmsKeyIdentifier: {},
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    deletionProtection: {
                        type: "boolean"
                    },
                    provisionedMemory: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    status: {},
                    statusReason: {},
                    createTime: {
                        type: "timestamp"
                    },
                    provisionedMemory: {
                        type: "integer"
                    },
                    endpoint: {},
                    publicConnectivity: {
                        type: "boolean"
                    },
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    kmsKeyIdentifier: {},
                    sourceSnapshotId: {},
                    deletionProtection: {
                        type: "boolean"
                    },
                    buildNumber: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        CreateGraphSnapshot: {
            http: {
                requestUri: "/snapshots",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier", "snapshotName" ],
                members: {
                    graphIdentifier: {},
                    snapshotName: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    sourceGraphId: {},
                    snapshotCreateTime: {
                        type: "timestamp"
                    },
                    status: {},
                    kmsKeyIdentifier: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        CreateGraphUsingImportTask: {
            http: {
                requestUri: "/importtasks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "graphName", "source", "roleArn" ],
                members: {
                    graphName: {},
                    tags: {
                        shape: "Sb"
                    },
                    publicConnectivity: {
                        type: "boolean"
                    },
                    kmsKeyIdentifier: {},
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    deletionProtection: {
                        type: "boolean"
                    },
                    importOptions: {
                        shape: "Su"
                    },
                    maxProvisionedMemory: {
                        type: "integer"
                    },
                    minProvisionedMemory: {
                        type: "integer"
                    },
                    failOnError: {
                        type: "boolean"
                    },
                    source: {},
                    format: {},
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "taskId", "source", "roleArn", "status" ],
                members: {
                    graphId: {},
                    taskId: {},
                    source: {},
                    format: {},
                    roleArn: {},
                    status: {},
                    importOptions: {
                        shape: "Su"
                    }
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        CreatePrivateGraphEndpoint: {
            http: {
                requestUri: "/graphs/{graphIdentifier}/endpoints/",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    },
                    vpcId: {},
                    subnetIds: {
                        shape: "S11"
                    },
                    vpcSecurityGroupIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "vpcId", "subnetIds", "status" ],
                members: {
                    vpcId: {},
                    subnetIds: {
                        shape: "S11"
                    },
                    status: {},
                    vpcEndpointId: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        DeleteGraph: {
            http: {
                method: "DELETE",
                requestUri: "/graphs/{graphIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier", "skipSnapshot" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    },
                    skipSnapshot: {
                        location: "querystring",
                        locationName: "skipSnapshot",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    status: {},
                    statusReason: {},
                    createTime: {
                        type: "timestamp"
                    },
                    provisionedMemory: {
                        type: "integer"
                    },
                    endpoint: {},
                    publicConnectivity: {
                        type: "boolean"
                    },
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    kmsKeyIdentifier: {},
                    sourceSnapshotId: {},
                    deletionProtection: {
                        type: "boolean"
                    },
                    buildNumber: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        DeleteGraphSnapshot: {
            http: {
                method: "DELETE",
                requestUri: "/snapshots/{snapshotIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "snapshotIdentifier" ],
                members: {
                    snapshotIdentifier: {
                        location: "uri",
                        locationName: "snapshotIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    sourceGraphId: {},
                    snapshotCreateTime: {
                        type: "timestamp"
                    },
                    status: {},
                    kmsKeyIdentifier: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        DeletePrivateGraphEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/graphs/{graphIdentifier}/endpoints/{vpcId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier", "vpcId" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    },
                    vpcId: {
                        location: "uri",
                        locationName: "vpcId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "vpcId", "subnetIds", "status" ],
                members: {
                    vpcId: {},
                    subnetIds: {
                        shape: "S11"
                    },
                    status: {},
                    vpcEndpointId: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        GetGraph: {
            http: {
                method: "GET",
                requestUri: "/graphs/{graphIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    status: {},
                    statusReason: {},
                    createTime: {
                        type: "timestamp"
                    },
                    provisionedMemory: {
                        type: "integer"
                    },
                    endpoint: {},
                    publicConnectivity: {
                        type: "boolean"
                    },
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    kmsKeyIdentifier: {},
                    sourceSnapshotId: {},
                    deletionProtection: {
                        type: "boolean"
                    },
                    buildNumber: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        GetGraphSnapshot: {
            http: {
                method: "GET",
                requestUri: "/snapshots/{snapshotIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "snapshotIdentifier" ],
                members: {
                    snapshotIdentifier: {
                        location: "uri",
                        locationName: "snapshotIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    sourceGraphId: {},
                    snapshotCreateTime: {
                        type: "timestamp"
                    },
                    status: {},
                    kmsKeyIdentifier: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        GetImportTask: {
            http: {
                method: "GET",
                requestUri: "/importtasks/{taskIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskIdentifier" ],
                members: {
                    taskIdentifier: {
                        location: "uri",
                        locationName: "taskIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "taskId", "source", "roleArn", "status" ],
                members: {
                    graphId: {},
                    taskId: {},
                    source: {},
                    format: {},
                    roleArn: {},
                    status: {},
                    importOptions: {
                        shape: "Su"
                    },
                    importTaskDetails: {
                        type: "structure",
                        required: [ "status", "startTime", "timeElapsedSeconds", "progressPercentage", "errorCount", "statementCount", "dictionaryEntryCount" ],
                        members: {
                            status: {},
                            startTime: {
                                type: "timestamp"
                            },
                            timeElapsedSeconds: {
                                type: "long"
                            },
                            progressPercentage: {
                                type: "integer"
                            },
                            errorCount: {
                                type: "integer"
                            },
                            errorDetails: {},
                            statementCount: {
                                type: "long"
                            },
                            dictionaryEntryCount: {
                                type: "long"
                            }
                        }
                    },
                    attemptNumber: {
                        type: "integer"
                    },
                    statusReason: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        GetPrivateGraphEndpoint: {
            http: {
                method: "GET",
                requestUri: "/graphs/{graphIdentifier}/endpoints/{vpcId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier", "vpcId" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    },
                    vpcId: {
                        location: "uri",
                        locationName: "vpcId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "vpcId", "subnetIds", "status" ],
                members: {
                    vpcId: {},
                    subnetIds: {
                        shape: "S11"
                    },
                    status: {},
                    vpcEndpointId: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        ListGraphSnapshots: {
            http: {
                method: "GET",
                requestUri: "/snapshots",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    graphIdentifier: {
                        location: "querystring",
                        locationName: "graphIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "graphSnapshots" ],
                members: {
                    graphSnapshots: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "arn" ],
                            members: {
                                id: {},
                                name: {},
                                arn: {},
                                sourceGraphId: {},
                                snapshotCreateTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                kmsKeyIdentifier: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        ListGraphs: {
            http: {
                method: "GET",
                requestUri: "/graphs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "graphs" ],
                members: {
                    graphs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "arn" ],
                            members: {
                                id: {},
                                name: {},
                                arn: {},
                                status: {},
                                provisionedMemory: {
                                    type: "integer"
                                },
                                publicConnectivity: {
                                    type: "boolean"
                                },
                                endpoint: {},
                                replicaCount: {
                                    type: "integer"
                                },
                                kmsKeyIdentifier: {},
                                deletionProtection: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        ListImportTasks: {
            http: {
                method: "GET",
                requestUri: "/importtasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tasks" ],
                members: {
                    tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "taskId", "source", "roleArn", "status" ],
                            members: {
                                graphId: {},
                                taskId: {},
                                source: {},
                                format: {},
                                roleArn: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        ListPrivateGraphEndpoints: {
            http: {
                method: "GET",
                requestUri: "/graphs/{graphIdentifier}/endpoints/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "privateGraphEndpoints" ],
                members: {
                    privateGraphEndpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "vpcId", "subnetIds", "status" ],
                            members: {
                                vpcId: {},
                                subnetIds: {
                                    shape: "S11"
                                },
                                status: {},
                                vpcEndpointId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        ResetGraph: {
            http: {
                method: "PUT",
                requestUri: "/graphs/{graphIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier", "skipSnapshot" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    },
                    skipSnapshot: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    status: {},
                    statusReason: {},
                    createTime: {
                        type: "timestamp"
                    },
                    provisionedMemory: {
                        type: "integer"
                    },
                    endpoint: {},
                    publicConnectivity: {
                        type: "boolean"
                    },
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    kmsKeyIdentifier: {},
                    sourceSnapshotId: {},
                    deletionProtection: {
                        type: "boolean"
                    },
                    buildNumber: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        RestoreGraphFromSnapshot: {
            http: {
                requestUri: "/snapshots/{snapshotIdentifier}/restore",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "snapshotIdentifier", "graphName" ],
                members: {
                    snapshotIdentifier: {
                        location: "uri",
                        locationName: "snapshotIdentifier"
                    },
                    graphName: {},
                    provisionedMemory: {
                        type: "integer"
                    },
                    deletionProtection: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "Sb"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    publicConnectivity: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    status: {},
                    statusReason: {},
                    createTime: {
                        type: "timestamp"
                    },
                    provisionedMemory: {
                        type: "integer"
                    },
                    endpoint: {},
                    publicConnectivity: {
                        type: "boolean"
                    },
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    kmsKeyIdentifier: {},
                    sourceSnapshotId: {},
                    deletionProtection: {
                        type: "boolean"
                    },
                    buildNumber: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true,
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true,
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        },
        UpdateGraph: {
            http: {
                method: "PATCH",
                requestUri: "/graphs/{graphIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "graphIdentifier" ],
                members: {
                    graphIdentifier: {
                        location: "uri",
                        locationName: "graphIdentifier"
                    },
                    publicConnectivity: {
                        type: "boolean"
                    },
                    provisionedMemory: {
                        type: "integer"
                    },
                    deletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "name", "arn" ],
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    status: {},
                    statusReason: {},
                    createTime: {
                        type: "timestamp"
                    },
                    provisionedMemory: {
                        type: "integer"
                    },
                    endpoint: {},
                    publicConnectivity: {
                        type: "boolean"
                    },
                    vectorSearchConfiguration: {
                        shape: "Sg"
                    },
                    replicaCount: {
                        type: "integer"
                    },
                    kmsKeyIdentifier: {},
                    sourceSnapshotId: {},
                    deletionProtection: {
                        type: "boolean"
                    },
                    buildNumber: {}
                }
            },
            staticContextParams: {
                ApiType: {
                    value: "ControlPlane"
                }
            }
        }
    },
    shapes: {
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sg: {
            type: "structure",
            required: [ "dimension" ],
            members: {
                dimension: {
                    type: "integer"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                neptune: {
                    type: "structure",
                    required: [ "s3ExportPath", "s3ExportKmsKeyId" ],
                    members: {
                        s3ExportPath: {},
                        s3ExportKmsKeyId: {},
                        preserveDefaultVertexLabels: {
                            type: "boolean"
                        },
                        preserveEdgeIds: {
                            type: "boolean"
                        }
                    }
                }
            },
            union: true
        },
        S11: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListGraphSnapshots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "graphSnapshots"
        },
        ListGraphs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "graphs"
        },
        ListImportTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tasks"
        },
        ListPrivateGraphEndpoints: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "privateGraphEndpoints"
        }
    }
};