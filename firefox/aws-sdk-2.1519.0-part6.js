AWS.apiLoader.services["amplifybackend"] = {};

AWS.AmplifyBackend = AWS.Service.defineService("amplifybackend", [ "2020-08-11" ]);

AWS.apiLoader.services["amplifybackend"]["2020-08-11"] = {
    metadata: {
        apiVersion: "2020-08-11",
        endpointPrefix: "amplifybackend",
        signingName: "amplifybackend",
        serviceFullName: "AmplifyBackend",
        serviceId: "AmplifyBackend",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "amplifybackend-2020-08-11",
        signatureVersion: "v4"
    },
    operations: {
        CloneBackend: {
            http: {
                requestUri: "/backend/{appId}/environments/{backendEnvironmentName}/clone",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    TargetEnvironmentName: {
                        locationName: "targetEnvironmentName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "TargetEnvironmentName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackend: {
            http: {
                requestUri: "/backend",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    AppName: {
                        locationName: "appName"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        locationName: "resourceConfig",
                        type: "structure",
                        members: {}
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "AppName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "ResourceName", "BackendEnvironmentName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "Si",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "ResourceName", "BackendEnvironmentName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackendConfig: {
            http: {
                requestUri: "/backend/{appId}/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendManagerAppId: {
                        locationName: "backendManagerAppId"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackendStorage: {
            http: {
                requestUri: "/backend/{appId}/storage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        locationName: "resourceConfig",
                        type: "structure",
                        members: {
                            BucketName: {
                                locationName: "bucketName"
                            },
                            Permissions: {
                                shape: "S1h",
                                locationName: "permissions"
                            },
                            ServiceName: {
                                locationName: "serviceName"
                            }
                        },
                        required: [ "ServiceName", "Permissions" ]
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "ResourceName", "BackendEnvironmentName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateToken: {
            http: {
                requestUri: "/backend/{appId}/challenge",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    ChallengeCode: {
                        locationName: "challengeCode"
                    },
                    SessionId: {
                        locationName: "sessionId"
                    },
                    Ttl: {
                        locationName: "ttl"
                    }
                }
            }
        },
        DeleteBackend: {
            http: {
                requestUri: "/backend/{appId}/environments/{backendEnvironmentName}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteBackendStorage: {
            http: {
                requestUri: "/backend/{appId}/storage/{backendEnvironmentName}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    },
                    ServiceName: {
                        locationName: "serviceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ServiceName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteToken: {
            http: {
                requestUri: "/backend/{appId}/challenge/{sessionId}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    SessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                },
                required: [ "SessionId", "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    IsSuccess: {
                        locationName: "isSuccess",
                        type: "boolean"
                    }
                }
            }
        },
        GenerateBackendAPIModels: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/generateModels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        GetBackend: {
            http: {
                requestUri: "/backend/{appId}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AmplifyFeatureFlags: {
                        locationName: "amplifyFeatureFlags"
                    },
                    AmplifyMetaConfig: {
                        locationName: "amplifyMetaConfig"
                    },
                    AppId: {
                        locationName: "appId"
                    },
                    AppName: {
                        locationName: "appName"
                    },
                    BackendEnvironmentList: {
                        shape: "S11",
                        locationName: "backendEnvironmentList"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    }
                }
            }
        },
        GetBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                }
            }
        },
        GetBackendAPIModels: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/getModels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    Models: {
                        locationName: "models"
                    },
                    Status: {
                        locationName: "status"
                    },
                    ModelIntrospectionSchema: {
                        locationName: "modelIntrospectionSchema"
                    }
                }
            }
        },
        GetBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    ResourceConfig: {
                        shape: "Si",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                }
            }
        },
        GetBackendJob: {
            http: {
                method: "GET",
                requestUri: "/backend/{appId}/job/{backendEnvironmentName}/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "JobId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    CreateTime: {
                        locationName: "createTime"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    },
                    UpdateTime: {
                        locationName: "updateTime"
                    }
                }
            }
        },
        GetBackendStorage: {
            http: {
                requestUri: "/backend/{appId}/storage/{backendEnvironmentName}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        locationName: "resourceConfig",
                        type: "structure",
                        members: {
                            BucketName: {
                                locationName: "bucketName"
                            },
                            Imported: {
                                locationName: "imported",
                                type: "boolean"
                            },
                            Permissions: {
                                shape: "S1h",
                                locationName: "permissions"
                            },
                            ServiceName: {
                                locationName: "serviceName"
                            }
                        },
                        required: [ "ServiceName", "Imported" ]
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                }
            }
        },
        GetToken: {
            http: {
                method: "GET",
                requestUri: "/backend/{appId}/challenge/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    SessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                },
                required: [ "SessionId", "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    ChallengeCode: {
                        locationName: "challengeCode"
                    },
                    SessionId: {
                        locationName: "sessionId"
                    },
                    Ttl: {
                        locationName: "ttl"
                    }
                }
            }
        },
        ImportBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}/import",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    IdentityPoolId: {
                        locationName: "identityPoolId"
                    },
                    NativeClientId: {
                        locationName: "nativeClientId"
                    },
                    UserPoolId: {
                        locationName: "userPoolId"
                    },
                    WebClientId: {
                        locationName: "webClientId"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "UserPoolId", "NativeClientId", "WebClientId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        ImportBackendStorage: {
            http: {
                requestUri: "/backend/{appId}/storage/{backendEnvironmentName}/import",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    BucketName: {
                        locationName: "bucketName"
                    },
                    ServiceName: {
                        locationName: "serviceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ServiceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        ListBackendJobs: {
            http: {
                requestUri: "/backend/{appId}/job/{backendEnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName" ]
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        locationName: "jobs",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppId: {
                                    locationName: "appId"
                                },
                                BackendEnvironmentName: {
                                    locationName: "backendEnvironmentName"
                                },
                                CreateTime: {
                                    locationName: "createTime"
                                },
                                Error: {
                                    locationName: "error"
                                },
                                JobId: {
                                    locationName: "jobId"
                                },
                                Operation: {
                                    locationName: "operation"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                UpdateTime: {
                                    locationName: "updateTime"
                                }
                            },
                            required: [ "AppId", "BackendEnvironmentName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListS3Buckets: {
            http: {
                requestUri: "/s3Buckets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Buckets: {
                        locationName: "buckets",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreationDate: {
                                    locationName: "creationDate"
                                },
                                Name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        RemoveAllBackends: {
            http: {
                requestUri: "/backend/{appId}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    CleanAmplifyApp: {
                        locationName: "cleanAmplifyApp",
                        type: "boolean"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        RemoveBackendConfig: {
            http: {
                requestUri: "/backend/{appId}/config/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    Error: {
                        locationName: "error"
                    }
                }
            }
        },
        UpdateBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        UpdateBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        locationName: "resourceConfig",
                        type: "structure",
                        members: {
                            AuthResources: {
                                locationName: "authResources"
                            },
                            IdentityPoolConfigs: {
                                locationName: "identityPoolConfigs",
                                type: "structure",
                                members: {
                                    UnauthenticatedLogin: {
                                        locationName: "unauthenticatedLogin",
                                        type: "boolean"
                                    }
                                }
                            },
                            Service: {
                                locationName: "service"
                            },
                            UserPoolConfigs: {
                                locationName: "userPoolConfigs",
                                type: "structure",
                                members: {
                                    ForgotPassword: {
                                        locationName: "forgotPassword",
                                        type: "structure",
                                        members: {
                                            DeliveryMethod: {
                                                locationName: "deliveryMethod"
                                            },
                                            EmailSettings: {
                                                shape: "Sq",
                                                locationName: "emailSettings"
                                            },
                                            SmsSettings: {
                                                shape: "Sr",
                                                locationName: "smsSettings"
                                            }
                                        }
                                    },
                                    Mfa: {
                                        locationName: "mfa",
                                        type: "structure",
                                        members: {
                                            MFAMode: {},
                                            Settings: {
                                                shape: "Su",
                                                locationName: "settings"
                                            }
                                        }
                                    },
                                    OAuth: {
                                        locationName: "oAuth",
                                        type: "structure",
                                        members: {
                                            DomainPrefix: {
                                                locationName: "domainPrefix"
                                            },
                                            OAuthGrantType: {
                                                locationName: "oAuthGrantType"
                                            },
                                            OAuthScopes: {
                                                shape: "Sz",
                                                locationName: "oAuthScopes"
                                            },
                                            RedirectSignInURIs: {
                                                shape: "S11",
                                                locationName: "redirectSignInURIs"
                                            },
                                            RedirectSignOutURIs: {
                                                shape: "S11",
                                                locationName: "redirectSignOutURIs"
                                            },
                                            SocialProviderSettings: {
                                                shape: "S12",
                                                locationName: "socialProviderSettings"
                                            }
                                        }
                                    },
                                    PasswordPolicy: {
                                        locationName: "passwordPolicy",
                                        type: "structure",
                                        members: {
                                            AdditionalConstraints: {
                                                shape: "S16",
                                                locationName: "additionalConstraints"
                                            },
                                            MinimumLength: {
                                                locationName: "minimumLength",
                                                type: "double"
                                            }
                                        }
                                    },
                                    VerificationMessage: {
                                        locationName: "verificationMessage",
                                        type: "structure",
                                        members: {
                                            DeliveryMethod: {
                                                locationName: "deliveryMethod"
                                            },
                                            EmailSettings: {
                                                shape: "Sq",
                                                locationName: "emailSettings"
                                            },
                                            SmsSettings: {
                                                shape: "Sr",
                                                locationName: "smsSettings"
                                            }
                                        },
                                        required: [ "DeliveryMethod" ]
                                    }
                                }
                            }
                        },
                        required: [ "AuthResources", "UserPoolConfigs", "Service" ]
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        UpdateBackendConfig: {
            http: {
                requestUri: "/backend/{appId}/config/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    LoginAuthConfig: {
                        shape: "S3c",
                        locationName: "loginAuthConfig"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendManagerAppId: {
                        locationName: "backendManagerAppId"
                    },
                    Error: {
                        locationName: "error"
                    },
                    LoginAuthConfig: {
                        shape: "S3c",
                        locationName: "loginAuthConfig"
                    }
                }
            }
        },
        UpdateBackendJob: {
            http: {
                requestUri: "/backend/{appId}/job/{backendEnvironmentName}/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "JobId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    CreateTime: {
                        locationName: "createTime"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    },
                    UpdateTime: {
                        locationName: "updateTime"
                    }
                }
            }
        },
        UpdateBackendStorage: {
            http: {
                requestUri: "/backend/{appId}/storage/{backendEnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        locationName: "resourceConfig",
                        type: "structure",
                        members: {
                            Permissions: {
                                shape: "S1h",
                                locationName: "permissions"
                            },
                            ServiceName: {
                                locationName: "serviceName"
                            }
                        },
                        required: [ "ServiceName", "Permissions" ]
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                AdditionalAuthTypes: {
                    locationName: "additionalAuthTypes",
                    type: "list",
                    member: {
                        shape: "Sa"
                    }
                },
                ApiName: {
                    locationName: "apiName"
                },
                ConflictResolution: {
                    locationName: "conflictResolution",
                    type: "structure",
                    members: {
                        ResolutionStrategy: {
                            locationName: "resolutionStrategy"
                        }
                    }
                },
                DefaultAuthType: {
                    shape: "Sa",
                    locationName: "defaultAuthType"
                },
                Service: {
                    locationName: "service"
                },
                TransformSchema: {
                    locationName: "transformSchema"
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                Mode: {
                    locationName: "mode"
                },
                Settings: {
                    locationName: "settings",
                    type: "structure",
                    members: {
                        CognitoUserPoolId: {
                            locationName: "cognitoUserPoolId"
                        },
                        Description: {
                            locationName: "description"
                        },
                        ExpirationTime: {
                            locationName: "expirationTime",
                            type: "double"
                        },
                        OpenIDAuthTTL: {
                            locationName: "openIDAuthTTL"
                        },
                        OpenIDClientId: {
                            locationName: "openIDClientId"
                        },
                        OpenIDIatTTL: {
                            locationName: "openIDIatTTL"
                        },
                        OpenIDIssueURL: {
                            locationName: "openIDIssueURL"
                        },
                        OpenIDProviderName: {
                            locationName: "openIDProviderName"
                        }
                    }
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                AuthResources: {
                    locationName: "authResources"
                },
                IdentityPoolConfigs: {
                    locationName: "identityPoolConfigs",
                    type: "structure",
                    members: {
                        IdentityPoolName: {
                            locationName: "identityPoolName"
                        },
                        UnauthenticatedLogin: {
                            locationName: "unauthenticatedLogin",
                            type: "boolean"
                        }
                    },
                    required: [ "UnauthenticatedLogin", "IdentityPoolName" ]
                },
                Service: {
                    locationName: "service"
                },
                UserPoolConfigs: {
                    locationName: "userPoolConfigs",
                    type: "structure",
                    members: {
                        ForgotPassword: {
                            locationName: "forgotPassword",
                            type: "structure",
                            members: {
                                DeliveryMethod: {
                                    locationName: "deliveryMethod"
                                },
                                EmailSettings: {
                                    shape: "Sq",
                                    locationName: "emailSettings"
                                },
                                SmsSettings: {
                                    shape: "Sr",
                                    locationName: "smsSettings"
                                }
                            },
                            required: [ "DeliveryMethod" ]
                        },
                        Mfa: {
                            locationName: "mfa",
                            type: "structure",
                            members: {
                                MFAMode: {},
                                Settings: {
                                    shape: "Su",
                                    locationName: "settings"
                                }
                            },
                            required: [ "MFAMode" ]
                        },
                        OAuth: {
                            locationName: "oAuth",
                            type: "structure",
                            members: {
                                DomainPrefix: {
                                    locationName: "domainPrefix"
                                },
                                OAuthGrantType: {
                                    locationName: "oAuthGrantType"
                                },
                                OAuthScopes: {
                                    shape: "Sz",
                                    locationName: "oAuthScopes"
                                },
                                RedirectSignInURIs: {
                                    shape: "S11",
                                    locationName: "redirectSignInURIs"
                                },
                                RedirectSignOutURIs: {
                                    shape: "S11",
                                    locationName: "redirectSignOutURIs"
                                },
                                SocialProviderSettings: {
                                    shape: "S12",
                                    locationName: "socialProviderSettings"
                                }
                            },
                            required: [ "RedirectSignOutURIs", "RedirectSignInURIs", "OAuthGrantType", "OAuthScopes" ]
                        },
                        PasswordPolicy: {
                            locationName: "passwordPolicy",
                            type: "structure",
                            members: {
                                AdditionalConstraints: {
                                    shape: "S16",
                                    locationName: "additionalConstraints"
                                },
                                MinimumLength: {
                                    locationName: "minimumLength",
                                    type: "double"
                                }
                            },
                            required: [ "MinimumLength" ]
                        },
                        RequiredSignUpAttributes: {
                            locationName: "requiredSignUpAttributes",
                            type: "list",
                            member: {}
                        },
                        SignInMethod: {
                            locationName: "signInMethod"
                        },
                        UserPoolName: {
                            locationName: "userPoolName"
                        },
                        VerificationMessage: {
                            locationName: "verificationMessage",
                            type: "structure",
                            members: {
                                DeliveryMethod: {
                                    locationName: "deliveryMethod"
                                },
                                EmailSettings: {
                                    shape: "Sq",
                                    locationName: "emailSettings"
                                },
                                SmsSettings: {
                                    shape: "Sr",
                                    locationName: "smsSettings"
                                }
                            },
                            required: [ "DeliveryMethod" ]
                        }
                    },
                    required: [ "RequiredSignUpAttributes", "SignInMethod", "UserPoolName" ]
                }
            },
            required: [ "AuthResources", "UserPoolConfigs", "Service" ]
        },
        Sq: {
            type: "structure",
            sensitive: true,
            members: {
                EmailMessage: {
                    locationName: "emailMessage"
                },
                EmailSubject: {
                    locationName: "emailSubject"
                }
            }
        },
        Sr: {
            type: "structure",
            sensitive: true,
            members: {
                SmsMessage: {
                    locationName: "smsMessage"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                MfaTypes: {
                    locationName: "mfaTypes",
                    type: "list",
                    member: {}
                },
                SmsMessage: {
                    locationName: "smsMessage"
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S11: {
            type: "list",
            member: {}
        },
        S12: {
            type: "structure",
            members: {
                Facebook: {
                    shape: "S13"
                },
                Google: {
                    shape: "S13"
                },
                LoginWithAmazon: {
                    shape: "S13"
                },
                SignInWithApple: {
                    type: "structure",
                    sensitive: true,
                    members: {
                        ClientId: {
                            locationName: "client_id"
                        },
                        KeyId: {
                            locationName: "key_id"
                        },
                        PrivateKey: {
                            locationName: "private_key"
                        },
                        TeamId: {
                            locationName: "team_id"
                        }
                    }
                }
            }
        },
        S13: {
            type: "structure",
            sensitive: true,
            members: {
                ClientId: {
                    locationName: "client_id"
                },
                ClientSecret: {
                    locationName: "client_secret"
                }
            }
        },
        S16: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "structure",
            members: {
                Authenticated: {
                    locationName: "authenticated",
                    type: "list",
                    member: {}
                },
                UnAuthenticated: {
                    locationName: "unAuthenticated",
                    type: "list",
                    member: {}
                }
            },
            required: [ "Authenticated" ]
        },
        S3c: {
            type: "structure",
            members: {
                AwsCognitoIdentityPoolId: {
                    locationName: "aws_cognito_identity_pool_id"
                },
                AwsCognitoRegion: {
                    locationName: "aws_cognito_region"
                },
                AwsUserPoolsId: {
                    locationName: "aws_user_pools_id"
                },
                AwsUserPoolsWebClientId: {
                    locationName: "aws_user_pools_web_client_id"
                }
            }
        }
    },
    paginators: {
        ListBackendJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Jobs"
        }
    }
};

AWS.apiLoader.services["appintegrations"] = {};

AWS.AppIntegrations = AWS.Service.defineService("appintegrations", [ "2020-07-29" ]);

AWS.apiLoader.services["appintegrations"]["2020-07-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-29",
        endpointPrefix: "app-integrations",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon AppIntegrations Service",
        serviceId: "AppIntegrations",
        signatureVersion: "v4",
        signingName: "app-integrations",
        uid: "appintegrations-2020-07-29"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/applications"
            },
            input: {
                type: "structure",
                required: [ "Name", "Namespace", "ApplicationSourceConfig" ],
                members: {
                    Name: {},
                    Namespace: {},
                    Description: {},
                    ApplicationSourceConfig: {
                        shape: "S5"
                    },
                    Subscriptions: {
                        shape: "Sa"
                    },
                    Publications: {
                        shape: "Sd"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateDataIntegration: {
            http: {
                requestUri: "/dataIntegrations"
            },
            input: {
                type: "structure",
                required: [ "Name", "KmsKey", "SourceURI" ],
                members: {
                    Name: {},
                    Description: {},
                    KmsKey: {},
                    SourceURI: {},
                    ScheduleConfig: {
                        shape: "Sr"
                    },
                    Tags: {
                        shape: "Sh"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    FileConfiguration: {
                        shape: "St"
                    },
                    ObjectConfiguration: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    KmsKey: {},
                    SourceURI: {},
                    ScheduleConfiguration: {
                        shape: "Sr"
                    },
                    Tags: {
                        shape: "Sh"
                    },
                    ClientToken: {},
                    FileConfiguration: {
                        shape: "St"
                    },
                    ObjectConfiguration: {
                        shape: "Sz"
                    }
                }
            }
        },
        CreateEventIntegration: {
            http: {
                requestUri: "/eventIntegrations"
            },
            input: {
                type: "structure",
                required: [ "Name", "EventFilter", "EventBridgeBus" ],
                members: {
                    Name: {},
                    Description: {},
                    EventFilter: {
                        shape: "S12"
                    },
                    EventBridgeBus: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventIntegrationArn: {}
                }
            }
        },
        DeleteDataIntegration: {
            http: {
                method: "DELETE",
                requestUri: "/dataIntegrations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "DataIntegrationIdentifier" ],
                members: {
                    DataIntegrationIdentifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventIntegration: {
            http: {
                method: "DELETE",
                requestUri: "/eventIntegrations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{Arn}"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Namespace: {},
                    Description: {},
                    ApplicationSourceConfig: {
                        shape: "S5"
                    },
                    Subscriptions: {
                        shape: "Sa"
                    },
                    Publications: {
                        shape: "Sd"
                    },
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        GetDataIntegration: {
            http: {
                method: "GET",
                requestUri: "/dataIntegrations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    KmsKey: {},
                    SourceURI: {},
                    ScheduleConfiguration: {
                        shape: "Sr"
                    },
                    Tags: {
                        shape: "Sh"
                    },
                    FileConfiguration: {
                        shape: "St"
                    },
                    ObjectConfiguration: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetEventIntegration: {
            http: {
                method: "GET",
                requestUri: "/eventIntegrations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    EventIntegrationArn: {},
                    EventBridgeBus: {},
                    EventFilter: {
                        shape: "S12"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Name: {},
                                Namespace: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataIntegrationAssociations: {
            http: {
                method: "GET",
                requestUri: "/dataIntegrations/{Identifier}/associations"
            },
            input: {
                type: "structure",
                required: [ "DataIntegrationIdentifier" ],
                members: {
                    DataIntegrationIdentifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataIntegrationAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DataIntegrationAssociationArn: {},
                                DataIntegrationArn: {},
                                ClientId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataIntegrations: {
            http: {
                method: "GET",
                requestUri: "/dataIntegrations"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataIntegrations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                SourceURI: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventIntegrationAssociations: {
            http: {
                method: "GET",
                requestUri: "/eventIntegrations/{Name}/associations"
            },
            input: {
                type: "structure",
                required: [ "EventIntegrationName" ],
                members: {
                    EventIntegrationName: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventIntegrationAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventIntegrationAssociationArn: {},
                                EventIntegrationAssociationId: {},
                                EventIntegrationName: {},
                                ClientId: {},
                                EventBridgeRuleName: {},
                                ClientAssociationMetadata: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventIntegrations: {
            http: {
                method: "GET",
                requestUri: "/eventIntegrations"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventIntegrations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventIntegrationArn: {},
                                Name: {},
                                Description: {},
                                EventFilter: {
                                    shape: "S12"
                                },
                                EventBridgeBus: {},
                                Tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{Arn}"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    },
                    Name: {},
                    Description: {},
                    ApplicationSourceConfig: {
                        shape: "S5"
                    },
                    Subscriptions: {
                        shape: "Sa"
                    },
                    Publications: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataIntegration: {
            http: {
                method: "PATCH",
                requestUri: "/dataIntegrations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEventIntegration: {
            http: {
                method: "PATCH",
                requestUri: "/eventIntegrations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                ExternalUrlConfig: {
                    type: "structure",
                    required: [ "AccessUrl" ],
                    members: {
                        AccessUrl: {},
                        ApprovedOrigins: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Event" ],
                members: {
                    Event: {},
                    Description: {}
                }
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Event", "Schema" ],
                members: {
                    Event: {},
                    Schema: {},
                    Description: {}
                }
            }
        },
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        Sr: {
            type: "structure",
            required: [ "ScheduleExpression" ],
            members: {
                FirstExecutionFrom: {},
                Object: {},
                ScheduleExpression: {}
            }
        },
        St: {
            type: "structure",
            required: [ "Folders" ],
            members: {
                Folders: {
                    type: "list",
                    member: {}
                },
                Filters: {
                    shape: "Sw"
                }
            }
        },
        Sw: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        Sz: {
            type: "map",
            key: {},
            value: {
                shape: "Sw"
            }
        },
        S12: {
            type: "structure",
            required: [ "Source" ],
            members: {
                Source: {}
            }
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Applications"
        },
        ListDataIntegrationAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DataIntegrationAssociations"
        },
        ListDataIntegrations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DataIntegrations"
        },
        ListEventIntegrationAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EventIntegrationAssociations"
        },
        ListEventIntegrations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EventIntegrations"
        }
    }
};

AWS.apiLoader.services["connectcontactlens"] = {};

AWS.ConnectContactLens = AWS.Service.defineService("connectcontactlens", [ "2020-08-21" ]);

AWS.apiLoader.services["connectcontactlens"]["2020-08-21"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-21",
        endpointPrefix: "contact-lens",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Connect Contact Lens",
        serviceFullName: "Amazon Connect Contact Lens",
        serviceId: "Connect Contact Lens",
        signatureVersion: "v4",
        signingName: "connect",
        uid: "connect-contact-lens-2020-08-21"
    },
    operations: {
        ListRealtimeContactAnalysisSegments: {
            http: {
                requestUri: "/realtime-contact-analysis/analysis-segments"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Segments" ],
                members: {
                    Segments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Transcript: {
                                    type: "structure",
                                    required: [ "Id", "ParticipantId", "ParticipantRole", "Content", "BeginOffsetMillis", "EndOffsetMillis", "Sentiment" ],
                                    members: {
                                        Id: {},
                                        ParticipantId: {},
                                        ParticipantRole: {},
                                        Content: {},
                                        BeginOffsetMillis: {
                                            type: "integer"
                                        },
                                        EndOffsetMillis: {
                                            type: "integer"
                                        },
                                        Sentiment: {},
                                        IssuesDetected: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "CharacterOffsets" ],
                                                members: {
                                                    CharacterOffsets: {
                                                        type: "structure",
                                                        required: [ "BeginOffsetChar", "EndOffsetChar" ],
                                                        members: {
                                                            BeginOffsetChar: {
                                                                type: "integer"
                                                            },
                                                            EndOffsetChar: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Categories: {
                                    type: "structure",
                                    required: [ "MatchedCategories", "MatchedDetails" ],
                                    members: {
                                        MatchedCategories: {
                                            type: "list",
                                            member: {}
                                        },
                                        MatchedDetails: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "structure",
                                                required: [ "PointsOfInterest" ],
                                                members: {
                                                    PointsOfInterest: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "BeginOffsetMillis", "EndOffsetMillis" ],
                                                            members: {
                                                                BeginOffsetMillis: {
                                                                    type: "integer"
                                                                },
                                                                EndOffsetMillis: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        ListRealtimeContactAnalysisSegments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["devopsguru"] = {};

AWS.DevOpsGuru = AWS.Service.defineService("devopsguru", [ "2020-12-01" ]);

AWS.apiLoader.services["devopsguru"]["2020-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-12-01",
        endpointPrefix: "devops-guru",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon DevOps Guru",
        serviceId: "DevOps Guru",
        signatureVersion: "v4",
        signingName: "devops-guru",
        uid: "devops-guru-2020-12-01"
    },
    operations: {
        AddNotificationChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Config" ],
                members: {
                    Config: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        DeleteInsight: {
            http: {
                method: "DELETE",
                requestUri: "/insights/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAccountHealth: {
            http: {
                method: "GET",
                requestUri: "/accounts/health",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "OpenReactiveInsights", "OpenProactiveInsights", "MetricsAnalyzed", "ResourceHours" ],
                members: {
                    OpenReactiveInsights: {
                        type: "integer"
                    },
                    OpenProactiveInsights: {
                        type: "integer"
                    },
                    MetricsAnalyzed: {
                        type: "integer"
                    },
                    ResourceHours: {
                        type: "long"
                    },
                    AnalyzedResourceCount: {
                        type: "long"
                    }
                }
            }
        },
        DescribeAccountOverview: {
            http: {
                requestUri: "/accounts/overview",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FromTime" ],
                members: {
                    FromTime: {
                        type: "timestamp"
                    },
                    ToTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReactiveInsights", "ProactiveInsights", "MeanTimeToRecoverInMilliseconds" ],
                members: {
                    ReactiveInsights: {
                        type: "integer"
                    },
                    ProactiveInsights: {
                        type: "integer"
                    },
                    MeanTimeToRecoverInMilliseconds: {
                        type: "long"
                    }
                }
            }
        },
        DescribeAnomaly: {
            http: {
                method: "GET",
                requestUri: "/anomalies/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    AccountId: {
                        location: "querystring",
                        locationName: "AccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveAnomaly: {
                        type: "structure",
                        members: {
                            Id: {},
                            Severity: {},
                            Status: {},
                            UpdateTime: {
                                type: "timestamp"
                            },
                            AnomalyTimeRange: {
                                shape: "Sz"
                            },
                            AnomalyReportedTimeRange: {
                                shape: "S10"
                            },
                            PredictionTimeRange: {
                                shape: "S11"
                            },
                            SourceDetails: {
                                shape: "S12"
                            },
                            AssociatedInsightId: {},
                            ResourceCollection: {
                                shape: "S27"
                            },
                            Limit: {
                                type: "double"
                            },
                            SourceMetadata: {
                                shape: "S2h"
                            },
                            AnomalyResources: {
                                shape: "S2l"
                            },
                            Description: {}
                        }
                    },
                    ReactiveAnomaly: {
                        type: "structure",
                        members: {
                            Id: {},
                            Severity: {},
                            Status: {},
                            AnomalyTimeRange: {
                                shape: "Sz"
                            },
                            AnomalyReportedTimeRange: {
                                shape: "S10"
                            },
                            SourceDetails: {
                                shape: "S12"
                            },
                            AssociatedInsightId: {},
                            ResourceCollection: {
                                shape: "S27"
                            },
                            Type: {},
                            Name: {},
                            Description: {},
                            CausalAnomalyId: {},
                            AnomalyResources: {
                                shape: "S2l"
                            }
                        }
                    }
                }
            }
        },
        DescribeEventSourcesConfig: {
            http: {
                requestUri: "/event-sources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    EventSources: {
                        shape: "S2t"
                    }
                }
            }
        },
        DescribeFeedback: {
            http: {
                requestUri: "/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InsightId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightFeedback: {
                        shape: "S2y"
                    }
                }
            }
        },
        DescribeInsight: {
            http: {
                method: "GET",
                requestUri: "/insights/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    AccountId: {
                        location: "querystring",
                        locationName: "AccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsight: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Severity: {},
                            Status: {},
                            InsightTimeRange: {
                                shape: "S35"
                            },
                            PredictionTimeRange: {
                                shape: "S11"
                            },
                            ResourceCollection: {
                                shape: "S27"
                            },
                            SsmOpsItemId: {},
                            Description: {}
                        }
                    },
                    ReactiveInsight: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Severity: {},
                            Status: {},
                            InsightTimeRange: {
                                shape: "S35"
                            },
                            ResourceCollection: {
                                shape: "S27"
                            },
                            SsmOpsItemId: {},
                            Description: {}
                        }
                    }
                }
            }
        },
        DescribeOrganizationHealth: {
            http: {
                requestUri: "/organization/health",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccountIds: {
                        shape: "S3a"
                    },
                    OrganizationalUnitIds: {
                        shape: "S3b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "OpenReactiveInsights", "OpenProactiveInsights", "MetricsAnalyzed", "ResourceHours" ],
                members: {
                    OpenReactiveInsights: {
                        type: "integer"
                    },
                    OpenProactiveInsights: {
                        type: "integer"
                    },
                    MetricsAnalyzed: {
                        type: "integer"
                    },
                    ResourceHours: {
                        type: "long"
                    }
                }
            }
        },
        DescribeOrganizationOverview: {
            http: {
                requestUri: "/organization/overview",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FromTime" ],
                members: {
                    FromTime: {
                        type: "timestamp"
                    },
                    ToTime: {
                        type: "timestamp"
                    },
                    AccountIds: {
                        shape: "S3a"
                    },
                    OrganizationalUnitIds: {
                        shape: "S3b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReactiveInsights", "ProactiveInsights" ],
                members: {
                    ReactiveInsights: {
                        type: "integer"
                    },
                    ProactiveInsights: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeOrganizationResourceCollectionHealth: {
            http: {
                requestUri: "/organization/health/resource-collection",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OrganizationResourceCollectionType" ],
                members: {
                    OrganizationResourceCollectionType: {},
                    AccountIds: {
                        shape: "S3a"
                    },
                    OrganizationalUnitIds: {
                        shape: "S3b"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CloudFormation: {
                        shape: "S3l"
                    },
                    Service: {
                        shape: "S3o"
                    },
                    Account: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                Insight: {
                                    type: "structure",
                                    members: {
                                        OpenProactiveInsights: {
                                            type: "integer"
                                        },
                                        OpenReactiveInsights: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Tags: {
                        shape: "S3v"
                    }
                }
            }
        },
        DescribeResourceCollectionHealth: {
            http: {
                method: "GET",
                requestUri: "/accounts/health/resource-collection/{ResourceCollectionType}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceCollectionType" ],
                members: {
                    ResourceCollectionType: {
                        location: "uri",
                        locationName: "ResourceCollectionType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CloudFormation: {
                        shape: "S3l"
                    },
                    Service: {
                        shape: "S3o"
                    },
                    NextToken: {},
                    Tags: {
                        shape: "S3v"
                    }
                }
            }
        },
        DescribeServiceIntegration: {
            http: {
                method: "GET",
                requestUri: "/service-integrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ServiceIntegration: {
                        type: "structure",
                        members: {
                            OpsCenter: {
                                type: "structure",
                                members: {
                                    OptInStatus: {}
                                }
                            },
                            LogsAnomalyDetection: {
                                type: "structure",
                                members: {
                                    OptInStatus: {}
                                }
                            },
                            KMSServerSideEncryption: {
                                type: "structure",
                                members: {
                                    KMSKeyId: {},
                                    OptInStatus: {},
                                    Type: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetCostEstimation: {
            http: {
                method: "GET",
                requestUri: "/cost-estimation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceCollection: {
                        shape: "S4b"
                    },
                    Status: {},
                    Costs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                State: {},
                                Count: {
                                    type: "integer"
                                },
                                UnitCost: {
                                    type: "double"
                                },
                                Cost: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    TimeRange: {
                        type: "structure",
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    TotalCost: {
                        type: "double"
                    },
                    NextToken: {}
                }
            }
        },
        GetResourceCollection: {
            http: {
                method: "GET",
                requestUri: "/resource-collections/{ResourceCollectionType}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceCollectionType" ],
                members: {
                    ResourceCollectionType: {
                        location: "uri",
                        locationName: "ResourceCollectionType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceCollection: {
                        type: "structure",
                        members: {
                            CloudFormation: {
                                type: "structure",
                                members: {
                                    StackNames: {
                                        shape: "S29"
                                    }
                                }
                            },
                            Tags: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "AppBoundaryKey", "TagValues" ],
                                    members: {
                                        AppBoundaryKey: {},
                                        TagValues: {
                                            shape: "S2e"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomaliesForInsight: {
            http: {
                requestUri: "/anomalies/insight/{InsightId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {
                        location: "uri",
                        locationName: "InsightId"
                    },
                    StartTimeRange: {
                        shape: "S4v"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {},
                    Filters: {
                        type: "structure",
                        members: {
                            ServiceCollection: {
                                shape: "S4y"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveAnomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Severity: {},
                                Status: {},
                                UpdateTime: {
                                    type: "timestamp"
                                },
                                AnomalyTimeRange: {
                                    shape: "Sz"
                                },
                                AnomalyReportedTimeRange: {
                                    shape: "S10"
                                },
                                PredictionTimeRange: {
                                    shape: "S11"
                                },
                                SourceDetails: {
                                    shape: "S12"
                                },
                                AssociatedInsightId: {},
                                ResourceCollection: {
                                    shape: "S27"
                                },
                                Limit: {
                                    type: "double"
                                },
                                SourceMetadata: {
                                    shape: "S2h"
                                },
                                AnomalyResources: {
                                    shape: "S2l"
                                },
                                Description: {}
                            }
                        }
                    },
                    ReactiveAnomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Severity: {},
                                Status: {},
                                AnomalyTimeRange: {
                                    shape: "Sz"
                                },
                                AnomalyReportedTimeRange: {
                                    shape: "S10"
                                },
                                SourceDetails: {
                                    shape: "S12"
                                },
                                AssociatedInsightId: {},
                                ResourceCollection: {
                                    shape: "S27"
                                },
                                Type: {},
                                Name: {},
                                Description: {},
                                CausalAnomalyId: {},
                                AnomalyResources: {
                                    shape: "S2l"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalousLogGroups: {
            http: {
                requestUri: "/list-log-anomalies",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InsightId", "AnomalousLogGroups" ],
                members: {
                    InsightId: {},
                    AnomalousLogGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LogGroupName: {},
                                ImpactStartTime: {
                                    type: "timestamp"
                                },
                                ImpactEndTime: {
                                    type: "timestamp"
                                },
                                NumberOfLogLinesScanned: {
                                    type: "integer"
                                },
                                LogAnomalyShowcases: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LogAnomalyClasses: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        LogStreamName: {},
                                                        LogAnomalyType: {},
                                                        LogAnomalyToken: {},
                                                        LogEventId: {},
                                                        Explanation: {},
                                                        NumberOfLogLinesOccurrences: {
                                                            type: "integer"
                                                        },
                                                        LogEventTimestamp: {
                                                            type: "timestamp"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEvents: {
            http: {
                requestUri: "/events",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Filters" ],
                members: {
                    Filters: {
                        type: "structure",
                        members: {
                            InsightId: {},
                            EventTimeRange: {
                                type: "structure",
                                required: [ "FromTime", "ToTime" ],
                                members: {
                                    FromTime: {
                                        type: "timestamp"
                                    },
                                    ToTime: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            EventClass: {},
                            EventSource: {},
                            DataSource: {},
                            ResourceCollection: {
                                shape: "S27"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Events" ],
                members: {
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceCollection: {
                                    shape: "S27"
                                },
                                Id: {},
                                Time: {
                                    type: "timestamp"
                                },
                                EventSource: {},
                                Name: {},
                                DataSource: {},
                                EventClass: {},
                                Resources: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            Name: {},
                                            Arn: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInsights: {
            http: {
                requestUri: "/insights",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "StatusFilter" ],
                members: {
                    StatusFilter: {
                        shape: "S64"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsights: {
                        shape: "S6c"
                    },
                    ReactiveInsights: {
                        shape: "S6g"
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitoredResources: {
            http: {
                requestUri: "/monitoredResources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "structure",
                        required: [ "ResourcePermission", "ResourceTypeFilters" ],
                        members: {
                            ResourcePermission: {},
                            ResourceTypeFilters: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoredResourceIdentifiers" ],
                members: {
                    MonitoredResourceIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MonitoredResourceName: {},
                                Type: {},
                                ResourcePermission: {},
                                LastUpdated: {
                                    type: "timestamp"
                                },
                                ResourceCollection: {
                                    shape: "S27"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNotificationChannels: {
            http: {
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Config: {
                                    shape: "S2"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOrganizationInsights: {
            http: {
                requestUri: "/organization/insights",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "StatusFilter" ],
                members: {
                    StatusFilter: {
                        shape: "S64"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    AccountIds: {
                        type: "list",
                        member: {}
                    },
                    OrganizationalUnitIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsights: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                AccountId: {},
                                OrganizationalUnitId: {},
                                Name: {},
                                Severity: {},
                                Status: {},
                                InsightTimeRange: {
                                    shape: "S35"
                                },
                                PredictionTimeRange: {
                                    shape: "S11"
                                },
                                ResourceCollection: {
                                    shape: "S27"
                                },
                                ServiceCollection: {
                                    shape: "S4y"
                                }
                            }
                        }
                    },
                    ReactiveInsights: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                AccountId: {},
                                OrganizationalUnitId: {},
                                Name: {},
                                Severity: {},
                                Status: {},
                                InsightTimeRange: {
                                    shape: "S35"
                                },
                                ResourceCollection: {
                                    shape: "S27"
                                },
                                ServiceCollection: {
                                    shape: "S4y"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecommendations: {
            http: {
                requestUri: "/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {},
                    NextToken: {},
                    Locale: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                Link: {},
                                Name: {},
                                Reason: {},
                                RelatedEvents: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Resources: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Type: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                RelatedAnomalies: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Resources: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            SourceDetails: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CloudWatchMetrics: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    MetricName: {},
                                                                    Namespace: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            AnomalyId: {}
                                        }
                                    }
                                },
                                Category: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutFeedback: {
            http: {
                method: "PUT",
                requestUri: "/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InsightFeedback: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveNotificationChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchInsights: {
            http: {
                requestUri: "/insights/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "StartTimeRange", "Type" ],
                members: {
                    StartTimeRange: {
                        shape: "S4v"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            Severities: {
                                shape: "S6"
                            },
                            Statuses: {
                                shape: "S83"
                            },
                            ResourceCollection: {
                                shape: "S27"
                            },
                            ServiceCollection: {
                                shape: "S4y"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsights: {
                        shape: "S6c"
                    },
                    ReactiveInsights: {
                        shape: "S6g"
                    },
                    NextToken: {}
                }
            }
        },
        SearchOrganizationInsights: {
            http: {
                requestUri: "/organization/insights/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountIds", "StartTimeRange", "Type" ],
                members: {
                    AccountIds: {
                        type: "list",
                        member: {}
                    },
                    StartTimeRange: {
                        shape: "S4v"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            Severities: {
                                shape: "S6"
                            },
                            Statuses: {
                                shape: "S83"
                            },
                            ResourceCollection: {
                                shape: "S27"
                            },
                            ServiceCollection: {
                                shape: "S4y"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsights: {
                        shape: "S6c"
                    },
                    ReactiveInsights: {
                        shape: "S6g"
                    },
                    NextToken: {}
                }
            }
        },
        StartCostEstimation: {
            http: {
                method: "PUT",
                requestUri: "/cost-estimation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceCollection" ],
                members: {
                    ResourceCollection: {
                        shape: "S4b"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEventSourcesConfig: {
            http: {
                method: "PUT",
                requestUri: "/event-sources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    EventSources: {
                        shape: "S2t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceCollection: {
            http: {
                method: "PUT",
                requestUri: "/resource-collections",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Action", "ResourceCollection" ],
                members: {
                    Action: {},
                    ResourceCollection: {
                        type: "structure",
                        members: {
                            CloudFormation: {
                                type: "structure",
                                members: {
                                    StackNames: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            Tags: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "AppBoundaryKey", "TagValues" ],
                                    members: {
                                        AppBoundaryKey: {},
                                        TagValues: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServiceIntegration: {
            http: {
                method: "PUT",
                requestUri: "/service-integrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ServiceIntegration" ],
                members: {
                    ServiceIntegration: {
                        type: "structure",
                        members: {
                            OpsCenter: {
                                type: "structure",
                                members: {
                                    OptInStatus: {}
                                }
                            },
                            LogsAnomalyDetection: {
                                type: "structure",
                                members: {
                                    OptInStatus: {}
                                }
                            },
                            KMSServerSideEncryption: {
                                type: "structure",
                                members: {
                                    KMSKeyId: {},
                                    OptInStatus: {},
                                    Type: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "Sns" ],
            members: {
                Sns: {
                    type: "structure",
                    members: {
                        TopicArn: {}
                    }
                },
                Filters: {
                    type: "structure",
                    members: {
                        Severities: {
                            shape: "S6"
                        },
                        MessageTypes: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S6: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "structure",
            required: [ "StartTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S10: {
            type: "structure",
            required: [ "OpenTime" ],
            members: {
                OpenTime: {
                    type: "timestamp"
                },
                CloseTime: {
                    type: "timestamp"
                }
            }
        },
        S11: {
            type: "structure",
            required: [ "StartTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                CloudWatchMetrics: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            MetricName: {},
                            Namespace: {},
                            Dimensions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                }
                            },
                            Stat: {},
                            Unit: {},
                            Period: {
                                type: "integer"
                            },
                            MetricDataSummary: {
                                type: "structure",
                                members: {
                                    TimestampMetricValuePairList: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Timestamp: {
                                                    type: "timestamp"
                                                },
                                                MetricValue: {
                                                    type: "double"
                                                }
                                            }
                                        }
                                    },
                                    StatusCode: {}
                                }
                            }
                        }
                    }
                },
                PerformanceInsightsMetrics: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            MetricDisplayName: {},
                            Unit: {},
                            MetricQuery: {
                                shape: "S1n"
                            },
                            ReferenceData: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        ComparisonValues: {
                                            type: "structure",
                                            members: {
                                                ReferenceScalar: {
                                                    type: "structure",
                                                    members: {
                                                        Value: {
                                                            type: "double"
                                                        }
                                                    }
                                                },
                                                ReferenceMetric: {
                                                    type: "structure",
                                                    members: {
                                                        MetricQuery: {
                                                            shape: "S1n"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            StatsAtAnomaly: {
                                shape: "S24"
                            },
                            StatsAtBaseline: {
                                shape: "S24"
                            }
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                Metric: {},
                GroupBy: {
                    type: "structure",
                    members: {
                        Group: {},
                        Dimensions: {
                            type: "list",
                            member: {}
                        },
                        Limit: {
                            type: "integer"
                        }
                    }
                },
                Filter: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Value: {
                        type: "double"
                    }
                }
            }
        },
        S27: {
            type: "structure",
            members: {
                CloudFormation: {
                    type: "structure",
                    members: {
                        StackNames: {
                            shape: "S29"
                        }
                    }
                },
                Tags: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AppBoundaryKey", "TagValues" ],
                        members: {
                            AppBoundaryKey: {},
                            TagValues: {
                                shape: "S2e"
                            }
                        }
                    }
                }
            }
        },
        S29: {
            type: "list",
            member: {}
        },
        S2e: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "structure",
            members: {
                Source: {},
                SourceResourceName: {},
                SourceResourceType: {}
            }
        },
        S2l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Type: {}
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                AmazonCodeGuruProfiler: {
                    type: "structure",
                    members: {
                        Status: {}
                    }
                }
            }
        },
        S2y: {
            type: "structure",
            members: {
                Id: {},
                Feedback: {}
            }
        },
        S35: {
            type: "structure",
            required: [ "StartTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S3a: {
            type: "list",
            member: {}
        },
        S3b: {
            type: "list",
            member: {}
        },
        S3l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StackName: {},
                    Insight: {
                        shape: "S3n"
                    },
                    AnalyzedResourceCount: {
                        type: "long"
                    }
                }
            }
        },
        S3n: {
            type: "structure",
            members: {
                OpenProactiveInsights: {
                    type: "integer"
                },
                OpenReactiveInsights: {
                    type: "integer"
                },
                MeanTimeToRecoverInMilliseconds: {
                    type: "long"
                }
            }
        },
        S3o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ServiceName: {},
                    Insight: {
                        type: "structure",
                        members: {
                            OpenProactiveInsights: {
                                type: "integer"
                            },
                            OpenReactiveInsights: {
                                type: "integer"
                            }
                        }
                    },
                    AnalyzedResourceCount: {
                        type: "long"
                    }
                }
            }
        },
        S3v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AppBoundaryKey: {},
                    TagValue: {},
                    Insight: {
                        shape: "S3n"
                    },
                    AnalyzedResourceCount: {
                        type: "long"
                    }
                }
            }
        },
        S4b: {
            type: "structure",
            members: {
                CloudFormation: {
                    type: "structure",
                    members: {
                        StackNames: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                Tags: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AppBoundaryKey", "TagValues" ],
                        members: {
                            AppBoundaryKey: {},
                            TagValues: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S4v: {
            type: "structure",
            members: {
                FromTime: {
                    type: "timestamp"
                },
                ToTime: {
                    type: "timestamp"
                }
            }
        },
        S4y: {
            type: "structure",
            members: {
                ServiceNames: {
                    type: "list",
                    member: {}
                }
            }
        },
        S64: {
            type: "structure",
            members: {
                Ongoing: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {}
                    }
                },
                Closed: {
                    type: "structure",
                    required: [ "Type", "EndTimeRange" ],
                    members: {
                        Type: {},
                        EndTimeRange: {
                            type: "structure",
                            members: {
                                FromTime: {
                                    type: "timestamp"
                                },
                                ToTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                },
                Any: {
                    type: "structure",
                    required: [ "Type", "StartTimeRange" ],
                    members: {
                        Type: {},
                        StartTimeRange: {
                            shape: "S4v"
                        }
                    }
                }
            }
        },
        S6c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Severity: {},
                    Status: {},
                    InsightTimeRange: {
                        shape: "S35"
                    },
                    PredictionTimeRange: {
                        shape: "S11"
                    },
                    ResourceCollection: {
                        shape: "S27"
                    },
                    ServiceCollection: {
                        shape: "S4y"
                    },
                    AssociatedResourceArns: {
                        shape: "S6e"
                    }
                }
            }
        },
        S6e: {
            type: "list",
            member: {}
        },
        S6g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Severity: {},
                    Status: {},
                    InsightTimeRange: {
                        shape: "S35"
                    },
                    ResourceCollection: {
                        shape: "S27"
                    },
                    ServiceCollection: {
                        shape: "S4y"
                    },
                    AssociatedResourceArns: {
                        shape: "S6e"
                    }
                }
            }
        },
        S83: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeOrganizationResourceCollectionHealth: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: [ "CloudFormation", "Account", "Service", "Tags" ]
        },
        DescribeResourceCollectionHealth: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: [ "CloudFormation", "Service", "Tags" ]
        },
        GetCostEstimation: {
            input_token: "NextToken",
            non_aggregate_keys: [ "Status", "TotalCost", "TimeRange", "ResourceCollection" ],
            output_token: "NextToken",
            result_key: [ "Costs" ]
        },
        GetResourceCollection: {
            input_token: "NextToken",
            non_aggregate_keys: [ "ResourceCollection" ],
            output_token: "NextToken",
            result_key: [ "ResourceCollection.CloudFormation.StackNames", "ResourceCollection.Tags" ]
        },
        ListAnomaliesForInsight: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ReactiveAnomalies", "ProactiveAnomalies" ]
        },
        ListAnomalousLogGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "InsightId", "AnomalousLogGroups" ]
        },
        ListEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Events"
        },
        ListInsights: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ProactiveInsights", "ReactiveInsights" ]
        },
        ListMonitoredResources: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "MonitoredResourceIdentifiers" ]
        },
        ListNotificationChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Channels"
        },
        ListOrganizationInsights: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ProactiveInsights", "ReactiveInsights" ]
        },
        ListRecommendations: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Recommendations"
        },
        SearchInsights: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ProactiveInsights", "ReactiveInsights" ]
        },
        SearchOrganizationInsights: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ProactiveInsights", "ReactiveInsights" ]
        }
    }
};

AWS.apiLoader.services["ecrpublic"] = {};

AWS.ECRPUBLIC = AWS.Service.defineService("ecrpublic", [ "2020-10-30" ]);

AWS.apiLoader.services["ecrpublic"]["2020-10-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-30",
        endpointPrefix: "api.ecr-public",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon ECR Public",
        serviceFullName: "Amazon Elastic Container Registry Public",
        serviceId: "ECR PUBLIC",
        signatureVersion: "v4",
        signingName: "ecr-public",
        targetPrefix: "SpencerFrontendService",
        uid: "ecr-public-2020-10-30"
    },
    operations: {
        BatchCheckLayerAvailability: {
            input: {
                type: "structure",
                required: [ "repositoryName", "layerDigests" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    layerDigests: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    layers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                layerDigest: {},
                                layerAvailability: {},
                                layerSize: {
                                    type: "long"
                                },
                                mediaType: {}
                            }
                        }
                    },
                    failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                layerDigest: {},
                                failureCode: {},
                                failureReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteImage: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageIds" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageIds: {
                        shape: "Si"
                    },
                    failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                imageId: {
                                    shape: "Sj"
                                },
                                failureCode: {},
                                failureReason: {}
                            }
                        }
                    }
                }
            }
        },
        CompleteLayerUpload: {
            input: {
                type: "structure",
                required: [ "repositoryName", "uploadId", "layerDigests" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    layerDigests: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    layerDigest: {}
                }
            }
        },
        CreateRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    catalogData: {
                        shape: "Sx"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S1b"
                    },
                    catalogData: {
                        shape: "S1f"
                    }
                }
            }
        },
        DeleteRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S1b"
                    }
                }
            }
        },
        DeleteRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        DescribeImageTags: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageTagDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                imageTag: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                imageDetail: {
                                    type: "structure",
                                    members: {
                                        imageDigest: {},
                                        imageSizeInBytes: {
                                            type: "long"
                                        },
                                        imagePushedAt: {
                                            type: "timestamp"
                                        },
                                        imageManifestMediaType: {},
                                        artifactMediaType: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeImages: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Si"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                registryId: {},
                                repositoryName: {},
                                imageDigest: {},
                                imageTags: {
                                    type: "list",
                                    member: {}
                                },
                                imageSizeInBytes: {
                                    type: "long"
                                },
                                imagePushedAt: {
                                    type: "timestamp"
                                },
                                imageManifestMediaType: {},
                                artifactMediaType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRegistries: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "registries" ],
                members: {
                    registries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "registryId", "registryArn", "registryUri", "verified", "aliases" ],
                            members: {
                                registryId: {},
                                registryArn: {},
                                registryUri: {},
                                verified: {
                                    type: "boolean"
                                },
                                aliases: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "status", "primaryRegistryAlias", "defaultRegistryAlias" ],
                                        members: {
                                            name: {},
                                            status: {},
                                            primaryRegistryAlias: {
                                                type: "boolean"
                                            },
                                            defaultRegistryAlias: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRepositories: {
            input: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryNames: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetAuthorizationToken: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    authorizationData: {
                        type: "structure",
                        members: {
                            authorizationToken: {},
                            expiresAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetRegistryCatalogData: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "registryCatalogData" ],
                members: {
                    registryCatalogData: {
                        shape: "S2o"
                    }
                }
            }
        },
        GetRepositoryCatalogData: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    catalogData: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        InitiateLayerUpload: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    uploadId: {},
                    partSize: {
                        type: "long"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        PutImage: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageManifest" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageManifest: {},
                    imageManifestMediaType: {},
                    imageTag: {},
                    imageDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    image: {
                        type: "structure",
                        members: {
                            registryId: {},
                            repositoryName: {},
                            imageId: {
                                shape: "Sj"
                            },
                            imageManifest: {},
                            imageManifestMediaType: {}
                        }
                    }
                }
            }
        },
        PutRegistryCatalogData: {
            input: {
                type: "structure",
                members: {
                    displayName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "registryCatalogData" ],
                members: {
                    registryCatalogData: {
                        shape: "S2o"
                    }
                }
            }
        },
        PutRepositoryCatalogData: {
            input: {
                type: "structure",
                required: [ "repositoryName", "catalogData" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    catalogData: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    catalogData: {
                        shape: "S1f"
                    }
                }
            }
        },
        SetRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName", "policyText" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UploadLayerPart: {
            input: {
                type: "structure",
                required: [ "repositoryName", "uploadId", "partFirstByte", "partLastByte", "layerPartBlob" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    partFirstByte: {
                        type: "long"
                    },
                    partLastByte: {
                        type: "long"
                    },
                    layerPartBlob: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    lastByteReceived: {
                        type: "long"
                    }
                }
            }
        }
    },
    shapes: {
        Si: {
            type: "list",
            member: {
                shape: "Sj"
            }
        },
        Sj: {
            type: "structure",
            members: {
                imageDigest: {},
                imageTag: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                description: {},
                architectures: {
                    shape: "Sz"
                },
                operatingSystems: {
                    shape: "S11"
                },
                logoImageBlob: {
                    type: "blob"
                },
                aboutText: {},
                usageText: {}
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S11: {
            type: "list",
            member: {}
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                repositoryArn: {},
                registryId: {},
                repositoryName: {},
                repositoryUri: {},
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                description: {},
                architectures: {
                    shape: "Sz"
                },
                operatingSystems: {
                    shape: "S11"
                },
                logoUrl: {},
                aboutText: {},
                usageText: {},
                marketplaceCertified: {
                    type: "boolean"
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                displayName: {}
            }
        }
    },
    paginators: {
        DescribeImageTags: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "imageTagDetails"
        },
        DescribeImages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "imageDetails"
        },
        DescribeRegistries: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "registries"
        },
        DescribeRepositories: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "repositories"
        }
    }
};

AWS.apiLoader.services["lookoutvision"] = {};

AWS.LookoutVision = AWS.Service.defineService("lookoutvision", [ "2020-11-20" ]);

AWS.apiLoader.services["lookoutvision"]["2020-11-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-20",
        endpointPrefix: "lookoutvision",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Lookout for Vision",
        serviceId: "LookoutVision",
        signatureVersion: "v4",
        signingName: "lookoutvision",
        uid: "lookoutvision-2020-11-20"
    },
    operations: {
        CreateDataset: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/datasets",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {},
                    DatasetSource: {
                        type: "structure",
                        members: {
                            GroundTruthManifest: {
                                type: "structure",
                                members: {
                                    S3Object: {
                                        type: "structure",
                                        required: [ "Bucket", "Key" ],
                                        members: {
                                            Bucket: {},
                                            Key: {},
                                            VersionId: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetMetadata: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateModel: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "OutputConfig" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    OutputConfig: {
                        shape: "Si"
                    },
                    KmsKeyId: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelMetadata: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateProject: {
            http: {
                requestUri: "/2020-11-20/projects"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {},
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectMetadata: {
                        shape: "S10"
                    }
                }
            }
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteModel: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {}
                }
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectArn: {}
                }
            }
        },
        DescribeDataset: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetDescription: {
                        type: "structure",
                        members: {
                            ProjectName: {},
                            DatasetType: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Status: {},
                            StatusMessage: {},
                            ImageStats: {
                                type: "structure",
                                members: {
                                    Total: {
                                        type: "integer"
                                    },
                                    Labeled: {
                                        type: "integer"
                                    },
                                    Normal: {
                                        type: "integer"
                                    },
                                    Anomaly: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeModel: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelDescription: {
                        type: "structure",
                        members: {
                            ModelVersion: {},
                            ModelArn: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            Description: {},
                            Status: {},
                            StatusMessage: {},
                            Performance: {
                                shape: "Sw"
                            },
                            OutputConfig: {
                                shape: "Si"
                            },
                            EvaluationManifest: {
                                shape: "S1h"
                            },
                            EvaluationResult: {
                                shape: "S1h"
                            },
                            EvaluationEndTimestamp: {
                                type: "timestamp"
                            },
                            KmsKeyId: {},
                            MinInferenceUnits: {
                                type: "integer"
                            },
                            MaxInferenceUnits: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        DescribeModelPackagingJob: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/modelpackagingjobs/{jobName}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "JobName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    JobName: {
                        location: "uri",
                        locationName: "jobName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelPackagingDescription: {
                        type: "structure",
                        members: {
                            JobName: {},
                            ProjectName: {},
                            ModelVersion: {},
                            ModelPackagingConfiguration: {
                                shape: "S1n"
                            },
                            ModelPackagingJobDescription: {},
                            ModelPackagingMethod: {},
                            ModelPackagingOutputDetails: {
                                type: "structure",
                                members: {
                                    Greengrass: {
                                        type: "structure",
                                        members: {
                                            ComponentVersionArn: {},
                                            ComponentName: {},
                                            ComponentVersion: {}
                                        }
                                    }
                                }
                            },
                            Status: {},
                            StatusMessage: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectDescription: {
                        type: "structure",
                        members: {
                            ProjectArn: {},
                            ProjectName: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            Datasets: {
                                type: "list",
                                member: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                }
            }
        },
        DetectAnomalies: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}/detect"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion", "Body", "ContentType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    Body: {
                        type: "blob",
                        requiresLength: true,
                        streaming: true
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                members: {
                    DetectAnomalyResult: {
                        type: "structure",
                        members: {
                            Source: {
                                type: "structure",
                                members: {
                                    Type: {}
                                }
                            },
                            IsAnomalous: {
                                type: "boolean"
                            },
                            Confidence: {
                                type: "float"
                            },
                            Anomalies: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        PixelAnomaly: {
                                            type: "structure",
                                            members: {
                                                TotalPercentageArea: {
                                                    type: "float"
                                                },
                                                Color: {}
                                            }
                                        }
                                    }
                                }
                            },
                            AnomalyMask: {
                                type: "blob"
                            }
                        }
                    }
                }
            }
        },
        ListDatasetEntries: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    },
                    Labeled: {
                        location: "querystring",
                        locationName: "labeled",
                        type: "boolean"
                    },
                    AnomalyClass: {
                        location: "querystring",
                        locationName: "anomalyClass"
                    },
                    BeforeCreationDate: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    AfterCreationDate: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    SourceRefContains: {
                        location: "querystring",
                        locationName: "sourceRefContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetEntries: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListModelPackagingJobs: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/modelpackagingjobs"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelPackagingJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobName: {},
                                ProjectName: {},
                                ModelVersion: {},
                                ModelPackagingJobDescription: {},
                                ModelPackagingMethod: {},
                                Status: {},
                                StatusMessage: {},
                                CreationTimestamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModels: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/models"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Models: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Projects: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        StartModel: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}/start",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion", "MinInferenceUnits" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    MinInferenceUnits: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    MaxInferenceUnits: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        StartModelPackagingJob: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/modelpackagingjobs"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion", "Configuration" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {},
                    JobName: {},
                    Configuration: {
                        shape: "S1n"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobName: {}
                }
            }
        },
        StopModel: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}/stop",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/2020-11-20/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDatasetEntries: {
            http: {
                method: "PATCH",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType", "Changes" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    },
                    Changes: {
                        type: "blob"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        }
    },
    shapes: {
        Sc: {
            type: "structure",
            members: {
                DatasetType: {},
                CreationTimestamp: {
                    type: "timestamp"
                },
                Status: {},
                StatusMessage: {}
            }
        },
        Si: {
            type: "structure",
            required: [ "S3Location" ],
            members: {
                S3Location: {
                    shape: "Sj"
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "Bucket" ],
            members: {
                Bucket: {},
                Prefix: {}
            }
        },
        Sm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                CreationTimestamp: {
                    type: "timestamp"
                },
                ModelVersion: {},
                ModelArn: {},
                Description: {},
                Status: {},
                StatusMessage: {},
                Performance: {
                    shape: "Sw"
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                F1Score: {
                    type: "float"
                },
                Recall: {
                    type: "float"
                },
                Precision: {
                    type: "float"
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                ProjectArn: {},
                ProjectName: {},
                CreationTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S1h: {
            type: "structure",
            required: [ "Bucket", "Key" ],
            members: {
                Bucket: {},
                Key: {}
            }
        },
        S1n: {
            type: "structure",
            required: [ "Greengrass" ],
            members: {
                Greengrass: {
                    type: "structure",
                    required: [ "S3OutputLocation", "ComponentName" ],
                    members: {
                        CompilerOptions: {},
                        TargetDevice: {},
                        TargetPlatform: {
                            type: "structure",
                            required: [ "Os", "Arch" ],
                            members: {
                                Os: {},
                                Arch: {},
                                Accelerator: {}
                            }
                        },
                        S3OutputLocation: {
                            shape: "Sj"
                        },
                        ComponentName: {},
                        ComponentVersion: {},
                        ComponentDescription: {},
                        Tags: {
                            shape: "Sm"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListDatasetEntries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DatasetEntries"
        },
        ListModelPackagingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelPackagingJobs"
        },
        ListModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Models"
        },
        ListProjects: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Projects"
        }
    }
};

AWS.apiLoader.services["sagemakerfeaturestoreruntime"] = {};

AWS.SageMakerFeatureStoreRuntime = AWS.Service.defineService("sagemakerfeaturestoreruntime", [ "2020-07-01" ]);

AWS.apiLoader.services["sagemakerfeaturestoreruntime"]["2020-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-01",
        endpointPrefix: "featurestore-runtime.sagemaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon SageMaker Feature Store Runtime",
        serviceId: "SageMaker FeatureStore Runtime",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "sagemaker-featurestore-runtime-2020-07-01"
    },
    operations: {
        BatchGetRecord: {
            http: {
                requestUri: "/BatchGetRecord"
            },
            input: {
                type: "structure",
                required: [ "Identifiers" ],
                members: {
                    Identifiers: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    },
                    ExpirationTimeResponse: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Records", "Errors", "UnprocessedIdentifiers" ],
                members: {
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FeatureGroupName", "RecordIdentifierValueAsString", "Record" ],
                            members: {
                                FeatureGroupName: {},
                                RecordIdentifierValueAsString: {},
                                Record: {
                                    shape: "Sd"
                                },
                                ExpiresAt: {}
                            }
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FeatureGroupName", "RecordIdentifierValueAsString", "ErrorCode", "ErrorMessage" ],
                            members: {
                                FeatureGroupName: {},
                                RecordIdentifierValueAsString: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    UnprocessedIdentifiers: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    }
                }
            }
        },
        DeleteRecord: {
            http: {
                method: "DELETE",
                requestUri: "/FeatureGroup/{FeatureGroupName}"
            },
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "RecordIdentifierValueAsString", "EventTime" ],
                members: {
                    FeatureGroupName: {
                        location: "uri",
                        locationName: "FeatureGroupName"
                    },
                    RecordIdentifierValueAsString: {
                        location: "querystring",
                        locationName: "RecordIdentifierValueAsString"
                    },
                    EventTime: {
                        location: "querystring",
                        locationName: "EventTime"
                    },
                    TargetStores: {
                        shape: "Sm",
                        location: "querystring",
                        locationName: "TargetStores"
                    },
                    DeletionMode: {
                        location: "querystring",
                        locationName: "DeletionMode"
                    }
                }
            }
        },
        GetRecord: {
            http: {
                method: "GET",
                requestUri: "/FeatureGroup/{FeatureGroupName}"
            },
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "RecordIdentifierValueAsString" ],
                members: {
                    FeatureGroupName: {
                        location: "uri",
                        locationName: "FeatureGroupName"
                    },
                    RecordIdentifierValueAsString: {
                        location: "querystring",
                        locationName: "RecordIdentifierValueAsString"
                    },
                    FeatureNames: {
                        shape: "S7",
                        location: "querystring",
                        locationName: "FeatureName"
                    },
                    ExpirationTimeResponse: {
                        location: "querystring",
                        locationName: "ExpirationTimeResponse"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Record: {
                        shape: "Sd"
                    },
                    ExpiresAt: {}
                }
            }
        },
        PutRecord: {
            http: {
                method: "PUT",
                requestUri: "/FeatureGroup/{FeatureGroupName}"
            },
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "Record" ],
                members: {
                    FeatureGroupName: {
                        location: "uri",
                        locationName: "FeatureGroupName"
                    },
                    Record: {
                        shape: "Sd"
                    },
                    TargetStores: {
                        shape: "Sm"
                    },
                    TtlDuration: {
                        type: "structure",
                        required: [ "Unit", "Value" ],
                        members: {
                            Unit: {},
                            Value: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "FeatureGroupName", "RecordIdentifiersValueAsString" ],
            members: {
                FeatureGroupName: {},
                RecordIdentifiersValueAsString: {
                    type: "list",
                    member: {}
                },
                FeatureNames: {
                    shape: "S7"
                }
            }
        },
        S7: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FeatureName" ],
                members: {
                    FeatureName: {},
                    ValueAsString: {},
                    ValueAsStringList: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Sm: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["customerprofiles"] = {};

AWS.CustomerProfiles = AWS.Service.defineService("customerprofiles", [ "2020-08-15" ]);

AWS.apiLoader.services["customerprofiles"]["2020-08-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-15",
        endpointPrefix: "profile",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Customer Profiles",
        serviceFullName: "Amazon Connect Customer Profiles",
        serviceId: "Customer Profiles",
        signatureVersion: "v4",
        signingName: "profile",
        uid: "customer-profiles-2020-08-15"
    },
    operations: {
        AddProfileKey: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/keys"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "KeyName", "Values", "DomainName" ],
                members: {
                    ProfileId: {},
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateCalculatedAttributeDefinition: {
            http: {
                requestUri: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "CalculatedAttributeName", "AttributeDetails", "Statistic" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    CalculatedAttributeName: {
                        location: "uri",
                        locationName: "CalculatedAttributeName"
                    },
                    DisplayName: {},
                    Description: {
                        shape: "Sa"
                    },
                    AttributeDetails: {
                        shape: "Sb"
                    },
                    Conditions: {
                        shape: "Sf"
                    },
                    Statistic: {
                        shape: "Sm"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CalculatedAttributeName: {},
                    DisplayName: {},
                    Description: {
                        shape: "Sa"
                    },
                    AttributeDetails: {
                        shape: "Sb"
                    },
                    Conditions: {
                        shape: "Sf"
                    },
                    Statistic: {
                        shape: "Sm"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDomain: {
            http: {
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "DefaultExpirationDays" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "Sw"
                    },
                    RuleBasedMatching: {
                        shape: "S1c"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "DefaultExpirationDays", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "S1o"
                    },
                    RuleBasedMatching: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateEventStream: {
            http: {
                requestUri: "/domains/{DomainName}/event-streams/{EventStreamName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Uri", "EventStreamName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Uri: {},
                    EventStreamName: {
                        location: "uri",
                        locationName: "EventStreamName"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EventStreamArn" ],
                members: {
                    EventStreamArn: {},
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateIntegrationWorkflow: {
            http: {
                requestUri: "/domains/{DomainName}/workflows/integrations"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "WorkflowType", "IntegrationConfig", "ObjectTypeName", "RoleArn" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    WorkflowType: {},
                    IntegrationConfig: {
                        type: "structure",
                        members: {
                            AppflowIntegration: {
                                type: "structure",
                                required: [ "FlowDefinition" ],
                                members: {
                                    FlowDefinition: {
                                        shape: "S1x"
                                    },
                                    Batches: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "StartTime", "EndTime" ],
                                            members: {
                                                StartTime: {
                                                    type: "timestamp"
                                                },
                                                EndTime: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ObjectTypeName: {},
                    RoleArn: {},
                    Tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "WorkflowId", "Message" ],
                members: {
                    WorkflowId: {},
                    Message: {}
                }
            }
        },
        CreateProfile: {
            http: {
                requestUri: "/domains/{DomainName}/profiles"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    AccountNumber: {
                        shape: "S39"
                    },
                    AdditionalInformation: {
                        shape: "S3a"
                    },
                    PartyType: {
                        shape: "S3b"
                    },
                    BusinessName: {
                        shape: "S39"
                    },
                    FirstName: {
                        shape: "S39"
                    },
                    MiddleName: {
                        shape: "S39"
                    },
                    LastName: {
                        shape: "S39"
                    },
                    BirthDate: {
                        shape: "S39"
                    },
                    Gender: {
                        shape: "S3c"
                    },
                    PhoneNumber: {
                        shape: "S39"
                    },
                    MobilePhoneNumber: {
                        shape: "S39"
                    },
                    HomePhoneNumber: {
                        shape: "S39"
                    },
                    BusinessPhoneNumber: {
                        shape: "S39"
                    },
                    EmailAddress: {
                        shape: "S39"
                    },
                    PersonalEmailAddress: {
                        shape: "S39"
                    },
                    BusinessEmailAddress: {
                        shape: "S39"
                    },
                    Address: {
                        shape: "S3d"
                    },
                    ShippingAddress: {
                        shape: "S3d"
                    },
                    MailingAddress: {
                        shape: "S3d"
                    },
                    BillingAddress: {
                        shape: "S3d"
                    },
                    Attributes: {
                        shape: "S3e"
                    },
                    PartyTypeString: {
                        shape: "S39"
                    },
                    GenderString: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            }
        },
        DeleteCalculatedAttributeDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "CalculatedAttributeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    CalculatedAttributeName: {
                        location: "uri",
                        locationName: "CalculatedAttributeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Message" ],
                members: {
                    Message: {}
                }
            }
        },
        DeleteEventStream: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{DomainName}/event-streams/{EventStreamName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "EventStreamName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    EventStreamName: {
                        location: "uri",
                        locationName: "EventStreamName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteIntegration: {
            http: {
                requestUri: "/domains/{DomainName}/integrations/delete"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Uri" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Uri: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Message" ],
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfile: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/delete"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "DomainName" ],
                members: {
                    ProfileId: {},
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfileKey: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/keys/delete"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "KeyName", "Values", "DomainName" ],
                members: {
                    ProfileId: {},
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfileObject: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/objects/delete"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "ProfileObjectUniqueKey", "ObjectTypeName", "DomainName" ],
                members: {
                    ProfileId: {},
                    ProfileObjectUniqueKey: {},
                    ObjectTypeName: {},
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfileObjectType: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{DomainName}/object-types/{ObjectTypeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {
                        location: "uri",
                        locationName: "ObjectTypeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Message" ],
                members: {
                    Message: {}
                }
            }
        },
        DeleteWorkflow: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{DomainName}/workflows/{WorkflowId}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "WorkflowId" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    WorkflowId: {
                        location: "uri",
                        locationName: "WorkflowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DetectProfileObjectType: {
            http: {
                requestUri: "/domains/{DomainName}/detect/object-types"
            },
            input: {
                type: "structure",
                required: [ "Objects", "DomainName" ],
                members: {
                    Objects: {
                        type: "list",
                        member: {
                            shape: "S41"
                        },
                        sensitive: true
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DetectedProfileObjectTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceLastUpdatedTimestampFormat: {},
                                Fields: {
                                    shape: "S45"
                                },
                                Keys: {
                                    shape: "S49"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetAutoMergingPreview: {
            http: {
                requestUri: "/domains/{DomainName}/identity-resolution-jobs/auto-merging-preview"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Consolidation", "ConflictResolution" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Consolidation: {
                        shape: "S12"
                    },
                    ConflictResolution: {
                        shape: "S15"
                    },
                    MinAllowedConfidenceScoreForMerging: {
                        type: "double"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    NumberOfMatchesInSample: {
                        type: "long"
                    },
                    NumberOfProfilesInSample: {
                        type: "long"
                    },
                    NumberOfProfilesWillBeMerged: {
                        type: "long"
                    }
                }
            }
        },
        GetCalculatedAttributeDefinition: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "CalculatedAttributeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    CalculatedAttributeName: {
                        location: "uri",
                        locationName: "CalculatedAttributeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CalculatedAttributeName: {},
                    DisplayName: {},
                    Description: {
                        shape: "Sa"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Statistic: {
                        shape: "Sm"
                    },
                    Conditions: {
                        shape: "Sf"
                    },
                    AttributeDetails: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetCalculatedAttributeForProfile: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/profile/{ProfileId}/calculated-attributes/{CalculatedAttributeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ProfileId", "CalculatedAttributeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ProfileId: {
                        location: "uri",
                        locationName: "ProfileId"
                    },
                    CalculatedAttributeName: {
                        location: "uri",
                        locationName: "CalculatedAttributeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CalculatedAttributeName: {},
                    DisplayName: {},
                    IsDataPartial: {},
                    Value: {}
                }
            }
        },
        GetDomain: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Stats: {
                        type: "structure",
                        members: {
                            ProfileCount: {
                                type: "long"
                            },
                            MeteringProfileCount: {
                                type: "long"
                            },
                            ObjectCount: {
                                type: "long"
                            },
                            TotalSize: {
                                type: "long"
                            }
                        }
                    },
                    Matching: {
                        shape: "S1o"
                    },
                    RuleBasedMatching: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetEventStream: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/event-streams/{EventStreamName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "EventStreamName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    EventStreamName: {
                        location: "uri",
                        locationName: "EventStreamName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "EventStreamArn", "CreatedAt", "State", "DestinationDetails" ],
                members: {
                    DomainName: {},
                    EventStreamArn: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    State: {},
                    StoppedSince: {
                        type: "timestamp"
                    },
                    DestinationDetails: {
                        type: "structure",
                        required: [ "Uri", "Status" ],
                        members: {
                            Uri: {},
                            Status: {},
                            UnhealthySince: {
                                type: "timestamp"
                            },
                            Message: {}
                        }
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetIdentityResolutionJob: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/identity-resolution-jobs/{JobId}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "JobId" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainName: {},
                    JobId: {},
                    Status: {},
                    Message: {},
                    JobStartTime: {
                        type: "timestamp"
                    },
                    JobEndTime: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    JobExpirationTime: {
                        type: "timestamp"
                    },
                    AutoMerging: {
                        shape: "S11"
                    },
                    ExportingLocation: {
                        shape: "S4y"
                    },
                    JobStats: {
                        shape: "S51"
                    }
                }
            }
        },
        GetIntegration: {
            http: {
                requestUri: "/domains/{DomainName}/integrations"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Uri" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Uri: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "Uri", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    Uri: {},
                    ObjectTypeName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    },
                    ObjectTypeNames: {
                        shape: "S54"
                    },
                    WorkflowId: {},
                    IsUnstructured: {
                        type: "boolean"
                    }
                }
            }
        },
        GetMatches: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/matches"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MatchGenerationDate: {
                        type: "timestamp"
                    },
                    PotentialMatches: {
                        type: "integer"
                    },
                    Matches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MatchId: {},
                                ProfileIds: {
                                    shape: "S5c"
                                },
                                ConfidenceScore: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetProfileObjectType: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/object-types/{ObjectTypeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {
                        location: "uri",
                        locationName: "ObjectTypeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ObjectTypeName", "Description" ],
                members: {
                    ObjectTypeName: {},
                    Description: {
                        shape: "Sa"
                    },
                    TemplateId: {},
                    ExpirationDays: {
                        type: "integer"
                    },
                    EncryptionKey: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    SourceLastUpdatedTimestampFormat: {},
                    Fields: {
                        shape: "S45"
                    },
                    Keys: {
                        shape: "S49"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetProfileObjectTypeTemplate: {
            http: {
                method: "GET",
                requestUri: "/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "TemplateId" ],
                members: {
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    SourceName: {},
                    SourceObject: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    SourceLastUpdatedTimestampFormat: {},
                    Fields: {
                        shape: "S45"
                    },
                    Keys: {
                        shape: "S49"
                    }
                }
            }
        },
        GetSimilarProfiles: {
            http: {
                requestUri: "/domains/{DomainName}/matches"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "MatchType", "SearchKey", "SearchValue" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MatchType: {},
                    SearchKey: {},
                    SearchValue: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileIds: {
                        shape: "S5c"
                    },
                    MatchId: {},
                    MatchType: {},
                    RuleLevel: {
                        type: "integer"
                    },
                    ConfidenceScore: {
                        type: "double"
                    },
                    NextToken: {}
                }
            }
        },
        GetWorkflow: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/workflows/{WorkflowId}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "WorkflowId" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    WorkflowId: {
                        location: "uri",
                        locationName: "WorkflowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkflowId: {},
                    WorkflowType: {},
                    Status: {},
                    ErrorDescription: {},
                    StartDate: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Attributes: {
                        type: "structure",
                        members: {
                            AppflowIntegration: {
                                type: "structure",
                                required: [ "SourceConnectorType", "ConnectorProfileName" ],
                                members: {
                                    SourceConnectorType: {},
                                    ConnectorProfileName: {},
                                    RoleArn: {}
                                }
                            }
                        }
                    },
                    Metrics: {
                        type: "structure",
                        members: {
                            AppflowIntegration: {
                                type: "structure",
                                required: [ "RecordsProcessed", "StepsCompleted", "TotalSteps" ],
                                members: {
                                    RecordsProcessed: {
                                        type: "long"
                                    },
                                    StepsCompleted: {
                                        type: "long"
                                    },
                                    TotalSteps: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetWorkflowSteps: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/workflows/{WorkflowId}/steps"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "WorkflowId" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    WorkflowId: {
                        location: "uri",
                        locationName: "WorkflowId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkflowId: {},
                    WorkflowType: {},
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppflowIntegration: {
                                    type: "structure",
                                    required: [ "FlowName", "Status", "ExecutionMessage", "RecordsProcessed", "BatchRecordsStartTime", "BatchRecordsEndTime", "CreatedAt", "LastUpdatedAt" ],
                                    members: {
                                        FlowName: {},
                                        Status: {},
                                        ExecutionMessage: {},
                                        RecordsProcessed: {
                                            type: "long"
                                        },
                                        BatchRecordsStartTime: {},
                                        BatchRecordsEndTime: {},
                                        CreatedAt: {
                                            type: "timestamp"
                                        },
                                        LastUpdatedAt: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountIntegrations: {
            http: {
                requestUri: "/integrations"
            },
            input: {
                type: "structure",
                required: [ "Uri" ],
                members: {
                    Uri: {},
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    IncludeHidden: {
                        location: "querystring",
                        locationName: "include-hidden",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        shape: "S60"
                    },
                    NextToken: {}
                }
            }
        },
        ListCalculatedAttributeDefinitions: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/calculated-attributes"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CalculatedAttributeName: {},
                                DisplayName: {},
                                Description: {
                                    shape: "Sa"
                                },
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sn"
                                }
                            }
                        },
                        sensitive: true
                    },
                    NextToken: {}
                }
            }
        },
        ListCalculatedAttributesForProfile: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/profile/{ProfileId}/calculated-attributes"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ProfileId" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ProfileId: {
                        location: "uri",
                        locationName: "ProfileId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CalculatedAttributeName: {},
                                DisplayName: {},
                                IsDataPartial: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomains: {
            http: {
                method: "GET",
                requestUri: "/domains"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DomainName", "CreatedAt", "LastUpdatedAt" ],
                            members: {
                                DomainName: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sn"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventStreams: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/event-streams"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DomainName", "EventStreamName", "EventStreamArn", "State" ],
                            members: {
                                DomainName: {},
                                EventStreamName: {},
                                EventStreamArn: {},
                                State: {},
                                StoppedSince: {
                                    type: "timestamp"
                                },
                                DestinationSummary: {
                                    type: "structure",
                                    required: [ "Uri", "Status" ],
                                    members: {
                                        Uri: {},
                                        Status: {},
                                        UnhealthySince: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                Tags: {
                                    shape: "Sn"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIdentityResolutionJobs: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/identity-resolution-jobs"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityResolutionJobsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                JobId: {},
                                Status: {},
                                JobStartTime: {
                                    type: "timestamp"
                                },
                                JobEndTime: {
                                    type: "timestamp"
                                },
                                JobStats: {
                                    shape: "S51"
                                },
                                ExportingLocation: {
                                    shape: "S4y"
                                },
                                Message: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIntegrations: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/integrations"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    IncludeHidden: {
                        location: "querystring",
                        locationName: "include-hidden",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        shape: "S60"
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileObjectTypeTemplates: {
            http: {
                method: "GET",
                requestUri: "/templates"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateId: {},
                                SourceName: {},
                                SourceObject: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileObjectTypes: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/object-types"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ObjectTypeName", "Description" ],
                            members: {
                                ObjectTypeName: {},
                                Description: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sn"
                                }
                            }
                        },
                        sensitive: true
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileObjects: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/objects"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName", "ProfileId" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {},
                    ProfileId: {},
                    ObjectFilter: {
                        type: "structure",
                        required: [ "KeyName", "Values" ],
                        members: {
                            KeyName: {},
                            Values: {
                                shape: "S4"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ObjectTypeName: {},
                                ProfileObjectUniqueKey: {},
                                Object: {
                                    shape: "S41"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRuleBasedMatches: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/profiles/ruleBasedMatches"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MatchIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        ListWorkflows: {
            http: {
                requestUri: "/domains/{DomainName}/workflows"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    WorkflowType: {},
                    Status: {},
                    QueryStartDate: {
                        type: "timestamp"
                    },
                    QueryEndDate: {
                        type: "timestamp"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkflowType", "WorkflowId", "Status", "StatusDescription", "CreatedAt", "LastUpdatedAt" ],
                            members: {
                                WorkflowType: {},
                                WorkflowId: {},
                                Status: {},
                                StatusDescription: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        MergeProfiles: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/objects/merge"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "MainProfileId", "ProfileIdsToBeMerged" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MainProfileId: {},
                    ProfileIdsToBeMerged: {
                        type: "list",
                        member: {}
                    },
                    FieldSourceProfileIds: {
                        type: "structure",
                        members: {
                            AccountNumber: {},
                            AdditionalInformation: {},
                            PartyType: {},
                            BusinessName: {},
                            FirstName: {},
                            MiddleName: {},
                            LastName: {},
                            BirthDate: {},
                            Gender: {},
                            PhoneNumber: {},
                            MobilePhoneNumber: {},
                            HomePhoneNumber: {},
                            BusinessPhoneNumber: {},
                            EmailAddress: {},
                            PersonalEmailAddress: {},
                            BusinessEmailAddress: {},
                            Address: {},
                            ShippingAddress: {},
                            MailingAddress: {},
                            BillingAddress: {},
                            Attributes: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        PutIntegration: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/integrations"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Uri: {},
                    ObjectTypeName: {},
                    Tags: {
                        shape: "Sn"
                    },
                    FlowDefinition: {
                        shape: "S1x"
                    },
                    ObjectTypeNames: {
                        shape: "S54"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "Uri", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    Uri: {},
                    ObjectTypeName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    },
                    ObjectTypeNames: {
                        shape: "S54"
                    },
                    WorkflowId: {},
                    IsUnstructured: {
                        type: "boolean"
                    }
                }
            }
        },
        PutProfileObject: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/profiles/objects"
            },
            input: {
                type: "structure",
                required: [ "ObjectTypeName", "Object", "DomainName" ],
                members: {
                    ObjectTypeName: {},
                    Object: {
                        shape: "S41"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileObjectUniqueKey: {}
                }
            }
        },
        PutProfileObjectType: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/object-types/{ObjectTypeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName", "Description" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {
                        location: "uri",
                        locationName: "ObjectTypeName"
                    },
                    Description: {
                        shape: "Sa"
                    },
                    TemplateId: {},
                    ExpirationDays: {
                        type: "integer"
                    },
                    EncryptionKey: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    SourceLastUpdatedTimestampFormat: {},
                    Fields: {
                        shape: "S45"
                    },
                    Keys: {
                        shape: "S49"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ObjectTypeName", "Description" ],
                members: {
                    ObjectTypeName: {},
                    Description: {
                        shape: "Sa"
                    },
                    TemplateId: {},
                    ExpirationDays: {
                        type: "integer"
                    },
                    EncryptionKey: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    SourceLastUpdatedTimestampFormat: {},
                    Fields: {
                        shape: "S45"
                    },
                    Keys: {
                        shape: "S49"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        SearchProfiles: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/search"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "KeyName", "Values" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    },
                    AdditionalSearchKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "KeyName", "Values" ],
                            members: {
                                KeyName: {},
                                Values: {
                                    shape: "S4"
                                }
                            }
                        }
                    },
                    LogicalOperator: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProfileId: {},
                                AccountNumber: {
                                    shape: "S39"
                                },
                                AdditionalInformation: {
                                    shape: "S3a"
                                },
                                PartyType: {
                                    shape: "S3b"
                                },
                                BusinessName: {
                                    shape: "S39"
                                },
                                FirstName: {
                                    shape: "S39"
                                },
                                MiddleName: {
                                    shape: "S39"
                                },
                                LastName: {
                                    shape: "S39"
                                },
                                BirthDate: {
                                    shape: "S39"
                                },
                                Gender: {
                                    shape: "S3c"
                                },
                                PhoneNumber: {
                                    shape: "S39"
                                },
                                MobilePhoneNumber: {
                                    shape: "S39"
                                },
                                HomePhoneNumber: {
                                    shape: "S39"
                                },
                                BusinessPhoneNumber: {
                                    shape: "S39"
                                },
                                EmailAddress: {
                                    shape: "S39"
                                },
                                PersonalEmailAddress: {
                                    shape: "S39"
                                },
                                BusinessEmailAddress: {
                                    shape: "S39"
                                },
                                Address: {
                                    shape: "S3d"
                                },
                                ShippingAddress: {
                                    shape: "S3d"
                                },
                                MailingAddress: {
                                    shape: "S3d"
                                },
                                BillingAddress: {
                                    shape: "S3d"
                                },
                                Attributes: {
                                    shape: "S3e"
                                },
                                FoundByItems: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            KeyName: {},
                                            Values: {
                                                shape: "S4"
                                            }
                                        }
                                    }
                                },
                                PartyTypeString: {
                                    shape: "S39"
                                },
                                GenderString: {
                                    shape: "S39"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCalculatedAttributeDefinition: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "CalculatedAttributeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    CalculatedAttributeName: {
                        location: "uri",
                        locationName: "CalculatedAttributeName"
                    },
                    DisplayName: {},
                    Description: {
                        shape: "Sa"
                    },
                    Conditions: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CalculatedAttributeName: {},
                    DisplayName: {},
                    Description: {
                        shape: "Sa"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Statistic: {
                        shape: "Sm"
                    },
                    Conditions: {
                        shape: "Sf"
                    },
                    AttributeDetails: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateDomain: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "Sw"
                    },
                    RuleBasedMatching: {
                        shape: "S1c"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "S1o"
                    },
                    RuleBasedMatching: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateProfile: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/profiles"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ProfileId" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ProfileId: {},
                    AdditionalInformation: {
                        type: "string",
                        sensitive: true
                    },
                    AccountNumber: {
                        shape: "S87"
                    },
                    PartyType: {
                        shape: "S3b"
                    },
                    BusinessName: {
                        shape: "S87"
                    },
                    FirstName: {
                        shape: "S87"
                    },
                    MiddleName: {
                        shape: "S87"
                    },
                    LastName: {
                        shape: "S87"
                    },
                    BirthDate: {
                        shape: "S87"
                    },
                    Gender: {
                        shape: "S3c"
                    },
                    PhoneNumber: {
                        shape: "S87"
                    },
                    MobilePhoneNumber: {
                        shape: "S87"
                    },
                    HomePhoneNumber: {
                        shape: "S87"
                    },
                    BusinessPhoneNumber: {
                        shape: "S87"
                    },
                    EmailAddress: {
                        shape: "S87"
                    },
                    PersonalEmailAddress: {
                        shape: "S87"
                    },
                    BusinessEmailAddress: {
                        shape: "S87"
                    },
                    Address: {
                        shape: "S88"
                    },
                    ShippingAddress: {
                        shape: "S88"
                    },
                    MailingAddress: {
                        shape: "S88"
                    },
                    BillingAddress: {
                        shape: "S88"
                    },
                    Attributes: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    PartyTypeString: {
                        shape: "S87"
                    },
                    GenderString: {
                        shape: "S87"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Sb: {
            type: "structure",
            required: [ "Attributes", "Expression" ],
            members: {
                Attributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {}
                        }
                    }
                },
                Expression: {}
            },
            sensitive: true
        },
        Sf: {
            type: "structure",
            members: {
                Range: {
                    type: "structure",
                    required: [ "Value", "Unit" ],
                    members: {
                        Value: {
                            type: "integer"
                        },
                        Unit: {}
                    }
                },
                ObjectCount: {
                    type: "integer"
                },
                Threshold: {
                    type: "structure",
                    required: [ "Value", "Operator" ],
                    members: {
                        Value: {},
                        Operator: {}
                    }
                }
            },
            sensitive: true
        },
        Sm: {
            type: "string",
            sensitive: true
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                JobSchedule: {
                    shape: "Sy"
                },
                AutoMerging: {
                    shape: "S11"
                },
                ExportingConfig: {
                    shape: "S18"
                }
            }
        },
        Sy: {
            type: "structure",
            required: [ "DayOfTheWeek", "Time" ],
            members: {
                DayOfTheWeek: {},
                Time: {}
            }
        },
        S11: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                Consolidation: {
                    shape: "S12"
                },
                ConflictResolution: {
                    shape: "S15"
                },
                MinAllowedConfidenceScoreForMerging: {
                    type: "double"
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "MatchingAttributesList" ],
            members: {
                MatchingAttributesList: {
                    type: "list",
                    member: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "ConflictResolvingModel" ],
            members: {
                ConflictResolvingModel: {},
                SourceName: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                S3Exporting: {
                    type: "structure",
                    required: [ "S3BucketName" ],
                    members: {
                        S3BucketName: {},
                        S3KeyName: {}
                    }
                }
            }
        },
        S1c: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                MatchingRules: {
                    shape: "S1d"
                },
                MaxAllowedRuleLevelForMerging: {
                    type: "integer"
                },
                MaxAllowedRuleLevelForMatching: {
                    type: "integer"
                },
                AttributeTypesSelector: {
                    shape: "S1i"
                },
                ConflictResolution: {
                    shape: "S15"
                },
                ExportingConfig: {
                    shape: "S18"
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Rule" ],
                members: {
                    Rule: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1i: {
            type: "structure",
            required: [ "AttributeMatchingModel" ],
            members: {
                AttributeMatchingModel: {},
                Address: {
                    type: "list",
                    member: {}
                },
                PhoneNumber: {
                    type: "list",
                    member: {}
                },
                EmailAddress: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                JobSchedule: {
                    shape: "Sy"
                },
                AutoMerging: {
                    shape: "S11"
                },
                ExportingConfig: {
                    shape: "S18"
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                MatchingRules: {
                    shape: "S1d"
                },
                Status: {},
                MaxAllowedRuleLevelForMerging: {
                    type: "integer"
                },
                MaxAllowedRuleLevelForMatching: {
                    type: "integer"
                },
                AttributeTypesSelector: {
                    shape: "S1i"
                },
                ConflictResolution: {
                    shape: "S15"
                },
                ExportingConfig: {
                    shape: "S18"
                }
            }
        },
        S1x: {
            type: "structure",
            required: [ "FlowName", "KmsArn", "SourceFlowConfig", "Tasks", "TriggerConfig" ],
            members: {
                Description: {},
                FlowName: {},
                KmsArn: {},
                SourceFlowConfig: {
                    type: "structure",
                    required: [ "ConnectorType", "SourceConnectorProperties" ],
                    members: {
                        ConnectorProfileName: {},
                        ConnectorType: {},
                        IncrementalPullConfig: {
                            type: "structure",
                            members: {
                                DatetimeTypeFieldName: {}
                            }
                        },
                        SourceConnectorProperties: {
                            type: "structure",
                            members: {
                                Marketo: {
                                    type: "structure",
                                    required: [ "Object" ],
                                    members: {
                                        Object: {}
                                    }
                                },
                                S3: {
                                    type: "structure",
                                    required: [ "BucketName" ],
                                    members: {
                                        BucketName: {},
                                        BucketPrefix: {}
                                    }
                                },
                                Salesforce: {
                                    type: "structure",
                                    required: [ "Object" ],
                                    members: {
                                        Object: {},
                                        EnableDynamicFieldUpdate: {
                                            type: "boolean"
                                        },
                                        IncludeDeletedRecords: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                ServiceNow: {
                                    type: "structure",
                                    required: [ "Object" ],
                                    members: {
                                        Object: {}
                                    }
                                },
                                Zendesk: {
                                    type: "structure",
                                    required: [ "Object" ],
                                    members: {
                                        Object: {}
                                    }
                                }
                            }
                        }
                    }
                },
                Tasks: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "SourceFields", "TaskType" ],
                        members: {
                            ConnectorOperator: {
                                type: "structure",
                                members: {
                                    Marketo: {},
                                    S3: {},
                                    Salesforce: {},
                                    ServiceNow: {},
                                    Zendesk: {}
                                }
                            },
                            DestinationField: {},
                            SourceFields: {
                                type: "list",
                                member: {}
                            },
                            TaskProperties: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            TaskType: {}
                        }
                    }
                },
                TriggerConfig: {
                    type: "structure",
                    required: [ "TriggerType" ],
                    members: {
                        TriggerType: {},
                        TriggerProperties: {
                            type: "structure",
                            members: {
                                Scheduled: {
                                    type: "structure",
                                    required: [ "ScheduleExpression" ],
                                    members: {
                                        ScheduleExpression: {},
                                        DataPullMode: {},
                                        ScheduleStartTime: {
                                            type: "timestamp"
                                        },
                                        ScheduleEndTime: {
                                            type: "timestamp"
                                        },
                                        Timezone: {},
                                        ScheduleOffset: {
                                            type: "long"
                                        },
                                        FirstExecutionFrom: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            sensitive: true
        },
        S39: {
            type: "string",
            sensitive: true
        },
        S3a: {
            type: "string",
            sensitive: true
        },
        S3b: {
            type: "string",
            deprecated: true,
            sensitive: true
        },
        S3c: {
            type: "string",
            deprecated: true,
            sensitive: true
        },
        S3d: {
            type: "structure",
            members: {
                Address1: {},
                Address2: {},
                Address3: {},
                Address4: {},
                City: {},
                County: {},
                State: {},
                Province: {},
                Country: {},
                PostalCode: {}
            },
            sensitive: true
        },
        S3e: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S41: {
            type: "string",
            sensitive: true
        },
        S45: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Source: {},
                    Target: {},
                    ContentType: {}
                }
            },
            sensitive: true
        },
        S49: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {
                    type: "structure",
                    members: {
                        StandardIdentifiers: {
                            type: "list",
                            member: {}
                        },
                        FieldNames: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            sensitive: true
        },
        S4y: {
            type: "structure",
            members: {
                S3Exporting: {
                    type: "structure",
                    members: {
                        S3BucketName: {},
                        S3KeyName: {}
                    }
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                NumberOfProfilesReviewed: {
                    type: "long"
                },
                NumberOfMatchesFound: {
                    type: "long"
                },
                NumberOfMergesDone: {
                    type: "long"
                }
            }
        },
        S54: {
            type: "map",
            key: {},
            value: {}
        },
        S5c: {
            type: "list",
            member: {}
        },
        S60: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DomainName", "Uri", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    Uri: {},
                    ObjectTypeName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sn"
                    },
                    ObjectTypeNames: {
                        shape: "S54"
                    },
                    WorkflowId: {},
                    IsUnstructured: {
                        type: "boolean"
                    }
                }
            }
        },
        S87: {
            type: "string",
            sensitive: true
        },
        S88: {
            type: "structure",
            members: {
                Address1: {},
                Address2: {},
                Address3: {},
                Address4: {},
                City: {},
                County: {},
                State: {},
                Province: {},
                Country: {},
                PostalCode: {}
            },
            sensitive: true
        }
    },
    paginators: {
        ListEventStreams: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["auditmanager"] = {};

AWS.AuditManager = AWS.Service.defineService("auditmanager", [ "2017-07-25" ]);

AWS.apiLoader.services["auditmanager"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "auditmanager",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Audit Manager",
        serviceId: "AuditManager",
        signatureVersion: "v4",
        signingName: "auditmanager",
        uid: "auditmanager-2017-07-25"
    },
    operations: {
        AssociateAssessmentReportEvidenceFolder: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/associateToAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchAssociateAssessmentReportEvidence: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/batchAssociateToAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId", "evidenceIds" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {},
                    evidenceIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceIds: {
                        shape: "S5"
                    },
                    errors: {
                        shape: "S7"
                    }
                }
            }
        },
        BatchCreateDelegationByAssessment: {
            http: {
                requestUri: "/assessments/{assessmentId}/delegations"
            },
            input: {
                type: "structure",
                required: [ "createDelegationRequests", "assessmentId" ],
                members: {
                    createDelegationRequests: {
                        type: "list",
                        member: {
                            shape: "Sd"
                        },
                        sensitive: true
                    },
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    delegations: {
                        shape: "Sj"
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createDelegationRequest: {
                                    shape: "Sd"
                                },
                                errorCode: {},
                                errorMessage: {}
                            }
                        },
                        sensitive: true
                    }
                }
            }
        },
        BatchDeleteDelegationByAssessment: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/delegations"
            },
            input: {
                type: "structure",
                required: [ "delegationIds", "assessmentId" ],
                members: {
                    delegationIds: {
                        type: "list",
                        member: {}
                    },
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                delegationId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        },
                        sensitive: true
                    }
                }
            }
        },
        BatchDisassociateAssessmentReportEvidence: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/batchDisassociateFromAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId", "evidenceIds" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {},
                    evidenceIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceIds: {
                        shape: "S5"
                    },
                    errors: {
                        shape: "S7"
                    }
                }
            }
        },
        BatchImportEvidenceToAssessmentControl: {
            http: {
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}/evidence"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "controlId", "manualEvidence" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    manualEvidence: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                manualEvidence: {
                                    shape: "S10"
                                },
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CreateAssessment: {
            http: {
                requestUri: "/assessments"
            },
            input: {
                type: "structure",
                required: [ "name", "assessmentReportsDestination", "scope", "roles", "frameworkId" ],
                members: {
                    name: {
                        shape: "Sl"
                    },
                    description: {
                        shape: "S18"
                    },
                    assessmentReportsDestination: {
                        shape: "S19"
                    },
                    scope: {
                        shape: "S1b"
                    },
                    roles: {
                        shape: "S1k"
                    },
                    frameworkId: {},
                    tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1q"
                    }
                }
            }
        },
        CreateAssessmentFramework: {
            http: {
                requestUri: "/assessmentFrameworks"
            },
            input: {
                type: "structure",
                required: [ "name", "controlSets" ],
                members: {
                    name: {},
                    description: {},
                    complianceType: {
                        shape: "S1t"
                    },
                    controlSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {},
                                controls: {
                                    shape: "S2l"
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    framework: {
                        shape: "S2o"
                    }
                }
            }
        },
        CreateAssessmentReport: {
            http: {
                requestUri: "/assessments/{assessmentId}/reports"
            },
            input: {
                type: "structure",
                required: [ "name", "assessmentId" ],
                members: {
                    name: {},
                    description: {
                        shape: "S3d"
                    },
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    queryStatement: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentReport: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            description: {
                                shape: "S3d"
                            },
                            awsAccountId: {},
                            assessmentId: {},
                            assessmentName: {
                                shape: "Sl"
                            },
                            author: {
                                shape: "S2b"
                            },
                            status: {},
                            creationTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        CreateControl: {
            http: {
                requestUri: "/controls"
            },
            input: {
                type: "structure",
                required: [ "name", "controlMappingSources" ],
                members: {
                    name: {},
                    description: {},
                    testingInformation: {
                        shape: "S2w"
                    },
                    actionPlanTitle: {
                        shape: "S2x"
                    },
                    actionPlanInstructions: {
                        shape: "S2y"
                    },
                    controlMappingSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                sourceName: {},
                                sourceDescription: {},
                                sourceSetUpOption: {},
                                sourceType: {},
                                sourceKeyword: {
                                    shape: "S35"
                                },
                                sourceFrequency: {},
                                troubleshootingText: {
                                    shape: "S39"
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S2u"
                    }
                }
            }
        },
        DeleteAssessment: {
            http: {
                method: "DELETE",
                requestUri: "/assessments/{assessmentId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAssessmentFramework: {
            http: {
                method: "DELETE",
                requestUri: "/assessmentFrameworks/{frameworkId}"
            },
            input: {
                type: "structure",
                required: [ "frameworkId" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAssessmentFrameworkShare: {
            http: {
                method: "DELETE",
                requestUri: "/assessmentFrameworkShareRequests/{requestId}"
            },
            input: {
                type: "structure",
                required: [ "requestId", "requestType" ],
                members: {
                    requestId: {
                        location: "uri",
                        locationName: "requestId"
                    },
                    requestType: {
                        location: "querystring",
                        locationName: "requestType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAssessmentReport: {
            http: {
                method: "DELETE",
                requestUri: "/assessments/{assessmentId}/reports/{assessmentReportId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "assessmentReportId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    assessmentReportId: {
                        location: "uri",
                        locationName: "assessmentReportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteControl: {
            http: {
                method: "DELETE",
                requestUri: "/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "controlId" ],
                members: {
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterAccount: {
            http: {
                requestUri: "/account/deregisterAccount"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        DeregisterOrganizationAdminAccount: {
            http: {
                requestUri: "/account/deregisterOrganizationAdminAccount"
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateAssessmentReportEvidenceFolder: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/disassociateFromAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccountStatus: {
            http: {
                method: "GET",
                requestUri: "/account/status"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        GetAssessment: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1q"
                    },
                    userRole: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetAssessmentFramework: {
            http: {
                method: "GET",
                requestUri: "/assessmentFrameworks/{frameworkId}"
            },
            input: {
                type: "structure",
                required: [ "frameworkId" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    framework: {
                        shape: "S2o"
                    }
                }
            }
        },
        GetAssessmentReportUrl: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/reports/{assessmentReportId}/url"
            },
            input: {
                type: "structure",
                required: [ "assessmentReportId", "assessmentId" ],
                members: {
                    assessmentReportId: {
                        location: "uri",
                        locationName: "assessmentReportId"
                    },
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    preSignedUrl: {
                        type: "structure",
                        members: {
                            hyperlinkName: {},
                            link: {}
                        }
                    }
                }
            }
        },
        GetChangeLogs: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/changelogs"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "querystring",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "querystring",
                        locationName: "controlId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changeLogs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                objectType: {},
                                objectName: {},
                                action: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                createdBy: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetControl: {
            http: {
                method: "GET",
                requestUri: "/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "controlId" ],
                members: {
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S2u"
                    }
                }
            }
        },
        GetDelegations: {
            http: {
                method: "GET",
                requestUri: "/delegations"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    delegations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                assessmentName: {
                                    shape: "Sl"
                                },
                                assessmentId: {},
                                status: {},
                                roleArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                controlSetName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEvidence: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence/{evidenceId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "evidenceFolderId", "evidenceId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    evidenceFolderId: {
                        location: "uri",
                        locationName: "evidenceFolderId"
                    },
                    evidenceId: {
                        location: "uri",
                        locationName: "evidenceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidence: {
                        shape: "S4v"
                    }
                }
            }
        },
        GetEvidenceByEvidenceFolder: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    evidenceFolderId: {
                        location: "uri",
                        locationName: "evidenceFolderId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidence: {
                        type: "list",
                        member: {
                            shape: "S4v"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEvidenceFileUploadUrl: {
            http: {
                method: "GET",
                requestUri: "/evidenceFileUploadUrl"
            },
            input: {
                type: "structure",
                required: [ "fileName" ],
                members: {
                    fileName: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "fileName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceFileName: {},
                    uploadUrl: {}
                },
                sensitive: true
            }
        },
        GetEvidenceFolder: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    evidenceFolderId: {
                        location: "uri",
                        locationName: "evidenceFolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceFolder: {
                        shape: "S5b"
                    }
                }
            }
        },
        GetEvidenceFoldersByAssessment: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/evidenceFolders"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceFolders: {
                        shape: "S5f"
                    },
                    nextToken: {}
                }
            }
        },
        GetEvidenceFoldersByAssessmentControl: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/evidenceFolders-by-assessment-control/{controlSetId}/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "controlId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceFolders: {
                        shape: "S5f"
                    },
                    nextToken: {}
                }
            }
        },
        GetInsights: {
            http: {
                method: "GET",
                requestUri: "/insights"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    insights: {
                        type: "structure",
                        members: {
                            activeAssessmentsCount: {
                                type: "integer"
                            },
                            noncompliantEvidenceCount: {
                                type: "integer"
                            },
                            compliantEvidenceCount: {
                                type: "integer"
                            },
                            inconclusiveEvidenceCount: {
                                type: "integer"
                            },
                            assessmentControlsCountByNoncompliantEvidence: {
                                type: "integer"
                            },
                            totalAssessmentControlsCount: {
                                type: "integer"
                            },
                            lastUpdated: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetInsightsByAssessment: {
            http: {
                method: "GET",
                requestUri: "/insights/assessments/{assessmentId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    insights: {
                        type: "structure",
                        members: {
                            noncompliantEvidenceCount: {
                                type: "integer"
                            },
                            compliantEvidenceCount: {
                                type: "integer"
                            },
                            inconclusiveEvidenceCount: {
                                type: "integer"
                            },
                            assessmentControlsCountByNoncompliantEvidence: {
                                type: "integer"
                            },
                            totalAssessmentControlsCount: {
                                type: "integer"
                            },
                            lastUpdated: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetOrganizationAdminAccount: {
            http: {
                method: "GET",
                requestUri: "/account/organizationAdminAccount"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    adminAccountId: {},
                    organizationId: {}
                }
            }
        },
        GetServicesInScope: {
            http: {
                method: "GET",
                requestUri: "/services"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    serviceMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                displayName: {},
                                description: {},
                                category: {}
                            }
                        }
                    }
                }
            }
        },
        GetSettings: {
            http: {
                method: "GET",
                requestUri: "/settings/{attribute}"
            },
            input: {
                type: "structure",
                required: [ "attribute" ],
                members: {
                    attribute: {
                        location: "uri",
                        locationName: "attribute"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    settings: {
                        shape: "S5z"
                    }
                }
            }
        },
        ListAssessmentControlInsightsByControlDomain: {
            http: {
                method: "GET",
                requestUri: "/insights/controls-by-assessment"
            },
            input: {
                type: "structure",
                required: [ "controlDomainId", "assessmentId" ],
                members: {
                    controlDomainId: {
                        location: "querystring",
                        locationName: "controlDomainId"
                    },
                    assessmentId: {
                        location: "querystring",
                        locationName: "assessmentId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    controlInsightsByAssessment: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                id: {},
                                evidenceInsights: {
                                    shape: "S6f"
                                },
                                controlSetName: {},
                                lastUpdated: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentFrameworkShareRequests: {
            http: {
                method: "GET",
                requestUri: "/assessmentFrameworkShareRequests"
            },
            input: {
                type: "structure",
                required: [ "requestType" ],
                members: {
                    requestType: {
                        location: "querystring",
                        locationName: "requestType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentFrameworkShareRequests: {
                        type: "list",
                        member: {
                            shape: "S6j"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentFrameworks: {
            http: {
                method: "GET",
                requestUri: "/assessmentFrameworks"
            },
            input: {
                type: "structure",
                required: [ "frameworkType" ],
                members: {
                    frameworkType: {
                        location: "querystring",
                        locationName: "frameworkType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    frameworkMetadataList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                type: {},
                                name: {},
                                description: {},
                                logo: {},
                                complianceType: {
                                    shape: "S1t"
                                },
                                controlsCount: {
                                    type: "integer"
                                },
                                controlSetsCount: {
                                    type: "integer"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentReports: {
            http: {
                method: "GET",
                requestUri: "/assessmentReports"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentReports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                description: {
                                    shape: "S3d"
                                },
                                assessmentId: {},
                                assessmentName: {
                                    shape: "Sl"
                                },
                                author: {
                                    shape: "S2b"
                                },
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessments: {
            http: {
                method: "GET",
                requestUri: "/assessments"
            },
            input: {
                type: "structure",
                members: {
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {
                                    shape: "Sl"
                                },
                                id: {},
                                complianceType: {
                                    shape: "S1t"
                                },
                                status: {},
                                roles: {
                                    shape: "S1k"
                                },
                                delegations: {
                                    shape: "Sj"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdated: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListControlDomainInsights: {
            http: {
                method: "GET",
                requestUri: "/insights/control-domains"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    controlDomainInsights: {
                        shape: "S73"
                    },
                    nextToken: {}
                }
            }
        },
        ListControlDomainInsightsByAssessment: {
            http: {
                method: "GET",
                requestUri: "/insights/control-domains-by-assessment"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "querystring",
                        locationName: "assessmentId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    controlDomainInsights: {
                        shape: "S73"
                    },
                    nextToken: {}
                }
            }
        },
        ListControlInsightsByControlDomain: {
            http: {
                method: "GET",
                requestUri: "/insights/controls"
            },
            input: {
                type: "structure",
                required: [ "controlDomainId" ],
                members: {
                    controlDomainId: {
                        location: "querystring",
                        locationName: "controlDomainId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    controlInsightsMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                id: {},
                                evidenceInsights: {
                                    shape: "S6f"
                                },
                                lastUpdated: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListControls: {
            http: {
                method: "GET",
                requestUri: "/controls"
            },
            input: {
                type: "structure",
                required: [ "controlType" ],
                members: {
                    controlType: {
                        location: "querystring",
                        locationName: "controlType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    controlMetadataList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                controlSources: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKeywordsForDataSource: {
            http: {
                method: "GET",
                requestUri: "/dataSourceKeywords"
            },
            input: {
                type: "structure",
                required: [ "source" ],
                members: {
                    source: {
                        location: "querystring",
                        locationName: "source"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    keywords: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListNotifications: {
            http: {
                method: "GET",
                requestUri: "/notifications"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    notifications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                assessmentId: {},
                                assessmentName: {
                                    shape: "Sl"
                                },
                                controlSetId: {},
                                controlSetName: {},
                                description: {},
                                eventTime: {
                                    type: "timestamp"
                                },
                                source: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1m"
                    }
                }
            }
        },
        RegisterAccount: {
            http: {
                requestUri: "/account/registerAccount"
            },
            input: {
                type: "structure",
                members: {
                    kmsKey: {},
                    delegatedAdminAccount: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        RegisterOrganizationAdminAccount: {
            http: {
                requestUri: "/account/registerOrganizationAdminAccount"
            },
            input: {
                type: "structure",
                required: [ "adminAccountId" ],
                members: {
                    adminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    adminAccountId: {},
                    organizationId: {}
                }
            }
        },
        StartAssessmentFrameworkShare: {
            http: {
                requestUri: "/assessmentFrameworks/{frameworkId}/shareRequests"
            },
            input: {
                type: "structure",
                required: [ "frameworkId", "destinationAccount", "destinationRegion" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    },
                    destinationAccount: {},
                    destinationRegion: {},
                    comment: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentFrameworkShareRequest: {
                        shape: "S6j"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAssessment: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "scope" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    assessmentName: {
                        shape: "Sl"
                    },
                    assessmentDescription: {
                        shape: "S18"
                    },
                    scope: {
                        shape: "S1b"
                    },
                    assessmentReportsDestination: {
                        shape: "S19"
                    },
                    roles: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateAssessmentControl: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "controlId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    controlStatus: {},
                    commentBody: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S24"
                    }
                }
            }
        },
        UpdateAssessmentControlSetStatus: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/status"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "status", "comment" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    status: {},
                    comment: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    controlSet: {
                        shape: "S20"
                    }
                }
            }
        },
        UpdateAssessmentFramework: {
            http: {
                method: "PUT",
                requestUri: "/assessmentFrameworks/{frameworkId}"
            },
            input: {
                type: "structure",
                required: [ "frameworkId", "name", "controlSets" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    },
                    name: {},
                    description: {},
                    complianceType: {
                        shape: "S1t"
                    },
                    controlSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "controls" ],
                            members: {
                                id: {},
                                name: {},
                                controls: {
                                    shape: "S2l"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    framework: {
                        shape: "S2o"
                    }
                }
            }
        },
        UpdateAssessmentFrameworkShare: {
            http: {
                method: "PUT",
                requestUri: "/assessmentFrameworkShareRequests/{requestId}"
            },
            input: {
                type: "structure",
                required: [ "requestId", "requestType", "action" ],
                members: {
                    requestId: {
                        location: "uri",
                        locationName: "requestId"
                    },
                    requestType: {},
                    action: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentFrameworkShareRequest: {
                        shape: "S6j"
                    }
                }
            }
        },
        UpdateAssessmentStatus: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/status"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "status" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateControl: {
            http: {
                method: "PUT",
                requestUri: "/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "controlId", "name", "controlMappingSources" ],
                members: {
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    name: {},
                    description: {},
                    testingInformation: {
                        shape: "S2w"
                    },
                    actionPlanTitle: {
                        shape: "S2x"
                    },
                    actionPlanInstructions: {
                        shape: "S2y"
                    },
                    controlMappingSources: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S2u"
                    }
                }
            }
        },
        UpdateSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings"
            },
            input: {
                type: "structure",
                members: {
                    snsTopic: {},
                    defaultAssessmentReportsDestination: {
                        shape: "S19"
                    },
                    defaultProcessOwners: {
                        shape: "S1k"
                    },
                    kmsKey: {},
                    evidenceFinderEnabled: {
                        type: "boolean"
                    },
                    deregistrationPolicy: {
                        shape: "S67"
                    },
                    defaultExportDestination: {
                        shape: "S69"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    settings: {
                        shape: "S5z"
                    }
                }
            }
        },
        ValidateAssessmentReportIntegrity: {
            http: {
                requestUri: "/assessmentReports/integrity"
            },
            input: {
                type: "structure",
                required: [ "s3RelativePath" ],
                members: {
                    s3RelativePath: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    signatureValid: {
                        type: "boolean"
                    },
                    signatureAlgorithm: {},
                    signatureDateTime: {},
                    signatureKeyId: {},
                    validationErrors: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    evidenceId: {},
                    errorCode: {},
                    errorMessage: {}
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                comment: {
                    shape: "Se"
                },
                controlSetId: {},
                roleArn: {},
                roleType: {}
            }
        },
        Se: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    assessmentName: {
                        shape: "Sl"
                    },
                    assessmentId: {},
                    status: {},
                    roleArn: {},
                    roleType: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdated: {
                        type: "timestamp"
                    },
                    controlSetId: {},
                    comment: {
                        shape: "Se"
                    },
                    createdBy: {
                        shape: "So"
                    }
                },
                sensitive: true
            }
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "structure",
            members: {
                s3ResourcePath: {},
                textResponse: {
                    type: "string",
                    sensitive: true
                },
                evidenceFileName: {
                    shape: "S13"
                }
            }
        },
        S13: {
            type: "string",
            sensitive: true
        },
        S18: {
            type: "string",
            sensitive: true
        },
        S19: {
            type: "structure",
            members: {
                destinationType: {},
                destination: {}
            },
            sensitive: true
        },
        S1b: {
            type: "structure",
            members: {
                awsAccounts: {
                    type: "list",
                    member: {
                        shape: "S1d"
                    },
                    sensitive: true
                },
                awsServices: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            serviceName: {}
                        }
                    }
                }
            },
            sensitive: true
        },
        S1d: {
            type: "structure",
            members: {
                id: {},
                emailAddress: {
                    type: "string",
                    sensitive: true
                },
                name: {}
            }
        },
        S1k: {
            type: "list",
            member: {
                shape: "S1l"
            },
            sensitive: true
        },
        S1l: {
            type: "structure",
            required: [ "roleType", "roleArn" ],
            members: {
                roleType: {},
                roleArn: {}
            }
        },
        S1m: {
            type: "map",
            key: {},
            value: {}
        },
        S1q: {
            type: "structure",
            members: {
                arn: {},
                awsAccount: {
                    shape: "S1d"
                },
                metadata: {
                    type: "structure",
                    members: {
                        name: {
                            shape: "Sl"
                        },
                        id: {},
                        description: {
                            shape: "S18"
                        },
                        complianceType: {
                            shape: "S1t"
                        },
                        status: {},
                        assessmentReportsDestination: {
                            shape: "S19"
                        },
                        scope: {
                            shape: "S1b"
                        },
                        roles: {
                            shape: "S1k"
                        },
                        delegations: {
                            shape: "Sj"
                        },
                        creationTime: {
                            type: "timestamp"
                        },
                        lastUpdated: {
                            type: "timestamp"
                        }
                    }
                },
                framework: {
                    type: "structure",
                    members: {
                        id: {},
                        arn: {},
                        metadata: {
                            type: "structure",
                            members: {
                                name: {
                                    shape: "Sl"
                                },
                                description: {},
                                logo: {},
                                complianceType: {
                                    shape: "S1t"
                                }
                            }
                        },
                        controlSets: {
                            type: "list",
                            member: {
                                shape: "S20"
                            }
                        }
                    },
                    sensitive: true
                },
                tags: {
                    shape: "S1m"
                }
            }
        },
        S1t: {
            type: "string",
            sensitive: true
        },
        S20: {
            type: "structure",
            members: {
                id: {},
                description: {},
                status: {},
                roles: {
                    shape: "S1k"
                },
                controls: {
                    type: "list",
                    member: {
                        shape: "S24"
                    }
                },
                delegations: {
                    shape: "Sj"
                },
                systemEvidenceCount: {
                    type: "integer"
                },
                manualEvidenceCount: {
                    type: "integer"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                id: {},
                name: {},
                description: {},
                status: {},
                response: {},
                comments: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            authorName: {
                                shape: "S2b"
                            },
                            commentBody: {
                                shape: "S2c"
                            },
                            postedDate: {
                                type: "timestamp"
                            }
                        }
                    }
                },
                evidenceSources: {
                    type: "list",
                    member: {}
                },
                evidenceCount: {
                    type: "integer"
                },
                assessmentReportEvidenceCount: {
                    type: "integer"
                }
            }
        },
        S2b: {
            type: "string",
            sensitive: true
        },
        S2c: {
            type: "string",
            sensitive: true
        },
        S2l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                arn: {},
                id: {},
                name: {},
                type: {},
                complianceType: {
                    shape: "S1t"
                },
                description: {},
                logo: {},
                controlSources: {},
                controlSets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            controls: {
                                type: "list",
                                member: {
                                    shape: "S2u"
                                }
                            }
                        }
                    },
                    sensitive: true
                },
                createdAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                createdBy: {
                    shape: "So"
                },
                lastUpdatedBy: {
                    shape: "S3a"
                },
                tags: {
                    shape: "S1m"
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                arn: {},
                id: {},
                type: {},
                name: {},
                description: {},
                testingInformation: {
                    shape: "S2w"
                },
                actionPlanTitle: {
                    shape: "S2x"
                },
                actionPlanInstructions: {
                    shape: "S2y"
                },
                controlSources: {},
                controlMappingSources: {
                    shape: "S2z"
                },
                createdAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                createdBy: {
                    shape: "So"
                },
                lastUpdatedBy: {
                    shape: "S3a"
                },
                tags: {
                    shape: "S1m"
                }
            }
        },
        S2w: {
            type: "string",
            sensitive: true
        },
        S2x: {
            type: "string",
            sensitive: true
        },
        S2y: {
            type: "string",
            sensitive: true
        },
        S2z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    sourceId: {},
                    sourceName: {},
                    sourceDescription: {},
                    sourceSetUpOption: {},
                    sourceType: {},
                    sourceKeyword: {
                        shape: "S35"
                    },
                    sourceFrequency: {},
                    troubleshootingText: {
                        shape: "S39"
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                keywordInputType: {},
                keywordValue: {}
            }
        },
        S39: {
            type: "string",
            sensitive: true
        },
        S3a: {
            type: "string",
            sensitive: true
        },
        S3d: {
            type: "string",
            sensitive: true
        },
        S4v: {
            type: "structure",
            members: {
                dataSource: {},
                evidenceAwsAccountId: {},
                time: {
                    type: "timestamp"
                },
                eventSource: {},
                eventName: {},
                evidenceByType: {},
                resourcesIncluded: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            arn: {},
                            value: {},
                            complianceCheck: {}
                        }
                    }
                },
                attributes: {
                    type: "map",
                    key: {},
                    value: {}
                },
                iamId: {},
                complianceCheck: {},
                awsOrganization: {},
                awsAccountId: {},
                evidenceFolderId: {},
                id: {},
                assessmentReportSelection: {}
            }
        },
        S5b: {
            type: "structure",
            members: {
                name: {},
                date: {
                    type: "timestamp"
                },
                assessmentId: {},
                controlSetId: {},
                controlId: {},
                id: {},
                dataSource: {},
                author: {},
                totalEvidence: {
                    type: "integer"
                },
                assessmentReportSelectionCount: {
                    type: "integer"
                },
                controlName: {},
                evidenceResourcesIncludedCount: {
                    type: "integer"
                },
                evidenceByTypeConfigurationDataCount: {
                    type: "integer"
                },
                evidenceByTypeManualCount: {
                    type: "integer"
                },
                evidenceByTypeComplianceCheckCount: {
                    type: "integer"
                },
                evidenceByTypeComplianceCheckIssuesCount: {
                    type: "integer"
                },
                evidenceByTypeUserActivityCount: {
                    type: "integer"
                },
                evidenceAwsServiceSourceCount: {
                    type: "integer"
                }
            }
        },
        S5f: {
            type: "list",
            member: {
                shape: "S5b"
            }
        },
        S5z: {
            type: "structure",
            members: {
                isAwsOrgEnabled: {
                    type: "boolean"
                },
                snsTopic: {
                    type: "string",
                    sensitive: true
                },
                defaultAssessmentReportsDestination: {
                    shape: "S19"
                },
                defaultProcessOwners: {
                    shape: "S1k"
                },
                kmsKey: {},
                evidenceFinderEnablement: {
                    type: "structure",
                    members: {
                        eventDataStoreArn: {},
                        enablementStatus: {},
                        backfillStatus: {},
                        error: {}
                    }
                },
                deregistrationPolicy: {
                    shape: "S67"
                },
                defaultExportDestination: {
                    shape: "S69"
                }
            }
        },
        S67: {
            type: "structure",
            members: {
                deleteResources: {}
            }
        },
        S69: {
            type: "structure",
            members: {
                destinationType: {},
                destination: {}
            }
        },
        S6f: {
            type: "structure",
            members: {
                noncompliantEvidenceCount: {
                    type: "integer"
                },
                compliantEvidenceCount: {
                    type: "integer"
                },
                inconclusiveEvidenceCount: {
                    type: "integer"
                }
            }
        },
        S6j: {
            type: "structure",
            members: {
                id: {},
                frameworkId: {},
                frameworkName: {},
                frameworkDescription: {},
                status: {},
                sourceAccount: {},
                destinationAccount: {},
                destinationRegion: {},
                expirationTime: {
                    type: "timestamp"
                },
                creationTime: {
                    type: "timestamp"
                },
                lastUpdated: {
                    type: "timestamp"
                },
                comment: {},
                standardControlsCount: {
                    type: "integer"
                },
                customControlsCount: {
                    type: "integer"
                },
                complianceType: {
                    shape: "S1t"
                }
            }
        },
        S73: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    id: {},
                    controlsCountByNoncompliantEvidence: {
                        type: "integer"
                    },
                    totalControlsCount: {
                        type: "integer"
                    },
                    evidenceInsights: {
                        shape: "S6f"
                    },
                    lastUpdated: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    paginators: {
        GetChangeLogs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetDelegations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEvidenceByEvidenceFolder: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEvidenceFoldersByAssessment: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEvidenceFoldersByAssessmentControl: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentControlInsightsByControlDomain: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentFrameworkShareRequests: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentFrameworks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentReports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListControlDomainInsights: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListControlDomainInsightsByAssessment: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListControlInsightsByControlDomain: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListControls: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListKeywordsForDataSource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListNotifications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["emrcontainers"] = {};

AWS.EMRcontainers = AWS.Service.defineService("emrcontainers", [ "2020-10-01" ]);

AWS.apiLoader.services["emrcontainers"]["2020-10-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-01",
        endpointPrefix: "emr-containers",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon EMR Containers",
        serviceId: "EMR containers",
        signatureVersion: "v4",
        signingName: "emr-containers",
        uid: "emr-containers-2020-10-01"
    },
    operations: {
        CancelJobRun: {
            http: {
                method: "DELETE",
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns/{jobRunId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "jobRunId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    virtualClusterId: {}
                }
            }
        },
        CreateJobTemplate: {
            http: {
                requestUri: "/jobtemplates"
            },
            input: {
                type: "structure",
                required: [ "name", "clientToken", "jobTemplateData" ],
                members: {
                    name: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    jobTemplateData: {
                        shape: "S7"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    kmsKeyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    createdAt: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateManagedEndpoint: {
            http: {
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints"
            },
            input: {
                type: "structure",
                required: [ "name", "virtualClusterId", "type", "releaseLabel", "executionRoleArn", "clientToken" ],
                members: {
                    name: {},
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    type: {},
                    releaseLabel: {},
                    executionRoleArn: {},
                    certificateArn: {
                        deprecated: true,
                        deprecatedMessage: "Customer provided certificate-arn is deprecated and would be removed in future."
                    },
                    configurationOverrides: {
                        shape: "S19"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    virtualClusterId: {}
                }
            }
        },
        CreateVirtualCluster: {
            http: {
                requestUri: "/virtualclusters"
            },
            input: {
                type: "structure",
                required: [ "name", "containerProvider", "clientToken" ],
                members: {
                    name: {},
                    containerProvider: {
                        shape: "S1l"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    arn: {}
                }
            }
        },
        DeleteJobTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/jobtemplates/{templateId}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        DeleteManagedEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints/{endpointId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "endpointId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    virtualClusterId: {}
                }
            }
        },
        DeleteVirtualCluster: {
            http: {
                method: "DELETE",
                requestUri: "/virtualclusters/{virtualClusterId}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        DescribeJobRun: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns/{jobRunId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "jobRunId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobRun: {
                        shape: "S21"
                    }
                }
            }
        },
        DescribeJobTemplate: {
            http: {
                method: "GET",
                requestUri: "/jobtemplates/{templateId}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobTemplate: {
                        shape: "S2b"
                    }
                }
            }
        },
        DescribeManagedEndpoint: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints/{endpointId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "endpointId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "S2f"
                    }
                }
            }
        },
        DescribeVirtualCluster: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualCluster: {
                        shape: "S2m"
                    }
                }
            }
        },
        GetManagedEndpointSessionCredentials: {
            http: {
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints/{endpointId}/credentials"
            },
            input: {
                type: "structure",
                required: [ "executionRoleArn", "credentialType", "endpointIdentifier", "virtualClusterIdentifier" ],
                members: {
                    endpointIdentifier: {
                        location: "uri",
                        locationName: "endpointId"
                    },
                    virtualClusterIdentifier: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    executionRoleArn: {},
                    credentialType: {},
                    durationInSeconds: {
                        type: "integer"
                    },
                    logContext: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    credentials: {
                        type: "structure",
                        members: {
                            token: {
                                type: "string",
                                sensitive: true
                            }
                        },
                        union: true
                    },
                    expiresAt: {
                        shape: "S13"
                    }
                }
            }
        },
        ListJobRuns: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns"
            },
            input: {
                type: "structure",
                required: [ "virtualClusterId" ],
                members: {
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    createdBefore: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdBefore"
                    },
                    createdAfter: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdAfter"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobRuns: {
                        type: "list",
                        member: {
                            shape: "S21"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobTemplates: {
            http: {
                method: "GET",
                requestUri: "/jobtemplates"
            },
            input: {
                type: "structure",
                members: {
                    createdAfter: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdAfter"
                    },
                    createdBefore: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdBefore"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templates: {
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListManagedEndpoints: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints"
            },
            input: {
                type: "structure",
                required: [ "virtualClusterId" ],
                members: {
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    createdBefore: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdBefore"
                    },
                    createdAfter: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdAfter"
                    },
                    types: {
                        location: "querystring",
                        locationName: "types",
                        type: "list",
                        member: {}
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoints: {
                        type: "list",
                        member: {
                            shape: "S2f"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        ListVirtualClusters: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters"
            },
            input: {
                type: "structure",
                members: {
                    containerProviderId: {
                        location: "querystring",
                        locationName: "containerProviderId"
                    },
                    containerProviderType: {
                        location: "querystring",
                        locationName: "containerProviderType"
                    },
                    createdAfter: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdAfter"
                    },
                    createdBefore: {
                        shape: "S13",
                        location: "querystring",
                        locationName: "createdBefore"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualClusters: {
                        type: "list",
                        member: {
                            shape: "S2m"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartJobRun: {
            http: {
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns"
            },
            input: {
                type: "structure",
                required: [ "virtualClusterId", "clientToken" ],
                members: {
                    name: {},
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    executionRoleArn: {},
                    releaseLabel: {},
                    jobDriver: {
                        shape: "Sl"
                    },
                    configurationOverrides: {
                        shape: "S19"
                    },
                    tags: {
                        shape: "Sx"
                    },
                    jobTemplateId: {},
                    jobTemplateParameters: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    retryPolicyConfiguration: {
                        shape: "S26"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    virtualClusterId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "executionRoleArn", "releaseLabel", "jobDriver" ],
            members: {
                executionRoleArn: {},
                releaseLabel: {},
                configurationOverrides: {
                    type: "structure",
                    members: {
                        applicationConfiguration: {
                            shape: "Sb"
                        },
                        monitoringConfiguration: {
                            type: "structure",
                            members: {
                                persistentAppUI: {},
                                cloudWatchMonitoringConfiguration: {
                                    type: "structure",
                                    members: {
                                        logGroupName: {},
                                        logStreamNamePrefix: {}
                                    }
                                },
                                s3MonitoringConfiguration: {
                                    type: "structure",
                                    members: {
                                        logUri: {}
                                    }
                                }
                            }
                        }
                    }
                },
                jobDriver: {
                    shape: "Sl"
                },
                parameterConfiguration: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            type: {},
                            defaultValue: {}
                        }
                    }
                },
                jobTags: {
                    shape: "Sx"
                }
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "classification" ],
                members: {
                    classification: {},
                    properties: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    configurations: {
                        shape: "Sb"
                    }
                }
            }
        },
        Sl: {
            type: "structure",
            members: {
                sparkSubmitJobDriver: {
                    type: "structure",
                    required: [ "entryPoint" ],
                    members: {
                        entryPoint: {
                            shape: "Sn"
                        },
                        entryPointArguments: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        },
                        sparkSubmitParameters: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                sparkSqlJobDriver: {
                    type: "structure",
                    members: {
                        entryPoint: {
                            shape: "Sn"
                        },
                        sparkSqlParameters: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        Sx: {
            type: "map",
            key: {},
            value: {}
        },
        S13: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S19: {
            type: "structure",
            members: {
                applicationConfiguration: {
                    shape: "Sb"
                },
                monitoringConfiguration: {
                    type: "structure",
                    members: {
                        persistentAppUI: {},
                        cloudWatchMonitoringConfiguration: {
                            type: "structure",
                            required: [ "logGroupName" ],
                            members: {
                                logGroupName: {},
                                logStreamNamePrefix: {}
                            }
                        },
                        s3MonitoringConfiguration: {
                            type: "structure",
                            required: [ "logUri" ],
                            members: {
                                logUri: {}
                            }
                        },
                        containerLogRotationConfiguration: {
                            type: "structure",
                            required: [ "rotationSize", "maxFilesToKeep" ],
                            members: {
                                rotationSize: {},
                                maxFilesToKeep: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            required: [ "type", "id" ],
            members: {
                type: {},
                id: {},
                info: {
                    type: "structure",
                    members: {
                        eksInfo: {
                            type: "structure",
                            members: {
                                namespace: {}
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                id: {},
                name: {},
                virtualClusterId: {},
                arn: {},
                state: {},
                clientToken: {},
                executionRoleArn: {},
                releaseLabel: {},
                configurationOverrides: {
                    shape: "S19"
                },
                jobDriver: {
                    shape: "Sl"
                },
                createdAt: {
                    shape: "S13"
                },
                createdBy: {},
                finishedAt: {
                    shape: "S13"
                },
                stateDetails: {},
                failureReason: {},
                tags: {
                    shape: "Sx"
                },
                retryPolicyConfiguration: {
                    shape: "S26"
                },
                retryPolicyExecution: {
                    type: "structure",
                    required: [ "currentAttemptCount" ],
                    members: {
                        currentAttemptCount: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S26: {
            type: "structure",
            required: [ "maxAttempts" ],
            members: {
                maxAttempts: {
                    type: "integer"
                }
            }
        },
        S2b: {
            type: "structure",
            required: [ "jobTemplateData" ],
            members: {
                name: {},
                id: {},
                arn: {},
                createdAt: {
                    shape: "S13"
                },
                createdBy: {},
                tags: {
                    shape: "Sx"
                },
                jobTemplateData: {
                    shape: "S7"
                },
                kmsKeyArn: {},
                decryptionError: {}
            }
        },
        S2f: {
            type: "structure",
            members: {
                id: {},
                name: {},
                arn: {},
                virtualClusterId: {},
                type: {},
                state: {},
                releaseLabel: {},
                executionRoleArn: {},
                certificateArn: {
                    deprecated: true,
                    deprecatedMessage: "Customer provided certificate-arn is deprecated and would be removed in future."
                },
                certificateAuthority: {
                    type: "structure",
                    members: {
                        certificateArn: {},
                        certificateData: {}
                    }
                },
                configurationOverrides: {
                    shape: "S19"
                },
                serverUrl: {},
                createdAt: {
                    shape: "S13"
                },
                securityGroup: {},
                subnetIds: {
                    type: "list",
                    member: {}
                },
                stateDetails: {},
                failureReason: {},
                tags: {
                    shape: "Sx"
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                id: {},
                name: {},
                arn: {},
                state: {},
                containerProvider: {
                    shape: "S1l"
                },
                createdAt: {
                    shape: "S13"
                },
                tags: {
                    shape: "Sx"
                }
            }
        }
    },
    paginators: {
        ListJobRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobRuns"
        },
        ListJobTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templates"
        },
        ListManagedEndpoints: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "endpoints"
        },
        ListVirtualClusters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "virtualClusters"
        }
    }
};

AWS.apiLoader.services["healthlake"] = {};

AWS.HealthLake = AWS.Service.defineService("healthlake", [ "2017-07-01" ]);

AWS.apiLoader.services["healthlake"]["2017-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-01",
        endpointPrefix: "healthlake",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "HealthLake",
        serviceFullName: "Amazon HealthLake",
        serviceId: "HealthLake",
        signatureVersion: "v4",
        signingName: "healthlake",
        targetPrefix: "HealthLake",
        uid: "healthlake-2017-07-01"
    },
    operations: {
        CreateFHIRDatastore: {
            input: {
                type: "structure",
                required: [ "DatastoreTypeVersion" ],
                members: {
                    DatastoreName: {},
                    DatastoreTypeVersion: {},
                    SseConfiguration: {
                        shape: "S4"
                    },
                    PreloadDataConfig: {
                        shape: "S8"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    IdentityProviderConfiguration: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DatastoreId", "DatastoreArn", "DatastoreStatus", "DatastoreEndpoint" ],
                members: {
                    DatastoreId: {},
                    DatastoreArn: {},
                    DatastoreStatus: {},
                    DatastoreEndpoint: {}
                }
            }
        },
        DeleteFHIRDatastore: {
            input: {
                type: "structure",
                required: [ "DatastoreId" ],
                members: {
                    DatastoreId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DatastoreId", "DatastoreArn", "DatastoreStatus", "DatastoreEndpoint" ],
                members: {
                    DatastoreId: {},
                    DatastoreArn: {},
                    DatastoreStatus: {},
                    DatastoreEndpoint: {}
                }
            }
        },
        DescribeFHIRDatastore: {
            input: {
                type: "structure",
                required: [ "DatastoreId" ],
                members: {
                    DatastoreId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DatastoreProperties" ],
                members: {
                    DatastoreProperties: {
                        shape: "St"
                    }
                }
            }
        },
        DescribeFHIRExportJob: {
            input: {
                type: "structure",
                required: [ "DatastoreId", "JobId" ],
                members: {
                    DatastoreId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ExportJobProperties" ],
                members: {
                    ExportJobProperties: {
                        shape: "Sz"
                    }
                }
            }
        },
        DescribeFHIRImportJob: {
            input: {
                type: "structure",
                required: [ "DatastoreId", "JobId" ],
                members: {
                    DatastoreId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ImportJobProperties" ],
                members: {
                    ImportJobProperties: {
                        shape: "S19"
                    }
                }
            }
        },
        ListFHIRDatastores: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            DatastoreName: {},
                            DatastoreStatus: {},
                            CreatedBefore: {
                                type: "timestamp"
                            },
                            CreatedAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DatastorePropertiesList" ],
                members: {
                    DatastorePropertiesList: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFHIRExportJobs: {
            input: {
                type: "structure",
                required: [ "DatastoreId" ],
                members: {
                    DatastoreId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    JobName: {},
                    JobStatus: {},
                    SubmittedBefore: {
                        type: "timestamp"
                    },
                    SubmittedAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ExportJobPropertiesList" ],
                members: {
                    ExportJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFHIRImportJobs: {
            input: {
                type: "structure",
                required: [ "DatastoreId" ],
                members: {
                    DatastoreId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    JobName: {},
                    JobStatus: {},
                    SubmittedBefore: {
                        type: "timestamp"
                    },
                    SubmittedAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ImportJobPropertiesList" ],
                members: {
                    ImportJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S19"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        StartFHIRExportJob: {
            input: {
                type: "structure",
                required: [ "OutputDataConfig", "DatastoreId", "DataAccessRoleArn", "ClientToken" ],
                members: {
                    JobName: {},
                    OutputDataConfig: {
                        shape: "S12"
                    },
                    DatastoreId: {},
                    DataAccessRoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "JobStatus" ],
                members: {
                    JobId: {},
                    JobStatus: {},
                    DatastoreId: {}
                }
            }
        },
        StartFHIRImportJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "JobOutputDataConfig", "DatastoreId", "DataAccessRoleArn", "ClientToken" ],
                members: {
                    JobName: {},
                    InputDataConfig: {
                        shape: "S1a"
                    },
                    JobOutputDataConfig: {
                        shape: "S12"
                    },
                    DatastoreId: {},
                    DataAccessRoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "JobStatus" ],
                members: {
                    JobId: {},
                    JobStatus: {},
                    DatastoreId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "KmsEncryptionConfig" ],
            members: {
                KmsEncryptionConfig: {
                    type: "structure",
                    required: [ "CmkType" ],
                    members: {
                        CmkType: {},
                        KmsKeyId: {}
                    }
                }
            }
        },
        S8: {
            type: "structure",
            required: [ "PreloadDataType" ],
            members: {
                PreloadDataType: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "AuthorizationStrategy" ],
            members: {
                AuthorizationStrategy: {},
                FineGrainedAuthorizationEnabled: {
                    type: "boolean"
                },
                Metadata: {},
                IdpLambdaArn: {}
            }
        },
        St: {
            type: "structure",
            required: [ "DatastoreId", "DatastoreArn", "DatastoreStatus", "DatastoreTypeVersion", "DatastoreEndpoint" ],
            members: {
                DatastoreId: {},
                DatastoreArn: {},
                DatastoreName: {},
                DatastoreStatus: {},
                CreatedAt: {
                    type: "timestamp"
                },
                DatastoreTypeVersion: {},
                DatastoreEndpoint: {},
                SseConfiguration: {
                    shape: "S4"
                },
                PreloadDataConfig: {
                    shape: "S8"
                },
                IdentityProviderConfiguration: {
                    shape: "Sf"
                }
            }
        },
        Sz: {
            type: "structure",
            required: [ "JobId", "JobStatus", "SubmitTime", "DatastoreId", "OutputDataConfig" ],
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                DatastoreId: {},
                OutputDataConfig: {
                    shape: "S12"
                },
                DataAccessRoleArn: {},
                Message: {}
            }
        },
        S12: {
            type: "structure",
            members: {
                S3Configuration: {
                    type: "structure",
                    required: [ "S3Uri", "KmsKeyId" ],
                    members: {
                        S3Uri: {},
                        KmsKeyId: {}
                    }
                }
            },
            union: true
        },
        S19: {
            type: "structure",
            required: [ "JobId", "JobStatus", "SubmitTime", "DatastoreId", "InputDataConfig" ],
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                DatastoreId: {},
                InputDataConfig: {
                    shape: "S1a"
                },
                JobOutputDataConfig: {
                    shape: "S12"
                },
                DataAccessRoleArn: {},
                Message: {}
            }
        },
        S1a: {
            type: "structure",
            members: {
                S3Uri: {}
            },
            union: true
        }
    },
    paginators: {
        ListFHIRDatastores: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFHIRExportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFHIRImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["sagemakeredge"] = {};

AWS.SagemakerEdge = AWS.Service.defineService("sagemakeredge", [ "2020-09-23" ]);

AWS.apiLoader.services["sagemakeredge"]["2020-09-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-09-23",
        endpointPrefix: "edge.sagemaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Sagemaker Edge Manager",
        serviceId: "Sagemaker Edge",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "sagemaker-edge-2020-09-23"
    },
    operations: {
        GetDeployments: {
            http: {
                requestUri: "/GetDeployments"
            },
            input: {
                type: "structure",
                required: [ "DeviceName", "DeviceFleetName" ],
                members: {
                    DeviceName: {},
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeploymentName: {},
                                Type: {},
                                FailureHandlingPolicy: {},
                                Definitions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ModelHandle: {},
                                            S3Url: {},
                                            Checksum: {
                                                type: "structure",
                                                members: {
                                                    Type: {},
                                                    Sum: {}
                                                }
                                            },
                                            State: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDeviceRegistration: {
            http: {
                requestUri: "/GetDeviceRegistration"
            },
            input: {
                type: "structure",
                required: [ "DeviceName", "DeviceFleetName" ],
                members: {
                    DeviceName: {},
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceRegistration: {},
                    CacheTTL: {}
                }
            }
        },
        SendHeartbeat: {
            http: {
                requestUri: "/SendHeartbeat"
            },
            input: {
                type: "structure",
                required: [ "AgentVersion", "DeviceName", "DeviceFleetName" ],
                members: {
                    AgentMetrics: {
                        shape: "Sm"
                    },
                    Models: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelVersion: {},
                                LatestSampleTime: {
                                    type: "timestamp"
                                },
                                LatestInference: {
                                    type: "timestamp"
                                },
                                ModelMetrics: {
                                    shape: "Sm"
                                }
                            }
                        }
                    },
                    AgentVersion: {},
                    DeviceName: {},
                    DeviceFleetName: {},
                    DeploymentResult: {
                        type: "structure",
                        members: {
                            DeploymentName: {},
                            DeploymentStatus: {},
                            DeploymentStatusMessage: {},
                            DeploymentStartTime: {
                                type: "timestamp"
                            },
                            DeploymentEndTime: {
                                type: "timestamp"
                            },
                            DeploymentModels: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ModelHandle: {},
                                        ModelName: {},
                                        ModelVersion: {},
                                        DesiredState: {},
                                        State: {},
                                        Status: {},
                                        StatusReason: {},
                                        RollbackFailureReason: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Sm: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Dimension: {},
                    MetricName: {},
                    Value: {
                        type: "double"
                    },
                    Timestamp: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["amp"] = {};

AWS.Amp = AWS.Service.defineService("amp", [ "2020-08-01" ]);

AWS.apiLoader.services["amp"]["2020-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-01",
        endpointPrefix: "aps",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Prometheus Service",
        serviceId: "amp",
        signatureVersion: "v4",
        signingName: "aps",
        uid: "amp-2020-08-01"
    },
    operations: {
        CreateAlertManagerDefinition: {
            http: {
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "data" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    data: {
                        type: "blob"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        CreateLoggingConfiguration: {
            http: {
                requestUri: "/workspaces/{workspaceId}/logging",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "logGroupArn" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    logGroupArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        CreateRuleGroupsNamespace: {
            http: {
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "name", "data" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    name: {},
                    data: {
                        type: "blob"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "status" ],
                members: {
                    name: {},
                    arn: {},
                    status: {
                        shape: "Sm"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            idempotent: true
        },
        CreateScraper: {
            http: {
                requestUri: "/scrapers",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "scrapeConfiguration", "source", "destination" ],
                members: {
                    alias: {},
                    scrapeConfiguration: {
                        shape: "Sq"
                    },
                    source: {
                        shape: "Ss"
                    },
                    destination: {
                        shape: "Sz"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "scraperId", "arn", "status" ],
                members: {
                    scraperId: {},
                    arn: {},
                    status: {
                        shape: "S15"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            idempotent: true
        },
        CreateWorkspace: {
            http: {
                requestUri: "/workspaces",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    alias: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaceId", "arn", "status" ],
                members: {
                    workspaceId: {},
                    arn: {},
                    status: {
                        shape: "S1a"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            idempotent: true
        },
        DeleteAlertManagerDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            idempotent: true
        },
        DeleteLoggingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/logging",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            idempotent: true
        },
        DeleteRuleGroupsNamespace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "name" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            idempotent: true
        },
        DeleteScraper: {
            http: {
                method: "DELETE",
                requestUri: "/scrapers/{scraperId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "scraperId" ],
                members: {
                    scraperId: {
                        location: "uri",
                        locationName: "scraperId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "scraperId", "status" ],
                members: {
                    scraperId: {},
                    status: {
                        shape: "S15"
                    }
                }
            },
            idempotent: true
        },
        DeleteWorkspace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            idempotent: true
        },
        DescribeAlertManagerDefinition: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "alertManagerDefinition" ],
                members: {
                    alertManagerDefinition: {
                        type: "structure",
                        required: [ "status", "data", "createdAt", "modifiedAt" ],
                        members: {
                            status: {
                                shape: "S6"
                            },
                            data: {
                                type: "blob"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            modifiedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/logging",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "loggingConfiguration" ],
                members: {
                    loggingConfiguration: {
                        type: "structure",
                        required: [ "status", "workspace", "logGroupArn", "createdAt", "modifiedAt" ],
                        members: {
                            status: {
                                shape: "Sc"
                            },
                            workspace: {},
                            logGroupArn: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            modifiedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeRuleGroupsNamespace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "name" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ruleGroupsNamespace" ],
                members: {
                    ruleGroupsNamespace: {
                        type: "structure",
                        required: [ "arn", "name", "status", "data", "createdAt", "modifiedAt" ],
                        members: {
                            arn: {},
                            name: {},
                            status: {
                                shape: "Sm"
                            },
                            data: {
                                type: "blob"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            modifiedAt: {
                                type: "timestamp"
                            },
                            tags: {
                                shape: "Sh"
                            }
                        }
                    }
                }
            }
        },
        DescribeScraper: {
            http: {
                method: "GET",
                requestUri: "/scrapers/{scraperId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "scraperId" ],
                members: {
                    scraperId: {
                        location: "uri",
                        locationName: "scraperId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "scraper" ],
                members: {
                    scraper: {
                        type: "structure",
                        required: [ "scraperId", "arn", "roleArn", "status", "createdAt", "lastModifiedAt", "scrapeConfiguration", "source", "destination" ],
                        members: {
                            alias: {},
                            scraperId: {},
                            arn: {},
                            roleArn: {},
                            status: {
                                shape: "S15"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            lastModifiedAt: {
                                type: "timestamp"
                            },
                            tags: {
                                shape: "Sh"
                            },
                            statusReason: {},
                            scrapeConfiguration: {
                                shape: "Sq"
                            },
                            source: {
                                shape: "Ss"
                            },
                            destination: {
                                shape: "Sz"
                            }
                        }
                    }
                }
            }
        },
        DescribeWorkspace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        type: "structure",
                        required: [ "workspaceId", "arn", "status", "createdAt" ],
                        members: {
                            workspaceId: {},
                            alias: {},
                            arn: {},
                            status: {
                                shape: "S1a"
                            },
                            prometheusEndpoint: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            tags: {
                                shape: "Sh"
                            }
                        }
                    }
                }
            }
        },
        GetDefaultScraperConfiguration: {
            http: {
                method: "GET",
                requestUri: "/scraperconfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "configuration" ],
                members: {
                    configuration: {
                        type: "blob"
                    }
                }
            }
        },
        ListRuleGroupsNamespaces: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ruleGroupsNamespaces" ],
                members: {
                    ruleGroupsNamespaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name", "status", "createdAt", "modifiedAt" ],
                            members: {
                                arn: {},
                                name: {},
                                status: {
                                    shape: "Sm"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                modifiedAt: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListScrapers: {
            http: {
                method: "GET",
                requestUri: "/scrapers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        location: "querystring",
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "scrapers" ],
                members: {
                    scrapers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "scraperId", "arn", "roleArn", "status", "createdAt", "lastModifiedAt", "source", "destination" ],
                            members: {
                                alias: {},
                                scraperId: {},
                                arn: {},
                                roleArn: {},
                                status: {
                                    shape: "S15"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sh"
                                },
                                statusReason: {},
                                source: {
                                    shape: "Ss"
                                },
                                destination: {
                                    shape: "Sz"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        ListWorkspaces: {
            http: {
                method: "GET",
                requestUri: "/workspaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    alias: {
                        location: "querystring",
                        locationName: "alias"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaces" ],
                members: {
                    workspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "workspaceId", "arn", "status", "createdAt" ],
                            members: {
                                workspaceId: {},
                                alias: {},
                                arn: {},
                                status: {
                                    shape: "S1a"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutAlertManagerDefinition: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "data" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    data: {
                        type: "blob"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        PutRuleGroupsNamespace: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "name", "data" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    data: {
                        type: "blob"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "status" ],
                members: {
                    name: {},
                    arn: {},
                    status: {
                        shape: "Sm"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/logging",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "logGroupArn" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    logGroupArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        UpdateWorkspaceAlias: {
            http: {
                requestUri: "/workspaces/{workspaceId}/alias",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    alias: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {},
                statusReason: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {},
                statusReason: {}
            }
        },
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {},
                statusReason: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                configurationBlob: {
                    type: "blob"
                }
            },
            union: true
        },
        Ss: {
            type: "structure",
            members: {
                eksConfiguration: {
                    type: "structure",
                    required: [ "clusterArn", "subnetIds" ],
                    members: {
                        clusterArn: {},
                        securityGroupIds: {
                            type: "list",
                            member: {}
                        },
                        subnetIds: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            union: true
        },
        Sz: {
            type: "structure",
            members: {
                ampConfiguration: {
                    type: "structure",
                    required: [ "workspaceArn" ],
                    members: {
                        workspaceArn: {}
                    }
                }
            },
            union: true
        },
        S15: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {}
            }
        },
        S1a: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {}
            }
        }
    },
    paginators: {
        ListRuleGroupsNamespaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "ruleGroupsNamespaces"
        },
        ListScrapers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "scrapers"
        },
        ListWorkspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workspaces"
        }
    },
    waiters: {
        ScraperActive: {
            description: "Wait until a scraper reaches ACTIVE status",
            delay: 2,
            maxAttempts: 60,
            operation: "DescribeScraper",
            acceptors: [ {
                matcher: "path",
                argument: "scraper.status.statusCode",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "scraper.status.statusCode",
                state: "failure",
                expected: "CREATION_FAILED"
            } ]
        },
        ScraperDeleted: {
            description: "Wait until a scraper reaches DELETED status",
            delay: 2,
            maxAttempts: 60,
            operation: "DescribeScraper",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "scraper.status.statusCode",
                state: "failure",
                expected: "DELETION_FAILED"
            } ]
        },
        WorkspaceActive: {
            description: "Wait until a workspace reaches ACTIVE status",
            delay: 2,
            maxAttempts: 60,
            operation: "DescribeWorkspace",
            acceptors: [ {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "retry",
                expected: "CREATING"
            } ]
        },
        WorkspaceDeleted: {
            description: "Wait until a workspace reaches DELETED status",
            delay: 2,
            maxAttempts: 60,
            operation: "DescribeWorkspace",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "retry",
                expected: "DELETING"
            } ]
        }
    }
};

AWS.apiLoader.services["greengrassv2"] = {};

AWS.GreengrassV2 = AWS.Service.defineService("greengrassv2", [ "2020-11-30" ]);

AWS.apiLoader.services["greengrassv2"]["2020-11-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-30",
        endpointPrefix: "greengrass",
        protocol: "rest-json",
        serviceAbbreviation: "AWS GreengrassV2",
        serviceFullName: "AWS IoT Greengrass V2",
        serviceId: "GreengrassV2",
        signatureVersion: "v4",
        uid: "greengrassv2-2020-11-30"
    },
    operations: {
        AssociateServiceRoleToAccount: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "roleArn" ],
                members: {
                    roleArn: {
                        locationName: "RoleArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associatedAt: {
                        locationName: "AssociatedAt"
                    }
                }
            }
        },
        BatchAssociateClientDeviceWithCoreDevice: {
            http: {
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/associateClientDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "thingName" ],
                            members: {
                                thingName: {}
                            }
                        }
                    },
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDisassociateClientDeviceFromCoreDevice: {
            http: {
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/disassociateClientDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "thingName" ],
                            members: {
                                thingName: {}
                            }
                        }
                    },
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CancelDeployment: {
            http: {
                requestUri: "/greengrass/v2/deployments/{deploymentId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    message: {}
                }
            }
        },
        CreateComponentVersion: {
            http: {
                requestUri: "/greengrass/v2/createComponentVersion",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    inlineRecipe: {
                        type: "blob"
                    },
                    lambdaFunction: {
                        type: "structure",
                        required: [ "lambdaArn" ],
                        members: {
                            lambdaArn: {},
                            componentName: {},
                            componentVersion: {},
                            componentPlatforms: {
                                shape: "Sp"
                            },
                            componentDependencies: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        versionRequirement: {},
                                        dependencyType: {}
                                    }
                                }
                            },
                            componentLambdaParameters: {
                                type: "structure",
                                members: {
                                    eventSources: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "topic", "type" ],
                                            members: {
                                                topic: {},
                                                type: {}
                                            }
                                        }
                                    },
                                    maxQueueSize: {
                                        type: "integer"
                                    },
                                    maxInstancesCount: {
                                        type: "integer"
                                    },
                                    maxIdleTimeInSeconds: {
                                        type: "integer"
                                    },
                                    timeoutInSeconds: {
                                        type: "integer"
                                    },
                                    statusTimeoutInSeconds: {
                                        type: "integer"
                                    },
                                    pinned: {
                                        type: "boolean"
                                    },
                                    inputPayloadEncodingType: {},
                                    execArgs: {
                                        type: "list",
                                        member: {}
                                    },
                                    environmentVariables: {
                                        type: "map",
                                        key: {},
                                        value: {}
                                    },
                                    linuxProcessParams: {
                                        type: "structure",
                                        members: {
                                            isolationMode: {},
                                            containerParams: {
                                                type: "structure",
                                                members: {
                                                    memorySizeInKB: {
                                                        type: "integer"
                                                    },
                                                    mountROSysfs: {
                                                        type: "boolean"
                                                    },
                                                    volumes: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "sourcePath", "destinationPath" ],
                                                            members: {
                                                                sourcePath: {},
                                                                destinationPath: {},
                                                                permission: {},
                                                                addGroupOwner: {
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    devices: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "path" ],
                                                            members: {
                                                                path: {},
                                                                permission: {},
                                                                addGroupOwner: {
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S1f"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "componentName", "componentVersion", "creationTimestamp", "status" ],
                members: {
                    arn: {},
                    componentName: {},
                    componentVersion: {},
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    status: {
                        shape: "S1m"
                    }
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/greengrass/v2/deployments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "targetArn" ],
                members: {
                    targetArn: {},
                    deploymentName: {},
                    components: {
                        shape: "S1t"
                    },
                    iotJobConfiguration: {
                        shape: "S23"
                    },
                    deploymentPolicies: {
                        shape: "S2k"
                    },
                    parentTargetArn: {},
                    tags: {
                        shape: "S1f"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentId: {},
                    iotJobId: {},
                    iotJobArn: {}
                }
            }
        },
        DeleteComponent: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/v2/components/{arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            }
        },
        DeleteCoreDevice: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            }
        },
        DeleteDeployment: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/v2/deployments/{deploymentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                }
            }
        },
        DescribeComponent: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}/metadata"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    componentName: {},
                    componentVersion: {},
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    publisher: {},
                    description: {},
                    status: {
                        shape: "S1m"
                    },
                    platforms: {
                        shape: "Sp"
                    },
                    tags: {
                        shape: "S1f"
                    }
                }
            }
        },
        DisassociateServiceRoleFromAccount: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    disassociatedAt: {
                        locationName: "DisassociatedAt"
                    }
                }
            }
        },
        GetComponent: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    recipeOutputFormat: {
                        location: "querystring",
                        locationName: "recipeOutputFormat"
                    },
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recipeOutputFormat", "recipe" ],
                members: {
                    recipeOutputFormat: {},
                    recipe: {
                        type: "blob"
                    },
                    tags: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetComponentVersionArtifact: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}/artifacts/{artifactName+}"
            },
            input: {
                type: "structure",
                required: [ "arn", "artifactName" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    artifactName: {
                        location: "uri",
                        locationName: "artifactName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "preSignedUrl" ],
                members: {
                    preSignedUrl: {}
                }
            }
        },
        GetConnectivityInfo: {
            http: {
                method: "GET",
                requestUri: "/greengrass/things/{thingName}/connectivityInfo",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectivityInfo: {
                        shape: "S39",
                        locationName: "ConnectivityInfo"
                    },
                    message: {
                        locationName: "Message"
                    }
                }
            }
        },
        GetCoreDevice: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}"
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    coreDeviceThingName: {},
                    coreVersion: {},
                    platform: {},
                    architecture: {},
                    status: {},
                    lastStatusUpdateTimestamp: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/deployments/{deploymentId}"
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetArn: {},
                    revisionId: {},
                    deploymentId: {},
                    deploymentName: {},
                    deploymentStatus: {},
                    iotJobId: {},
                    iotJobArn: {},
                    components: {
                        shape: "S1t"
                    },
                    deploymentPolicies: {
                        shape: "S2k"
                    },
                    iotJobConfiguration: {
                        shape: "S23"
                    },
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    isLatestForTarget: {
                        type: "boolean"
                    },
                    parentTargetArn: {},
                    tags: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetServiceRoleForAccount: {
            http: {
                method: "GET",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    associatedAt: {
                        locationName: "AssociatedAt"
                    },
                    roleArn: {
                        locationName: "RoleArn"
                    }
                }
            }
        },
        ListClientDevicesAssociatedWithCoreDevice: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/associatedClientDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associatedClientDevices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                associationTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListComponentVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}/versions"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    componentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                componentName: {},
                                componentVersion: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListComponents: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components"
            },
            input: {
                type: "structure",
                members: {
                    scope: {
                        location: "querystring",
                        locationName: "scope"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    components: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                componentName: {},
                                latestVersion: {
                                    type: "structure",
                                    members: {
                                        arn: {},
                                        componentVersion: {},
                                        creationTimestamp: {
                                            type: "timestamp"
                                        },
                                        description: {},
                                        publisher: {},
                                        platforms: {
                                            shape: "Sp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCoreDevices: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices"
            },
            input: {
                type: "structure",
                members: {
                    thingGroupArn: {
                        location: "querystring",
                        locationName: "thingGroupArn"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    coreDevices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                coreDeviceThingName: {},
                                status: {},
                                lastStatusUpdateTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/deployments"
            },
            input: {
                type: "structure",
                members: {
                    targetArn: {
                        location: "querystring",
                        locationName: "targetArn"
                    },
                    historyFilter: {
                        location: "querystring",
                        locationName: "historyFilter"
                    },
                    parentTargetArn: {
                        location: "querystring",
                        locationName: "parentTargetArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                targetArn: {},
                                revisionId: {},
                                deploymentId: {},
                                deploymentName: {},
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                isLatestForTarget: {
                                    type: "boolean"
                                },
                                parentTargetArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEffectiveDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/effectiveDeployments"
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    effectiveDeployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "deploymentId", "deploymentName", "targetArn", "coreDeviceExecutionStatus", "creationTimestamp", "modifiedTimestamp" ],
                            members: {
                                deploymentId: {},
                                deploymentName: {},
                                iotJobId: {},
                                iotJobArn: {},
                                description: {},
                                targetArn: {},
                                coreDeviceExecutionStatus: {},
                                reason: {},
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                modifiedTimestamp: {
                                    type: "timestamp"
                                },
                                statusDetails: {
                                    type: "structure",
                                    members: {
                                        errorStack: {
                                            type: "list",
                                            member: {}
                                        },
                                        errorTypes: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInstalledComponents: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/installedComponents"
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    topologyFilter: {
                        location: "querystring",
                        locationName: "topologyFilter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    installedComponents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                componentName: {},
                                componentVersion: {},
                                lifecycleState: {},
                                lifecycleStateDetails: {},
                                isRoot: {
                                    type: "boolean"
                                },
                                lastStatusChangeTimestamp: {
                                    type: "timestamp"
                                },
                                lastReportedTimestamp: {
                                    type: "timestamp"
                                },
                                lastInstallationSource: {},
                                lifecycleStatusCodes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1f"
                    }
                }
            }
        },
        ResolveComponentCandidates: {
            http: {
                requestUri: "/greengrass/v2/resolveComponentCandidates"
            },
            input: {
                type: "structure",
                members: {
                    platform: {
                        shape: "Sq"
                    },
                    componentCandidates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                componentName: {},
                                componentVersion: {},
                                versionRequirements: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolvedComponentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                componentName: {},
                                componentVersion: {},
                                recipe: {
                                    type: "blob"
                                },
                                vendorGuidance: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnectivityInfo: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/things/{thingName}/connectivityInfo",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "thingName", "connectivityInfo" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    connectivityInfo: {
                        shape: "S39",
                        locationName: "ConnectivityInfo"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    version: {
                        locationName: "Version"
                    },
                    message: {
                        locationName: "Message"
                    }
                }
            }
        }
    },
    shapes: {
        Sp: {
            type: "list",
            member: {
                shape: "Sq"
            }
        },
        Sq: {
            type: "structure",
            members: {
                name: {},
                attributes: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S1f: {
            type: "map",
            key: {},
            value: {}
        },
        S1m: {
            type: "structure",
            members: {
                componentState: {},
                message: {},
                errors: {
                    type: "map",
                    key: {},
                    value: {}
                },
                vendorGuidance: {},
                vendorGuidanceMessage: {}
            }
        },
        S1t: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    componentVersion: {},
                    configurationUpdate: {
                        type: "structure",
                        members: {
                            merge: {},
                            reset: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    runWith: {
                        type: "structure",
                        members: {
                            posixUser: {},
                            systemResourceLimits: {
                                type: "structure",
                                members: {
                                    memory: {
                                        type: "long"
                                    },
                                    cpus: {
                                        type: "double"
                                    }
                                }
                            },
                            windowsUser: {}
                        }
                    }
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                jobExecutionsRolloutConfig: {
                    type: "structure",
                    members: {
                        exponentialRate: {
                            type: "structure",
                            required: [ "baseRatePerMinute", "incrementFactor", "rateIncreaseCriteria" ],
                            members: {
                                baseRatePerMinute: {
                                    type: "integer"
                                },
                                incrementFactor: {
                                    type: "double"
                                },
                                rateIncreaseCriteria: {
                                    type: "structure",
                                    members: {
                                        numberOfNotifiedThings: {
                                            type: "integer"
                                        },
                                        numberOfSucceededThings: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        maximumPerMinute: {
                            type: "integer"
                        }
                    }
                },
                abortConfig: {
                    type: "structure",
                    required: [ "criteriaList" ],
                    members: {
                        criteriaList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "failureType", "action", "thresholdPercentage", "minNumberOfExecutedThings" ],
                                members: {
                                    failureType: {},
                                    action: {},
                                    thresholdPercentage: {
                                        type: "double"
                                    },
                                    minNumberOfExecutedThings: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                timeoutConfig: {
                    type: "structure",
                    members: {
                        inProgressTimeoutInMinutes: {
                            type: "long"
                        }
                    }
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                failureHandlingPolicy: {},
                componentUpdatePolicy: {
                    type: "structure",
                    members: {
                        timeoutInSeconds: {
                            type: "integer"
                        },
                        action: {}
                    }
                },
                configurationValidationPolicy: {
                    type: "structure",
                    members: {
                        timeoutInSeconds: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S39: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {
                        locationName: "Id"
                    },
                    hostAddress: {
                        locationName: "HostAddress"
                    },
                    portNumber: {
                        locationName: "PortNumber",
                        type: "integer"
                    },
                    metadata: {
                        locationName: "Metadata"
                    }
                }
            }
        }
    },
    paginators: {
        ListClientDevicesAssociatedWithCoreDevice: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "associatedClientDevices"
        },
        ListComponentVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "componentVersions"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "components"
        },
        ListCoreDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "coreDevices"
        },
        ListDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deployments"
        },
        ListEffectiveDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "effectiveDeployments"
        },
        ListInstalledComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "installedComponents"
        }
    }
};

AWS.apiLoader.services["iotdeviceadvisor"] = {};

AWS.IotDeviceAdvisor = AWS.Service.defineService("iotdeviceadvisor", [ "2020-09-18" ]);

AWS.apiLoader.services["iotdeviceadvisor"]["2020-09-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-09-18",
        endpointPrefix: "api.iotdeviceadvisor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWSIoTDeviceAdvisor",
        serviceFullName: "AWS IoT Core Device Advisor",
        serviceId: "IotDeviceAdvisor",
        signatureVersion: "v4",
        signingName: "iotdeviceadvisor",
        uid: "iotdeviceadvisor-2020-09-18"
    },
    operations: {
        CreateSuiteDefinition: {
            http: {
                requestUri: "/suiteDefinitions"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionConfiguration" ],
                members: {
                    suiteDefinitionConfiguration: {
                        shape: "S2"
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionArn: {},
                    suiteDefinitionName: {},
                    createdAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteSuiteDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetEndpoint: {
            http: {
                method: "GET",
                requestUri: "/endpoint"
            },
            input: {
                type: "structure",
                members: {
                    thingArn: {
                        location: "querystring",
                        locationName: "thingArn"
                    },
                    certificateArn: {
                        location: "querystring",
                        locationName: "certificateArn"
                    },
                    deviceRoleArn: {
                        location: "querystring",
                        locationName: "deviceRoleArn"
                    },
                    authenticationMethod: {
                        location: "querystring",
                        locationName: "authenticationMethod"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {}
                }
            }
        },
        GetSuiteDefinition: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionVersion: {
                        location: "querystring",
                        locationName: "suiteDefinitionVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionArn: {},
                    suiteDefinitionVersion: {},
                    latestVersion: {},
                    suiteDefinitionConfiguration: {
                        shape: "S2"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastModifiedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetSuiteRun: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteRunId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteRunId: {
                        location: "uri",
                        locationName: "suiteRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionVersion: {},
                    suiteRunId: {},
                    suiteRunArn: {},
                    suiteRunConfiguration: {
                        shape: "Ss"
                    },
                    testResult: {
                        type: "structure",
                        members: {
                            groups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        groupId: {},
                                        groupName: {},
                                        tests: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    testCaseRunId: {},
                                                    testCaseDefinitionId: {},
                                                    testCaseDefinitionName: {},
                                                    status: {},
                                                    startTime: {
                                                        type: "timestamp"
                                                    },
                                                    endTime: {
                                                        type: "timestamp"
                                                    },
                                                    logUrl: {},
                                                    warnings: {},
                                                    failure: {},
                                                    testScenarios: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                testCaseScenarioId: {},
                                                                testCaseScenarioType: {},
                                                                status: {},
                                                                failure: {},
                                                                systemMessage: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    status: {},
                    errorReason: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetSuiteRunReport: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/report"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteRunId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteRunId: {
                        location: "uri",
                        locationName: "suiteRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    qualificationReportDownloadUrl: {}
                }
            }
        },
        ListSuiteDefinitions: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionInformationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                suiteDefinitionId: {},
                                suiteDefinitionName: {},
                                defaultDevices: {
                                    shape: "S4"
                                },
                                intendedForQualification: {
                                    type: "boolean"
                                },
                                isLongDurationTest: {
                                    type: "boolean"
                                },
                                protocol: {},
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSuiteRuns: {
            http: {
                method: "GET",
                requestUri: "/suiteRuns"
            },
            input: {
                type: "structure",
                members: {
                    suiteDefinitionId: {
                        location: "querystring",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionVersion: {
                        location: "querystring",
                        locationName: "suiteDefinitionVersion"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteRunsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                suiteDefinitionId: {},
                                suiteDefinitionVersion: {},
                                suiteDefinitionName: {},
                                suiteRunId: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                startedAt: {
                                    type: "timestamp"
                                },
                                endAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                passed: {
                                    type: "integer"
                                },
                                failed: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        StartSuiteRun: {
            http: {
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteRunConfiguration" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionVersion: {},
                    suiteRunConfiguration: {
                        shape: "Ss"
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteRunId: {},
                    suiteRunArn: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    endpoint: {}
                }
            }
        },
        StopSuiteRun: {
            http: {
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/stop"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteRunId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteRunId: {
                        location: "uri",
                        locationName: "suiteRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSuiteDefinition: {
            http: {
                method: "PATCH",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteDefinitionConfiguration" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionConfiguration: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionArn: {},
                    suiteDefinitionName: {},
                    suiteDefinitionVersion: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "suiteDefinitionName", "rootGroup", "devicePermissionRoleArn" ],
            members: {
                suiteDefinitionName: {},
                devices: {
                    shape: "S4"
                },
                intendedForQualification: {
                    type: "boolean"
                },
                isLongDurationTest: {
                    type: "boolean"
                },
                rootGroup: {},
                devicePermissionRoleArn: {},
                protocol: {}
            }
        },
        S4: {
            type: "list",
            member: {
                shape: "S5"
            }
        },
        S5: {
            type: "structure",
            members: {
                thingArn: {},
                certificateArn: {},
                deviceRoleArn: {}
            }
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Ss: {
            type: "structure",
            required: [ "primaryDevice" ],
            members: {
                primaryDevice: {
                    shape: "S5"
                },
                selectedTestList: {
                    type: "list",
                    member: {}
                },
                parallelRun: {
                    type: "boolean"
                }
            }
        }
    },
    paginators: {
        ListSuiteDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSuiteRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["iotfleethub"] = {};

AWS.IoTFleetHub = AWS.Service.defineService("iotfleethub", [ "2020-11-03" ]);

AWS.apiLoader.services["iotfleethub"]["2020-11-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-03",
        endpointPrefix: "api.fleethub.iot",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Fleet Hub",
        serviceId: "IoTFleetHub",
        signatureVersion: "v4",
        signingName: "iotfleethub",
        uid: "iotfleethub-2020-11-03"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "applicationName", "roleArn" ],
                members: {
                    applicationName: {},
                    applicationDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    roleArn: {},
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "applicationArn" ],
                members: {
                    applicationId: {},
                    applicationArn: {}
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "applicationArn", "applicationName", "applicationUrl", "applicationState", "applicationCreationDate", "applicationLastUpdateDate", "roleArn" ],
                members: {
                    applicationId: {},
                    applicationArn: {},
                    applicationName: {},
                    applicationDescription: {},
                    applicationUrl: {},
                    applicationState: {},
                    applicationCreationDate: {
                        type: "long"
                    },
                    applicationLastUpdateDate: {
                        type: "long"
                    },
                    roleArn: {},
                    ssoClientId: {},
                    errorMessage: {},
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "applicationName", "applicationUrl" ],
                            members: {
                                applicationId: {},
                                applicationName: {},
                                applicationDescription: {},
                                applicationUrl: {},
                                applicationCreationDate: {
                                    type: "long"
                                },
                                applicationLastUpdateDate: {
                                    type: "long"
                                },
                                applicationState: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    applicationName: {},
                    applicationDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "applicationSummaries"
        }
    }
};

AWS.apiLoader.services["iotwireless"] = {};

AWS.IoTWireless = AWS.Service.defineService("iotwireless", [ "2020-11-22" ]);

AWS.apiLoader.services["iotwireless"]["2020-11-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-22",
        endpointPrefix: "api.iotwireless",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Wireless",
        serviceId: "IoT Wireless",
        signatureVersion: "v4",
        signingName: "iotwireless",
        uid: "iotwireless-2020-11-22"
    },
    operations: {
        AssociateAwsAccountWithPartnerAccount: {
            http: {
                requestUri: "/partner-accounts"
            },
            input: {
                type: "structure",
                required: [ "Sidewalk" ],
                members: {
                    Sidewalk: {
                        shape: "S2"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sidewalk: {
                        shape: "S2"
                    },
                    Arn: {}
                }
            }
        },
        AssociateMulticastGroupWithFuotaTask: {
            http: {
                method: "PUT",
                requestUri: "/fuota-tasks/{Id}/multicast-group",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "MulticastGroupId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    MulticastGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessDeviceWithFuotaTask: {
            http: {
                method: "PUT",
                requestUri: "/fuota-tasks/{Id}/wireless-device",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessDeviceWithMulticastGroup: {
            http: {
                method: "PUT",
                requestUri: "/multicast-groups/{Id}/wireless-device",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessDeviceWithThing: {
            http: {
                method: "PUT",
                requestUri: "/wireless-devices/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "ThingArn" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    ThingArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessGatewayWithCertificate: {
            http: {
                method: "PUT",
                requestUri: "/wireless-gateways/{Id}/certificate"
            },
            input: {
                type: "structure",
                required: [ "Id", "IotCertificateId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IotCertificateId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IotCertificateId: {}
                }
            }
        },
        AssociateWirelessGatewayWithThing: {
            http: {
                method: "PUT",
                requestUri: "/wireless-gateways/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "ThingArn" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    ThingArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelMulticastGroupSession: {
            http: {
                method: "DELETE",
                requestUri: "/multicast-groups/{Id}/session",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDestination: {
            http: {
                requestUri: "/destinations",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "ExpressionType", "Expression", "RoleArn" ],
                members: {
                    Name: {},
                    ExpressionType: {},
                    Expression: {},
                    Description: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {}
                }
            }
        },
        CreateDeviceProfile: {
            http: {
                requestUri: "/device-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    LoRaWAN: {
                        shape: "S16"
                    },
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateFuotaTask: {
            http: {
                requestUri: "/fuota-tasks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FirmwareUpdateImage", "FirmwareUpdateRole" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LoRaWAN: {
                        shape: "S1x"
                    },
                    FirmwareUpdateImage: {},
                    FirmwareUpdateRole: {},
                    Tags: {
                        shape: "S6"
                    },
                    RedundancyPercent: {
                        type: "integer"
                    },
                    FragmentSizeBytes: {
                        type: "integer"
                    },
                    FragmentIntervalMS: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateMulticastGroup: {
            http: {
                requestUri: "/multicast-groups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "LoRaWAN" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LoRaWAN: {
                        shape: "S28"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateNetworkAnalyzerConfiguration: {
            http: {
                requestUri: "/network-analyzer-configurations",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    TraceContent: {
                        shape: "S2e"
                    },
                    WirelessDevices: {
                        shape: "S2i"
                    },
                    WirelessGateways: {
                        shape: "S2j"
                    },
                    Description: {},
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    MulticastGroups: {
                        shape: "S2k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {}
                }
            }
        },
        CreateServiceProfile: {
            http: {
                requestUri: "/service-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            AddGwMetadata: {
                                type: "boolean"
                            },
                            DrMin: {
                                type: "integer"
                            },
                            DrMax: {
                                type: "integer"
                            },
                            PrAllowed: {
                                type: "boolean"
                            },
                            RaAllowed: {
                                type: "boolean"
                            }
                        }
                    },
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateWirelessDevice: {
            http: {
                requestUri: "/wireless-devices",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Type", "DestinationName" ],
                members: {
                    Type: {},
                    Name: {},
                    Description: {},
                    DestinationName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LoRaWAN: {
                        shape: "S31"
                    },
                    Tags: {
                        shape: "S6"
                    },
                    Positioning: {},
                    Sidewalk: {
                        type: "structure",
                        members: {
                            DeviceProfileId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateWirelessGateway: {
            http: {
                requestUri: "/wireless-gateways",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "LoRaWAN" ],
                members: {
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S3x"
                    },
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateWirelessGatewayTask: {
            http: {
                requestUri: "/wireless-gateways/{Id}/tasks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessGatewayTaskDefinitionId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessGatewayTaskDefinitionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessGatewayTaskDefinitionId: {},
                    Status: {}
                }
            }
        },
        CreateWirelessGatewayTaskDefinition: {
            http: {
                requestUri: "/wireless-gateway-task-definitions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AutoCreateTasks" ],
                members: {
                    AutoCreateTasks: {
                        type: "boolean"
                    },
                    Name: {},
                    Update: {
                        shape: "S4j"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        DeleteDestination: {
            http: {
                method: "DELETE",
                requestUri: "/destinations/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDeviceProfile: {
            http: {
                method: "DELETE",
                requestUri: "/device-profiles/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFuotaTask: {
            http: {
                method: "DELETE",
                requestUri: "/fuota-tasks/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMulticastGroup: {
            http: {
                method: "DELETE",
                requestUri: "/multicast-groups/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNetworkAnalyzerConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/network-analyzer-configurations/{ConfigurationName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ConfigurationName" ],
                members: {
                    ConfigurationName: {
                        location: "uri",
                        locationName: "ConfigurationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteQueuedMessages: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-devices/{Id}/data",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "MessageId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    MessageId: {
                        location: "querystring",
                        locationName: "messageId"
                    },
                    WirelessDeviceType: {
                        location: "querystring",
                        locationName: "WirelessDeviceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteServiceProfile: {
            http: {
                method: "DELETE",
                requestUri: "/service-profiles/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessDevice: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-devices/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessDeviceImportTask: {
            http: {
                method: "DELETE",
                requestUri: "/wireless_device_import_task/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessGateway: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessGatewayTask: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}/tasks",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessGatewayTaskDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateway-task-definitions/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterWirelessDevice: {
            http: {
                method: "PATCH",
                requestUri: "/wireless-devices/{Identifier}/deregister"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    WirelessDeviceType: {
                        location: "querystring",
                        locationName: "WirelessDeviceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateAwsAccountFromPartnerAccount: {
            http: {
                method: "DELETE",
                requestUri: "/partner-accounts/{PartnerAccountId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "PartnerAccountId", "PartnerType" ],
                members: {
                    PartnerAccountId: {
                        location: "uri",
                        locationName: "PartnerAccountId"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateMulticastGroupFromFuotaTask: {
            http: {
                method: "DELETE",
                requestUri: "/fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "MulticastGroupId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    MulticastGroupId: {
                        location: "uri",
                        locationName: "MulticastGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessDeviceFromFuotaTask: {
            http: {
                method: "DELETE",
                requestUri: "/fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {
                        location: "uri",
                        locationName: "WirelessDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessDeviceFromMulticastGroup: {
            http: {
                method: "DELETE",
                requestUri: "/multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {
                        location: "uri",
                        locationName: "WirelessDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessDeviceFromThing: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-devices/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessGatewayFromCertificate: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}/certificate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessGatewayFromThing: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDestination: {
            http: {
                method: "GET",
                requestUri: "/destinations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    Expression: {},
                    ExpressionType: {},
                    Description: {},
                    RoleArn: {}
                }
            }
        },
        GetDeviceProfile: {
            http: {
                method: "GET",
                requestUri: "/device-profiles/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    Id: {},
                    LoRaWAN: {
                        shape: "S16"
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            ApplicationServerPublicKey: {
                                type: "string",
                                sensitive: true
                            },
                            QualificationStatus: {
                                type: "boolean"
                            },
                            DakCertificateMetadata: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "CertificateId" ],
                                    members: {
                                        CertificateId: {},
                                        MaxAllowedSignature: {
                                            type: "integer"
                                        },
                                        FactorySupport: {
                                            type: "boolean"
                                        },
                                        ApId: {},
                                        DeviceTypeId: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEventConfigurationByResourceTypes: {
            http: {
                method: "GET",
                requestUri: "/event-configurations-resource-types"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DeviceRegistrationState: {
                        shape: "S6j"
                    },
                    Proximity: {
                        shape: "S6m"
                    },
                    Join: {
                        shape: "S6n"
                    },
                    ConnectionStatus: {
                        shape: "S6p"
                    },
                    MessageDeliveryStatus: {
                        shape: "S6r"
                    }
                }
            }
        },
        GetFuotaTask: {
            http: {
                method: "GET",
                requestUri: "/fuota-tasks/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Status: {},
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            RfRegion: {},
                            StartTime: {
                                shape: "S6w"
                            }
                        }
                    },
                    FirmwareUpdateImage: {},
                    FirmwareUpdateRole: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    RedundancyPercent: {
                        type: "integer"
                    },
                    FragmentSizeBytes: {
                        type: "integer"
                    },
                    FragmentIntervalMS: {
                        type: "integer"
                    }
                }
            }
        },
        GetLogLevelsByResourceTypes: {
            http: {
                method: "GET",
                requestUri: "/log-levels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DefaultLogLevel: {},
                    WirelessGatewayLogOptions: {
                        shape: "S70"
                    },
                    WirelessDeviceLogOptions: {
                        shape: "S76"
                    }
                }
            }
        },
        GetMulticastGroup: {
            http: {
                method: "GET",
                requestUri: "/multicast-groups/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            RfRegion: {},
                            DlClass: {},
                            NumberOfDevicesRequested: {
                                type: "integer"
                            },
                            NumberOfDevicesInGroup: {
                                type: "integer"
                            }
                        }
                    },
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetMulticastGroupSession: {
            http: {
                method: "GET",
                requestUri: "/multicast-groups/{Id}/session"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoRaWAN: {
                        shape: "S7j"
                    }
                }
            }
        },
        GetNetworkAnalyzerConfiguration: {
            http: {
                method: "GET",
                requestUri: "/network-analyzer-configurations/{ConfigurationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConfigurationName" ],
                members: {
                    ConfigurationName: {
                        location: "uri",
                        locationName: "ConfigurationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TraceContent: {
                        shape: "S2e"
                    },
                    WirelessDevices: {
                        shape: "S2i"
                    },
                    WirelessGateways: {
                        shape: "S2j"
                    },
                    Description: {},
                    Arn: {},
                    Name: {},
                    MulticastGroups: {
                        shape: "S2k"
                    }
                }
            }
        },
        GetPartnerAccount: {
            http: {
                method: "GET",
                requestUri: "/partner-accounts/{PartnerAccountId}"
            },
            input: {
                type: "structure",
                required: [ "PartnerAccountId", "PartnerType" ],
                members: {
                    PartnerAccountId: {
                        location: "uri",
                        locationName: "PartnerAccountId"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sidewalk: {
                        shape: "S7s"
                    },
                    AccountLinked: {
                        type: "boolean"
                    }
                }
            }
        },
        GetPosition: {
            http: {
                method: "GET",
                requestUri: "/positions/{ResourceIdentifier}"
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            output: {
                type: "structure",
                members: {
                    Position: {
                        shape: "S7z"
                    },
                    Accuracy: {
                        type: "structure",
                        members: {
                            HorizontalAccuracy: {
                                type: "float"
                            },
                            VerticalAccuracy: {
                                type: "float"
                            }
                        }
                    },
                    SolverType: {},
                    SolverProvider: {},
                    SolverVersion: {},
                    Timestamp: {}
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            deprecated: true,
            deprecatedMessage: "This operation is no longer supported."
        },
        GetPositionConfiguration: {
            http: {
                method: "GET",
                requestUri: "/position-configurations/{ResourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            output: {
                type: "structure",
                members: {
                    Solvers: {
                        shape: "S8a"
                    },
                    Destination: {}
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            deprecated: true,
            deprecatedMessage: "This operation is no longer supported."
        },
        GetPositionEstimate: {
            http: {
                requestUri: "/position-estimate"
            },
            input: {
                type: "structure",
                members: {
                    WiFiAccessPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MacAddress", "Rss" ],
                            members: {
                                MacAddress: {},
                                Rss: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    CellTowers: {
                        type: "structure",
                        members: {
                            Gsm: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Mcc", "Mnc", "Lac", "GeranCid" ],
                                    members: {
                                        Mcc: {
                                            type: "integer"
                                        },
                                        Mnc: {
                                            type: "integer"
                                        },
                                        Lac: {
                                            type: "integer"
                                        },
                                        GeranCid: {
                                            type: "integer"
                                        },
                                        GsmLocalId: {
                                            type: "structure",
                                            required: [ "Bsic", "Bcch" ],
                                            members: {
                                                Bsic: {
                                                    type: "integer"
                                                },
                                                Bcch: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        GsmTimingAdvance: {
                                            type: "integer"
                                        },
                                        RxLevel: {
                                            type: "integer"
                                        },
                                        GsmNmr: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Bsic", "Bcch" ],
                                                members: {
                                                    Bsic: {
                                                        type: "integer"
                                                    },
                                                    Bcch: {
                                                        type: "integer"
                                                    },
                                                    RxLevel: {
                                                        type: "integer"
                                                    },
                                                    GlobalIdentity: {
                                                        type: "structure",
                                                        required: [ "Lac", "GeranCid" ],
                                                        members: {
                                                            Lac: {
                                                                type: "integer"
                                                            },
                                                            GeranCid: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Wcdma: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Mcc", "Mnc", "UtranCid" ],
                                    members: {
                                        Mcc: {
                                            type: "integer"
                                        },
                                        Mnc: {
                                            type: "integer"
                                        },
                                        Lac: {
                                            type: "integer"
                                        },
                                        UtranCid: {
                                            type: "integer"
                                        },
                                        WcdmaLocalId: {
                                            type: "structure",
                                            required: [ "Uarfcndl", "Psc" ],
                                            members: {
                                                Uarfcndl: {
                                                    type: "integer"
                                                },
                                                Psc: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        Rscp: {
                                            type: "integer"
                                        },
                                        PathLoss: {
                                            type: "integer"
                                        },
                                        WcdmaNmr: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Uarfcndl", "Psc", "UtranCid" ],
                                                members: {
                                                    Uarfcndl: {
                                                        type: "integer"
                                                    },
                                                    Psc: {
                                                        type: "integer"
                                                    },
                                                    UtranCid: {
                                                        type: "integer"
                                                    },
                                                    Rscp: {
                                                        type: "integer"
                                                    },
                                                    PathLoss: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Tdscdma: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Mcc", "Mnc", "UtranCid" ],
                                    members: {
                                        Mcc: {
                                            type: "integer"
                                        },
                                        Mnc: {
                                            type: "integer"
                                        },
                                        Lac: {
                                            type: "integer"
                                        },
                                        UtranCid: {
                                            type: "integer"
                                        },
                                        TdscdmaLocalId: {
                                            type: "structure",
                                            required: [ "Uarfcn", "CellParams" ],
                                            members: {
                                                Uarfcn: {
                                                    type: "integer"
                                                },
                                                CellParams: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        TdscdmaTimingAdvance: {
                                            type: "integer"
                                        },
                                        Rscp: {
                                            type: "integer"
                                        },
                                        PathLoss: {
                                            type: "integer"
                                        },
                                        TdscdmaNmr: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Uarfcn", "CellParams" ],
                                                members: {
                                                    Uarfcn: {
                                                        type: "integer"
                                                    },
                                                    CellParams: {
                                                        type: "integer"
                                                    },
                                                    UtranCid: {
                                                        type: "integer"
                                                    },
                                                    Rscp: {
                                                        type: "integer"
                                                    },
                                                    PathLoss: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Lte: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Mcc", "Mnc", "EutranCid" ],
                                    members: {
                                        Mcc: {
                                            type: "integer"
                                        },
                                        Mnc: {
                                            type: "integer"
                                        },
                                        EutranCid: {
                                            type: "integer"
                                        },
                                        Tac: {
                                            type: "integer"
                                        },
                                        LteLocalId: {
                                            type: "structure",
                                            required: [ "Pci", "Earfcn" ],
                                            members: {
                                                Pci: {
                                                    type: "integer"
                                                },
                                                Earfcn: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        LteTimingAdvance: {
                                            type: "integer"
                                        },
                                        Rsrp: {
                                            type: "integer"
                                        },
                                        Rsrq: {
                                            type: "float"
                                        },
                                        NrCapable: {
                                            type: "boolean"
                                        },
                                        LteNmr: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Pci", "Earfcn", "EutranCid" ],
                                                members: {
                                                    Pci: {
                                                        type: "integer"
                                                    },
                                                    Earfcn: {
                                                        type: "integer"
                                                    },
                                                    EutranCid: {
                                                        type: "integer"
                                                    },
                                                    Rsrp: {
                                                        type: "integer"
                                                    },
                                                    Rsrq: {
                                                        type: "float"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Cdma: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "SystemId", "NetworkId", "BaseStationId" ],
                                    members: {
                                        SystemId: {
                                            type: "integer"
                                        },
                                        NetworkId: {
                                            type: "integer"
                                        },
                                        BaseStationId: {
                                            type: "integer"
                                        },
                                        RegistrationZone: {
                                            type: "integer"
                                        },
                                        CdmaLocalId: {
                                            type: "structure",
                                            required: [ "PnOffset", "CdmaChannel" ],
                                            members: {
                                                PnOffset: {
                                                    type: "integer"
                                                },
                                                CdmaChannel: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        PilotPower: {
                                            type: "integer"
                                        },
                                        BaseLat: {
                                            type: "float"
                                        },
                                        BaseLng: {
                                            type: "float"
                                        },
                                        CdmaNmr: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "PnOffset", "CdmaChannel" ],
                                                members: {
                                                    PnOffset: {
                                                        type: "integer"
                                                    },
                                                    CdmaChannel: {
                                                        type: "integer"
                                                    },
                                                    PilotPower: {
                                                        type: "integer"
                                                    },
                                                    BaseStationId: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Ip: {
                        type: "structure",
                        required: [ "IpAddress" ],
                        members: {
                            IpAddress: {}
                        }
                    },
                    Gnss: {
                        type: "structure",
                        required: [ "Payload" ],
                        members: {
                            Payload: {},
                            CaptureTime: {
                                type: "float"
                            },
                            CaptureTimeAccuracy: {
                                type: "float"
                            },
                            AssistPosition: {
                                type: "list",
                                member: {
                                    type: "float"
                                }
                            },
                            AssistAltitude: {
                                type: "float"
                            },
                            Use2DSolver: {
                                type: "boolean"
                            }
                        }
                    },
                    Timestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoJsonPayload: {
                        type: "blob"
                    }
                },
                payload: "GeoJsonPayload"
            }
        },
        GetResourceEventConfiguration: {
            http: {
                method: "GET",
                requestUri: "/event-configurations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceRegistrationState: {
                        shape: "San"
                    },
                    Proximity: {
                        shape: "Sap"
                    },
                    Join: {
                        shape: "Saq"
                    },
                    ConnectionStatus: {
                        shape: "Sas"
                    },
                    MessageDeliveryStatus: {
                        shape: "Sau"
                    }
                }
            }
        },
        GetResourceLogLevel: {
            http: {
                method: "GET",
                requestUri: "/log-levels/{ResourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LogLevel: {}
                }
            }
        },
        GetResourcePosition: {
            http: {
                method: "GET",
                requestUri: "/resource-positions/{ResourceIdentifier}"
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoJsonPayload: {
                        type: "blob"
                    }
                },
                payload: "GeoJsonPayload"
            }
        },
        GetServiceEndpoint: {
            http: {
                method: "GET",
                requestUri: "/service-endpoint"
            },
            input: {
                type: "structure",
                members: {
                    ServiceType: {
                        location: "querystring",
                        locationName: "serviceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceType: {},
                    ServiceEndpoint: {},
                    ServerTrust: {}
                }
            }
        },
        GetServiceProfile: {
            http: {
                method: "GET",
                requestUri: "/service-profiles/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    Id: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            UlRate: {
                                type: "integer"
                            },
                            UlBucketSize: {
                                type: "integer"
                            },
                            UlRatePolicy: {},
                            DlRate: {
                                type: "integer"
                            },
                            DlBucketSize: {
                                type: "integer"
                            },
                            DlRatePolicy: {},
                            AddGwMetadata: {
                                type: "boolean"
                            },
                            DevStatusReqFreq: {
                                type: "integer"
                            },
                            ReportDevStatusBattery: {
                                type: "boolean"
                            },
                            ReportDevStatusMargin: {
                                type: "boolean"
                            },
                            DrMin: {
                                type: "integer"
                            },
                            DrMax: {
                                type: "integer"
                            },
                            ChannelMask: {},
                            PrAllowed: {
                                type: "boolean"
                            },
                            HrAllowed: {
                                type: "boolean"
                            },
                            RaAllowed: {
                                type: "boolean"
                            },
                            NwkGeoLoc: {
                                type: "boolean"
                            },
                            TargetPer: {
                                type: "integer"
                            },
                            MinGwDiversity: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        GetWirelessDevice: {
            http: {
                method: "GET",
                requestUri: "/wireless-devices/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Type: {},
                    Name: {},
                    Description: {},
                    DestinationName: {},
                    Id: {},
                    Arn: {},
                    ThingName: {},
                    ThingArn: {},
                    LoRaWAN: {
                        shape: "S31"
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            AmazonId: {},
                            SidewalkId: {},
                            SidewalkManufacturingSn: {},
                            DeviceCertificates: {
                                shape: "Sbw"
                            },
                            PrivateKeys: {
                                type: "list",
                                member: {
                                    shape: "Sbx"
                                }
                            },
                            DeviceProfileId: {},
                            CertificateId: {},
                            Status: {}
                        }
                    },
                    Positioning: {}
                }
            }
        },
        GetWirelessDeviceImportTask: {
            http: {
                method: "GET",
                requestUri: "/wireless_device_import_task/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {},
                    DestinationName: {},
                    Sidewalk: {
                        shape: "Sc5"
                    },
                    CreationTime: {
                        shape: "Sc9"
                    },
                    Status: {},
                    StatusReason: {},
                    InitializedImportedDeviceCount: {
                        type: "long"
                    },
                    PendingImportedDeviceCount: {
                        type: "long"
                    },
                    OnboardedImportedDeviceCount: {
                        type: "long"
                    },
                    FailedImportedDeviceCount: {
                        type: "long"
                    }
                }
            }
        },
        GetWirelessDeviceStatistics: {
            http: {
                method: "GET",
                requestUri: "/wireless-devices/{Id}/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "WirelessDeviceId" ],
                members: {
                    WirelessDeviceId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessDeviceId: {},
                    LastUplinkReceivedAt: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            DevEui: {},
                            FPort: {
                                type: "integer"
                            },
                            DataRate: {
                                type: "integer"
                            },
                            Frequency: {
                                type: "integer"
                            },
                            Timestamp: {},
                            Gateways: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        GatewayEui: {},
                                        Snr: {
                                            type: "double"
                                        },
                                        Rssi: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            Rssi: {
                                type: "integer"
                            },
                            BatteryLevel: {},
                            Event: {},
                            DeviceState: {}
                        }
                    }
                }
            }
        },
        GetWirelessGateway: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Id: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S3x"
                    },
                    Arn: {},
                    ThingName: {},
                    ThingArn: {}
                }
            }
        },
        GetWirelessGatewayCertificate: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/certificate"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IotCertificateId: {},
                    LoRaWANNetworkServerCertificateId: {}
                }
            }
        },
        GetWirelessGatewayFirmwareInformation: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/firmware-information"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            CurrentVersion: {
                                shape: "S4o"
                            }
                        }
                    }
                }
            }
        },
        GetWirelessGatewayStatistics: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "WirelessGatewayId" ],
                members: {
                    WirelessGatewayId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessGatewayId: {},
                    LastUplinkReceivedAt: {},
                    ConnectionStatus: {}
                }
            }
        },
        GetWirelessGatewayTask: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/tasks"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessGatewayId: {},
                    WirelessGatewayTaskDefinitionId: {},
                    LastUplinkReceivedAt: {},
                    TaskCreatedAt: {},
                    Status: {}
                }
            }
        },
        GetWirelessGatewayTaskDefinition: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateway-task-definitions/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoCreateTasks: {
                        type: "boolean"
                    },
                    Name: {},
                    Update: {
                        shape: "S4j"
                    },
                    Arn: {}
                }
            }
        },
        ListDestinations: {
            http: {
                method: "GET",
                requestUri: "/destinations"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DestinationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                ExpressionType: {},
                                Expression: {},
                                Description: {},
                                RoleArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListDeviceProfiles: {
            http: {
                method: "GET",
                requestUri: "/device-profiles"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    DeviceProfileType: {
                        location: "querystring",
                        locationName: "deviceProfileType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DeviceProfileList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        ListDevicesForWirelessDeviceImportTask: {
            http: {
                method: "GET",
                requestUri: "/wireless_device_import_task"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DestinationName: {},
                    ImportedWirelessDeviceList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Sidewalk: {
                                    type: "structure",
                                    members: {
                                        SidewalkManufacturingSn: {},
                                        OnboardingStatus: {},
                                        OnboardingStatusReason: {},
                                        LastUpdateTime: {
                                            type: "timestamp",
                                            timestampFormat: "iso8601"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListEventConfigurations: {
            http: {
                method: "GET",
                requestUri: "/event-configurations"
            },
            input: {
                type: "structure",
                required: [ "ResourceType" ],
                members: {
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    EventConfigurationsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Identifier: {},
                                IdentifierType: {},
                                PartnerType: {},
                                Events: {
                                    type: "structure",
                                    members: {
                                        DeviceRegistrationState: {
                                            shape: "San"
                                        },
                                        Proximity: {
                                            shape: "Sap"
                                        },
                                        Join: {
                                            shape: "Saq"
                                        },
                                        ConnectionStatus: {
                                            shape: "Sas"
                                        },
                                        MessageDeliveryStatus: {
                                            shape: "Sau"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListFuotaTasks: {
            http: {
                method: "GET",
                requestUri: "/fuota-tasks"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FuotaTaskList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListMulticastGroups: {
            http: {
                method: "GET",
                requestUri: "/multicast-groups"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MulticastGroupList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListMulticastGroupsByFuotaTask: {
            http: {
                method: "GET",
                requestUri: "/fuota-tasks/{Id}/multicast-groups"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MulticastGroupList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        ListNetworkAnalyzerConfigurations: {
            http: {
                method: "GET",
                requestUri: "/network-analyzer-configurations"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NetworkAnalyzerConfigurationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListPartnerAccounts: {
            http: {
                method: "GET",
                requestUri: "/partner-accounts"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Sidewalk: {
                        type: "list",
                        member: {
                            shape: "S7s"
                        }
                    }
                }
            }
        },
        ListPositionConfigurations: {
            http: {
                method: "GET",
                requestUri: "/position-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            output: {
                type: "structure",
                members: {
                    PositionConfigurationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceIdentifier: {},
                                ResourceType: {},
                                Solvers: {
                                    shape: "S8a"
                                },
                                Destination: {}
                            }
                        }
                    },
                    NextToken: {}
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            deprecated: true,
            deprecatedMessage: "This operation is no longer supported."
        },
        ListQueuedMessages: {
            http: {
                method: "GET",
                requestUri: "/wireless-devices/{Id}/data"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    WirelessDeviceType: {
                        location: "querystring",
                        locationName: "WirelessDeviceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DownlinkQueueMessagesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MessageId: {},
                                TransmitMode: {
                                    type: "integer"
                                },
                                ReceivedAt: {},
                                LoRaWAN: {
                                    shape: "Sek"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListServiceProfiles: {
            http: {
                method: "GET",
                requestUri: "/service-profiles"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ServiceProfileList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        ListWirelessDeviceImportTasks: {
            http: {
                method: "GET",
                requestUri: "/wireless_device_import_tasks"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    WirelessDeviceImportTaskList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                DestinationName: {},
                                Sidewalk: {
                                    shape: "Sc5"
                                },
                                CreationTime: {
                                    shape: "Sc9"
                                },
                                Status: {},
                                StatusReason: {},
                                InitializedImportedDeviceCount: {
                                    type: "long"
                                },
                                PendingImportedDeviceCount: {
                                    type: "long"
                                },
                                OnboardedImportedDeviceCount: {
                                    type: "long"
                                },
                                FailedImportedDeviceCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWirelessDevices: {
            http: {
                method: "GET",
                requestUri: "/wireless-devices"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    DestinationName: {
                        location: "querystring",
                        locationName: "destinationName"
                    },
                    DeviceProfileId: {
                        location: "querystring",
                        locationName: "deviceProfileId"
                    },
                    ServiceProfileId: {
                        location: "querystring",
                        locationName: "serviceProfileId"
                    },
                    WirelessDeviceType: {
                        location: "querystring",
                        locationName: "wirelessDeviceType"
                    },
                    FuotaTaskId: {
                        location: "querystring",
                        locationName: "fuotaTaskId"
                    },
                    MulticastGroupId: {
                        location: "querystring",
                        locationName: "multicastGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    WirelessDeviceList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Type: {},
                                Name: {},
                                DestinationName: {},
                                LastUplinkReceivedAt: {},
                                LoRaWAN: {
                                    type: "structure",
                                    members: {
                                        DevEui: {}
                                    }
                                },
                                Sidewalk: {
                                    type: "structure",
                                    members: {
                                        AmazonId: {},
                                        SidewalkId: {},
                                        SidewalkManufacturingSn: {},
                                        DeviceCertificates: {
                                            shape: "Sbw"
                                        },
                                        DeviceProfileId: {},
                                        Status: {}
                                    }
                                },
                                FuotaDeviceStatus: {},
                                MulticastDeviceStatus: {},
                                McGroupId: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWirelessGatewayTaskDefinitions: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateway-task-definitions"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    TaskDefinitionType: {
                        location: "querystring",
                        locationName: "taskDefinitionType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TaskDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                LoRaWAN: {
                                    type: "structure",
                                    members: {
                                        CurrentVersion: {
                                            shape: "S4o"
                                        },
                                        UpdateVersion: {
                                            shape: "S4o"
                                        }
                                    }
                                },
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListWirelessGateways: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    WirelessGatewayList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Name: {},
                                Description: {},
                                LoRaWAN: {
                                    shape: "S3x"
                                },
                                LastUplinkReceivedAt: {}
                            }
                        }
                    }
                }
            }
        },
        PutPositionConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/position-configurations/{ResourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    Solvers: {
                        type: "structure",
                        members: {
                            SemtechGnss: {
                                type: "structure",
                                required: [ "Status", "Fec" ],
                                members: {
                                    Status: {},
                                    Fec: {}
                                }
                            }
                        }
                    },
                    Destination: {}
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            deprecated: true,
            deprecatedMessage: "This operation is no longer supported."
        },
        PutResourceLogLevel: {
            http: {
                method: "PUT",
                requestUri: "/log-levels/{ResourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType", "LogLevel" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    LogLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResetAllResourceLogLevels: {
            http: {
                method: "DELETE",
                requestUri: "/log-levels",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResetResourceLogLevel: {
            http: {
                method: "DELETE",
                requestUri: "/log-levels/{ResourceIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendDataToMulticastGroup: {
            http: {
                requestUri: "/multicast-groups/{Id}/data",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Id", "PayloadData", "WirelessMetadata" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    PayloadData: {},
                    WirelessMetadata: {
                        type: "structure",
                        members: {
                            LoRaWAN: {
                                type: "structure",
                                members: {
                                    FPort: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendDataToWirelessDevice: {
            http: {
                requestUri: "/wireless-devices/{Id}/data",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "Id", "TransmitMode", "PayloadData" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    TransmitMode: {
                        type: "integer"
                    },
                    PayloadData: {},
                    WirelessMetadata: {
                        type: "structure",
                        members: {
                            LoRaWAN: {
                                shape: "Sek"
                            },
                            Sidewalk: {
                                type: "structure",
                                members: {
                                    Seq: {
                                        type: "integer"
                                    },
                                    MessageType: {},
                                    AckModeRetryDurationSecs: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        StartBulkAssociateWirelessDeviceWithMulticastGroup: {
            http: {
                method: "PATCH",
                requestUri: "/multicast-groups/{Id}/bulk",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    QueryString: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartBulkDisassociateWirelessDeviceFromMulticastGroup: {
            http: {
                requestUri: "/multicast-groups/{Id}/bulk",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    QueryString: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartFuotaTask: {
            http: {
                method: "PUT",
                requestUri: "/fuota-tasks/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            StartTime: {
                                shape: "S6w"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartMulticastGroupSession: {
            http: {
                method: "PUT",
                requestUri: "/multicast-groups/{Id}/session",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "LoRaWAN" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    LoRaWAN: {
                        shape: "S7j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartSingleWirelessDeviceImportTask: {
            http: {
                requestUri: "/wireless_single_device_import_task",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DestinationName", "Sidewalk" ],
                members: {
                    DestinationName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    DeviceName: {},
                    Tags: {
                        shape: "S6"
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            SidewalkManufacturingSn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        StartWirelessDeviceImportTask: {
            http: {
                requestUri: "/wireless_device_import_task",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DestinationName", "Sidewalk" ],
                members: {
                    DestinationName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S6"
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            DeviceCreationFile: {},
                            Role: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestWirelessDevice: {
            http: {
                requestUri: "/wireless-devices/{Id}/test",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {}
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDestination: {
            http: {
                method: "PATCH",
                requestUri: "/destinations/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    ExpressionType: {},
                    Expression: {},
                    Description: {},
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEventConfigurationByResourceTypes: {
            http: {
                method: "PATCH",
                requestUri: "/event-configurations-resource-types",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    DeviceRegistrationState: {
                        shape: "S6j"
                    },
                    Proximity: {
                        shape: "S6m"
                    },
                    Join: {
                        shape: "S6n"
                    },
                    ConnectionStatus: {
                        shape: "S6p"
                    },
                    MessageDeliveryStatus: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFuotaTask: {
            http: {
                method: "PATCH",
                requestUri: "/fuota-tasks/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S1x"
                    },
                    FirmwareUpdateImage: {},
                    FirmwareUpdateRole: {},
                    RedundancyPercent: {
                        type: "integer"
                    },
                    FragmentSizeBytes: {
                        type: "integer"
                    },
                    FragmentIntervalMS: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLogLevelsByResourceTypes: {
            http: {
                requestUri: "/log-levels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DefaultLogLevel: {},
                    WirelessDeviceLogOptions: {
                        shape: "S76"
                    },
                    WirelessGatewayLogOptions: {
                        shape: "S70"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMulticastGroup: {
            http: {
                method: "PATCH",
                requestUri: "/multicast-groups/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S28"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNetworkAnalyzerConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/network-analyzer-configurations/{ConfigurationName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ConfigurationName" ],
                members: {
                    ConfigurationName: {
                        location: "uri",
                        locationName: "ConfigurationName"
                    },
                    TraceContent: {
                        shape: "S2e"
                    },
                    WirelessDevicesToAdd: {
                        shape: "S2i"
                    },
                    WirelessDevicesToRemove: {
                        shape: "S2i"
                    },
                    WirelessGatewaysToAdd: {
                        shape: "S2j"
                    },
                    WirelessGatewaysToRemove: {
                        shape: "S2j"
                    },
                    Description: {},
                    MulticastGroupsToAdd: {
                        shape: "S2k"
                    },
                    MulticastGroupsToRemove: {
                        shape: "S2k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePartnerAccount: {
            http: {
                method: "PATCH",
                requestUri: "/partner-accounts/{PartnerAccountId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Sidewalk", "PartnerAccountId", "PartnerType" ],
                members: {
                    Sidewalk: {
                        type: "structure",
                        members: {
                            AppServerPrivateKey: {
                                shape: "S4"
                            }
                        }
                    },
                    PartnerAccountId: {
                        location: "uri",
                        locationName: "PartnerAccountId"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePosition: {
            http: {
                method: "PATCH",
                requestUri: "/positions/{ResourceIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType", "Position" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    Position: {
                        shape: "S7z"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "This operation is no longer supported."
            },
            deprecated: true,
            deprecatedMessage: "This operation is no longer supported."
        },
        UpdateResourceEventConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/event-configurations/{Identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    },
                    DeviceRegistrationState: {
                        shape: "San"
                    },
                    Proximity: {
                        shape: "Sap"
                    },
                    Join: {
                        shape: "Saq"
                    },
                    ConnectionStatus: {
                        shape: "Sas"
                    },
                    MessageDeliveryStatus: {
                        shape: "Sau"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourcePosition: {
            http: {
                method: "PATCH",
                requestUri: "/resource-positions/{ResourceIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    GeoJsonPayload: {
                        type: "blob"
                    }
                },
                payload: "GeoJsonPayload"
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWirelessDevice: {
            http: {
                method: "PATCH",
                requestUri: "/wireless-devices/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    DestinationName: {},
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            DeviceProfileId: {},
                            ServiceProfileId: {},
                            AbpV1_1: {
                                type: "structure",
                                members: {
                                    FCntStart: {
                                        type: "integer"
                                    }
                                }
                            },
                            AbpV1_0_x: {
                                type: "structure",
                                members: {
                                    FCntStart: {
                                        type: "integer"
                                    }
                                }
                            },
                            FPorts: {
                                type: "structure",
                                members: {
                                    Positioning: {
                                        shape: "S3n"
                                    },
                                    Applications: {
                                        shape: "S3o"
                                    }
                                }
                            }
                        }
                    },
                    Positioning: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWirelessDeviceImportTask: {
            http: {
                method: "PATCH",
                requestUri: "/wireless_device_import_task/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "Sidewalk" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            DeviceCreationFile: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWirelessGateway: {
            http: {
                method: "PATCH",
                requestUri: "/wireless-gateways/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Name: {},
                    Description: {},
                    JoinEuiFilters: {
                        shape: "S3z"
                    },
                    NetIdFilters: {
                        shape: "S41"
                    },
                    MaxEirp: {
                        type: "float"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                AmazonId: {},
                AppServerPrivateKey: {
                    shape: "S4"
                }
            }
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                SupportsClassB: {
                    type: "boolean"
                },
                ClassBTimeout: {
                    type: "integer"
                },
                PingSlotPeriod: {
                    type: "integer"
                },
                PingSlotDr: {
                    type: "integer"
                },
                PingSlotFreq: {
                    type: "integer"
                },
                SupportsClassC: {
                    type: "boolean"
                },
                ClassCTimeout: {
                    type: "integer"
                },
                MacVersion: {},
                RegParamsRevision: {},
                RxDelay1: {
                    type: "integer"
                },
                RxDrOffset1: {
                    type: "integer"
                },
                RxDataRate2: {
                    type: "integer"
                },
                RxFreq2: {
                    type: "integer"
                },
                FactoryPresetFreqsList: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                MaxEirp: {
                    type: "integer"
                },
                MaxDutyCycle: {
                    type: "integer"
                },
                RfRegion: {},
                SupportsJoin: {
                    type: "boolean"
                },
                Supports32BitFCnt: {
                    type: "boolean"
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                RfRegion: {}
            }
        },
        S28: {
            type: "structure",
            members: {
                RfRegion: {},
                DlClass: {}
            }
        },
        S2e: {
            type: "structure",
            members: {
                WirelessDeviceFrameInfo: {},
                LogLevel: {},
                MulticastFrameInfo: {}
            }
        },
        S2i: {
            type: "list",
            member: {}
        },
        S2j: {
            type: "list",
            member: {}
        },
        S2k: {
            type: "list",
            member: {}
        },
        S31: {
            type: "structure",
            members: {
                DevEui: {},
                DeviceProfileId: {},
                ServiceProfileId: {},
                OtaaV1_1: {
                    type: "structure",
                    members: {
                        AppKey: {},
                        NwkKey: {},
                        JoinEui: {}
                    }
                },
                OtaaV1_0_x: {
                    type: "structure",
                    members: {
                        AppKey: {},
                        AppEui: {},
                        JoinEui: {},
                        GenAppKey: {}
                    }
                },
                AbpV1_1: {
                    type: "structure",
                    members: {
                        DevAddr: {},
                        SessionKeys: {
                            type: "structure",
                            members: {
                                FNwkSIntKey: {},
                                SNwkSIntKey: {},
                                NwkSEncKey: {},
                                AppSKey: {}
                            }
                        },
                        FCntStart: {
                            type: "integer"
                        }
                    }
                },
                AbpV1_0_x: {
                    type: "structure",
                    members: {
                        DevAddr: {},
                        SessionKeys: {
                            type: "structure",
                            members: {
                                NwkSKey: {},
                                AppSKey: {}
                            }
                        },
                        FCntStart: {
                            type: "integer"
                        }
                    }
                },
                FPorts: {
                    type: "structure",
                    members: {
                        Fuota: {
                            type: "integer"
                        },
                        Multicast: {
                            type: "integer"
                        },
                        ClockSync: {
                            type: "integer"
                        },
                        Positioning: {
                            shape: "S3n"
                        },
                        Applications: {
                            shape: "S3o"
                        }
                    }
                }
            }
        },
        S3n: {
            type: "structure",
            members: {
                ClockSync: {
                    type: "integer"
                },
                Stream: {
                    type: "integer"
                },
                Gnss: {
                    type: "integer"
                }
            }
        },
        S3o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FPort: {
                        type: "integer"
                    },
                    Type: {},
                    DestinationName: {}
                }
            }
        },
        S3x: {
            type: "structure",
            members: {
                GatewayEui: {},
                RfRegion: {},
                JoinEuiFilters: {
                    shape: "S3z"
                },
                NetIdFilters: {
                    shape: "S41"
                },
                SubBands: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                Beaconing: {
                    type: "structure",
                    members: {
                        DataRate: {
                            type: "integer"
                        },
                        Frequencies: {
                            type: "list",
                            member: {
                                type: "integer"
                            }
                        }
                    }
                },
                MaxEirp: {
                    type: "float"
                }
            }
        },
        S3z: {
            type: "list",
            member: {
                type: "list",
                member: {}
            }
        },
        S41: {
            type: "list",
            member: {}
        },
        S4j: {
            type: "structure",
            members: {
                UpdateDataSource: {},
                UpdateDataRole: {},
                LoRaWAN: {
                    type: "structure",
                    members: {
                        UpdateSignature: {},
                        SigKeyCrc: {
                            type: "long"
                        },
                        CurrentVersion: {
                            shape: "S4o"
                        },
                        UpdateVersion: {
                            shape: "S4o"
                        }
                    }
                }
            }
        },
        S4o: {
            type: "structure",
            members: {
                PackageVersion: {},
                Model: {},
                Station: {}
            }
        },
        S6j: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "S6k"
                }
            }
        },
        S6k: {
            type: "structure",
            members: {
                WirelessDeviceEventTopic: {}
            }
        },
        S6m: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "S6k"
                }
            }
        },
        S6n: {
            type: "structure",
            members: {
                LoRaWAN: {
                    type: "structure",
                    members: {
                        WirelessDeviceEventTopic: {}
                    }
                }
            }
        },
        S6p: {
            type: "structure",
            members: {
                LoRaWAN: {
                    type: "structure",
                    members: {
                        WirelessGatewayEventTopic: {}
                    }
                }
            }
        },
        S6r: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "S6k"
                }
            }
        },
        S6w: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S70: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "LogLevel" ],
                members: {
                    Type: {},
                    LogLevel: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Event", "LogLevel" ],
                            members: {
                                Event: {},
                                LogLevel: {}
                            }
                        }
                    }
                }
            }
        },
        S76: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "LogLevel" ],
                members: {
                    Type: {},
                    LogLevel: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Event", "LogLevel" ],
                            members: {
                                Event: {},
                                LogLevel: {}
                            }
                        }
                    }
                }
            }
        },
        S7j: {
            type: "structure",
            members: {
                DlDr: {
                    type: "integer"
                },
                DlFreq: {
                    type: "integer"
                },
                SessionStartTime: {
                    type: "timestamp",
                    timestampFormat: "iso8601"
                },
                SessionTimeout: {
                    type: "integer"
                },
                PingSlotPeriod: {
                    type: "integer"
                }
            }
        },
        S7s: {
            type: "structure",
            members: {
                AmazonId: {},
                Fingerprint: {
                    type: "string",
                    sensitive: true
                },
                Arn: {}
            }
        },
        S7z: {
            type: "list",
            member: {
                type: "float"
            }
        },
        S8a: {
            type: "structure",
            members: {
                SemtechGnss: {
                    type: "structure",
                    members: {
                        Provider: {},
                        Type: {},
                        Status: {},
                        Fec: {}
                    }
                }
            }
        },
        San: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "Sao"
                },
                WirelessDeviceIdEventTopic: {}
            }
        },
        Sao: {
            type: "structure",
            members: {
                AmazonIdEventTopic: {}
            }
        },
        Sap: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "Sao"
                },
                WirelessDeviceIdEventTopic: {}
            }
        },
        Saq: {
            type: "structure",
            members: {
                LoRaWAN: {
                    type: "structure",
                    members: {
                        DevEuiEventTopic: {}
                    }
                },
                WirelessDeviceIdEventTopic: {}
            }
        },
        Sas: {
            type: "structure",
            members: {
                LoRaWAN: {
                    type: "structure",
                    members: {
                        GatewayEuiEventTopic: {}
                    }
                },
                WirelessGatewayIdEventTopic: {}
            }
        },
        Sau: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "Sao"
                },
                WirelessDeviceIdEventTopic: {}
            }
        },
        Sbw: {
            type: "list",
            member: {
                shape: "Sbx"
            }
        },
        Sbx: {
            type: "structure",
            required: [ "SigningAlg", "Value" ],
            members: {
                SigningAlg: {},
                Value: {}
            }
        },
        Sc5: {
            type: "structure",
            members: {
                DeviceCreationFileList: {
                    type: "list",
                    member: {}
                },
                Role: {}
            }
        },
        Sc9: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sek: {
            type: "structure",
            members: {
                FPort: {
                    type: "integer"
                },
                ParticipatingGateways: {
                    type: "structure",
                    required: [ "DownlinkMode", "GatewayList", "TransmissionInterval" ],
                    members: {
                        DownlinkMode: {},
                        GatewayList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "GatewayId", "DownlinkFrequency" ],
                                members: {
                                    GatewayId: {},
                                    DownlinkFrequency: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        TransmissionInterval: {
                            type: "integer"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListDestinations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDeviceProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFuotaTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMulticastGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMulticastGroupsByFuotaTask: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNetworkAnalyzerConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPositionConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListQueuedMessages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServiceProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWirelessDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWirelessGateways: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["location"] = {};

AWS.Location = AWS.Service.defineService("location", [ "2020-11-19" ]);

AWS.apiLoader.services["location"]["2020-11-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-19",
        endpointPrefix: "geo",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Location Service",
        serviceId: "Location",
        signatureVersion: "v4",
        signingName: "geo",
        uid: "location-2020-11-19"
    },
    operations: {
        AssociateTrackerConsumer: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/consumers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConsumerArn", "TrackerName" ],
                members: {
                    ConsumerArn: {},
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            }
        },
        BatchDeleteDevicePositionHistory: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/delete-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceIds", "TrackerName" ],
                members: {
                    DeviceIds: {
                        type: "list",
                        member: {}
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        BatchDeleteGeofence: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/delete-geofences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "GeofenceIds" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    GeofenceIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Error", "GeofenceId" ],
                            members: {
                                Error: {
                                    shape: "Sb"
                                },
                                GeofenceId: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        BatchEvaluateGeofences: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "DevicePositionUpdates" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    DevicePositionUpdates: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error", "SampleTime" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                },
                                SampleTime: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        BatchGetDevicePosition: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/get-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceIds", "TrackerName" ],
                members: {
                    DeviceIds: {
                        type: "list",
                        member: {}
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DevicePositions", "Errors" ],
                members: {
                    DevicePositions: {
                        shape: "S11"
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        BatchPutGeofence: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/put-geofences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "Entries" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GeofenceId", "Geometry" ],
                            members: {
                                GeofenceId: {},
                                GeofenceProperties: {
                                    shape: "Sq"
                                },
                                Geometry: {
                                    shape: "S18"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors", "Successes" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Error", "GeofenceId" ],
                            members: {
                                Error: {
                                    shape: "Sb"
                                },
                                GeofenceId: {}
                            }
                        }
                    },
                    Successes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "GeofenceId", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "St"
                                },
                                GeofenceId: {},
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        BatchUpdateDevicePosition: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName", "Updates" ],
                members: {
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    },
                    Updates: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error", "SampleTime" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                },
                                SampleTime: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        CalculateRoute: {
            http: {
                requestUri: "/routes/v0/calculators/{CalculatorName}/calculate/route",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName", "DeparturePosition", "DestinationPosition" ],
                members: {
                    ArrivalTime: {
                        shape: "St"
                    },
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    },
                    CarModeOptions: {
                        shape: "S1n"
                    },
                    DepartNow: {
                        type: "boolean"
                    },
                    DeparturePosition: {
                        shape: "So"
                    },
                    DepartureTime: {
                        shape: "St"
                    },
                    DestinationPosition: {
                        shape: "So"
                    },
                    DistanceUnit: {},
                    IncludeLegGeometry: {
                        type: "boolean"
                    },
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    OptimizeFor: {},
                    TravelMode: {},
                    TruckModeOptions: {
                        shape: "S1t"
                    },
                    WaypointPositions: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Legs", "Summary" ],
                members: {
                    Legs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Distance", "DurationSeconds", "EndPosition", "StartPosition", "Steps" ],
                            members: {
                                Distance: {
                                    type: "double"
                                },
                                DurationSeconds: {
                                    type: "double"
                                },
                                EndPosition: {
                                    shape: "So"
                                },
                                Geometry: {
                                    type: "structure",
                                    members: {
                                        LineString: {
                                            type: "list",
                                            member: {
                                                shape: "So"
                                            }
                                        }
                                    }
                                },
                                StartPosition: {
                                    shape: "So"
                                },
                                Steps: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Distance", "DurationSeconds", "EndPosition", "StartPosition" ],
                                        members: {
                                            Distance: {
                                                type: "double"
                                            },
                                            DurationSeconds: {
                                                type: "double"
                                            },
                                            EndPosition: {
                                                shape: "So"
                                            },
                                            GeometryOffset: {
                                                type: "integer"
                                            },
                                            StartPosition: {
                                                shape: "So"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "Distance", "DistanceUnit", "DurationSeconds", "RouteBBox" ],
                        members: {
                            DataSource: {},
                            Distance: {
                                type: "double"
                            },
                            DistanceUnit: {},
                            DurationSeconds: {
                                type: "double"
                            },
                            RouteBBox: {
                                shape: "S2i"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "routes."
            }
        },
        CalculateRouteMatrix: {
            http: {
                requestUri: "/routes/v0/calculators/{CalculatorName}/calculate/route-matrix",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName", "DeparturePositions", "DestinationPositions" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    },
                    CarModeOptions: {
                        shape: "S1n"
                    },
                    DepartNow: {
                        type: "boolean"
                    },
                    DeparturePositions: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    DepartureTime: {
                        shape: "St"
                    },
                    DestinationPositions: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    DistanceUnit: {},
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    TravelMode: {},
                    TruckModeOptions: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RouteMatrix", "Summary" ],
                members: {
                    RouteMatrix: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Distance: {
                                        type: "double"
                                    },
                                    DurationSeconds: {
                                        type: "double"
                                    },
                                    Error: {
                                        type: "structure",
                                        required: [ "Code" ],
                                        members: {
                                            Code: {},
                                            Message: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SnappedDeparturePositions: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    SnappedDestinationPositions: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "DistanceUnit", "ErrorCount", "RouteCount" ],
                        members: {
                            DataSource: {},
                            DistanceUnit: {},
                            ErrorCount: {
                                type: "integer"
                            },
                            RouteCount: {
                                type: "integer"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "routes."
            }
        },
        CreateGeofenceCollection: {
            http: {
                requestUri: "/geofencing/v0/collections",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {},
                    Description: {},
                    KmsKeyId: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    },
                    PricingPlanDataSource: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. No longer allowed."
                    },
                    Tags: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CollectionArn", "CollectionName", "CreateTime" ],
                members: {
                    CollectionArn: {},
                    CollectionName: {},
                    CreateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.geofencing."
            },
            idempotent: true
        },
        CreateKey: {
            http: {
                requestUri: "/metadata/v0/keys",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KeyName", "Restrictions" ],
                members: {
                    Description: {},
                    ExpireTime: {
                        shape: "St"
                    },
                    KeyName: {},
                    NoExpiry: {
                        type: "boolean"
                    },
                    Restrictions: {
                        shape: "S38"
                    },
                    Tags: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "Key", "KeyArn", "KeyName" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    Key: {
                        shape: "S1q"
                    },
                    KeyArn: {},
                    KeyName: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            },
            idempotent: true
        },
        CreateMap: {
            http: {
                requestUri: "/maps/v0/maps",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Configuration", "MapName" ],
                members: {
                    Configuration: {
                        shape: "S3h"
                    },
                    Description: {},
                    MapName: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    },
                    Tags: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "MapArn", "MapName" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    MapArn: {},
                    MapName: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.maps."
            },
            idempotent: true
        },
        CreatePlaceIndex: {
            http: {
                requestUri: "/places/v0/indexes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSource", "IndexName" ],
                members: {
                    DataSource: {},
                    DataSourceConfiguration: {
                        shape: "S3m"
                    },
                    Description: {},
                    IndexName: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    },
                    Tags: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "IndexArn", "IndexName" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    IndexArn: {},
                    IndexName: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.places."
            },
            idempotent: true
        },
        CreateRouteCalculator: {
            http: {
                requestUri: "/routes/v0/calculators",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName", "DataSource" ],
                members: {
                    CalculatorName: {},
                    DataSource: {},
                    Description: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    },
                    Tags: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CalculatorArn", "CalculatorName", "CreateTime" ],
                members: {
                    CalculatorArn: {},
                    CalculatorName: {},
                    CreateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.routes."
            },
            idempotent: true
        },
        CreateTracker: {
            http: {
                requestUri: "/tracking/v0/trackers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    Description: {},
                    EventBridgeEnabled: {
                        type: "boolean"
                    },
                    KmsKeyEnableGeospatialQueries: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    PositionFiltering: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    },
                    PricingPlanDataSource: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. No longer allowed."
                    },
                    Tags: {
                        shape: "S33"
                    },
                    TrackerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "TrackerArn", "TrackerName" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    TrackerArn: {},
                    TrackerName: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            },
            idempotent: true
        },
        DeleteGeofenceCollection: {
            http: {
                method: "DELETE",
                requestUri: "/geofencing/v0/collections/{CollectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.geofencing."
            },
            idempotent: true
        },
        DeleteKey: {
            http: {
                method: "DELETE",
                requestUri: "/metadata/v0/keys/{KeyName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KeyName" ],
                members: {
                    KeyName: {
                        location: "uri",
                        locationName: "KeyName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            },
            idempotent: true
        },
        DeleteMap: {
            http: {
                method: "DELETE",
                requestUri: "/maps/v0/maps/{MapName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.maps."
            },
            idempotent: true
        },
        DeletePlaceIndex: {
            http: {
                method: "DELETE",
                requestUri: "/places/v0/indexes/{IndexName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName" ],
                members: {
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.places."
            },
            idempotent: true
        },
        DeleteRouteCalculator: {
            http: {
                method: "DELETE",
                requestUri: "/routes/v0/calculators/{CalculatorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.routes."
            },
            idempotent: true
        },
        DeleteTracker: {
            http: {
                method: "DELETE",
                requestUri: "/tracking/v0/trackers/{TrackerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            },
            idempotent: true
        },
        DescribeGeofenceCollection: {
            http: {
                method: "GET",
                requestUri: "/geofencing/v0/collections/{CollectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CollectionArn", "CollectionName", "CreateTime", "Description", "UpdateTime" ],
                members: {
                    CollectionArn: {},
                    CollectionName: {},
                    CreateTime: {
                        shape: "St"
                    },
                    Description: {},
                    GeofenceCount: {
                        type: "integer"
                    },
                    KmsKeyId: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                    },
                    PricingPlanDataSource: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. Unused."
                    },
                    Tags: {
                        shape: "S33"
                    },
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.geofencing."
            }
        },
        DescribeKey: {
            http: {
                method: "GET",
                requestUri: "/metadata/v0/keys/{KeyName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KeyName" ],
                members: {
                    KeyName: {
                        location: "uri",
                        locationName: "KeyName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "ExpireTime", "Key", "KeyArn", "KeyName", "Restrictions", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    Description: {},
                    ExpireTime: {
                        shape: "St"
                    },
                    Key: {
                        shape: "S1q"
                    },
                    KeyArn: {},
                    KeyName: {},
                    Restrictions: {
                        shape: "S38"
                    },
                    Tags: {
                        shape: "S33"
                    },
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            }
        },
        DescribeMap: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Configuration", "CreateTime", "DataSource", "Description", "MapArn", "MapName", "UpdateTime" ],
                members: {
                    Configuration: {
                        shape: "S3h"
                    },
                    CreateTime: {
                        shape: "St"
                    },
                    DataSource: {},
                    Description: {},
                    MapArn: {},
                    MapName: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                    },
                    Tags: {
                        shape: "S33"
                    },
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.maps."
            }
        },
        DescribePlaceIndex: {
            http: {
                method: "GET",
                requestUri: "/places/v0/indexes/{IndexName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName" ],
                members: {
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "DataSource", "DataSourceConfiguration", "Description", "IndexArn", "IndexName", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    DataSource: {},
                    DataSourceConfiguration: {
                        shape: "S3m"
                    },
                    Description: {},
                    IndexArn: {},
                    IndexName: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                    },
                    Tags: {
                        shape: "S33"
                    },
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.places."
            }
        },
        DescribeRouteCalculator: {
            http: {
                method: "GET",
                requestUri: "/routes/v0/calculators/{CalculatorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CalculatorArn", "CalculatorName", "CreateTime", "DataSource", "Description", "UpdateTime" ],
                members: {
                    CalculatorArn: {},
                    CalculatorName: {},
                    CreateTime: {
                        shape: "St"
                    },
                    DataSource: {},
                    Description: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                    },
                    Tags: {
                        shape: "S33"
                    },
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.routes."
            }
        },
        DescribeTracker: {
            http: {
                method: "GET",
                requestUri: "/tracking/v0/trackers/{TrackerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "Description", "TrackerArn", "TrackerName", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    Description: {},
                    EventBridgeEnabled: {
                        type: "boolean"
                    },
                    KmsKeyEnableGeospatialQueries: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    PositionFiltering: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                    },
                    PricingPlanDataSource: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. Unused."
                    },
                    Tags: {
                        shape: "S33"
                    },
                    TrackerArn: {},
                    TrackerName: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            }
        },
        DisassociateTrackerConsumer: {
            http: {
                method: "DELETE",
                requestUri: "/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConsumerArn", "TrackerName" ],
                members: {
                    ConsumerArn: {
                        location: "uri",
                        locationName: "ConsumerArn"
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            }
        },
        GetDevicePosition: {
            http: {
                method: "GET",
                requestUri: "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId", "TrackerName" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Position", "ReceivedTime", "SampleTime" ],
                members: {
                    Accuracy: {
                        shape: "Sm"
                    },
                    DeviceId: {},
                    Position: {
                        shape: "So"
                    },
                    PositionProperties: {
                        shape: "Sq"
                    },
                    ReceivedTime: {
                        shape: "St"
                    },
                    SampleTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        GetDevicePositionHistory: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId", "TrackerName" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    },
                    EndTimeExclusive: {
                        shape: "St"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    StartTimeInclusive: {
                        shape: "St"
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DevicePositions" ],
                members: {
                    DevicePositions: {
                        shape: "S11"
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        GetGeofence: {
            http: {
                method: "GET",
                requestUri: "/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "GeofenceId" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    GeofenceId: {
                        location: "uri",
                        locationName: "GeofenceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "GeofenceId", "Geometry", "Status", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    GeofenceId: {},
                    GeofenceProperties: {
                        shape: "Sq"
                    },
                    Geometry: {
                        shape: "S18"
                    },
                    Status: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        GetMapGlyphs: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FontStack", "FontUnicodeRange", "MapName" ],
                members: {
                    FontStack: {
                        location: "uri",
                        locationName: "FontStack"
                    },
                    FontUnicodeRange: {
                        location: "uri",
                        locationName: "FontUnicodeRange"
                    },
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        GetMapSprites: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/sprites/{FileName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileName", "MapName" ],
                members: {
                    FileName: {
                        location: "uri",
                        locationName: "FileName"
                    },
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        GetMapStyleDescriptor: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/style-descriptor",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        GetMapTile: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName", "X", "Y", "Z" ],
                members: {
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    },
                    X: {
                        location: "uri",
                        locationName: "X"
                    },
                    Y: {
                        location: "uri",
                        locationName: "Y"
                    },
                    Z: {
                        location: "uri",
                        locationName: "Z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        GetPlace: {
            http: {
                method: "GET",
                requestUri: "/places/v0/indexes/{IndexName}/places/{PlaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName", "PlaceId" ],
                members: {
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    Language: {
                        location: "querystring",
                        locationName: "language"
                    },
                    PlaceId: {
                        location: "uri",
                        locationName: "PlaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Place" ],
                members: {
                    Place: {
                        shape: "S5b"
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        ListDevicePositions: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/list-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    FilterGeometry: {
                        type: "structure",
                        members: {
                            Polygon: {
                                shape: "S1a"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Position", "SampleTime" ],
                            members: {
                                Accuracy: {
                                    shape: "Sm"
                                },
                                DeviceId: {},
                                Position: {
                                    shape: "So"
                                },
                                PositionProperties: {
                                    shape: "Sq"
                                },
                                SampleTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        ListGeofenceCollections: {
            http: {
                requestUri: "/geofencing/v0/list-collections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CollectionName", "CreateTime", "Description", "UpdateTime" ],
                            members: {
                                CollectionName: {},
                                CreateTime: {
                                    shape: "St"
                                },
                                Description: {},
                                PricingPlan: {
                                    deprecated: true,
                                    deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                                },
                                PricingPlanDataSource: {
                                    deprecated: true,
                                    deprecatedMessage: "Deprecated. Unused."
                                },
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.geofencing."
            }
        },
        ListGeofences: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/list-geofences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "GeofenceId", "Geometry", "Status", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "St"
                                },
                                GeofenceId: {},
                                GeofenceProperties: {
                                    shape: "Sq"
                                },
                                Geometry: {
                                    shape: "S18"
                                },
                                Status: {},
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        ListKeys: {
            http: {
                requestUri: "/metadata/v0/list-keys",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            KeyStatus: {}
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "ExpireTime", "KeyName", "Restrictions", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "St"
                                },
                                Description: {},
                                ExpireTime: {
                                    shape: "St"
                                },
                                KeyName: {},
                                Restrictions: {
                                    shape: "S38"
                                },
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            }
        },
        ListMaps: {
            http: {
                requestUri: "/maps/v0/list-maps",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "DataSource", "Description", "MapName", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "St"
                                },
                                DataSource: {},
                                Description: {},
                                MapName: {},
                                PricingPlan: {
                                    deprecated: true,
                                    deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                                },
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.maps."
            }
        },
        ListPlaceIndexes: {
            http: {
                requestUri: "/places/v0/list-indexes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "DataSource", "Description", "IndexName", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "St"
                                },
                                DataSource: {},
                                Description: {},
                                IndexName: {},
                                PricingPlan: {
                                    deprecated: true,
                                    deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                                },
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.places."
            }
        },
        ListRouteCalculators: {
            http: {
                requestUri: "/routes/v0/list-calculators",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CalculatorName", "CreateTime", "DataSource", "Description", "UpdateTime" ],
                            members: {
                                CalculatorName: {},
                                CreateTime: {
                                    shape: "St"
                                },
                                DataSource: {},
                                Description: {},
                                PricingPlan: {
                                    deprecated: true,
                                    deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                                },
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.routes."
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S33"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            }
        },
        ListTrackerConsumers: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/list-consumers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ConsumerArns" ],
                members: {
                    ConsumerArns: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            }
        },
        ListTrackers: {
            http: {
                requestUri: "/tracking/v0/list-trackers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "Description", "TrackerName", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "St"
                                },
                                Description: {},
                                PricingPlan: {
                                    deprecated: true,
                                    deprecatedMessage: "Deprecated. Always returns RequestBasedUsage."
                                },
                                PricingPlanDataSource: {
                                    deprecated: true,
                                    deprecatedMessage: "Deprecated. Unused."
                                },
                                TrackerName: {},
                                UpdateTime: {
                                    shape: "St"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            }
        },
        PutGeofence: {
            http: {
                method: "PUT",
                requestUri: "/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "GeofenceId", "Geometry" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    GeofenceId: {
                        location: "uri",
                        locationName: "GeofenceId"
                    },
                    GeofenceProperties: {
                        shape: "Sq"
                    },
                    Geometry: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "GeofenceId", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "St"
                    },
                    GeofenceId: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        SearchPlaceIndexForPosition: {
            http: {
                requestUri: "/places/v0/indexes/{IndexName}/search/position",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName", "Position" ],
                members: {
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    Language: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Position: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results", "Summary" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Distance", "Place" ],
                            members: {
                                Distance: {
                                    type: "double"
                                },
                                Place: {
                                    shape: "S5b"
                                },
                                PlaceId: {}
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "Position" ],
                        members: {
                            DataSource: {},
                            Language: {},
                            MaxResults: {
                                type: "integer"
                            },
                            Position: {
                                shape: "So"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        SearchPlaceIndexForSuggestions: {
            http: {
                requestUri: "/places/v0/indexes/{IndexName}/search/suggestions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName", "Text" ],
                members: {
                    BiasPosition: {
                        shape: "So"
                    },
                    FilterBBox: {
                        shape: "S2i"
                    },
                    FilterCategories: {
                        shape: "S76"
                    },
                    FilterCountries: {
                        shape: "S77"
                    },
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    Language: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Text: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results", "Summary" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Text" ],
                            members: {
                                Categories: {
                                    shape: "S5c"
                                },
                                PlaceId: {},
                                SupplementalCategories: {
                                    shape: "S5f"
                                },
                                Text: {}
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "Text" ],
                        members: {
                            BiasPosition: {
                                shape: "So"
                            },
                            DataSource: {},
                            FilterBBox: {
                                shape: "S2i"
                            },
                            FilterCategories: {
                                shape: "S76"
                            },
                            FilterCountries: {
                                shape: "S77"
                            },
                            Language: {},
                            MaxResults: {
                                type: "integer"
                            },
                            Text: {
                                shape: "S7f"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        SearchPlaceIndexForText: {
            http: {
                requestUri: "/places/v0/indexes/{IndexName}/search/text",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName", "Text" ],
                members: {
                    BiasPosition: {
                        shape: "So"
                    },
                    FilterBBox: {
                        shape: "S2i"
                    },
                    FilterCategories: {
                        shape: "S76"
                    },
                    FilterCountries: {
                        shape: "S77"
                    },
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    Key: {
                        shape: "S1q",
                        location: "querystring",
                        locationName: "key"
                    },
                    Language: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Text: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results", "Summary" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Place" ],
                            members: {
                                Distance: {
                                    type: "double"
                                },
                                Place: {
                                    shape: "S5b"
                                },
                                PlaceId: {},
                                Relevance: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "Text" ],
                        members: {
                            BiasPosition: {
                                shape: "So"
                            },
                            DataSource: {},
                            FilterBBox: {
                                shape: "S2i"
                            },
                            FilterCategories: {
                                shape: "S76"
                            },
                            FilterCountries: {
                                shape: "S77"
                            },
                            Language: {},
                            MaxResults: {
                                type: "integer"
                            },
                            ResultBBox: {
                                shape: "S2i"
                            },
                            Text: {
                                shape: "S7f"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            },
            idempotent: true
        },
        UpdateGeofenceCollection: {
            http: {
                method: "PATCH",
                requestUri: "/geofencing/v0/collections/{CollectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    Description: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    },
                    PricingPlanDataSource: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. No longer allowed."
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CollectionArn", "CollectionName", "UpdateTime" ],
                members: {
                    CollectionArn: {},
                    CollectionName: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.geofencing."
            },
            idempotent: true
        },
        UpdateKey: {
            http: {
                method: "PATCH",
                requestUri: "/metadata/v0/keys/{KeyName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "KeyName" ],
                members: {
                    Description: {},
                    ExpireTime: {
                        shape: "St"
                    },
                    ForceUpdate: {
                        type: "boolean"
                    },
                    KeyName: {
                        location: "uri",
                        locationName: "KeyName"
                    },
                    NoExpiry: {
                        type: "boolean"
                    },
                    Restrictions: {
                        shape: "S38"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "KeyArn", "KeyName", "UpdateTime" ],
                members: {
                    KeyArn: {},
                    KeyName: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.metadata."
            },
            idempotent: true
        },
        UpdateMap: {
            http: {
                method: "PATCH",
                requestUri: "/maps/v0/maps/{MapName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    ConfigurationUpdate: {
                        type: "structure",
                        members: {
                            PoliticalView: {}
                        }
                    },
                    Description: {},
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    },
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MapArn", "MapName", "UpdateTime" ],
                members: {
                    MapArn: {},
                    MapName: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.maps."
            },
            idempotent: true
        },
        UpdatePlaceIndex: {
            http: {
                method: "PATCH",
                requestUri: "/places/v0/indexes/{IndexName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName" ],
                members: {
                    DataSourceConfiguration: {
                        shape: "S3m"
                    },
                    Description: {},
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IndexArn", "IndexName", "UpdateTime" ],
                members: {
                    IndexArn: {},
                    IndexName: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.places."
            },
            idempotent: true
        },
        UpdateRouteCalculator: {
            http: {
                method: "PATCH",
                requestUri: "/routes/v0/calculators/{CalculatorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    },
                    Description: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CalculatorArn", "CalculatorName", "UpdateTime" ],
                members: {
                    CalculatorArn: {},
                    CalculatorName: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.routes."
            },
            idempotent: true
        },
        UpdateTracker: {
            http: {
                method: "PATCH",
                requestUri: "/tracking/v0/trackers/{TrackerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    Description: {},
                    EventBridgeEnabled: {
                        type: "boolean"
                    },
                    KmsKeyEnableGeospatialQueries: {
                        type: "boolean"
                    },
                    PositionFiltering: {},
                    PricingPlan: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. If included, the only allowed value is RequestBasedUsage."
                    },
                    PricingPlanDataSource: {
                        deprecated: true,
                        deprecatedMessage: "Deprecated. No longer allowed."
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrackerArn", "TrackerName", "UpdateTime" ],
                members: {
                    TrackerArn: {},
                    TrackerName: {},
                    UpdateTime: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "cp.tracking."
            },
            idempotent: true
        }
    },
    shapes: {
        Sb: {
            type: "structure",
            members: {
                Code: {},
                Message: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "DeviceId", "Position", "SampleTime" ],
            members: {
                Accuracy: {
                    shape: "Sm"
                },
                DeviceId: {},
                Position: {
                    shape: "So"
                },
                PositionProperties: {
                    shape: "Sq"
                },
                SampleTime: {
                    shape: "St"
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "Horizontal" ],
            members: {
                Horizontal: {
                    type: "double"
                }
            }
        },
        So: {
            type: "list",
            member: {
                type: "double"
            },
            sensitive: true
        },
        Sq: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        St: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S11: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Position", "ReceivedTime", "SampleTime" ],
                members: {
                    Accuracy: {
                        shape: "Sm"
                    },
                    DeviceId: {},
                    Position: {
                        shape: "So"
                    },
                    PositionProperties: {
                        shape: "Sq"
                    },
                    ReceivedTime: {
                        shape: "St"
                    },
                    SampleTime: {
                        shape: "St"
                    }
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                Circle: {
                    type: "structure",
                    required: [ "Center", "Radius" ],
                    members: {
                        Center: {
                            shape: "So"
                        },
                        Radius: {
                            type: "double"
                        }
                    },
                    sensitive: true
                },
                Polygon: {
                    shape: "S1a"
                }
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "list",
                member: {
                    shape: "So"
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                AvoidFerries: {
                    type: "boolean"
                },
                AvoidTolls: {
                    type: "boolean"
                }
            }
        },
        S1q: {
            type: "string",
            sensitive: true
        },
        S1t: {
            type: "structure",
            members: {
                AvoidFerries: {
                    type: "boolean"
                },
                AvoidTolls: {
                    type: "boolean"
                },
                Dimensions: {
                    type: "structure",
                    members: {
                        Height: {
                            type: "double"
                        },
                        Length: {
                            type: "double"
                        },
                        Unit: {},
                        Width: {
                            type: "double"
                        }
                    }
                },
                Weight: {
                    type: "structure",
                    members: {
                        Total: {
                            type: "double"
                        },
                        Unit: {}
                    }
                }
            }
        },
        S2i: {
            type: "list",
            member: {
                type: "double"
            },
            sensitive: true
        },
        S33: {
            type: "map",
            key: {},
            value: {}
        },
        S38: {
            type: "structure",
            required: [ "AllowActions", "AllowResources" ],
            members: {
                AllowActions: {
                    type: "list",
                    member: {}
                },
                AllowReferers: {
                    type: "list",
                    member: {}
                },
                AllowResources: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3h: {
            type: "structure",
            required: [ "Style" ],
            members: {
                PoliticalView: {},
                Style: {}
            }
        },
        S3m: {
            type: "structure",
            members: {
                IntendedUse: {}
            }
        },
        S5b: {
            type: "structure",
            required: [ "Geometry" ],
            members: {
                AddressNumber: {},
                Categories: {
                    shape: "S5c"
                },
                Country: {},
                Geometry: {
                    type: "structure",
                    members: {
                        Point: {
                            shape: "So"
                        }
                    }
                },
                Interpolated: {
                    type: "boolean"
                },
                Label: {},
                Municipality: {},
                Neighborhood: {},
                PostalCode: {},
                Region: {},
                Street: {},
                SubMunicipality: {},
                SubRegion: {},
                SupplementalCategories: {
                    shape: "S5f"
                },
                TimeZone: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {},
                        Offset: {
                            type: "integer"
                        }
                    }
                },
                UnitNumber: {},
                UnitType: {}
            }
        },
        S5c: {
            type: "list",
            member: {}
        },
        S5f: {
            type: "list",
            member: {}
        },
        S76: {
            type: "list",
            member: {}
        },
        S77: {
            type: "list",
            member: {}
        },
        S7f: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        GetDevicePositionHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DevicePositions"
        },
        ListDevicePositions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListGeofenceCollections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListGeofences: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListKeys: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListMaps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListPlaceIndexes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListRouteCalculators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListTrackerConsumers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConsumerArns"
        },
        ListTrackers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        }
    }
};

AWS.apiLoader.services["wellarchitected"] = {};

AWS.WellArchitected = AWS.Service.defineService("wellarchitected", [ "2020-03-31" ]);

AWS.apiLoader.services["wellarchitected"]["2020-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-03-31",
        endpointPrefix: "wellarchitected",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Well-Architected",
        serviceFullName: "AWS Well-Architected Tool",
        serviceId: "WellArchitected",
        signatureVersion: "v4",
        signingName: "wellarchitected",
        uid: "wellarchitected-2020-03-31"
    },
    operations: {
        AssociateLenses: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/associateLenses"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAliases" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAliases: {
                        shape: "S3"
                    }
                }
            }
        },
        AssociateProfiles: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/associateProfiles"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "ProfileArns" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    ProfileArns: {
                        shape: "S6"
                    }
                }
            }
        },
        CreateLensShare: {
            http: {
                requestUri: "/lenses/{LensAlias}/shares"
            },
            input: {
                type: "structure",
                required: [ "LensAlias", "SharedWith", "ClientRequestToken" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    SharedWith: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareId: {}
                }
            }
        },
        CreateLensVersion: {
            http: {
                requestUri: "/lenses/{LensAlias}/versions"
            },
            input: {
                type: "structure",
                required: [ "LensAlias", "LensVersion", "ClientRequestToken" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    LensVersion: {},
                    IsMajorVersion: {
                        type: "boolean"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensArn: {},
                    LensVersion: {}
                }
            }
        },
        CreateMilestone: {
            http: {
                requestUri: "/workloads/{WorkloadId}/milestones"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "MilestoneName", "ClientRequestToken" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    MilestoneName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    }
                }
            }
        },
        CreateProfile: {
            http: {
                requestUri: "/profiles"
            },
            input: {
                type: "structure",
                required: [ "ProfileName", "ProfileDescription", "ProfileQuestions", "ClientRequestToken" ],
                members: {
                    ProfileName: {},
                    ProfileDescription: {},
                    ProfileQuestions: {
                        shape: "Sp"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileArn: {},
                    ProfileVersion: {}
                }
            }
        },
        CreateProfileShare: {
            http: {
                requestUri: "/profiles/{ProfileArn}/shares"
            },
            input: {
                type: "structure",
                required: [ "ProfileArn", "SharedWith", "ClientRequestToken" ],
                members: {
                    ProfileArn: {
                        location: "uri",
                        locationName: "ProfileArn"
                    },
                    SharedWith: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareId: {},
                    ProfileArn: {}
                }
            }
        },
        CreateReviewTemplate: {
            http: {
                requestUri: "/reviewTemplates"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "Description", "Lenses", "ClientRequestToken" ],
                members: {
                    TemplateName: {},
                    Description: {},
                    Lenses: {
                        shape: "S14"
                    },
                    Notes: {},
                    Tags: {
                        shape: "Su"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {}
                }
            }
        },
        CreateTemplateShare: {
            http: {
                requestUri: "/templates/shares/{TemplateArn}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "SharedWith", "ClientRequestToken" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    SharedWith: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {},
                    ShareId: {}
                }
            }
        },
        CreateWorkload: {
            http: {
                requestUri: "/workloads"
            },
            input: {
                type: "structure",
                required: [ "WorkloadName", "Description", "Environment", "Lenses", "ClientRequestToken" ],
                members: {
                    WorkloadName: {},
                    Description: {},
                    Environment: {},
                    AccountIds: {
                        shape: "S1e"
                    },
                    AwsRegions: {
                        shape: "S1g"
                    },
                    NonAwsRegions: {
                        shape: "S1i"
                    },
                    PillarPriorities: {
                        shape: "S1k"
                    },
                    ArchitecturalDesign: {},
                    ReviewOwner: {},
                    IndustryType: {},
                    Industry: {},
                    Lenses: {
                        shape: "S1q"
                    },
                    Notes: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Su"
                    },
                    DiscoveryConfig: {
                        shape: "S1r"
                    },
                    Applications: {
                        shape: "S1v"
                    },
                    ProfileArns: {
                        type: "list",
                        member: {}
                    },
                    ReviewTemplateArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadArn: {}
                }
            }
        },
        CreateWorkloadShare: {
            http: {
                requestUri: "/workloads/{WorkloadId}/shares"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "SharedWith", "PermissionType", "ClientRequestToken" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    SharedWith: {},
                    PermissionType: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    ShareId: {}
                }
            }
        },
        DeleteLens: {
            http: {
                method: "DELETE",
                requestUri: "/lenses/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "LensAlias", "ClientRequestToken", "LensStatus" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    },
                    LensStatus: {
                        location: "querystring",
                        locationName: "LensStatus"
                    }
                }
            }
        },
        DeleteLensShare: {
            http: {
                method: "DELETE",
                requestUri: "/lenses/{LensAlias}/shares/{ShareId}"
            },
            input: {
                type: "structure",
                required: [ "ShareId", "LensAlias", "ClientRequestToken" ],
                members: {
                    ShareId: {
                        location: "uri",
                        locationName: "ShareId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DeleteProfile: {
            http: {
                method: "DELETE",
                requestUri: "/profiles/{ProfileArn}"
            },
            input: {
                type: "structure",
                required: [ "ProfileArn", "ClientRequestToken" ],
                members: {
                    ProfileArn: {
                        location: "uri",
                        locationName: "ProfileArn"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DeleteProfileShare: {
            http: {
                method: "DELETE",
                requestUri: "/profiles/{ProfileArn}/shares/{ShareId}"
            },
            input: {
                type: "structure",
                required: [ "ShareId", "ProfileArn", "ClientRequestToken" ],
                members: {
                    ShareId: {
                        location: "uri",
                        locationName: "ShareId"
                    },
                    ProfileArn: {
                        location: "uri",
                        locationName: "ProfileArn"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DeleteReviewTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/reviewTemplates/{TemplateArn}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "ClientRequestToken" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DeleteTemplateShare: {
            http: {
                method: "DELETE",
                requestUri: "/templates/shares/{TemplateArn}/{ShareId}"
            },
            input: {
                type: "structure",
                required: [ "ShareId", "TemplateArn", "ClientRequestToken" ],
                members: {
                    ShareId: {
                        location: "uri",
                        locationName: "ShareId"
                    },
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DeleteWorkload: {
            http: {
                method: "DELETE",
                requestUri: "/workloads/{WorkloadId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "ClientRequestToken" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DeleteWorkloadShare: {
            http: {
                method: "DELETE",
                requestUri: "/workloads/{WorkloadId}/shares/{ShareId}"
            },
            input: {
                type: "structure",
                required: [ "ShareId", "WorkloadId", "ClientRequestToken" ],
                members: {
                    ShareId: {
                        location: "uri",
                        locationName: "ShareId"
                    },
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DisassociateLenses: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/disassociateLenses"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAliases" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAliases: {
                        shape: "S3"
                    }
                }
            }
        },
        DisassociateProfiles: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/disassociateProfiles"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "ProfileArns" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    ProfileArns: {
                        shape: "S6"
                    }
                }
            }
        },
        ExportLens: {
            http: {
                method: "GET",
                requestUri: "/lenses/{LensAlias}/export"
            },
            input: {
                type: "structure",
                required: [ "LensAlias" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    LensVersion: {
                        location: "querystring",
                        locationName: "LensVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensJSON: {}
                }
            }
        },
        GetAnswer: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias", "QuestionId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    QuestionId: {
                        location: "uri",
                        locationName: "QuestionId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensAlias: {},
                    LensArn: {},
                    Answer: {
                        shape: "S2k"
                    }
                }
            }
        },
        GetConsolidatedReport: {
            http: {
                method: "GET",
                requestUri: "/consolidatedReport"
            },
            input: {
                type: "structure",
                required: [ "Format" ],
                members: {
                    Format: {
                        location: "querystring",
                        locationName: "Format"
                    },
                    IncludeSharedResources: {
                        location: "querystring",
                        locationName: "IncludeSharedResources",
                        type: "boolean"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MetricType: {},
                                RiskCounts: {
                                    shape: "S3j"
                                },
                                WorkloadId: {},
                                WorkloadName: {},
                                WorkloadArn: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Lenses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LensArn: {},
                                            Pillars: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PillarId: {},
                                                        RiskCounts: {
                                                            shape: "S3j"
                                                        },
                                                        Questions: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    QuestionId: {},
                                                                    Risk: {},
                                                                    BestPractices: {
                                                                        type: "list",
                                                                        member: {
                                                                            type: "structure",
                                                                            members: {
                                                                                ChoiceId: {},
                                                                                ChoiceTitle: {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            RiskCounts: {
                                                shape: "S3j"
                                            }
                                        }
                                    }
                                },
                                LensesAppliedCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Base64String: {}
                }
            }
        },
        GetLens: {
            http: {
                method: "GET",
                requestUri: "/lenses/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "LensAlias" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    LensVersion: {
                        location: "querystring",
                        locationName: "LensVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Lens: {
                        type: "structure",
                        members: {
                            LensArn: {},
                            LensVersion: {},
                            Name: {},
                            Description: {},
                            Owner: {},
                            ShareInvitationId: {},
                            Tags: {
                                shape: "Su"
                            }
                        }
                    }
                }
            }
        },
        GetLensReview: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensReview: {
                        shape: "S45"
                    }
                }
            }
        },
        GetLensReviewReport: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/report"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensReviewReport: {
                        type: "structure",
                        members: {
                            LensAlias: {},
                            LensArn: {},
                            Base64String: {}
                        }
                    }
                }
            }
        },
        GetLensVersionDifference: {
            http: {
                method: "GET",
                requestUri: "/lenses/{LensAlias}/versionDifference"
            },
            input: {
                type: "structure",
                required: [ "LensAlias" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    BaseLensVersion: {
                        location: "querystring",
                        locationName: "BaseLensVersion"
                    },
                    TargetLensVersion: {
                        location: "querystring",
                        locationName: "TargetLensVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensAlias: {},
                    LensArn: {},
                    BaseLensVersion: {},
                    TargetLensVersion: {},
                    LatestLensVersion: {},
                    VersionDifferences: {
                        type: "structure",
                        members: {
                            PillarDifferences: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        PillarId: {},
                                        PillarName: {},
                                        DifferenceStatus: {},
                                        QuestionDifferences: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    QuestionId: {},
                                                    QuestionTitle: {},
                                                    DifferenceStatus: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetMilestone: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/milestones/{MilestoneNumber}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "MilestoneNumber" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    MilestoneNumber: {
                        location: "uri",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    Milestone: {
                        type: "structure",
                        members: {
                            MilestoneNumber: {
                                type: "integer"
                            },
                            MilestoneName: {},
                            RecordedAt: {
                                type: "timestamp"
                            },
                            Workload: {
                                shape: "S4q"
                            }
                        }
                    }
                }
            }
        },
        GetProfile: {
            http: {
                method: "GET",
                requestUri: "/profiles/{ProfileArn}"
            },
            input: {
                type: "structure",
                required: [ "ProfileArn" ],
                members: {
                    ProfileArn: {
                        location: "uri",
                        locationName: "ProfileArn"
                    },
                    ProfileVersion: {
                        location: "querystring",
                        locationName: "ProfileVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Profile: {
                        shape: "S4v"
                    }
                }
            }
        },
        GetProfileTemplate: {
            http: {
                method: "GET",
                requestUri: "/profileTemplate"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ProfileTemplate: {
                        type: "structure",
                        members: {
                            TemplateName: {},
                            TemplateQuestions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        QuestionId: {},
                                        QuestionTitle: {},
                                        QuestionDescription: {},
                                        QuestionChoices: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    ChoiceId: {},
                                                    ChoiceTitle: {},
                                                    ChoiceDescription: {}
                                                }
                                            }
                                        },
                                        MinSelectedChoices: {
                                            type: "integer"
                                        },
                                        MaxSelectedChoices: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            CreatedAt: {
                                type: "timestamp"
                            },
                            UpdatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetReviewTemplate: {
            http: {
                method: "GET",
                requestUri: "/reviewTemplates/{TemplateArn}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReviewTemplate: {
                        shape: "S5c"
                    }
                }
            }
        },
        GetReviewTemplateAnswer: {
            http: {
                method: "GET",
                requestUri: "/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/answers/{QuestionId}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "LensAlias", "QuestionId" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    QuestionId: {
                        location: "uri",
                        locationName: "QuestionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {},
                    LensAlias: {},
                    Answer: {
                        shape: "S5i"
                    }
                }
            }
        },
        GetReviewTemplateLensReview: {
            http: {
                method: "GET",
                requestUri: "/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "LensAlias" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {},
                    LensReview: {
                        shape: "S5m"
                    }
                }
            }
        },
        GetWorkload: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workload: {
                        shape: "S4q"
                    }
                }
            }
        },
        ImportLens: {
            http: {
                method: "PUT",
                requestUri: "/importLens"
            },
            input: {
                type: "structure",
                required: [ "JSONString", "ClientRequestToken" ],
                members: {
                    LensAlias: {},
                    JSONString: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensArn: {},
                    Status: {}
                }
            }
        },
        ListAnswers: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    PillarId: {
                        location: "querystring",
                        locationName: "PillarId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    QuestionPriority: {
                        location: "querystring",
                        locationName: "QuestionPriority"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensAlias: {},
                    LensArn: {},
                    AnswerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QuestionId: {},
                                PillarId: {},
                                QuestionTitle: {},
                                Choices: {
                                    shape: "S2q"
                                },
                                SelectedChoices: {
                                    shape: "S31"
                                },
                                ChoiceAnswerSummaries: {
                                    shape: "S60"
                                },
                                IsApplicable: {
                                    type: "boolean"
                                },
                                Risk: {},
                                Reason: {},
                                QuestionType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCheckDetails: {
            http: {
                requestUri: "/workloads/{WorkloadId}/checks"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensArn", "PillarId", "QuestionId", "ChoiceId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    LensArn: {},
                    PillarId: {},
                    QuestionId: {},
                    ChoiceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CheckDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Description: {},
                                Provider: {},
                                LensArn: {},
                                PillarId: {},
                                QuestionId: {},
                                ChoiceId: {},
                                Status: {},
                                AccountId: {},
                                FlaggedResources: {
                                    type: "integer"
                                },
                                Reason: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCheckSummaries: {
            http: {
                requestUri: "/workloads/{WorkloadId}/checkSummaries"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensArn", "PillarId", "QuestionId", "ChoiceId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    LensArn: {},
                    PillarId: {},
                    QuestionId: {},
                    ChoiceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CheckSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Provider: {},
                                Description: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                LensArn: {},
                                PillarId: {},
                                QuestionId: {},
                                ChoiceId: {},
                                Status: {},
                                AccountSummary: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLensReviewImprovements: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/improvements"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    PillarId: {
                        location: "querystring",
                        locationName: "PillarId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    QuestionPriority: {
                        location: "querystring",
                        locationName: "QuestionPriority"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensAlias: {},
                    LensArn: {},
                    ImprovementSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QuestionId: {},
                                PillarId: {},
                                QuestionTitle: {},
                                Risk: {},
                                ImprovementPlanUrl: {},
                                ImprovementPlans: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ChoiceId: {},
                                            DisplayText: {},
                                            ImprovementPlanUrl: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLensReviews: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensReviewSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LensAlias: {},
                                LensArn: {},
                                LensVersion: {},
                                LensName: {},
                                LensStatus: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                RiskCounts: {
                                    shape: "S3j"
                                },
                                Profiles: {
                                    shape: "S4a"
                                },
                                PrioritizedRiskCounts: {
                                    shape: "S3j"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLensShares: {
            http: {
                method: "GET",
                requestUri: "/lenses/{LensAlias}/shares"
            },
            input: {
                type: "structure",
                required: [ "LensAlias" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    SharedWithPrefix: {
                        location: "querystring",
                        locationName: "SharedWithPrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "Status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensShareSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ShareId: {},
                                SharedWith: {},
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLenses: {
            http: {
                method: "GET",
                requestUri: "/lenses"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    LensType: {
                        location: "querystring",
                        locationName: "LensType"
                    },
                    LensStatus: {
                        location: "querystring",
                        locationName: "LensStatus"
                    },
                    LensName: {
                        location: "querystring",
                        locationName: "LensName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LensArn: {},
                                LensAlias: {},
                                LensName: {},
                                LensType: {},
                                Description: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                LensVersion: {},
                                Owner: {},
                                LensStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMilestones: {
            http: {
                requestUri: "/workloads/{WorkloadId}/milestonesSummaries"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MilestoneNumber: {
                                    type: "integer"
                                },
                                MilestoneName: {},
                                RecordedAt: {
                                    type: "timestamp"
                                },
                                WorkloadSummary: {
                                    shape: "S7d"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNotifications: {
            http: {
                requestUri: "/notifications"
            },
            input: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotificationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                LensUpgradeSummary: {
                                    type: "structure",
                                    members: {
                                        WorkloadId: {},
                                        WorkloadName: {},
                                        LensAlias: {},
                                        LensArn: {},
                                        CurrentLensVersion: {},
                                        LatestLensVersion: {},
                                        ResourceArn: {},
                                        ResourceName: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileNotifications: {
            http: {
                method: "GET",
                requestUri: "/profileNotifications/"
            },
            input: {
                type: "structure",
                members: {
                    WorkloadId: {
                        location: "querystring",
                        locationName: "WorkloadId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NotificationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CurrentProfileVersion: {},
                                LatestProfileVersion: {},
                                Type: {},
                                ProfileArn: {},
                                ProfileName: {},
                                WorkloadId: {},
                                WorkloadName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileShares: {
            http: {
                method: "GET",
                requestUri: "/profiles/{ProfileArn}/shares"
            },
            input: {
                type: "structure",
                required: [ "ProfileArn" ],
                members: {
                    ProfileArn: {
                        location: "uri",
                        locationName: "ProfileArn"
                    },
                    SharedWithPrefix: {
                        location: "querystring",
                        locationName: "SharedWithPrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "Status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileShareSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ShareId: {},
                                SharedWith: {},
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProfiles: {
            http: {
                method: "GET",
                requestUri: "/profileSummaries"
            },
            input: {
                type: "structure",
                members: {
                    ProfileNamePrefix: {
                        location: "querystring",
                        locationName: "ProfileNamePrefix"
                    },
                    ProfileOwnerType: {
                        location: "querystring",
                        locationName: "ProfileOwnerType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProfileArn: {},
                                ProfileVersion: {},
                                ProfileName: {},
                                ProfileDescription: {},
                                Owner: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListReviewTemplateAnswers: {
            http: {
                method: "GET",
                requestUri: "/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/answers"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "LensAlias" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    PillarId: {
                        location: "querystring",
                        locationName: "PillarId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {},
                    LensAlias: {},
                    AnswerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QuestionId: {},
                                PillarId: {},
                                QuestionTitle: {},
                                Choices: {
                                    shape: "S2q"
                                },
                                SelectedChoices: {
                                    shape: "S31"
                                },
                                ChoiceAnswerSummaries: {
                                    shape: "S60"
                                },
                                IsApplicable: {
                                    type: "boolean"
                                },
                                AnswerStatus: {},
                                Reason: {},
                                QuestionType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListReviewTemplates: {
            http: {
                method: "GET",
                requestUri: "/reviewTemplates"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReviewTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                Lenses: {
                                    shape: "S14"
                                },
                                Owner: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                TemplateArn: {},
                                TemplateName: {},
                                UpdateStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListShareInvitations: {
            http: {
                method: "GET",
                requestUri: "/shareInvitations"
            },
            input: {
                type: "structure",
                members: {
                    WorkloadNamePrefix: {
                        location: "querystring",
                        locationName: "WorkloadNamePrefix"
                    },
                    LensNamePrefix: {
                        location: "querystring",
                        locationName: "LensNamePrefix"
                    },
                    ShareResourceType: {
                        location: "querystring",
                        locationName: "ShareResourceType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    ProfileNamePrefix: {
                        location: "querystring",
                        locationName: "ProfileNamePrefix"
                    },
                    TemplateNamePrefix: {
                        location: "querystring",
                        locationName: "TemplateNamePrefix"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareInvitationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ShareInvitationId: {},
                                SharedBy: {},
                                SharedWith: {},
                                PermissionType: {},
                                ShareResourceType: {},
                                WorkloadName: {},
                                WorkloadId: {},
                                LensName: {},
                                LensArn: {},
                                ProfileName: {},
                                ProfileArn: {},
                                TemplateName: {},
                                TemplateArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{WorkloadArn}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadArn" ],
                members: {
                    WorkloadArn: {
                        location: "uri",
                        locationName: "WorkloadArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Su"
                    }
                }
            }
        },
        ListTemplateShares: {
            http: {
                method: "GET",
                requestUri: "/templates/shares/{TemplateArn}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    SharedWithPrefix: {
                        location: "querystring",
                        locationName: "SharedWithPrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "Status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {},
                    TemplateShareSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ShareId: {},
                                SharedWith: {},
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkloadShares: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/shares"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    SharedWithPrefix: {
                        location: "querystring",
                        locationName: "SharedWithPrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "Status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadShareSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ShareId: {},
                                SharedWith: {},
                                PermissionType: {},
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkloads: {
            http: {
                requestUri: "/workloadsSummaries"
            },
            input: {
                type: "structure",
                members: {
                    WorkloadNamePrefix: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadSummaries: {
                        type: "list",
                        member: {
                            shape: "S7d"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{WorkloadArn}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadArn", "Tags" ],
                members: {
                    WorkloadArn: {
                        location: "uri",
                        locationName: "WorkloadArn"
                    },
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{WorkloadArn}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadArn", "TagKeys" ],
                members: {
                    WorkloadArn: {
                        location: "uri",
                        locationName: "WorkloadArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAnswer: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias", "QuestionId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    QuestionId: {
                        location: "uri",
                        locationName: "QuestionId"
                    },
                    SelectedChoices: {
                        shape: "S31"
                    },
                    ChoiceUpdates: {
                        shape: "S95"
                    },
                    Notes: {},
                    IsApplicable: {
                        type: "boolean"
                    },
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    LensAlias: {},
                    LensArn: {},
                    Answer: {
                        shape: "S2k"
                    }
                }
            }
        },
        UpdateGlobalSettings: {
            http: {
                method: "PATCH",
                requestUri: "/global-settings"
            },
            input: {
                type: "structure",
                members: {
                    OrganizationSharingStatus: {},
                    DiscoveryIntegrationStatus: {}
                }
            }
        },
        UpdateLensReview: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    LensNotes: {},
                    PillarNotes: {
                        shape: "S9c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    LensReview: {
                        shape: "S45"
                    }
                }
            }
        },
        UpdateProfile: {
            http: {
                method: "PATCH",
                requestUri: "/profiles/{ProfileArn}"
            },
            input: {
                type: "structure",
                required: [ "ProfileArn" ],
                members: {
                    ProfileArn: {
                        location: "uri",
                        locationName: "ProfileArn"
                    },
                    ProfileDescription: {},
                    ProfileQuestions: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Profile: {
                        shape: "S4v"
                    }
                }
            }
        },
        UpdateReviewTemplate: {
            http: {
                method: "PATCH",
                requestUri: "/reviewTemplates/{TemplateArn}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    TemplateName: {},
                    Description: {},
                    Notes: {},
                    LensesToAssociate: {
                        shape: "S9h"
                    },
                    LensesToDisassociate: {
                        shape: "S9h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReviewTemplate: {
                        shape: "S5c"
                    }
                }
            }
        },
        UpdateReviewTemplateAnswer: {
            http: {
                method: "PATCH",
                requestUri: "/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/answers/{QuestionId}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "LensAlias", "QuestionId" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    QuestionId: {
                        location: "uri",
                        locationName: "QuestionId"
                    },
                    SelectedChoices: {
                        shape: "S31"
                    },
                    ChoiceUpdates: {
                        shape: "S95"
                    },
                    Notes: {},
                    IsApplicable: {
                        type: "boolean"
                    },
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {},
                    LensAlias: {},
                    Answer: {
                        shape: "S5i"
                    }
                }
            }
        },
        UpdateReviewTemplateLensReview: {
            http: {
                method: "PATCH",
                requestUri: "/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "LensAlias" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    LensNotes: {},
                    PillarNotes: {
                        shape: "S9c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateArn: {},
                    LensReview: {
                        shape: "S5m"
                    }
                }
            }
        },
        UpdateShareInvitation: {
            http: {
                method: "PATCH",
                requestUri: "/shareInvitations/{ShareInvitationId}"
            },
            input: {
                type: "structure",
                required: [ "ShareInvitationId", "ShareInvitationAction" ],
                members: {
                    ShareInvitationId: {
                        location: "uri",
                        locationName: "ShareInvitationId"
                    },
                    ShareInvitationAction: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareInvitation: {
                        type: "structure",
                        members: {
                            ShareInvitationId: {},
                            ShareResourceType: {},
                            WorkloadId: {},
                            LensAlias: {},
                            LensArn: {},
                            ProfileArn: {},
                            TemplateArn: {}
                        }
                    }
                }
            }
        },
        UpdateWorkload: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    WorkloadName: {},
                    Description: {},
                    Environment: {},
                    AccountIds: {
                        shape: "S1e"
                    },
                    AwsRegions: {
                        shape: "S1g"
                    },
                    NonAwsRegions: {
                        shape: "S1i"
                    },
                    PillarPriorities: {
                        shape: "S1k"
                    },
                    ArchitecturalDesign: {},
                    ReviewOwner: {},
                    IsReviewOwnerUpdateAcknowledged: {
                        type: "boolean"
                    },
                    IndustryType: {},
                    Industry: {},
                    Notes: {},
                    ImprovementStatus: {},
                    DiscoveryConfig: {
                        shape: "S1r"
                    },
                    Applications: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workload: {
                        shape: "S4q"
                    }
                }
            }
        },
        UpdateWorkloadShare: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/shares/{ShareId}"
            },
            input: {
                type: "structure",
                required: [ "ShareId", "WorkloadId", "PermissionType" ],
                members: {
                    ShareId: {
                        location: "uri",
                        locationName: "ShareId"
                    },
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    PermissionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadShare: {
                        type: "structure",
                        members: {
                            ShareId: {},
                            SharedBy: {},
                            SharedWith: {},
                            PermissionType: {},
                            Status: {},
                            WorkloadName: {},
                            WorkloadId: {}
                        }
                    }
                }
            }
        },
        UpgradeLensReview: {
            http: {
                method: "PUT",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/upgrade"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias", "MilestoneName" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    MilestoneName: {},
                    ClientRequestToken: {}
                }
            }
        },
        UpgradeProfileVersion: {
            http: {
                method: "PUT",
                requestUri: "/workloads/{WorkloadId}/profiles/{ProfileArn}/upgrade"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "ProfileArn" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    ProfileArn: {
                        location: "uri",
                        locationName: "ProfileArn"
                    },
                    MilestoneName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            }
        },
        UpgradeReviewTemplateLensReview: {
            http: {
                method: "PUT",
                requestUri: "/reviewTemplates/{TemplateArn}/lensReviews/{LensAlias}/upgrade"
            },
            input: {
                type: "structure",
                required: [ "TemplateArn", "LensAlias" ],
                members: {
                    TemplateArn: {
                        location: "uri",
                        locationName: "TemplateArn"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    ClientRequestToken: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    QuestionId: {},
                    SelectedChoiceIds: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Su: {
            type: "map",
            key: {},
            value: {}
        },
        S14: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1i: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "list",
            member: {}
        },
        S1q: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "structure",
            members: {
                TrustedAdvisorIntegrationStatus: {},
                WorkloadResourceDefinition: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1v: {
            type: "list",
            member: {}
        },
        S2k: {
            type: "structure",
            members: {
                QuestionId: {},
                PillarId: {},
                QuestionTitle: {},
                QuestionDescription: {},
                ImprovementPlanUrl: {},
                HelpfulResourceUrl: {},
                HelpfulResourceDisplayText: {},
                Choices: {
                    shape: "S2q"
                },
                SelectedChoices: {
                    shape: "S31"
                },
                ChoiceAnswers: {
                    shape: "S32"
                },
                IsApplicable: {
                    type: "boolean"
                },
                Risk: {},
                Notes: {},
                Reason: {}
            }
        },
        S2q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ChoiceId: {},
                    Title: {},
                    Description: {},
                    HelpfulResource: {
                        shape: "S2u"
                    },
                    ImprovementPlan: {
                        shape: "S2u"
                    },
                    AdditionalResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Content: {
                                    type: "list",
                                    member: {
                                        shape: "S2u"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                DisplayText: {},
                Url: {}
            }
        },
        S31: {
            type: "list",
            member: {}
        },
        S32: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ChoiceId: {},
                    Status: {},
                    Reason: {},
                    Notes: {}
                }
            }
        },
        S3j: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        S45: {
            type: "structure",
            members: {
                LensAlias: {},
                LensArn: {},
                LensVersion: {},
                LensName: {},
                LensStatus: {},
                PillarReviewSummaries: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PillarId: {},
                            PillarName: {},
                            Notes: {},
                            RiskCounts: {
                                shape: "S3j"
                            },
                            PrioritizedRiskCounts: {
                                shape: "S3j"
                            }
                        }
                    }
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                Notes: {},
                RiskCounts: {
                    shape: "S3j"
                },
                NextToken: {},
                Profiles: {
                    shape: "S4a"
                },
                PrioritizedRiskCounts: {
                    shape: "S3j"
                }
            }
        },
        S4a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ProfileArn: {},
                    ProfileVersion: {}
                }
            }
        },
        S4q: {
            type: "structure",
            members: {
                WorkloadId: {},
                WorkloadArn: {},
                WorkloadName: {},
                Description: {},
                Environment: {},
                UpdatedAt: {
                    type: "timestamp"
                },
                AccountIds: {
                    shape: "S1e"
                },
                AwsRegions: {
                    shape: "S1g"
                },
                NonAwsRegions: {
                    shape: "S1i"
                },
                ArchitecturalDesign: {},
                ReviewOwner: {},
                ReviewRestrictionDate: {
                    type: "timestamp"
                },
                IsReviewOwnerUpdateAcknowledged: {
                    type: "boolean"
                },
                IndustryType: {},
                Industry: {},
                Notes: {},
                ImprovementStatus: {},
                RiskCounts: {
                    shape: "S3j"
                },
                PillarPriorities: {
                    shape: "S1k"
                },
                Lenses: {
                    shape: "S1q"
                },
                Owner: {},
                ShareInvitationId: {},
                Tags: {
                    shape: "Su"
                },
                DiscoveryConfig: {
                    shape: "S1r"
                },
                Applications: {
                    shape: "S1v"
                },
                Profiles: {
                    shape: "S4a"
                },
                PrioritizedRiskCounts: {
                    shape: "S3j"
                }
            }
        },
        S4v: {
            type: "structure",
            members: {
                ProfileArn: {},
                ProfileVersion: {},
                ProfileName: {},
                ProfileDescription: {},
                ProfileQuestions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            QuestionId: {},
                            QuestionTitle: {},
                            QuestionDescription: {},
                            QuestionChoices: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ChoiceId: {},
                                        ChoiceTitle: {},
                                        ChoiceDescription: {}
                                    }
                                }
                            },
                            SelectedChoiceIds: {
                                type: "list",
                                member: {}
                            },
                            MinSelectedChoices: {
                                type: "integer"
                            },
                            MaxSelectedChoices: {
                                type: "integer"
                            }
                        }
                    }
                },
                Owner: {},
                CreatedAt: {
                    type: "timestamp"
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                ShareInvitationId: {},
                Tags: {
                    shape: "Su"
                }
            }
        },
        S5c: {
            type: "structure",
            members: {
                Description: {},
                Lenses: {
                    shape: "S14"
                },
                Notes: {},
                QuestionCounts: {
                    shape: "S5d"
                },
                Owner: {},
                UpdatedAt: {
                    type: "timestamp"
                },
                TemplateArn: {},
                TemplateName: {},
                Tags: {
                    shape: "Su"
                },
                UpdateStatus: {},
                ShareInvitationId: {}
            }
        },
        S5d: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        S5i: {
            type: "structure",
            members: {
                QuestionId: {},
                PillarId: {},
                QuestionTitle: {},
                QuestionDescription: {},
                ImprovementPlanUrl: {},
                HelpfulResourceUrl: {},
                HelpfulResourceDisplayText: {},
                Choices: {
                    shape: "S2q"
                },
                SelectedChoices: {
                    shape: "S31"
                },
                ChoiceAnswers: {
                    shape: "S32"
                },
                IsApplicable: {
                    type: "boolean"
                },
                AnswerStatus: {},
                Notes: {},
                Reason: {}
            }
        },
        S5m: {
            type: "structure",
            members: {
                LensAlias: {},
                LensArn: {},
                LensVersion: {},
                LensName: {},
                LensStatus: {},
                PillarReviewSummaries: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PillarId: {},
                            PillarName: {},
                            Notes: {},
                            QuestionCounts: {
                                shape: "S5d"
                            }
                        }
                    }
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                Notes: {},
                QuestionCounts: {
                    shape: "S5d"
                },
                NextToken: {}
            }
        },
        S60: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ChoiceId: {},
                    Status: {},
                    Reason: {}
                }
            }
        },
        S7d: {
            type: "structure",
            members: {
                WorkloadId: {},
                WorkloadArn: {},
                WorkloadName: {},
                Owner: {},
                UpdatedAt: {
                    type: "timestamp"
                },
                Lenses: {
                    shape: "S1q"
                },
                RiskCounts: {
                    shape: "S3j"
                },
                ImprovementStatus: {},
                Profiles: {
                    shape: "S4a"
                },
                PrioritizedRiskCounts: {
                    shape: "S3j"
                }
            }
        },
        S95: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {},
                    Reason: {},
                    Notes: {}
                }
            }
        },
        S9c: {
            type: "map",
            key: {},
            value: {}
        },
        S9h: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetConsolidatedReport: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnswers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCheckDetails: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCheckSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLensReviewImprovements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLensReviews: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLensShares: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLenses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMilestones: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNotifications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProfileNotifications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProfileShares: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListReviewTemplateAnswers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListReviewTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListShareInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTemplateShares: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkloadShares: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkloads: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["lexmodelsv2"] = {};

AWS.LexModelsV2 = AWS.Service.defineService("lexmodelsv2", [ "2020-08-07" ]);

AWS.apiLoader.services["lexmodelsv2"]["2020-08-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-07",
        endpointPrefix: "models-v2-lex",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Lex Models V2",
        serviceFullName: "Amazon Lex Model Building V2",
        serviceId: "Lex Models V2",
        signatureVersion: "v4",
        signingName: "lex",
        uid: "models.lex.v2-2020-08-07"
    },
    operations: {
        BatchCreateCustomVocabularyItem: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchcreate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "customVocabularyItemList" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    customVocabularyItemList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "phrase" ],
                            members: {
                                phrase: {},
                                weight: {
                                    type: "integer"
                                },
                                displayAs: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    errors: {
                        shape: "Sa"
                    },
                    resources: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchDeleteCustomVocabularyItem: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchdelete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "customVocabularyItemList" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    customVocabularyItemList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "itemId" ],
                            members: {
                                itemId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    errors: {
                        shape: "Sa"
                    },
                    resources: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchUpdateCustomVocabularyItem: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/batchupdate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "customVocabularyItemList" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    customVocabularyItemList: {
                        type: "list",
                        member: {
                            shape: "Sg"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    errors: {
                        shape: "Sa"
                    },
                    resources: {
                        shape: "Sf"
                    }
                }
            }
        },
        BuildBotLocale: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botLocaleStatus: {},
                    lastBuildSubmittedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateBot: {
            http: {
                method: "PUT",
                requestUri: "/bots/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botName", "roleArn", "dataPrivacy", "idleSessionTTLInSeconds" ],
                members: {
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sx"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botTags: {
                        shape: "S10"
                    },
                    testBotAliasTags: {
                        shape: "S10"
                    },
                    botType: {},
                    botMembers: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sx"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    botTags: {
                        shape: "S10"
                    },
                    testBotAliasTags: {
                        shape: "S10"
                    },
                    botType: {},
                    botMembers: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateBotAlias: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botaliases/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botAliasName", "botId" ],
                members: {
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "S1c"
                    },
                    conversationLogSettings: {
                        shape: "S1j"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S1x"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "S1c"
                    },
                    conversationLogSettings: {
                        shape: "S1j"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S1x"
                    },
                    botAliasStatus: {},
                    botId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateBotLocale: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "nluIntentConfidenceThreshold" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S22"
                    },
                    generativeAISettings: {
                        shape: "S25"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeName: {},
                    localeId: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S22"
                    },
                    botLocaleStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    generativeAISettings: {
                        shape: "S25"
                    }
                }
            }
        },
        CreateBotVersion: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersionLocaleSpecification" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    description: {},
                    botVersionLocaleSpecification: {
                        shape: "S2h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    description: {},
                    botVersion: {},
                    botVersionLocaleSpecification: {
                        shape: "S2h"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateExport: {
            http: {
                method: "PUT",
                requestUri: "/exports/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "resourceSpecification", "fileFormat" ],
                members: {
                    resourceSpecification: {
                        shape: "S2l"
                    },
                    fileFormat: {},
                    filePassword: {
                        shape: "S2r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    resourceSpecification: {
                        shape: "S2l"
                    },
                    fileFormat: {},
                    exportStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateIntent: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "intentName", "botId", "botVersion", "localeId" ],
                members: {
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S2w"
                    },
                    dialogCodeHook: {
                        shape: "S2z"
                    },
                    fulfillmentCodeHook: {
                        shape: "S30"
                    },
                    intentConfirmationSetting: {
                        shape: "S48"
                    },
                    intentClosingSetting: {
                        shape: "S4q"
                    },
                    inputContexts: {
                        shape: "S4r"
                    },
                    outputContexts: {
                        shape: "S4t"
                    },
                    kendraConfiguration: {
                        shape: "S4x"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    initialResponseSetting: {
                        shape: "S50"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intentId: {},
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S2w"
                    },
                    dialogCodeHook: {
                        shape: "S2z"
                    },
                    fulfillmentCodeHook: {
                        shape: "S30"
                    },
                    intentConfirmationSetting: {
                        shape: "S48"
                    },
                    intentClosingSetting: {
                        shape: "S4q"
                    },
                    inputContexts: {
                        shape: "S4r"
                    },
                    outputContexts: {
                        shape: "S4t"
                    },
                    kendraConfiguration: {
                        shape: "S4x"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    initialResponseSetting: {
                        shape: "S50"
                    }
                }
            }
        },
        CreateResourcePolicy: {
            http: {
                requestUri: "/policy/{resourceArn}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "policy" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        CreateResourcePolicyStatement: {
            http: {
                requestUri: "/policy/{resourceArn}/statements/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "statementId", "effect", "principal", "action" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    statementId: {},
                    effect: {},
                    principal: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                service: {},
                                arn: {}
                            }
                        }
                    },
                    action: {
                        type: "list",
                        member: {}
                    },
                    condition: {
                        type: "map",
                        key: {},
                        value: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    },
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        CreateSlot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotName", "valueElicitationSetting", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S5n"
                    },
                    obfuscationSetting: {
                        shape: "S60"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    multipleValuesSetting: {
                        shape: "S62"
                    },
                    subSlotSetting: {
                        shape: "S63"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotId: {},
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S5n"
                    },
                    obfuscationSetting: {
                        shape: "S60"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    multipleValuesSetting: {
                        shape: "S62"
                    },
                    subSlotSetting: {
                        shape: "S63"
                    }
                }
            }
        },
        CreateSlotType: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotTypeName", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S6a"
                    },
                    valueSelectionSetting: {
                        shape: "S6f"
                    },
                    parentSlotTypeSignature: {},
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    externalSourceSetting: {
                        shape: "S6m"
                    },
                    compositeSlotTypeSetting: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypeId: {},
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S6a"
                    },
                    valueSelectionSetting: {
                        shape: "S6f"
                    },
                    parentSlotTypeSignature: {},
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    externalSourceSetting: {
                        shape: "S6m"
                    },
                    compositeSlotTypeSetting: {
                        shape: "S6r"
                    }
                }
            }
        },
        CreateTestSetDiscrepancyReport: {
            http: {
                requestUri: "/testsets/{testSetId}/testsetdiscrepancy",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "testSetId", "target" ],
                members: {
                    testSetId: {
                        location: "uri",
                        locationName: "testSetId"
                    },
                    target: {
                        shape: "S6w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testSetDiscrepancyReportId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    testSetId: {},
                    target: {
                        shape: "S6w"
                    }
                }
            }
        },
        CreateUploadUrl: {
            http: {
                requestUri: "/createuploadurl/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    uploadUrl: {}
                }
            }
        },
        DeleteBot: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botStatus: {}
                }
            }
        },
        DeleteBotAlias: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botaliases/{botAliasId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botAliasId", "botId" ],
                members: {
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botId: {},
                    botAliasStatus: {}
                }
            }
        },
        DeleteBotLocale: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botLocaleStatus: {}
                }
            }
        },
        DeleteBotVersion: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    botStatus: {}
                }
            }
        },
        DeleteCustomVocabulary: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    customVocabularyStatus: {}
                }
            }
        },
        DeleteExport: {
            http: {
                method: "DELETE",
                requestUri: "/exports/{exportId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "exportId" ],
                members: {
                    exportId: {
                        location: "uri",
                        locationName: "exportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    exportStatus: {}
                }
            }
        },
        DeleteImport: {
            http: {
                method: "DELETE",
                requestUri: "/imports/{importId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {
                        location: "uri",
                        locationName: "importId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    importStatus: {}
                }
            }
        },
        DeleteIntent: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "intentId", "botId", "botVersion", "localeId" ],
                members: {
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/policy/{resourceArn}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        DeleteResourcePolicyStatement: {
            http: {
                method: "DELETE",
                requestUri: "/policy/{resourceArn}/statements/{statementId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "statementId" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    statementId: {
                        location: "uri",
                        locationName: "statementId"
                    },
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        DeleteSlot: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "slotId", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotId: {
                        location: "uri",
                        locationName: "slotId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    }
                }
            }
        },
        DeleteSlotType: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "slotTypeId", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeId: {
                        location: "uri",
                        locationName: "slotTypeId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteTestSet: {
            http: {
                method: "DELETE",
                requestUri: "/testsets/{testSetId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "testSetId" ],
                members: {
                    testSetId: {
                        location: "uri",
                        locationName: "testSetId"
                    }
                }
            },
            idempotent: true
        },
        DeleteUtterances: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/utterances/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    localeId: {
                        location: "querystring",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "querystring",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBot: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sx"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    botType: {},
                    botMembers: {
                        shape: "S14"
                    },
                    failureReasons: {
                        shape: "S7w"
                    }
                }
            }
        },
        DescribeBotAlias: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botaliases/{botAliasId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botAliasId", "botId" ],
                members: {
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "S1c"
                    },
                    conversationLogSettings: {
                        shape: "S1j"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S1x"
                    },
                    botAliasHistoryEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botVersion: {},
                                startDate: {
                                    type: "timestamp"
                                },
                                endDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    botAliasStatus: {},
                    botId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    parentBotNetworks: {
                        shape: "S82"
                    }
                }
            }
        },
        DescribeBotLocale: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    localeName: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S22"
                    },
                    intentsCount: {
                        type: "integer"
                    },
                    slotTypesCount: {
                        type: "integer"
                    },
                    botLocaleStatus: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    lastBuildSubmittedDateTime: {
                        type: "timestamp"
                    },
                    botLocaleHistoryEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "event", "eventDate" ],
                            members: {
                                event: {},
                                eventDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    recommendedActions: {
                        shape: "S8a"
                    },
                    generativeAISettings: {
                        shape: "S25"
                    }
                }
            }
        },
        DescribeBotRecommendation: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "botRecommendationId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    botRecommendationId: {
                        location: "uri",
                        locationName: "botRecommendationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botRecommendationStatus: {},
                    botRecommendationId: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    transcriptSourceSetting: {
                        shape: "S8f"
                    },
                    encryptionSetting: {
                        shape: "S8o"
                    },
                    botRecommendationResults: {
                        type: "structure",
                        members: {
                            botLocaleExportUrl: {},
                            associatedTranscriptsUrl: {},
                            statistics: {
                                type: "structure",
                                members: {
                                    intents: {
                                        type: "structure",
                                        members: {
                                            discoveredIntentCount: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    slotTypes: {
                                        type: "structure",
                                        members: {
                                            discoveredSlotTypeCount: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeBotResourceGeneration: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generations/{generationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "generationId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    generationId: {
                        location: "uri",
                        locationName: "generationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    generationId: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    generationStatus: {},
                    generationInputPrompt: {},
                    generatedBotLocaleUrl: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    modelArn: {},
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeBotVersion: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    botVersion: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sx"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    parentBotNetworks: {
                        shape: "S82"
                    },
                    botType: {},
                    botMembers: {
                        shape: "S14"
                    }
                }
            }
        },
        DescribeCustomVocabularyMetadata: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/metadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    customVocabularyStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeExport: {
            http: {
                method: "GET",
                requestUri: "/exports/{exportId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "exportId" ],
                members: {
                    exportId: {
                        location: "uri",
                        locationName: "exportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    resourceSpecification: {
                        shape: "S2l"
                    },
                    fileFormat: {},
                    exportStatus: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    downloadUrl: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeImport: {
            http: {
                method: "GET",
                requestUri: "/imports/{importId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {
                        location: "uri",
                        locationName: "importId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    resourceSpecification: {
                        shape: "S97"
                    },
                    importedResourceId: {},
                    importedResourceName: {},
                    mergeStrategy: {},
                    importStatus: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeIntent: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "intentId", "botId", "botVersion", "localeId" ],
                members: {
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intentId: {},
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S2w"
                    },
                    dialogCodeHook: {
                        shape: "S2z"
                    },
                    fulfillmentCodeHook: {
                        shape: "S30"
                    },
                    slotPriorities: {
                        shape: "S9j"
                    },
                    intentConfirmationSetting: {
                        shape: "S48"
                    },
                    intentClosingSetting: {
                        shape: "S4q"
                    },
                    inputContexts: {
                        shape: "S4r"
                    },
                    outputContexts: {
                        shape: "S4t"
                    },
                    kendraConfiguration: {
                        shape: "S4x"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    initialResponseSetting: {
                        shape: "S50"
                    }
                }
            }
        },
        DescribeResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/policy/{resourceArn}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    policy: {},
                    revisionId: {}
                }
            }
        },
        DescribeSlot: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotId", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotId: {
                        location: "uri",
                        locationName: "slotId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotId: {},
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S5n"
                    },
                    obfuscationSetting: {
                        shape: "S60"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    multipleValuesSetting: {
                        shape: "S62"
                    },
                    subSlotSetting: {
                        shape: "S63"
                    }
                }
            }
        },
        DescribeSlotType: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotTypeId", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeId: {
                        location: "uri",
                        locationName: "slotTypeId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypeId: {},
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S6a"
                    },
                    valueSelectionSetting: {
                        shape: "S6f"
                    },
                    parentSlotTypeSignature: {},
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    externalSourceSetting: {
                        shape: "S6m"
                    },
                    compositeSlotTypeSetting: {
                        shape: "S6r"
                    }
                }
            }
        },
        DescribeTestExecution: {
            http: {
                method: "GET",
                requestUri: "/testexecutions/{testExecutionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testExecutionId" ],
                members: {
                    testExecutionId: {
                        location: "uri",
                        locationName: "testExecutionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testExecutionId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    testExecutionStatus: {},
                    testSetId: {},
                    testSetName: {},
                    target: {
                        shape: "S9v"
                    },
                    apiMode: {},
                    testExecutionModality: {},
                    failureReasons: {
                        shape: "S7w"
                    }
                }
            }
        },
        DescribeTestSet: {
            http: {
                method: "GET",
                requestUri: "/testsets/{testSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testSetId" ],
                members: {
                    testSetId: {
                        location: "uri",
                        locationName: "testSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testSetId: {},
                    testSetName: {},
                    description: {},
                    modality: {},
                    status: {},
                    roleArn: {},
                    numTurns: {
                        type: "integer"
                    },
                    storageLocation: {
                        shape: "S9c"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeTestSetDiscrepancyReport: {
            http: {
                method: "GET",
                requestUri: "/testsetdiscrepancy/{testSetDiscrepancyReportId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testSetDiscrepancyReportId" ],
                members: {
                    testSetDiscrepancyReportId: {
                        location: "uri",
                        locationName: "testSetDiscrepancyReportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testSetDiscrepancyReportId: {},
                    testSetId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    target: {
                        shape: "S6w"
                    },
                    testSetDiscrepancyReportStatus: {},
                    lastUpdatedDataTime: {
                        type: "timestamp"
                    },
                    testSetDiscrepancyTopErrors: {
                        type: "structure",
                        required: [ "intentDiscrepancies", "slotDiscrepancies" ],
                        members: {
                            intentDiscrepancies: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "intentName", "errorMessage" ],
                                    members: {
                                        intentName: {},
                                        errorMessage: {}
                                    }
                                }
                            },
                            slotDiscrepancies: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "intentName", "slotName", "errorMessage" ],
                                    members: {
                                        intentName: {},
                                        slotName: {},
                                        errorMessage: {}
                                    }
                                }
                            }
                        }
                    },
                    testSetDiscrepancyRawOutputUrl: {},
                    failureReasons: {
                        shape: "S7w"
                    }
                }
            }
        },
        DescribeTestSetGeneration: {
            http: {
                method: "GET",
                requestUri: "/testsetgenerations/{testSetGenerationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testSetGenerationId" ],
                members: {
                    testSetGenerationId: {
                        location: "uri",
                        locationName: "testSetGenerationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testSetGenerationId: {},
                    testSetGenerationStatus: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    testSetId: {},
                    testSetName: {},
                    description: {},
                    storageLocation: {
                        shape: "S9c"
                    },
                    generationDataSource: {
                        shape: "Sad"
                    },
                    roleArn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GenerateBotElement: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generate",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "intentId", "botId", "botVersion", "localeId" ],
                members: {
                    intentId: {},
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    sampleUtterances: {
                        shape: "S2w"
                    }
                }
            }
        },
        GetTestExecutionArtifactsUrl: {
            http: {
                method: "GET",
                requestUri: "/testexecutions/{testExecutionId}/artifacturl",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testExecutionId" ],
                members: {
                    testExecutionId: {
                        location: "uri",
                        locationName: "testExecutionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testExecutionId: {},
                    downloadArtifactsUrl: {}
                }
            }
        },
        ListAggregatedUtterances: {
            http: {
                requestUri: "/bots/{botId}/aggregatedutterances/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "localeId", "aggregationDuration" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {},
                    botVersion: {},
                    localeId: {},
                    aggregationDuration: {
                        shape: "Sam"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botAliasId: {},
                    botVersion: {},
                    localeId: {},
                    aggregationDuration: {
                        shape: "Sam"
                    },
                    aggregationWindowStartTime: {
                        type: "timestamp"
                    },
                    aggregationWindowEndTime: {
                        type: "timestamp"
                    },
                    aggregationLastRefreshedDateTime: {
                        type: "timestamp"
                    },
                    aggregatedUtterancesSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                utterance: {},
                                hitCount: {
                                    type: "integer"
                                },
                                missedCount: {
                                    type: "integer"
                                },
                                utteranceFirstRecordedInAggregationDuration: {
                                    type: "timestamp"
                                },
                                utteranceLastRecordedInAggregationDuration: {
                                    type: "timestamp"
                                },
                                containsDataFromDeletedResources: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBotAliases: {
            http: {
                requestUri: "/bots/{botId}/botaliases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botAliasId: {},
                                botAliasName: {},
                                description: {},
                                botVersion: {},
                                botAliasStatus: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    botId: {}
                }
            }
        },
        ListBotLocales: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    nextToken: {},
                    botLocaleSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                localeId: {},
                                localeName: {},
                                description: {},
                                botLocaleStatus: {},
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                lastBuildSubmittedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListBotRecommendations: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botRecommendationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "botRecommendationStatus", "botRecommendationId" ],
                            members: {
                                botRecommendationStatus: {},
                                botRecommendationId: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBotResourceGenerations: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/generations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    generationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                generationId: {},
                                generationStatus: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBotVersions: {
            http: {
                requestUri: "/bots/{botId}/botversions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botName: {},
                                botVersion: {},
                                description: {},
                                botStatus: {},
                                creationDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBots: {
            http: {
                requestUri: "/bots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botId: {},
                                botName: {},
                                description: {},
                                botStatus: {},
                                latestBotVersion: {},
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                botType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBuiltInIntents: {
            http: {
                requestUri: "/builtins/locales/{localeId}/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "localeId" ],
                members: {
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    builtInIntentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                intentSignature: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {},
                    localeId: {}
                }
            }
        },
        ListBuiltInSlotTypes: {
            http: {
                requestUri: "/builtins/locales/{localeId}/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "localeId" ],
                members: {
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    builtInSlotTypeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                slotTypeSignature: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {},
                    localeId: {}
                }
            }
        },
        ListCustomVocabularyItems: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/customvocabulary/DEFAULT/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    customVocabularyItems: {
                        shape: "Sf"
                    },
                    nextToken: {}
                }
            }
        },
        ListExports: {
            http: {
                requestUri: "/exports/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    localeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    exportSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                exportId: {},
                                resourceSpecification: {
                                    shape: "S2l"
                                },
                                fileFormat: {},
                                exportStatus: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    localeId: {}
                }
            }
        },
        ListImports: {
            http: {
                requestUri: "/imports/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    localeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    importSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                importId: {},
                                importedResourceId: {},
                                importedResourceName: {},
                                importStatus: {},
                                mergeStrategy: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                importedResourceType: {}
                            }
                        }
                    },
                    nextToken: {},
                    localeId: {}
                }
            }
        },
        ListIntentMetrics: {
            http: {
                requestUri: "/bots/{botId}/analytics/intentmetrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "startDateTime", "endDateTime", "metrics" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    startDateTime: {
                        type: "timestamp"
                    },
                    endDateTime: {
                        type: "timestamp"
                    },
                    metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "statistic" ],
                            members: {
                                name: {},
                                statistic: {},
                                order: {}
                            }
                        }
                    },
                    binBy: {
                        shape: "Sdg"
                    },
                    groupBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {}
                            }
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "operator", "values" ],
                            members: {
                                name: {},
                                operator: {},
                                values: {
                                    shape: "Sdr"
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                binKeys: {
                                    shape: "Sdw"
                                },
                                groupByKeys: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                },
                                metricsResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIntentPaths: {
            http: {
                requestUri: "/bots/{botId}/analytics/intentpaths",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "startDateTime", "endDateTime", "intentPath" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    startDateTime: {
                        type: "timestamp"
                    },
                    endDateTime: {
                        type: "timestamp"
                    },
                    intentPath: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "operator", "values" ],
                            members: {
                                name: {},
                                operator: {},
                                values: {
                                    shape: "Sdr"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                intentName: {},
                                intentPath: {},
                                intentCount: {
                                    type: "integer"
                                },
                                intentLevel: {
                                    type: "integer"
                                },
                                nodeType: {}
                            }
                        }
                    }
                }
            }
        },
        ListIntentStageMetrics: {
            http: {
                requestUri: "/bots/{botId}/analytics/intentstagemetrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "startDateTime", "endDateTime", "metrics" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    startDateTime: {
                        type: "timestamp"
                    },
                    endDateTime: {
                        type: "timestamp"
                    },
                    metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "statistic" ],
                            members: {
                                name: {},
                                statistic: {},
                                order: {}
                            }
                        }
                    },
                    binBy: {
                        shape: "Sdg"
                    },
                    groupBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {}
                            }
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "operator", "values" ],
                            members: {
                                name: {},
                                operator: {},
                                values: {
                                    shape: "Sdr"
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                binKeys: {
                                    shape: "Sdw"
                                },
                                groupByKeys: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                },
                                metricsResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIntents: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                intentId: {},
                                intentName: {},
                                description: {},
                                parentIntentSignature: {},
                                inputContexts: {
                                    shape: "S4r"
                                },
                                outputContexts: {
                                    shape: "S4t"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecommendedIntents: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/intents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "botRecommendationId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    botRecommendationId: {
                        location: "uri",
                        locationName: "botRecommendationId"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botRecommendationId: {},
                    summaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                intentId: {},
                                intentName: {},
                                sampleUtterancesCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSessionAnalyticsData: {
            http: {
                requestUri: "/bots/{botId}/analytics/sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "startDateTime", "endDateTime" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    startDateTime: {
                        type: "timestamp"
                    },
                    endDateTime: {
                        type: "timestamp"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "name", "order" ],
                        members: {
                            name: {},
                            order: {}
                        }
                    },
                    filters: {
                        shape: "Sff"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    nextToken: {},
                    sessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botAliasId: {},
                                botVersion: {},
                                localeId: {},
                                channel: {},
                                sessionId: {},
                                conversationStartTime: {
                                    type: "timestamp"
                                },
                                conversationEndTime: {
                                    type: "timestamp"
                                },
                                conversationDurationSeconds: {
                                    type: "long"
                                },
                                conversationEndState: {},
                                mode: {},
                                numberOfTurns: {
                                    type: "long"
                                },
                                invokedIntentSamples: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            intentName: {}
                                        }
                                    }
                                },
                                originatingRequestId: {}
                            }
                        }
                    }
                }
            }
        },
        ListSessionMetrics: {
            http: {
                requestUri: "/bots/{botId}/analytics/sessionmetrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "startDateTime", "endDateTime", "metrics" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    startDateTime: {
                        type: "timestamp"
                    },
                    endDateTime: {
                        type: "timestamp"
                    },
                    metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "statistic" ],
                            members: {
                                name: {},
                                statistic: {},
                                order: {}
                            }
                        }
                    },
                    binBy: {
                        shape: "Sdg"
                    },
                    groupBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {}
                            }
                        }
                    },
                    filters: {
                        shape: "Sff"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                binKeys: {
                                    shape: "Sdw"
                                },
                                groupByKeys: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                },
                                metricsResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSlotTypes: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    slotTypeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                slotTypeId: {},
                                slotTypeName: {},
                                description: {},
                                parentSlotTypeSignature: {},
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                slotTypeCategory: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSlots: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    slotSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                slotId: {},
                                slotName: {},
                                description: {},
                                slotConstraint: {},
                                slotTypeId: {},
                                valueElicitationPromptSpecification: {
                                    shape: "S49"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S10"
                    }
                }
            }
        },
        ListTestExecutionResultItems: {
            http: {
                requestUri: "/testexecutions/{testExecutionId}/results",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testExecutionId", "resultFilterBy" ],
                members: {
                    testExecutionId: {
                        location: "uri",
                        locationName: "testExecutionId"
                    },
                    resultFilterBy: {
                        type: "structure",
                        required: [ "resultTypeFilter" ],
                        members: {
                            resultTypeFilter: {},
                            conversationLevelTestResultsFilterBy: {
                                type: "structure",
                                members: {
                                    endToEndResult: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testExecutionResults: {
                        type: "structure",
                        members: {
                            overallTestResults: {
                                type: "structure",
                                required: [ "items" ],
                                members: {
                                    items: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "multiTurnConversation", "totalResultCount", "endToEndResultCounts" ],
                                            members: {
                                                multiTurnConversation: {
                                                    type: "boolean"
                                                },
                                                totalResultCount: {
                                                    type: "integer"
                                                },
                                                speechTranscriptionResultCounts: {
                                                    shape: "Sh4"
                                                },
                                                endToEndResultCounts: {
                                                    shape: "Sh4"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            conversationLevelTestResults: {
                                type: "structure",
                                required: [ "items" ],
                                members: {
                                    items: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "conversationId", "endToEndResult", "intentClassificationResults", "slotResolutionResults" ],
                                            members: {
                                                conversationId: {},
                                                endToEndResult: {},
                                                speechTranscriptionResult: {},
                                                intentClassificationResults: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "intentName", "matchResult" ],
                                                        members: {
                                                            intentName: {},
                                                            matchResult: {}
                                                        }
                                                    }
                                                },
                                                slotResolutionResults: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "intentName", "slotName", "matchResult" ],
                                                        members: {
                                                            intentName: {},
                                                            slotName: {},
                                                            matchResult: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            intentClassificationTestResults: {
                                type: "structure",
                                required: [ "items" ],
                                members: {
                                    items: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "intentName", "multiTurnConversation", "resultCounts" ],
                                            members: {
                                                intentName: {},
                                                multiTurnConversation: {
                                                    type: "boolean"
                                                },
                                                resultCounts: {
                                                    type: "structure",
                                                    required: [ "totalResultCount", "intentMatchResultCounts" ],
                                                    members: {
                                                        totalResultCount: {
                                                            type: "integer"
                                                        },
                                                        speechTranscriptionResultCounts: {
                                                            shape: "Sh4"
                                                        },
                                                        intentMatchResultCounts: {
                                                            shape: "Sh4"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            intentLevelSlotResolutionTestResults: {
                                type: "structure",
                                required: [ "items" ],
                                members: {
                                    items: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "intentName", "multiTurnConversation", "slotResolutionResults" ],
                                            members: {
                                                intentName: {},
                                                multiTurnConversation: {
                                                    type: "boolean"
                                                },
                                                slotResolutionResults: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "slotName", "resultCounts" ],
                                                        members: {
                                                            slotName: {},
                                                            resultCounts: {
                                                                type: "structure",
                                                                required: [ "totalResultCount", "slotMatchResultCounts" ],
                                                                members: {
                                                                    totalResultCount: {
                                                                        type: "integer"
                                                                    },
                                                                    speechTranscriptionResultCounts: {
                                                                        shape: "Sh4"
                                                                    },
                                                                    slotMatchResultCounts: {
                                                                        shape: "Sh4"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            utteranceLevelTestResults: {
                                type: "structure",
                                required: [ "items" ],
                                members: {
                                    items: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "recordNumber", "turnResult" ],
                                            members: {
                                                recordNumber: {
                                                    type: "long"
                                                },
                                                conversationId: {},
                                                turnResult: {
                                                    type: "structure",
                                                    members: {
                                                        agent: {
                                                            type: "structure",
                                                            required: [ "expectedAgentPrompt" ],
                                                            members: {
                                                                expectedAgentPrompt: {},
                                                                actualAgentPrompt: {},
                                                                errorDetails: {
                                                                    shape: "Shv"
                                                                },
                                                                actualElicitedSlot: {},
                                                                actualIntent: {}
                                                            }
                                                        },
                                                        user: {
                                                            type: "structure",
                                                            required: [ "input", "expectedOutput" ],
                                                            members: {
                                                                input: {
                                                                    shape: "Shx"
                                                                },
                                                                expectedOutput: {
                                                                    shape: "Sid"
                                                                },
                                                                actualOutput: {
                                                                    shape: "Sid"
                                                                },
                                                                errorDetails: {
                                                                    shape: "Shv"
                                                                },
                                                                endToEndResult: {},
                                                                intentMatchResult: {},
                                                                slotMatchResult: {},
                                                                speechTranscriptionResult: {},
                                                                conversationLevelResult: {
                                                                    type: "structure",
                                                                    required: [ "endToEndResult" ],
                                                                    members: {
                                                                        endToEndResult: {},
                                                                        speechTranscriptionResult: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTestExecutions: {
            http: {
                requestUri: "/testexecutions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                testExecutionId: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                testExecutionStatus: {},
                                testSetId: {},
                                testSetName: {},
                                target: {
                                    shape: "S9v"
                                },
                                apiMode: {},
                                testExecutionModality: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTestSetRecords: {
            http: {
                requestUri: "/testsets/{testSetId}/records",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testSetId" ],
                members: {
                    testSetId: {
                        location: "uri",
                        locationName: "testSetId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testSetRecords: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "recordNumber", "turnSpecification" ],
                            members: {
                                recordNumber: {
                                    type: "long"
                                },
                                conversationId: {},
                                turnNumber: {
                                    type: "integer"
                                },
                                turnSpecification: {
                                    type: "structure",
                                    members: {
                                        agentTurn: {
                                            type: "structure",
                                            required: [ "agentPrompt" ],
                                            members: {
                                                agentPrompt: {}
                                            }
                                        },
                                        userTurn: {
                                            type: "structure",
                                            required: [ "input", "expected" ],
                                            members: {
                                                input: {
                                                    shape: "Shx"
                                                },
                                                expected: {
                                                    shape: "Sid"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTestSets: {
            http: {
                requestUri: "/testsets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                testSetId: {},
                                testSetName: {},
                                description: {},
                                modality: {},
                                status: {},
                                roleArn: {},
                                numTurns: {
                                    type: "integer"
                                },
                                storageLocation: {
                                    shape: "S9c"
                                },
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListUtteranceAnalyticsData: {
            http: {
                requestUri: "/bots/{botId}/analytics/utterances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "startDateTime", "endDateTime" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    startDateTime: {
                        type: "timestamp"
                    },
                    endDateTime: {
                        type: "timestamp"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "name", "order" ],
                        members: {
                            name: {},
                            order: {}
                        }
                    },
                    filters: {
                        shape: "Sj6"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    nextToken: {},
                    utterances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botAliasId: {},
                                botVersion: {},
                                localeId: {},
                                sessionId: {},
                                channel: {},
                                mode: {},
                                conversationStartTime: {
                                    type: "timestamp"
                                },
                                conversationEndTime: {
                                    type: "timestamp"
                                },
                                utterance: {},
                                utteranceTimestamp: {
                                    type: "timestamp"
                                },
                                audioVoiceDurationMillis: {
                                    type: "long"
                                },
                                utteranceUnderstood: {
                                    type: "boolean"
                                },
                                inputType: {},
                                outputType: {},
                                associatedIntentName: {},
                                associatedSlotName: {},
                                intentState: {},
                                dialogActionType: {},
                                botResponseAudioVoiceId: {},
                                slotsFilledInSession: {},
                                utteranceRequestId: {},
                                botResponses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            content: {},
                                            contentType: {},
                                            imageResponseCard: {
                                                shape: "S3c"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListUtteranceMetrics: {
            http: {
                requestUri: "/bots/{botId}/analytics/utterancemetrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "startDateTime", "endDateTime", "metrics" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    startDateTime: {
                        type: "timestamp"
                    },
                    endDateTime: {
                        type: "timestamp"
                    },
                    metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "statistic" ],
                            members: {
                                name: {},
                                statistic: {},
                                order: {}
                            }
                        }
                    },
                    binBy: {
                        shape: "Sdg"
                    },
                    groupBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {}
                            }
                        }
                    },
                    attributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {}
                            }
                        }
                    },
                    filters: {
                        shape: "Sj6"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                binKeys: {
                                    shape: "Sdw"
                                },
                                groupByKeys: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                },
                                metricsResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                attributeResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            lastUsedIntent: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchAssociatedTranscripts: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/associatedtranscripts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "botRecommendationId", "filters" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    botRecommendationId: {
                        location: "uri",
                        locationName: "botRecommendationId"
                    },
                    searchOrder: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "Saw"
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextIndex: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botRecommendationId: {},
                    nextIndex: {
                        type: "integer"
                    },
                    associatedTranscripts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                transcript: {}
                            }
                        }
                    },
                    totalResults: {
                        type: "integer"
                    }
                }
            }
        },
        StartBotRecommendation: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "transcriptSourceSetting" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    transcriptSourceSetting: {
                        shape: "S8f"
                    },
                    encryptionSetting: {
                        shape: "S8o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botRecommendationStatus: {},
                    botRecommendationId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    transcriptSourceSetting: {
                        shape: "S8f"
                    },
                    encryptionSetting: {
                        shape: "S8o"
                    }
                }
            }
        },
        StartBotResourceGeneration: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/startgeneration",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "generationInputPrompt", "botId", "botVersion", "localeId" ],
                members: {
                    generationInputPrompt: {},
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    generationInputPrompt: {},
                    generationId: {},
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    generationStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        StartImport: {
            http: {
                method: "PUT",
                requestUri: "/imports/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "importId", "resourceSpecification", "mergeStrategy" ],
                members: {
                    importId: {},
                    resourceSpecification: {
                        shape: "S97"
                    },
                    mergeStrategy: {},
                    filePassword: {
                        shape: "S2r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    resourceSpecification: {
                        shape: "S97"
                    },
                    mergeStrategy: {},
                    importStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StartTestExecution: {
            http: {
                requestUri: "/testsets/{testSetId}/testexecutions",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "testSetId", "target", "apiMode" ],
                members: {
                    testSetId: {
                        location: "uri",
                        locationName: "testSetId"
                    },
                    target: {
                        shape: "S9v"
                    },
                    apiMode: {},
                    testExecutionModality: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testExecutionId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    testSetId: {},
                    target: {
                        shape: "S9v"
                    },
                    apiMode: {},
                    testExecutionModality: {}
                }
            }
        },
        StartTestSetGeneration: {
            http: {
                method: "PUT",
                requestUri: "/testsetgenerations",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "testSetName", "storageLocation", "generationDataSource", "roleArn" ],
                members: {
                    testSetName: {},
                    description: {},
                    storageLocation: {
                        shape: "S9c"
                    },
                    generationDataSource: {
                        shape: "Sad"
                    },
                    roleArn: {},
                    testSetTags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testSetGenerationId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    testSetGenerationStatus: {},
                    testSetName: {},
                    description: {},
                    storageLocation: {
                        shape: "S9c"
                    },
                    generationDataSource: {
                        shape: "Sad"
                    },
                    roleArn: {},
                    testSetTags: {
                        shape: "S10"
                    }
                }
            },
            idempotent: true
        },
        StopBotRecommendation: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/stopbotrecommendation",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "botRecommendationId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    botRecommendationId: {
                        location: "uri",
                        locationName: "botRecommendationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botRecommendationStatus: {},
                    botRecommendationId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botName", "roleArn", "dataPrivacy", "idleSessionTTLInSeconds" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sx"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botType: {},
                    botMembers: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sx"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    botType: {},
                    botMembers: {
                        shape: "S14"
                    }
                }
            }
        },
        UpdateBotAlias: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botaliases/{botAliasId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botAliasId", "botAliasName", "botId" ],
                members: {
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "S1c"
                    },
                    conversationLogSettings: {
                        shape: "S1j"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S1x"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "S1c"
                    },
                    conversationLogSettings: {
                        shape: "S1j"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S1x"
                    },
                    botAliasStatus: {},
                    botId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateBotLocale: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "nluIntentConfidenceThreshold" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S22"
                    },
                    generativeAISettings: {
                        shape: "S25"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    localeName: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S22"
                    },
                    botLocaleStatus: {},
                    failureReasons: {
                        shape: "S7w"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    recommendedActions: {
                        shape: "S8a"
                    },
                    generativeAISettings: {
                        shape: "S25"
                    }
                }
            }
        },
        UpdateBotRecommendation: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/botrecommendations/{botRecommendationId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "botRecommendationId", "encryptionSetting" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    botRecommendationId: {
                        location: "uri",
                        locationName: "botRecommendationId"
                    },
                    encryptionSetting: {
                        shape: "S8o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botRecommendationStatus: {},
                    botRecommendationId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    transcriptSourceSetting: {
                        shape: "S8f"
                    },
                    encryptionSetting: {
                        shape: "S8o"
                    }
                }
            }
        },
        UpdateExport: {
            http: {
                method: "PUT",
                requestUri: "/exports/{exportId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "exportId" ],
                members: {
                    exportId: {
                        location: "uri",
                        locationName: "exportId"
                    },
                    filePassword: {
                        shape: "S2r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    resourceSpecification: {
                        shape: "S2l"
                    },
                    fileFormat: {},
                    exportStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateIntent: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "intentId", "intentName", "botId", "botVersion", "localeId" ],
                members: {
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S2w"
                    },
                    dialogCodeHook: {
                        shape: "S2z"
                    },
                    fulfillmentCodeHook: {
                        shape: "S30"
                    },
                    slotPriorities: {
                        shape: "S9j"
                    },
                    intentConfirmationSetting: {
                        shape: "S48"
                    },
                    intentClosingSetting: {
                        shape: "S4q"
                    },
                    inputContexts: {
                        shape: "S4r"
                    },
                    outputContexts: {
                        shape: "S4t"
                    },
                    kendraConfiguration: {
                        shape: "S4x"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    initialResponseSetting: {
                        shape: "S50"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intentId: {},
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S2w"
                    },
                    dialogCodeHook: {
                        shape: "S2z"
                    },
                    fulfillmentCodeHook: {
                        shape: "S30"
                    },
                    slotPriorities: {
                        shape: "S9j"
                    },
                    intentConfirmationSetting: {
                        shape: "S48"
                    },
                    intentClosingSetting: {
                        shape: "S4q"
                    },
                    inputContexts: {
                        shape: "S4r"
                    },
                    outputContexts: {
                        shape: "S4t"
                    },
                    kendraConfiguration: {
                        shape: "S4x"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    initialResponseSetting: {
                        shape: "S50"
                    }
                }
            }
        },
        UpdateResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/policy/{resourceArn}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "policy" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    policy: {},
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        UpdateSlot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotId", "slotName", "valueElicitationSetting", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotId: {
                        location: "uri",
                        locationName: "slotId"
                    },
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S5n"
                    },
                    obfuscationSetting: {
                        shape: "S60"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    multipleValuesSetting: {
                        shape: "S62"
                    },
                    subSlotSetting: {
                        shape: "S63"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotId: {},
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S5n"
                    },
                    obfuscationSetting: {
                        shape: "S60"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    multipleValuesSetting: {
                        shape: "S62"
                    },
                    subSlotSetting: {
                        shape: "S63"
                    }
                }
            }
        },
        UpdateSlotType: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "slotTypeId", "slotTypeName", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeId: {
                        location: "uri",
                        locationName: "slotTypeId"
                    },
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S6a"
                    },
                    valueSelectionSetting: {
                        shape: "S6f"
                    },
                    parentSlotTypeSignature: {},
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    externalSourceSetting: {
                        shape: "S6m"
                    },
                    compositeSlotTypeSetting: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypeId: {},
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S6a"
                    },
                    valueSelectionSetting: {
                        shape: "S6f"
                    },
                    parentSlotTypeSignature: {},
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    externalSourceSetting: {
                        shape: "S6m"
                    },
                    compositeSlotTypeSetting: {
                        shape: "S6r"
                    }
                }
            }
        },
        UpdateTestSet: {
            http: {
                method: "PUT",
                requestUri: "/testsets/{testSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "testSetId", "testSetName" ],
                members: {
                    testSetId: {
                        location: "uri",
                        locationName: "testSetId"
                    },
                    testSetName: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testSetId: {},
                    testSetName: {},
                    description: {},
                    modality: {},
                    status: {},
                    roleArn: {},
                    numTurns: {
                        type: "integer"
                    },
                    storageLocation: {
                        shape: "S9c"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    itemId: {},
                    errorMessage: {},
                    errorCode: {}
                }
            }
        },
        Sf: {
            type: "list",
            member: {
                shape: "Sg"
            }
        },
        Sg: {
            type: "structure",
            required: [ "itemId", "phrase" ],
            members: {
                itemId: {},
                phrase: {},
                weight: {
                    type: "integer"
                },
                displayAs: {}
            }
        },
        Sx: {
            type: "structure",
            required: [ "childDirected" ],
            members: {
                childDirected: {
                    type: "boolean"
                }
            }
        },
        S10: {
            type: "map",
            key: {},
            value: {}
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                required: [ "botMemberId", "botMemberName", "botMemberAliasId", "botMemberAliasName", "botMemberVersion" ],
                members: {
                    botMemberId: {},
                    botMemberName: {},
                    botMemberAliasId: {},
                    botMemberAliasName: {},
                    botMemberVersion: {}
                }
            }
        },
        S1c: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "enabled" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    codeHookSpecification: {
                        type: "structure",
                        required: [ "lambdaCodeHook" ],
                        members: {
                            lambdaCodeHook: {
                                type: "structure",
                                required: [ "lambdaARN", "codeHookInterfaceVersion" ],
                                members: {
                                    lambdaARN: {},
                                    codeHookInterfaceVersion: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                textLogSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "enabled", "destination" ],
                        members: {
                            enabled: {
                                type: "boolean"
                            },
                            destination: {
                                type: "structure",
                                required: [ "cloudWatch" ],
                                members: {
                                    cloudWatch: {
                                        type: "structure",
                                        required: [ "cloudWatchLogGroupArn", "logPrefix" ],
                                        members: {
                                            cloudWatchLogGroupArn: {},
                                            logPrefix: {}
                                        }
                                    }
                                }
                            },
                            selectiveLoggingEnabled: {
                                type: "boolean"
                            }
                        }
                    }
                },
                audioLogSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "enabled", "destination" ],
                        members: {
                            enabled: {
                                type: "boolean"
                            },
                            destination: {
                                type: "structure",
                                required: [ "s3Bucket" ],
                                members: {
                                    s3Bucket: {
                                        type: "structure",
                                        required: [ "s3BucketArn", "logPrefix" ],
                                        members: {
                                            kmsKeyArn: {},
                                            s3BucketArn: {},
                                            logPrefix: {}
                                        }
                                    }
                                }
                            },
                            selectiveLoggingEnabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "structure",
            required: [ "detectSentiment" ],
            members: {
                detectSentiment: {
                    type: "boolean"
                }
            }
        },
        S22: {
            type: "structure",
            required: [ "voiceId" ],
            members: {
                voiceId: {},
                engine: {}
            }
        },
        S25: {
            type: "structure",
            members: {
                runtimeSettings: {
                    type: "structure",
                    members: {
                        slotResolutionImprovement: {
                            type: "structure",
                            required: [ "enabled" ],
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                bedrockModelSpecification: {
                                    shape: "S29"
                                }
                            }
                        }
                    }
                },
                buildtimeSettings: {
                    type: "structure",
                    members: {
                        descriptiveBotBuilder: {
                            type: "structure",
                            required: [ "enabled" ],
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                bedrockModelSpecification: {
                                    shape: "S29"
                                }
                            }
                        },
                        sampleUtteranceGeneration: {
                            type: "structure",
                            required: [ "enabled" ],
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                bedrockModelSpecification: {
                                    shape: "S29"
                                }
                            }
                        }
                    }
                }
            }
        },
        S29: {
            type: "structure",
            required: [ "modelArn" ],
            members: {
                modelArn: {}
            }
        },
        S2h: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "sourceBotVersion" ],
                members: {
                    sourceBotVersion: {}
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                botExportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion" ],
                    members: {
                        botId: {},
                        botVersion: {}
                    }
                },
                botLocaleExportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion", "localeId" ],
                    members: {
                        botId: {},
                        botVersion: {},
                        localeId: {}
                    }
                },
                customVocabularyExportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion", "localeId" ],
                    members: {
                        botId: {},
                        botVersion: {},
                        localeId: {}
                    }
                },
                testSetExportSpecification: {
                    type: "structure",
                    required: [ "testSetId" ],
                    members: {
                        testSetId: {}
                    }
                }
            }
        },
        S2r: {
            type: "string",
            sensitive: true
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "utterance" ],
                members: {
                    utterance: {}
                }
            }
        },
        S2z: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                }
            }
        },
        S30: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                postFulfillmentStatusSpecification: {
                    type: "structure",
                    members: {
                        successResponse: {
                            shape: "S32"
                        },
                        failureResponse: {
                            shape: "S32"
                        },
                        timeoutResponse: {
                            shape: "S32"
                        },
                        successNextStep: {
                            shape: "S3k"
                        },
                        successConditional: {
                            shape: "S3w"
                        },
                        failureNextStep: {
                            shape: "S3k"
                        },
                        failureConditional: {
                            shape: "S3w"
                        },
                        timeoutNextStep: {
                            shape: "S3k"
                        },
                        timeoutConditional: {
                            shape: "S3w"
                        }
                    }
                },
                fulfillmentUpdatesSpecification: {
                    type: "structure",
                    required: [ "active" ],
                    members: {
                        active: {
                            type: "boolean"
                        },
                        startResponse: {
                            type: "structure",
                            required: [ "delayInSeconds", "messageGroups" ],
                            members: {
                                delayInSeconds: {
                                    type: "integer"
                                },
                                messageGroups: {
                                    shape: "S33"
                                },
                                allowInterrupt: {
                                    type: "boolean"
                                }
                            }
                        },
                        updateResponse: {
                            type: "structure",
                            required: [ "frequencyInSeconds", "messageGroups" ],
                            members: {
                                frequencyInSeconds: {
                                    type: "integer"
                                },
                                messageGroups: {
                                    shape: "S33"
                                },
                                allowInterrupt: {
                                    type: "boolean"
                                }
                            }
                        },
                        timeoutInSeconds: {
                            type: "integer"
                        }
                    }
                },
                active: {
                    type: "boolean"
                }
            }
        },
        S32: {
            type: "structure",
            required: [ "messageGroups" ],
            members: {
                messageGroups: {
                    shape: "S33"
                },
                allowInterrupt: {
                    type: "boolean"
                }
            }
        },
        S33: {
            type: "list",
            member: {
                type: "structure",
                required: [ "message" ],
                members: {
                    message: {
                        shape: "S35"
                    },
                    variations: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                plainTextMessage: {
                    type: "structure",
                    required: [ "value" ],
                    members: {
                        value: {}
                    }
                },
                customPayload: {
                    type: "structure",
                    required: [ "value" ],
                    members: {
                        value: {}
                    }
                },
                ssmlMessage: {
                    type: "structure",
                    required: [ "value" ],
                    members: {
                        value: {}
                    }
                },
                imageResponseCard: {
                    shape: "S3c"
                }
            }
        },
        S3c: {
            type: "structure",
            required: [ "title" ],
            members: {
                title: {},
                subtitle: {},
                imageUrl: {},
                buttons: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "text", "value" ],
                        members: {
                            text: {},
                            value: {}
                        }
                    }
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                dialogAction: {
                    type: "structure",
                    required: [ "type" ],
                    members: {
                        type: {},
                        slotToElicit: {},
                        suppressNextMessage: {
                            type: "boolean"
                        }
                    }
                },
                intent: {
                    type: "structure",
                    members: {
                        name: {},
                        slots: {
                            type: "map",
                            key: {},
                            value: {
                                shape: "S3p"
                            }
                        }
                    }
                },
                sessionAttributes: {
                    shape: "S3u"
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                shape: {},
                value: {
                    type: "structure",
                    members: {
                        interpretedValue: {}
                    }
                },
                values: {
                    type: "list",
                    member: {
                        shape: "S3p"
                    }
                }
            }
        },
        S3u: {
            type: "map",
            key: {},
            value: {}
        },
        S3w: {
            type: "structure",
            required: [ "active", "conditionalBranches", "defaultBranch" ],
            members: {
                active: {
                    type: "boolean"
                },
                conditionalBranches: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "condition", "nextStep" ],
                        members: {
                            name: {},
                            condition: {
                                type: "structure",
                                required: [ "expressionString" ],
                                members: {
                                    expressionString: {}
                                }
                            },
                            nextStep: {
                                shape: "S3k"
                            },
                            response: {
                                shape: "S32"
                            }
                        }
                    }
                },
                defaultBranch: {
                    type: "structure",
                    members: {
                        nextStep: {
                            shape: "S3k"
                        },
                        response: {
                            shape: "S32"
                        }
                    }
                }
            }
        },
        S48: {
            type: "structure",
            required: [ "promptSpecification" ],
            members: {
                promptSpecification: {
                    shape: "S49"
                },
                declinationResponse: {
                    shape: "S32"
                },
                active: {
                    type: "boolean"
                },
                confirmationResponse: {
                    shape: "S32"
                },
                confirmationNextStep: {
                    shape: "S3k"
                },
                confirmationConditional: {
                    shape: "S3w"
                },
                declinationNextStep: {
                    shape: "S3k"
                },
                declinationConditional: {
                    shape: "S3w"
                },
                failureResponse: {
                    shape: "S32"
                },
                failureNextStep: {
                    shape: "S3k"
                },
                failureConditional: {
                    shape: "S3w"
                },
                codeHook: {
                    shape: "S4n"
                },
                elicitationCodeHook: {
                    shape: "S4p"
                }
            }
        },
        S49: {
            type: "structure",
            required: [ "messageGroups", "maxRetries" ],
            members: {
                messageGroups: {
                    shape: "S33"
                },
                maxRetries: {
                    type: "integer"
                },
                allowInterrupt: {
                    type: "boolean"
                },
                messageSelectionStrategy: {},
                promptAttemptsSpecification: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "allowedInputTypes" ],
                        members: {
                            allowInterrupt: {
                                type: "boolean"
                            },
                            allowedInputTypes: {
                                type: "structure",
                                required: [ "allowAudioInput", "allowDTMFInput" ],
                                members: {
                                    allowAudioInput: {
                                        type: "boolean"
                                    },
                                    allowDTMFInput: {
                                        type: "boolean"
                                    }
                                }
                            },
                            audioAndDTMFInputSpecification: {
                                type: "structure",
                                required: [ "startTimeoutMs" ],
                                members: {
                                    startTimeoutMs: {
                                        type: "integer"
                                    },
                                    audioSpecification: {
                                        type: "structure",
                                        required: [ "maxLengthMs", "endTimeoutMs" ],
                                        members: {
                                            maxLengthMs: {
                                                type: "integer"
                                            },
                                            endTimeoutMs: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    dtmfSpecification: {
                                        type: "structure",
                                        required: [ "maxLength", "endTimeoutMs", "deletionCharacter", "endCharacter" ],
                                        members: {
                                            maxLength: {
                                                type: "integer"
                                            },
                                            endTimeoutMs: {
                                                type: "integer"
                                            },
                                            deletionCharacter: {},
                                            endCharacter: {}
                                        }
                                    }
                                }
                            },
                            textInputSpecification: {
                                type: "structure",
                                required: [ "startTimeoutMs" ],
                                members: {
                                    startTimeoutMs: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S4n: {
            type: "structure",
            required: [ "enableCodeHookInvocation", "active", "postCodeHookSpecification" ],
            members: {
                enableCodeHookInvocation: {
                    type: "boolean"
                },
                active: {
                    type: "boolean"
                },
                invocationLabel: {},
                postCodeHookSpecification: {
                    type: "structure",
                    members: {
                        successResponse: {
                            shape: "S32"
                        },
                        successNextStep: {
                            shape: "S3k"
                        },
                        successConditional: {
                            shape: "S3w"
                        },
                        failureResponse: {
                            shape: "S32"
                        },
                        failureNextStep: {
                            shape: "S3k"
                        },
                        failureConditional: {
                            shape: "S3w"
                        },
                        timeoutResponse: {
                            shape: "S32"
                        },
                        timeoutNextStep: {
                            shape: "S3k"
                        },
                        timeoutConditional: {
                            shape: "S3w"
                        }
                    }
                }
            }
        },
        S4p: {
            type: "structure",
            required: [ "enableCodeHookInvocation" ],
            members: {
                enableCodeHookInvocation: {
                    type: "boolean"
                },
                invocationLabel: {}
            }
        },
        S4q: {
            type: "structure",
            members: {
                closingResponse: {
                    shape: "S32"
                },
                active: {
                    type: "boolean"
                },
                nextStep: {
                    shape: "S3k"
                },
                conditional: {
                    shape: "S3w"
                }
            }
        },
        S4r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        S4t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "timeToLiveInSeconds", "turnsToLive" ],
                members: {
                    name: {},
                    timeToLiveInSeconds: {
                        type: "integer"
                    },
                    turnsToLive: {
                        type: "integer"
                    }
                }
            }
        },
        S4x: {
            type: "structure",
            required: [ "kendraIndex" ],
            members: {
                kendraIndex: {},
                queryFilterStringEnabled: {
                    type: "boolean"
                },
                queryFilterString: {}
            }
        },
        S50: {
            type: "structure",
            members: {
                initialResponse: {
                    shape: "S32"
                },
                nextStep: {
                    shape: "S3k"
                },
                conditional: {
                    shape: "S3w"
                },
                codeHook: {
                    shape: "S4n"
                }
            }
        },
        S5n: {
            type: "structure",
            required: [ "slotConstraint" ],
            members: {
                defaultValueSpecification: {
                    shape: "S5o"
                },
                slotConstraint: {},
                promptSpecification: {
                    shape: "S49"
                },
                sampleUtterances: {
                    shape: "S2w"
                },
                waitAndContinueSpecification: {
                    shape: "S5t"
                },
                slotCaptureSetting: {
                    type: "structure",
                    members: {
                        captureResponse: {
                            shape: "S32"
                        },
                        captureNextStep: {
                            shape: "S3k"
                        },
                        captureConditional: {
                            shape: "S3w"
                        },
                        failureResponse: {
                            shape: "S32"
                        },
                        failureNextStep: {
                            shape: "S3k"
                        },
                        failureConditional: {
                            shape: "S3w"
                        },
                        codeHook: {
                            shape: "S4n"
                        },
                        elicitationCodeHook: {
                            shape: "S4p"
                        }
                    }
                },
                slotResolutionSetting: {
                    type: "structure",
                    required: [ "slotResolutionStrategy" ],
                    members: {
                        slotResolutionStrategy: {}
                    }
                }
            }
        },
        S5o: {
            type: "structure",
            required: [ "defaultValueList" ],
            members: {
                defaultValueList: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "defaultValue" ],
                        members: {
                            defaultValue: {}
                        }
                    }
                }
            }
        },
        S5t: {
            type: "structure",
            required: [ "waitingResponse", "continueResponse" ],
            members: {
                waitingResponse: {
                    shape: "S32"
                },
                continueResponse: {
                    shape: "S32"
                },
                stillWaitingResponse: {
                    type: "structure",
                    required: [ "messageGroups", "frequencyInSeconds", "timeoutInSeconds" ],
                    members: {
                        messageGroups: {
                            shape: "S33"
                        },
                        frequencyInSeconds: {
                            type: "integer"
                        },
                        timeoutInSeconds: {
                            type: "integer"
                        },
                        allowInterrupt: {
                            type: "boolean"
                        }
                    }
                },
                active: {
                    type: "boolean"
                }
            }
        },
        S60: {
            type: "structure",
            required: [ "obfuscationSettingType" ],
            members: {
                obfuscationSettingType: {}
            }
        },
        S62: {
            type: "structure",
            members: {
                allowMultipleValues: {
                    type: "boolean"
                }
            }
        },
        S63: {
            type: "structure",
            members: {
                expression: {},
                slotSpecifications: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "slotTypeId", "valueElicitationSetting" ],
                        members: {
                            slotTypeId: {},
                            valueElicitationSetting: {
                                type: "structure",
                                required: [ "promptSpecification" ],
                                members: {
                                    defaultValueSpecification: {
                                        shape: "S5o"
                                    },
                                    promptSpecification: {
                                        shape: "S49"
                                    },
                                    sampleUtterances: {
                                        shape: "S2w"
                                    },
                                    waitAndContinueSpecification: {
                                        shape: "S5t"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S6a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    sampleValue: {
                        shape: "S6c"
                    },
                    synonyms: {
                        type: "list",
                        member: {
                            shape: "S6c"
                        }
                    }
                }
            }
        },
        S6c: {
            type: "structure",
            required: [ "value" ],
            members: {
                value: {}
            }
        },
        S6f: {
            type: "structure",
            required: [ "resolutionStrategy" ],
            members: {
                resolutionStrategy: {},
                regexFilter: {
                    type: "structure",
                    required: [ "pattern" ],
                    members: {
                        pattern: {}
                    }
                },
                advancedRecognitionSetting: {
                    type: "structure",
                    members: {
                        audioRecognitionStrategy: {}
                    }
                }
            }
        },
        S6m: {
            type: "structure",
            members: {
                grammarSlotTypeSetting: {
                    type: "structure",
                    members: {
                        source: {
                            type: "structure",
                            required: [ "s3BucketName", "s3ObjectKey" ],
                            members: {
                                s3BucketName: {},
                                s3ObjectKey: {},
                                kmsKeyArn: {}
                            }
                        }
                    }
                }
            }
        },
        S6r: {
            type: "structure",
            members: {
                subSlots: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "slotTypeId" ],
                        members: {
                            name: {},
                            slotTypeId: {}
                        }
                    }
                }
            }
        },
        S6w: {
            type: "structure",
            members: {
                botAliasTarget: {
                    type: "structure",
                    required: [ "botId", "botAliasId", "localeId" ],
                    members: {
                        botId: {},
                        botAliasId: {},
                        localeId: {}
                    }
                }
            }
        },
        S7w: {
            type: "list",
            member: {}
        },
        S82: {
            type: "list",
            member: {
                type: "structure",
                required: [ "botId", "botVersion" ],
                members: {
                    botId: {},
                    botVersion: {}
                }
            }
        },
        S8a: {
            type: "list",
            member: {}
        },
        S8f: {
            type: "structure",
            members: {
                s3BucketTranscriptSource: {
                    type: "structure",
                    required: [ "s3BucketName", "transcriptFormat" ],
                    members: {
                        s3BucketName: {},
                        pathFormat: {
                            type: "structure",
                            members: {
                                objectPrefixes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        transcriptFormat: {},
                        transcriptFilter: {
                            type: "structure",
                            members: {
                                lexTranscriptFilter: {
                                    type: "structure",
                                    members: {
                                        dateRangeFilter: {
                                            type: "structure",
                                            required: [ "startDateTime", "endDateTime" ],
                                            members: {
                                                startDateTime: {
                                                    type: "timestamp"
                                                },
                                                endDateTime: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        kmsKeyArn: {}
                    }
                }
            }
        },
        S8o: {
            type: "structure",
            members: {
                kmsKeyArn: {},
                botLocaleExportPassword: {
                    shape: "S8p"
                },
                associatedTranscriptsPassword: {
                    shape: "S8p"
                }
            }
        },
        S8p: {
            type: "string",
            sensitive: true
        },
        S97: {
            type: "structure",
            members: {
                botImportSpecification: {
                    type: "structure",
                    required: [ "botName", "roleArn", "dataPrivacy" ],
                    members: {
                        botName: {},
                        roleArn: {},
                        dataPrivacy: {
                            shape: "Sx"
                        },
                        idleSessionTTLInSeconds: {
                            type: "integer"
                        },
                        botTags: {
                            shape: "S10"
                        },
                        testBotAliasTags: {
                            shape: "S10"
                        }
                    }
                },
                botLocaleImportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion", "localeId" ],
                    members: {
                        botId: {},
                        botVersion: {},
                        localeId: {},
                        nluIntentConfidenceThreshold: {
                            type: "double"
                        },
                        voiceSettings: {
                            shape: "S22"
                        }
                    }
                },
                customVocabularyImportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion", "localeId" ],
                    members: {
                        botId: {},
                        botVersion: {},
                        localeId: {}
                    }
                },
                testSetImportResourceSpecification: {
                    type: "structure",
                    required: [ "testSetName", "roleArn", "storageLocation", "importInputLocation", "modality" ],
                    members: {
                        testSetName: {},
                        description: {},
                        roleArn: {},
                        storageLocation: {
                            shape: "S9c"
                        },
                        importInputLocation: {
                            type: "structure",
                            required: [ "s3BucketName", "s3Path" ],
                            members: {
                                s3BucketName: {},
                                s3Path: {}
                            }
                        },
                        modality: {},
                        testSetTags: {
                            shape: "S10"
                        }
                    }
                }
            }
        },
        S9c: {
            type: "structure",
            required: [ "s3BucketName", "s3Path" ],
            members: {
                s3BucketName: {},
                s3Path: {},
                kmsKeyArn: {}
            }
        },
        S9j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "priority", "slotId" ],
                members: {
                    priority: {
                        type: "integer"
                    },
                    slotId: {}
                }
            }
        },
        S9v: {
            type: "structure",
            members: {
                botAliasTarget: {
                    type: "structure",
                    required: [ "botId", "botAliasId", "localeId" ],
                    members: {
                        botId: {},
                        botAliasId: {},
                        localeId: {}
                    }
                }
            }
        },
        Sad: {
            type: "structure",
            members: {
                conversationLogsDataSource: {
                    type: "structure",
                    required: [ "botId", "botAliasId", "localeId", "filter" ],
                    members: {
                        botId: {},
                        botAliasId: {},
                        localeId: {},
                        filter: {
                            type: "structure",
                            required: [ "startTime", "endTime", "inputMode" ],
                            members: {
                                startTime: {
                                    type: "timestamp"
                                },
                                endTime: {
                                    type: "timestamp"
                                },
                                inputMode: {}
                            }
                        }
                    }
                }
            }
        },
        Sam: {
            type: "structure",
            required: [ "relativeAggregationDuration" ],
            members: {
                relativeAggregationDuration: {
                    type: "structure",
                    required: [ "timeDimension", "timeValue" ],
                    members: {
                        timeDimension: {},
                        timeValue: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        Saw: {
            type: "list",
            member: {}
        },
        Sdg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "interval" ],
                members: {
                    name: {},
                    interval: {},
                    order: {}
                }
            }
        },
        Sdr: {
            type: "list",
            member: {}
        },
        Sdw: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {
                        type: "long"
                    }
                }
            }
        },
        Sff: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "operator", "values" ],
                members: {
                    name: {},
                    operator: {},
                    values: {
                        shape: "Sdr"
                    }
                }
            }
        },
        Sh4: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        Shv: {
            type: "structure",
            required: [ "errorCode", "errorMessage" ],
            members: {
                errorCode: {},
                errorMessage: {}
            }
        },
        Shx: {
            type: "structure",
            required: [ "utteranceInput" ],
            members: {
                utteranceInput: {
                    type: "structure",
                    members: {
                        textInput: {},
                        audioInput: {
                            type: "structure",
                            required: [ "audioFileS3Location" ],
                            members: {
                                audioFileS3Location: {}
                            }
                        }
                    }
                },
                requestAttributes: {
                    shape: "S3u"
                },
                sessionState: {
                    type: "structure",
                    members: {
                        sessionAttributes: {
                            shape: "S3u"
                        },
                        activeContexts: {
                            shape: "Si3"
                        },
                        runtimeHints: {
                            type: "structure",
                            members: {
                                slotHints: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        shape: "Si8"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Si3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        Si8: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    runtimeHintValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "phrase" ],
                            members: {
                                phrase: {}
                            }
                        }
                    },
                    subSlotHints: {
                        shape: "Si8"
                    }
                }
            }
        },
        Sid: {
            type: "structure",
            required: [ "intent" ],
            members: {
                intent: {
                    type: "structure",
                    required: [ "name" ],
                    members: {
                        name: {},
                        slots: {
                            shape: "Sif"
                        }
                    }
                },
                activeContexts: {
                    shape: "Si3"
                },
                transcript: {}
            }
        },
        Sif: {
            type: "map",
            key: {},
            value: {
                shape: "Sig"
            }
        },
        Sig: {
            type: "structure",
            members: {
                value: {},
                values: {
                    type: "list",
                    member: {
                        shape: "Sig"
                    }
                },
                subSlots: {
                    shape: "Sif"
                }
            }
        },
        Sj6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "operator", "values" ],
                members: {
                    name: {},
                    operator: {},
                    values: {
                        shape: "Sdr"
                    }
                }
            }
        }
    },
    paginators: {
        ListAggregatedUtterances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotAliases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotLocales: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotResourceGenerations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBuiltInIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBuiltInSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListCustomVocabularyItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListImports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListIntentMetrics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListIntentStageMetrics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListRecommendedIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSessionAnalyticsData: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSessionMetrics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSlots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTestExecutionResultItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTestExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTestSetRecords: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTestSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListUtteranceAnalyticsData: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListUtteranceMetrics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    },
    waiters: {
        BotAvailable: {
            delay: 10,
            operation: "DescribeBot",
            maxAttempts: 35,
            description: "Wait until a bot is available",
            acceptors: [ {
                expected: "Available",
                matcher: "path",
                state: "success",
                argument: "botStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                expected: "Inactive",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            } ]
        },
        BotAliasAvailable: {
            delay: 10,
            operation: "DescribeBotAlias",
            maxAttempts: 35,
            description: "Wait until a bot alias is available",
            acceptors: [ {
                expected: "Available",
                matcher: "path",
                state: "success",
                argument: "botAliasStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botAliasStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botAliasStatus"
            } ]
        },
        BotExportCompleted: {
            delay: 10,
            operation: "DescribeExport",
            maxAttempts: 35,
            description: "Wait until a bot has been exported",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "exportStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "exportStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "exportStatus"
            } ]
        },
        BotImportCompleted: {
            delay: 10,
            operation: "DescribeImport",
            maxAttempts: 35,
            description: "Wait until a bot has been imported",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "importStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "importStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "importStatus"
            } ]
        },
        BotLocaleBuilt: {
            delay: 10,
            operation: "DescribeBotLocale",
            maxAttempts: 35,
            description: "Wait until a bot locale is built",
            acceptors: [ {
                expected: "Built",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "NotBuilt",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            } ]
        },
        BotLocaleExpressTestingAvailable: {
            delay: 10,
            operation: "DescribeBotLocale",
            maxAttempts: 35,
            description: "Wait until a bot locale build is ready for express testing",
            acceptors: [ {
                expected: "Built",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "ReadyExpressTesting",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "NotBuilt",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            } ]
        },
        BotVersionAvailable: {
            delay: 10,
            operation: "DescribeBotVersion",
            maxAttempts: 35,
            description: "Wait until a bot version is available",
            acceptors: [ {
                expected: "Available",
                matcher: "path",
                state: "success",
                argument: "botStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                state: "retry",
                matcher: "status",
                expected: 404
            } ]
        },
        BotLocaleCreated: {
            delay: 10,
            operation: "DescribeBotLocale",
            maxAttempts: 35,
            description: "Wait unit a bot locale is created",
            acceptors: [ {
                expected: "Built",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "ReadyExpressTesting",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "NotBuilt",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["lexruntimev2"] = {};

AWS.LexRuntimeV2 = AWS.Service.defineService("lexruntimev2", [ "2020-08-07" ]);

AWS.apiLoader.services["lexruntimev2"]["2020-08-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-07",
        endpointPrefix: "runtime-v2-lex",
        jsonVersion: "1.1",
        protocol: "rest-json",
        protocolSettings: {
            h2: "eventstream"
        },
        serviceAbbreviation: "Lex Runtime V2",
        serviceFullName: "Amazon Lex Runtime V2",
        serviceId: "Lex Runtime V2",
        signatureVersion: "v4",
        signingName: "lex",
        uid: "runtime.lex.v2-2020-08-07"
    },
    operations: {
        DeleteSession: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "sessionId", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botAliasId: {},
                    localeId: {},
                    sessionId: {}
                }
            }
        },
        GetSession: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sessionId: {},
                    messages: {
                        shape: "Sa"
                    },
                    interpretations: {
                        shape: "Sl"
                    },
                    sessionState: {
                        shape: "S12"
                    }
                }
            }
        },
        PutSession: {
            http: {
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "sessionState", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    messages: {
                        shape: "Sa"
                    },
                    sessionState: {
                        shape: "S12"
                    },
                    requestAttributes: {
                        shape: "S1f"
                    },
                    responseContentType: {
                        location: "header",
                        locationName: "ResponseContentType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    messages: {
                        location: "header",
                        locationName: "x-amz-lex-messages"
                    },
                    sessionState: {
                        location: "header",
                        locationName: "x-amz-lex-session-state"
                    },
                    requestAttributes: {
                        location: "header",
                        locationName: "x-amz-lex-request-attributes"
                    },
                    sessionId: {
                        location: "header",
                        locationName: "x-amz-lex-session-id"
                    },
                    audioStream: {
                        shape: "S1r"
                    }
                },
                payload: "audioStream"
            }
        },
        RecognizeText: {
            http: {
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "text", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    text: {
                        shape: "Sc"
                    },
                    sessionState: {
                        shape: "S12"
                    },
                    requestAttributes: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    messages: {
                        shape: "Sa"
                    },
                    sessionState: {
                        shape: "S12"
                    },
                    interpretations: {
                        shape: "Sl"
                    },
                    requestAttributes: {
                        shape: "S1f"
                    },
                    sessionId: {},
                    recognizedBotMember: {
                        type: "structure",
                        required: [ "botId" ],
                        members: {
                            botId: {},
                            botName: {}
                        }
                    }
                }
            }
        },
        RecognizeUtterance: {
            http: {
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "requestContentType", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    sessionState: {
                        shape: "S1w",
                        location: "header",
                        locationName: "x-amz-lex-session-state"
                    },
                    requestAttributes: {
                        shape: "S1w",
                        location: "header",
                        locationName: "x-amz-lex-request-attributes"
                    },
                    requestContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    responseContentType: {
                        location: "header",
                        locationName: "Response-Content-Type"
                    },
                    inputStream: {
                        shape: "S1r"
                    }
                },
                payload: "inputStream"
            },
            output: {
                type: "structure",
                members: {
                    inputMode: {
                        location: "header",
                        locationName: "x-amz-lex-input-mode"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    messages: {
                        location: "header",
                        locationName: "x-amz-lex-messages"
                    },
                    interpretations: {
                        location: "header",
                        locationName: "x-amz-lex-interpretations"
                    },
                    sessionState: {
                        location: "header",
                        locationName: "x-amz-lex-session-state"
                    },
                    requestAttributes: {
                        location: "header",
                        locationName: "x-amz-lex-request-attributes"
                    },
                    sessionId: {
                        location: "header",
                        locationName: "x-amz-lex-session-id"
                    },
                    inputTranscript: {
                        location: "header",
                        locationName: "x-amz-lex-input-transcript"
                    },
                    audioStream: {
                        shape: "S1r"
                    },
                    recognizedBotMember: {
                        location: "header",
                        locationName: "x-amz-lex-recognized-bot-member"
                    }
                },
                payload: "audioStream"
            },
            authtype: "v4-unsigned-body"
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "contentType" ],
                members: {
                    content: {
                        shape: "Sc"
                    },
                    contentType: {},
                    imageResponseCard: {
                        type: "structure",
                        required: [ "title" ],
                        members: {
                            title: {},
                            subtitle: {},
                            imageUrl: {},
                            buttons: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "text", "value" ],
                                    members: {
                                        text: {},
                                        value: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    nluConfidence: {
                        type: "structure",
                        members: {
                            score: {
                                type: "double"
                            }
                        }
                    },
                    sentimentResponse: {
                        type: "structure",
                        members: {
                            sentiment: {},
                            sentimentScore: {
                                type: "structure",
                                members: {
                                    positive: {
                                        type: "double"
                                    },
                                    negative: {
                                        type: "double"
                                    },
                                    neutral: {
                                        type: "double"
                                    },
                                    mixed: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    intent: {
                        shape: "Ss"
                    },
                    interpretationSource: {}
                }
            }
        },
        Ss: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                slots: {
                    shape: "St"
                },
                state: {},
                confirmationState: {}
            }
        },
        St: {
            type: "map",
            key: {},
            value: {
                shape: "Su"
            }
        },
        Su: {
            type: "structure",
            members: {
                value: {
                    type: "structure",
                    required: [ "interpretedValue" ],
                    members: {
                        originalValue: {},
                        interpretedValue: {},
                        resolvedValues: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                shape: {},
                values: {
                    type: "list",
                    member: {
                        shape: "Su"
                    }
                },
                subSlots: {
                    shape: "St"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                dialogAction: {
                    type: "structure",
                    required: [ "type" ],
                    members: {
                        type: {},
                        slotToElicit: {},
                        slotElicitationStyle: {},
                        subSlotToElicit: {
                            shape: "S16"
                        }
                    }
                },
                intent: {
                    shape: "Ss"
                },
                activeContexts: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "timeToLive", "contextAttributes" ],
                        members: {
                            name: {},
                            timeToLive: {
                                type: "structure",
                                required: [ "timeToLiveInSeconds", "turnsToLive" ],
                                members: {
                                    timeToLiveInSeconds: {
                                        type: "integer"
                                    },
                                    turnsToLive: {
                                        type: "integer"
                                    }
                                }
                            },
                            contextAttributes: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                },
                sessionAttributes: {
                    shape: "S1f"
                },
                originatingRequestId: {},
                runtimeHints: {
                    type: "structure",
                    members: {
                        slotHints: {
                            type: "map",
                            key: {},
                            value: {
                                shape: "S1k"
                            }
                        }
                    }
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                subSlotToElicit: {
                    shape: "S16"
                }
            }
        },
        S1f: {
            type: "map",
            key: {},
            value: {}
        },
        S1k: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    runtimeHintValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "phrase" ],
                            members: {
                                phrase: {}
                            }
                        }
                    },
                    subSlotHints: {
                        shape: "S1k"
                    }
                }
            }
        },
        S1r: {
            type: "blob",
            streaming: true
        },
        S1w: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["fis"] = {};

AWS.Fis = AWS.Service.defineService("fis", [ "2020-12-01" ]);

AWS.apiLoader.services["fis"]["2020-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-12-01",
        endpointPrefix: "fis",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "FIS",
        serviceFullName: "AWS Fault Injection Simulator",
        serviceId: "fis",
        signatureVersion: "v4",
        signingName: "fis",
        uid: "fis-2020-12-01"
    },
    operations: {
        CreateExperimentTemplate: {
            http: {
                requestUri: "/experimentTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken", "description", "stopConditions", "actions", "roleArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    stopConditions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source" ],
                            members: {
                                source: {},
                                value: {}
                            }
                        }
                    },
                    targets: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "resourceType", "selectionMode" ],
                            members: {
                                resourceType: {},
                                resourceArns: {
                                    shape: "Sc"
                                },
                                resourceTags: {
                                    shape: "Se"
                                },
                                filters: {
                                    shape: "Sh"
                                },
                                selectionMode: {},
                                parameters: {
                                    shape: "Sn"
                                }
                            }
                        }
                    },
                    actions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "actionId" ],
                            members: {
                                actionId: {},
                                description: {},
                                parameters: {
                                    shape: "Sv"
                                },
                                targets: {
                                    shape: "Sy"
                                },
                                startAfter: {
                                    shape: "S10"
                                }
                            }
                        }
                    },
                    roleArn: {},
                    tags: {
                        shape: "Se"
                    },
                    logConfiguration: {
                        type: "structure",
                        required: [ "logSchemaVersion" ],
                        members: {
                            cloudWatchLogsConfiguration: {
                                shape: "S14"
                            },
                            s3Configuration: {
                                shape: "S16"
                            },
                            logSchemaVersion: {
                                type: "integer"
                            }
                        }
                    },
                    experimentOptions: {
                        type: "structure",
                        members: {
                            accountTargeting: {},
                            emptyTargetResolutionMode: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S1e"
                    }
                }
            }
        },
        CreateTargetAccountConfiguration: {
            http: {
                requestUri: "/experimentTemplates/{id}/targetAccountConfigurations/{accountId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentTemplateId", "accountId", "roleArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    experimentTemplateId: {
                        location: "uri",
                        locationName: "id"
                    },
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    roleArn: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    targetAccountConfiguration: {
                        shape: "S1z"
                    }
                }
            }
        },
        DeleteExperimentTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/experimentTemplates/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S1e"
                    }
                }
            }
        },
        DeleteTargetAccountConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/experimentTemplates/{id}/targetAccountConfigurations/{accountId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentTemplateId", "accountId" ],
                members: {
                    experimentTemplateId: {
                        location: "uri",
                        locationName: "id"
                    },
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetAccountConfiguration: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetAction: {
            http: {
                method: "GET",
                requestUri: "/actions/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        type: "structure",
                        members: {
                            id: {},
                            description: {},
                            parameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        description: {},
                                        required: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            },
                            targets: {
                                shape: "S2d"
                            },
                            tags: {
                                shape: "Se"
                            }
                        }
                    }
                }
            }
        },
        GetExperiment: {
            http: {
                method: "GET",
                requestUri: "/experiments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S2j"
                    }
                }
            }
        },
        GetExperimentTargetAccountConfiguration: {
            http: {
                method: "GET",
                requestUri: "/experiments/{id}/targetAccountConfigurations/{accountId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentId", "accountId" ],
                members: {
                    experimentId: {
                        location: "uri",
                        locationName: "id"
                    },
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetAccountConfiguration: {
                        type: "structure",
                        members: {
                            roleArn: {},
                            accountId: {},
                            description: {}
                        }
                    }
                }
            }
        },
        GetExperimentTemplate: {
            http: {
                method: "GET",
                requestUri: "/experimentTemplates/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetTargetAccountConfiguration: {
            http: {
                method: "GET",
                requestUri: "/experimentTemplates/{id}/targetAccountConfigurations/{accountId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentTemplateId", "accountId" ],
                members: {
                    experimentTemplateId: {
                        location: "uri",
                        locationName: "id"
                    },
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetAccountConfiguration: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetTargetResourceType: {
            http: {
                method: "GET",
                requestUri: "/targetResourceTypes/{resourceType}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceType" ],
                members: {
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetResourceType: {
                        type: "structure",
                        members: {
                            resourceType: {},
                            description: {},
                            parameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        description: {},
                                        required: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListActions: {
            http: {
                method: "GET",
                requestUri: "/actions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                description: {},
                                targets: {
                                    shape: "S2d"
                                },
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExperimentResolvedTargets: {
            http: {
                method: "GET",
                requestUri: "/experiments/{id}/resolvedTargets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentId" ],
                members: {
                    experimentId: {
                        location: "uri",
                        locationName: "id"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    targetName: {
                        location: "querystring",
                        locationName: "targetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolvedTargets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                targetName: {},
                                targetInformation: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExperimentTargetAccountConfigurations: {
            http: {
                method: "GET",
                requestUri: "/experiments/{id}/targetAccountConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentId" ],
                members: {
                    experimentId: {
                        location: "uri",
                        locationName: "id"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetAccountConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                roleArn: {},
                                accountId: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExperimentTemplates: {
            http: {
                method: "GET",
                requestUri: "/experimentTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                description: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExperiments: {
            http: {
                method: "GET",
                requestUri: "/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                experimentTemplateId: {},
                                state: {
                                    shape: "S2k"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Se"
                    }
                }
            }
        },
        ListTargetAccountConfigurations: {
            http: {
                method: "GET",
                requestUri: "/experimentTemplates/{id}/targetAccountConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentTemplateId" ],
                members: {
                    experimentTemplateId: {
                        location: "uri",
                        locationName: "id"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetAccountConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                roleArn: {},
                                accountId: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTargetResourceTypes: {
            http: {
                method: "GET",
                requestUri: "/targetResourceTypes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetResourceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartExperiment: {
            http: {
                requestUri: "/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken", "experimentTemplateId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    experimentTemplateId: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S2j"
                    }
                }
            }
        },
        StopExperiment: {
            http: {
                method: "DELETE",
                requestUri: "/experiments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S2j"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateExperimentTemplate: {
            http: {
                method: "PATCH",
                requestUri: "/experimentTemplates/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    description: {},
                    stopConditions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source" ],
                            members: {
                                source: {},
                                value: {}
                            }
                        }
                    },
                    targets: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "resourceType", "selectionMode" ],
                            members: {
                                resourceType: {},
                                resourceArns: {
                                    shape: "Sc"
                                },
                                resourceTags: {
                                    shape: "Se"
                                },
                                filters: {
                                    shape: "Sh"
                                },
                                selectionMode: {},
                                parameters: {
                                    shape: "Sn"
                                }
                            }
                        }
                    },
                    actions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                actionId: {},
                                description: {},
                                parameters: {
                                    shape: "Sv"
                                },
                                targets: {
                                    shape: "Sy"
                                },
                                startAfter: {
                                    shape: "S10"
                                }
                            }
                        }
                    },
                    roleArn: {},
                    logConfiguration: {
                        type: "structure",
                        members: {
                            cloudWatchLogsConfiguration: {
                                shape: "S14"
                            },
                            s3Configuration: {
                                shape: "S16"
                            },
                            logSchemaVersion: {
                                type: "integer"
                            }
                        }
                    },
                    experimentOptions: {
                        type: "structure",
                        members: {
                            emptyTargetResolutionMode: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S1e"
                    }
                }
            }
        },
        UpdateTargetAccountConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/experimentTemplates/{id}/targetAccountConfigurations/{accountId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experimentTemplateId", "accountId" ],
                members: {
                    experimentTemplateId: {
                        location: "uri",
                        locationName: "id"
                    },
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    roleArn: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    targetAccountConfiguration: {
                        shape: "S1z"
                    }
                }
            }
        }
    },
    shapes: {
        Sc: {
            type: "list",
            member: {}
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                required: [ "path", "values" ],
                members: {
                    path: {},
                    values: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        },
        Sv: {
            type: "map",
            key: {},
            value: {}
        },
        Sy: {
            type: "map",
            key: {},
            value: {}
        },
        S10: {
            type: "list",
            member: {}
        },
        S14: {
            type: "structure",
            required: [ "logGroupArn" ],
            members: {
                logGroupArn: {}
            }
        },
        S16: {
            type: "structure",
            required: [ "bucketName" ],
            members: {
                bucketName: {},
                prefix: {}
            }
        },
        S1e: {
            type: "structure",
            members: {
                id: {},
                description: {},
                targets: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            resourceType: {},
                            resourceArns: {
                                shape: "Sc"
                            },
                            resourceTags: {
                                shape: "Se"
                            },
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        path: {},
                                        values: {
                                            shape: "Sk"
                                        }
                                    }
                                }
                            },
                            selectionMode: {},
                            parameters: {
                                shape: "Sn"
                            }
                        }
                    }
                },
                actions: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            actionId: {},
                            description: {},
                            parameters: {
                                shape: "Sv"
                            },
                            targets: {
                                shape: "Sy"
                            },
                            startAfter: {
                                shape: "S10"
                            }
                        }
                    }
                },
                stopConditions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            source: {},
                            value: {}
                        }
                    }
                },
                creationTime: {
                    type: "timestamp"
                },
                lastUpdateTime: {
                    type: "timestamp"
                },
                roleArn: {},
                tags: {
                    shape: "Se"
                },
                logConfiguration: {
                    type: "structure",
                    members: {
                        cloudWatchLogsConfiguration: {
                            type: "structure",
                            members: {
                                logGroupArn: {}
                            }
                        },
                        s3Configuration: {
                            type: "structure",
                            members: {
                                bucketName: {},
                                prefix: {}
                            }
                        },
                        logSchemaVersion: {
                            type: "integer"
                        }
                    }
                },
                experimentOptions: {
                    type: "structure",
                    members: {
                        accountTargeting: {},
                        emptyTargetResolutionMode: {}
                    }
                },
                targetAccountConfigurationsCount: {
                    type: "long"
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                roleArn: {},
                accountId: {},
                description: {}
            }
        },
        S2d: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    resourceType: {}
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                id: {},
                experimentTemplateId: {},
                roleArn: {},
                state: {
                    shape: "S2k"
                },
                targets: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            resourceType: {},
                            resourceArns: {
                                shape: "Sc"
                            },
                            resourceTags: {
                                shape: "Se"
                            },
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        path: {},
                                        values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            selectionMode: {},
                            parameters: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                },
                actions: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            actionId: {},
                            description: {},
                            parameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            targets: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            startAfter: {
                                type: "list",
                                member: {}
                            },
                            state: {
                                type: "structure",
                                members: {
                                    status: {},
                                    reason: {}
                                }
                            },
                            startTime: {
                                type: "timestamp"
                            },
                            endTime: {
                                type: "timestamp"
                            }
                        }
                    }
                },
                stopConditions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            source: {},
                            value: {}
                        }
                    }
                },
                creationTime: {
                    type: "timestamp"
                },
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                },
                tags: {
                    shape: "Se"
                },
                logConfiguration: {
                    type: "structure",
                    members: {
                        cloudWatchLogsConfiguration: {
                            type: "structure",
                            members: {
                                logGroupArn: {}
                            }
                        },
                        s3Configuration: {
                            type: "structure",
                            members: {
                                bucketName: {},
                                prefix: {}
                            }
                        },
                        logSchemaVersion: {
                            type: "integer"
                        }
                    }
                },
                experimentOptions: {
                    type: "structure",
                    members: {
                        accountTargeting: {},
                        emptyTargetResolutionMode: {}
                    }
                },
                targetAccountConfigurationsCount: {
                    type: "long"
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        }
    },
    paginators: {
        ListActions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExperimentResolvedTargets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExperimentTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExperiments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTargetAccountConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTargetResourceTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["lookoutmetrics"] = {};

AWS.LookoutMetrics = AWS.Service.defineService("lookoutmetrics", [ "2017-07-25" ]);

AWS.apiLoader.services["lookoutmetrics"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "lookoutmetrics",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "LookoutMetrics",
        serviceFullName: "Amazon Lookout for Metrics",
        serviceId: "LookoutMetrics",
        signatureVersion: "v4",
        signingName: "lookoutmetrics",
        uid: "lookoutmetrics-2017-07-25"
    },
    operations: {
        ActivateAnomalyDetector: {
            http: {
                requestUri: "/ActivateAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BackTestAnomalyDetector: {
            http: {
                requestUri: "/BackTestAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAlert: {
            http: {
                requestUri: "/CreateAlert"
            },
            input: {
                type: "structure",
                required: [ "AlertName", "AnomalyDetectorArn", "Action" ],
                members: {
                    AlertName: {},
                    AlertSensitivityThreshold: {
                        type: "integer"
                    },
                    AlertDescription: {},
                    AnomalyDetectorArn: {},
                    Action: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "Se"
                    },
                    AlertFilters: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AlertArn: {}
                }
            }
        },
        CreateAnomalyDetector: {
            http: {
                requestUri: "/CreateAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorName", "AnomalyDetectorConfig" ],
                members: {
                    AnomalyDetectorName: {},
                    AnomalyDetectorDescription: {},
                    AnomalyDetectorConfig: {
                        shape: "St"
                    },
                    KmsKeyArn: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {}
                }
            }
        },
        CreateMetricSet: {
            http: {
                requestUri: "/CreateMetricSet"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "MetricSetName", "MetricList", "MetricSource" ],
                members: {
                    AnomalyDetectorArn: {},
                    MetricSetName: {},
                    MetricSetDescription: {},
                    MetricList: {
                        shape: "S10"
                    },
                    Offset: {
                        type: "integer"
                    },
                    TimestampColumn: {
                        shape: "S15"
                    },
                    DimensionList: {
                        shape: "S17"
                    },
                    MetricSetFrequency: {},
                    MetricSource: {
                        shape: "S18"
                    },
                    Timezone: {},
                    Tags: {
                        shape: "Se"
                    },
                    DimensionFilterList: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetArn: {}
                }
            }
        },
        DeactivateAnomalyDetector: {
            http: {
                requestUri: "/DeactivateAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAlert: {
            http: {
                requestUri: "/DeleteAlert"
            },
            input: {
                type: "structure",
                required: [ "AlertArn" ],
                members: {
                    AlertArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAnomalyDetector: {
            http: {
                requestUri: "/DeleteAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAlert: {
            http: {
                requestUri: "/DescribeAlert"
            },
            input: {
                type: "structure",
                required: [ "AlertArn" ],
                members: {
                    AlertArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Alert: {
                        type: "structure",
                        members: {
                            Action: {
                                shape: "Sa"
                            },
                            AlertDescription: {},
                            AlertArn: {},
                            AnomalyDetectorArn: {},
                            AlertName: {},
                            AlertSensitivityThreshold: {
                                type: "integer"
                            },
                            AlertType: {},
                            AlertStatus: {},
                            LastModificationTime: {
                                type: "timestamp"
                            },
                            CreationTime: {
                                type: "timestamp"
                            },
                            AlertFilters: {
                                shape: "Sh"
                            }
                        }
                    }
                }
            }
        },
        DescribeAnomalyDetectionExecutions: {
            http: {
                requestUri: "/DescribeAnomalyDetectionExecutions"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {},
                    Timestamp: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExecutionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {},
                                Status: {},
                                FailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAnomalyDetector: {
            http: {
                requestUri: "/DescribeAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyDetectorName: {},
                    AnomalyDetectorDescription: {},
                    AnomalyDetectorConfig: {
                        type: "structure",
                        members: {
                            AnomalyDetectorFrequency: {}
                        }
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Status: {},
                    FailureReason: {},
                    KmsKeyArn: {},
                    FailureType: {}
                }
            }
        },
        DescribeMetricSet: {
            http: {
                requestUri: "/DescribeMetricSet"
            },
            input: {
                type: "structure",
                required: [ "MetricSetArn" ],
                members: {
                    MetricSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetArn: {},
                    AnomalyDetectorArn: {},
                    MetricSetName: {},
                    MetricSetDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Offset: {
                        type: "integer"
                    },
                    MetricList: {
                        shape: "S10"
                    },
                    TimestampColumn: {
                        shape: "S15"
                    },
                    DimensionList: {
                        shape: "S17"
                    },
                    MetricSetFrequency: {},
                    Timezone: {},
                    MetricSource: {
                        shape: "S18"
                    },
                    DimensionFilterList: {
                        shape: "S2e"
                    }
                }
            }
        },
        DetectMetricSetConfig: {
            http: {
                requestUri: "/DetectMetricSetConfig"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AutoDetectionMetricSource" ],
                members: {
                    AnomalyDetectorArn: {},
                    AutoDetectionMetricSource: {
                        type: "structure",
                        members: {
                            S3SourceConfig: {
                                type: "structure",
                                members: {
                                    TemplatedPathList: {
                                        shape: "S1a"
                                    },
                                    HistoricalDataPathList: {
                                        shape: "S1c"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DetectedMetricSetConfig: {
                        type: "structure",
                        members: {
                            Offset: {
                                shape: "S3i"
                            },
                            MetricSetFrequency: {
                                shape: "S3i"
                            },
                            MetricSource: {
                                type: "structure",
                                members: {
                                    S3SourceConfig: {
                                        type: "structure",
                                        members: {
                                            FileFormatDescriptor: {
                                                type: "structure",
                                                members: {
                                                    CsvFormatDescriptor: {
                                                        type: "structure",
                                                        members: {
                                                            FileCompression: {
                                                                shape: "S3i"
                                                            },
                                                            Charset: {
                                                                shape: "S3i"
                                                            },
                                                            ContainsHeader: {
                                                                shape: "S3i"
                                                            },
                                                            Delimiter: {
                                                                shape: "S3i"
                                                            },
                                                            HeaderList: {
                                                                shape: "S3i"
                                                            },
                                                            QuoteSymbol: {
                                                                shape: "S3i"
                                                            }
                                                        }
                                                    },
                                                    JsonFormatDescriptor: {
                                                        type: "structure",
                                                        members: {
                                                            FileCompression: {
                                                                shape: "S3i"
                                                            },
                                                            Charset: {
                                                                shape: "S3i"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetAnomalyGroup: {
            http: {
                requestUri: "/GetAnomalyGroup"
            },
            input: {
                type: "structure",
                required: [ "AnomalyGroupId", "AnomalyDetectorArn" ],
                members: {
                    AnomalyGroupId: {},
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroup: {
                        type: "structure",
                        members: {
                            StartTime: {},
                            EndTime: {},
                            AnomalyGroupId: {},
                            AnomalyGroupScore: {
                                type: "double"
                            },
                            PrimaryMetricName: {},
                            MetricLevelImpactList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        MetricName: {},
                                        NumTimeSeries: {
                                            type: "integer"
                                        },
                                        ContributionMatrix: {
                                            type: "structure",
                                            members: {
                                                DimensionContributionList: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            DimensionName: {},
                                                            DimensionValueContributionList: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        DimensionValue: {},
                                                                        ContributionScore: {
                                                                            type: "double"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDataQualityMetrics: {
            http: {
                requestUri: "/GetDataQualityMetrics"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {},
                    MetricSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorDataQualityMetricList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartTimestamp: {
                                    type: "timestamp"
                                },
                                MetricSetDataQualityMetricList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            MetricSetArn: {},
                                            DataQualityMetricList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        MetricType: {},
                                                        MetricDescription: {},
                                                        RelatedColumnName: {},
                                                        MetricValue: {
                                                            type: "double"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFeedback: {
            http: {
                requestUri: "/GetFeedback"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AnomalyGroupTimeSeriesFeedback" ],
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyGroupTimeSeriesFeedback: {
                        type: "structure",
                        required: [ "AnomalyGroupId" ],
                        members: {
                            AnomalyGroupId: {},
                            TimeSeriesId: {}
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroupTimeSeriesFeedback: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TimeSeriesId: {},
                                IsAnomaly: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSampleData: {
            http: {
                requestUri: "/GetSampleData"
            },
            input: {
                type: "structure",
                members: {
                    S3SourceConfig: {
                        type: "structure",
                        required: [ "RoleArn", "FileFormatDescriptor" ],
                        members: {
                            RoleArn: {},
                            TemplatedPathList: {
                                shape: "S1a"
                            },
                            HistoricalDataPathList: {
                                shape: "S1c"
                            },
                            FileFormatDescriptor: {
                                shape: "S1e"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HeaderValues: {
                        type: "list",
                        member: {}
                    },
                    SampleRows: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        ListAlerts: {
            http: {
                requestUri: "/ListAlerts"
            },
            input: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AlertSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AlertArn: {},
                                AnomalyDetectorArn: {},
                                AlertName: {},
                                AlertSensitivityThreshold: {
                                    type: "integer"
                                },
                                AlertType: {},
                                AlertStatus: {},
                                LastModificationTime: {
                                    type: "timestamp"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalyDetectors: {
            http: {
                requestUri: "/ListAnomalyDetectors"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AnomalyDetectorArn: {},
                                AnomalyDetectorName: {},
                                AnomalyDetectorDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalyGroupRelatedMetrics: {
            http: {
                requestUri: "/ListAnomalyGroupRelatedMetrics"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AnomalyGroupId" ],
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyGroupId: {},
                    RelationshipTypeFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InterMetricImpactList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MetricName: {},
                                AnomalyGroupId: {},
                                RelationshipType: {},
                                ContributionPercentage: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalyGroupSummaries: {
            http: {
                requestUri: "/ListAnomalyGroupSummaries"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "SensitivityThreshold" ],
                members: {
                    AnomalyDetectorArn: {},
                    SensitivityThreshold: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroupSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartTime: {},
                                EndTime: {},
                                AnomalyGroupId: {},
                                AnomalyGroupScore: {
                                    type: "double"
                                },
                                PrimaryMetricName: {}
                            }
                        }
                    },
                    AnomalyGroupStatistics: {
                        type: "structure",
                        members: {
                            EvaluationStartDate: {},
                            TotalCount: {
                                type: "integer"
                            },
                            ItemizedMetricStatsList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        MetricName: {},
                                        OccurrenceCount: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalyGroupTimeSeries: {
            http: {
                requestUri: "/ListAnomalyGroupTimeSeries"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AnomalyGroupId", "MetricName" ],
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyGroupId: {},
                    MetricName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroupId: {},
                    MetricName: {},
                    TimestampList: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    TimeSeriesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TimeSeriesId", "DimensionList", "MetricValueList" ],
                            members: {
                                TimeSeriesId: {},
                                DimensionList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "DimensionName", "DimensionValue" ],
                                        members: {
                                            DimensionName: {},
                                            DimensionValue: {}
                                        }
                                    }
                                },
                                MetricValueList: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListMetricSets: {
            http: {
                requestUri: "/ListMetricSets"
            },
            input: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MetricSetArn: {},
                                AnomalyDetectorArn: {},
                                MetricSetDescription: {},
                                MetricSetName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Se",
                        locationName: "Tags"
                    }
                }
            }
        },
        PutFeedback: {
            http: {
                requestUri: "/PutFeedback"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AnomalyGroupTimeSeriesFeedback" ],
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyGroupTimeSeriesFeedback: {
                        type: "structure",
                        required: [ "AnomalyGroupId", "TimeSeriesId", "IsAnomaly" ],
                        members: {
                            AnomalyGroupId: {},
                            TimeSeriesId: {},
                            IsAnomaly: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Se",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAlert: {
            http: {
                requestUri: "/UpdateAlert"
            },
            input: {
                type: "structure",
                required: [ "AlertArn" ],
                members: {
                    AlertArn: {},
                    AlertDescription: {},
                    AlertSensitivityThreshold: {
                        type: "integer"
                    },
                    Action: {
                        shape: "Sa"
                    },
                    AlertFilters: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AlertArn: {}
                }
            }
        },
        UpdateAnomalyDetector: {
            http: {
                requestUri: "/UpdateAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {},
                    KmsKeyArn: {},
                    AnomalyDetectorDescription: {},
                    AnomalyDetectorConfig: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {}
                }
            }
        },
        UpdateMetricSet: {
            http: {
                requestUri: "/UpdateMetricSet"
            },
            input: {
                type: "structure",
                required: [ "MetricSetArn" ],
                members: {
                    MetricSetArn: {},
                    MetricSetDescription: {},
                    MetricList: {
                        shape: "S10"
                    },
                    Offset: {
                        type: "integer"
                    },
                    TimestampColumn: {
                        shape: "S15"
                    },
                    DimensionList: {
                        shape: "S17"
                    },
                    MetricSetFrequency: {},
                    MetricSource: {
                        shape: "S18"
                    },
                    DimensionFilterList: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetArn: {}
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                SNSConfiguration: {
                    type: "structure",
                    required: [ "RoleArn", "SnsTopicArn" ],
                    members: {
                        RoleArn: {},
                        SnsTopicArn: {},
                        SnsFormat: {}
                    }
                },
                LambdaConfiguration: {
                    type: "structure",
                    required: [ "RoleArn", "LambdaArn" ],
                    members: {
                        RoleArn: {},
                        LambdaArn: {}
                    }
                }
            }
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "structure",
            members: {
                MetricList: {
                    type: "list",
                    member: {}
                },
                DimensionFilterList: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            DimensionName: {},
                            DimensionValueList: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        St: {
            type: "structure",
            members: {
                AnomalyDetectorFrequency: {}
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MetricName", "AggregationFunction" ],
                members: {
                    MetricName: {},
                    AggregationFunction: {},
                    Namespace: {}
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                ColumnName: {},
                ColumnFormat: {}
            }
        },
        S17: {
            type: "list",
            member: {}
        },
        S18: {
            type: "structure",
            members: {
                S3SourceConfig: {
                    type: "structure",
                    members: {
                        RoleArn: {},
                        TemplatedPathList: {
                            shape: "S1a"
                        },
                        HistoricalDataPathList: {
                            shape: "S1c"
                        },
                        FileFormatDescriptor: {
                            shape: "S1e"
                        }
                    }
                },
                AppFlowConfig: {
                    type: "structure",
                    members: {
                        RoleArn: {},
                        FlowName: {}
                    }
                },
                CloudWatchConfig: {
                    type: "structure",
                    members: {
                        RoleArn: {},
                        BackTestConfiguration: {
                            shape: "S1r"
                        }
                    }
                },
                RDSSourceConfig: {
                    type: "structure",
                    members: {
                        DBInstanceIdentifier: {},
                        DatabaseHost: {},
                        DatabasePort: {
                            type: "integer"
                        },
                        SecretManagerArn: {},
                        DatabaseName: {},
                        TableName: {},
                        RoleArn: {},
                        VpcConfiguration: {
                            shape: "S1z"
                        }
                    }
                },
                RedshiftSourceConfig: {
                    type: "structure",
                    members: {
                        ClusterIdentifier: {},
                        DatabaseHost: {},
                        DatabasePort: {
                            type: "integer"
                        },
                        SecretManagerArn: {},
                        DatabaseName: {},
                        TableName: {},
                        RoleArn: {},
                        VpcConfiguration: {
                            shape: "S1z"
                        }
                    }
                },
                AthenaSourceConfig: {
                    type: "structure",
                    members: {
                        RoleArn: {},
                        DatabaseName: {},
                        DataCatalog: {},
                        TableName: {},
                        WorkGroupName: {},
                        S3ResultsPath: {},
                        BackTestConfiguration: {
                            shape: "S1r"
                        }
                    }
                }
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "structure",
            members: {
                CsvFormatDescriptor: {
                    type: "structure",
                    members: {
                        FileCompression: {},
                        Charset: {},
                        ContainsHeader: {
                            type: "boolean"
                        },
                        Delimiter: {},
                        HeaderList: {
                            type: "list",
                            member: {}
                        },
                        QuoteSymbol: {}
                    }
                },
                JsonFormatDescriptor: {
                    type: "structure",
                    members: {
                        FileCompression: {},
                        Charset: {}
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "RunBackTestMode" ],
            members: {
                RunBackTestMode: {
                    type: "boolean"
                }
            }
        },
        S1z: {
            type: "structure",
            required: [ "SubnetIdList", "SecurityGroupIdList" ],
            members: {
                SubnetIdList: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIdList: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    FilterList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DimensionValue: {},
                                FilterOperation: {}
                            }
                        }
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                Value: {
                    type: "structure",
                    members: {
                        S: {},
                        N: {},
                        B: {},
                        SS: {
                            type: "list",
                            member: {}
                        },
                        NS: {
                            type: "list",
                            member: {}
                        },
                        BS: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                Confidence: {},
                Message: {}
            }
        }
    },
    paginators: {
        DescribeAnomalyDetectionExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetFeedback: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAlerts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnomalyDetectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnomalyGroupRelatedMetrics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnomalyGroupSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnomalyGroupTimeSeries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMetricSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mgn"] = {};

AWS.Mgn = AWS.Service.defineService("mgn", [ "2020-02-26" ]);

AWS.apiLoader.services["mgn"]["2020-02-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-02-26",
        endpointPrefix: "mgn",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "mgn",
        serviceFullName: "Application Migration Service",
        serviceId: "mgn",
        signatureVersion: "v4",
        signingName: "mgn",
        uid: "mgn-2020-02-26"
    },
    operations: {
        ArchiveApplication: {
            http: {
                requestUri: "/ArchiveApplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationID" ],
                members: {
                    accountID: {},
                    applicationID: {}
                }
            },
            output: {
                shape: "S4"
            }
        },
        ArchiveWave: {
            http: {
                requestUri: "/ArchiveWave",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "waveID" ],
                members: {
                    accountID: {},
                    waveID: {}
                }
            },
            output: {
                shape: "Sj"
            }
        },
        AssociateApplications: {
            http: {
                requestUri: "/AssociateApplications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationIDs", "waveID" ],
                members: {
                    accountID: {},
                    applicationIDs: {
                        shape: "Sq"
                    },
                    waveID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        AssociateSourceServers: {
            http: {
                requestUri: "/AssociateSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationID", "sourceServerIDs" ],
                members: {
                    accountID: {},
                    applicationID: {},
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        ChangeServerLifeCycleState: {
            http: {
                requestUri: "/ChangeServerLifeCycleState",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "lifeCycle", "sourceServerID" ],
                members: {
                    accountID: {},
                    lifeCycle: {
                        type: "structure",
                        required: [ "state" ],
                        members: {
                            state: {}
                        }
                    },
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        CreateApplication: {
            http: {
                requestUri: "/CreateApplication",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    accountID: {},
                    description: {},
                    name: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                shape: "S4"
            },
            idempotent: true
        },
        CreateConnector: {
            http: {
                requestUri: "/CreateConnector",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "ssmInstanceID" ],
                members: {
                    name: {},
                    ssmCommandConfig: {
                        shape: "S2b"
                    },
                    ssmInstanceID: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                shape: "S2f"
            },
            idempotent: true
        },
        CreateLaunchConfigurationTemplate: {
            http: {
                requestUri: "/CreateLaunchConfigurationTemplate",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    associatePublicIpAddress: {
                        type: "boolean"
                    },
                    bootMode: {},
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    enableMapAutoTagging: {
                        type: "boolean"
                    },
                    largeVolumeConf: {
                        shape: "S2j"
                    },
                    launchDisposition: {},
                    licensing: {
                        shape: "S2o"
                    },
                    mapAutoTaggingMpeID: {},
                    postLaunchActions: {
                        shape: "S2p"
                    },
                    smallVolumeConf: {
                        shape: "S2j"
                    },
                    smallVolumeMaxSize: {
                        type: "long"
                    },
                    tags: {
                        shape: "Se"
                    },
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                shape: "S36"
            }
        },
        CreateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/CreateReplicationConfigurationTemplate",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "associateDefaultSecurityGroup", "bandwidthThrottling", "createPublicIP", "dataPlaneRouting", "defaultLargeStagingDiskType", "ebsEncryption", "replicationServerInstanceType", "replicationServersSecurityGroupsIDs", "stagingAreaSubnetId", "stagingAreaTags", "useDedicatedReplicationServer" ],
                members: {
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S3e"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "Se"
                    },
                    tags: {
                        shape: "Se"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    },
                    useFipsEndpoint: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S3h"
            }
        },
        CreateWave: {
            http: {
                requestUri: "/CreateWave",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    accountID: {},
                    description: {},
                    name: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                shape: "Sj"
            },
            idempotent: true
        },
        DeleteApplication: {
            http: {
                requestUri: "/DeleteApplication",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "applicationID" ],
                members: {
                    accountID: {},
                    applicationID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteConnector: {
            http: {
                requestUri: "/DeleteConnector",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "connectorID" ],
                members: {
                    connectorID: {}
                }
            },
            idempotent: true
        },
        DeleteJob: {
            http: {
                requestUri: "/DeleteJob",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    accountID: {},
                    jobID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteLaunchConfigurationTemplate: {
            http: {
                requestUri: "/DeleteLaunchConfigurationTemplate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "launchConfigurationTemplateID" ],
                members: {
                    launchConfigurationTemplateID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteReplicationConfigurationTemplate: {
            http: {
                requestUri: "/DeleteReplicationConfigurationTemplate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    replicationConfigurationTemplateID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSourceServer: {
            http: {
                requestUri: "/DeleteSourceServer",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteVcenterClient: {
            http: {
                requestUri: "/DeleteVcenterClient",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "vcenterClientID" ],
                members: {
                    vcenterClientID: {}
                }
            },
            idempotent: true
        },
        DeleteWave: {
            http: {
                requestUri: "/DeleteWave",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "waveID" ],
                members: {
                    accountID: {},
                    waveID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeJobLogItems: {
            http: {
                requestUri: "/DescribeJobLogItems",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    accountID: {},
                    jobID: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                event: {},
                                eventData: {
                                    type: "structure",
                                    members: {
                                        conversionServerID: {},
                                        rawError: {},
                                        sourceServerID: {},
                                        targetInstanceID: {}
                                    }
                                },
                                logDateTime: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeJobs: {
            http: {
                requestUri: "/DescribeJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountID: {},
                    filters: {
                        type: "structure",
                        members: {
                            fromDate: {},
                            jobIDs: {
                                type: "list",
                                member: {}
                            },
                            toDate: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S4b"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeLaunchConfigurationTemplates: {
            http: {
                requestUri: "/DescribeLaunchConfigurationTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    launchConfigurationTemplateIDs: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeReplicationConfigurationTemplates: {
            http: {
                requestUri: "/DescribeReplicationConfigurationTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    replicationConfigurationTemplateIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S3h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSourceServers: {
            http: {
                requestUri: "/DescribeSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountID: {},
                    filters: {
                        type: "structure",
                        members: {
                            applicationIDs: {
                                type: "list",
                                member: {}
                            },
                            isArchived: {
                                type: "boolean"
                            },
                            lifeCycleStates: {
                                type: "list",
                                member: {}
                            },
                            replicationTypes: {
                                type: "list",
                                member: {}
                            },
                            sourceServerIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeVcenterClients: {
            http: {
                method: "GET",
                requestUri: "/DescribeVcenterClients",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                datacenterName: {},
                                hostname: {},
                                lastSeenDatetime: {},
                                sourceServerTags: {
                                    shape: "Se"
                                },
                                tags: {
                                    shape: "Se"
                                },
                                vcenterClientID: {},
                                vcenterUUID: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DisassociateApplications: {
            http: {
                requestUri: "/DisassociateApplications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationIDs", "waveID" ],
                members: {
                    accountID: {},
                    applicationIDs: {
                        shape: "Sq"
                    },
                    waveID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateSourceServers: {
            http: {
                requestUri: "/DisassociateSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationID", "sourceServerIDs" ],
                members: {
                    accountID: {},
                    applicationID: {},
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisconnectFromService: {
            http: {
                requestUri: "/DisconnectFromService",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        FinalizeCutover: {
            http: {
                requestUri: "/FinalizeCutover",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        GetLaunchConfiguration: {
            http: {
                requestUri: "/GetLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5f"
            }
        },
        GetReplicationConfiguration: {
            http: {
                requestUri: "/GetReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5i"
            }
        },
        InitializeService: {
            http: {
                requestUri: "/InitializeService",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListApplications: {
            http: {
                requestUri: "/ListApplications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountID: {},
                    filters: {
                        type: "structure",
                        members: {
                            applicationIDs: {
                                type: "list",
                                member: {}
                            },
                            isArchived: {
                                type: "boolean"
                            },
                            waveIDs: {
                                shape: "S5r"
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConnectors: {
            http: {
                requestUri: "/ListConnectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            connectorIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S2f"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExportErrors: {
            http: {
                requestUri: "/ListExportErrors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "exportID" ],
                members: {
                    exportID: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorData: {
                                    type: "structure",
                                    members: {
                                        rawError: {}
                                    }
                                },
                                errorDateTime: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExports: {
            http: {
                requestUri: "/ListExports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            exportIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S6a"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImportErrors: {
            http: {
                requestUri: "/ListImportErrors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importID" ],
                members: {
                    importID: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorData: {
                                    type: "structure",
                                    members: {
                                        accountID: {},
                                        applicationID: {},
                                        ec2LaunchTemplateID: {},
                                        rawError: {},
                                        rowNumber: {
                                            type: "long"
                                        },
                                        sourceServerID: {},
                                        waveID: {}
                                    }
                                },
                                errorDateTime: {},
                                errorType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImports: {
            http: {
                requestUri: "/ListImports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            importIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S6r"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListManagedAccounts: {
            http: {
                requestUri: "/ListManagedAccounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "items" ],
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSourceServerActions: {
            http: {
                requestUri: "/ListSourceServerActions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    filters: {
                        type: "structure",
                        members: {
                            actionIDs: {
                                shape: "S74"
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S78"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Se"
                    }
                }
            }
        },
        ListTemplateActions: {
            http: {
                requestUri: "/ListTemplateActions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchConfigurationTemplateID" ],
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            actionIDs: {
                                shape: "S74"
                            }
                        }
                    },
                    launchConfigurationTemplateID: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S7k"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWaves: {
            http: {
                requestUri: "/ListWaves",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountID: {},
                    filters: {
                        type: "structure",
                        members: {
                            isArchived: {
                                type: "boolean"
                            },
                            waveIDs: {
                                shape: "S5r"
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        MarkAsArchived: {
            http: {
                requestUri: "/MarkAsArchived",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        PauseReplication: {
            http: {
                requestUri: "/PauseReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        PutSourceServerAction: {
            http: {
                requestUri: "/PutSourceServerAction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "actionID", "actionName", "documentIdentifier", "order", "sourceServerID" ],
                members: {
                    accountID: {},
                    actionID: {},
                    actionName: {},
                    active: {
                        type: "boolean"
                    },
                    category: {},
                    description: {},
                    documentIdentifier: {},
                    documentVersion: {},
                    externalParameters: {
                        shape: "S2u"
                    },
                    mustSucceedForCutover: {
                        type: "boolean"
                    },
                    order: {
                        type: "integer"
                    },
                    parameters: {
                        shape: "S2y"
                    },
                    sourceServerID: {},
                    timeoutSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S78"
            }
        },
        PutTemplateAction: {
            http: {
                requestUri: "/PutTemplateAction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "actionID", "actionName", "documentIdentifier", "launchConfigurationTemplateID", "order" ],
                members: {
                    actionID: {},
                    actionName: {},
                    active: {
                        type: "boolean"
                    },
                    category: {},
                    description: {},
                    documentIdentifier: {},
                    documentVersion: {},
                    externalParameters: {
                        shape: "S2u"
                    },
                    launchConfigurationTemplateID: {},
                    mustSucceedForCutover: {
                        type: "boolean"
                    },
                    operatingSystem: {},
                    order: {
                        type: "integer"
                    },
                    parameters: {
                        shape: "S2y"
                    },
                    timeoutSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S7k"
            }
        },
        RemoveSourceServerAction: {
            http: {
                requestUri: "/RemoveSourceServerAction",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "actionID", "sourceServerID" ],
                members: {
                    accountID: {},
                    actionID: {},
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveTemplateAction: {
            http: {
                requestUri: "/RemoveTemplateAction",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "actionID", "launchConfigurationTemplateID" ],
                members: {
                    actionID: {},
                    launchConfigurationTemplateID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResumeReplication: {
            http: {
                requestUri: "/ResumeReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        RetryDataReplication: {
            http: {
                requestUri: "/RetryDataReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        StartCutover: {
            http: {
                requestUri: "/StartCutover",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServerIDs" ],
                members: {
                    accountID: {},
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S4b"
                    }
                }
            }
        },
        StartExport: {
            http: {
                requestUri: "/StartExport",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "s3Bucket", "s3Key" ],
                members: {
                    s3Bucket: {},
                    s3BucketOwner: {},
                    s3Key: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    exportTask: {
                        shape: "S6a"
                    }
                }
            }
        },
        StartImport: {
            http: {
                requestUri: "/StartImport",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "s3BucketSource" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    s3BucketSource: {
                        shape: "S6s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importTask: {
                        shape: "S6r"
                    }
                }
            }
        },
        StartReplication: {
            http: {
                requestUri: "/StartReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        StartTest: {
            http: {
                requestUri: "/StartTest",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServerIDs" ],
                members: {
                    accountID: {},
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S4b"
                    }
                }
            }
        },
        StopReplication: {
            http: {
                requestUri: "/StopReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            idempotent: true
        },
        TerminateTargetInstances: {
            http: {
                requestUri: "/TerminateTargetInstances",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServerIDs" ],
                members: {
                    accountID: {},
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S4b"
                    }
                }
            }
        },
        UnarchiveApplication: {
            http: {
                requestUri: "/UnarchiveApplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationID" ],
                members: {
                    accountID: {},
                    applicationID: {}
                }
            },
            output: {
                shape: "S4"
            }
        },
        UnarchiveWave: {
            http: {
                requestUri: "/UnarchiveWave",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "waveID" ],
                members: {
                    accountID: {},
                    waveID: {}
                }
            },
            output: {
                shape: "Sj"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            idempotent: true
        },
        UpdateApplication: {
            http: {
                requestUri: "/UpdateApplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationID" ],
                members: {
                    accountID: {},
                    applicationID: {},
                    description: {},
                    name: {}
                }
            },
            output: {
                shape: "S4"
            },
            idempotent: true
        },
        UpdateConnector: {
            http: {
                requestUri: "/UpdateConnector",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectorID" ],
                members: {
                    connectorID: {},
                    name: {},
                    ssmCommandConfig: {
                        shape: "S2b"
                    }
                }
            },
            output: {
                shape: "S2f"
            },
            idempotent: true
        },
        UpdateLaunchConfiguration: {
            http: {
                requestUri: "/UpdateLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    bootMode: {},
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    enableMapAutoTagging: {
                        type: "boolean"
                    },
                    launchDisposition: {},
                    licensing: {
                        shape: "S2o"
                    },
                    mapAutoTaggingMpeID: {},
                    name: {},
                    postLaunchActions: {
                        shape: "S2p"
                    },
                    sourceServerID: {},
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                shape: "S5f"
            },
            idempotent: true
        },
        UpdateLaunchConfigurationTemplate: {
            http: {
                requestUri: "/UpdateLaunchConfigurationTemplate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchConfigurationTemplateID" ],
                members: {
                    associatePublicIpAddress: {
                        type: "boolean"
                    },
                    bootMode: {},
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    enableMapAutoTagging: {
                        type: "boolean"
                    },
                    largeVolumeConf: {
                        shape: "S2j"
                    },
                    launchConfigurationTemplateID: {},
                    launchDisposition: {},
                    licensing: {
                        shape: "S2o"
                    },
                    mapAutoTaggingMpeID: {},
                    postLaunchActions: {
                        shape: "S2p"
                    },
                    smallVolumeConf: {
                        shape: "S2j"
                    },
                    smallVolumeMaxSize: {
                        type: "long"
                    },
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                shape: "S36"
            }
        },
        UpdateReplicationConfiguration: {
            http: {
                requestUri: "/UpdateReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    name: {},
                    replicatedDisks: {
                        shape: "S5j"
                    },
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S3e"
                    },
                    sourceServerID: {},
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "Se"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    },
                    useFipsEndpoint: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S5i"
            },
            idempotent: true
        },
        UpdateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/UpdateReplicationConfigurationTemplate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    arn: {},
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    replicationConfigurationTemplateID: {},
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S3e"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "Se"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    },
                    useFipsEndpoint: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S3h"
            }
        },
        UpdateSourceServer: {
            http: {
                requestUri: "/UpdateSourceServer",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    accountID: {},
                    connectorAction: {
                        shape: "S10"
                    },
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            },
            idempotent: true
        },
        UpdateSourceServerReplicationType: {
            http: {
                requestUri: "/UpdateSourceServerReplicationType",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "replicationType", "sourceServerID" ],
                members: {
                    accountID: {},
                    replicationType: {},
                    sourceServerID: {}
                }
            },
            output: {
                shape: "Sz"
            }
        },
        UpdateWave: {
            http: {
                requestUri: "/UpdateWave",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "waveID" ],
                members: {
                    accountID: {},
                    description: {},
                    name: {},
                    waveID: {}
                }
            },
            output: {
                shape: "Sj"
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                applicationAggregatedStatus: {
                    type: "structure",
                    members: {
                        healthStatus: {},
                        lastUpdateDateTime: {},
                        progressStatus: {},
                        totalSourceServers: {
                            type: "long"
                        }
                    }
                },
                applicationID: {},
                arn: {},
                creationDateTime: {},
                description: {},
                isArchived: {
                    type: "boolean"
                },
                lastModifiedDateTime: {},
                name: {},
                tags: {
                    shape: "Se"
                },
                waveID: {}
            }
        },
        Se: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sj: {
            type: "structure",
            members: {
                arn: {},
                creationDateTime: {},
                description: {},
                isArchived: {
                    type: "boolean"
                },
                lastModifiedDateTime: {},
                name: {},
                tags: {
                    shape: "Se"
                },
                waveAggregatedStatus: {
                    type: "structure",
                    members: {
                        healthStatus: {},
                        lastUpdateDateTime: {},
                        progressStatus: {},
                        replicationStartedDateTime: {},
                        totalApplications: {
                            type: "long"
                        }
                    }
                },
                waveID: {}
            }
        },
        Sq: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "structure",
            members: {
                applicationID: {},
                arn: {},
                connectorAction: {
                    shape: "S10"
                },
                dataReplicationInfo: {
                    type: "structure",
                    members: {
                        dataReplicationError: {
                            type: "structure",
                            members: {
                                error: {},
                                rawError: {}
                            }
                        },
                        dataReplicationInitiation: {
                            type: "structure",
                            members: {
                                nextAttemptDateTime: {},
                                startDateTime: {},
                                steps: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            status: {}
                                        }
                                    }
                                }
                            }
                        },
                        dataReplicationState: {},
                        etaDateTime: {},
                        lagDuration: {},
                        lastSnapshotDateTime: {},
                        replicatedDisks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    backloggedStorageBytes: {
                                        type: "long"
                                    },
                                    deviceName: {},
                                    replicatedStorageBytes: {
                                        type: "long"
                                    },
                                    rescannedStorageBytes: {
                                        type: "long"
                                    },
                                    totalStorageBytes: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    }
                },
                fqdnForActionFramework: {},
                isArchived: {
                    type: "boolean"
                },
                launchedInstance: {
                    type: "structure",
                    members: {
                        ec2InstanceID: {},
                        firstBoot: {},
                        jobID: {}
                    }
                },
                lifeCycle: {
                    type: "structure",
                    members: {
                        addedToServiceDateTime: {},
                        elapsedReplicationDuration: {},
                        firstByteDateTime: {},
                        lastCutover: {
                            type: "structure",
                            members: {
                                finalized: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                },
                                initiated: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {},
                                        jobID: {}
                                    }
                                },
                                reverted: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                }
                            }
                        },
                        lastSeenByServiceDateTime: {},
                        lastTest: {
                            type: "structure",
                            members: {
                                finalized: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                },
                                initiated: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {},
                                        jobID: {}
                                    }
                                },
                                reverted: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                }
                            }
                        },
                        state: {}
                    }
                },
                replicationType: {},
                sourceProperties: {
                    type: "structure",
                    members: {
                        cpus: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    cores: {
                                        type: "long"
                                    },
                                    modelName: {}
                                }
                            }
                        },
                        disks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    bytes: {
                                        type: "long"
                                    },
                                    deviceName: {}
                                }
                            }
                        },
                        identificationHints: {
                            type: "structure",
                            members: {
                                awsInstanceID: {},
                                fqdn: {},
                                hostname: {},
                                vmPath: {},
                                vmWareUuid: {}
                            }
                        },
                        lastUpdatedDateTime: {},
                        networkInterfaces: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    ips: {
                                        type: "list",
                                        member: {}
                                    },
                                    isPrimary: {
                                        type: "boolean"
                                    },
                                    macAddress: {}
                                }
                            }
                        },
                        os: {
                            type: "structure",
                            members: {
                                fullString: {}
                            }
                        },
                        ramBytes: {
                            type: "long"
                        },
                        recommendedInstanceType: {}
                    }
                },
                sourceServerID: {},
                tags: {
                    shape: "Se"
                },
                userProvidedID: {},
                vcenterClientID: {}
            }
        },
        S10: {
            type: "structure",
            members: {
                connectorArn: {},
                credentialsSecretArn: {}
            }
        },
        S2b: {
            type: "structure",
            required: [ "cloudWatchOutputEnabled", "s3OutputEnabled" ],
            members: {
                cloudWatchLogGroupName: {},
                cloudWatchOutputEnabled: {
                    type: "boolean"
                },
                outputS3BucketName: {},
                s3OutputEnabled: {
                    type: "boolean"
                }
            }
        },
        S2f: {
            type: "structure",
            members: {
                arn: {},
                connectorID: {},
                name: {},
                ssmCommandConfig: {
                    shape: "S2b"
                },
                ssmInstanceID: {},
                tags: {
                    shape: "Se"
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                iops: {
                    type: "long"
                },
                throughput: {
                    type: "long"
                },
                volumeType: {}
            }
        },
        S2o: {
            type: "structure",
            members: {
                osByol: {
                    type: "boolean"
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                cloudWatchLogGroupName: {},
                deployment: {},
                s3LogBucket: {},
                s3OutputKeyPrefix: {},
                ssmDocuments: {
                    type: "list",
                    member: {
                        shape: "S2t"
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            required: [ "actionName", "ssmDocumentName" ],
            members: {
                actionName: {},
                externalParameters: {
                    shape: "S2u"
                },
                mustSucceedForCutover: {
                    type: "boolean"
                },
                parameters: {
                    shape: "S2y"
                },
                ssmDocumentName: {},
                timeoutSeconds: {
                    type: "integer"
                }
            }
        },
        S2u: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    dynamicPath: {}
                },
                union: true
            }
        },
        S2y: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {
                    type: "structure",
                    required: [ "parameterName", "parameterType" ],
                    members: {
                        parameterName: {},
                        parameterType: {}
                    }
                }
            }
        },
        S36: {
            type: "structure",
            required: [ "launchConfigurationTemplateID" ],
            members: {
                arn: {},
                associatePublicIpAddress: {
                    type: "boolean"
                },
                bootMode: {},
                copyPrivateIp: {
                    type: "boolean"
                },
                copyTags: {
                    type: "boolean"
                },
                ec2LaunchTemplateID: {},
                enableMapAutoTagging: {
                    type: "boolean"
                },
                largeVolumeConf: {
                    shape: "S2j"
                },
                launchConfigurationTemplateID: {},
                launchDisposition: {},
                licensing: {
                    shape: "S2o"
                },
                mapAutoTaggingMpeID: {},
                postLaunchActions: {
                    shape: "S2p"
                },
                smallVolumeConf: {
                    shape: "S2j"
                },
                smallVolumeMaxSize: {
                    type: "long"
                },
                tags: {
                    shape: "Se"
                },
                targetInstanceTypeRightSizingMethod: {}
            }
        },
        S3e: {
            type: "list",
            member: {}
        },
        S3h: {
            type: "structure",
            required: [ "replicationConfigurationTemplateID" ],
            members: {
                arn: {},
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                replicationConfigurationTemplateID: {},
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S3e"
                },
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "Se"
                },
                tags: {
                    shape: "Se"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                },
                useFipsEndpoint: {
                    type: "boolean"
                }
            }
        },
        S4b: {
            type: "structure",
            required: [ "jobID" ],
            members: {
                arn: {},
                creationDateTime: {},
                endDateTime: {},
                initiatedBy: {},
                jobID: {},
                participatingServers: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "sourceServerID" ],
                        members: {
                            launchStatus: {},
                            launchedEc2InstanceID: {},
                            postLaunchActionsStatus: {
                                type: "structure",
                                members: {
                                    postLaunchActionsLaunchStatusList: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                executionID: {},
                                                executionStatus: {},
                                                failureReason: {},
                                                ssmDocument: {
                                                    shape: "S2t"
                                                },
                                                ssmDocumentType: {}
                                            }
                                        }
                                    },
                                    ssmAgentDiscoveryDatetime: {}
                                }
                            },
                            sourceServerID: {}
                        }
                    }
                },
                status: {},
                tags: {
                    shape: "Se"
                },
                type: {}
            }
        },
        S5f: {
            type: "structure",
            members: {
                bootMode: {},
                copyPrivateIp: {
                    type: "boolean"
                },
                copyTags: {
                    type: "boolean"
                },
                ec2LaunchTemplateID: {},
                enableMapAutoTagging: {
                    type: "boolean"
                },
                launchDisposition: {},
                licensing: {
                    shape: "S2o"
                },
                mapAutoTaggingMpeID: {},
                name: {},
                postLaunchActions: {
                    shape: "S2p"
                },
                sourceServerID: {},
                targetInstanceTypeRightSizingMethod: {}
            }
        },
        S5i: {
            type: "structure",
            members: {
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                name: {},
                replicatedDisks: {
                    shape: "S5j"
                },
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S3e"
                },
                sourceServerID: {},
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "Se"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                },
                useFipsEndpoint: {
                    type: "boolean"
                }
            }
        },
        S5j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    deviceName: {},
                    iops: {
                        type: "long"
                    },
                    isBootDisk: {
                        type: "boolean"
                    },
                    stagingDiskType: {},
                    throughput: {
                        type: "long"
                    }
                }
            }
        },
        S5r: {
            type: "list",
            member: {}
        },
        S6a: {
            type: "structure",
            members: {
                creationDateTime: {},
                endDateTime: {},
                exportID: {},
                progressPercentage: {
                    type: "float"
                },
                s3Bucket: {},
                s3BucketOwner: {},
                s3Key: {},
                status: {},
                summary: {
                    type: "structure",
                    members: {
                        applicationsCount: {
                            type: "long"
                        },
                        serversCount: {
                            type: "long"
                        },
                        wavesCount: {
                            type: "long"
                        }
                    }
                }
            }
        },
        S6r: {
            type: "structure",
            members: {
                creationDateTime: {},
                endDateTime: {},
                importID: {},
                progressPercentage: {
                    type: "float"
                },
                s3BucketSource: {
                    shape: "S6s"
                },
                status: {},
                summary: {
                    type: "structure",
                    members: {
                        applications: {
                            type: "structure",
                            members: {
                                createdCount: {
                                    type: "long"
                                },
                                modifiedCount: {
                                    type: "long"
                                }
                            }
                        },
                        servers: {
                            type: "structure",
                            members: {
                                createdCount: {
                                    type: "long"
                                },
                                modifiedCount: {
                                    type: "long"
                                }
                            }
                        },
                        waves: {
                            type: "structure",
                            members: {
                                createdCount: {
                                    type: "long"
                                },
                                modifiedCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        S6s: {
            type: "structure",
            required: [ "s3Bucket", "s3Key" ],
            members: {
                s3Bucket: {},
                s3BucketOwner: {},
                s3Key: {}
            }
        },
        S74: {
            type: "list",
            member: {}
        },
        S78: {
            type: "structure",
            members: {
                actionID: {},
                actionName: {},
                active: {
                    type: "boolean"
                },
                category: {},
                description: {},
                documentIdentifier: {},
                documentVersion: {},
                externalParameters: {
                    shape: "S2u"
                },
                mustSucceedForCutover: {
                    type: "boolean"
                },
                order: {
                    type: "integer"
                },
                parameters: {
                    shape: "S2y"
                },
                timeoutSeconds: {
                    type: "integer"
                }
            }
        },
        S7k: {
            type: "structure",
            members: {
                actionID: {},
                actionName: {},
                active: {
                    type: "boolean"
                },
                category: {},
                description: {},
                documentIdentifier: {},
                documentVersion: {},
                externalParameters: {
                    shape: "S2u"
                },
                mustSucceedForCutover: {
                    type: "boolean"
                },
                operatingSystem: {},
                order: {
                    type: "integer"
                },
                parameters: {
                    shape: "S2y"
                },
                timeoutSeconds: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        DescribeJobLogItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeLaunchConfigurationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeReplicationConfigurationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeSourceServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeVcenterClients: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListConnectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListExportErrors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListExports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListImportErrors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListImports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListManagedAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListSourceServerActions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListTemplateActions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListWaves: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    }
};

AWS.apiLoader.services["lookoutequipment"] = {};

AWS.LookoutEquipment = AWS.Service.defineService("lookoutequipment", [ "2020-12-15" ]);

AWS.apiLoader.services["lookoutequipment"]["2020-12-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-12-15",
        endpointPrefix: "lookoutequipment",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "LookoutEquipment",
        serviceFullName: "Amazon Lookout for Equipment",
        serviceId: "LookoutEquipment",
        signatureVersion: "v4",
        targetPrefix: "AWSLookoutEquipmentFrontendService",
        uid: "lookoutequipment-2020-12-15"
    },
    operations: {
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName", "ClientToken" ],
                members: {
                    DatasetName: {},
                    DatasetSchema: {
                        shape: "S3"
                    },
                    ServerSideKmsKeyId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetName: {},
                    DatasetArn: {},
                    Status: {}
                }
            }
        },
        CreateInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName", "InferenceSchedulerName", "DataUploadFrequency", "DataInputConfiguration", "DataOutputConfiguration", "RoleArn", "ClientToken" ],
                members: {
                    ModelName: {},
                    InferenceSchedulerName: {},
                    DataDelayOffsetInMinutes: {
                        type: "long"
                    },
                    DataUploadFrequency: {},
                    DataInputConfiguration: {
                        shape: "Sj"
                    },
                    DataOutputConfiguration: {
                        shape: "Sr"
                    },
                    RoleArn: {},
                    ServerSideKmsKeyId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InferenceSchedulerArn: {},
                    InferenceSchedulerName: {},
                    Status: {}
                }
            }
        },
        CreateLabel: {
            input: {
                type: "structure",
                required: [ "LabelGroupName", "StartTime", "EndTime", "Rating", "ClientToken" ],
                members: {
                    LabelGroupName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Rating: {},
                    FaultCode: {},
                    Notes: {},
                    Equipment: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LabelId: {}
                }
            }
        },
        CreateLabelGroup: {
            input: {
                type: "structure",
                required: [ "LabelGroupName", "ClientToken" ],
                members: {
                    LabelGroupName: {},
                    FaultCodes: {
                        shape: "S17"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LabelGroupName: {},
                    LabelGroupArn: {}
                }
            }
        },
        CreateModel: {
            input: {
                type: "structure",
                required: [ "ModelName", "DatasetName", "ClientToken" ],
                members: {
                    ModelName: {},
                    DatasetName: {},
                    DatasetSchema: {
                        shape: "S3"
                    },
                    LabelsInputConfiguration: {
                        shape: "S1c"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    TrainingDataStartTime: {
                        type: "timestamp"
                    },
                    TrainingDataEndTime: {
                        type: "timestamp"
                    },
                    EvaluationDataStartTime: {
                        type: "timestamp"
                    },
                    EvaluationDataEndTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    DataPreProcessingConfiguration: {
                        shape: "S1e"
                    },
                    ServerSideKmsKeyId: {},
                    Tags: {
                        shape: "S7"
                    },
                    OffCondition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    Status: {}
                }
            }
        },
        CreateRetrainingScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName", "RetrainingFrequency", "LookbackWindow", "ClientToken" ],
                members: {
                    ModelName: {},
                    RetrainingStartDate: {
                        type: "timestamp"
                    },
                    RetrainingFrequency: {},
                    LookbackWindow: {},
                    PromoteMode: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    Status: {}
                }
            }
        },
        DeleteDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName" ],
                members: {
                    DatasetName: {}
                }
            }
        },
        DeleteInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            }
        },
        DeleteLabel: {
            input: {
                type: "structure",
                required: [ "LabelGroupName", "LabelId" ],
                members: {
                    LabelGroupName: {},
                    LabelId: {}
                }
            }
        },
        DeleteLabelGroup: {
            input: {
                type: "structure",
                required: [ "LabelGroupName" ],
                members: {
                    LabelGroupName: {}
                }
            }
        },
        DeleteModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            }
        },
        DeleteRetrainingScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            }
        },
        DescribeDataIngestionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    DatasetArn: {},
                    IngestionInputConfiguration: {
                        shape: "S22"
                    },
                    RoleArn: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Status: {},
                    FailedReason: {},
                    DataQualitySummary: {
                        shape: "S27"
                    },
                    IngestedFilesSummary: {
                        shape: "S2g"
                    },
                    StatusDetail: {},
                    IngestedDataSize: {
                        type: "long"
                    },
                    DataStartTime: {
                        type: "timestamp"
                    },
                    DataEndTime: {
                        type: "timestamp"
                    },
                    SourceDatasetArn: {}
                }
            }
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName" ],
                members: {
                    DatasetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetName: {},
                    DatasetArn: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Status: {},
                    Schema: {
                        jsonvalue: true
                    },
                    ServerSideKmsKeyId: {},
                    IngestionInputConfiguration: {
                        shape: "S22"
                    },
                    DataQualitySummary: {
                        shape: "S27"
                    },
                    IngestedFilesSummary: {
                        shape: "S2g"
                    },
                    RoleArn: {},
                    DataStartTime: {
                        type: "timestamp"
                    },
                    DataEndTime: {
                        type: "timestamp"
                    },
                    SourceDatasetArn: {}
                }
            }
        },
        DescribeInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    ModelName: {},
                    InferenceSchedulerName: {},
                    InferenceSchedulerArn: {},
                    Status: {},
                    DataDelayOffsetInMinutes: {
                        type: "long"
                    },
                    DataUploadFrequency: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    DataInputConfiguration: {
                        shape: "Sj"
                    },
                    DataOutputConfiguration: {
                        shape: "Sr"
                    },
                    RoleArn: {},
                    ServerSideKmsKeyId: {},
                    LatestInferenceResult: {}
                }
            }
        },
        DescribeLabel: {
            input: {
                type: "structure",
                required: [ "LabelGroupName", "LabelId" ],
                members: {
                    LabelGroupName: {},
                    LabelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LabelGroupName: {},
                    LabelGroupArn: {},
                    LabelId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Rating: {},
                    FaultCode: {},
                    Notes: {},
                    Equipment: {},
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLabelGroup: {
            input: {
                type: "structure",
                required: [ "LabelGroupName" ],
                members: {
                    LabelGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LabelGroupName: {},
                    LabelGroupArn: {},
                    FaultCodes: {
                        shape: "S17"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    DatasetName: {},
                    DatasetArn: {},
                    Schema: {
                        jsonvalue: true
                    },
                    LabelsInputConfiguration: {
                        shape: "S1c"
                    },
                    TrainingDataStartTime: {
                        type: "timestamp"
                    },
                    TrainingDataEndTime: {
                        type: "timestamp"
                    },
                    EvaluationDataStartTime: {
                        type: "timestamp"
                    },
                    EvaluationDataEndTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    DataPreProcessingConfiguration: {
                        shape: "S1e"
                    },
                    Status: {},
                    TrainingExecutionStartTime: {
                        type: "timestamp"
                    },
                    TrainingExecutionEndTime: {
                        type: "timestamp"
                    },
                    FailedReason: {},
                    ModelMetrics: {
                        jsonvalue: true
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ServerSideKmsKeyId: {},
                    OffCondition: {},
                    SourceModelVersionArn: {},
                    ImportJobStartTime: {
                        type: "timestamp"
                    },
                    ImportJobEndTime: {
                        type: "timestamp"
                    },
                    ActiveModelVersion: {
                        type: "long"
                    },
                    ActiveModelVersionArn: {},
                    ModelVersionActivatedAt: {
                        type: "timestamp"
                    },
                    PreviousActiveModelVersion: {
                        type: "long"
                    },
                    PreviousActiveModelVersionArn: {},
                    PreviousModelVersionActivatedAt: {
                        type: "timestamp"
                    },
                    PriorModelMetrics: {
                        jsonvalue: true
                    },
                    LatestScheduledRetrainingFailedReason: {},
                    LatestScheduledRetrainingStatus: {},
                    LatestScheduledRetrainingModelVersion: {
                        type: "long"
                    },
                    LatestScheduledRetrainingStartTime: {
                        type: "timestamp"
                    },
                    LatestScheduledRetrainingAvailableDataInDays: {
                        type: "integer"
                    },
                    NextScheduledRetrainingStartDate: {
                        type: "timestamp"
                    },
                    AccumulatedInferenceDataStartTime: {
                        type: "timestamp"
                    },
                    AccumulatedInferenceDataEndTime: {
                        type: "timestamp"
                    },
                    RetrainingSchedulerStatus: {}
                }
            }
        },
        DescribeModelVersion: {
            input: {
                type: "structure",
                required: [ "ModelName", "ModelVersion" ],
                members: {
                    ModelName: {},
                    ModelVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    ModelVersion: {
                        type: "long"
                    },
                    ModelVersionArn: {},
                    Status: {},
                    SourceType: {},
                    DatasetName: {},
                    DatasetArn: {},
                    Schema: {},
                    LabelsInputConfiguration: {
                        shape: "S1c"
                    },
                    TrainingDataStartTime: {
                        type: "timestamp"
                    },
                    TrainingDataEndTime: {
                        type: "timestamp"
                    },
                    EvaluationDataStartTime: {
                        type: "timestamp"
                    },
                    EvaluationDataEndTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    DataPreProcessingConfiguration: {
                        shape: "S1e"
                    },
                    TrainingExecutionStartTime: {
                        type: "timestamp"
                    },
                    TrainingExecutionEndTime: {
                        type: "timestamp"
                    },
                    FailedReason: {},
                    ModelMetrics: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ServerSideKmsKeyId: {},
                    OffCondition: {},
                    SourceModelVersionArn: {},
                    ImportJobStartTime: {
                        type: "timestamp"
                    },
                    ImportJobEndTime: {
                        type: "timestamp"
                    },
                    ImportedDataSizeInBytes: {
                        type: "long"
                    },
                    PriorModelMetrics: {},
                    RetrainingAvailableDataInDays: {
                        type: "integer"
                    },
                    AutoPromotionResult: {},
                    AutoPromotionResultReason: {}
                }
            }
        },
        DescribeResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyRevisionId: {},
                    ResourcePolicy: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeRetrainingScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    RetrainingStartDate: {
                        type: "timestamp"
                    },
                    RetrainingFrequency: {},
                    LookbackWindow: {},
                    Status: {},
                    PromoteMode: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        ImportDataset: {
            input: {
                type: "structure",
                required: [ "SourceDatasetArn", "ClientToken" ],
                members: {
                    SourceDatasetArn: {},
                    DatasetName: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ServerSideKmsKeyId: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetName: {},
                    DatasetArn: {},
                    Status: {},
                    JobId: {}
                }
            }
        },
        ImportModelVersion: {
            input: {
                type: "structure",
                required: [ "SourceModelVersionArn", "DatasetName", "ClientToken" ],
                members: {
                    SourceModelVersionArn: {},
                    ModelName: {},
                    DatasetName: {},
                    LabelsInputConfiguration: {
                        shape: "S1c"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    RoleArn: {},
                    ServerSideKmsKeyId: {},
                    Tags: {
                        shape: "S7"
                    },
                    InferenceDataImportStrategy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    ModelVersionArn: {},
                    ModelVersion: {
                        type: "long"
                    },
                    Status: {}
                }
            }
        },
        ListDataIngestionJobs: {
            input: {
                type: "structure",
                members: {
                    DatasetName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DataIngestionJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                DatasetName: {},
                                DatasetArn: {},
                                IngestionInputConfiguration: {
                                    shape: "S22"
                                },
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        ListDatasets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DatasetNameBeginsWith: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DatasetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetName: {},
                                DatasetArn: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListInferenceEvents: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName", "IntervalStartTime", "IntervalEndTime" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InferenceSchedulerName: {},
                    IntervalStartTime: {
                        type: "timestamp"
                    },
                    IntervalEndTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    InferenceEventSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InferenceSchedulerArn: {},
                                InferenceSchedulerName: {},
                                EventStartTime: {
                                    type: "timestamp"
                                },
                                EventEndTime: {
                                    type: "timestamp"
                                },
                                Diagnostics: {},
                                EventDurationInSeconds: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListInferenceExecutions: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InferenceSchedulerName: {},
                    DataStartTimeAfter: {
                        type: "timestamp"
                    },
                    DataEndTimeBefore: {
                        type: "timestamp"
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    InferenceExecutionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                InferenceSchedulerName: {},
                                InferenceSchedulerArn: {},
                                ScheduledStartTime: {
                                    type: "timestamp"
                                },
                                DataStartTime: {
                                    type: "timestamp"
                                },
                                DataEndTime: {
                                    type: "timestamp"
                                },
                                DataInputConfiguration: {
                                    shape: "Sj"
                                },
                                DataOutputConfiguration: {
                                    shape: "Sr"
                                },
                                CustomerResultObject: {
                                    shape: "S2i"
                                },
                                Status: {},
                                FailedReason: {},
                                ModelVersion: {
                                    type: "long"
                                },
                                ModelVersionArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListInferenceSchedulers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InferenceSchedulerNameBeginsWith: {},
                    ModelName: {},
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    InferenceSchedulerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                InferenceSchedulerName: {},
                                InferenceSchedulerArn: {},
                                Status: {},
                                DataDelayOffsetInMinutes: {
                                    type: "long"
                                },
                                DataUploadFrequency: {},
                                LatestInferenceResult: {}
                            }
                        }
                    }
                }
            }
        },
        ListLabelGroups: {
            input: {
                type: "structure",
                members: {
                    LabelGroupNameBeginsWith: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    LabelGroupSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LabelGroupName: {},
                                LabelGroupArn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListLabels: {
            input: {
                type: "structure",
                required: [ "LabelGroupName" ],
                members: {
                    LabelGroupName: {},
                    IntervalStartTime: {
                        type: "timestamp"
                    },
                    IntervalEndTime: {
                        type: "timestamp"
                    },
                    FaultCode: {},
                    Equipment: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    LabelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LabelGroupName: {},
                                LabelId: {},
                                LabelGroupArn: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Rating: {},
                                FaultCode: {},
                                Equipment: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListModelVersions: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Status: {},
                    SourceType: {},
                    CreatedAtEndTime: {
                        type: "timestamp"
                    },
                    CreatedAtStartTime: {
                        type: "timestamp"
                    },
                    MaxModelVersion: {
                        type: "long"
                    },
                    MinModelVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ModelVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                ModelVersion: {
                                    type: "long"
                                },
                                ModelVersionArn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Status: {},
                                SourceType: {}
                            }
                        }
                    }
                }
            }
        },
        ListModels: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Status: {},
                    ModelNameBeginsWith: {},
                    DatasetNameBeginsWith: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                DatasetName: {},
                                DatasetArn: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                ActiveModelVersion: {
                                    type: "long"
                                },
                                ActiveModelVersionArn: {},
                                LatestScheduledRetrainingStatus: {},
                                LatestScheduledRetrainingModelVersion: {
                                    type: "long"
                                },
                                LatestScheduledRetrainingStartTime: {
                                    type: "timestamp"
                                },
                                NextScheduledRetrainingStartDate: {
                                    type: "timestamp"
                                },
                                RetrainingSchedulerStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListRetrainingSchedulers: {
            input: {
                type: "structure",
                members: {
                    ModelNameBeginsWith: {},
                    Status: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RetrainingSchedulerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                Status: {},
                                RetrainingStartDate: {
                                    type: "timestamp"
                                },
                                RetrainingFrequency: {},
                                LookbackWindow: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSensorStatistics: {
            input: {
                type: "structure",
                required: [ "DatasetName" ],
                members: {
                    DatasetName: {},
                    IngestionJobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SensorStatisticsSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ComponentName: {},
                                SensorName: {},
                                DataExists: {
                                    type: "boolean"
                                },
                                MissingValues: {
                                    shape: "S4w"
                                },
                                InvalidValues: {
                                    shape: "S4w"
                                },
                                InvalidDateEntries: {
                                    shape: "S4w"
                                },
                                DuplicateTimestamps: {
                                    shape: "S4w"
                                },
                                CategoricalValues: {
                                    type: "structure",
                                    required: [ "Status" ],
                                    members: {
                                        Status: {},
                                        NumberOfCategory: {
                                            type: "integer"
                                        }
                                    }
                                },
                                MultipleOperatingModes: {
                                    type: "structure",
                                    required: [ "Status" ],
                                    members: {
                                        Status: {}
                                    }
                                },
                                LargeTimestampGaps: {
                                    type: "structure",
                                    required: [ "Status" ],
                                    members: {
                                        Status: {},
                                        NumberOfLargeTimestampGaps: {
                                            type: "integer"
                                        },
                                        MaxTimestampGapInDays: {
                                            type: "integer"
                                        }
                                    }
                                },
                                MonotonicValues: {
                                    type: "structure",
                                    required: [ "Status" ],
                                    members: {
                                        Status: {},
                                        Monotonicity: {}
                                    }
                                },
                                DataStartTime: {
                                    type: "timestamp"
                                },
                                DataEndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "ResourcePolicy", "ClientToken" ],
                members: {
                    ResourceArn: {},
                    ResourcePolicy: {},
                    PolicyRevisionId: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    PolicyRevisionId: {}
                }
            }
        },
        StartDataIngestionJob: {
            input: {
                type: "structure",
                required: [ "DatasetName", "IngestionInputConfiguration", "RoleArn", "ClientToken" ],
                members: {
                    DatasetName: {},
                    IngestionInputConfiguration: {
                        shape: "S22"
                    },
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    Status: {}
                }
            }
        },
        StartInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    ModelName: {},
                    InferenceSchedulerName: {},
                    InferenceSchedulerArn: {},
                    Status: {}
                }
            }
        },
        StartRetrainingScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    Status: {}
                }
            }
        },
        StopInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    ModelName: {},
                    InferenceSchedulerName: {},
                    InferenceSchedulerArn: {},
                    Status: {}
                }
            }
        },
        StopRetrainingScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    Status: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateActiveModelVersion: {
            input: {
                type: "structure",
                required: [ "ModelName", "ModelVersion" ],
                members: {
                    ModelName: {},
                    ModelVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    CurrentActiveVersion: {
                        type: "long"
                    },
                    PreviousActiveVersion: {
                        type: "long"
                    },
                    CurrentActiveVersionArn: {},
                    PreviousActiveVersionArn: {}
                }
            }
        },
        UpdateInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {},
                    DataDelayOffsetInMinutes: {
                        type: "long"
                    },
                    DataUploadFrequency: {},
                    DataInputConfiguration: {
                        shape: "Sj"
                    },
                    DataOutputConfiguration: {
                        shape: "Sr"
                    },
                    RoleArn: {}
                }
            }
        },
        UpdateLabelGroup: {
            input: {
                type: "structure",
                required: [ "LabelGroupName" ],
                members: {
                    LabelGroupName: {},
                    FaultCodes: {
                        shape: "S17"
                    }
                }
            }
        },
        UpdateModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {},
                    LabelsInputConfiguration: {
                        shape: "S1c"
                    },
                    RoleArn: {}
                }
            }
        },
        UpdateRetrainingScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {},
                    RetrainingStartDate: {
                        type: "timestamp"
                    },
                    RetrainingFrequency: {},
                    LookbackWindow: {},
                    PromoteMode: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                InlineDataSchema: {
                    jsonvalue: true
                }
            }
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                S3InputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                },
                InputTimeZoneOffset: {},
                InferenceInputNameConfiguration: {
                    type: "structure",
                    members: {
                        TimestampFormat: {},
                        ComponentTimestampDelimiter: {}
                    }
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "S3OutputConfiguration" ],
            members: {
                S3OutputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                },
                KmsKeyId: {}
            }
        },
        S17: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "structure",
            members: {
                S3InputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                },
                LabelGroupName: {}
            }
        },
        S1e: {
            type: "structure",
            members: {
                TargetSamplingRate: {}
            }
        },
        S22: {
            type: "structure",
            required: [ "S3InputConfiguration" ],
            members: {
                S3InputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {},
                        KeyPattern: {}
                    }
                }
            }
        },
        S27: {
            type: "structure",
            required: [ "InsufficientSensorData", "MissingSensorData", "InvalidSensorData", "UnsupportedTimestamps", "DuplicateTimestamps" ],
            members: {
                InsufficientSensorData: {
                    type: "structure",
                    required: [ "MissingCompleteSensorData", "SensorsWithShortDateRange" ],
                    members: {
                        MissingCompleteSensorData: {
                            type: "structure",
                            required: [ "AffectedSensorCount" ],
                            members: {
                                AffectedSensorCount: {
                                    type: "integer"
                                }
                            }
                        },
                        SensorsWithShortDateRange: {
                            type: "structure",
                            required: [ "AffectedSensorCount" ],
                            members: {
                                AffectedSensorCount: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                MissingSensorData: {
                    type: "structure",
                    required: [ "AffectedSensorCount", "TotalNumberOfMissingValues" ],
                    members: {
                        AffectedSensorCount: {
                            type: "integer"
                        },
                        TotalNumberOfMissingValues: {
                            type: "integer"
                        }
                    }
                },
                InvalidSensorData: {
                    type: "structure",
                    required: [ "AffectedSensorCount", "TotalNumberOfInvalidValues" ],
                    members: {
                        AffectedSensorCount: {
                            type: "integer"
                        },
                        TotalNumberOfInvalidValues: {
                            type: "integer"
                        }
                    }
                },
                UnsupportedTimestamps: {
                    type: "structure",
                    required: [ "TotalNumberOfUnsupportedTimestamps" ],
                    members: {
                        TotalNumberOfUnsupportedTimestamps: {
                            type: "integer"
                        }
                    }
                },
                DuplicateTimestamps: {
                    type: "structure",
                    required: [ "TotalNumberOfDuplicateTimestamps" ],
                    members: {
                        TotalNumberOfDuplicateTimestamps: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S2g: {
            type: "structure",
            required: [ "TotalNumberOfFiles", "IngestedNumberOfFiles" ],
            members: {
                TotalNumberOfFiles: {
                    type: "integer"
                },
                IngestedNumberOfFiles: {
                    type: "integer"
                },
                DiscardedFiles: {
                    type: "list",
                    member: {
                        shape: "S2i"
                    }
                }
            }
        },
        S2i: {
            type: "structure",
            required: [ "Bucket", "Key" ],
            members: {
                Bucket: {},
                Key: {}
            }
        },
        S4w: {
            type: "structure",
            required: [ "Count", "Percentage" ],
            members: {
                Count: {
                    type: "integer"
                },
                Percentage: {
                    type: "float"
                }
            }
        }
    },
    paginators: {
        ListDataIngestionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDatasets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInferenceEvents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInferenceExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInferenceSchedulers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLabelGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLabels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListModelVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRetrainingSchedulers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSensorStatistics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["nimble"] = {};

AWS.Nimble = AWS.Service.defineService("nimble", [ "2020-08-01" ]);

AWS.apiLoader.services["nimble"]["2020-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-01",
        endpointPrefix: "nimble",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AmazonNimbleStudio",
        serviceId: "nimble",
        signatureVersion: "v4",
        signingName: "nimble",
        uid: "nimble-2020-08-01"
    },
    operations: {
        AcceptEulas: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/eula-acceptances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    eulaIds: {
                        shape: "S3"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eulaAcceptances: {
                        shape: "S6"
                    }
                }
            }
        },
        CreateLaunchProfile: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ec2SubnetIds", "launchProfileProtocolVersions", "name", "streamConfiguration", "studioComponentIds", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        shape: "Sc"
                    },
                    ec2SubnetIds: {
                        shape: "Sd"
                    },
                    launchProfileProtocolVersions: {
                        shape: "Sf"
                    },
                    name: {
                        shape: "Sh"
                    },
                    streamConfiguration: {
                        shape: "Si"
                    },
                    studioComponentIds: {
                        shape: "S15"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "S18"
                    }
                }
            }
        },
        CreateStreamingImage: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ec2ImageId", "name", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        shape: "S1k"
                    },
                    ec2ImageId: {},
                    name: {
                        shape: "S1m"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S1o"
                    }
                }
            }
        },
        CreateStreamingSession: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    ec2InstanceType: {},
                    launchProfileId: {},
                    ownedBy: {},
                    streamingImageId: {},
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1y"
                    }
                }
            }
        },
        CreateStreamingSessionStream: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    expirationInSeconds: {
                        type: "integer"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stream: {
                        shape: "S26"
                    }
                }
            },
            idempotent: true
        },
        CreateStudio: {
            http: {
                requestUri: "/2020-08-01/studios",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "adminRoleArn", "displayName", "studioName", "userRoleArn" ],
                members: {
                    adminRoleArn: {},
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    displayName: {
                        shape: "S2c"
                    },
                    studioEncryptionConfiguration: {
                        shape: "S2d"
                    },
                    studioName: {},
                    tags: {
                        shape: "S16"
                    },
                    userRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    studio: {
                        shape: "S2i"
                    }
                }
            }
        },
        CreateStudioComponent: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/studio-components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "studioId", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    configuration: {
                        shape: "S2n"
                    },
                    description: {
                        shape: "S30"
                    },
                    ec2SecurityGroupIds: {
                        shape: "S31"
                    },
                    initializationScripts: {
                        shape: "S33"
                    },
                    name: {
                        shape: "S38"
                    },
                    runtimeRoleArn: {},
                    scriptParameters: {
                        shape: "S39"
                    },
                    secureInitializationRoleArn: {},
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    subtype: {},
                    tags: {
                        shape: "S16"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S3g"
                    }
                }
            }
        },
        DeleteLaunchProfile: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "S18"
                    }
                }
            },
            idempotent: true
        },
        DeleteLaunchProfileMember: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "principalId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteStreamingImage: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "streamingImageId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    streamingImageId: {
                        location: "uri",
                        locationName: "streamingImageId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S1o"
                    }
                }
            },
            idempotent: true
        },
        DeleteStreamingSession: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1y"
                    }
                }
            },
            idempotent: true
        },
        DeleteStudio: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S2i"
                    }
                }
            },
            idempotent: true
        },
        DeleteStudioComponent: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioComponentId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    studioComponentId: {
                        location: "uri",
                        locationName: "studioComponentId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S3g"
                    }
                }
            },
            idempotent: true
        },
        DeleteStudioMember: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "principalId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetEula: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/eulas/{eulaId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "eulaId" ],
                members: {
                    eulaId: {
                        location: "uri",
                        locationName: "eulaId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eula: {
                        shape: "S40"
                    }
                }
            }
        },
        GetLaunchProfile: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "S18"
                    }
                }
            }
        },
        GetLaunchProfileDetails: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "S18"
                    },
                    streamingImages: {
                        shape: "S46"
                    },
                    studioComponentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    shape: "S8"
                                },
                                createdBy: {},
                                description: {
                                    shape: "S30"
                                },
                                name: {
                                    shape: "S38"
                                },
                                studioComponentId: {},
                                subtype: {},
                                type: {},
                                updatedAt: {
                                    shape: "S8"
                                },
                                updatedBy: {}
                            }
                        }
                    }
                }
            }
        },
        GetLaunchProfileInitialization: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/init",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "launchProfileProtocolVersions", "launchPurpose", "platform", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    launchProfileProtocolVersions: {
                        shape: "S4a",
                        location: "querystring",
                        locationName: "launchProfileProtocolVersions"
                    },
                    launchPurpose: {
                        location: "querystring",
                        locationName: "launchPurpose"
                    },
                    platform: {
                        location: "querystring",
                        locationName: "platform"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfileInitialization: {
                        type: "structure",
                        members: {
                            activeDirectory: {
                                type: "structure",
                                members: {
                                    computerAttributes: {
                                        shape: "S2p"
                                    },
                                    directoryId: {},
                                    directoryName: {},
                                    dnsIpAddresses: {
                                        type: "list",
                                        member: {}
                                    },
                                    organizationalUnitDistinguishedName: {},
                                    studioComponentId: {},
                                    studioComponentName: {
                                        shape: "S38"
                                    }
                                }
                            },
                            ec2SecurityGroupIds: {
                                type: "list",
                                member: {}
                            },
                            launchProfileId: {},
                            launchProfileProtocolVersion: {},
                            launchPurpose: {},
                            name: {
                                shape: "Sh"
                            },
                            platform: {},
                            systemInitializationScripts: {
                                shape: "S4i"
                            },
                            userInitializationScripts: {
                                shape: "S4i"
                            }
                        }
                    }
                }
            }
        },
        GetLaunchProfileMember: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "principalId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S4m"
                    }
                }
            }
        },
        GetStreamingImage: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "streamingImageId", "studioId" ],
                members: {
                    streamingImageId: {
                        location: "uri",
                        locationName: "streamingImageId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S1o"
                    }
                }
            }
        },
        GetStreamingSession: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1y"
                    }
                }
            }
        },
        GetStreamingSessionBackup: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-session-backups/{backupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "backupId", "studioId" ],
                members: {
                    backupId: {
                        location: "uri",
                        locationName: "backupId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingSessionBackup: {
                        shape: "S4u"
                    }
                }
            }
        },
        GetStreamingSessionStream: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams/{streamId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "streamId", "studioId" ],
                members: {
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    streamId: {
                        location: "uri",
                        locationName: "streamId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stream: {
                        shape: "S26"
                    }
                }
            }
        },
        GetStudio: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S2i"
                    }
                }
            }
        },
        GetStudioComponent: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioComponentId", "studioId" ],
                members: {
                    studioComponentId: {
                        location: "uri",
                        locationName: "studioComponentId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S3g"
                    }
                }
            }
        },
        GetStudioMember: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "principalId", "studioId" ],
                members: {
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S53"
                    }
                }
            }
        },
        ListEulaAcceptances: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/eula-acceptances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    eulaIds: {
                        shape: "S4a",
                        location: "querystring",
                        locationName: "eulaIds"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eulaAcceptances: {
                        shape: "S6"
                    },
                    nextToken: {}
                }
            }
        },
        ListEulas: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/eulas",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    eulaIds: {
                        shape: "S4a",
                        location: "querystring",
                        locationName: "eulaIds"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eulas: {
                        type: "list",
                        member: {
                            shape: "S40"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLaunchProfileMembers: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        type: "list",
                        member: {
                            shape: "S4m"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLaunchProfiles: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    principalId: {
                        location: "querystring",
                        locationName: "principalId"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfiles: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStreamingImages: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    owner: {
                        location: "querystring",
                        locationName: "owner"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    streamingImages: {
                        shape: "S46"
                    }
                }
            }
        },
        ListStreamingSessionBackups: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-session-backups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ownedBy: {
                        location: "querystring",
                        locationName: "ownedBy"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    streamingSessionBackups: {
                        type: "list",
                        member: {
                            shape: "S4u"
                        }
                    }
                }
            }
        },
        ListStreamingSessions: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    createdBy: {
                        location: "querystring",
                        locationName: "createdBy"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ownedBy: {
                        location: "querystring",
                        locationName: "ownedBy"
                    },
                    sessionIds: {
                        location: "querystring",
                        locationName: "sessionIds"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    sessions: {
                        type: "list",
                        member: {
                            shape: "S1y"
                        }
                    }
                }
            }
        },
        ListStudioComponents: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    types: {
                        location: "querystring",
                        locationName: "types",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    studioComponents: {
                        type: "list",
                        member: {
                            shape: "S3g"
                        }
                    }
                }
            }
        },
        ListStudioMembers: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        type: "list",
                        member: {
                            shape: "S53"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStudios: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studios" ],
                members: {
                    nextToken: {},
                    studios: {
                        type: "list",
                        member: {
                            shape: "S2i"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        PutLaunchProfileMembers: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityStoreId", "launchProfileId", "members", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    identityStoreId: {},
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    members: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "persona", "principalId" ],
                            members: {
                                persona: {},
                                principalId: {}
                            }
                        }
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutStudioMembers: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityStoreId", "members", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    identityStoreId: {},
                    members: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "persona", "principalId" ],
                            members: {
                                persona: {},
                                principalId: {}
                            }
                        }
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartStreamingSession: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    backupId: {},
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1y"
                    }
                }
            },
            idempotent: true
        },
        StartStudioSSOConfigurationRepair: {
            http: {
                method: "PUT",
                requestUri: "/2020-08-01/studios/{studioId}/sso-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S2i"
                    }
                }
            },
            idempotent: true
        },
        StopStreamingSession: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    volumeRetentionMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1y"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/2020-08-01/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        shape: "S4a",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateLaunchProfile: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        shape: "Sc"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    launchProfileProtocolVersions: {
                        shape: "Sf"
                    },
                    name: {
                        shape: "Sh"
                    },
                    streamConfiguration: {
                        shape: "Si"
                    },
                    studioComponentIds: {
                        shape: "S15"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "S18"
                    }
                }
            }
        },
        UpdateLaunchProfileMember: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "persona", "principalId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    persona: {},
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S4m"
                    }
                }
            }
        },
        UpdateStreamingImage: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "streamingImageId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        shape: "S1k"
                    },
                    name: {
                        shape: "S1m"
                    },
                    streamingImageId: {
                        location: "uri",
                        locationName: "streamingImageId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S1o"
                    }
                }
            }
        },
        UpdateStudio: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    adminRoleArn: {},
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    displayName: {
                        shape: "S2c"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    userRoleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S2i"
                    }
                }
            }
        },
        UpdateStudioComponent: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioComponentId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    configuration: {
                        shape: "S2n"
                    },
                    description: {
                        shape: "S30"
                    },
                    ec2SecurityGroupIds: {
                        shape: "S31"
                    },
                    initializationScripts: {
                        shape: "S33"
                    },
                    name: {
                        shape: "S38"
                    },
                    runtimeRoleArn: {},
                    scriptParameters: {
                        shape: "S39"
                    },
                    secureInitializationRoleArn: {},
                    studioComponentId: {
                        location: "uri",
                        locationName: "studioComponentId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    subtype: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S3g"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    acceptedAt: {
                        shape: "S8"
                    },
                    acceptedBy: {},
                    accepteeId: {},
                    eulaAcceptanceId: {},
                    eulaId: {}
                }
            }
        },
        S8: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "structure",
            required: [ "clipboardMode", "ec2InstanceTypes", "streamingImageIds" ],
            members: {
                automaticTerminationMode: {},
                clipboardMode: {},
                ec2InstanceTypes: {
                    shape: "Sl"
                },
                maxSessionLengthInMinutes: {
                    type: "integer"
                },
                maxStoppedSessionLengthInMinutes: {
                    type: "integer"
                },
                sessionBackup: {
                    shape: "Sp"
                },
                sessionPersistenceMode: {},
                sessionStorage: {
                    shape: "St"
                },
                streamingImageIds: {
                    shape: "Sz"
                },
                volumeConfiguration: {
                    shape: "S11"
                }
            }
        },
        Sl: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "structure",
            members: {
                maxBackupsToRetain: {
                    type: "integer"
                },
                mode: {}
            }
        },
        St: {
            type: "structure",
            required: [ "mode" ],
            members: {
                mode: {
                    type: "list",
                    member: {}
                },
                root: {
                    type: "structure",
                    members: {
                        linux: {
                            type: "string",
                            sensitive: true
                        },
                        windows: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S11: {
            type: "structure",
            members: {
                iops: {
                    type: "integer"
                },
                size: {
                    type: "integer"
                },
                throughput: {
                    type: "integer"
                }
            }
        },
        S15: {
            type: "list",
            member: {}
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S18: {
            type: "structure",
            members: {
                arn: {},
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                description: {
                    shape: "Sc"
                },
                ec2SubnetIds: {
                    shape: "Sd"
                },
                launchProfileId: {},
                launchProfileProtocolVersions: {
                    shape: "Sf"
                },
                name: {
                    shape: "Sh"
                },
                state: {},
                statusCode: {},
                statusMessage: {},
                streamConfiguration: {
                    type: "structure",
                    required: [ "clipboardMode", "ec2InstanceTypes", "streamingImageIds" ],
                    members: {
                        automaticTerminationMode: {},
                        clipboardMode: {},
                        ec2InstanceTypes: {
                            shape: "Sl"
                        },
                        maxSessionLengthInMinutes: {
                            type: "integer"
                        },
                        maxStoppedSessionLengthInMinutes: {
                            type: "integer"
                        },
                        sessionBackup: {
                            shape: "Sp"
                        },
                        sessionPersistenceMode: {},
                        sessionStorage: {
                            shape: "St"
                        },
                        streamingImageIds: {
                            shape: "Sz"
                        },
                        volumeConfiguration: {
                            shape: "S11"
                        }
                    }
                },
                studioComponentIds: {
                    shape: "S15"
                },
                tags: {
                    shape: "S16"
                },
                updatedAt: {
                    shape: "S8"
                },
                updatedBy: {},
                validationResults: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "state", "statusCode", "statusMessage", "type" ],
                        members: {
                            state: {},
                            statusCode: {},
                            statusMessage: {},
                            type: {}
                        }
                    }
                }
            }
        },
        S1k: {
            type: "string",
            sensitive: true
        },
        S1m: {
            type: "string",
            sensitive: true
        },
        S1o: {
            type: "structure",
            members: {
                arn: {},
                description: {
                    shape: "S1k"
                },
                ec2ImageId: {},
                encryptionConfiguration: {
                    type: "structure",
                    required: [ "keyType" ],
                    members: {
                        keyArn: {},
                        keyType: {}
                    }
                },
                eulaIds: {
                    shape: "S3"
                },
                name: {
                    shape: "S1m"
                },
                owner: {},
                platform: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                streamingImageId: {},
                tags: {
                    shape: "S16"
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                arn: {},
                automaticTerminationMode: {},
                backupMode: {},
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                ec2InstanceType: {},
                launchProfileId: {},
                maxBackupsToRetain: {
                    type: "integer"
                },
                ownedBy: {},
                sessionId: {},
                sessionPersistenceMode: {},
                startedAt: {
                    shape: "S8"
                },
                startedBy: {},
                startedFromBackupId: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                stopAt: {
                    shape: "S8"
                },
                stoppedAt: {
                    shape: "S8"
                },
                stoppedBy: {},
                streamingImageId: {},
                tags: {
                    shape: "S16"
                },
                terminateAt: {
                    shape: "S8"
                },
                updatedAt: {
                    shape: "S8"
                },
                updatedBy: {},
                volumeConfiguration: {
                    shape: "S11"
                },
                volumeRetentionMode: {}
            }
        },
        S26: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                expiresAt: {
                    shape: "S8"
                },
                ownedBy: {},
                state: {},
                statusCode: {},
                streamId: {},
                url: {
                    shape: "S29"
                }
            }
        },
        S29: {
            type: "string",
            sensitive: true
        },
        S2c: {
            type: "string",
            sensitive: true
        },
        S2d: {
            type: "structure",
            required: [ "keyType" ],
            members: {
                keyArn: {},
                keyType: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                adminRoleArn: {},
                arn: {},
                createdAt: {
                    shape: "S8"
                },
                displayName: {
                    shape: "S2c"
                },
                homeRegion: {},
                ssoClientId: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                studioEncryptionConfiguration: {
                    shape: "S2d"
                },
                studioId: {},
                studioName: {},
                studioUrl: {},
                tags: {
                    shape: "S16"
                },
                updatedAt: {
                    shape: "S8"
                },
                userRoleArn: {}
            }
        },
        S2n: {
            type: "structure",
            members: {
                activeDirectoryConfiguration: {
                    type: "structure",
                    members: {
                        computerAttributes: {
                            shape: "S2p"
                        },
                        directoryId: {},
                        organizationalUnitDistinguishedName: {}
                    }
                },
                computeFarmConfiguration: {
                    type: "structure",
                    members: {
                        activeDirectoryUser: {},
                        endpoint: {
                            shape: "S29"
                        }
                    }
                },
                licenseServiceConfiguration: {
                    type: "structure",
                    members: {
                        endpoint: {
                            shape: "S29"
                        }
                    }
                },
                sharedFileSystemConfiguration: {
                    type: "structure",
                    members: {
                        endpoint: {
                            shape: "S29"
                        },
                        fileSystemId: {},
                        linuxMountPoint: {
                            type: "string",
                            sensitive: true
                        },
                        shareName: {
                            shape: "S29"
                        },
                        windowsMountDrive: {}
                    }
                }
            },
            union: true
        },
        S2p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {}
                }
            },
            sensitive: true
        },
        S30: {
            type: "string",
            sensitive: true
        },
        S31: {
            type: "list",
            member: {}
        },
        S33: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    launchProfileProtocolVersion: {},
                    platform: {},
                    runContext: {},
                    script: {
                        shape: "S37"
                    }
                }
            }
        },
        S37: {
            type: "string",
            sensitive: true
        },
        S38: {
            type: "string",
            sensitive: true
        },
        S39: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            },
            sensitive: true
        },
        S3g: {
            type: "structure",
            members: {
                arn: {},
                configuration: {
                    shape: "S2n"
                },
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                description: {
                    shape: "S30"
                },
                ec2SecurityGroupIds: {
                    shape: "S31"
                },
                initializationScripts: {
                    shape: "S33"
                },
                name: {
                    shape: "S38"
                },
                runtimeRoleArn: {},
                scriptParameters: {
                    shape: "S39"
                },
                secureInitializationRoleArn: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                studioComponentId: {},
                subtype: {},
                tags: {
                    shape: "S16"
                },
                type: {},
                updatedAt: {
                    shape: "S8"
                },
                updatedBy: {}
            }
        },
        S40: {
            type: "structure",
            members: {
                content: {},
                createdAt: {
                    shape: "S8"
                },
                eulaId: {},
                name: {},
                updatedAt: {
                    shape: "S8"
                }
            }
        },
        S46: {
            type: "list",
            member: {
                shape: "S1o"
            }
        },
        S4a: {
            type: "list",
            member: {}
        },
        S4i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    runtimeRoleArn: {},
                    script: {
                        shape: "S37"
                    },
                    secureInitializationRoleArn: {},
                    studioComponentId: {},
                    studioComponentName: {
                        shape: "S38"
                    }
                }
            }
        },
        S4m: {
            type: "structure",
            members: {
                identityStoreId: {},
                persona: {},
                principalId: {},
                sid: {}
            }
        },
        S4u: {
            type: "structure",
            members: {
                arn: {},
                backupId: {},
                createdAt: {
                    shape: "S8"
                },
                launchProfileId: {},
                ownedBy: {},
                sessionId: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                tags: {
                    shape: "S16"
                }
            }
        },
        S53: {
            type: "structure",
            members: {
                identityStoreId: {},
                persona: {},
                principalId: {},
                sid: {}
            }
        }
    },
    paginators: {
        ListEulaAcceptances: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "eulaAcceptances"
        },
        ListEulas: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "eulas"
        },
        ListLaunchProfileMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListLaunchProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "launchProfiles"
        },
        ListStreamingImages: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "streamingImages"
        },
        ListStreamingSessionBackups: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "streamingSessionBackups"
        },
        ListStreamingSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "sessions"
        },
        ListStudioComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "studioComponents"
        },
        ListStudioMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListStudios: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "studios"
        }
    },
    waiters: {
        LaunchProfileDeleted: {
            description: "Wait until a LaunchProfile is Deleted. Use this after invoking DeleteLaunchProfile",
            delay: 5,
            maxAttempts: 150,
            operation: "GetLaunchProfile",
            acceptors: [ {
                matcher: "path",
                argument: "launchProfile.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "launchProfile.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        LaunchProfileReady: {
            description: "Wait until a LaunchProfile is Ready. Use this after invoking CreateLaunchProfile or UpdateLaunchProfile",
            delay: 5,
            maxAttempts: 150,
            operation: "GetLaunchProfile",
            acceptors: [ {
                matcher: "path",
                argument: "launchProfile.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "launchProfile.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "launchProfile.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        },
        StreamingImageDeleted: {
            description: "Wait until a StreamingImage Deleted. Use this after invoking DeleteStreamingImage",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStreamingImage",
            acceptors: [ {
                matcher: "path",
                argument: "streamingImage.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "streamingImage.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StreamingImageReady: {
            description: "Wait until a StreamingImage is Ready. Use this after invoking CreateStreamingImage or UpdateStreamingImage",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStreamingImage",
            acceptors: [ {
                matcher: "path",
                argument: "streamingImage.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "streamingImage.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "streamingImage.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        },
        StreamingSessionDeleted: {
            description: "Wait until a StreamingSessionDeleted. Use this after invoking DeleteStreamingSession",
            delay: 5,
            maxAttempts: 180,
            operation: "GetStreamingSession",
            acceptors: [ {
                matcher: "path",
                argument: "session.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StreamingSessionReady: {
            description: "Wait until a StreamingSession is ready. Use this after invoking CreateStreamingSession, StartStreamingSession",
            delay: 10,
            maxAttempts: 180,
            operation: "GetStreamingSession",
            acceptors: [ {
                matcher: "path",
                argument: "session.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "START_FAILED"
            } ]
        },
        StreamingSessionStopped: {
            description: "Wait until a StreamingSessionStopped. Use this after invoking StopStreamingSession",
            delay: 5,
            maxAttempts: 180,
            operation: "GetStreamingSession",
            acceptors: [ {
                matcher: "path",
                argument: "session.state",
                state: "success",
                expected: "STOPPED"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "STOP_FAILED"
            } ]
        },
        StreamingSessionStreamReady: {
            description: "Wait until a StreamingSessionStream is ready. Use this after invoking CreateStreamingSessionStream",
            delay: 5,
            maxAttempts: 30,
            operation: "GetStreamingSessionStream",
            acceptors: [ {
                matcher: "path",
                argument: "stream.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "stream.state",
                state: "failure",
                expected: "CREATE_FAILED"
            } ]
        },
        StudioComponentDeleted: {
            description: "Wait until a StudioComponent Deleted. Use this after invoking DeleteStudioComponent",
            delay: 1,
            maxAttempts: 120,
            operation: "GetStudioComponent",
            acceptors: [ {
                matcher: "path",
                argument: "studioComponent.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "studioComponent.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StudioComponentReady: {
            description: "Wait until a StudioComponent is Ready. Use this after invoking CreateStudioComponent or UpdateStudioComponent",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStudioComponent",
            acceptors: [ {
                matcher: "path",
                argument: "studioComponent.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "studioComponent.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "studioComponent.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        },
        StudioDeleted: {
            description: "Wait until a Studio is Deleted. Use this after invoking DeleteStudio.",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStudio",
            acceptors: [ {
                matcher: "path",
                argument: "studio.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "studio.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StudioReady: {
            description: "Wait until a Studio is Ready. Use this after invoking CreateStudio, UpdateStudio, or StartStudioSSOConfigurationRepair",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStudio",
            acceptors: [ {
                matcher: "path",
                argument: "studio.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "studio.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "studio.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["finspace"] = {};

AWS.Finspace = AWS.Service.defineService("finspace", [ "2021-03-12" ]);

AWS.apiLoader.services["finspace"]["2021-03-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-03-12",
        endpointPrefix: "finspace",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "finspace",
        serviceFullName: "FinSpace User Environment Management service",
        serviceId: "finspace",
        signatureVersion: "v4",
        signingName: "finspace",
        uid: "finspace-2021-03-12"
    },
    operations: {
        CreateEnvironment: {
            http: {
                requestUri: "/environment"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "S5"
                    },
                    federationMode: {},
                    federationParameters: {
                        shape: "S9"
                    },
                    superuserParameters: {
                        type: "structure",
                        required: [ "emailAddress", "firstName", "lastName" ],
                        members: {
                            emailAddress: {
                                type: "string",
                                sensitive: true
                            },
                            firstName: {},
                            lastName: {}
                        }
                    },
                    dataBundles: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    environmentArn: {},
                    environmentUrl: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        CreateKxChangeset: {
            http: {
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/changesets"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "changeRequests", "clientToken" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    changeRequests: {
                        shape: "Ss"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changesetId: {},
                    databaseName: {},
                    environmentId: {},
                    changeRequests: {
                        shape: "Ss"
                    },
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    status: {},
                    errorInfo: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateKxCluster: {
            http: {
                requestUri: "/kx/environments/{environmentId}/clusters"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "clusterName", "clusterType", "releaseLabel", "vpcConfiguration", "azMode" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterName: {},
                    clusterType: {},
                    tickerplantLogConfiguration: {
                        shape: "S1a"
                    },
                    databases: {
                        shape: "S1d"
                    },
                    cacheStorageConfigurations: {
                        shape: "S1q"
                    },
                    autoScalingConfiguration: {
                        shape: "S1t"
                    },
                    clusterDescription: {},
                    capacityConfiguration: {
                        shape: "S1z"
                    },
                    releaseLabel: {},
                    vpcConfiguration: {
                        shape: "S22"
                    },
                    initializationScript: {},
                    commandLineArguments: {
                        shape: "S2a"
                    },
                    code: {
                        shape: "S2e"
                    },
                    executionRole: {},
                    savedownStorageConfiguration: {
                        shape: "S2j"
                    },
                    azMode: {},
                    availabilityZoneId: {},
                    tags: {
                        shape: "S5"
                    },
                    scalingGroupConfiguration: {
                        shape: "S2o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    status: {},
                    statusReason: {},
                    clusterName: {},
                    clusterType: {},
                    tickerplantLogConfiguration: {
                        shape: "S1a"
                    },
                    volumes: {
                        shape: "S2w"
                    },
                    databases: {
                        shape: "S1d"
                    },
                    cacheStorageConfigurations: {
                        shape: "S1q"
                    },
                    autoScalingConfiguration: {
                        shape: "S1t"
                    },
                    clusterDescription: {},
                    capacityConfiguration: {
                        shape: "S1z"
                    },
                    releaseLabel: {},
                    vpcConfiguration: {
                        shape: "S22"
                    },
                    initializationScript: {},
                    commandLineArguments: {
                        shape: "S2a"
                    },
                    code: {
                        shape: "S2e"
                    },
                    executionRole: {},
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    savedownStorageConfiguration: {
                        shape: "S2j"
                    },
                    azMode: {},
                    availabilityZoneId: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    scalingGroupConfiguration: {
                        shape: "S2o"
                    }
                }
            }
        },
        CreateKxDatabase: {
            http: {
                requestUri: "/kx/environments/{environmentId}/databases"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "clientToken" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    databaseName: {},
                    databaseArn: {},
                    environmentId: {},
                    description: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateKxDataview: {
            http: {
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/dataviews"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "dataviewName", "azMode", "clientToken" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    dataviewName: {},
                    azMode: {},
                    availabilityZoneId: {},
                    changesetId: {},
                    segmentConfigurations: {
                        shape: "S1m"
                    },
                    autoUpdate: {
                        type: "boolean"
                    },
                    description: {},
                    tags: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataviewName: {},
                    databaseName: {},
                    environmentId: {},
                    azMode: {},
                    availabilityZoneId: {},
                    changesetId: {},
                    segmentConfigurations: {
                        shape: "S1m"
                    },
                    description: {},
                    autoUpdate: {
                        type: "boolean"
                    },
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        CreateKxEnvironment: {
            http: {
                requestUri: "/kx/environments"
            },
            input: {
                type: "structure",
                required: [ "name", "kmsKeyId" ],
                members: {
                    name: {},
                    description: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    status: {},
                    environmentId: {},
                    description: {},
                    environmentArn: {},
                    kmsKeyId: {},
                    creationTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateKxScalingGroup: {
            http: {
                requestUri: "/kx/environments/{environmentId}/scalingGroups"
            },
            input: {
                type: "structure",
                required: [ "clientToken", "environmentId", "scalingGroupName", "hostType", "availabilityZoneId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    scalingGroupName: {},
                    hostType: {},
                    availabilityZoneId: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    scalingGroupName: {},
                    hostType: {},
                    availabilityZoneId: {},
                    status: {},
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    createdTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateKxUser: {
            http: {
                requestUri: "/kx/environments/{environmentId}/users"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "userName", "iamRole" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    userName: {},
                    iamRole: {},
                    tags: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userName: {},
                    userArn: {},
                    environmentId: {},
                    iamRole: {}
                }
            }
        },
        CreateKxVolume: {
            http: {
                requestUri: "/kx/environments/{environmentId}/kxvolumes"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "volumeType", "volumeName", "azMode", "availabilityZoneIds" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    volumeType: {},
                    volumeName: {},
                    description: {},
                    nas1Configuration: {
                        shape: "S3m"
                    },
                    azMode: {},
                    availabilityZoneIds: {
                        shape: "S3p"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    volumeName: {},
                    volumeType: {},
                    volumeArn: {},
                    nas1Configuration: {
                        shape: "S3m"
                    },
                    status: {},
                    statusReason: {},
                    azMode: {},
                    description: {},
                    availabilityZoneIds: {
                        shape: "S3p"
                    },
                    createdTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environment/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        DeleteKxCluster: {
            http: {
                method: "DELETE",
                requestUri: "/kx/environments/{environmentId}/clusters/{clusterName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "clusterName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterName: {
                        location: "uri",
                        locationName: "clusterName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteKxDatabase: {
            http: {
                method: "DELETE",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "clientToken" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteKxDataview: {
            http: {
                method: "DELETE",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/dataviews/{dataviewName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "dataviewName", "clientToken" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    dataviewName: {
                        location: "uri",
                        locationName: "dataviewName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteKxEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/kx/environments/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteKxScalingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/kx/environments/{environmentId}/scalingGroups/{scalingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "scalingGroupName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    scalingGroupName: {
                        location: "uri",
                        locationName: "scalingGroupName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteKxUser: {
            http: {
                method: "DELETE",
                requestUri: "/kx/environments/{environmentId}/users/{userName}"
            },
            input: {
                type: "structure",
                required: [ "userName", "environmentId" ],
                members: {
                    userName: {
                        location: "uri",
                        locationName: "userName"
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteKxVolume: {
            http: {
                method: "DELETE",
                requestUri: "/kx/environments/{environmentId}/kxvolumes/{volumeName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "volumeName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    volumeName: {
                        location: "uri",
                        locationName: "volumeName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environment/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "S4c"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetKxChangeset: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/changesets/{changesetId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "changesetId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    changesetId: {
                        location: "uri",
                        locationName: "changesetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changesetId: {},
                    databaseName: {},
                    environmentId: {},
                    changeRequests: {
                        shape: "Ss"
                    },
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    activeFromTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    status: {},
                    errorInfo: {
                        shape: "S12"
                    }
                }
            }
        },
        GetKxCluster: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/clusters/{clusterName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "clusterName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterName: {
                        location: "uri",
                        locationName: "clusterName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    statusReason: {},
                    clusterName: {},
                    clusterType: {},
                    tickerplantLogConfiguration: {
                        shape: "S1a"
                    },
                    volumes: {
                        shape: "S2w"
                    },
                    databases: {
                        shape: "S1d"
                    },
                    cacheStorageConfigurations: {
                        shape: "S1q"
                    },
                    autoScalingConfiguration: {
                        shape: "S1t"
                    },
                    clusterDescription: {},
                    capacityConfiguration: {
                        shape: "S1z"
                    },
                    releaseLabel: {},
                    vpcConfiguration: {
                        shape: "S22"
                    },
                    initializationScript: {},
                    commandLineArguments: {
                        shape: "S2a"
                    },
                    code: {
                        shape: "S2e"
                    },
                    executionRole: {},
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    savedownStorageConfiguration: {
                        shape: "S2j"
                    },
                    azMode: {},
                    availabilityZoneId: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    scalingGroupConfiguration: {
                        shape: "S2o"
                    }
                }
            }
        },
        GetKxConnectionString: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/connectionString"
            },
            input: {
                type: "structure",
                required: [ "userArn", "environmentId", "clusterName" ],
                members: {
                    userArn: {
                        location: "querystring",
                        locationName: "userArn"
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterName: {
                        location: "querystring",
                        locationName: "clusterName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    signedConnectionString: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetKxDatabase: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    databaseName: {},
                    databaseArn: {},
                    environmentId: {},
                    description: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    lastCompletedChangesetId: {},
                    numBytes: {
                        type: "long"
                    },
                    numChangesets: {
                        type: "integer"
                    },
                    numFiles: {
                        type: "integer"
                    }
                }
            }
        },
        GetKxDataview: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/dataviews/{dataviewName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "dataviewName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    dataviewName: {
                        location: "uri",
                        locationName: "dataviewName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    databaseName: {},
                    dataviewName: {},
                    azMode: {},
                    availabilityZoneId: {},
                    changesetId: {},
                    segmentConfigurations: {
                        shape: "S1m"
                    },
                    activeVersions: {
                        shape: "S4s"
                    },
                    description: {},
                    autoUpdate: {
                        type: "boolean"
                    },
                    environmentId: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    status: {},
                    statusReason: {}
                }
            }
        },
        GetKxEnvironment: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    environmentId: {},
                    awsAccountId: {},
                    status: {},
                    tgwStatus: {},
                    dnsStatus: {},
                    errorMessage: {},
                    description: {},
                    environmentArn: {},
                    kmsKeyId: {},
                    dedicatedServiceAccountId: {},
                    transitGatewayConfiguration: {
                        shape: "S51"
                    },
                    customDNSConfiguration: {
                        shape: "S5e"
                    },
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    updateTimestamp: {
                        type: "timestamp"
                    },
                    availabilityZoneIds: {
                        shape: "S3p"
                    },
                    certificateAuthorityArn: {}
                }
            }
        },
        GetKxScalingGroup: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/scalingGroups/{scalingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "scalingGroupName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    scalingGroupName: {
                        location: "uri",
                        locationName: "scalingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scalingGroupName: {},
                    scalingGroupArn: {},
                    hostType: {},
                    clusters: {
                        shape: "S5m"
                    },
                    availabilityZoneId: {},
                    status: {},
                    statusReason: {},
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    createdTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetKxUser: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/users/{userName}"
            },
            input: {
                type: "structure",
                required: [ "userName", "environmentId" ],
                members: {
                    userName: {
                        location: "uri",
                        locationName: "userName"
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userName: {},
                    userArn: {},
                    environmentId: {},
                    iamRole: {}
                }
            }
        },
        GetKxVolume: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/kxvolumes/{volumeName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "volumeName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    volumeName: {
                        location: "uri",
                        locationName: "volumeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    volumeName: {},
                    volumeType: {},
                    volumeArn: {},
                    nas1Configuration: {
                        shape: "S3m"
                    },
                    status: {},
                    statusReason: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    description: {},
                    azMode: {},
                    availabilityZoneIds: {
                        shape: "S3p"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    attachedClusters: {
                        shape: "S5r"
                    }
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environment"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environments: {
                        type: "list",
                        member: {
                            shape: "S4c"
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListKxChangesets: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/changesets"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    kxChangesets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                changesetId: {},
                                createdTimestamp: {
                                    type: "timestamp"
                                },
                                activeFromTimestamp: {
                                    type: "timestamp"
                                },
                                lastModifiedTimestamp: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxClusterNodes: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/clusters/{clusterName}/nodes"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterName: {
                        location: "uri",
                        locationName: "clusterName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                nodeId: {},
                                availabilityZoneId: {},
                                launchTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxClusters: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/clusters"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterType: {
                        location: "querystring",
                        locationName: "clusterType"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    kxClusterSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                status: {},
                                statusReason: {},
                                clusterName: {},
                                clusterType: {},
                                clusterDescription: {},
                                releaseLabel: {},
                                volumes: {
                                    shape: "S2w"
                                },
                                initializationScript: {},
                                executionRole: {},
                                azMode: {},
                                availabilityZoneId: {},
                                lastModifiedTimestamp: {
                                    type: "timestamp"
                                },
                                createdTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxDatabases: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/databases"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    kxDatabases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                databaseName: {},
                                createdTimestamp: {
                                    type: "timestamp"
                                },
                                lastModifiedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxDataviews: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/dataviews"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    kxDataviews: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                environmentId: {},
                                databaseName: {},
                                dataviewName: {},
                                azMode: {},
                                availabilityZoneId: {},
                                changesetId: {},
                                segmentConfigurations: {
                                    shape: "S1m"
                                },
                                activeVersions: {
                                    shape: "S4s"
                                },
                                status: {},
                                description: {},
                                autoUpdate: {
                                    type: "boolean"
                                },
                                createdTimestamp: {
                                    type: "timestamp"
                                },
                                lastModifiedTimestamp: {
                                    type: "timestamp"
                                },
                                statusReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxEnvironments: {
            http: {
                method: "GET",
                requestUri: "/kx/environments"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                environmentId: {},
                                awsAccountId: {},
                                status: {},
                                tgwStatus: {},
                                dnsStatus: {},
                                errorMessage: {},
                                description: {},
                                environmentArn: {},
                                kmsKeyId: {},
                                dedicatedServiceAccountId: {},
                                transitGatewayConfiguration: {
                                    shape: "S51"
                                },
                                customDNSConfiguration: {
                                    shape: "S5e"
                                },
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                updateTimestamp: {
                                    type: "timestamp"
                                },
                                availabilityZoneIds: {
                                    shape: "S3p"
                                },
                                certificateAuthorityArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxScalingGroups: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/scalingGroups"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scalingGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                scalingGroupName: {},
                                hostType: {},
                                clusters: {
                                    shape: "S5m"
                                },
                                availabilityZoneId: {},
                                status: {},
                                statusReason: {},
                                lastModifiedTimestamp: {
                                    type: "timestamp"
                                },
                                createdTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxUsers: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/users"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                userArn: {},
                                userName: {},
                                iamRole: {},
                                createTimestamp: {
                                    type: "timestamp"
                                },
                                updateTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKxVolumes: {
            http: {
                method: "GET",
                requestUri: "/kx/environments/{environmentId}/kxvolumes"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    volumeType: {
                        location: "querystring",
                        locationName: "volumeType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    kxVolumeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                volumeName: {},
                                volumeType: {},
                                status: {},
                                description: {},
                                statusReason: {},
                                azMode: {},
                                availabilityZoneIds: {
                                    shape: "S3p"
                                },
                                createdTimestamp: {
                                    type: "timestamp"
                                },
                                lastModifiedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/environment/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    name: {},
                    description: {},
                    federationMode: {},
                    federationParameters: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "S4c"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        UpdateKxClusterCodeConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/kx/environments/{environmentId}/clusters/{clusterName}/configuration/code"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "clusterName", "code" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterName: {
                        location: "uri",
                        locationName: "clusterName"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    code: {
                        shape: "S2e"
                    },
                    initializationScript: {},
                    commandLineArguments: {
                        shape: "S2a"
                    },
                    deploymentConfiguration: {
                        type: "structure",
                        required: [ "deploymentStrategy" ],
                        members: {
                            deploymentStrategy: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateKxClusterDatabases: {
            http: {
                method: "PUT",
                requestUri: "/kx/environments/{environmentId}/clusters/{clusterName}/configuration/databases"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "clusterName", "databases" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    clusterName: {
                        location: "uri",
                        locationName: "clusterName"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    databases: {
                        shape: "S1d"
                    },
                    deploymentConfiguration: {
                        type: "structure",
                        required: [ "deploymentStrategy" ],
                        members: {
                            deploymentStrategy: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateKxDatabase: {
            http: {
                method: "PUT",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "clientToken" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    description: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    databaseName: {},
                    environmentId: {},
                    description: {},
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateKxDataview: {
            http: {
                method: "PUT",
                requestUri: "/kx/environments/{environmentId}/databases/{databaseName}/dataviews/{dataviewName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "databaseName", "dataviewName", "clientToken" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    databaseName: {
                        location: "uri",
                        locationName: "databaseName"
                    },
                    dataviewName: {
                        location: "uri",
                        locationName: "dataviewName"
                    },
                    description: {},
                    changesetId: {},
                    segmentConfigurations: {
                        shape: "S1m"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    databaseName: {},
                    dataviewName: {},
                    azMode: {},
                    availabilityZoneId: {},
                    changesetId: {},
                    segmentConfigurations: {
                        shape: "S1m"
                    },
                    activeVersions: {
                        shape: "S4s"
                    },
                    status: {},
                    autoUpdate: {
                        type: "boolean"
                    },
                    description: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateKxEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/kx/environments/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    name: {},
                    description: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    environmentId: {},
                    awsAccountId: {},
                    status: {},
                    tgwStatus: {},
                    dnsStatus: {},
                    errorMessage: {},
                    description: {},
                    environmentArn: {},
                    kmsKeyId: {},
                    dedicatedServiceAccountId: {},
                    transitGatewayConfiguration: {
                        shape: "S51"
                    },
                    customDNSConfiguration: {
                        shape: "S5e"
                    },
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    updateTimestamp: {
                        type: "timestamp"
                    },
                    availabilityZoneIds: {
                        shape: "S3p"
                    }
                }
            }
        },
        UpdateKxEnvironmentNetwork: {
            http: {
                method: "PUT",
                requestUri: "/kx/environments/{environmentId}/network"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    transitGatewayConfiguration: {
                        shape: "S51"
                    },
                    customDNSConfiguration: {
                        shape: "S5e"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    environmentId: {},
                    awsAccountId: {},
                    status: {},
                    tgwStatus: {},
                    dnsStatus: {},
                    errorMessage: {},
                    description: {},
                    environmentArn: {},
                    kmsKeyId: {},
                    dedicatedServiceAccountId: {},
                    transitGatewayConfiguration: {
                        shape: "S51"
                    },
                    customDNSConfiguration: {
                        shape: "S5e"
                    },
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    updateTimestamp: {
                        type: "timestamp"
                    },
                    availabilityZoneIds: {
                        shape: "S3p"
                    }
                }
            }
        },
        UpdateKxUser: {
            http: {
                method: "PUT",
                requestUri: "/kx/environments/{environmentId}/users/{userName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "userName", "iamRole" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    userName: {
                        location: "uri",
                        locationName: "userName"
                    },
                    iamRole: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userName: {},
                    userArn: {},
                    environmentId: {},
                    iamRole: {}
                }
            }
        },
        UpdateKxVolume: {
            http: {
                method: "PATCH",
                requestUri: "/kx/environments/{environmentId}/kxvolumes/{volumeName}"
            },
            input: {
                type: "structure",
                required: [ "environmentId", "volumeName" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    volumeName: {
                        location: "uri",
                        locationName: "volumeName"
                    },
                    description: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    nas1Configuration: {
                        shape: "S3m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    volumeName: {},
                    volumeType: {},
                    volumeArn: {},
                    nas1Configuration: {
                        shape: "S3m"
                    },
                    status: {},
                    description: {},
                    statusReason: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    azMode: {},
                    availabilityZoneIds: {
                        shape: "S3p"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    attachedClusters: {
                        shape: "S5r"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        S9: {
            type: "structure",
            members: {
                samlMetadataDocument: {},
                samlMetadataURL: {},
                applicationCallBackURL: {},
                federationURN: {},
                federationProviderName: {},
                attributeMap: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "changeType", "dbPath" ],
                members: {
                    changeType: {},
                    s3Path: {},
                    dbPath: {}
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                errorMessage: {},
                errorType: {}
            }
        },
        S1a: {
            type: "structure",
            members: {
                tickerplantLogVolumes: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "databaseName" ],
                members: {
                    databaseName: {},
                    cacheConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "cacheType", "dbPaths" ],
                            members: {
                                cacheType: {},
                                dbPaths: {
                                    type: "list",
                                    member: {}
                                },
                                dataviewName: {}
                            }
                        }
                    },
                    changesetId: {},
                    dataviewName: {},
                    dataviewConfiguration: {
                        type: "structure",
                        members: {
                            dataviewName: {},
                            dataviewVersionId: {},
                            changesetId: {},
                            segmentConfigurations: {
                                shape: "S1m"
                            }
                        }
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "dbPaths", "volumeName" ],
                members: {
                    dbPaths: {
                        type: "list",
                        member: {}
                    },
                    volumeName: {}
                }
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "type", "size" ],
                members: {
                    type: {},
                    size: {
                        type: "integer"
                    }
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                minNodeCount: {
                    type: "integer"
                },
                maxNodeCount: {
                    type: "integer"
                },
                autoScalingMetric: {},
                metricTarget: {
                    type: "double"
                },
                scaleInCooldownSeconds: {
                    type: "double"
                },
                scaleOutCooldownSeconds: {
                    type: "double"
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                nodeType: {},
                nodeCount: {
                    type: "integer"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                vpcId: {},
                securityGroupIds: {
                    type: "list",
                    member: {}
                },
                subnetIds: {
                    type: "list",
                    member: {}
                },
                ipAddressType: {}
            }
        },
        S2a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                s3Bucket: {},
                s3Key: {},
                s3ObjectVersion: {}
            }
        },
        S2j: {
            type: "structure",
            members: {
                type: {},
                size: {
                    type: "integer"
                },
                volumeName: {}
            }
        },
        S2o: {
            type: "structure",
            required: [ "scalingGroupName", "memoryReservation", "nodeCount" ],
            members: {
                scalingGroupName: {},
                memoryLimit: {
                    type: "integer"
                },
                memoryReservation: {
                    type: "integer"
                },
                nodeCount: {
                    type: "integer"
                },
                cpu: {
                    type: "double"
                }
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    volumeName: {},
                    volumeType: {}
                }
            }
        },
        S3m: {
            type: "structure",
            members: {
                type: {},
                size: {
                    type: "integer"
                }
            }
        },
        S3p: {
            type: "list",
            member: {}
        },
        S4c: {
            type: "structure",
            members: {
                name: {},
                environmentId: {},
                awsAccountId: {},
                status: {},
                environmentUrl: {},
                description: {},
                environmentArn: {},
                sageMakerStudioDomainUrl: {},
                kmsKeyId: {},
                dedicatedServiceAccountId: {},
                federationMode: {},
                federationParameters: {
                    shape: "S9"
                }
            }
        },
        S4s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    changesetId: {},
                    segmentConfigurations: {
                        shape: "S1m"
                    },
                    attachedClusters: {
                        type: "list",
                        member: {}
                    },
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    versionId: {}
                }
            }
        },
        S51: {
            type: "structure",
            required: [ "transitGatewayID", "routableCIDRSpace" ],
            members: {
                transitGatewayID: {},
                routableCIDRSpace: {},
                attachmentNetworkAclConfiguration: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ruleNumber", "protocol", "ruleAction", "cidrBlock" ],
                        members: {
                            ruleNumber: {
                                type: "integer"
                            },
                            protocol: {},
                            ruleAction: {},
                            portRange: {
                                type: "structure",
                                required: [ "from", "to" ],
                                members: {
                                    from: {
                                        type: "integer"
                                    },
                                    to: {
                                        type: "integer"
                                    }
                                }
                            },
                            icmpTypeCode: {
                                type: "structure",
                                required: [ "type", "code" ],
                                members: {
                                    type: {
                                        type: "integer"
                                    },
                                    code: {
                                        type: "integer"
                                    }
                                }
                            },
                            cidrBlock: {}
                        }
                    }
                }
            }
        },
        S5e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "customDNSServerName", "customDNSServerIP" ],
                members: {
                    customDNSServerName: {},
                    customDNSServerIP: {}
                }
            }
        },
        S5m: {
            type: "list",
            member: {}
        },
        S5r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    clusterName: {},
                    clusterType: {},
                    clusterStatus: {}
                }
            }
        }
    },
    paginators: {
        ListKxChangesets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListKxClusterNodes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListKxDatabases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListKxDataviews: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListKxEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environments"
        },
        ListKxScalingGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["finspacedata"] = {};

AWS.Finspacedata = AWS.Service.defineService("finspacedata", [ "2020-07-13" ]);

AWS.apiLoader.services["finspacedata"]["2020-07-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-13",
        endpointPrefix: "finspace-api",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "FinSpace Data",
        serviceFullName: "FinSpace Public API",
        serviceId: "finspace data",
        signatureVersion: "v4",
        signingName: "finspace-api",
        uid: "finspace-2020-07-13"
    },
    operations: {
        AssociateUserToPermissionGroup: {
            http: {
                requestUri: "/permission-group/{permissionGroupId}/users/{userId}"
            },
            input: {
                type: "structure",
                required: [ "permissionGroupId", "userId" ],
                members: {
                    permissionGroupId: {
                        location: "uri",
                        locationName: "permissionGroupId"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    statusCode: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        CreateChangeset: {
            http: {
                requestUri: "/datasets/{datasetId}/changesetsv2"
            },
            input: {
                type: "structure",
                required: [ "datasetId", "changeType", "sourceParams", "formatParams" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    changeType: {},
                    sourceParams: {
                        shape: "Sa"
                    },
                    formatParams: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetId: {},
                    changesetId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        CreateDataView: {
            http: {
                requestUri: "/datasets/{datasetId}/dataviewsv2"
            },
            input: {
                type: "structure",
                required: [ "datasetId", "destinationTypeParams" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    autoUpdate: {
                        type: "boolean"
                    },
                    sortColumns: {
                        shape: "Si"
                    },
                    partitionColumns: {
                        shape: "Sk"
                    },
                    asOfTimestamp: {
                        type: "long"
                    },
                    destinationTypeParams: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetId: {},
                    dataViewId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        CreateDataset: {
            http: {
                requestUri: "/datasetsv2"
            },
            input: {
                type: "structure",
                required: [ "datasetTitle", "kind", "permissionGroupParams" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    datasetTitle: {},
                    kind: {},
                    datasetDescription: {},
                    ownerInfo: {
                        shape: "Sw"
                    },
                    permissionGroupParams: {
                        type: "structure",
                        members: {
                            permissionGroupId: {},
                            datasetPermissions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        permission: {}
                                    }
                                }
                            }
                        }
                    },
                    alias: {},
                    schemaDefinition: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        CreatePermissionGroup: {
            http: {
                requestUri: "/permission-group"
            },
            input: {
                type: "structure",
                required: [ "name", "applicationPermissions" ],
                members: {
                    name: {
                        shape: "S1f"
                    },
                    description: {
                        shape: "S1g"
                    },
                    applicationPermissions: {
                        shape: "S1h"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissionGroupId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        CreateUser: {
            http: {
                requestUri: "/user"
            },
            input: {
                type: "structure",
                required: [ "emailAddress", "type" ],
                members: {
                    emailAddress: {
                        shape: "Sz"
                    },
                    type: {},
                    firstName: {
                        shape: "S1m"
                    },
                    lastName: {
                        shape: "S1n"
                    },
                    apiAccess: {},
                    apiAccessPrincipalArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/datasetsv2/{datasetId}"
            },
            input: {
                type: "structure",
                required: [ "datasetId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        DeletePermissionGroup: {
            http: {
                method: "DELETE",
                requestUri: "/permission-group/{permissionGroupId}"
            },
            input: {
                type: "structure",
                required: [ "permissionGroupId" ],
                members: {
                    permissionGroupId: {
                        location: "uri",
                        locationName: "permissionGroupId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissionGroupId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        DisableUser: {
            http: {
                requestUri: "/user/{userId}/disable"
            },
            input: {
                type: "structure",
                required: [ "userId" ],
                members: {
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        DisassociateUserFromPermissionGroup: {
            http: {
                method: "DELETE",
                requestUri: "/permission-group/{permissionGroupId}/users/{userId}"
            },
            input: {
                type: "structure",
                required: [ "permissionGroupId", "userId" ],
                members: {
                    permissionGroupId: {
                        location: "uri",
                        locationName: "permissionGroupId"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    statusCode: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        EnableUser: {
            http: {
                requestUri: "/user/{userId}/enable"
            },
            input: {
                type: "structure",
                required: [ "userId" ],
                members: {
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetChangeset: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetId}/changesetsv2/{changesetId}"
            },
            input: {
                type: "structure",
                required: [ "datasetId", "changesetId" ],
                members: {
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    changesetId: {
                        location: "uri",
                        locationName: "changesetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changesetId: {},
                    changesetArn: {},
                    datasetId: {},
                    changeType: {},
                    sourceParams: {
                        shape: "Sa"
                    },
                    formatParams: {
                        shape: "Sd"
                    },
                    createTime: {
                        type: "long"
                    },
                    status: {},
                    errorInfo: {
                        shape: "S25"
                    },
                    activeUntilTimestamp: {
                        type: "long"
                    },
                    activeFromTimestamp: {
                        type: "long"
                    },
                    updatesChangesetId: {},
                    updatedByChangesetId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetDataView: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetId}/dataviewsv2/{dataviewId}"
            },
            input: {
                type: "structure",
                required: [ "dataViewId", "datasetId" ],
                members: {
                    dataViewId: {
                        location: "uri",
                        locationName: "dataviewId"
                    },
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    autoUpdate: {
                        type: "boolean"
                    },
                    partitionColumns: {
                        shape: "Sk"
                    },
                    datasetId: {},
                    asOfTimestamp: {
                        type: "long"
                    },
                    errorInfo: {
                        shape: "S2a"
                    },
                    lastModifiedTime: {
                        type: "long"
                    },
                    createTime: {
                        type: "long"
                    },
                    sortColumns: {
                        shape: "Si"
                    },
                    dataViewId: {},
                    dataViewArn: {},
                    destinationTypeParams: {
                        shape: "Sm"
                    },
                    status: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetDataset: {
            http: {
                method: "GET",
                requestUri: "/datasetsv2/{datasetId}"
            },
            input: {
                type: "structure",
                required: [ "datasetId" ],
                members: {
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetId: {},
                    datasetArn: {},
                    datasetTitle: {},
                    kind: {},
                    datasetDescription: {},
                    createTime: {
                        type: "long"
                    },
                    lastModifiedTime: {
                        type: "long"
                    },
                    schemaDefinition: {
                        shape: "S15"
                    },
                    alias: {},
                    status: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetExternalDataViewAccessDetails: {
            http: {
                requestUri: "/datasets/{datasetId}/dataviewsv2/{dataviewId}/external-access-details"
            },
            input: {
                type: "structure",
                required: [ "dataViewId", "datasetId" ],
                members: {
                    dataViewId: {
                        location: "uri",
                        locationName: "dataviewId"
                    },
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    credentials: {
                        type: "structure",
                        members: {
                            accessKeyId: {},
                            secretAccessKey: {
                                type: "string",
                                sensitive: true
                            },
                            sessionToken: {
                                type: "string",
                                sensitive: true
                            },
                            expiration: {
                                type: "long"
                            }
                        },
                        sensitive: true
                    },
                    s3Location: {
                        type: "structure",
                        required: [ "bucket", "key" ],
                        members: {
                            bucket: {},
                            key: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetPermissionGroup: {
            http: {
                method: "GET",
                requestUri: "/permission-group/{permissionGroupId}"
            },
            input: {
                type: "structure",
                required: [ "permissionGroupId" ],
                members: {
                    permissionGroupId: {
                        location: "uri",
                        locationName: "permissionGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissionGroup: {
                        shape: "S2s"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetProgrammaticAccessCredentials: {
            http: {
                method: "GET",
                requestUri: "/credentials/programmatic"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    durationInMinutes: {
                        location: "querystring",
                        locationName: "durationInMinutes",
                        type: "long"
                    },
                    environmentId: {
                        location: "querystring",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    credentials: {
                        type: "structure",
                        members: {
                            accessKeyId: {},
                            secretAccessKey: {},
                            sessionToken: {}
                        },
                        sensitive: true
                    },
                    durationInMinutes: {
                        type: "long"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetUser: {
            http: {
                method: "GET",
                requestUri: "/user/{userId}"
            },
            input: {
                type: "structure",
                required: [ "userId" ],
                members: {
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userId: {},
                    status: {},
                    firstName: {
                        shape: "S1m"
                    },
                    lastName: {
                        shape: "S1n"
                    },
                    emailAddress: {
                        shape: "Sz"
                    },
                    type: {},
                    apiAccess: {},
                    apiAccessPrincipalArn: {},
                    createTime: {
                        type: "long"
                    },
                    lastEnabledTime: {
                        type: "long"
                    },
                    lastDisabledTime: {
                        type: "long"
                    },
                    lastModifiedTime: {
                        type: "long"
                    },
                    lastLoginTime: {
                        type: "long"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        GetWorkingLocation: {
            http: {
                requestUri: "/workingLocationV1"
            },
            input: {
                type: "structure",
                members: {
                    locationType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    s3Uri: {},
                    s3Path: {},
                    s3Bucket: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListChangesets: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetId}/changesetsv2"
            },
            input: {
                type: "structure",
                required: [ "datasetId" ],
                members: {
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changesets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                changesetId: {},
                                changesetArn: {},
                                datasetId: {},
                                changeType: {},
                                sourceParams: {
                                    shape: "Sa"
                                },
                                formatParams: {
                                    shape: "Sd"
                                },
                                createTime: {
                                    type: "long"
                                },
                                status: {},
                                errorInfo: {
                                    shape: "S25"
                                },
                                activeUntilTimestamp: {
                                    type: "long"
                                },
                                activeFromTimestamp: {
                                    type: "long"
                                },
                                updatesChangesetId: {},
                                updatedByChangesetId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListDataViews: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetId}/dataviewsv2"
            },
            input: {
                type: "structure",
                required: [ "datasetId" ],
                members: {
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    dataViews: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                dataViewId: {},
                                dataViewArn: {},
                                datasetId: {},
                                asOfTimestamp: {
                                    type: "long"
                                },
                                partitionColumns: {
                                    shape: "Sk"
                                },
                                sortColumns: {
                                    shape: "Si"
                                },
                                status: {},
                                errorInfo: {
                                    shape: "S2a"
                                },
                                destinationTypeProperties: {
                                    shape: "Sm"
                                },
                                autoUpdate: {
                                    type: "boolean"
                                },
                                createTime: {
                                    type: "long"
                                },
                                lastModifiedTime: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListDatasets: {
            http: {
                method: "GET",
                requestUri: "/datasetsv2"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datasetId: {},
                                datasetArn: {},
                                datasetTitle: {},
                                kind: {},
                                datasetDescription: {},
                                ownerInfo: {
                                    shape: "Sw"
                                },
                                createTime: {
                                    type: "long"
                                },
                                lastModifiedTime: {
                                    type: "long"
                                },
                                schemaDefinition: {
                                    shape: "S15"
                                },
                                alias: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListPermissionGroups: {
            http: {
                method: "GET",
                requestUri: "/permission-group"
            },
            input: {
                type: "structure",
                required: [ "maxResults" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissionGroups: {
                        type: "list",
                        member: {
                            shape: "S2s"
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListPermissionGroupsByUser: {
            http: {
                method: "GET",
                requestUri: "/user/{userId}/permission-groups"
            },
            input: {
                type: "structure",
                required: [ "userId", "maxResults" ],
                members: {
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissionGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                permissionGroupId: {},
                                name: {
                                    shape: "S1f"
                                },
                                membershipStatus: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/user"
            },
            input: {
                type: "structure",
                required: [ "maxResults" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                userId: {},
                                status: {},
                                firstName: {
                                    shape: "S1m"
                                },
                                lastName: {
                                    shape: "S1n"
                                },
                                emailAddress: {
                                    shape: "Sz"
                                },
                                type: {},
                                apiAccess: {},
                                apiAccessPrincipalArn: {},
                                createTime: {
                                    type: "long"
                                },
                                lastEnabledTime: {
                                    type: "long"
                                },
                                lastDisabledTime: {
                                    type: "long"
                                },
                                lastModifiedTime: {
                                    type: "long"
                                },
                                lastLoginTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ListUsersByPermissionGroup: {
            http: {
                method: "GET",
                requestUri: "/permission-group/{permissionGroupId}/users"
            },
            input: {
                type: "structure",
                required: [ "permissionGroupId", "maxResults" ],
                members: {
                    permissionGroupId: {
                        location: "uri",
                        locationName: "permissionGroupId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                userId: {},
                                status: {},
                                firstName: {
                                    shape: "S1m"
                                },
                                lastName: {
                                    shape: "S1n"
                                },
                                emailAddress: {
                                    shape: "Sz"
                                },
                                type: {},
                                apiAccess: {},
                                apiAccessPrincipalArn: {},
                                membershipStatus: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        ResetUserPassword: {
            http: {
                requestUri: "/user/{userId}/password"
            },
            input: {
                type: "structure",
                required: [ "userId" ],
                members: {
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userId: {},
                    temporaryPassword: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        UpdateChangeset: {
            http: {
                method: "PUT",
                requestUri: "/datasets/{datasetId}/changesetsv2/{changesetId}"
            },
            input: {
                type: "structure",
                required: [ "datasetId", "changesetId", "sourceParams", "formatParams" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    changesetId: {
                        location: "uri",
                        locationName: "changesetId"
                    },
                    sourceParams: {
                        shape: "Sa"
                    },
                    formatParams: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changesetId: {},
                    datasetId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        UpdateDataset: {
            http: {
                method: "PUT",
                requestUri: "/datasetsv2/{datasetId}"
            },
            input: {
                type: "structure",
                required: [ "datasetId", "datasetTitle", "kind" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    datasetTitle: {},
                    kind: {},
                    datasetDescription: {},
                    alias: {},
                    schemaDefinition: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        UpdatePermissionGroup: {
            http: {
                method: "PUT",
                requestUri: "/permission-group/{permissionGroupId}"
            },
            input: {
                type: "structure",
                required: [ "permissionGroupId" ],
                members: {
                    permissionGroupId: {
                        location: "uri",
                        locationName: "permissionGroupId"
                    },
                    name: {
                        shape: "S1f"
                    },
                    description: {
                        shape: "S1g"
                    },
                    applicationPermissions: {
                        shape: "S1h"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissionGroupId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        },
        UpdateUser: {
            http: {
                method: "PUT",
                requestUri: "/user/{userId}"
            },
            input: {
                type: "structure",
                required: [ "userId" ],
                members: {
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    type: {},
                    firstName: {
                        shape: "S1m"
                    },
                    lastName: {
                        shape: "S1n"
                    },
                    apiAccess: {},
                    apiAccessPrincipalArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This method will be discontinued."
        }
    },
    shapes: {
        Sa: {
            type: "map",
            key: {},
            value: {}
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Si: {
            type: "list",
            member: {}
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "structure",
            required: [ "destinationType" ],
            members: {
                destinationType: {},
                s3DestinationExportFileFormat: {},
                s3DestinationExportFileFormatOptions: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                name: {},
                phoneNumber: {},
                email: {
                    shape: "Sz"
                }
            }
        },
        Sz: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "structure",
            members: {
                tabularSchemaConfig: {
                    type: "structure",
                    members: {
                        columns: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    dataType: {},
                                    columnName: {},
                                    columnDescription: {}
                                }
                            }
                        },
                        primaryKeyColumns: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S1f: {
            type: "string",
            sensitive: true
        },
        S1g: {
            type: "string",
            sensitive: true
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "string",
            sensitive: true
        },
        S1n: {
            type: "string",
            sensitive: true
        },
        S25: {
            type: "structure",
            members: {
                errorMessage: {},
                errorCategory: {}
            }
        },
        S2a: {
            type: "structure",
            members: {
                errorMessage: {},
                errorCategory: {}
            }
        },
        S2s: {
            type: "structure",
            members: {
                permissionGroupId: {},
                name: {
                    shape: "S1f"
                },
                description: {
                    shape: "S1g"
                },
                applicationPermissions: {
                    shape: "S1h"
                },
                createTime: {
                    type: "long"
                },
                lastModifiedTime: {
                    type: "long"
                },
                membershipStatus: {}
            }
        }
    },
    paginators: {
        ListChangesets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "changesets"
        },
        ListDataViews: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataViews"
        },
        ListDatasets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "datasets"
        },
        ListPermissionGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "permissionGroups"
        },
        ListUsers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "users"
        }
    }
};

AWS.apiLoader.services["ssmcontacts"] = {};

AWS.SSMContacts = AWS.Service.defineService("ssmcontacts", [ "2021-05-03" ]);

AWS.apiLoader.services["ssmcontacts"]["2021-05-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-05-03",
        endpointPrefix: "ssm-contacts",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "SSM Contacts",
        serviceFullName: "AWS Systems Manager Incident Manager Contacts",
        serviceId: "SSM Contacts",
        signatureVersion: "v4",
        signingName: "ssm-contacts",
        targetPrefix: "SSMContacts",
        uid: "ssm-contacts-2021-05-03"
    },
    operations: {
        AcceptPage: {
            input: {
                type: "structure",
                required: [ "PageId", "AcceptType", "AcceptCode" ],
                members: {
                    PageId: {},
                    ContactChannelId: {},
                    AcceptType: {},
                    Note: {},
                    AcceptCode: {},
                    AcceptCodeValidation: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ActivateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId", "ActivationCode" ],
                members: {
                    ContactChannelId: {},
                    ActivationCode: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateContact: {
            input: {
                type: "structure",
                required: [ "Alias", "Type", "Plan" ],
                members: {
                    Alias: {},
                    DisplayName: {},
                    Type: {},
                    Plan: {
                        shape: "Sf"
                    },
                    Tags: {
                        shape: "Sq"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            }
        },
        CreateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactId", "Name", "Type", "DeliveryAddress" ],
                members: {
                    ContactId: {},
                    Name: {},
                    Type: {},
                    DeliveryAddress: {
                        shape: "Sz"
                    },
                    DeferActivation: {
                        type: "boolean"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ContactChannelArn" ],
                members: {
                    ContactChannelArn: {}
                }
            }
        },
        CreateRotation: {
            input: {
                type: "structure",
                required: [ "Name", "ContactIds", "TimeZoneId", "Recurrence" ],
                members: {
                    Name: {},
                    ContactIds: {
                        shape: "S15"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    TimeZoneId: {},
                    Recurrence: {
                        shape: "S18"
                    },
                    Tags: {
                        shape: "Sq"
                    },
                    IdempotencyToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RotationArn" ],
                members: {
                    RotationArn: {}
                }
            }
        },
        CreateRotationOverride: {
            input: {
                type: "structure",
                required: [ "RotationId", "NewContactIds", "StartTime", "EndTime" ],
                members: {
                    RotationId: {},
                    NewContactIds: {
                        type: "list",
                        member: {}
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    IdempotencyToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RotationOverrideId" ],
                members: {
                    RotationOverrideId: {}
                }
            }
        },
        DeactivateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRotation: {
            input: {
                type: "structure",
                required: [ "RotationId" ],
                members: {
                    RotationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRotationOverride: {
            input: {
                type: "structure",
                required: [ "RotationId", "RotationOverrideId" ],
                members: {
                    RotationId: {},
                    RotationOverrideId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeEngagement: {
            input: {
                type: "structure",
                required: [ "EngagementId" ],
                members: {
                    EngagementId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn", "EngagementArn", "Sender", "Subject", "Content" ],
                members: {
                    ContactArn: {},
                    EngagementArn: {},
                    Sender: {},
                    Subject: {},
                    Content: {},
                    PublicSubject: {},
                    PublicContent: {},
                    IncidentId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    StopTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribePage: {
            input: {
                type: "structure",
                required: [ "PageId" ],
                members: {
                    PageId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "PageArn", "EngagementArn", "ContactArn", "Sender", "Subject", "Content" ],
                members: {
                    PageArn: {},
                    EngagementArn: {},
                    ContactArn: {},
                    Sender: {},
                    Subject: {},
                    Content: {},
                    PublicSubject: {},
                    PublicContent: {},
                    IncidentId: {},
                    SentTime: {
                        type: "timestamp"
                    },
                    ReadTime: {
                        type: "timestamp"
                    },
                    DeliveryTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn", "Alias", "Type", "Plan" ],
                members: {
                    ContactArn: {},
                    Alias: {},
                    DisplayName: {},
                    Type: {},
                    Plan: {
                        shape: "Sf"
                    }
                }
            }
        },
        GetContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn", "ContactChannelArn", "Name", "Type", "DeliveryAddress" ],
                members: {
                    ContactArn: {},
                    ContactChannelArn: {},
                    Name: {},
                    Type: {},
                    DeliveryAddress: {
                        shape: "Sz"
                    },
                    ActivationStatus: {}
                }
            }
        },
        GetContactPolicy: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactArn: {},
                    Policy: {}
                }
            }
        },
        GetRotation: {
            input: {
                type: "structure",
                required: [ "RotationId" ],
                members: {
                    RotationId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RotationArn", "Name", "ContactIds", "StartTime", "TimeZoneId", "Recurrence" ],
                members: {
                    RotationArn: {},
                    Name: {},
                    ContactIds: {
                        shape: "S15"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    TimeZoneId: {},
                    Recurrence: {
                        shape: "S18"
                    }
                }
            }
        },
        GetRotationOverride: {
            input: {
                type: "structure",
                required: [ "RotationId", "RotationOverrideId" ],
                members: {
                    RotationId: {},
                    RotationOverrideId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RotationOverrideId: {},
                    RotationArn: {},
                    NewContactIds: {
                        shape: "Sp"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    CreateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListContactChannels: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ContactChannels" ],
                members: {
                    NextToken: {},
                    ContactChannels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ContactChannelArn", "ContactArn", "Name", "DeliveryAddress", "ActivationStatus" ],
                            members: {
                                ContactChannelArn: {},
                                ContactArn: {},
                                Name: {},
                                Type: {},
                                DeliveryAddress: {
                                    shape: "Sz"
                                },
                                ActivationStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListContacts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    AliasPrefix: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Contacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ContactArn", "Alias", "Type" ],
                            members: {
                                ContactArn: {},
                                Alias: {},
                                DisplayName: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListEngagements: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    IncidentId: {},
                    TimeRangeValue: {
                        type: "structure",
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Engagements" ],
                members: {
                    NextToken: {},
                    Engagements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EngagementArn", "ContactArn", "Sender" ],
                            members: {
                                EngagementArn: {},
                                ContactArn: {},
                                Sender: {},
                                IncidentId: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                StopTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPageReceipts: {
            input: {
                type: "structure",
                required: [ "PageId" ],
                members: {
                    PageId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Receipts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ReceiptType", "ReceiptTime" ],
                            members: {
                                ContactChannelArn: {},
                                ReceiptType: {},
                                ReceiptInfo: {},
                                ReceiptTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPageResolutions: {
            input: {
                type: "structure",
                required: [ "PageId" ],
                members: {
                    NextToken: {},
                    PageId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "PageResolutions" ],
                members: {
                    NextToken: {},
                    PageResolutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ContactArn", "Type" ],
                            members: {
                                ContactArn: {},
                                Type: {},
                                StageIndex: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPagesByContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Pages" ],
                members: {
                    NextToken: {},
                    Pages: {
                        shape: "S3g"
                    }
                }
            }
        },
        ListPagesByEngagement: {
            input: {
                type: "structure",
                required: [ "EngagementId" ],
                members: {
                    EngagementId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Pages" ],
                members: {
                    NextToken: {},
                    Pages: {
                        shape: "S3g"
                    }
                }
            }
        },
        ListPreviewRotationShifts: {
            input: {
                type: "structure",
                required: [ "EndTime", "Members", "TimeZoneId", "Recurrence" ],
                members: {
                    RotationStartTime: {
                        type: "timestamp"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Members: {
                        type: "list",
                        member: {}
                    },
                    TimeZoneId: {},
                    Recurrence: {
                        shape: "S18"
                    },
                    Overrides: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NewMembers: {
                                    type: "list",
                                    member: {}
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RotationShifts: {
                        shape: "S3r"
                    },
                    NextToken: {}
                }
            }
        },
        ListRotationOverrides: {
            input: {
                type: "structure",
                required: [ "RotationId", "StartTime", "EndTime" ],
                members: {
                    RotationId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RotationOverrides: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RotationOverrideId", "NewContactIds", "StartTime", "EndTime", "CreateTime" ],
                            members: {
                                RotationOverrideId: {},
                                NewContactIds: {
                                    shape: "Sp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                CreateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRotationShifts: {
            input: {
                type: "structure",
                required: [ "RotationId", "EndTime" ],
                members: {
                    RotationId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RotationShifts: {
                        shape: "S3r"
                    },
                    NextToken: {}
                }
            }
        },
        ListRotations: {
            input: {
                type: "structure",
                members: {
                    RotationNamePrefix: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Rotations" ],
                members: {
                    NextToken: {},
                    Rotations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RotationArn", "Name" ],
                            members: {
                                RotationArn: {},
                                Name: {},
                                ContactIds: {
                                    shape: "Sp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                TimeZoneId: {},
                                Recurrence: {
                                    shape: "S18"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sq"
                    }
                }
            }
        },
        PutContactPolicy: {
            input: {
                type: "structure",
                required: [ "ContactArn", "Policy" ],
                members: {
                    ContactArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendActivationCode: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartEngagement: {
            input: {
                type: "structure",
                required: [ "ContactId", "Sender", "Subject", "Content" ],
                members: {
                    ContactId: {},
                    Sender: {},
                    Subject: {},
                    Content: {},
                    PublicSubject: {},
                    PublicContent: {},
                    IncidentId: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EngagementArn" ],
                members: {
                    EngagementArn: {}
                }
            }
        },
        StopEngagement: {
            input: {
                type: "structure",
                required: [ "EngagementId" ],
                members: {
                    EngagementId: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {},
                    DisplayName: {},
                    Plan: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {},
                    Name: {},
                    DeliveryAddress: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRotation: {
            input: {
                type: "structure",
                required: [ "RotationId", "Recurrence" ],
                members: {
                    RotationId: {},
                    ContactIds: {
                        shape: "S15"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    TimeZoneId: {},
                    Recurrence: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sf: {
            type: "structure",
            members: {
                Stages: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DurationInMinutes", "Targets" ],
                        members: {
                            DurationInMinutes: {
                                type: "integer"
                            },
                            Targets: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ChannelTargetInfo: {
                                            type: "structure",
                                            required: [ "ContactChannelId" ],
                                            members: {
                                                ContactChannelId: {},
                                                RetryIntervalInMinutes: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        ContactTargetInfo: {
                                            type: "structure",
                                            required: [ "IsEssential" ],
                                            members: {
                                                ContactId: {},
                                                IsEssential: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                RotationIds: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                SimpleAddress: {}
            }
        },
        S15: {
            type: "list",
            member: {}
        },
        S18: {
            type: "structure",
            required: [ "NumberOfOnCalls", "RecurrenceMultiplier" ],
            members: {
                MonthlySettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DayOfMonth", "HandOffTime" ],
                        members: {
                            DayOfMonth: {
                                type: "integer"
                            },
                            HandOffTime: {
                                shape: "S1c"
                            }
                        }
                    }
                },
                WeeklySettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DayOfWeek", "HandOffTime" ],
                        members: {
                            DayOfWeek: {},
                            HandOffTime: {
                                shape: "S1c"
                            }
                        }
                    }
                },
                DailySettings: {
                    type: "list",
                    member: {
                        shape: "S1c"
                    }
                },
                NumberOfOnCalls: {
                    type: "integer"
                },
                ShiftCoverages: {
                    type: "map",
                    key: {},
                    value: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Start: {
                                    shape: "S1c"
                                },
                                End: {
                                    shape: "S1c"
                                }
                            }
                        }
                    }
                },
                RecurrenceMultiplier: {
                    type: "integer"
                }
            }
        },
        S1c: {
            type: "structure",
            required: [ "HourOfDay", "MinuteOfHour" ],
            members: {
                HourOfDay: {
                    type: "integer"
                },
                MinuteOfHour: {
                    type: "integer"
                }
            }
        },
        S3g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "PageArn", "EngagementArn", "ContactArn", "Sender" ],
                members: {
                    PageArn: {},
                    EngagementArn: {},
                    ContactArn: {},
                    Sender: {},
                    IncidentId: {},
                    SentTime: {
                        type: "timestamp"
                    },
                    DeliveryTime: {
                        type: "timestamp"
                    },
                    ReadTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S3r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    ContactIds: {
                        shape: "Sp"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Type: {},
                    ShiftDetails: {
                        type: "structure",
                        required: [ "OverriddenContactIds" ],
                        members: {
                            OverriddenContactIds: {
                                shape: "Sp"
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListContactChannels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ContactChannels"
        },
        ListContacts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Contacts"
        },
        ListEngagements: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Engagements"
        },
        ListPageReceipts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Receipts"
        },
        ListPageResolutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "PageResolutions"
        },
        ListPagesByContact: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Pages"
        },
        ListPagesByEngagement: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Pages"
        },
        ListPreviewRotationShifts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RotationShifts"
        },
        ListRotationOverrides: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RotationOverrides"
        },
        ListRotationShifts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RotationShifts"
        },
        ListRotations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Rotations"
        }
    }
};

AWS.apiLoader.services["ssmincidents"] = {};

AWS.SSMIncidents = AWS.Service.defineService("ssmincidents", [ "2018-05-10" ]);

AWS.apiLoader.services["ssmincidents"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "ssm-incidents",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SSM Incidents",
        serviceFullName: "AWS Systems Manager Incident Manager",
        serviceId: "SSM Incidents",
        signatureVersion: "v4",
        signingName: "ssm-incidents",
        uid: "ssm-incidents-2018-05-10"
    },
    operations: {
        BatchGetIncidentFindings: {
            http: {
                requestUri: "/batchGetIncidentFindings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "findingIds", "incidentRecordArn" ],
                members: {
                    findingIds: {
                        type: "list",
                        member: {}
                    },
                    incidentRecordArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "errors", "findings" ],
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "code", "findingId", "message" ],
                            members: {
                                code: {},
                                findingId: {},
                                message: {}
                            }
                        }
                    },
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "id", "lastModifiedTime" ],
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                details: {
                                    type: "structure",
                                    members: {
                                        cloudFormationStackUpdate: {
                                            type: "structure",
                                            required: [ "stackArn", "startTime" ],
                                            members: {
                                                endTime: {
                                                    type: "timestamp"
                                                },
                                                stackArn: {},
                                                startTime: {
                                                    type: "timestamp"
                                                }
                                            }
                                        },
                                        codeDeployDeployment: {
                                            type: "structure",
                                            required: [ "deploymentGroupArn", "deploymentId", "startTime" ],
                                            members: {
                                                deploymentGroupArn: {},
                                                deploymentId: {},
                                                endTime: {
                                                    type: "timestamp"
                                                },
                                                startTime: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                },
                                id: {},
                                lastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateReplicationSet: {
            http: {
                requestUri: "/createReplicationSet",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "regions" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    regions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                sseKmsKeyId: {}
                            }
                        }
                    },
                    tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        CreateResponsePlan: {
            http: {
                requestUri: "/createResponsePlan",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "incidentTemplate", "name" ],
                members: {
                    actions: {
                        shape: "Sr"
                    },
                    chatChannel: {
                        shape: "S16"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    displayName: {},
                    engagements: {
                        shape: "S1b"
                    },
                    incidentTemplate: {
                        shape: "S1d"
                    },
                    integrations: {
                        shape: "S1k"
                    },
                    name: {},
                    tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateTimelineEvent: {
            http: {
                requestUri: "/createTimelineEvent",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "eventData", "eventTime", "eventType", "incidentRecordArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    eventData: {},
                    eventReferences: {
                        shape: "S1v"
                    },
                    eventTime: {
                        type: "timestamp"
                    },
                    eventType: {},
                    incidentRecordArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    eventId: {},
                    incidentRecordArn: {}
                }
            },
            idempotent: true
        },
        DeleteIncidentRecord: {
            http: {
                requestUri: "/deleteIncidentRecord",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteReplicationSet: {
            http: {
                requestUri: "/deleteReplicationSet",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourcePolicy: {
            http: {
                requestUri: "/deleteResourcePolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyId", "resourceArn" ],
                members: {
                    policyId: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResponsePlan: {
            http: {
                requestUri: "/deleteResponsePlan",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteTimelineEvent: {
            http: {
                requestUri: "/deleteTimelineEvent",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    eventId: {},
                    incidentRecordArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetIncidentRecord: {
            http: {
                method: "GET",
                requestUri: "/getIncidentRecord",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "incidentRecord" ],
                members: {
                    incidentRecord: {
                        type: "structure",
                        required: [ "arn", "creationTime", "dedupeString", "impact", "incidentRecordSource", "lastModifiedBy", "lastModifiedTime", "status", "title" ],
                        members: {
                            arn: {},
                            automationExecutions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ssmExecutionArn: {}
                                    },
                                    union: true
                                }
                            },
                            chatChannel: {
                                shape: "S16"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            dedupeString: {},
                            impact: {
                                type: "integer"
                            },
                            incidentRecordSource: {
                                shape: "S2h"
                            },
                            lastModifiedBy: {},
                            lastModifiedTime: {
                                type: "timestamp"
                            },
                            notificationTargets: {
                                shape: "S1g"
                            },
                            resolvedTime: {
                                type: "timestamp"
                            },
                            status: {},
                            summary: {},
                            title: {}
                        }
                    }
                }
            }
        },
        GetReplicationSet: {
            http: {
                method: "GET",
                requestUri: "/getReplicationSet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "replicationSet" ],
                members: {
                    replicationSet: {
                        type: "structure",
                        required: [ "createdBy", "createdTime", "deletionProtected", "lastModifiedBy", "lastModifiedTime", "regionMap", "status" ],
                        members: {
                            arn: {},
                            createdBy: {},
                            createdTime: {
                                type: "timestamp"
                            },
                            deletionProtected: {
                                type: "boolean"
                            },
                            lastModifiedBy: {},
                            lastModifiedTime: {
                                type: "timestamp"
                            },
                            regionMap: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    required: [ "status", "statusUpdateDateTime" ],
                                    members: {
                                        sseKmsKeyId: {},
                                        status: {},
                                        statusMessage: {},
                                        statusUpdateDateTime: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            },
                            status: {}
                        }
                    }
                }
            }
        },
        GetResourcePolicies: {
            http: {
                requestUri: "/getResourcePolicies",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourcePolicies" ],
                members: {
                    nextToken: {},
                    resourcePolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "policyDocument", "policyId", "ramResourceShareRegion" ],
                            members: {
                                policyDocument: {},
                                policyId: {},
                                ramResourceShareRegion: {}
                            }
                        }
                    }
                }
            }
        },
        GetResponsePlan: {
            http: {
                method: "GET",
                requestUri: "/getResponsePlan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "incidentTemplate", "name" ],
                members: {
                    actions: {
                        shape: "Sr"
                    },
                    arn: {},
                    chatChannel: {
                        shape: "S16"
                    },
                    displayName: {},
                    engagements: {
                        shape: "S1b"
                    },
                    incidentTemplate: {
                        shape: "S1d"
                    },
                    integrations: {
                        shape: "S1k"
                    },
                    name: {}
                }
            }
        },
        GetTimelineEvent: {
            http: {
                method: "GET",
                requestUri: "/getTimelineEvent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    eventId: {
                        location: "querystring",
                        locationName: "eventId"
                    },
                    incidentRecordArn: {
                        location: "querystring",
                        locationName: "incidentRecordArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "event" ],
                members: {
                    event: {
                        type: "structure",
                        required: [ "eventData", "eventId", "eventTime", "eventType", "eventUpdatedTime", "incidentRecordArn" ],
                        members: {
                            eventData: {},
                            eventId: {},
                            eventReferences: {
                                shape: "S1v"
                            },
                            eventTime: {
                                type: "timestamp"
                            },
                            eventType: {},
                            eventUpdatedTime: {
                                type: "timestamp"
                            },
                            incidentRecordArn: {}
                        }
                    }
                }
            }
        },
        ListIncidentFindings: {
            http: {
                requestUri: "/listIncidentFindings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "incidentRecordArn" ],
                members: {
                    incidentRecordArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "lastModifiedTime" ],
                            members: {
                                id: {},
                                lastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIncidentRecords: {
            http: {
                requestUri: "/listIncidentRecords",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S3b"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "incidentRecordSummaries" ],
                members: {
                    incidentRecordSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "creationTime", "impact", "incidentRecordSource", "status", "title" ],
                            members: {
                                arn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                impact: {
                                    type: "integer"
                                },
                                incidentRecordSource: {
                                    shape: "S2h"
                                },
                                resolvedTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                title: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRelatedItems: {
            http: {
                requestUri: "/listRelatedItems",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "incidentRecordArn" ],
                members: {
                    incidentRecordArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "relatedItems" ],
                members: {
                    nextToken: {},
                    relatedItems: {
                        shape: "S3p"
                    }
                }
            }
        },
        ListReplicationSets: {
            http: {
                requestUri: "/listReplicationSets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "replicationSetArns" ],
                members: {
                    nextToken: {},
                    replicationSetArns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListResponsePlans: {
            http: {
                requestUri: "/listResponsePlans",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "responsePlanSummaries" ],
                members: {
                    nextToken: {},
                    responsePlanSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name" ],
                            members: {
                                arn: {},
                                displayName: {},
                                name: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        ListTimelineEvents: {
            http: {
                requestUri: "/listTimelineEvents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "incidentRecordArn" ],
                members: {
                    filters: {
                        shape: "S3b"
                    },
                    incidentRecordArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sortBy: {},
                    sortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "eventSummaries" ],
                members: {
                    eventSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventId", "eventTime", "eventType", "eventUpdatedTime", "incidentRecordArn" ],
                            members: {
                                eventId: {},
                                eventReferences: {
                                    shape: "S1v"
                                },
                                eventTime: {
                                    type: "timestamp"
                                },
                                eventType: {},
                                eventUpdatedTime: {
                                    type: "timestamp"
                                },
                                incidentRecordArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutResourcePolicy: {
            http: {
                requestUri: "/putResourcePolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policy", "resourceArn" ],
                members: {
                    policy: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyId" ],
                members: {
                    policyId: {}
                }
            }
        },
        StartIncident: {
            http: {
                requestUri: "/startIncident",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "responsePlanArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    impact: {
                        type: "integer"
                    },
                    relatedItems: {
                        shape: "S3p"
                    },
                    responsePlanArn: {},
                    title: {},
                    triggerDetails: {
                        type: "structure",
                        required: [ "source", "timestamp" ],
                        members: {
                            rawData: {},
                            source: {},
                            timestamp: {
                                type: "timestamp"
                            },
                            triggerArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "incidentRecordArn" ],
                members: {
                    incidentRecordArn: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateDeletionProtection: {
            http: {
                requestUri: "/updateDeletionProtection",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn", "deletionProtected" ],
                members: {
                    arn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    deletionProtected: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIncidentRecord: {
            http: {
                requestUri: "/updateIncidentRecord",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    chatChannel: {
                        shape: "S16"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    impact: {
                        type: "integer"
                    },
                    notificationTargets: {
                        shape: "S1g"
                    },
                    status: {},
                    summary: {},
                    title: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateRelatedItems: {
            http: {
                requestUri: "/updateRelatedItems",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "incidentRecordArn", "relatedItemsUpdate" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    incidentRecordArn: {},
                    relatedItemsUpdate: {
                        type: "structure",
                        members: {
                            itemToAdd: {
                                shape: "S3q"
                            },
                            itemToRemove: {
                                shape: "S3r"
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateReplicationSet: {
            http: {
                requestUri: "/updateReplicationSet",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "actions", "arn" ],
                members: {
                    actions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                addRegionAction: {
                                    type: "structure",
                                    required: [ "regionName" ],
                                    members: {
                                        regionName: {},
                                        sseKmsKeyId: {}
                                    }
                                },
                                deleteRegionAction: {
                                    type: "structure",
                                    required: [ "regionName" ],
                                    members: {
                                        regionName: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    arn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResponsePlan: {
            http: {
                requestUri: "/updateResponsePlan",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    actions: {
                        shape: "Sr"
                    },
                    arn: {},
                    chatChannel: {
                        shape: "S16"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    displayName: {},
                    engagements: {
                        shape: "S1b"
                    },
                    incidentTemplateDedupeString: {},
                    incidentTemplateImpact: {
                        type: "integer"
                    },
                    incidentTemplateNotificationTargets: {
                        shape: "S1g"
                    },
                    incidentTemplateSummary: {},
                    incidentTemplateTags: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    incidentTemplateTitle: {},
                    integrations: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateTimelineEvent: {
            http: {
                requestUri: "/updateTimelineEvent",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    eventData: {},
                    eventId: {},
                    eventReferences: {
                        shape: "S1v"
                    },
                    eventTime: {
                        type: "timestamp"
                    },
                    eventType: {},
                    incidentRecordArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        Sm: {
            type: "map",
            key: {},
            value: {}
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ssmAutomation: {
                        type: "structure",
                        required: [ "documentName", "roleArn" ],
                        members: {
                            documentName: {},
                            documentVersion: {},
                            dynamicParameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        variable: {}
                                    },
                                    union: true
                                }
                            },
                            parameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            },
                            roleArn: {},
                            targetAccount: {}
                        }
                    }
                },
                union: true
            }
        },
        S16: {
            type: "structure",
            members: {
                chatbotSns: {
                    type: "list",
                    member: {}
                },
                empty: {
                    type: "structure",
                    members: {}
                }
            },
            union: true
        },
        S1b: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "structure",
            required: [ "impact", "title" ],
            members: {
                dedupeString: {},
                impact: {
                    type: "integer"
                },
                incidentTags: {
                    shape: "Sm"
                },
                notificationTargets: {
                    shape: "S1g"
                },
                summary: {},
                title: {}
            }
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    snsTopicArn: {}
                },
                union: true
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    pagerDutyConfiguration: {
                        type: "structure",
                        required: [ "name", "pagerDutyIncidentConfiguration", "secretId" ],
                        members: {
                            name: {},
                            pagerDutyIncidentConfiguration: {
                                type: "structure",
                                required: [ "serviceId" ],
                                members: {
                                    serviceId: {}
                                }
                            },
                            secretId: {}
                        }
                    }
                },
                union: true
            }
        },
        S1v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    relatedItemId: {},
                    resource: {}
                },
                union: true
            }
        },
        S2h: {
            type: "structure",
            required: [ "createdBy", "source" ],
            members: {
                createdBy: {},
                invokedBy: {},
                resourceArn: {},
                source: {}
            }
        },
        S3b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "condition", "key" ],
                members: {
                    condition: {
                        type: "structure",
                        members: {
                            after: {
                                type: "timestamp"
                            },
                            before: {
                                type: "timestamp"
                            },
                            equals: {
                                type: "structure",
                                members: {
                                    integerValues: {
                                        type: "list",
                                        member: {
                                            type: "integer"
                                        }
                                    },
                                    stringValues: {
                                        type: "list",
                                        member: {}
                                    }
                                },
                                union: true
                            }
                        },
                        union: true
                    },
                    key: {}
                }
            }
        },
        S3p: {
            type: "list",
            member: {
                shape: "S3q"
            }
        },
        S3q: {
            type: "structure",
            required: [ "identifier" ],
            members: {
                generatedId: {},
                identifier: {
                    shape: "S3r"
                },
                title: {}
            }
        },
        S3r: {
            type: "structure",
            required: [ "type", "value" ],
            members: {
                type: {},
                value: {
                    type: "structure",
                    members: {
                        arn: {},
                        metricDefinition: {},
                        pagerDutyIncidentDetail: {
                            type: "structure",
                            required: [ "id" ],
                            members: {
                                autoResolve: {
                                    type: "boolean"
                                },
                                id: {},
                                secretId: {}
                            }
                        },
                        url: {}
                    },
                    union: true
                }
            }
        }
    },
    paginators: {
        GetResourcePolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "resourcePolicies"
        },
        ListIncidentFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListIncidentRecords: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "incidentRecordSummaries"
        },
        ListRelatedItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "relatedItems"
        },
        ListReplicationSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "replicationSetArns"
        },
        ListResponsePlans: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "responsePlanSummaries"
        },
        ListTimelineEvents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "eventSummaries"
        }
    },
    waiters: {
        WaitForReplicationSetActive: {
            description: "Wait for a replication set to become ACTIVE",
            delay: 30,
            maxAttempts: 5,
            operation: "GetReplicationSet",
            acceptors: [ {
                matcher: "path",
                argument: "replicationSet.status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "retry",
                expected: "CREATING"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        WaitForReplicationSetDeleted: {
            description: "Wait for a replication set to be deleted",
            delay: 30,
            maxAttempts: 5,
            operation: "GetReplicationSet",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "retry",
                expected: "DELETING"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "failure",
                expected: "FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["applicationcostprofiler"] = {};

AWS.ApplicationCostProfiler = AWS.Service.defineService("applicationcostprofiler", [ "2020-09-10" ]);

AWS.apiLoader.services["applicationcostprofiler"]["2020-09-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-09-10",
        endpointPrefix: "application-cost-profiler",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Application Cost Profiler",
        serviceId: "ApplicationCostProfiler",
        signatureVersion: "v4",
        signingName: "application-cost-profiler",
        uid: "AWSApplicationCostProfiler-2020-09-10"
    },
    operations: {
        DeleteReportDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/reportDefinition/{reportId}"
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {
                        location: "uri",
                        locationName: "reportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        },
        GetReportDefinition: {
            http: {
                method: "GET",
                requestUri: "/reportDefinition/{reportId}"
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {
                        location: "uri",
                        locationName: "reportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "reportId", "reportDescription", "reportFrequency", "format", "destinationS3Location", "createdAt", "lastUpdated" ],
                members: {
                    reportId: {},
                    reportDescription: {},
                    reportFrequency: {},
                    format: {},
                    destinationS3Location: {
                        shape: "S9"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdated: {
                        type: "timestamp"
                    }
                }
            }
        },
        ImportApplicationUsage: {
            http: {
                requestUri: "/importApplicationUsage"
            },
            input: {
                type: "structure",
                required: [ "sourceS3Location" ],
                members: {
                    sourceS3Location: {
                        type: "structure",
                        required: [ "bucket", "key" ],
                        members: {
                            bucket: {},
                            key: {},
                            region: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {}
                }
            }
        },
        ListReportDefinitions: {
            http: {
                method: "GET",
                requestUri: "/reportDefinition"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                reportId: {},
                                reportDescription: {},
                                reportFrequency: {},
                                format: {},
                                destinationS3Location: {
                                    shape: "S9"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutReportDefinition: {
            http: {
                requestUri: "/reportDefinition"
            },
            input: {
                type: "structure",
                required: [ "reportId", "reportDescription", "reportFrequency", "format", "destinationS3Location" ],
                members: {
                    reportId: {},
                    reportDescription: {},
                    reportFrequency: {},
                    format: {},
                    destinationS3Location: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        },
        UpdateReportDefinition: {
            http: {
                method: "PUT",
                requestUri: "/reportDefinition/{reportId}"
            },
            input: {
                type: "structure",
                required: [ "reportId", "reportDescription", "reportFrequency", "format", "destinationS3Location" ],
                members: {
                    reportId: {
                        location: "uri",
                        locationName: "reportId"
                    },
                    reportDescription: {},
                    reportFrequency: {},
                    format: {},
                    destinationS3Location: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "structure",
            required: [ "bucket", "prefix" ],
            members: {
                bucket: {},
                prefix: {}
            }
        }
    },
    paginators: {
        ListReportDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "reportDefinitions"
        }
    }
};

AWS.apiLoader.services["apprunner"] = {};

AWS.AppRunner = AWS.Service.defineService("apprunner", [ "2020-05-15" ]);

AWS.apiLoader.services["apprunner"]["2020-05-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-05-15",
        endpointPrefix: "apprunner",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS App Runner",
        serviceId: "AppRunner",
        signatureVersion: "v4",
        signingName: "apprunner",
        targetPrefix: "AppRunner",
        uid: "apprunner-2020-05-15"
    },
    operations: {
        AssociateCustomDomain: {
            input: {
                type: "structure",
                required: [ "ServiceArn", "DomainName" ],
                members: {
                    ServiceArn: {},
                    DomainName: {},
                    EnableWWWSubdomain: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DNSTarget", "ServiceArn", "CustomDomain", "VpcDNSTargets" ],
                members: {
                    DNSTarget: {},
                    ServiceArn: {},
                    CustomDomain: {
                        shape: "S7"
                    },
                    VpcDNSTargets: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationName" ],
                members: {
                    AutoScalingConfigurationName: {},
                    MaxConcurrency: {
                        type: "integer"
                    },
                    MinSize: {
                        type: "integer"
                    },
                    MaxSize: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfiguration" ],
                members: {
                    AutoScalingConfiguration: {
                        shape: "So"
                    }
                }
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionName", "ProviderType" ],
                members: {
                    ConnectionName: {},
                    ProviderType: {},
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Connection" ],
                members: {
                    Connection: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateObservabilityConfiguration: {
            input: {
                type: "structure",
                required: [ "ObservabilityConfigurationName" ],
                members: {
                    ObservabilityConfigurationName: {},
                    TraceConfiguration: {
                        shape: "S16"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ObservabilityConfiguration" ],
                members: {
                    ObservabilityConfiguration: {
                        shape: "S19"
                    }
                }
            }
        },
        CreateService: {
            input: {
                type: "structure",
                required: [ "ServiceName", "SourceConfiguration" ],
                members: {
                    ServiceName: {},
                    SourceConfiguration: {
                        shape: "S1f"
                    },
                    InstanceConfiguration: {
                        shape: "S22"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    EncryptionConfiguration: {
                        shape: "S25"
                    },
                    HealthCheckConfiguration: {
                        shape: "S27"
                    },
                    AutoScalingConfigurationArn: {},
                    NetworkConfiguration: {
                        shape: "S2e"
                    },
                    ObservabilityConfiguration: {
                        shape: "S2j"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Service", "OperationId" ],
                members: {
                    Service: {
                        shape: "S2l"
                    },
                    OperationId: {}
                }
            }
        },
        CreateVpcConnector: {
            input: {
                type: "structure",
                required: [ "VpcConnectorName", "Subnets" ],
                members: {
                    VpcConnectorName: {},
                    Subnets: {
                        shape: "S2s"
                    },
                    SecurityGroups: {
                        shape: "S2s"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcConnector" ],
                members: {
                    VpcConnector: {
                        shape: "S2u"
                    }
                }
            }
        },
        CreateVpcIngressConnection: {
            input: {
                type: "structure",
                required: [ "ServiceArn", "VpcIngressConnectionName", "IngressVpcConfiguration" ],
                members: {
                    ServiceArn: {},
                    VpcIngressConnectionName: {},
                    IngressVpcConfiguration: {
                        shape: "S2y"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcIngressConnection" ],
                members: {
                    VpcIngressConnection: {
                        shape: "S30"
                    }
                }
            }
        },
        DeleteAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationArn" ],
                members: {
                    AutoScalingConfigurationArn: {},
                    DeleteAllRevisions: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfiguration" ],
                members: {
                    AutoScalingConfiguration: {
                        shape: "So"
                    }
                }
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S12"
                    }
                }
            }
        },
        DeleteObservabilityConfiguration: {
            input: {
                type: "structure",
                required: [ "ObservabilityConfigurationArn" ],
                members: {
                    ObservabilityConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ObservabilityConfiguration" ],
                members: {
                    ObservabilityConfiguration: {
                        shape: "S19"
                    }
                }
            }
        },
        DeleteService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service", "OperationId" ],
                members: {
                    Service: {
                        shape: "S2l"
                    },
                    OperationId: {}
                }
            }
        },
        DeleteVpcConnector: {
            input: {
                type: "structure",
                required: [ "VpcConnectorArn" ],
                members: {
                    VpcConnectorArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcConnector" ],
                members: {
                    VpcConnector: {
                        shape: "S2u"
                    }
                }
            }
        },
        DeleteVpcIngressConnection: {
            input: {
                type: "structure",
                required: [ "VpcIngressConnectionArn" ],
                members: {
                    VpcIngressConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcIngressConnection" ],
                members: {
                    VpcIngressConnection: {
                        shape: "S30"
                    }
                }
            }
        },
        DescribeAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationArn" ],
                members: {
                    AutoScalingConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfiguration" ],
                members: {
                    AutoScalingConfiguration: {
                        shape: "So"
                    }
                }
            }
        },
        DescribeCustomDomains: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DNSTarget", "ServiceArn", "CustomDomains", "VpcDNSTargets" ],
                members: {
                    DNSTarget: {},
                    ServiceArn: {},
                    CustomDomains: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    },
                    VpcDNSTargets: {
                        shape: "Sc"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeObservabilityConfiguration: {
            input: {
                type: "structure",
                required: [ "ObservabilityConfigurationArn" ],
                members: {
                    ObservabilityConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ObservabilityConfiguration" ],
                members: {
                    ObservabilityConfiguration: {
                        shape: "S19"
                    }
                }
            }
        },
        DescribeService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Service: {
                        shape: "S2l"
                    }
                }
            }
        },
        DescribeVpcConnector: {
            input: {
                type: "structure",
                required: [ "VpcConnectorArn" ],
                members: {
                    VpcConnectorArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcConnector" ],
                members: {
                    VpcConnector: {
                        shape: "S2u"
                    }
                }
            }
        },
        DescribeVpcIngressConnection: {
            input: {
                type: "structure",
                required: [ "VpcIngressConnectionArn" ],
                members: {
                    VpcIngressConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcIngressConnection" ],
                members: {
                    VpcIngressConnection: {
                        shape: "S30"
                    }
                }
            }
        },
        DisassociateCustomDomain: {
            input: {
                type: "structure",
                required: [ "ServiceArn", "DomainName" ],
                members: {
                    ServiceArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DNSTarget", "ServiceArn", "CustomDomain", "VpcDNSTargets" ],
                members: {
                    DNSTarget: {},
                    ServiceArn: {},
                    CustomDomain: {
                        shape: "S7"
                    },
                    VpcDNSTargets: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListAutoScalingConfigurations: {
            input: {
                type: "structure",
                members: {
                    AutoScalingConfigurationName: {},
                    LatestOnly: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfigurationSummaryList" ],
                members: {
                    AutoScalingConfigurationSummaryList: {
                        type: "list",
                        member: {
                            shape: "S2o"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnections: {
            input: {
                type: "structure",
                members: {
                    ConnectionName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ConnectionSummaryList" ],
                members: {
                    ConnectionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectionName: {},
                                ConnectionArn: {},
                                ProviderType: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListObservabilityConfigurations: {
            input: {
                type: "structure",
                members: {
                    ObservabilityConfigurationName: {},
                    LatestOnly: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ObservabilityConfigurationSummaryList" ],
                members: {
                    ObservabilityConfigurationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ObservabilityConfigurationArn: {},
                                ObservabilityConfigurationName: {},
                                ObservabilityConfigurationRevision: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOperations: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                Status: {},
                                TargetArn: {},
                                StartedAt: {
                                    type: "timestamp"
                                },
                                EndedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServiceSummaryList" ],
                members: {
                    ServiceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceName: {},
                                ServiceId: {},
                                ServiceArn: {},
                                ServiceUrl: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServicesForAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationArn" ],
                members: {
                    AutoScalingConfigurationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServiceArnList" ],
                members: {
                    ServiceArnList: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sj"
                    }
                }
            }
        },
        ListVpcConnectors: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcConnectors" ],
                members: {
                    VpcConnectors: {
                        type: "list",
                        member: {
                            shape: "S2u"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVpcIngressConnections: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            ServiceArn: {},
                            VpcEndpointId: {}
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcIngressConnectionSummaryList" ],
                members: {
                    VpcIngressConnectionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VpcIngressConnectionArn: {},
                                ServiceArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PauseService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Service: {
                        shape: "S2l"
                    },
                    OperationId: {}
                }
            }
        },
        ResumeService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Service: {
                        shape: "S2l"
                    },
                    OperationId: {}
                }
            }
        },
        StartDeployment: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "OperationId" ],
                members: {
                    OperationId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDefaultAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationArn" ],
                members: {
                    AutoScalingConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfiguration" ],
                members: {
                    AutoScalingConfiguration: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {},
                    SourceConfiguration: {
                        shape: "S1f"
                    },
                    InstanceConfiguration: {
                        shape: "S22"
                    },
                    AutoScalingConfigurationArn: {},
                    HealthCheckConfiguration: {
                        shape: "S27"
                    },
                    NetworkConfiguration: {
                        shape: "S2e"
                    },
                    ObservabilityConfiguration: {
                        shape: "S2j"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Service", "OperationId" ],
                members: {
                    Service: {
                        shape: "S2l"
                    },
                    OperationId: {}
                }
            }
        },
        UpdateVpcIngressConnection: {
            input: {
                type: "structure",
                required: [ "VpcIngressConnectionArn", "IngressVpcConfiguration" ],
                members: {
                    VpcIngressConnectionArn: {},
                    IngressVpcConfiguration: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcIngressConnection" ],
                members: {
                    VpcIngressConnection: {
                        shape: "S30"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "DomainName", "EnableWWWSubdomain", "Status" ],
            members: {
                DomainName: {},
                EnableWWWSubdomain: {
                    type: "boolean"
                },
                CertificateValidationRecords: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Type: {},
                            Value: {},
                            Status: {}
                        }
                    }
                },
                Status: {}
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VpcIngressConnectionArn: {},
                    VpcId: {},
                    DomainName: {}
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "structure",
            members: {
                AutoScalingConfigurationArn: {},
                AutoScalingConfigurationName: {},
                AutoScalingConfigurationRevision: {
                    type: "integer"
                },
                Latest: {
                    type: "boolean"
                },
                Status: {},
                MaxConcurrency: {
                    type: "integer"
                },
                MinSize: {
                    type: "integer"
                },
                MaxSize: {
                    type: "integer"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                DeletedAt: {
                    type: "timestamp"
                },
                HasAssociatedService: {
                    type: "boolean"
                },
                IsDefault: {
                    type: "boolean"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                ConnectionName: {},
                ConnectionArn: {},
                ProviderType: {},
                Status: {},
                CreatedAt: {
                    type: "timestamp"
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "Vendor" ],
            members: {
                Vendor: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                ObservabilityConfigurationArn: {},
                ObservabilityConfigurationName: {},
                TraceConfiguration: {
                    shape: "S16"
                },
                ObservabilityConfigurationRevision: {
                    type: "integer"
                },
                Latest: {
                    type: "boolean"
                },
                Status: {},
                CreatedAt: {
                    type: "timestamp"
                },
                DeletedAt: {
                    type: "timestamp"
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                CodeRepository: {
                    type: "structure",
                    required: [ "RepositoryUrl", "SourceCodeVersion" ],
                    members: {
                        RepositoryUrl: {},
                        SourceCodeVersion: {
                            type: "structure",
                            required: [ "Type", "Value" ],
                            members: {
                                Type: {},
                                Value: {}
                            }
                        },
                        CodeConfiguration: {
                            type: "structure",
                            required: [ "ConfigurationSource" ],
                            members: {
                                ConfigurationSource: {},
                                CodeConfigurationValues: {
                                    type: "structure",
                                    required: [ "Runtime" ],
                                    members: {
                                        Runtime: {},
                                        BuildCommand: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        StartCommand: {
                                            shape: "S1o"
                                        },
                                        Port: {},
                                        RuntimeEnvironmentVariables: {
                                            shape: "S1p"
                                        },
                                        RuntimeEnvironmentSecrets: {
                                            shape: "S1s"
                                        }
                                    }
                                }
                            }
                        },
                        SourceDirectory: {}
                    }
                },
                ImageRepository: {
                    type: "structure",
                    required: [ "ImageIdentifier", "ImageRepositoryType" ],
                    members: {
                        ImageIdentifier: {},
                        ImageConfiguration: {
                            type: "structure",
                            members: {
                                RuntimeEnvironmentVariables: {
                                    shape: "S1p"
                                },
                                StartCommand: {
                                    shape: "S1o"
                                },
                                Port: {},
                                RuntimeEnvironmentSecrets: {
                                    shape: "S1s"
                                }
                            }
                        },
                        ImageRepositoryType: {}
                    }
                },
                AutoDeploymentsEnabled: {
                    type: "boolean"
                },
                AuthenticationConfiguration: {
                    type: "structure",
                    members: {
                        ConnectionArn: {},
                        AccessRoleArn: {}
                    }
                }
            }
        },
        S1o: {
            type: "string",
            sensitive: true
        },
        S1p: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "string",
                sensitive: true
            }
        },
        S1s: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "string",
                sensitive: true
            }
        },
        S22: {
            type: "structure",
            members: {
                Cpu: {},
                Memory: {},
                InstanceRoleArn: {}
            }
        },
        S25: {
            type: "structure",
            required: [ "KmsKey" ],
            members: {
                KmsKey: {}
            }
        },
        S27: {
            type: "structure",
            members: {
                Protocol: {},
                Path: {},
                Interval: {
                    type: "integer"
                },
                Timeout: {
                    type: "integer"
                },
                HealthyThreshold: {
                    type: "integer"
                },
                UnhealthyThreshold: {
                    type: "integer"
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                EgressConfiguration: {
                    type: "structure",
                    members: {
                        EgressType: {},
                        VpcConnectorArn: {}
                    }
                },
                IngressConfiguration: {
                    type: "structure",
                    members: {
                        IsPubliclyAccessible: {
                            type: "boolean"
                        }
                    }
                },
                IpAddressType: {}
            }
        },
        S2j: {
            type: "structure",
            required: [ "ObservabilityEnabled" ],
            members: {
                ObservabilityEnabled: {
                    type: "boolean"
                },
                ObservabilityConfigurationArn: {}
            }
        },
        S2l: {
            type: "structure",
            required: [ "ServiceName", "ServiceId", "ServiceArn", "CreatedAt", "UpdatedAt", "Status", "SourceConfiguration", "InstanceConfiguration", "AutoScalingConfigurationSummary", "NetworkConfiguration" ],
            members: {
                ServiceName: {},
                ServiceId: {},
                ServiceArn: {},
                ServiceUrl: {},
                CreatedAt: {
                    type: "timestamp"
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                DeletedAt: {
                    type: "timestamp"
                },
                Status: {},
                SourceConfiguration: {
                    shape: "S1f"
                },
                InstanceConfiguration: {
                    shape: "S22"
                },
                EncryptionConfiguration: {
                    shape: "S25"
                },
                HealthCheckConfiguration: {
                    shape: "S27"
                },
                AutoScalingConfigurationSummary: {
                    shape: "S2o"
                },
                NetworkConfiguration: {
                    shape: "S2e"
                },
                ObservabilityConfiguration: {
                    shape: "S2j"
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                AutoScalingConfigurationArn: {},
                AutoScalingConfigurationName: {},
                AutoScalingConfigurationRevision: {
                    type: "integer"
                },
                Status: {},
                CreatedAt: {
                    type: "timestamp"
                },
                HasAssociatedService: {
                    type: "boolean"
                },
                IsDefault: {
                    type: "boolean"
                }
            }
        },
        S2s: {
            type: "list",
            member: {}
        },
        S2u: {
            type: "structure",
            members: {
                VpcConnectorName: {},
                VpcConnectorArn: {},
                VpcConnectorRevision: {
                    type: "integer"
                },
                Subnets: {
                    shape: "S2s"
                },
                SecurityGroups: {
                    shape: "S2s"
                },
                Status: {},
                CreatedAt: {
                    type: "timestamp"
                },
                DeletedAt: {
                    type: "timestamp"
                }
            }
        },
        S2y: {
            type: "structure",
            members: {
                VpcId: {},
                VpcEndpointId: {}
            }
        },
        S30: {
            type: "structure",
            members: {
                VpcIngressConnectionArn: {},
                VpcIngressConnectionName: {},
                ServiceArn: {},
                Status: {},
                AccountId: {},
                DomainName: {},
                IngressVpcConfiguration: {
                    shape: "S2y"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                DeletedAt: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeCustomDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAutoScalingConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObservabilityConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListOperations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServicesForAutoScalingConfiguration: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVpcConnectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVpcIngressConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["proton"] = {};

AWS.Proton = AWS.Service.defineService("proton", [ "2020-07-20" ]);

AWS.apiLoader.services["proton"]["2020-07-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-20",
        endpointPrefix: "proton",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS Proton",
        serviceId: "Proton",
        signatureVersion: "v4",
        signingName: "proton",
        targetPrefix: "AwsProton20200720",
        uid: "proton-2020-07-20"
    },
    operations: {
        AcceptEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        CancelComponentDeployment: {
            input: {
                type: "structure",
                required: [ "componentName" ],
                members: {
                    componentName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "component" ],
                members: {
                    component: {
                        shape: "Se"
                    }
                }
            }
        },
        CancelEnvironmentDeployment: {
            input: {
                type: "structure",
                required: [ "environmentName" ],
                members: {
                    environmentName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "So"
                    }
                }
            }
        },
        CancelServiceInstanceDeployment: {
            input: {
                type: "structure",
                required: [ "serviceInstanceName", "serviceName" ],
                members: {
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstance" ],
                members: {
                    serviceInstance: {
                        shape: "Sz"
                    }
                }
            }
        },
        CancelServicePipelineDeployment: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pipeline" ],
                members: {
                    pipeline: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateComponent: {
            input: {
                type: "structure",
                required: [ "manifest", "name", "templateFile" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "Si"
                    },
                    environmentName: {},
                    manifest: {
                        type: "string",
                        sensitive: true
                    },
                    name: {},
                    serviceInstanceName: {},
                    serviceName: {},
                    serviceSpec: {
                        shape: "Sl"
                    },
                    tags: {
                        shape: "S17"
                    },
                    templateFile: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "component" ],
                members: {
                    component: {
                        shape: "Se"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironment: {
            input: {
                type: "structure",
                required: [ "name", "spec", "templateMajorVersion", "templateName" ],
                members: {
                    codebuildRoleArn: {},
                    componentRoleArn: {},
                    description: {
                        shape: "Si"
                    },
                    environmentAccountConnectionId: {},
                    name: {},
                    protonServiceRoleArn: {},
                    provisioningRepository: {
                        shape: "S1e"
                    },
                    spec: {
                        shape: "Sl"
                    },
                    tags: {
                        shape: "S17"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "environmentName", "managementAccountId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    codebuildRoleArn: {},
                    componentRoleArn: {},
                    environmentName: {},
                    managementAccountId: {},
                    roleArn: {},
                    tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Si"
                    },
                    displayName: {
                        shape: "S1j"
                    },
                    encryptionKey: {},
                    name: {},
                    provisioning: {},
                    tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplate" ],
                members: {
                    environmentTemplate: {
                        shape: "S1l"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "source", "templateName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "Si"
                    },
                    majorVersion: {},
                    source: {
                        shape: "S1p"
                    },
                    tags: {
                        shape: "S17"
                    },
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplateVersion" ],
                members: {
                    environmentTemplateVersion: {
                        shape: "S1u"
                    }
                }
            },
            idempotent: true
        },
        CreateRepository: {
            input: {
                type: "structure",
                required: [ "connectionArn", "name", "provider" ],
                members: {
                    connectionArn: {},
                    encryptionKey: {},
                    name: {},
                    provider: {},
                    tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "repository" ],
                members: {
                    repository: {
                        shape: "S20"
                    }
                }
            },
            idempotent: true
        },
        CreateService: {
            input: {
                type: "structure",
                required: [ "name", "spec", "templateMajorVersion", "templateName" ],
                members: {
                    branchName: {},
                    description: {
                        shape: "Si"
                    },
                    name: {},
                    repositoryConnectionArn: {},
                    repositoryId: {},
                    spec: {
                        shape: "Sl"
                    },
                    tags: {
                        shape: "S17"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "service" ],
                members: {
                    service: {
                        shape: "S24"
                    }
                }
            },
            idempotent: true
        },
        CreateServiceInstance: {
            input: {
                type: "structure",
                required: [ "name", "serviceName", "spec" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    serviceName: {},
                    spec: {
                        shape: "Sl"
                    },
                    tags: {
                        shape: "S17"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstance" ],
                members: {
                    serviceInstance: {
                        shape: "Sz"
                    }
                }
            },
            idempotent: true
        },
        CreateServiceSyncConfig: {
            input: {
                type: "structure",
                required: [ "branch", "filePath", "repositoryName", "repositoryProvider", "serviceName" ],
                members: {
                    branch: {},
                    filePath: {},
                    repositoryName: {},
                    repositoryProvider: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceSyncConfig: {
                        shape: "S2c"
                    }
                }
            },
            idempotent: true
        },
        CreateServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Si"
                    },
                    displayName: {
                        shape: "S1j"
                    },
                    encryptionKey: {},
                    name: {},
                    pipelineProvisioning: {},
                    tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplate" ],
                members: {
                    serviceTemplate: {
                        shape: "S2f"
                    }
                }
            },
            idempotent: true
        },
        CreateServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "compatibleEnvironmentTemplates", "source", "templateName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    compatibleEnvironmentTemplates: {
                        shape: "S2i"
                    },
                    description: {
                        shape: "Si"
                    },
                    majorVersion: {},
                    source: {
                        shape: "S1p"
                    },
                    supportedComponentSources: {
                        shape: "S2k"
                    },
                    tags: {
                        shape: "S17"
                    },
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplateVersion" ],
                members: {
                    serviceTemplateVersion: {
                        shape: "S2n"
                    }
                }
            },
            idempotent: true
        },
        CreateTemplateSyncConfig: {
            input: {
                type: "structure",
                required: [ "branch", "repositoryName", "repositoryProvider", "templateName", "templateType" ],
                members: {
                    branch: {},
                    repositoryName: {},
                    repositoryProvider: {},
                    subdirectory: {},
                    templateName: {},
                    templateType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    templateSyncConfig: {
                        shape: "S2v"
                    }
                }
            },
            idempotent: true
        },
        DeleteComponent: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    component: {
                        shape: "Se"
                    }
                }
            },
            idempotent: true
        },
        DeleteDeployment: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deployment: {
                        shape: "S30"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironment: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentTemplate: {
                        shape: "S1l"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentTemplateVersion: {
                        shape: "S1u"
                    }
                }
            },
            idempotent: true
        },
        DeleteRepository: {
            input: {
                type: "structure",
                required: [ "name", "provider" ],
                members: {
                    name: {},
                    provider: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S20"
                    }
                }
            },
            idempotent: true
        },
        DeleteService: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    service: {
                        shape: "S24"
                    }
                }
            },
            idempotent: true
        },
        DeleteServiceSyncConfig: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceSyncConfig: {
                        shape: "S2c"
                    }
                }
            },
            idempotent: true
        },
        DeleteServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceTemplate: {
                        shape: "S2f"
                    }
                }
            },
            idempotent: true
        },
        DeleteServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceTemplateVersion: {
                        shape: "S2n"
                    }
                }
            },
            idempotent: true
        },
        DeleteTemplateSyncConfig: {
            input: {
                type: "structure",
                required: [ "templateName", "templateType" ],
                members: {
                    templateName: {},
                    templateType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    templateSyncConfig: {
                        shape: "S2v"
                    }
                }
            },
            idempotent: true
        },
        GetAccountSettings: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    accountSettings: {
                        shape: "S3w"
                    }
                }
            }
        },
        GetComponent: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    component: {
                        shape: "Se"
                    }
                }
            }
        },
        GetDeployment: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    componentName: {},
                    environmentName: {},
                    id: {},
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deployment: {
                        shape: "S30"
                    }
                }
            }
        },
        GetEnvironment: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "So"
                    }
                }
            }
        },
        GetEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            }
        },
        GetEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplate" ],
                members: {
                    environmentTemplate: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplateVersion" ],
                members: {
                    environmentTemplateVersion: {
                        shape: "S1u"
                    }
                }
            }
        },
        GetRepository: {
            input: {
                type: "structure",
                required: [ "name", "provider" ],
                members: {
                    name: {},
                    provider: {}
                }
            },
            output: {
                type: "structure",
                required: [ "repository" ],
                members: {
                    repository: {
                        shape: "S20"
                    }
                }
            }
        },
        GetRepositorySyncStatus: {
            input: {
                type: "structure",
                required: [ "branch", "repositoryName", "repositoryProvider", "syncType" ],
                members: {
                    branch: {},
                    repositoryName: {},
                    repositoryProvider: {},
                    syncType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    latestSync: {
                        type: "structure",
                        required: [ "events", "startedAt", "status" ],
                        members: {
                            events: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "event", "time", "type" ],
                                    members: {
                                        event: {},
                                        externalId: {},
                                        time: {
                                            type: "timestamp"
                                        },
                                        type: {}
                                    }
                                }
                            },
                            startedAt: {
                                type: "timestamp"
                            },
                            status: {}
                        }
                    }
                }
            }
        },
        GetResourcesSummary: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "counts" ],
                members: {
                    counts: {
                        type: "structure",
                        members: {
                            components: {
                                shape: "S4m"
                            },
                            environmentTemplates: {
                                shape: "S4m"
                            },
                            environments: {
                                shape: "S4m"
                            },
                            pipelines: {
                                shape: "S4m"
                            },
                            serviceInstances: {
                                shape: "S4m"
                            },
                            serviceTemplates: {
                                shape: "S4m"
                            },
                            services: {
                                shape: "S4m"
                            }
                        }
                    }
                }
            }
        },
        GetService: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    service: {
                        shape: "S24"
                    }
                }
            }
        },
        GetServiceInstance: {
            input: {
                type: "structure",
                required: [ "name", "serviceName" ],
                members: {
                    name: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstance" ],
                members: {
                    serviceInstance: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetServiceInstanceSyncStatus: {
            input: {
                type: "structure",
                required: [ "serviceInstanceName", "serviceName" ],
                members: {
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    desiredState: {
                        shape: "S4u"
                    },
                    latestSuccessfulSync: {
                        shape: "S4w"
                    },
                    latestSync: {
                        shape: "S4w"
                    }
                }
            }
        },
        GetServiceSyncBlockerSummary: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceSyncBlockerSummary: {
                        type: "structure",
                        required: [ "serviceName" ],
                        members: {
                            latestBlockers: {
                                type: "list",
                                member: {
                                    shape: "S54"
                                }
                            },
                            serviceInstanceName: {},
                            serviceName: {}
                        }
                    }
                }
            }
        },
        GetServiceSyncConfig: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceSyncConfig: {
                        shape: "S2c"
                    }
                }
            }
        },
        GetServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplate" ],
                members: {
                    serviceTemplate: {
                        shape: "S2f"
                    }
                }
            }
        },
        GetServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplateVersion" ],
                members: {
                    serviceTemplateVersion: {
                        shape: "S2n"
                    }
                }
            }
        },
        GetTemplateSyncConfig: {
            input: {
                type: "structure",
                required: [ "templateName", "templateType" ],
                members: {
                    templateName: {},
                    templateType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    templateSyncConfig: {
                        shape: "S2v"
                    }
                }
            }
        },
        GetTemplateSyncStatus: {
            input: {
                type: "structure",
                required: [ "templateName", "templateType", "templateVersion" ],
                members: {
                    templateName: {},
                    templateType: {},
                    templateVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    desiredState: {
                        shape: "S4u"
                    },
                    latestSuccessfulSync: {
                        shape: "S4w"
                    },
                    latestSync: {
                        shape: "S4w"
                    }
                }
            }
        },
        ListComponentOutputs: {
            input: {
                type: "structure",
                required: [ "componentName" ],
                members: {
                    componentName: {},
                    deploymentId: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "outputs" ],
                members: {
                    nextToken: {},
                    outputs: {
                        shape: "S5m"
                    }
                }
            }
        },
        ListComponentProvisionedResources: {
            input: {
                type: "structure",
                required: [ "componentName" ],
                members: {
                    componentName: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "provisionedResources" ],
                members: {
                    nextToken: {},
                    provisionedResources: {
                        shape: "S5s"
                    }
                }
            }
        },
        ListComponents: {
            input: {
                type: "structure",
                members: {
                    environmentName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "components" ],
                members: {
                    components: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "lastModifiedAt", "name" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                deploymentStatusMessage: {
                                    shape: "Sh"
                                },
                                environmentName: {},
                                lastAttemptedDeploymentId: {},
                                lastDeploymentAttemptedAt: {
                                    type: "timestamp"
                                },
                                lastDeploymentSucceededAt: {
                                    type: "timestamp"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                lastSucceededDeploymentId: {},
                                name: {},
                                serviceInstanceName: {},
                                serviceName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDeployments: {
            input: {
                type: "structure",
                members: {
                    componentName: {},
                    environmentName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "deployments" ],
                members: {
                    deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "id", "lastModifiedAt", "targetArn", "targetResourceCreatedAt", "targetResourceType" ],
                            members: {
                                arn: {},
                                completedAt: {
                                    type: "timestamp"
                                },
                                componentName: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                environmentName: {},
                                id: {},
                                lastAttemptedDeploymentId: {},
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                lastSucceededDeploymentId: {},
                                serviceInstanceName: {},
                                serviceName: {},
                                targetArn: {},
                                targetResourceCreatedAt: {
                                    type: "timestamp"
                                },
                                targetResourceType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironmentAccountConnections: {
            input: {
                type: "structure",
                required: [ "requestedBy" ],
                members: {
                    environmentName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    requestedBy: {},
                    statuses: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnections" ],
                members: {
                    environmentAccountConnections: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "environmentAccountId", "environmentName", "id", "lastModifiedAt", "managementAccountId", "requestedAt", "roleArn", "status" ],
                            members: {
                                arn: {},
                                componentRoleArn: {},
                                environmentAccountId: {},
                                environmentName: {},
                                id: {},
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                managementAccountId: {},
                                requestedAt: {
                                    type: "timestamp"
                                },
                                roleArn: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironmentOutputs: {
            input: {
                type: "structure",
                required: [ "environmentName" ],
                members: {
                    deploymentId: {},
                    environmentName: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "outputs" ],
                members: {
                    nextToken: {},
                    outputs: {
                        shape: "S5m"
                    }
                }
            }
        },
        ListEnvironmentProvisionedResources: {
            input: {
                type: "structure",
                required: [ "environmentName" ],
                members: {
                    environmentName: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "provisionedResources" ],
                members: {
                    nextToken: {},
                    provisionedResources: {
                        shape: "S5s"
                    }
                }
            }
        },
        ListEnvironmentTemplateVersions: {
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    majorVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templateVersions" ],
                members: {
                    nextToken: {},
                    templateVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Si"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                majorVersion: {},
                                minorVersion: {},
                                recommendedMinorVersion: {},
                                status: {},
                                statusMessage: {
                                    shape: "Sh"
                                },
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListEnvironmentTemplates: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templates" ],
                members: {
                    nextToken: {},
                    templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Si"
                                },
                                displayName: {
                                    shape: "S1j"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                provisioning: {},
                                recommendedVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListEnvironments: {
            input: {
                type: "structure",
                members: {
                    environmentTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "majorVersion", "templateName" ],
                            members: {
                                majorVersion: {},
                                templateName: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environments" ],
                members: {
                    environments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "deploymentStatus", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "templateMajorVersion", "templateMinorVersion", "templateName" ],
                            members: {
                                arn: {},
                                componentRoleArn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                deploymentStatusMessage: {
                                    shape: "Sh"
                                },
                                description: {
                                    shape: "Si"
                                },
                                environmentAccountConnectionId: {},
                                environmentAccountId: {},
                                lastAttemptedDeploymentId: {},
                                lastDeploymentAttemptedAt: {
                                    type: "timestamp"
                                },
                                lastDeploymentSucceededAt: {
                                    type: "timestamp"
                                },
                                lastSucceededDeploymentId: {},
                                name: {},
                                protonServiceRoleArn: {},
                                provisioning: {},
                                templateMajorVersion: {},
                                templateMinorVersion: {},
                                templateName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositories: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "repositories" ],
                members: {
                    nextToken: {},
                    repositories: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "connectionArn", "name", "provider" ],
                            members: {
                                arn: {},
                                connectionArn: {},
                                name: {},
                                provider: {}
                            }
                        }
                    }
                }
            }
        },
        ListRepositorySyncDefinitions: {
            input: {
                type: "structure",
                required: [ "repositoryName", "repositoryProvider", "syncType" ],
                members: {
                    nextToken: {},
                    repositoryName: {},
                    repositoryProvider: {},
                    syncType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "syncDefinitions" ],
                members: {
                    nextToken: {},
                    syncDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "branch", "directory", "parent", "target" ],
                            members: {
                                branch: {},
                                directory: {},
                                parent: {},
                                target: {}
                            }
                        }
                    }
                }
            }
        },
        ListServiceInstanceOutputs: {
            input: {
                type: "structure",
                required: [ "serviceInstanceName", "serviceName" ],
                members: {
                    deploymentId: {},
                    nextToken: {},
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "outputs" ],
                members: {
                    nextToken: {},
                    outputs: {
                        shape: "S5m"
                    }
                }
            }
        },
        ListServiceInstanceProvisionedResources: {
            input: {
                type: "structure",
                required: [ "serviceInstanceName", "serviceName" ],
                members: {
                    nextToken: {},
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "provisionedResources" ],
                members: {
                    nextToken: {},
                    provisionedResources: {
                        shape: "S5s"
                    }
                }
            }
        },
        ListServiceInstances: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                key: {},
                                value: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    serviceName: {},
                    sortBy: {},
                    sortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstances" ],
                members: {
                    nextToken: {},
                    serviceInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "serviceName", "templateMajorVersion", "templateMinorVersion", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                deploymentStatusMessage: {
                                    shape: "Sh"
                                },
                                environmentName: {},
                                lastAttemptedDeploymentId: {},
                                lastDeploymentAttemptedAt: {
                                    type: "timestamp"
                                },
                                lastDeploymentSucceededAt: {
                                    type: "timestamp"
                                },
                                lastSucceededDeploymentId: {},
                                name: {},
                                serviceName: {},
                                templateMajorVersion: {},
                                templateMinorVersion: {},
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListServicePipelineOutputs: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    deploymentId: {},
                    nextToken: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "outputs" ],
                members: {
                    nextToken: {},
                    outputs: {
                        shape: "S5m"
                    }
                }
            }
        },
        ListServicePipelineProvisionedResources: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    nextToken: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "provisionedResources" ],
                members: {
                    nextToken: {},
                    provisionedResources: {
                        shape: "S5s"
                    }
                }
            }
        },
        ListServiceTemplateVersions: {
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    majorVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templateVersions" ],
                members: {
                    nextToken: {},
                    templateVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Si"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                majorVersion: {},
                                minorVersion: {},
                                recommendedMinorVersion: {},
                                status: {},
                                statusMessage: {
                                    shape: "Sh"
                                },
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListServiceTemplates: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templates" ],
                members: {
                    nextToken: {},
                    templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Si"
                                },
                                displayName: {
                                    shape: "S1j"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                pipelineProvisioning: {},
                                recommendedVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "services" ],
                members: {
                    nextToken: {},
                    services: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "name", "status", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Si"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                status: {},
                                statusMessage: {
                                    shape: "Sh"
                                },
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    nextToken: {},
                    tags: {
                        shape: "S17"
                    }
                }
            }
        },
        NotifyResourceDeploymentStatusChange: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    deploymentId: {},
                    outputs: {
                        type: "list",
                        member: {
                            shape: "S5n"
                        }
                    },
                    resourceArn: {},
                    status: {},
                    statusMessage: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RejectEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAccountSettings: {
            input: {
                type: "structure",
                members: {
                    deletePipelineProvisioningRepository: {
                        type: "boolean"
                    },
                    pipelineCodebuildRoleArn: {},
                    pipelineProvisioningRepository: {
                        shape: "S1e"
                    },
                    pipelineServiceRoleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "accountSettings" ],
                members: {
                    accountSettings: {
                        shape: "S3w"
                    }
                }
            }
        },
        UpdateComponent: {
            input: {
                type: "structure",
                required: [ "deploymentType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    deploymentType: {},
                    description: {
                        shape: "Si"
                    },
                    name: {},
                    serviceInstanceName: {},
                    serviceName: {},
                    serviceSpec: {
                        shape: "Sl"
                    },
                    templateFile: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "component" ],
                members: {
                    component: {
                        shape: "Se"
                    }
                }
            }
        },
        UpdateEnvironment: {
            input: {
                type: "structure",
                required: [ "deploymentType", "name" ],
                members: {
                    codebuildRoleArn: {},
                    componentRoleArn: {},
                    deploymentType: {},
                    description: {
                        shape: "Si"
                    },
                    environmentAccountConnectionId: {},
                    name: {},
                    protonServiceRoleArn: {},
                    provisioningRepository: {
                        shape: "S1e"
                    },
                    spec: {
                        shape: "Sl"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    codebuildRoleArn: {},
                    componentRoleArn: {},
                    id: {},
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        UpdateEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Si"
                    },
                    displayName: {
                        shape: "S1j"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplate" ],
                members: {
                    environmentTemplate: {
                        shape: "S1l"
                    }
                }
            }
        },
        UpdateEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    description: {
                        shape: "Si"
                    },
                    majorVersion: {},
                    minorVersion: {},
                    status: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplateVersion" ],
                members: {
                    environmentTemplateVersion: {
                        shape: "S1u"
                    }
                }
            }
        },
        UpdateService: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Si"
                    },
                    name: {},
                    spec: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "service" ],
                members: {
                    service: {
                        shape: "S24"
                    }
                }
            }
        },
        UpdateServiceInstance: {
            input: {
                type: "structure",
                required: [ "deploymentType", "name", "serviceName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    deploymentType: {},
                    name: {},
                    serviceName: {},
                    spec: {
                        shape: "Sl"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstance" ],
                members: {
                    serviceInstance: {
                        shape: "Sz"
                    }
                }
            }
        },
        UpdateServicePipeline: {
            input: {
                type: "structure",
                required: [ "deploymentType", "serviceName", "spec" ],
                members: {
                    deploymentType: {},
                    serviceName: {},
                    spec: {
                        shape: "Sl"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pipeline" ],
                members: {
                    pipeline: {
                        shape: "S13"
                    }
                }
            }
        },
        UpdateServiceSyncBlocker: {
            input: {
                type: "structure",
                required: [ "id", "resolvedReason" ],
                members: {
                    id: {},
                    resolvedReason: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceName", "serviceSyncBlocker" ],
                members: {
                    serviceInstanceName: {},
                    serviceName: {},
                    serviceSyncBlocker: {
                        shape: "S54"
                    }
                }
            }
        },
        UpdateServiceSyncConfig: {
            input: {
                type: "structure",
                required: [ "branch", "filePath", "repositoryName", "repositoryProvider", "serviceName" ],
                members: {
                    branch: {},
                    filePath: {},
                    repositoryName: {},
                    repositoryProvider: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceSyncConfig: {
                        shape: "S2c"
                    }
                }
            }
        },
        UpdateServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Si"
                    },
                    displayName: {
                        shape: "S1j"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplate" ],
                members: {
                    serviceTemplate: {
                        shape: "S2f"
                    }
                }
            }
        },
        UpdateServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    compatibleEnvironmentTemplates: {
                        shape: "S2i"
                    },
                    description: {
                        shape: "Si"
                    },
                    majorVersion: {},
                    minorVersion: {},
                    status: {},
                    supportedComponentSources: {
                        shape: "S2k"
                    },
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplateVersion" ],
                members: {
                    serviceTemplateVersion: {
                        shape: "S2n"
                    }
                }
            }
        },
        UpdateTemplateSyncConfig: {
            input: {
                type: "structure",
                required: [ "branch", "repositoryName", "repositoryProvider", "templateName", "templateType" ],
                members: {
                    branch: {},
                    repositoryName: {},
                    repositoryProvider: {},
                    subdirectory: {},
                    templateName: {},
                    templateType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    templateSyncConfig: {
                        shape: "S2v"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "arn", "environmentAccountId", "environmentName", "id", "lastModifiedAt", "managementAccountId", "requestedAt", "roleArn", "status" ],
            members: {
                arn: {},
                codebuildRoleArn: {},
                componentRoleArn: {},
                environmentAccountId: {},
                environmentName: {},
                id: {},
                lastModifiedAt: {
                    type: "timestamp"
                },
                managementAccountId: {},
                requestedAt: {
                    type: "timestamp"
                },
                roleArn: {},
                status: {}
            }
        },
        Se: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "lastModifiedAt", "name" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sh"
                },
                description: {
                    shape: "Si"
                },
                environmentName: {},
                lastAttemptedDeploymentId: {},
                lastClientRequestToken: {},
                lastDeploymentAttemptedAt: {
                    type: "timestamp"
                },
                lastDeploymentSucceededAt: {
                    type: "timestamp"
                },
                lastModifiedAt: {
                    type: "timestamp"
                },
                lastSucceededDeploymentId: {},
                name: {},
                serviceInstanceName: {},
                serviceName: {},
                serviceSpec: {
                    shape: "Sl"
                }
            }
        },
        Sh: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "templateMajorVersion", "templateMinorVersion", "templateName" ],
            members: {
                arn: {},
                codebuildRoleArn: {},
                componentRoleArn: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sh"
                },
                description: {
                    shape: "Si"
                },
                environmentAccountConnectionId: {},
                environmentAccountId: {},
                lastAttemptedDeploymentId: {},
                lastDeploymentAttemptedAt: {
                    type: "timestamp"
                },
                lastDeploymentSucceededAt: {
                    type: "timestamp"
                },
                lastSucceededDeploymentId: {},
                name: {},
                protonServiceRoleArn: {},
                provisioning: {},
                provisioningRepository: {
                    shape: "Sr"
                },
                spec: {
                    shape: "Sl"
                },
                templateMajorVersion: {},
                templateMinorVersion: {},
                templateName: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "arn", "branch", "name", "provider" ],
            members: {
                arn: {},
                branch: {},
                name: {},
                provider: {}
            }
        },
        Sz: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "serviceName", "templateMajorVersion", "templateMinorVersion", "templateName" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sh"
                },
                environmentName: {},
                lastAttemptedDeploymentId: {},
                lastClientRequestToken: {},
                lastDeploymentAttemptedAt: {
                    type: "timestamp"
                },
                lastDeploymentSucceededAt: {
                    type: "timestamp"
                },
                lastSucceededDeploymentId: {},
                name: {},
                serviceName: {},
                spec: {
                    shape: "Sl"
                },
                templateMajorVersion: {},
                templateMinorVersion: {},
                templateName: {}
            }
        },
        S13: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "templateMajorVersion", "templateMinorVersion", "templateName" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sh"
                },
                lastAttemptedDeploymentId: {},
                lastDeploymentAttemptedAt: {
                    type: "timestamp"
                },
                lastDeploymentSucceededAt: {
                    type: "timestamp"
                },
                lastSucceededDeploymentId: {},
                spec: {
                    shape: "Sl"
                },
                templateMajorVersion: {},
                templateMinorVersion: {},
                templateName: {}
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S1b: {
            type: "string",
            sensitive: true
        },
        S1e: {
            type: "structure",
            required: [ "branch", "name", "provider" ],
            members: {
                branch: {},
                name: {},
                provider: {}
            }
        },
        S1j: {
            type: "string",
            sensitive: true
        },
        S1l: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Si"
                },
                displayName: {
                    shape: "S1j"
                },
                encryptionKey: {},
                lastModifiedAt: {
                    type: "timestamp"
                },
                name: {},
                provisioning: {},
                recommendedVersion: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    required: [ "bucket", "key" ],
                    members: {
                        bucket: {},
                        key: {}
                    }
                }
            },
            union: true
        },
        S1u: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Si"
                },
                lastModifiedAt: {
                    type: "timestamp"
                },
                majorVersion: {},
                minorVersion: {},
                recommendedMinorVersion: {},
                schema: {
                    shape: "S1w"
                },
                status: {},
                statusMessage: {
                    shape: "Sh"
                },
                templateName: {}
            }
        },
        S1w: {
            type: "string",
            sensitive: true
        },
        S20: {
            type: "structure",
            required: [ "arn", "connectionArn", "name", "provider" ],
            members: {
                arn: {},
                connectionArn: {},
                encryptionKey: {},
                name: {},
                provider: {}
            }
        },
        S24: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "name", "spec", "status", "templateName" ],
            members: {
                arn: {},
                branchName: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Si"
                },
                lastModifiedAt: {
                    type: "timestamp"
                },
                name: {},
                pipeline: {
                    shape: "S13"
                },
                repositoryConnectionArn: {},
                repositoryId: {},
                spec: {
                    shape: "Sl"
                },
                status: {},
                statusMessage: {
                    shape: "Sh"
                },
                templateName: {}
            }
        },
        S2c: {
            type: "structure",
            required: [ "branch", "filePath", "repositoryName", "repositoryProvider", "serviceName" ],
            members: {
                branch: {},
                filePath: {},
                repositoryName: {},
                repositoryProvider: {},
                serviceName: {}
            }
        },
        S2f: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Si"
                },
                displayName: {
                    shape: "S1j"
                },
                encryptionKey: {},
                lastModifiedAt: {
                    type: "timestamp"
                },
                name: {},
                pipelineProvisioning: {},
                recommendedVersion: {}
            }
        },
        S2i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "majorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    templateName: {}
                }
            }
        },
        S2k: {
            type: "list",
            member: {}
        },
        S2n: {
            type: "structure",
            required: [ "arn", "compatibleEnvironmentTemplates", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
            members: {
                arn: {},
                compatibleEnvironmentTemplates: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "majorVersion", "templateName" ],
                        members: {
                            majorVersion: {},
                            templateName: {}
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Si"
                },
                lastModifiedAt: {
                    type: "timestamp"
                },
                majorVersion: {},
                minorVersion: {},
                recommendedMinorVersion: {},
                schema: {
                    shape: "S1w"
                },
                status: {},
                statusMessage: {
                    shape: "Sh"
                },
                supportedComponentSources: {
                    shape: "S2k"
                },
                templateName: {}
            }
        },
        S2v: {
            type: "structure",
            required: [ "branch", "repositoryName", "repositoryProvider", "templateName", "templateType" ],
            members: {
                branch: {},
                repositoryName: {},
                repositoryProvider: {},
                subdirectory: {},
                templateName: {},
                templateType: {}
            }
        },
        S30: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "id", "lastModifiedAt", "targetArn", "targetResourceCreatedAt", "targetResourceType" ],
            members: {
                arn: {},
                completedAt: {
                    type: "timestamp"
                },
                componentName: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sh"
                },
                environmentName: {},
                id: {},
                initialState: {
                    shape: "S32"
                },
                lastAttemptedDeploymentId: {},
                lastModifiedAt: {
                    type: "timestamp"
                },
                lastSucceededDeploymentId: {},
                serviceInstanceName: {},
                serviceName: {},
                targetArn: {},
                targetResourceCreatedAt: {
                    type: "timestamp"
                },
                targetResourceType: {},
                targetState: {
                    shape: "S32"
                }
            }
        },
        S32: {
            type: "structure",
            members: {
                component: {
                    type: "structure",
                    members: {
                        serviceInstanceName: {},
                        serviceName: {},
                        serviceSpec: {
                            shape: "Sl"
                        },
                        templateFile: {
                            shape: "S1b"
                        }
                    }
                },
                environment: {
                    type: "structure",
                    required: [ "templateMajorVersion", "templateMinorVersion", "templateName" ],
                    members: {
                        spec: {
                            shape: "Sl"
                        },
                        templateMajorVersion: {},
                        templateMinorVersion: {},
                        templateName: {}
                    }
                },
                serviceInstance: {
                    type: "structure",
                    required: [ "spec", "templateMajorVersion", "templateMinorVersion", "templateName" ],
                    members: {
                        lastSuccessfulComponentDeploymentIds: {
                            type: "list",
                            member: {}
                        },
                        lastSuccessfulEnvironmentDeploymentId: {},
                        lastSuccessfulServicePipelineDeploymentId: {},
                        spec: {
                            shape: "Sl"
                        },
                        templateMajorVersion: {},
                        templateMinorVersion: {},
                        templateName: {}
                    }
                },
                servicePipeline: {
                    type: "structure",
                    required: [ "templateMajorVersion", "templateMinorVersion", "templateName" ],
                    members: {
                        spec: {
                            shape: "Sl"
                        },
                        templateMajorVersion: {},
                        templateMinorVersion: {},
                        templateName: {}
                    }
                }
            },
            union: true
        },
        S3w: {
            type: "structure",
            members: {
                pipelineCodebuildRoleArn: {},
                pipelineProvisioningRepository: {
                    shape: "Sr"
                },
                pipelineServiceRoleArn: {}
            }
        },
        S4m: {
            type: "structure",
            required: [ "total" ],
            members: {
                behindMajor: {
                    type: "integer"
                },
                behindMinor: {
                    type: "integer"
                },
                failed: {
                    type: "integer"
                },
                total: {
                    type: "integer"
                },
                upToDate: {
                    type: "integer"
                }
            }
        },
        S4u: {
            type: "structure",
            required: [ "branch", "directory", "repositoryName", "repositoryProvider", "sha" ],
            members: {
                branch: {},
                directory: {},
                repositoryName: {},
                repositoryProvider: {},
                sha: {}
            }
        },
        S4w: {
            type: "structure",
            required: [ "events", "initialRevision", "startedAt", "status", "target", "targetRevision" ],
            members: {
                events: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "event", "time", "type" ],
                        members: {
                            event: {},
                            externalId: {},
                            time: {
                                type: "timestamp"
                            },
                            type: {}
                        }
                    }
                },
                initialRevision: {
                    shape: "S4u"
                },
                startedAt: {
                    type: "timestamp"
                },
                status: {},
                target: {},
                targetRevision: {
                    shape: "S4u"
                }
            }
        },
        S54: {
            type: "structure",
            required: [ "createdAt", "createdReason", "id", "status", "type" ],
            members: {
                contexts: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "key", "value" ],
                        members: {
                            key: {},
                            value: {}
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                },
                createdReason: {},
                id: {},
                resolvedAt: {
                    type: "timestamp"
                },
                resolvedReason: {},
                status: {},
                type: {}
            }
        },
        S5m: {
            type: "list",
            member: {
                shape: "S5n"
            }
        },
        S5n: {
            type: "structure",
            members: {
                key: {},
                valueString: {}
            },
            sensitive: true
        },
        S5s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    identifier: {},
                    name: {},
                    provisioningEngine: {}
                }
            }
        }
    },
    paginators: {
        ListComponentOutputs: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "outputs"
        },
        ListComponentProvisionedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "provisionedResources"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "components"
        },
        ListDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deployments"
        },
        ListEnvironmentAccountConnections: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environmentAccountConnections"
        },
        ListEnvironmentOutputs: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "outputs"
        },
        ListEnvironmentProvisionedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "provisionedResources"
        },
        ListEnvironmentTemplateVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateVersions"
        },
        ListEnvironmentTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templates"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environments"
        },
        ListRepositories: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "repositories"
        },
        ListRepositorySyncDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "syncDefinitions"
        },
        ListServiceInstanceOutputs: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "outputs"
        },
        ListServiceInstanceProvisionedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "provisionedResources"
        },
        ListServiceInstances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "serviceInstances"
        },
        ListServicePipelineOutputs: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "outputs"
        },
        ListServicePipelineProvisionedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "provisionedResources"
        },
        ListServiceTemplateVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateVersions"
        },
        ListServiceTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templates"
        },
        ListServices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "services"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tags"
        }
    },
    waiters: {
        ComponentDeleted: {
            description: "Wait until a Component is deleted. Use this after invoking DeleteComponent",
            delay: 5,
            maxAttempts: 999,
            operation: "GetComponent",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "component.deploymentStatus",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        ComponentDeployed: {
            description: "Wait until a Component is deployed. Use this after invoking CreateComponent or UpdateComponent",
            delay: 5,
            maxAttempts: 999,
            operation: "GetComponent",
            acceptors: [ {
                matcher: "path",
                argument: "component.deploymentStatus",
                state: "success",
                expected: "SUCCEEDED"
            }, {
                matcher: "path",
                argument: "component.deploymentStatus",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        EnvironmentDeployed: {
            description: "Wait until an Environment is deployed. Use this after invoking CreateEnvironment or UpdateEnvironment",
            delay: 5,
            maxAttempts: 999,
            operation: "GetEnvironment",
            acceptors: [ {
                matcher: "path",
                argument: "environment.deploymentStatus",
                state: "success",
                expected: "SUCCEEDED"
            }, {
                matcher: "path",
                argument: "environment.deploymentStatus",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        EnvironmentTemplateVersionRegistered: {
            description: "Wait until an EnvironmentTemplateVersion is registered. Use this after invoking CreateEnvironmentTemplateVersion",
            delay: 2,
            maxAttempts: 150,
            operation: "GetEnvironmentTemplateVersion",
            acceptors: [ {
                matcher: "path",
                argument: "environmentTemplateVersion.status",
                state: "success",
                expected: "DRAFT"
            }, {
                matcher: "path",
                argument: "environmentTemplateVersion.status",
                state: "success",
                expected: "PUBLISHED"
            }, {
                matcher: "path",
                argument: "environmentTemplateVersion.status",
                state: "failure",
                expected: "REGISTRATION_FAILED"
            } ]
        },
        ServiceCreated: {
            description: "Wait until an Service has deployed its instances and possibly pipeline. Use this after invoking CreateService",
            delay: 5,
            maxAttempts: 999,
            operation: "GetService",
            acceptors: [ {
                matcher: "path",
                argument: "service.status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "CREATE_FAILED_CLEANUP_COMPLETE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "CREATE_FAILED_CLEANUP_FAILED"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "CREATE_FAILED"
            } ]
        },
        ServiceDeleted: {
            description: "Wait until a Service, its instances, and possibly pipeline have been deleted after DeleteService is invoked",
            delay: 5,
            maxAttempts: 999,
            operation: "GetService",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        ServiceInstanceDeployed: {
            description: "Wait until a ServiceInstance is deployed. Use this after invoking CreateService or UpdateServiceInstance",
            delay: 5,
            maxAttempts: 999,
            operation: "GetServiceInstance",
            acceptors: [ {
                matcher: "path",
                argument: "serviceInstance.deploymentStatus",
                state: "success",
                expected: "SUCCEEDED"
            }, {
                matcher: "path",
                argument: "serviceInstance.deploymentStatus",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        ServicePipelineDeployed: {
            description: "Wait until an ServicePipeline is deployed. Use this after invoking CreateService or UpdateServicePipeline",
            delay: 10,
            maxAttempts: 360,
            operation: "GetService",
            acceptors: [ {
                matcher: "path",
                argument: "service.pipeline.deploymentStatus",
                state: "success",
                expected: "SUCCEEDED"
            }, {
                matcher: "path",
                argument: "service.pipeline.deploymentStatus",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        ServiceTemplateVersionRegistered: {
            description: "Wait until a ServiceTemplateVersion is registered. Use this after invoking CreateServiceTemplateVersion",
            delay: 2,
            maxAttempts: 150,
            operation: "GetServiceTemplateVersion",
            acceptors: [ {
                matcher: "path",
                argument: "serviceTemplateVersion.status",
                state: "success",
                expected: "DRAFT"
            }, {
                matcher: "path",
                argument: "serviceTemplateVersion.status",
                state: "success",
                expected: "PUBLISHED"
            }, {
                matcher: "path",
                argument: "serviceTemplateVersion.status",
                state: "failure",
                expected: "REGISTRATION_FAILED"
            } ]
        },
        ServiceUpdated: {
            description: "Wait until a Service, its instances, and possibly pipeline have been deployed after UpdateService is invoked",
            delay: 5,
            maxAttempts: 999,
            operation: "GetService",
            acceptors: [ {
                matcher: "path",
                argument: "service.status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_FAILED_CLEANUP_COMPLETE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_FAILED_CLEANUP_FAILED"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_FAILED"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_COMPLETE_CLEANUP_FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["route53recoverycluster"] = {};

AWS.Route53RecoveryCluster = AWS.Service.defineService("route53recoverycluster", [ "2019-12-02" ]);

AWS.apiLoader.services["route53recoverycluster"]["2019-12-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "route53-recovery-cluster",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Route53 Recovery Cluster",
        serviceId: "Route53 Recovery Cluster",
        signatureVersion: "v4",
        signingName: "route53-recovery-cluster",
        targetPrefix: "ToggleCustomerAPI",
        uid: "route53-recovery-cluster-2019-12-02"
    },
    operations: {
        GetRoutingControlState: {
            input: {
                type: "structure",
                required: [ "RoutingControlArn" ],
                members: {
                    RoutingControlArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RoutingControlArn", "RoutingControlState" ],
                members: {
                    RoutingControlArn: {},
                    RoutingControlState: {},
                    RoutingControlName: {}
                }
            }
        },
        ListRoutingControls: {
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RoutingControls" ],
                members: {
                    RoutingControls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ControlPanelArn: {},
                                ControlPanelName: {},
                                RoutingControlArn: {},
                                RoutingControlName: {},
                                RoutingControlState: {},
                                Owner: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        UpdateRoutingControlState: {
            input: {
                type: "structure",
                required: [ "RoutingControlArn", "RoutingControlState" ],
                members: {
                    RoutingControlArn: {},
                    RoutingControlState: {},
                    SafetyRulesToOverride: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRoutingControlStates: {
            input: {
                type: "structure",
                required: [ "UpdateRoutingControlStateEntries" ],
                members: {
                    UpdateRoutingControlStateEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RoutingControlArn", "RoutingControlState" ],
                            members: {
                                RoutingControlArn: {},
                                RoutingControlState: {}
                            }
                        }
                    },
                    SafetyRulesToOverride: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sf: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListRoutingControls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RoutingControls"
        }
    }
};

AWS.apiLoader.services["route53recoverycontrolconfig"] = {};

AWS.Route53RecoveryControlConfig = AWS.Service.defineService("route53recoverycontrolconfig", [ "2020-11-02" ]);

AWS.apiLoader.services["route53recoverycontrolconfig"]["2020-11-02"] = {
    metadata: {
        apiVersion: "2020-11-02",
        endpointPrefix: "route53-recovery-control-config",
        signingName: "route53-recovery-control-config",
        serviceFullName: "AWS Route53 Recovery Control Config",
        serviceId: "Route53 Recovery Control Config",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "route53-recovery-control-config-2020-11-02",
        signatureVersion: "v4"
    },
    operations: {
        CreateCluster: {
            http: {
                requestUri: "/cluster",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterName: {},
                    Tags: {
                        shape: "S3"
                    }
                },
                required: [ "ClusterName" ]
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateControlPanel: {
            http: {
                requestUri: "/controlpanel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterArn: {},
                    ControlPanelName: {},
                    Tags: {
                        shape: "S3"
                    }
                },
                required: [ "ClusterArn", "ControlPanelName" ]
            },
            output: {
                type: "structure",
                members: {
                    ControlPanel: {
                        shape: "Sh"
                    }
                }
            }
        },
        CreateRoutingControl: {
            http: {
                requestUri: "/routingcontrol",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterArn: {},
                    ControlPanelArn: {},
                    RoutingControlName: {}
                },
                required: [ "ClusterArn", "RoutingControlName" ]
            },
            output: {
                type: "structure",
                members: {
                    RoutingControl: {
                        shape: "Sm"
                    }
                }
            }
        },
        CreateSafetyRule: {
            http: {
                requestUri: "/safetyrule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AssertionRule: {
                        type: "structure",
                        members: {
                            AssertedControls: {
                                shape: "Sp"
                            },
                            ControlPanelArn: {},
                            Name: {},
                            RuleConfig: {
                                shape: "Sq"
                            },
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "ControlPanelArn", "AssertedControls", "RuleConfig", "WaitPeriodMs", "Name" ]
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    GatingRule: {
                        type: "structure",
                        members: {
                            ControlPanelArn: {},
                            GatingControls: {
                                shape: "Sp"
                            },
                            Name: {},
                            RuleConfig: {
                                shape: "Sq"
                            },
                            TargetControls: {
                                shape: "Sp"
                            },
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "TargetControls", "ControlPanelArn", "GatingControls", "RuleConfig", "WaitPeriodMs", "Name" ]
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssertionRule: {
                        shape: "Su"
                    },
                    GatingRule: {
                        shape: "Sv"
                    }
                }
            }
        },
        DeleteCluster: {
            http: {
                method: "DELETE",
                requestUri: "/cluster/{ClusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "ClusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteControlPanel: {
            http: {
                method: "DELETE",
                requestUri: "/controlpanel/{ControlPanelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRoutingControl: {
            http: {
                method: "DELETE",
                requestUri: "/routingcontrol/{RoutingControlArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoutingControlArn: {
                        location: "uri",
                        locationName: "RoutingControlArn"
                    }
                },
                required: [ "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSafetyRule: {
            http: {
                method: "DELETE",
                requestUri: "/safetyrule/{SafetyRuleArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SafetyRuleArn: {
                        location: "uri",
                        locationName: "SafetyRuleArn"
                    }
                },
                required: [ "SafetyRuleArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeCluster: {
            http: {
                method: "GET",
                requestUri: "/cluster/{ClusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "ClusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        DescribeControlPanel: {
            http: {
                method: "GET",
                requestUri: "/controlpanel/{ControlPanelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ControlPanel: {
                        shape: "Sh"
                    }
                }
            }
        },
        DescribeRoutingControl: {
            http: {
                method: "GET",
                requestUri: "/routingcontrol/{RoutingControlArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoutingControlArn: {
                        location: "uri",
                        locationName: "RoutingControlArn"
                    }
                },
                required: [ "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {
                    RoutingControl: {
                        shape: "Sm"
                    }
                }
            }
        },
        DescribeSafetyRule: {
            http: {
                method: "GET",
                requestUri: "/safetyrule/{SafetyRuleArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SafetyRuleArn: {
                        location: "uri",
                        locationName: "SafetyRuleArn"
                    }
                },
                required: [ "SafetyRuleArn" ]
            },
            output: {
                type: "structure",
                members: {
                    AssertionRule: {
                        shape: "Su"
                    },
                    GatingRule: {
                        shape: "Sv"
                    }
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/resourcePolicy/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        ListAssociatedRoute53HealthChecks: {
            http: {
                method: "GET",
                requestUri: "/routingcontrol/{RoutingControlArn}/associatedRoute53HealthChecks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    RoutingControlArn: {
                        location: "uri",
                        locationName: "RoutingControlArn"
                    }
                },
                required: [ "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {
                    HealthCheckIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListClusters: {
            http: {
                method: "GET",
                requestUri: "/cluster",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Clusters: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListControlPanels: {
            http: {
                method: "GET",
                requestUri: "/controlpanels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "querystring",
                        locationName: "ClusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ControlPanels: {
                        type: "list",
                        member: {
                            shape: "Sh"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRoutingControls: {
            http: {
                method: "GET",
                requestUri: "/controlpanel/{ControlPanelArn}/routingcontrols",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RoutingControls: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            }
        },
        ListSafetyRules: {
            http: {
                method: "GET",
                requestUri: "/controlpanel/{ControlPanelArn}/safetyrules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SafetyRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ASSERTION: {
                                    shape: "Su"
                                },
                                GATING: {
                                    shape: "Sv"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S3"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                },
                required: [ "ResourceArn", "TagKeys" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateControlPanel: {
            http: {
                method: "PUT",
                requestUri: "/controlpanel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {},
                    ControlPanelName: {}
                },
                required: [ "ControlPanelArn", "ControlPanelName" ]
            },
            output: {
                type: "structure",
                members: {
                    ControlPanel: {
                        shape: "Sh"
                    }
                }
            }
        },
        UpdateRoutingControl: {
            http: {
                method: "PUT",
                requestUri: "/routingcontrol",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoutingControlArn: {},
                    RoutingControlName: {}
                },
                required: [ "RoutingControlName", "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {
                    RoutingControl: {
                        shape: "Sm"
                    }
                }
            }
        },
        UpdateSafetyRule: {
            http: {
                method: "PUT",
                requestUri: "/safetyrule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AssertionRuleUpdate: {
                        type: "structure",
                        members: {
                            Name: {},
                            SafetyRuleArn: {},
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "SafetyRuleArn", "WaitPeriodMs", "Name" ]
                    },
                    GatingRuleUpdate: {
                        type: "structure",
                        members: {
                            Name: {},
                            SafetyRuleArn: {},
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "SafetyRuleArn", "WaitPeriodMs", "Name" ]
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssertionRule: {
                        shape: "Su"
                    },
                    GatingRule: {
                        shape: "Sv"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "map",
            key: {},
            value: {}
        },
        S7: {
            type: "structure",
            members: {
                ClusterArn: {},
                ClusterEndpoints: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Endpoint: {},
                            Region: {}
                        }
                    }
                },
                Name: {},
                Status: {},
                Owner: {}
            }
        },
        Sh: {
            type: "structure",
            members: {
                ClusterArn: {},
                ControlPanelArn: {},
                DefaultControlPanel: {
                    type: "boolean"
                },
                Name: {},
                RoutingControlCount: {
                    type: "integer"
                },
                Status: {},
                Owner: {}
            }
        },
        Sm: {
            type: "structure",
            members: {
                ControlPanelArn: {},
                Name: {},
                RoutingControlArn: {},
                Status: {},
                Owner: {}
            }
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "structure",
            members: {
                Inverted: {
                    type: "boolean"
                },
                Threshold: {
                    type: "integer"
                },
                Type: {}
            },
            required: [ "Type", "Inverted", "Threshold" ]
        },
        Su: {
            type: "structure",
            members: {
                AssertedControls: {
                    shape: "Sp"
                },
                ControlPanelArn: {},
                Name: {},
                RuleConfig: {
                    shape: "Sq"
                },
                SafetyRuleArn: {},
                Status: {},
                WaitPeriodMs: {
                    type: "integer"
                },
                Owner: {}
            },
            required: [ "Status", "ControlPanelArn", "SafetyRuleArn", "AssertedControls", "RuleConfig", "WaitPeriodMs", "Name" ]
        },
        Sv: {
            type: "structure",
            members: {
                ControlPanelArn: {},
                GatingControls: {
                    shape: "Sp"
                },
                Name: {},
                RuleConfig: {
                    shape: "Sq"
                },
                SafetyRuleArn: {},
                Status: {},
                TargetControls: {
                    shape: "Sp"
                },
                WaitPeriodMs: {
                    type: "integer"
                },
                Owner: {}
            },
            required: [ "Status", "TargetControls", "ControlPanelArn", "SafetyRuleArn", "GatingControls", "RuleConfig", "WaitPeriodMs", "Name" ]
        }
    },
    paginators: {
        ListAssociatedRoute53HealthChecks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HealthCheckIds"
        },
        ListClusters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Clusters"
        },
        ListControlPanels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ControlPanels"
        },
        ListRoutingControls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RoutingControls"
        },
        ListSafetyRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SafetyRules"
        }
    },
    waiters: {
        ClusterCreated: {
            description: "Wait until a cluster is created",
            operation: "DescribeCluster",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Cluster.Status",
                expected: "DEPLOYED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Cluster.Status",
                expected: "PENDING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ClusterDeleted: {
            description: "Wait for a cluster to be deleted",
            operation: "DescribeCluster",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "Cluster.Status",
                expected: "PENDING_DELETION"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ControlPanelCreated: {
            description: "Wait until a control panel is created",
            operation: "DescribeControlPanel",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "ControlPanel.Status",
                expected: "DEPLOYED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "ControlPanel.Status",
                expected: "PENDING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ControlPanelDeleted: {
            description: "Wait until a control panel is deleted",
            operation: "DescribeControlPanel",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "ControlPanel.Status",
                expected: "PENDING_DELETION"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        RoutingControlCreated: {
            description: "Wait until a routing control is created",
            operation: "DescribeRoutingControl",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "RoutingControl.Status",
                expected: "DEPLOYED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "RoutingControl.Status",
                expected: "PENDING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        RoutingControlDeleted: {
            description: "Wait for a routing control to be deleted",
            operation: "DescribeRoutingControl",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "RoutingControl.Status",
                expected: "PENDING_DELETION"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        }
    }
};

AWS.apiLoader.services["route53recoveryreadiness"] = {};

AWS.Route53RecoveryReadiness = AWS.Service.defineService("route53recoveryreadiness", [ "2019-12-02" ]);

AWS.apiLoader.services["route53recoveryreadiness"]["2019-12-02"] = {
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "route53-recovery-readiness",
        signingName: "route53-recovery-readiness",
        serviceFullName: "AWS Route53 Recovery Readiness",
        serviceId: "Route53 Recovery Readiness",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "route53-recovery-readiness-2019-12-02",
        signatureVersion: "v4"
    },
    operations: {
        CreateCell: {
            http: {
                requestUri: "/cells",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "CellName" ]
            },
            output: {
                type: "structure",
                members: {
                    CellArn: {
                        locationName: "cellArn"
                    },
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    ParentReadinessScopes: {
                        shape: "S3",
                        locationName: "parentReadinessScopes"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateCrossAccountAuthorization: {
            http: {
                requestUri: "/crossaccountauthorizations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CrossAccountAuthorization: {
                        locationName: "crossAccountAuthorization"
                    }
                },
                required: [ "CrossAccountAuthorization" ]
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAuthorization: {
                        locationName: "crossAccountAuthorization"
                    }
                }
            }
        },
        CreateReadinessCheck: {
            http: {
                requestUri: "/readinesschecks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceSetName", "ReadinessCheckName" ]
            },
            output: {
                type: "structure",
                members: {
                    ReadinessCheckArn: {
                        locationName: "readinessCheckArn"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSet: {
                        locationName: "resourceSet"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateRecoveryGroup: {
            http: {
                requestUri: "/recoverygroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupArn: {
                        locationName: "recoveryGroupArn"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateResourceSet: {
            http: {
                requestUri: "/resourcesets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceSetType", "ResourceSetName", "Resources" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceSetArn: {
                        locationName: "resourceSetArn"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        DeleteCell: {
            http: {
                method: "DELETE",
                requestUri: "/cells/{cellName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    }
                },
                required: [ "CellName" ]
            }
        },
        DeleteCrossAccountAuthorization: {
            http: {
                method: "DELETE",
                requestUri: "/crossaccountauthorizations/{crossAccountAuthorization}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CrossAccountAuthorization: {
                        location: "uri",
                        locationName: "crossAccountAuthorization"
                    }
                },
                required: [ "CrossAccountAuthorization" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteReadinessCheck: {
            http: {
                method: "DELETE",
                requestUri: "/readinesschecks/{readinessCheckName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    }
                },
                required: [ "ReadinessCheckName" ]
            }
        },
        DeleteRecoveryGroup: {
            http: {
                method: "DELETE",
                requestUri: "/recoverygroups/{recoveryGroupName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            }
        },
        DeleteResourceSet: {
            http: {
                method: "DELETE",
                requestUri: "/resourcesets/{resourceSetName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        location: "uri",
                        locationName: "resourceSetName"
                    }
                },
                required: [ "ResourceSetName" ]
            }
        },
        GetArchitectureRecommendations: {
            http: {
                method: "GET",
                requestUri: "/recoverygroups/{recoveryGroupName}/architectureRecommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    LastAuditTimestamp: {
                        locationName: "lastAuditTimestamp",
                        type: "timestamp",
                        timestampFormat: "iso8601"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Recommendations: {
                        locationName: "recommendations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecommendationText: {
                                    locationName: "recommendationText"
                                }
                            },
                            required: [ "RecommendationText" ]
                        }
                    }
                }
            }
        },
        GetCell: {
            http: {
                method: "GET",
                requestUri: "/cells/{cellName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    }
                },
                required: [ "CellName" ]
            },
            output: {
                type: "structure",
                members: {
                    CellArn: {
                        locationName: "cellArn"
                    },
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    ParentReadinessScopes: {
                        shape: "S3",
                        locationName: "parentReadinessScopes"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        GetCellReadinessSummary: {
            http: {
                method: "GET",
                requestUri: "/cellreadiness/{cellName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "CellName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    ReadinessChecks: {
                        shape: "S15",
                        locationName: "readinessChecks"
                    }
                }
            }
        },
        GetReadinessCheck: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks/{readinessCheckName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    }
                },
                required: [ "ReadinessCheckName" ]
            },
            output: {
                type: "structure",
                members: {
                    ReadinessCheckArn: {
                        locationName: "readinessCheckArn"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSet: {
                        locationName: "resourceSet"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        GetReadinessCheckResourceStatus: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks/{readinessCheckName}/resource/{resourceIdentifier}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    },
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                },
                required: [ "ReadinessCheckName", "ResourceIdentifier" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    Rules: {
                        locationName: "rules",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LastCheckedTimestamp: {
                                    shape: "S1d",
                                    locationName: "lastCheckedTimestamp"
                                },
                                Messages: {
                                    shape: "S1e",
                                    locationName: "messages"
                                },
                                Readiness: {
                                    locationName: "readiness"
                                },
                                RuleId: {
                                    locationName: "ruleId"
                                }
                            },
                            required: [ "Messages", "Readiness", "RuleId", "LastCheckedTimestamp" ]
                        }
                    }
                }
            }
        },
        GetReadinessCheckStatus: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks/{readinessCheckName}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    }
                },
                required: [ "ReadinessCheckName" ]
            },
            output: {
                type: "structure",
                members: {
                    Messages: {
                        shape: "S1e",
                        locationName: "messages"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    Resources: {
                        locationName: "resources",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ComponentId: {
                                    locationName: "componentId"
                                },
                                LastCheckedTimestamp: {
                                    shape: "S1d",
                                    locationName: "lastCheckedTimestamp"
                                },
                                Readiness: {
                                    locationName: "readiness"
                                },
                                ResourceArn: {
                                    locationName: "resourceArn"
                                }
                            },
                            required: [ "Readiness", "LastCheckedTimestamp" ]
                        }
                    }
                }
            }
        },
        GetRecoveryGroup: {
            http: {
                method: "GET",
                requestUri: "/recoverygroups/{recoveryGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupArn: {
                        locationName: "recoveryGroupArn"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        GetRecoveryGroupReadinessSummary: {
            http: {
                method: "GET",
                requestUri: "/recoverygroupreadiness/{recoveryGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    ReadinessChecks: {
                        shape: "S15",
                        locationName: "readinessChecks"
                    }
                }
            }
        },
        GetResourceSet: {
            http: {
                method: "GET",
                requestUri: "/resourcesets/{resourceSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        location: "uri",
                        locationName: "resourceSetName"
                    }
                },
                required: [ "ResourceSetName" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceSetArn: {
                        locationName: "resourceSetArn"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        ListCells: {
            http: {
                method: "GET",
                requestUri: "/cells",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        locationName: "cells",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CellArn: {
                                    locationName: "cellArn"
                                },
                                CellName: {
                                    locationName: "cellName"
                                },
                                Cells: {
                                    shape: "S3",
                                    locationName: "cells"
                                },
                                ParentReadinessScopes: {
                                    shape: "S3",
                                    locationName: "parentReadinessScopes"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "ParentReadinessScopes", "CellArn", "CellName", "Cells" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListCrossAccountAuthorizations: {
            http: {
                method: "GET",
                requestUri: "/crossaccountauthorizations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAuthorizations: {
                        locationName: "crossAccountAuthorizations",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListReadinessChecks: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ReadinessChecks: {
                        locationName: "readinessChecks",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReadinessCheckArn: {
                                    locationName: "readinessCheckArn"
                                },
                                ReadinessCheckName: {
                                    locationName: "readinessCheckName"
                                },
                                ResourceSet: {
                                    locationName: "resourceSet"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "ReadinessCheckArn", "ResourceSet" ]
                        }
                    }
                }
            }
        },
        ListRecoveryGroups: {
            http: {
                method: "GET",
                requestUri: "/recoverygroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    RecoveryGroups: {
                        locationName: "recoveryGroups",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Cells: {
                                    shape: "S3",
                                    locationName: "cells"
                                },
                                RecoveryGroupArn: {
                                    locationName: "recoveryGroupArn"
                                },
                                RecoveryGroupName: {
                                    locationName: "recoveryGroupName"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "RecoveryGroupArn", "RecoveryGroupName", "Cells" ]
                        }
                    }
                }
            }
        },
        ListResourceSets: {
            http: {
                method: "GET",
                requestUri: "/resourcesets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ResourceSets: {
                        locationName: "resourceSets",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceSetArn: {
                                    locationName: "resourceSetArn"
                                },
                                ResourceSetName: {
                                    locationName: "resourceSetName"
                                },
                                ResourceSetType: {
                                    locationName: "resourceSetType"
                                },
                                Resources: {
                                    shape: "Sh",
                                    locationName: "resources"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "ResourceSetType", "ResourceSetName", "ResourceSetArn", "Resources" ]
                        }
                    }
                }
            }
        },
        ListRules: {
            http: {
                method: "GET",
                requestUri: "/rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Rules: {
                        locationName: "rules",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                RuleDescription: {
                                    locationName: "ruleDescription"
                                },
                                RuleId: {
                                    locationName: "ruleId"
                                }
                            },
                            required: [ "RuleDescription", "RuleId", "ResourceType" ]
                        }
                    }
                }
            }
        },
        ListTagsForResources: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "S3",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateCell: {
            http: {
                method: "PUT",
                requestUri: "/cells/{cellName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    }
                },
                required: [ "CellName", "Cells" ]
            },
            output: {
                type: "structure",
                members: {
                    CellArn: {
                        locationName: "cellArn"
                    },
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    ParentReadinessScopes: {
                        shape: "S3",
                        locationName: "parentReadinessScopes"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateReadinessCheck: {
            http: {
                method: "PUT",
                requestUri: "/readinesschecks/{readinessCheckName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    }
                },
                required: [ "ReadinessCheckName", "ResourceSetName" ]
            },
            output: {
                type: "structure",
                members: {
                    ReadinessCheckArn: {
                        locationName: "readinessCheckArn"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSet: {
                        locationName: "resourceSet"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateRecoveryGroup: {
            http: {
                method: "PUT",
                requestUri: "/recoverygroups/{recoveryGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName", "Cells" ]
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupArn: {
                        locationName: "recoveryGroupArn"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateResourceSet: {
            http: {
                method: "PUT",
                requestUri: "/resourcesets/{resourceSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        location: "uri",
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    }
                },
                required: [ "ResourceSetName", "ResourceSetType", "Resources" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceSetArn: {
                        locationName: "resourceSetArn"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ComponentId: {
                        locationName: "componentId"
                    },
                    DnsTargetResource: {
                        locationName: "dnsTargetResource",
                        type: "structure",
                        members: {
                            DomainName: {
                                locationName: "domainName"
                            },
                            HostedZoneArn: {
                                locationName: "hostedZoneArn"
                            },
                            RecordSetId: {
                                locationName: "recordSetId"
                            },
                            RecordType: {
                                locationName: "recordType"
                            },
                            TargetResource: {
                                locationName: "targetResource",
                                type: "structure",
                                members: {
                                    NLBResource: {
                                        locationName: "nLBResource",
                                        type: "structure",
                                        members: {
                                            Arn: {
                                                locationName: "arn"
                                            }
                                        }
                                    },
                                    R53Resource: {
                                        locationName: "r53Resource",
                                        type: "structure",
                                        members: {
                                            DomainName: {
                                                locationName: "domainName"
                                            },
                                            RecordSetId: {
                                                locationName: "recordSetId"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ReadinessScopes: {
                        shape: "S3",
                        locationName: "readinessScopes"
                    },
                    ResourceArn: {
                        locationName: "resourceArn"
                    }
                }
            }
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Readiness: {
                        locationName: "readiness"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    }
                }
            }
        },
        S1d: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MessageText: {
                        locationName: "messageText"
                    }
                }
            }
        }
    },
    paginators: {
        ListReadinessChecks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ReadinessChecks"
        },
        ListResourceSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceSets"
        },
        ListCells: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Cells"
        },
        ListRecoveryGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RecoveryGroups"
        },
        ListRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Rules"
        },
        ListCrossAccountAuthorizations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CrossAccountAuthorizations"
        },
        GetCellReadinessSummary: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ReadinessChecks",
            non_aggregate_keys: [ "Readiness" ]
        },
        GetRecoveryGroupReadinessSummary: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ReadinessChecks",
            non_aggregate_keys: [ "Readiness" ]
        },
        GetReadinessCheckStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Resources",
            non_aggregate_keys: [ "Readiness", "Messages" ]
        },
        GetReadinessCheckResourceStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Rules",
            non_aggregate_keys: [ "Readiness" ]
        }
    }
};

AWS.apiLoader.services["chimesdkidentity"] = {};

AWS.ChimeSDKIdentity = AWS.Service.defineService("chimesdkidentity", [ "2021-04-20" ]);

AWS.apiLoader.services["chimesdkidentity"]["2021-04-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-04-20",
        endpointPrefix: "identity-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Identity",
        serviceId: "Chime SDK Identity",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-identity-2021-04-20"
    },
    operations: {
        CreateAppInstance: {
            http: {
                requestUri: "/app-instances",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "ClientRequestToken" ],
                members: {
                    Name: {
                        shape: "S2"
                    },
                    Metadata: {
                        shape: "S3"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            }
        },
        CreateAppInstanceAdmin: {
            http: {
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {},
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        shape: "Sd"
                    },
                    AppInstanceArn: {}
                }
            }
        },
        CreateAppInstanceBot: {
            http: {
                requestUri: "/app-instance-bots",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "ClientRequestToken", "Configuration" ],
                members: {
                    AppInstanceArn: {},
                    Name: {
                        shape: "Se"
                    },
                    Metadata: {
                        shape: "S3"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S5"
                    },
                    Configuration: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceBotArn: {}
                }
            }
        },
        CreateAppInstanceUser: {
            http: {
                requestUri: "/app-instance-users",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceUserId", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    AppInstanceUserId: {
                        type: "string",
                        sensitive: true
                    },
                    Name: {
                        shape: "Ss"
                    },
                    Metadata: {
                        shape: "S3"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S5"
                    },
                    ExpirationSettings: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            }
        },
        DeleteAppInstance: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            }
        },
        DeleteAppInstanceAdmin: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            }
        },
        DeleteAppInstanceBot: {
            http: {
                method: "DELETE",
                requestUri: "/app-instance-bots/{appInstanceBotArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceBotArn" ],
                members: {
                    AppInstanceBotArn: {
                        location: "uri",
                        locationName: "appInstanceBotArn"
                    }
                }
            }
        },
        DeleteAppInstanceUser: {
            http: {
                method: "DELETE",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            }
        },
        DeregisterAppInstanceUserEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "EndpointId" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    EndpointId: {
                        location: "uri",
                        locationName: "endpointId"
                    }
                }
            }
        },
        DescribeAppInstance: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstance: {
                        type: "structure",
                        members: {
                            AppInstanceArn: {},
                            Name: {
                                shape: "S2"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Metadata: {
                                shape: "S3"
                            }
                        }
                    }
                }
            }
        },
        DescribeAppInstanceAdmin: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        type: "structure",
                        members: {
                            Admin: {
                                shape: "Sd"
                            },
                            AppInstanceArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeAppInstanceBot: {
            http: {
                method: "GET",
                requestUri: "/app-instance-bots/{appInstanceBotArn}"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceBotArn" ],
                members: {
                    AppInstanceBotArn: {
                        location: "uri",
                        locationName: "appInstanceBotArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceBot: {
                        type: "structure",
                        members: {
                            AppInstanceBotArn: {},
                            Name: {
                                shape: "Se"
                            },
                            Configuration: {
                                shape: "Sg"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Metadata: {
                                shape: "S3"
                            }
                        }
                    }
                }
            }
        },
        DescribeAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUser: {
                        type: "structure",
                        members: {
                            AppInstanceUserArn: {},
                            Name: {
                                shape: "Ss"
                            },
                            Metadata: {
                                shape: "S3"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            ExpirationSettings: {
                                shape: "St"
                            }
                        }
                    }
                }
            }
        },
        DescribeAppInstanceUserEndpoint: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "EndpointId" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    EndpointId: {
                        location: "uri",
                        locationName: "endpointId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserEndpoint: {
                        type: "structure",
                        members: {
                            AppInstanceUserArn: {},
                            EndpointId: {},
                            Name: {
                                shape: "S1k"
                            },
                            Type: {},
                            ResourceArn: {},
                            EndpointAttributes: {
                                shape: "S1m"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            AllowMessages: {},
                            EndpointState: {
                                shape: "S1p"
                            }
                        }
                    }
                }
            }
        },
        GetAppInstanceRetentionSettings: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S1u"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListAppInstanceAdmins: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1z",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceAdmins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Admin: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1z"
                    }
                }
            }
        },
        ListAppInstanceBots: {
            http: {
                method: "GET",
                requestUri: "/app-instance-bots"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1z",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceBots: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceBotArn: {},
                                Name: {
                                    shape: "Se"
                                },
                                Metadata: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1z"
                    }
                }
            }
        },
        ListAppInstanceUserEndpoints: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        shape: "S28",
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1z",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserEndpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceUserArn: {},
                                EndpointId: {},
                                Name: {
                                    shape: "S1k"
                                },
                                Type: {},
                                AllowMessages: {},
                                EndpointState: {
                                    shape: "S1p"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1z"
                    }
                }
            }
        },
        ListAppInstanceUsers: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1z",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceUsers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceUserArn: {},
                                Name: {
                                    shape: "Ss"
                                },
                                Metadata: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1z"
                    }
                }
            }
        },
        ListAppInstances: {
            http: {
                method: "GET",
                requestUri: "/app-instances"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1z",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceArn: {},
                                Name: {
                                    shape: "S2"
                                },
                                Metadata: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1z"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        PutAppInstanceRetentionSettings: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceRetentionSettings" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    AppInstanceRetentionSettings: {
                        shape: "S1u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S1u"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        PutAppInstanceUserExpirationSettings: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-users/{appInstanceUserArn}/expiration-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    ExpirationSettings: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {},
                    ExpirationSettings: {
                        shape: "St"
                    }
                }
            }
        },
        RegisterAppInstanceUserEndpoint: {
            http: {
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "Type", "ResourceArn", "EndpointAttributes", "ClientRequestToken" ],
                members: {
                    AppInstanceUserArn: {
                        shape: "S28",
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    Name: {
                        shape: "S1k"
                    },
                    Type: {},
                    ResourceArn: {},
                    EndpointAttributes: {
                        shape: "S1m"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    AllowMessages: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {},
                    EndpointId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    }
                }
            }
        },
        UpdateAppInstance: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name", "Metadata" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    Name: {
                        shape: "S2"
                    },
                    Metadata: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            }
        },
        UpdateAppInstanceBot: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-bots/{appInstanceBotArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceBotArn", "Name", "Metadata" ],
                members: {
                    AppInstanceBotArn: {
                        location: "uri",
                        locationName: "appInstanceBotArn"
                    },
                    Name: {
                        shape: "Se"
                    },
                    Metadata: {
                        shape: "S3"
                    },
                    Configuration: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceBotArn: {}
                }
            }
        },
        UpdateAppInstanceUser: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "Name", "Metadata" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    Name: {
                        shape: "Ss"
                    },
                    Metadata: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            }
        },
        UpdateAppInstanceUserEndpoint: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "EndpointId" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    EndpointId: {
                        location: "uri",
                        locationName: "endpointId"
                    },
                    Name: {
                        shape: "S1k"
                    },
                    AllowMessages: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {},
                    EndpointId: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S3: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "S7"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S7: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "structure",
            members: {
                Arn: {},
                Name: {
                    shape: "Se"
                }
            }
        },
        Se: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "structure",
            required: [ "Lex" ],
            members: {
                Lex: {
                    type: "structure",
                    required: [ "LexBotAliasArn", "LocaleId" ],
                    members: {
                        RespondsTo: {},
                        InvokedBy: {
                            type: "structure",
                            required: [ "StandardMessages", "TargetedMessages" ],
                            members: {
                                StandardMessages: {},
                                TargetedMessages: {}
                            }
                        },
                        LexBotAliasArn: {},
                        LocaleId: {},
                        WelcomeIntent: {}
                    }
                }
            }
        },
        Ss: {
            type: "string",
            sensitive: true
        },
        St: {
            type: "structure",
            required: [ "ExpirationDays", "ExpirationCriterion" ],
            members: {
                ExpirationDays: {
                    type: "integer"
                },
                ExpirationCriterion: {}
            }
        },
        S1k: {
            type: "string",
            sensitive: true
        },
        S1m: {
            type: "structure",
            required: [ "DeviceToken" ],
            members: {
                DeviceToken: {
                    shape: "S1n"
                },
                VoipDeviceToken: {
                    shape: "S1n"
                }
            }
        },
        S1n: {
            type: "string",
            sensitive: true
        },
        S1p: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                StatusReason: {}
            }
        },
        S1u: {
            type: "structure",
            members: {
                ChannelRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1z: {
            type: "string",
            sensitive: true
        },
        S28: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListAppInstanceAdmins: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceBots: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceUserEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["chimesdkmessaging"] = {};

AWS.ChimeSDKMessaging = AWS.Service.defineService("chimesdkmessaging", [ "2021-05-15" ]);

AWS.apiLoader.services["chimesdkmessaging"]["2021-05-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-05-15",
        endpointPrefix: "messaging-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Messaging",
        serviceId: "Chime SDK Messaging",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-messaging-2021-05-15"
    },
    operations: {
        AssociateChannelFlow: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/channel-flow",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelFlowArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelFlowArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        BatchCreateChannelMembership: {
            http: {
                requestUri: "/channels/{channelArn}/memberships?operation=batch-create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArns", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Type: {},
                    MemberArns: {
                        type: "list",
                        member: {}
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchChannelMemberships: {
                        type: "structure",
                        members: {
                            InvitedBy: {
                                shape: "S9"
                            },
                            Type: {},
                            Members: {
                                type: "list",
                                member: {
                                    shape: "S9"
                                }
                            },
                            ChannelArn: {},
                            SubChannelId: {}
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberArn: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        ChannelFlowCallback: {
            http: {
                requestUri: "/channels/{channelArn}?operation=channel-flow-callback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CallbackId", "ChannelArn", "ChannelMessage" ],
                members: {
                    CallbackId: {
                        idempotencyToken: true
                    },
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    DeleteResource: {
                        type: "boolean"
                    },
                    ChannelMessage: {
                        type: "structure",
                        required: [ "MessageId" ],
                        members: {
                            MessageId: {},
                            Content: {
                                shape: "Sl"
                            },
                            Metadata: {
                                shape: "Sm"
                            },
                            PushNotification: {
                                shape: "Sn"
                            },
                            MessageAttributes: {
                                shape: "Sr"
                            },
                            SubChannelId: {},
                            ContentType: {
                                shape: "Sw"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    CallbackId: {}
                }
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name", "ClientRequestToken", "ChimeBearer" ],
                members: {
                    AppInstanceArn: {},
                    Name: {
                        shape: "Sz"
                    },
                    Mode: {},
                    Privacy: {},
                    Metadata: {
                        shape: "Sm"
                    },
                    ClientRequestToken: {
                        shape: "S12",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S13"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    ChannelId: {
                        type: "string",
                        sensitive: true
                    },
                    MemberArns: {
                        type: "list",
                        member: {}
                    },
                    ModeratorArns: {
                        type: "list",
                        member: {}
                    },
                    ElasticChannelConfiguration: {
                        shape: "S1a"
                    },
                    ExpirationSettings: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            }
        },
        CreateChannelBan: {
            http: {
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S9"
                    }
                }
            }
        },
        CreateChannelFlow: {
            http: {
                requestUri: "/channel-flows",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Processors", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    Processors: {
                        shape: "S1l"
                    },
                    Name: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "S13"
                    },
                    ClientRequestToken: {
                        shape: "S12",
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlowArn: {}
                }
            }
        },
        CreateChannelMembership: {
            http: {
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "Type", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    Type: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S9"
                    },
                    SubChannelId: {}
                }
            }
        },
        CreateChannelModerator: {
            http: {
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelModerator: {
                        shape: "S9"
                    }
                }
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DeleteChannelBan: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DeleteChannelFlow: {
            http: {
                method: "DELETE",
                requestUri: "/channel-flows/{channelFlowArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn" ],
                members: {
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    }
                }
            }
        },
        DeleteChannelMembership: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {
                        location: "querystring",
                        locationName: "sub-channel-id"
                    }
                }
            }
        },
        DeleteChannelMessage: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {
                        location: "querystring",
                        locationName: "sub-channel-id"
                    }
                }
            }
        },
        DeleteChannelModerator: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DeleteMessagingStreamingConfigurations: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        type: "structure",
                        members: {
                            Name: {
                                shape: "Sz"
                            },
                            ChannelArn: {},
                            Mode: {},
                            Privacy: {},
                            Metadata: {
                                shape: "Sm"
                            },
                            CreatedBy: {
                                shape: "S9"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastMessageTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            ChannelFlowArn: {},
                            ElasticChannelConfiguration: {
                                shape: "S1a"
                            },
                            ExpirationSettings: {
                                shape: "S1e"
                            }
                        }
                    }
                }
            }
        },
        DescribeChannelBan: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelBan: {
                        type: "structure",
                        members: {
                            Member: {
                                shape: "S9"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S9"
                            }
                        }
                    }
                }
            }
        },
        DescribeChannelFlow: {
            http: {
                method: "GET",
                requestUri: "/channel-flows/{channelFlowArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn" ],
                members: {
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlow: {
                        type: "structure",
                        members: {
                            ChannelFlowArn: {},
                            Processors: {
                                shape: "S1l"
                            },
                            Name: {
                                shape: "Sz"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeChannelMembership: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {
                        location: "querystring",
                        locationName: "sub-channel-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        type: "structure",
                        members: {
                            InvitedBy: {
                                shape: "S9"
                            },
                            Type: {},
                            Member: {
                                shape: "S9"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            SubChannelId: {}
                        }
                    }
                }
            }
        },
        DescribeChannelMembershipForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        shape: "S2k"
                    }
                }
            }
        },
        DescribeChannelModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-moderated-channel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "S2p"
                    }
                }
            }
        },
        DescribeChannelModerator: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelModerator: {
                        type: "structure",
                        members: {
                            Moderator: {
                                shape: "S9"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S9"
                            }
                        }
                    }
                }
            }
        },
        DisassociateChannelFlow: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/channel-flow/{channelFlowArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelFlowArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        GetChannelMembershipPreferences: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}/preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S9"
                    },
                    Preferences: {
                        shape: "S2w"
                    }
                }
            }
        },
        GetChannelMessage: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {
                        location: "querystring",
                        locationName: "sub-channel-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMessage: {
                        type: "structure",
                        members: {
                            ChannelArn: {},
                            MessageId: {},
                            Content: {
                                shape: "S33"
                            },
                            Metadata: {
                                shape: "Sm"
                            },
                            Type: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastEditedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Sender: {
                                shape: "S9"
                            },
                            Redacted: {
                                type: "boolean"
                            },
                            Persistence: {},
                            Status: {
                                shape: "S36"
                            },
                            MessageAttributes: {
                                shape: "Sr"
                            },
                            SubChannelId: {},
                            ContentType: {
                                shape: "Sw"
                            },
                            Target: {
                                shape: "S39"
                            }
                        }
                    }
                }
            }
        },
        GetChannelMessageStatus: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages/{messageId}?scope=message-status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {
                        location: "querystring",
                        locationName: "sub-channel-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "S36"
                    }
                }
            }
        },
        GetMessagingSessionEndpoint: {
            http: {
                method: "GET",
                requestUri: "/endpoints/messaging-session",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Endpoint: {
                        type: "structure",
                        members: {
                            Url: {}
                        }
                    }
                }
            }
        },
        GetMessagingStreamingConfigurations: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfigurations: {
                        shape: "S3j"
                    }
                }
            }
        },
        ListChannelBans: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "S3o"
                    },
                    ChannelBans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S9"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListChannelFlows: {
            http: {
                method: "GET",
                requestUri: "/channel-flows",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChannelFlowArn: {},
                                Name: {
                                    shape: "Sz"
                                },
                                Processors: {
                                    shape: "S1l"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListChannelMemberships: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {
                        location: "querystring",
                        locationName: "sub-channel-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListChannelMembershipsForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChimeBearer" ],
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            shape: "S2k"
                        }
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListChannelMessages: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "sort-order"
                    },
                    NotBefore: {
                        location: "querystring",
                        locationName: "not-before",
                        type: "timestamp"
                    },
                    NotAfter: {
                        location: "querystring",
                        locationName: "not-after",
                        type: "timestamp"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {
                        location: "querystring",
                        locationName: "sub-channel-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "S3o"
                    },
                    ChannelMessages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MessageId: {},
                                Content: {
                                    shape: "S33"
                                },
                                Metadata: {
                                    shape: "Sm"
                                },
                                Type: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastEditedTimestamp: {
                                    type: "timestamp"
                                },
                                Sender: {
                                    shape: "S9"
                                },
                                Redacted: {
                                    type: "boolean"
                                },
                                Status: {
                                    shape: "S36"
                                },
                                MessageAttributes: {
                                    shape: "Sr"
                                },
                                ContentType: {
                                    shape: "Sw"
                                },
                                Target: {
                                    shape: "S39"
                                }
                            }
                        }
                    },
                    SubChannelId: {}
                }
            }
        },
        ListChannelModerators: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "S3o"
                    },
                    ChannelModerators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Moderator: {
                                    shape: "S9"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "ChimeBearer" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    Privacy: {
                        location: "querystring",
                        locationName: "privacy"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        shape: "S4e"
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListChannelsAssociatedWithChannelFlow: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=channel-flow-associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn" ],
                members: {
                    ChannelFlowArn: {
                        location: "querystring",
                        locationName: "channel-flow-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "Sz"
                                },
                                ChannelArn: {},
                                Mode: {},
                                Privacy: {},
                                Metadata: {
                                    shape: "Sm"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListChannelsModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-moderated-channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChimeBearer" ],
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            shape: "S2p"
                        }
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListSubChannels: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/subchannels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    SubChannels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SubChannelId: {},
                                MembershipCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S13"
                    }
                }
            }
        },
        PutChannelExpirationSettings: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/expiration-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    ExpirationSettings: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ExpirationSettings: {
                        shape: "S1e"
                    }
                }
            }
        },
        PutChannelMembershipPreferences: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}/preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer", "Preferences" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    Preferences: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S9"
                    },
                    Preferences: {
                        shape: "S2w"
                    }
                }
            }
        },
        PutMessagingStreamingConfigurations: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "StreamingConfigurations" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    StreamingConfigurations: {
                        shape: "S3j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfigurations: {
                        shape: "S3j"
                    }
                }
            }
        },
        RedactChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {},
                    SubChannelId: {}
                }
            }
        },
        SearchChannels: {
            http: {
                requestUri: "/channels?operation=search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Fields" ],
                members: {
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    Fields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values", "Operator" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                },
                                Operator: {}
                            }
                        }
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S3o",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        shape: "S4e"
                    },
                    NextToken: {
                        shape: "S3o"
                    }
                }
            }
        },
        SendChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "Content", "Type", "Persistence", "ClientRequestToken", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Content: {
                        shape: "Sl"
                    },
                    Type: {},
                    Persistence: {},
                    Metadata: {
                        shape: "Sm"
                    },
                    ClientRequestToken: {
                        shape: "S12",
                        idempotencyToken: true
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    PushNotification: {
                        shape: "Sn"
                    },
                    MessageAttributes: {
                        shape: "Sr"
                    },
                    SubChannelId: {},
                    ContentType: {
                        shape: "Sw"
                    },
                    Target: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {},
                    Status: {
                        shape: "S36"
                    },
                    SubChannelId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S13"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "S15"
                        }
                    }
                }
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Name: {
                        shape: "Sz"
                    },
                    Mode: {},
                    Metadata: {
                        shape: "Sm"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            }
        },
        UpdateChannelFlow: {
            http: {
                method: "PUT",
                requestUri: "/channel-flows/{channelFlowArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn", "Processors", "Name" ],
                members: {
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    },
                    Processors: {
                        shape: "S1l"
                    },
                    Name: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlowArn: {}
                }
            }
        },
        UpdateChannelMessage: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "Content", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    Content: {
                        shape: "Sl"
                    },
                    Metadata: {
                        shape: "Sm"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    SubChannelId: {},
                    ContentType: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {},
                    Status: {
                        shape: "S36"
                    },
                    SubChannelId: {}
                }
            }
        },
        UpdateChannelReadMarker: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/readMarker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "structure",
            members: {
                Arn: {},
                Name: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "string",
            sensitive: true
        },
        Sn: {
            type: "structure",
            members: {
                Title: {
                    type: "string",
                    sensitive: true
                },
                Body: {
                    type: "string",
                    sensitive: true
                },
                Type: {}
            }
        },
        Sr: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "structure",
                members: {
                    StringValues: {
                        type: "list",
                        member: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        Sw: {
            type: "string",
            sensitive: true
        },
        Sz: {
            type: "string",
            sensitive: true
        },
        S12: {
            type: "string",
            sensitive: true
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "S15"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S15: {
            type: "string",
            sensitive: true
        },
        S1a: {
            type: "structure",
            required: [ "MaximumSubChannels", "TargetMembershipsPerSubChannel", "MinimumMembershipPercentage" ],
            members: {
                MaximumSubChannels: {
                    type: "integer"
                },
                TargetMembershipsPerSubChannel: {
                    type: "integer"
                },
                MinimumMembershipPercentage: {
                    type: "integer"
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "ExpirationDays", "ExpirationCriterion" ],
            members: {
                ExpirationDays: {
                    type: "integer"
                },
                ExpirationCriterion: {}
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Configuration", "ExecutionOrder", "FallbackAction" ],
                members: {
                    Name: {
                        shape: "Sz"
                    },
                    Configuration: {
                        type: "structure",
                        required: [ "Lambda" ],
                        members: {
                            Lambda: {
                                type: "structure",
                                required: [ "ResourceArn", "InvocationType" ],
                                members: {
                                    ResourceArn: {},
                                    InvocationType: {}
                                }
                            }
                        }
                    },
                    ExecutionOrder: {
                        type: "integer"
                    },
                    FallbackAction: {}
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S2l"
                },
                AppInstanceUserMembershipSummary: {
                    type: "structure",
                    members: {
                        Type: {},
                        ReadMarkerTimestamp: {
                            type: "timestamp"
                        },
                        SubChannelId: {}
                    }
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                Name: {
                    shape: "Sz"
                },
                ChannelArn: {},
                Mode: {},
                Privacy: {},
                Metadata: {
                    shape: "Sm"
                },
                LastMessageTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S2l"
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                PushNotifications: {
                    type: "structure",
                    required: [ "AllowNotifications" ],
                    members: {
                        AllowNotifications: {},
                        FilterRule: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        S33: {
            type: "string",
            sensitive: true
        },
        S36: {
            type: "structure",
            members: {
                Value: {},
                Detail: {}
            }
        },
        S39: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MemberArn: {}
                }
            }
        },
        S3j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataType", "ResourceArn" ],
                members: {
                    DataType: {},
                    ResourceArn: {}
                }
            }
        },
        S3o: {
            type: "string",
            sensitive: true
        },
        S4e: {
            type: "list",
            member: {
                shape: "S2l"
            }
        }
    },
    paginators: {
        ListChannelBans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelFlows: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMembershipsForAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMessages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelModerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelsAssociatedWithChannelFlow: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelsModeratedByAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSubChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["snowdevicemanagement"] = {};

AWS.SnowDeviceManagement = AWS.Service.defineService("snowdevicemanagement", [ "2021-08-04" ]);

AWS.apiLoader.services["snowdevicemanagement"]["2021-08-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-04",
        endpointPrefix: "snow-device-management",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Snow Device Management",
        serviceId: "Snow Device Management",
        signatureVersion: "v4",
        signingName: "snow-device-management",
        uid: "snow-device-management-2021-08-04"
    },
    operations: {
        CancelTask: {
            http: {
                requestUri: "/task/{taskId}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        CreateTask: {
            http: {
                requestUri: "/task",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "command", "targets" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    command: {
                        type: "structure",
                        members: {
                            reboot: {
                                type: "structure",
                                members: {}
                            },
                            unlock: {
                                type: "structure",
                                members: {}
                            }
                        },
                        union: true
                    },
                    description: {},
                    tags: {
                        shape: "Sb"
                    },
                    targets: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskArn: {},
                    taskId: {}
                }
            }
        },
        DescribeDevice: {
            http: {
                requestUri: "/managed-device/{managedDeviceId}/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "managedDeviceId" ],
                members: {
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associatedWithJob: {},
                    deviceCapacities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                available: {
                                    type: "long"
                                },
                                name: {},
                                total: {
                                    type: "long"
                                },
                                unit: {},
                                used: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    deviceState: {},
                    deviceType: {},
                    lastReachedOutAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    managedDeviceArn: {},
                    managedDeviceId: {},
                    physicalNetworkInterfaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                defaultGateway: {},
                                ipAddress: {},
                                ipAddressAssignment: {},
                                macAddress: {},
                                netmask: {},
                                physicalConnectorType: {},
                                physicalNetworkInterfaceId: {}
                            }
                        }
                    },
                    software: {
                        type: "structure",
                        members: {
                            installState: {},
                            installedVersion: {},
                            installingVersion: {}
                        }
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DescribeDeviceEc2Instances: {
            http: {
                requestUri: "/managed-device/{managedDeviceId}/resources/ec2/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "instanceIds", "managedDeviceId" ],
                members: {
                    instanceIds: {
                        type: "list",
                        member: {}
                    },
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                instance: {
                                    type: "structure",
                                    members: {
                                        amiLaunchIndex: {
                                            type: "integer"
                                        },
                                        blockDeviceMappings: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    deviceName: {},
                                                    ebs: {
                                                        type: "structure",
                                                        members: {
                                                            attachTime: {
                                                                type: "timestamp"
                                                            },
                                                            deleteOnTermination: {
                                                                type: "boolean"
                                                            },
                                                            status: {},
                                                            volumeId: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        cpuOptions: {
                                            type: "structure",
                                            members: {
                                                coreCount: {
                                                    type: "integer"
                                                },
                                                threadsPerCore: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        imageId: {},
                                        instanceId: {},
                                        instanceType: {},
                                        privateIpAddress: {},
                                        publicIpAddress: {},
                                        rootDeviceName: {},
                                        securityGroups: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    groupId: {},
                                                    groupName: {}
                                                }
                                            }
                                        },
                                        state: {
                                            type: "structure",
                                            members: {
                                                code: {
                                                    type: "integer"
                                                },
                                                name: {}
                                            }
                                        },
                                        updatedAt: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeExecution: {
            http: {
                requestUri: "/task/{taskId}/execution/{managedDeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "managedDeviceId", "taskId" ],
                members: {
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    },
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executionId: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    managedDeviceId: {},
                    startedAt: {
                        type: "timestamp"
                    },
                    state: {},
                    taskId: {}
                }
            }
        },
        DescribeTask: {
            http: {
                requestUri: "/task/{taskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    completedAt: {
                        type: "timestamp"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    state: {},
                    tags: {
                        shape: "Sb"
                    },
                    targets: {
                        shape: "Sc"
                    },
                    taskArn: {},
                    taskId: {}
                }
            }
        },
        ListDeviceResources: {
            http: {
                method: "GET",
                requestUri: "/managed-device/{managedDeviceId}/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "managedDeviceId" ],
                members: {
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "resourceType" ],
                            members: {
                                arn: {},
                                id: {},
                                resourceType: {}
                            }
                        }
                    }
                }
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/managed-devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "querystring",
                        locationName: "jobId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                associatedWithJob: {},
                                managedDeviceArn: {},
                                managedDeviceId: {},
                                tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExecutions: {
            http: {
                method: "GET",
                requestUri: "/executions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    state: {
                        location: "querystring",
                        locationName: "state"
                    },
                    taskId: {
                        location: "querystring",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                executionId: {},
                                managedDeviceId: {},
                                state: {},
                                taskId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListTasks: {
            http: {
                method: "GET",
                requestUri: "/tasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    state: {
                        location: "querystring",
                        locationName: "state"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "taskId" ],
                            members: {
                                state: {},
                                tags: {
                                    shape: "Sb"
                                },
                                taskArn: {},
                                taskId: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListDeviceResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "resources"
        },
        ListDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "devices"
        },
        ListExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "executions"
        },
        ListTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tasks"
        }
    }
};

AWS.apiLoader.services["memorydb"] = {};

AWS.MemoryDB = AWS.Service.defineService("memorydb", [ "2021-01-01" ]);

AWS.apiLoader.services["memorydb"]["2021-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-01",
        endpointPrefix: "memory-db",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon MemoryDB",
        serviceFullName: "Amazon MemoryDB",
        serviceId: "MemoryDB",
        signatureVersion: "v4",
        signingName: "memorydb",
        targetPrefix: "AmazonMemoryDB",
        uid: "memorydb-2021-01-01"
    },
    operations: {
        BatchUpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterNames" ],
                members: {
                    ClusterNames: {
                        shape: "S2"
                    },
                    ServiceUpdate: {
                        type: "structure",
                        members: {
                            ServiceUpdateNameToApply: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProcessedClusters: {
                        shape: "S6"
                    },
                    UnprocessedClusters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ClusterName: {},
                                ErrorType: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CopySnapshot: {
            input: {
                type: "structure",
                required: [ "SourceSnapshotName", "TargetSnapshotName" ],
                members: {
                    SourceSnapshotName: {},
                    TargetSnapshotName: {},
                    TargetBucket: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateACL: {
            input: {
                type: "structure",
                required: [ "ACLName" ],
                members: {
                    ACLName: {},
                    UserNames: {
                        shape: "S18"
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ACL: {
                        shape: "S1b"
                    }
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NodeType", "ACLName" ],
                members: {
                    ClusterName: {},
                    NodeType: {},
                    ParameterGroupName: {},
                    Description: {},
                    NumShards: {
                        type: "integer"
                    },
                    NumReplicasPerShard: {
                        type: "integer"
                    },
                    SubnetGroupName: {},
                    SecurityGroupIds: {
                        shape: "S1g"
                    },
                    MaintenanceWindow: {},
                    Port: {
                        type: "integer"
                    },
                    SnsTopicArn: {},
                    TLSEnabled: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    SnapshotArns: {
                        type: "list",
                        member: {}
                    },
                    SnapshotName: {},
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sz"
                    },
                    SnapshotWindow: {},
                    ACLName: {},
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    DataTiering: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "Family" ],
                members: {
                    ParameterGroupName: {},
                    Family: {},
                    Description: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "ClusterName", "SnapshotName" ],
                members: {
                    ClusterName: {},
                    SnapshotName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName", "SubnetIds" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "S1p"
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "S1r"
                    }
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "UserName", "AuthenticationMode", "AccessString" ],
                members: {
                    UserName: {},
                    AuthenticationMode: {
                        shape: "S1w"
                    },
                    AccessString: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S21"
                    }
                }
            }
        },
        DeleteACL: {
            input: {
                type: "structure",
                required: [ "ACLName" ],
                members: {
                    ACLName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ACL: {
                        shape: "S1b"
                    }
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {},
                    FinalSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotName" ],
                members: {
                    SnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S12"
                    }
                }
            }
        },
        DeleteSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "S1r"
                    }
                }
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S21"
                    }
                }
            }
        },
        DescribeACLs: {
            input: {
                type: "structure",
                members: {
                    ACLName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ACLs: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    ClusterName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ShowShardDetails: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Clusters: {
                        shape: "S6"
                    }
                }
            }
        },
        DescribeEngineVersions: {
            input: {
                type: "structure",
                members: {
                    EngineVersion: {},
                    ParameterGroupFamily: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DefaultOnly: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    EngineVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EngineVersion: {},
                                EnginePatchVersion: {},
                                ParameterGroupFamily: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceName: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceName: {},
                                SourceType: {},
                                Message: {},
                                Date: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeParameterGroups: {
            input: {
                type: "structure",
                members: {
                    ParameterGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ParameterGroups: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    }
                }
            }
        },
        DescribeParameters: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Value: {},
                                Description: {},
                                DataType: {},
                                AllowedValues: {},
                                MinimumEngineVersion: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeReservedNodes: {
            input: {
                type: "structure",
                members: {
                    ReservationId: {},
                    ReservedNodesOfferingId: {},
                    NodeType: {},
                    Duration: {},
                    OfferingType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedNodes: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    }
                }
            }
        },
        DescribeReservedNodesOfferings: {
            input: {
                type: "structure",
                members: {
                    ReservedNodesOfferingId: {},
                    NodeType: {},
                    Duration: {},
                    OfferingType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedNodesOfferings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReservedNodesOfferingId: {},
                                NodeType: {},
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                OfferingType: {},
                                RecurringCharges: {
                                    shape: "S37"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeServiceUpdates: {
            input: {
                type: "structure",
                members: {
                    ServiceUpdateName: {},
                    ClusterNames: {
                        shape: "S2"
                    },
                    Status: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ServiceUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ClusterName: {},
                                ServiceUpdateName: {},
                                ReleaseDate: {
                                    type: "timestamp"
                                },
                                Description: {},
                                Status: {},
                                Type: {},
                                NodesUpdated: {},
                                AutoUpdateStartDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSnapshots: {
            input: {
                type: "structure",
                members: {
                    ClusterName: {},
                    SnapshotName: {},
                    Source: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ShowDetail: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Snapshots: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    }
                }
            }
        },
        DescribeSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    SubnetGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S1r"
                        }
                    }
                }
            }
        },
        DescribeUsers: {
            input: {
                type: "structure",
                members: {
                    UserName: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            shape: "S21"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        FailoverShard: {
            input: {
                type: "structure",
                required: [ "ClusterName", "ShardName" ],
                members: {
                    ClusterName: {},
                    ShardName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        ListAllowedNodeTypeUpdates: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScaleUpNodeTypes: {
                        shape: "S41"
                    },
                    ScaleDownNodeTypes: {
                        shape: "S41"
                    }
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sz"
                    }
                }
            }
        },
        PurchaseReservedNodesOffering: {
            input: {
                type: "structure",
                required: [ "ReservedNodesOfferingId" ],
                members: {
                    ReservedNodesOfferingId: {},
                    ReservationId: {},
                    NodeCount: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedNode: {
                        shape: "S36"
                    }
                }
            }
        },
        ResetParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    AllParameters: {
                        type: "boolean"
                    },
                    ParameterNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sz"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sz"
                    }
                }
            }
        },
        UpdateACL: {
            input: {
                type: "structure",
                required: [ "ACLName" ],
                members: {
                    ACLName: {},
                    UserNamesToAdd: {
                        shape: "S18"
                    },
                    UserNamesToRemove: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ACL: {
                        shape: "S1b"
                    }
                }
            }
        },
        UpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {},
                    Description: {},
                    SecurityGroupIds: {
                        shape: "S1g"
                    },
                    MaintenanceWindow: {},
                    SnsTopicArn: {},
                    SnsTopicStatus: {},
                    ParameterGroupName: {},
                    SnapshotWindow: {},
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    NodeType: {},
                    EngineVersion: {},
                    ReplicaConfiguration: {
                        type: "structure",
                        members: {
                            ReplicaCount: {
                                type: "integer"
                            }
                        }
                    },
                    ShardConfiguration: {
                        type: "structure",
                        members: {
                            ShardCount: {
                                type: "integer"
                            }
                        }
                    },
                    ACLName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        UpdateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "ParameterNameValues" ],
                members: {
                    ParameterGroupName: {},
                    ParameterNameValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterName: {},
                                ParameterValue: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        UpdateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "S1r"
                    }
                }
            }
        },
        UpdateUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    AuthenticationMode: {
                        shape: "S1w"
                    },
                    AccessString: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S21"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                shape: "S7"
            }
        },
        S7: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                Status: {},
                PendingUpdates: {
                    type: "structure",
                    members: {
                        Resharding: {
                            type: "structure",
                            members: {
                                SlotMigration: {
                                    type: "structure",
                                    members: {
                                        ProgressPercentage: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        },
                        ACLs: {
                            type: "structure",
                            members: {
                                ACLToApply: {}
                            }
                        },
                        ServiceUpdates: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    ServiceUpdateName: {},
                                    Status: {}
                                }
                            }
                        }
                    }
                },
                NumberOfShards: {
                    type: "integer"
                },
                Shards: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Status: {},
                            Slots: {},
                            Nodes: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Status: {},
                                        AvailabilityZone: {},
                                        CreateTime: {
                                            type: "timestamp"
                                        },
                                        Endpoint: {
                                            shape: "Sn"
                                        }
                                    }
                                }
                            },
                            NumberOfNodes: {
                                type: "integer"
                            }
                        }
                    }
                },
                AvailabilityMode: {},
                ClusterEndpoint: {
                    shape: "Sn"
                },
                NodeType: {},
                EngineVersion: {},
                EnginePatchVersion: {},
                ParameterGroupName: {},
                ParameterGroupStatus: {},
                SecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SecurityGroupId: {},
                            Status: {}
                        }
                    }
                },
                SubnetGroupName: {},
                TLSEnabled: {
                    type: "boolean"
                },
                KmsKeyId: {},
                ARN: {},
                SnsTopicArn: {},
                SnsTopicStatus: {},
                SnapshotRetentionLimit: {
                    type: "integer"
                },
                MaintenanceWindow: {},
                SnapshotWindow: {},
                ACLName: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                DataTiering: {}
            }
        },
        Sn: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                }
            }
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                Name: {},
                Status: {},
                Source: {},
                KmsKeyId: {},
                ARN: {},
                ClusterConfiguration: {
                    type: "structure",
                    members: {
                        Name: {},
                        Description: {},
                        NodeType: {},
                        EngineVersion: {},
                        MaintenanceWindow: {},
                        TopicArn: {},
                        Port: {
                            type: "integer"
                        },
                        ParameterGroupName: {},
                        SubnetGroupName: {},
                        VpcId: {},
                        SnapshotRetentionLimit: {
                            type: "integer"
                        },
                        SnapshotWindow: {},
                        NumShards: {
                            type: "integer"
                        },
                        Shards: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Name: {},
                                    Configuration: {
                                        type: "structure",
                                        members: {
                                            Slots: {},
                                            ReplicaCount: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    Size: {},
                                    SnapshotCreationTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                },
                DataTiering: {}
            }
        },
        S18: {
            type: "list",
            member: {}
        },
        S1b: {
            type: "structure",
            members: {
                Name: {},
                Status: {},
                UserNames: {
                    shape: "S1c"
                },
                MinimumEngineVersion: {},
                PendingChanges: {
                    type: "structure",
                    members: {
                        UserNamesToRemove: {
                            shape: "S1c"
                        },
                        UserNamesToAdd: {
                            shape: "S1c"
                        }
                    }
                },
                Clusters: {
                    type: "list",
                    member: {}
                },
                ARN: {}
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1l: {
            type: "structure",
            members: {
                Name: {},
                Family: {},
                Description: {},
                ARN: {}
            }
        },
        S1p: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                VpcId: {},
                Subnets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Identifier: {},
                            AvailabilityZone: {
                                type: "structure",
                                members: {
                                    Name: {}
                                }
                            }
                        }
                    }
                },
                ARN: {}
            }
        },
        S1w: {
            type: "structure",
            members: {
                Type: {},
                Passwords: {
                    type: "list",
                    member: {}
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                Name: {},
                Status: {},
                AccessString: {},
                ACLNames: {
                    type: "list",
                    member: {}
                },
                MinimumEngineVersion: {},
                Authentication: {
                    type: "structure",
                    members: {
                        Type: {},
                        PasswordCount: {
                            type: "integer"
                        }
                    }
                },
                ARN: {}
            }
        },
        S36: {
            type: "structure",
            members: {
                ReservationId: {},
                ReservedNodesOfferingId: {},
                NodeType: {},
                StartTime: {
                    type: "timestamp"
                },
                Duration: {
                    type: "integer"
                },
                FixedPrice: {
                    type: "double"
                },
                NodeCount: {
                    type: "integer"
                },
                OfferingType: {},
                State: {},
                RecurringCharges: {
                    shape: "S37"
                },
                ARN: {}
            }
        },
        S37: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RecurringChargeAmount: {
                        type: "double"
                    },
                    RecurringChargeFrequency: {}
                }
            }
        },
        S41: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeACLs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ACLs"
        },
        DescribeClusters: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Clusters"
        },
        DescribeEngineVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EngineVersions"
        },
        DescribeEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Events"
        },
        DescribeParameterGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ParameterGroups"
        },
        DescribeParameters: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Parameters"
        },
        DescribeReservedNodes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ReservedNodes"
        },
        DescribeReservedNodesOfferings: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ReservedNodesOfferings"
        },
        DescribeServiceUpdates: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ServiceUpdates"
        },
        DescribeSnapshots: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Snapshots"
        },
        DescribeSubnetGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SubnetGroups"
        },
        DescribeUsers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Users"
        }
    }
};

AWS.apiLoader.services["opensearch"] = {};

AWS.OpenSearch = AWS.Service.defineService("opensearch", [ "2021-01-01" ]);

AWS.apiLoader.services["opensearch"]["2021-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-01",
        endpointPrefix: "es",
        protocol: "rest-json",
        serviceFullName: "Amazon OpenSearch Service",
        serviceId: "OpenSearch",
        signatureVersion: "v4",
        uid: "opensearch-2021-01-01"
    },
    operations: {
        AcceptInboundConnection: {
            http: {
                method: "PUT",
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/accept"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S4"
                    }
                }
            }
        },
        AddDataSource: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/dataSource"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Name", "DataSourceType" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Name: {},
                    DataSourceType: {
                        shape: "Sg"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        AddTags: {
            http: {
                requestUri: "/2021-01-01/tags"
            },
            input: {
                type: "structure",
                required: [ "ARN", "TagList" ],
                members: {
                    ARN: {},
                    TagList: {
                        shape: "So"
                    }
                }
            }
        },
        AssociatePackage: {
            http: {
                requestUri: "/2021-01-01/packages/associate/{PackageID}/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "DomainName" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetails: {
                        shape: "Sv"
                    }
                }
            }
        },
        AuthorizeVpcEndpointAccess: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/authorizeVpcEndpointAccess"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Account" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Account: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AuthorizedPrincipal" ],
                members: {
                    AuthorizedPrincipal: {
                        shape: "S18"
                    }
                }
            }
        },
        CancelServiceSoftwareUpdate: {
            http: {
                requestUri: "/2021-01-01/opensearch/serviceSoftwareUpdate/cancel"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSoftwareOptions: {
                        shape: "S1c"
                    }
                }
            }
        },
        CreateDomain: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    EngineVersion: {},
                    ClusterConfig: {
                        shape: "S1i"
                    },
                    EBSOptions: {
                        shape: "S1o"
                    },
                    AccessPolicies: {},
                    IPAddressType: {},
                    SnapshotOptions: {
                        shape: "S1s"
                    },
                    VPCOptions: {
                        shape: "S1t"
                    },
                    CognitoOptions: {
                        shape: "S1v"
                    },
                    EncryptionAtRestOptions: {
                        shape: "S1y"
                    },
                    NodeToNodeEncryptionOptions: {
                        shape: "S20"
                    },
                    AdvancedOptions: {
                        shape: "S21"
                    },
                    LogPublishingOptions: {
                        shape: "S22"
                    },
                    DomainEndpointOptions: {
                        shape: "S26"
                    },
                    AdvancedSecurityOptions: {
                        shape: "S29"
                    },
                    TagList: {
                        shape: "So"
                    },
                    AutoTuneOptions: {
                        type: "structure",
                        members: {
                            DesiredState: {},
                            MaintenanceSchedules: {
                                shape: "S2k"
                            },
                            UseOffPeakWindow: {
                                type: "boolean"
                            }
                        }
                    },
                    OffPeakWindowOptions: {
                        shape: "S2q"
                    },
                    SoftwareUpdateOptions: {
                        shape: "S2v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S2x"
                    }
                }
            }
        },
        CreateOutboundConnection: {
            http: {
                requestUri: "/2021-01-01/opensearch/cc/outboundConnection"
            },
            input: {
                type: "structure",
                required: [ "LocalDomainInfo", "RemoteDomainInfo", "ConnectionAlias" ],
                members: {
                    LocalDomainInfo: {
                        shape: "S5"
                    },
                    RemoteDomainInfo: {
                        shape: "S5"
                    },
                    ConnectionAlias: {},
                    ConnectionMode: {},
                    ConnectionProperties: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalDomainInfo: {
                        shape: "S5"
                    },
                    RemoteDomainInfo: {
                        shape: "S5"
                    },
                    ConnectionAlias: {},
                    ConnectionStatus: {
                        shape: "S3h"
                    },
                    ConnectionId: {},
                    ConnectionMode: {},
                    ConnectionProperties: {
                        shape: "S3c"
                    }
                }
            }
        },
        CreatePackage: {
            http: {
                requestUri: "/2021-01-01/packages"
            },
            input: {
                type: "structure",
                required: [ "PackageName", "PackageType", "PackageSource" ],
                members: {
                    PackageName: {},
                    PackageType: {},
                    PackageDescription: {},
                    PackageSource: {
                        shape: "S3l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S3p"
                    }
                }
            }
        },
        CreateVpcEndpoint: {
            http: {
                requestUri: "/2021-01-01/opensearch/vpcEndpoints"
            },
            input: {
                type: "structure",
                required: [ "DomainArn", "VpcOptions" ],
                members: {
                    DomainArn: {},
                    VpcOptions: {
                        shape: "S1t"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpoint" ],
                members: {
                    VpcEndpoint: {
                        shape: "S43"
                    }
                }
            }
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/dataSource/{DataSourceName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Name" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "DataSourceName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S2x"
                    }
                }
            }
        },
        DeleteInboundConnection: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteOutboundConnection: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/cc/outboundConnection/{ConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S4e"
                    }
                }
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/packages/{PackageID}"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S3p"
                    }
                }
            }
        },
        DeleteVpcEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/vpcEndpoints/{VpcEndpointId}"
            },
            input: {
                type: "structure",
                required: [ "VpcEndpointId" ],
                members: {
                    VpcEndpointId: {
                        location: "uri",
                        locationName: "VpcEndpointId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpointSummary" ],
                members: {
                    VpcEndpointSummary: {
                        shape: "S4j"
                    }
                }
            }
        },
        DescribeDomain: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainStatus" ],
                members: {
                    DomainStatus: {
                        shape: "S2x"
                    }
                }
            }
        },
        DescribeDomainAutoTunes: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/autoTunes"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoTunes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoTuneType: {},
                                AutoTuneDetails: {
                                    type: "structure",
                                    members: {
                                        ScheduledAutoTuneDetails: {
                                            type: "structure",
                                            members: {
                                                Date: {
                                                    type: "timestamp"
                                                },
                                                ActionType: {},
                                                Action: {},
                                                Severity: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDomainChangeProgress: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/progress"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ChangeId: {
                        location: "querystring",
                        locationName: "changeid"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeProgressStatus: {
                        type: "structure",
                        members: {
                            ChangeId: {},
                            StartTime: {
                                type: "timestamp"
                            },
                            Status: {},
                            PendingProperties: {
                                shape: "S1u"
                            },
                            CompletedProperties: {
                                shape: "S1u"
                            },
                            TotalNumberOfStages: {
                                type: "integer"
                            },
                            ChangeProgressStages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Status: {},
                                        Description: {},
                                        LastUpdated: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDomainConfig: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/config"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainConfig" ],
                members: {
                    DomainConfig: {
                        shape: "S5c"
                    }
                }
            }
        },
        DescribeDomainHealth: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/health"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainState: {},
                    AvailabilityZoneCount: {},
                    ActiveAvailabilityZoneCount: {},
                    StandByAvailabilityZoneCount: {},
                    DataNodeCount: {},
                    DedicatedMaster: {
                        type: "boolean"
                    },
                    MasterEligibleNodeCount: {},
                    WarmNodeCount: {},
                    MasterNode: {},
                    ClusterHealth: {},
                    TotalShards: {},
                    TotalUnAssignedShards: {},
                    EnvironmentInformation: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AvailabilityZoneInformation: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AvailabilityZoneName: {},
                                            ZoneStatus: {},
                                            ConfiguredDataNodeCount: {},
                                            AvailableDataNodeCount: {},
                                            TotalShards: {},
                                            TotalUnAssignedShards: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDomainNodes: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/nodes"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainNodesStatusList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NodeId: {},
                                NodeType: {},
                                AvailabilityZone: {},
                                InstanceType: {},
                                NodeStatus: {},
                                StorageType: {},
                                StorageVolumeType: {},
                                StorageSize: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeDomains: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain-info"
            },
            input: {
                type: "structure",
                required: [ "DomainNames" ],
                members: {
                    DomainNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainStatusList" ],
                members: {
                    DomainStatusList: {
                        type: "list",
                        member: {
                            shape: "S2x"
                        }
                    }
                }
            }
        },
        DescribeDryRunProgress: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/dryRun"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    DryRunId: {
                        location: "querystring",
                        locationName: "dryRunId"
                    },
                    LoadDryRunConfig: {
                        location: "querystring",
                        locationName: "loadDryRunConfig",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DryRunProgressStatus: {
                        shape: "S6t"
                    },
                    DryRunConfig: {
                        shape: "S2x"
                    },
                    DryRunResults: {
                        shape: "S6w"
                    }
                }
            }
        },
        DescribeInboundConnections: {
            http: {
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/search"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S6z"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstanceTypeLimits: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/instanceTypeLimits/{EngineVersion}/{InstanceType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceType", "EngineVersion" ],
                members: {
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    },
                    InstanceType: {
                        location: "uri",
                        locationName: "InstanceType"
                    },
                    EngineVersion: {
                        location: "uri",
                        locationName: "EngineVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LimitsByRole: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                StorageTypes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            StorageTypeName: {},
                                            StorageSubTypeName: {},
                                            StorageTypeLimits: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        LimitName: {},
                                                        LimitValues: {
                                                            shape: "S7g"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                InstanceLimits: {
                                    type: "structure",
                                    members: {
                                        InstanceCountLimits: {
                                            type: "structure",
                                            members: {
                                                MinimumInstanceCount: {
                                                    type: "integer"
                                                },
                                                MaximumInstanceCount: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                AdditionalLimits: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LimitName: {},
                                            LimitValues: {
                                                shape: "S7g"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeOutboundConnections: {
            http: {
                requestUri: "/2021-01-01/opensearch/cc/outboundConnection/search"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S6z"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "S4e"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePackages: {
            http: {
                requestUri: "/2021-01-01/packages/describe"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetailsList: {
                        type: "list",
                        member: {
                            shape: "S3p"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeReservedInstanceOfferings: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/reservedInstanceOfferings"
            },
            input: {
                type: "structure",
                members: {
                    ReservedInstanceOfferingId: {
                        location: "querystring",
                        locationName: "offeringId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedInstanceOfferings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReservedInstanceOfferingId: {},
                                InstanceType: {},
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                CurrencyCode: {},
                                PaymentOption: {},
                                RecurringCharges: {
                                    shape: "S86"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeReservedInstances: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/reservedInstances"
            },
            input: {
                type: "structure",
                members: {
                    ReservedInstanceId: {
                        location: "querystring",
                        locationName: "reservationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReservationName: {},
                                ReservedInstanceId: {},
                                BillingSubscriptionId: {
                                    type: "long"
                                },
                                ReservedInstanceOfferingId: {},
                                InstanceType: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                CurrencyCode: {},
                                InstanceCount: {
                                    type: "integer"
                                },
                                State: {},
                                PaymentOption: {},
                                RecurringCharges: {
                                    shape: "S86"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeVpcEndpoints: {
            http: {
                requestUri: "/2021-01-01/opensearch/vpcEndpoints/describe"
            },
            input: {
                type: "structure",
                required: [ "VpcEndpointIds" ],
                members: {
                    VpcEndpointIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpoints", "VpcEndpointErrors" ],
                members: {
                    VpcEndpoints: {
                        type: "list",
                        member: {
                            shape: "S43"
                        }
                    },
                    VpcEndpointErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VpcEndpointId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        DissociatePackage: {
            http: {
                requestUri: "/2021-01-01/packages/dissociate/{PackageID}/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "DomainName" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetails: {
                        shape: "Sv"
                    }
                }
            }
        },
        GetCompatibleVersions: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/compatibleVersions"
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CompatibleVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceVersion: {},
                                TargetVersions: {
                                    shape: "S8r"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDataSource: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/dataSource/{DataSourceName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Name" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "DataSourceName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceType: {
                        shape: "Sg"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        GetDomainMaintenanceStatus: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/domainMaintenance"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "MaintenanceId" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaintenanceId: {
                        location: "querystring",
                        locationName: "maintenanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    StatusMessage: {},
                    NodeId: {},
                    Action: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetPackageVersionHistory: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/packages/{PackageID}/history"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageID: {},
                    PackageVersionHistoryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PackageVersion: {},
                                CommitMessage: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                PluginProperties: {
                                    shape: "S3t"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetUpgradeHistory: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/upgradeDomain/{DomainName}/history"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeHistories: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UpgradeName: {},
                                StartTimestamp: {
                                    type: "timestamp"
                                },
                                UpgradeStatus: {},
                                StepsList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            UpgradeStep: {},
                                            UpgradeStepStatus: {},
                                            Issues: {
                                                type: "list",
                                                member: {}
                                            },
                                            ProgressPercent: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetUpgradeStatus: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/upgradeDomain/{DomainName}/status"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeStep: {},
                    StepStatus: {},
                    UpgradeName: {}
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/dataSource"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DataSourceType: {
                                    shape: "Sg"
                                },
                                Name: {},
                                Description: {}
                            }
                        }
                    }
                }
            }
        },
        ListDomainMaintenances: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/domainMaintenances"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Action: {
                        location: "querystring",
                        locationName: "action"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainMaintenances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MaintenanceId: {},
                                DomainName: {},
                                Action: {},
                                NodeId: {},
                                Status: {},
                                StatusMessage: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomainNames: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/domain"
            },
            input: {
                type: "structure",
                members: {
                    EngineType: {
                        location: "querystring",
                        locationName: "engineType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainNames: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                EngineType: {}
                            }
                        }
                    }
                }
            }
        },
        ListDomainsForPackage: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/packages/{PackageID}/domains"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetailsList: {
                        shape: "S9y"
                    },
                    NextToken: {}
                }
            }
        },
        ListInstanceTypeDetails: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/instanceTypeDetails/{EngineVersion}"
            },
            input: {
                type: "structure",
                required: [ "EngineVersion" ],
                members: {
                    EngineVersion: {
                        location: "uri",
                        locationName: "EngineVersion"
                    },
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RetrieveAZs: {
                        location: "querystring",
                        locationName: "retrieveAZs",
                        type: "boolean"
                    },
                    InstanceType: {
                        location: "querystring",
                        locationName: "instanceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTypeDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceType: {},
                                EncryptionEnabled: {
                                    type: "boolean"
                                },
                                CognitoEnabled: {
                                    type: "boolean"
                                },
                                AppLogsEnabled: {
                                    type: "boolean"
                                },
                                AdvancedSecurityEnabled: {
                                    type: "boolean"
                                },
                                WarmEnabled: {
                                    type: "boolean"
                                },
                                InstanceRole: {
                                    type: "list",
                                    member: {}
                                },
                                AvailabilityZones: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPackagesForDomain: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/domain/{DomainName}/packages"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetailsList: {
                        shape: "S9y"
                    },
                    NextToken: {}
                }
            }
        },
        ListScheduledActions: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/scheduledActions"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScheduledActions: {
                        type: "list",
                        member: {
                            shape: "Sab"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/tags/"
            },
            input: {
                type: "structure",
                required: [ "ARN" ],
                members: {
                    ARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "So"
                    }
                }
            }
        },
        ListVersions: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/versions"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Versions: {
                        shape: "S8r"
                    },
                    NextToken: {}
                }
            }
        },
        ListVpcEndpointAccess: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/listVpcEndpointAccess"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AuthorizedPrincipalList", "NextToken" ],
                members: {
                    AuthorizedPrincipalList: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVpcEndpoints: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/vpcEndpoints"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpointSummaryList", "NextToken" ],
                members: {
                    VpcEndpointSummaryList: {
                        shape: "Sap"
                    },
                    NextToken: {}
                }
            }
        },
        ListVpcEndpointsForDomain: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/vpcEndpoints"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpointSummaryList", "NextToken" ],
                members: {
                    VpcEndpointSummaryList: {
                        shape: "Sap"
                    },
                    NextToken: {}
                }
            }
        },
        PurchaseReservedInstanceOffering: {
            http: {
                requestUri: "/2021-01-01/opensearch/purchaseReservedInstanceOffering"
            },
            input: {
                type: "structure",
                required: [ "ReservedInstanceOfferingId", "ReservationName" ],
                members: {
                    ReservedInstanceOfferingId: {},
                    ReservationName: {},
                    InstanceCount: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstanceId: {},
                    ReservationName: {}
                }
            }
        },
        RejectInboundConnection: {
            http: {
                method: "PUT",
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/reject"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S4"
                    }
                }
            }
        },
        RemoveTags: {
            http: {
                requestUri: "/2021-01-01/tags-removal"
            },
            input: {
                type: "structure",
                required: [ "ARN", "TagKeys" ],
                members: {
                    ARN: {},
                    TagKeys: {
                        shape: "S1u"
                    }
                }
            }
        },
        RevokeVpcEndpointAccess: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/revokeVpcEndpointAccess"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Account" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Account: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartDomainMaintenance: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/domainMaintenance"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Action" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Action: {},
                    NodeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MaintenanceId: {}
                }
            }
        },
        StartServiceSoftwareUpdate: {
            http: {
                requestUri: "/2021-01-01/opensearch/serviceSoftwareUpdate/start"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    ScheduleAt: {},
                    DesiredStartTime: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSoftwareOptions: {
                        shape: "S1c"
                    }
                }
            }
        },
        UpdateDataSource: {
            http: {
                method: "PUT",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/dataSource/{DataSourceName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Name", "DataSourceType" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "DataSourceName"
                    },
                    DataSourceType: {
                        shape: "Sg"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        UpdateDomainConfig: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/config"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ClusterConfig: {
                        shape: "S1i"
                    },
                    EBSOptions: {
                        shape: "S1o"
                    },
                    SnapshotOptions: {
                        shape: "S1s"
                    },
                    VPCOptions: {
                        shape: "S1t"
                    },
                    CognitoOptions: {
                        shape: "S1v"
                    },
                    AdvancedOptions: {
                        shape: "S21"
                    },
                    AccessPolicies: {},
                    IPAddressType: {},
                    LogPublishingOptions: {
                        shape: "S22"
                    },
                    EncryptionAtRestOptions: {
                        shape: "S1y"
                    },
                    DomainEndpointOptions: {
                        shape: "S26"
                    },
                    NodeToNodeEncryptionOptions: {
                        shape: "S20"
                    },
                    AdvancedSecurityOptions: {
                        shape: "S29"
                    },
                    AutoTuneOptions: {
                        shape: "S5v"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    DryRunMode: {},
                    OffPeakWindowOptions: {
                        shape: "S2q"
                    },
                    SoftwareUpdateOptions: {
                        shape: "S2v"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainConfig" ],
                members: {
                    DomainConfig: {
                        shape: "S5c"
                    },
                    DryRunResults: {
                        shape: "S6w"
                    },
                    DryRunProgressStatus: {
                        shape: "S6t"
                    }
                }
            }
        },
        UpdatePackage: {
            http: {
                requestUri: "/2021-01-01/packages/update"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "PackageSource" ],
                members: {
                    PackageID: {},
                    PackageSource: {
                        shape: "S3l"
                    },
                    PackageDescription: {},
                    CommitMessage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S3p"
                    }
                }
            }
        },
        UpdateScheduledAction: {
            http: {
                method: "PUT",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/scheduledAction/update"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ActionID", "ActionType", "ScheduleAt" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ActionID: {},
                    ActionType: {},
                    ScheduleAt: {},
                    DesiredStartTime: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScheduledAction: {
                        shape: "Sab"
                    }
                }
            }
        },
        UpdateVpcEndpoint: {
            http: {
                requestUri: "/2021-01-01/opensearch/vpcEndpoints/update"
            },
            input: {
                type: "structure",
                required: [ "VpcEndpointId", "VpcOptions" ],
                members: {
                    VpcEndpointId: {},
                    VpcOptions: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpoint" ],
                members: {
                    VpcEndpoint: {
                        shape: "S43"
                    }
                }
            }
        },
        UpgradeDomain: {
            http: {
                requestUri: "/2021-01-01/opensearch/upgradeDomain"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "TargetVersion" ],
                members: {
                    DomainName: {},
                    TargetVersion: {},
                    PerformCheckOnly: {
                        type: "boolean"
                    },
                    AdvancedOptions: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeId: {},
                    DomainName: {},
                    TargetVersion: {},
                    PerformCheckOnly: {
                        type: "boolean"
                    },
                    AdvancedOptions: {
                        shape: "S21"
                    },
                    ChangeProgressDetails: {
                        shape: "S37"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                LocalDomainInfo: {
                    shape: "S5"
                },
                RemoteDomainInfo: {
                    shape: "S5"
                },
                ConnectionId: {},
                ConnectionStatus: {
                    type: "structure",
                    members: {
                        StatusCode: {},
                        Message: {}
                    }
                },
                ConnectionMode: {}
            }
        },
        S5: {
            type: "structure",
            members: {
                AWSDomainInformation: {
                    type: "structure",
                    required: [ "DomainName" ],
                    members: {
                        OwnerId: {},
                        DomainName: {},
                        Region: {}
                    }
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                S3GlueDataCatalog: {
                    type: "structure",
                    members: {
                        RoleArn: {}
                    }
                }
            },
            union: true
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                PackageID: {},
                PackageName: {},
                PackageType: {},
                LastUpdated: {
                    type: "timestamp"
                },
                DomainName: {},
                DomainPackageStatus: {},
                PackageVersion: {},
                ReferencePath: {},
                ErrorDetails: {
                    shape: "S12"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                ErrorType: {},
                ErrorMessage: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                PrincipalType: {},
                Principal: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                CurrentVersion: {},
                NewVersion: {},
                UpdateAvailable: {
                    type: "boolean"
                },
                Cancellable: {
                    type: "boolean"
                },
                UpdateStatus: {},
                Description: {},
                AutomatedUpdateDate: {
                    type: "timestamp"
                },
                OptionalDeployment: {
                    type: "boolean"
                }
            }
        },
        S1i: {
            type: "structure",
            members: {
                InstanceType: {},
                InstanceCount: {
                    type: "integer"
                },
                DedicatedMasterEnabled: {
                    type: "boolean"
                },
                ZoneAwarenessEnabled: {
                    type: "boolean"
                },
                ZoneAwarenessConfig: {
                    type: "structure",
                    members: {
                        AvailabilityZoneCount: {
                            type: "integer"
                        }
                    }
                },
                DedicatedMasterType: {},
                DedicatedMasterCount: {
                    type: "integer"
                },
                WarmEnabled: {
                    type: "boolean"
                },
                WarmType: {},
                WarmCount: {
                    type: "integer"
                },
                ColdStorageOptions: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                },
                MultiAZWithStandbyEnabled: {
                    type: "boolean"
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                EBSEnabled: {
                    type: "boolean"
                },
                VolumeType: {},
                VolumeSize: {
                    type: "integer"
                },
                Iops: {
                    type: "integer"
                },
                Throughput: {
                    type: "integer"
                }
            }
        },
        S1s: {
            type: "structure",
            members: {
                AutomatedSnapshotStartHour: {
                    type: "integer"
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                SubnetIds: {
                    shape: "S1u"
                },
                SecurityGroupIds: {
                    shape: "S1u"
                }
            }
        },
        S1u: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                UserPoolId: {},
                IdentityPoolId: {},
                RoleArn: {}
            }
        },
        S1y: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                KmsKeyId: {}
            }
        },
        S20: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S21: {
            type: "map",
            key: {},
            value: {}
        },
        S22: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    CloudWatchLogsLogGroupArn: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                EnforceHTTPS: {
                    type: "boolean"
                },
                TLSSecurityPolicy: {},
                CustomEndpointEnabled: {
                    type: "boolean"
                },
                CustomEndpoint: {},
                CustomEndpointCertificateArn: {}
            }
        },
        S29: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                InternalUserDatabaseEnabled: {
                    type: "boolean"
                },
                MasterUserOptions: {
                    type: "structure",
                    members: {
                        MasterUserARN: {},
                        MasterUserName: {
                            shape: "S2b"
                        },
                        MasterUserPassword: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                SAMLOptions: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Idp: {
                            shape: "S2e"
                        },
                        MasterUserName: {
                            shape: "S2b"
                        },
                        MasterBackendRole: {},
                        SubjectKey: {},
                        RolesKey: {},
                        SessionTimeoutMinutes: {
                            type: "integer"
                        }
                    }
                },
                AnonymousAuthEnabled: {
                    type: "boolean"
                }
            }
        },
        S2b: {
            type: "string",
            sensitive: true
        },
        S2e: {
            type: "structure",
            required: [ "MetadataContent", "EntityId" ],
            members: {
                MetadataContent: {},
                EntityId: {}
            }
        },
        S2k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StartAt: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "structure",
                        members: {
                            Value: {
                                type: "long"
                            },
                            Unit: {}
                        }
                    },
                    CronExpressionForRecurrence: {}
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                OffPeakWindow: {
                    type: "structure",
                    members: {
                        WindowStartTime: {
                            type: "structure",
                            required: [ "Hours", "Minutes" ],
                            members: {
                                Hours: {
                                    type: "long"
                                },
                                Minutes: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                AutoSoftwareUpdateEnabled: {
                    type: "boolean"
                }
            }
        },
        S2x: {
            type: "structure",
            required: [ "DomainId", "DomainName", "ARN", "ClusterConfig" ],
            members: {
                DomainId: {},
                DomainName: {},
                ARN: {},
                Created: {
                    type: "boolean"
                },
                Deleted: {
                    type: "boolean"
                },
                Endpoint: {},
                EndpointV2: {},
                Endpoints: {
                    type: "map",
                    key: {},
                    value: {}
                },
                Processing: {
                    type: "boolean"
                },
                UpgradeProcessing: {
                    type: "boolean"
                },
                EngineVersion: {},
                ClusterConfig: {
                    shape: "S1i"
                },
                EBSOptions: {
                    shape: "S1o"
                },
                AccessPolicies: {},
                IPAddressType: {},
                SnapshotOptions: {
                    shape: "S1s"
                },
                VPCOptions: {
                    shape: "S31"
                },
                CognitoOptions: {
                    shape: "S1v"
                },
                EncryptionAtRestOptions: {
                    shape: "S1y"
                },
                NodeToNodeEncryptionOptions: {
                    shape: "S20"
                },
                AdvancedOptions: {
                    shape: "S21"
                },
                LogPublishingOptions: {
                    shape: "S22"
                },
                ServiceSoftwareOptions: {
                    shape: "S1c"
                },
                DomainEndpointOptions: {
                    shape: "S26"
                },
                AdvancedSecurityOptions: {
                    shape: "S32"
                },
                AutoTuneOptions: {
                    type: "structure",
                    members: {
                        State: {},
                        ErrorMessage: {},
                        UseOffPeakWindow: {
                            type: "boolean"
                        }
                    }
                },
                ChangeProgressDetails: {
                    shape: "S37"
                },
                OffPeakWindowOptions: {
                    shape: "S2q"
                },
                SoftwareUpdateOptions: {
                    shape: "S2v"
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                VPCId: {},
                SubnetIds: {
                    shape: "S1u"
                },
                AvailabilityZones: {
                    shape: "S1u"
                },
                SecurityGroupIds: {
                    shape: "S1u"
                }
            }
        },
        S32: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                InternalUserDatabaseEnabled: {
                    type: "boolean"
                },
                SAMLOptions: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Idp: {
                            shape: "S2e"
                        },
                        SubjectKey: {},
                        RolesKey: {},
                        SessionTimeoutMinutes: {
                            type: "integer"
                        }
                    }
                },
                AnonymousAuthDisableDate: {
                    type: "timestamp"
                },
                AnonymousAuthEnabled: {
                    type: "boolean"
                }
            }
        },
        S37: {
            type: "structure",
            members: {
                ChangeId: {},
                Message: {}
            }
        },
        S3c: {
            type: "structure",
            members: {
                Endpoint: {},
                CrossClusterSearch: {
                    type: "structure",
                    members: {
                        SkipUnavailable: {}
                    }
                }
            }
        },
        S3h: {
            type: "structure",
            members: {
                StatusCode: {},
                Message: {}
            }
        },
        S3l: {
            type: "structure",
            members: {
                S3BucketName: {},
                S3Key: {}
            }
        },
        S3p: {
            type: "structure",
            members: {
                PackageID: {},
                PackageName: {},
                PackageType: {},
                PackageDescription: {},
                PackageStatus: {},
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                },
                AvailablePackageVersion: {},
                ErrorDetails: {
                    shape: "S12"
                },
                EngineVersion: {},
                AvailablePluginProperties: {
                    shape: "S3t"
                }
            }
        },
        S3t: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                Version: {},
                ClassName: {},
                UncompressedSizeInBytes: {
                    type: "long"
                }
            }
        },
        S43: {
            type: "structure",
            members: {
                VpcEndpointId: {},
                VpcEndpointOwner: {},
                DomainArn: {},
                VpcOptions: {
                    shape: "S31"
                },
                Status: {},
                Endpoint: {}
            }
        },
        S4e: {
            type: "structure",
            members: {
                LocalDomainInfo: {
                    shape: "S5"
                },
                RemoteDomainInfo: {
                    shape: "S5"
                },
                ConnectionId: {},
                ConnectionAlias: {},
                ConnectionStatus: {
                    shape: "S3h"
                },
                ConnectionMode: {},
                ConnectionProperties: {
                    shape: "S3c"
                }
            }
        },
        S4j: {
            type: "structure",
            members: {
                VpcEndpointId: {},
                VpcEndpointOwner: {},
                DomainArn: {},
                Status: {}
            }
        },
        S5c: {
            type: "structure",
            members: {
                EngineVersion: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {},
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                ClusterConfig: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1i"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                EBSOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1o"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                AccessPolicies: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {},
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                IPAddressType: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {},
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                SnapshotOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1s"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                VPCOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S31"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                CognitoOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1v"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                EncryptionAtRestOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1y"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                NodeToNodeEncryptionOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S20"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                AdvancedOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S21"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                LogPublishingOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S22"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                DomainEndpointOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S26"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                AdvancedSecurityOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S32"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                AutoTuneOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S5v"
                        },
                        Status: {
                            type: "structure",
                            required: [ "CreationDate", "UpdateDate", "State" ],
                            members: {
                                CreationDate: {
                                    type: "timestamp"
                                },
                                UpdateDate: {
                                    type: "timestamp"
                                },
                                UpdateVersion: {
                                    type: "integer"
                                },
                                State: {},
                                ErrorMessage: {},
                                PendingDeletion: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                ChangeProgressDetails: {
                    shape: "S37"
                },
                OffPeakWindowOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S2q"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                },
                SoftwareUpdateOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S2v"
                        },
                        Status: {
                            shape: "S5e"
                        }
                    }
                }
            }
        },
        S5e: {
            type: "structure",
            required: [ "CreationDate", "UpdateDate", "State" ],
            members: {
                CreationDate: {
                    type: "timestamp"
                },
                UpdateDate: {
                    type: "timestamp"
                },
                UpdateVersion: {
                    type: "integer"
                },
                State: {},
                PendingDeletion: {
                    type: "boolean"
                }
            }
        },
        S5v: {
            type: "structure",
            members: {
                DesiredState: {},
                RollbackOnDisable: {},
                MaintenanceSchedules: {
                    shape: "S2k"
                },
                UseOffPeakWindow: {
                    type: "boolean"
                }
            }
        },
        S6t: {
            type: "structure",
            required: [ "DryRunId", "DryRunStatus", "CreationDate", "UpdateDate" ],
            members: {
                DryRunId: {},
                DryRunStatus: {},
                CreationDate: {},
                UpdateDate: {},
                ValidationFailures: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Code: {},
                            Message: {}
                        }
                    }
                }
            }
        },
        S6w: {
            type: "structure",
            members: {
                DeploymentType: {},
                Message: {}
            }
        },
        S6z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S7g: {
            type: "list",
            member: {}
        },
        S86: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RecurringChargeAmount: {
                        type: "double"
                    },
                    RecurringChargeFrequency: {}
                }
            }
        },
        S8r: {
            type: "list",
            member: {}
        },
        S9y: {
            type: "list",
            member: {
                shape: "Sv"
            }
        },
        Sab: {
            type: "structure",
            required: [ "Id", "Type", "Severity", "ScheduledTime" ],
            members: {
                Id: {},
                Type: {},
                Severity: {},
                ScheduledTime: {
                    type: "long"
                },
                Description: {},
                ScheduledBy: {},
                Status: {},
                Mandatory: {
                    type: "boolean"
                },
                Cancellable: {
                    type: "boolean"
                }
            }
        },
        Sap: {
            type: "list",
            member: {
                shape: "S4j"
            }
        }
    },
    paginators: {
        DescribeDomainAutoTunes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeInboundConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeOutboundConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribePackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeReservedInstanceOfferings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeReservedInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetPackageVersionHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetUpgradeHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDomainMaintenances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDomainsForPackage: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInstanceTypeDetails: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackagesForDomain: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListScheduledActions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["kafkaconnect"] = {};

AWS.KafkaConnect = AWS.Service.defineService("kafkaconnect", [ "2021-09-14" ]);

AWS.apiLoader.services["kafkaconnect"]["2021-09-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-14",
        endpointPrefix: "kafkaconnect",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Kafka Connect",
        serviceFullName: "Managed Streaming for Kafka Connect",
        serviceId: "KafkaConnect",
        signatureVersion: "v4",
        signingName: "kafkaconnect",
        uid: "kafkaconnect-2021-09-14"
    },
    operations: {
        CreateConnector: {
            http: {
                requestUri: "/v1/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "capacity", "connectorConfiguration", "connectorName", "kafkaCluster", "kafkaClusterClientAuthentication", "kafkaClusterEncryptionInTransit", "kafkaConnectVersion", "plugins", "serviceExecutionRoleArn" ],
                members: {
                    capacity: {
                        type: "structure",
                        members: {
                            autoScaling: {
                                type: "structure",
                                required: [ "maxWorkerCount", "mcuCount", "minWorkerCount" ],
                                members: {
                                    maxWorkerCount: {
                                        type: "integer"
                                    },
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    minWorkerCount: {
                                        type: "integer"
                                    },
                                    scaleInPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    scaleOutPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            provisionedCapacity: {
                                type: "structure",
                                required: [ "mcuCount", "workerCount" ],
                                members: {
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    workerCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    connectorConfiguration: {
                        shape: "Sa"
                    },
                    connectorDescription: {},
                    connectorName: {},
                    kafkaCluster: {
                        type: "structure",
                        required: [ "apacheKafkaCluster" ],
                        members: {
                            apacheKafkaCluster: {
                                type: "structure",
                                required: [ "bootstrapServers", "vpc" ],
                                members: {
                                    bootstrapServers: {},
                                    vpc: {
                                        type: "structure",
                                        required: [ "subnets" ],
                                        members: {
                                            securityGroups: {
                                                shape: "Sh"
                                            },
                                            subnets: {
                                                shape: "Sh"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    kafkaClusterClientAuthentication: {
                        type: "structure",
                        required: [ "authenticationType" ],
                        members: {
                            authenticationType: {}
                        }
                    },
                    kafkaClusterEncryptionInTransit: {
                        type: "structure",
                        required: [ "encryptionType" ],
                        members: {
                            encryptionType: {}
                        }
                    },
                    kafkaConnectVersion: {},
                    logDelivery: {
                        type: "structure",
                        required: [ "workerLogDelivery" ],
                        members: {
                            workerLogDelivery: {
                                type: "structure",
                                members: {
                                    cloudWatchLogs: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            enabled: {
                                                type: "boolean"
                                            },
                                            logGroup: {}
                                        }
                                    },
                                    firehose: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            deliveryStream: {},
                                            enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    s3: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            bucket: {},
                                            enabled: {
                                                type: "boolean"
                                            },
                                            prefix: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    plugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "customPlugin" ],
                            members: {
                                customPlugin: {
                                    type: "structure",
                                    required: [ "customPluginArn", "revision" ],
                                    members: {
                                        customPluginArn: {},
                                        revision: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    serviceExecutionRoleArn: {},
                    workerConfiguration: {
                        type: "structure",
                        required: [ "revision", "workerConfigurationArn" ],
                        members: {
                            revision: {
                                type: "long"
                            },
                            workerConfigurationArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorName: {},
                    connectorState: {}
                }
            }
        },
        CreateCustomPlugin: {
            http: {
                requestUri: "/v1/custom-plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentType", "location", "name" ],
                members: {
                    contentType: {},
                    description: {},
                    location: {
                        type: "structure",
                        required: [ "s3Location" ],
                        members: {
                            s3Location: {
                                type: "structure",
                                required: [ "bucketArn", "fileKey" ],
                                members: {
                                    bucketArn: {},
                                    fileKey: {},
                                    objectVersion: {}
                                }
                            }
                        }
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    customPluginArn: {},
                    customPluginState: {},
                    name: {},
                    revision: {
                        type: "long"
                    }
                }
            }
        },
        CreateWorkerConfiguration: {
            http: {
                requestUri: "/v1/worker-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "propertiesFileContent" ],
                members: {
                    description: {},
                    name: {},
                    propertiesFileContent: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S19"
                    },
                    latestRevision: {
                        shape: "S1a"
                    },
                    name: {},
                    workerConfigurationArn: {}
                }
            }
        },
        DeleteConnector: {
            http: {
                method: "DELETE",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectorArn" ],
                members: {
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    },
                    currentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorState: {}
                }
            },
            idempotent: true
        },
        DeleteCustomPlugin: {
            http: {
                method: "DELETE",
                requestUri: "/v1/custom-plugins/{customPluginArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "customPluginArn" ],
                members: {
                    customPluginArn: {
                        location: "uri",
                        locationName: "customPluginArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customPluginArn: {},
                    customPluginState: {}
                }
            },
            idempotent: true
        },
        DescribeConnector: {
            http: {
                method: "GET",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectorArn" ],
                members: {
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    capacity: {
                        shape: "S1h"
                    },
                    connectorArn: {},
                    connectorConfiguration: {
                        shape: "Sa"
                    },
                    connectorDescription: {},
                    connectorName: {},
                    connectorState: {},
                    creationTime: {
                        shape: "S19"
                    },
                    currentVersion: {},
                    kafkaCluster: {
                        shape: "S1n"
                    },
                    kafkaClusterClientAuthentication: {
                        shape: "S1q"
                    },
                    kafkaClusterEncryptionInTransit: {
                        shape: "S1r"
                    },
                    kafkaConnectVersion: {},
                    logDelivery: {
                        shape: "S1s"
                    },
                    plugins: {
                        shape: "S1x"
                    },
                    serviceExecutionRoleArn: {},
                    stateDescription: {
                        shape: "S20"
                    },
                    workerConfiguration: {
                        shape: "S21"
                    }
                }
            }
        },
        DescribeCustomPlugin: {
            http: {
                method: "GET",
                requestUri: "/v1/custom-plugins/{customPluginArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "customPluginArn" ],
                members: {
                    customPluginArn: {
                        location: "uri",
                        locationName: "customPluginArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S19"
                    },
                    customPluginArn: {},
                    customPluginState: {},
                    description: {},
                    latestRevision: {
                        shape: "S24"
                    },
                    name: {},
                    stateDescription: {
                        shape: "S20"
                    }
                }
            }
        },
        DescribeWorkerConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/worker-configurations/{workerConfigurationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workerConfigurationArn" ],
                members: {
                    workerConfigurationArn: {
                        location: "uri",
                        locationName: "workerConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S19"
                    },
                    description: {},
                    latestRevision: {
                        type: "structure",
                        members: {
                            creationTime: {
                                shape: "S19"
                            },
                            description: {},
                            propertiesFileContent: {
                                shape: "S17"
                            },
                            revision: {
                                type: "long"
                            }
                        }
                    },
                    name: {},
                    workerConfigurationArn: {}
                }
            }
        },
        ListConnectors: {
            http: {
                method: "GET",
                requestUri: "/v1/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    connectorNamePrefix: {
                        location: "querystring",
                        locationName: "connectorNamePrefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                capacity: {
                                    shape: "S1h"
                                },
                                connectorArn: {},
                                connectorDescription: {},
                                connectorName: {},
                                connectorState: {},
                                creationTime: {
                                    shape: "S19"
                                },
                                currentVersion: {},
                                kafkaCluster: {
                                    shape: "S1n"
                                },
                                kafkaClusterClientAuthentication: {
                                    shape: "S1q"
                                },
                                kafkaClusterEncryptionInTransit: {
                                    shape: "S1r"
                                },
                                kafkaConnectVersion: {},
                                logDelivery: {
                                    shape: "S1s"
                                },
                                plugins: {
                                    shape: "S1x"
                                },
                                serviceExecutionRoleArn: {},
                                workerConfiguration: {
                                    shape: "S21"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCustomPlugins: {
            http: {
                method: "GET",
                requestUri: "/v1/custom-plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customPlugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    shape: "S19"
                                },
                                customPluginArn: {},
                                customPluginState: {},
                                description: {},
                                latestRevision: {
                                    shape: "S24"
                                },
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorkerConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/worker-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workerConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    shape: "S19"
                                },
                                description: {},
                                latestRevision: {
                                    shape: "S1a"
                                },
                                name: {},
                                workerConfigurationArn: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateConnector: {
            http: {
                method: "PUT",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "capacity", "connectorArn", "currentVersion" ],
                members: {
                    capacity: {
                        type: "structure",
                        members: {
                            autoScaling: {
                                type: "structure",
                                required: [ "maxWorkerCount", "mcuCount", "minWorkerCount", "scaleInPolicy", "scaleOutPolicy" ],
                                members: {
                                    maxWorkerCount: {
                                        type: "integer"
                                    },
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    minWorkerCount: {
                                        type: "integer"
                                    },
                                    scaleInPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    scaleOutPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            provisionedCapacity: {
                                type: "structure",
                                required: [ "mcuCount", "workerCount" ],
                                members: {
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    workerCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    },
                    currentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorState: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sa: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sh: {
            type: "list",
            member: {}
        },
        S17: {
            type: "string",
            sensitive: true
        },
        S19: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1a: {
            type: "structure",
            members: {
                creationTime: {
                    shape: "S19"
                },
                description: {},
                revision: {
                    type: "long"
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                autoScaling: {
                    type: "structure",
                    members: {
                        maxWorkerCount: {
                            type: "integer"
                        },
                        mcuCount: {
                            type: "integer"
                        },
                        minWorkerCount: {
                            type: "integer"
                        },
                        scaleInPolicy: {
                            type: "structure",
                            members: {
                                cpuUtilizationPercentage: {
                                    type: "integer"
                                }
                            }
                        },
                        scaleOutPolicy: {
                            type: "structure",
                            members: {
                                cpuUtilizationPercentage: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                provisionedCapacity: {
                    type: "structure",
                    members: {
                        mcuCount: {
                            type: "integer"
                        },
                        workerCount: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                apacheKafkaCluster: {
                    type: "structure",
                    members: {
                        bootstrapServers: {},
                        vpc: {
                            type: "structure",
                            members: {
                                securityGroups: {
                                    shape: "Sh"
                                },
                                subnets: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                authenticationType: {}
            }
        },
        S1r: {
            type: "structure",
            members: {
                encryptionType: {}
            }
        },
        S1s: {
            type: "structure",
            members: {
                workerLogDelivery: {
                    type: "structure",
                    members: {
                        cloudWatchLogs: {
                            type: "structure",
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                logGroup: {}
                            }
                        },
                        firehose: {
                            type: "structure",
                            members: {
                                deliveryStream: {},
                                enabled: {
                                    type: "boolean"
                                }
                            }
                        },
                        s3: {
                            type: "structure",
                            members: {
                                bucket: {},
                                enabled: {
                                    type: "boolean"
                                },
                                prefix: {}
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    customPlugin: {
                        type: "structure",
                        members: {
                            customPluginArn: {},
                            revision: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                code: {},
                message: {}
            }
        },
        S21: {
            type: "structure",
            members: {
                revision: {
                    type: "long"
                },
                workerConfigurationArn: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                contentType: {},
                creationTime: {
                    shape: "S19"
                },
                description: {},
                fileDescription: {
                    type: "structure",
                    members: {
                        fileMd5: {},
                        fileSize: {
                            type: "long"
                        }
                    }
                },
                location: {
                    type: "structure",
                    members: {
                        s3Location: {
                            type: "structure",
                            members: {
                                bucketArn: {},
                                fileKey: {},
                                objectVersion: {}
                            }
                        }
                    }
                },
                revision: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        ListConnectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "connectors"
        },
        ListCustomPlugins: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "customPlugins"
        },
        ListWorkerConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workerConfigurations"
        }
    }
};

AWS.apiLoader.services["voiceid"] = {};

AWS.VoiceID = AWS.Service.defineService("voiceid", [ "2021-09-27" ]);

AWS.apiLoader.services["voiceid"]["2021-09-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-27",
        endpointPrefix: "voiceid",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Voice ID",
        serviceId: "Voice ID",
        signatureVersion: "v4",
        signingName: "voiceid",
        targetPrefix: "VoiceID",
        uid: "voice-id-2021-09-27"
    },
    operations: {
        AssociateFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId", "WatchlistId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "S3"
                    },
                    WatchlistId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Fraudster: {
                        shape: "S6"
                    }
                }
            }
        },
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "Name", "ServerSideEncryptionConfiguration" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {
                        shape: "Sc"
                    },
                    Name: {
                        shape: "Sd"
                    },
                    ServerSideEncryptionConfiguration: {
                        shape: "Se"
                    },
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sl"
                    }
                }
            },
            idempotent: true
        },
        CreateWatchlist: {
            input: {
                type: "structure",
                required: [ "DomainId", "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {
                        shape: "St"
                    },
                    DomainId: {},
                    Name: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Watchlist: {
                        shape: "Sw"
                    }
                }
            },
            idempotent: true
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            },
            idempotent: true
        },
        DeleteFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "S3"
                    }
                }
            }
        },
        DeleteSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "S11"
                    }
                }
            }
        },
        DeleteWatchlist: {
            input: {
                type: "structure",
                required: [ "DomainId", "WatchlistId" ],
                members: {
                    DomainId: {},
                    WatchlistId: {}
                }
            }
        },
        DescribeDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sl"
                    }
                }
            }
        },
        DescribeFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Fraudster: {
                        shape: "S6"
                    }
                }
            }
        },
        DescribeFraudsterRegistrationJob: {
            input: {
                type: "structure",
                required: [ "DomainId", "JobId" ],
                members: {
                    DomainId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1a"
                    }
                }
            }
        },
        DescribeSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Speaker: {
                        shape: "S1q"
                    }
                }
            }
        },
        DescribeSpeakerEnrollmentJob: {
            input: {
                type: "structure",
                required: [ "DomainId", "JobId" ],
                members: {
                    DomainId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1w"
                    }
                }
            }
        },
        DescribeWatchlist: {
            input: {
                type: "structure",
                required: [ "DomainId", "WatchlistId" ],
                members: {
                    DomainId: {},
                    WatchlistId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Watchlist: {
                        shape: "Sw"
                    }
                }
            }
        },
        DisassociateFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId", "WatchlistId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "S3"
                    },
                    WatchlistId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Fraudster: {
                        shape: "S6"
                    }
                }
            }
        },
        EvaluateSession: {
            input: {
                type: "structure",
                required: [ "DomainId", "SessionNameOrId" ],
                members: {
                    DomainId: {},
                    SessionNameOrId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationResult: {
                        type: "structure",
                        members: {
                            AudioAggregationEndedAt: {
                                type: "timestamp"
                            },
                            AudioAggregationStartedAt: {
                                type: "timestamp"
                            },
                            AuthenticationResultId: {},
                            Configuration: {
                                type: "structure",
                                required: [ "AcceptanceThreshold" ],
                                members: {
                                    AcceptanceThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            CustomerSpeakerId: {
                                shape: "S1r"
                            },
                            Decision: {},
                            GeneratedSpeakerId: {},
                            Score: {
                                type: "integer"
                            }
                        }
                    },
                    DomainId: {},
                    FraudDetectionResult: {
                        type: "structure",
                        members: {
                            AudioAggregationEndedAt: {
                                type: "timestamp"
                            },
                            AudioAggregationStartedAt: {
                                type: "timestamp"
                            },
                            Configuration: {
                                type: "structure",
                                members: {
                                    RiskThreshold: {
                                        type: "integer"
                                    },
                                    WatchlistId: {}
                                }
                            },
                            Decision: {},
                            FraudDetectionResultId: {},
                            Reasons: {
                                type: "list",
                                member: {}
                            },
                            RiskDetails: {
                                type: "structure",
                                required: [ "KnownFraudsterRisk", "VoiceSpoofingRisk" ],
                                members: {
                                    KnownFraudsterRisk: {
                                        type: "structure",
                                        required: [ "RiskScore" ],
                                        members: {
                                            GeneratedFraudsterId: {},
                                            RiskScore: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    VoiceSpoofingRisk: {
                                        type: "structure",
                                        required: [ "RiskScore" ],
                                        members: {
                                            RiskScore: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SessionId: {},
                    SessionName: {},
                    StreamingStatus: {}
                }
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Description: {
                                    shape: "Sc"
                                },
                                DomainId: {},
                                DomainStatus: {},
                                Name: {
                                    shape: "Sd"
                                },
                                ServerSideEncryptionConfiguration: {
                                    shape: "Se"
                                },
                                ServerSideEncryptionUpdateDetails: {
                                    shape: "So"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                WatchlistDetails: {
                                    shape: "Sr"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFraudsterRegistrationJobs: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    JobStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DomainId: {},
                                EndedAt: {
                                    type: "timestamp"
                                },
                                FailureDetails: {
                                    shape: "S1c"
                                },
                                JobId: {},
                                JobName: {
                                    shape: "S1g"
                                },
                                JobProgress: {
                                    shape: "S1h"
                                },
                                JobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFraudsters: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    WatchlistId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FraudsterSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DomainId: {},
                                GeneratedFraudsterId: {},
                                WatchlistIds: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpeakerEnrollmentJobs: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    JobStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DomainId: {},
                                EndedAt: {
                                    type: "timestamp"
                                },
                                FailureDetails: {
                                    shape: "S1c"
                                },
                                JobId: {},
                                JobName: {
                                    shape: "S1g"
                                },
                                JobProgress: {
                                    shape: "S1h"
                                },
                                JobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpeakers: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SpeakerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                CustomerSpeakerId: {
                                    shape: "S1r"
                                },
                                DomainId: {},
                                GeneratedSpeakerId: {},
                                LastAccessedAt: {
                                    type: "timestamp"
                                },
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        ListWatchlists: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    WatchlistSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DefaultWatchlist: {
                                    type: "boolean"
                                },
                                Description: {
                                    shape: "St"
                                },
                                DomainId: {},
                                Name: {
                                    shape: "Su"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                WatchlistId: {}
                            }
                        }
                    }
                }
            }
        },
        OptOutSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Speaker: {
                        shape: "S1q"
                    }
                }
            }
        },
        StartFraudsterRegistrationJob: {
            input: {
                type: "structure",
                required: [ "DataAccessRoleArn", "DomainId", "InputDataConfig", "OutputDataConfig" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DataAccessRoleArn: {},
                    DomainId: {},
                    InputDataConfig: {
                        shape: "S1e"
                    },
                    JobName: {
                        shape: "S1g"
                    },
                    OutputDataConfig: {
                        shape: "S1k"
                    },
                    RegistrationConfig: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        StartSpeakerEnrollmentJob: {
            input: {
                type: "structure",
                required: [ "DataAccessRoleArn", "DomainId", "InputDataConfig", "OutputDataConfig" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DataAccessRoleArn: {},
                    DomainId: {},
                    EnrollmentConfig: {
                        shape: "S1x"
                    },
                    InputDataConfig: {
                        shape: "S1e"
                    },
                    JobName: {
                        shape: "S1g"
                    },
                    OutputDataConfig: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1w"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDomain: {
            input: {
                type: "structure",
                required: [ "DomainId", "Name", "ServerSideEncryptionConfiguration" ],
                members: {
                    Description: {
                        shape: "Sc"
                    },
                    DomainId: {},
                    Name: {
                        shape: "Sd"
                    },
                    ServerSideEncryptionConfiguration: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sl"
                    }
                }
            }
        },
        UpdateWatchlist: {
            input: {
                type: "structure",
                required: [ "DomainId", "WatchlistId" ],
                members: {
                    Description: {
                        shape: "St"
                    },
                    DomainId: {},
                    Name: {
                        shape: "Su"
                    },
                    WatchlistId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Watchlist: {
                        shape: "Sw"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DomainId: {},
                GeneratedFraudsterId: {},
                WatchlistIds: {
                    shape: "S9"
                }
            }
        },
        S9: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "string",
            sensitive: true
        },
        Se: {
            type: "structure",
            required: [ "KmsKeyId" ],
            members: {
                KmsKeyId: {}
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "Si"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "structure",
            members: {
                Arn: {},
                CreatedAt: {
                    type: "timestamp"
                },
                Description: {
                    shape: "Sc"
                },
                DomainId: {},
                DomainStatus: {},
                Name: {
                    shape: "Sd"
                },
                ServerSideEncryptionConfiguration: {
                    shape: "Se"
                },
                ServerSideEncryptionUpdateDetails: {
                    shape: "So"
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                WatchlistDetails: {
                    shape: "Sr"
                }
            }
        },
        So: {
            type: "structure",
            members: {
                Message: {},
                OldKmsKeyId: {},
                UpdateStatus: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "DefaultWatchlistId" ],
            members: {
                DefaultWatchlistId: {}
            }
        },
        St: {
            type: "string",
            sensitive: true
        },
        Su: {
            type: "string",
            sensitive: true
        },
        Sw: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DefaultWatchlist: {
                    type: "boolean"
                },
                Description: {
                    shape: "St"
                },
                DomainId: {},
                Name: {
                    shape: "Su"
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                WatchlistId: {}
            }
        },
        S11: {
            type: "string",
            sensitive: true
        },
        S1a: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {},
                DomainId: {},
                EndedAt: {
                    type: "timestamp"
                },
                FailureDetails: {
                    shape: "S1c"
                },
                InputDataConfig: {
                    shape: "S1e"
                },
                JobId: {},
                JobName: {
                    shape: "S1g"
                },
                JobProgress: {
                    shape: "S1h"
                },
                JobStatus: {},
                OutputDataConfig: {
                    shape: "S1k"
                },
                RegistrationConfig: {
                    shape: "S1l"
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                Message: {},
                StatusCode: {
                    type: "integer"
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {}
            }
        },
        S1g: {
            type: "string",
            sensitive: true
        },
        S1h: {
            type: "structure",
            members: {
                PercentComplete: {
                    type: "integer"
                }
            }
        },
        S1k: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                KmsKeyId: {},
                S3Uri: {}
            }
        },
        S1l: {
            type: "structure",
            members: {
                DuplicateRegistrationAction: {},
                FraudsterSimilarityThreshold: {
                    type: "integer"
                },
                WatchlistIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                CustomerSpeakerId: {
                    shape: "S1r"
                },
                DomainId: {},
                GeneratedSpeakerId: {},
                LastAccessedAt: {
                    type: "timestamp"
                },
                Status: {},
                UpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        S1r: {
            type: "string",
            sensitive: true
        },
        S1w: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {},
                DomainId: {},
                EndedAt: {
                    type: "timestamp"
                },
                EnrollmentConfig: {
                    shape: "S1x"
                },
                FailureDetails: {
                    shape: "S1c"
                },
                InputDataConfig: {
                    shape: "S1e"
                },
                JobId: {},
                JobName: {
                    shape: "S1g"
                },
                JobProgress: {
                    shape: "S1h"
                },
                JobStatus: {},
                OutputDataConfig: {
                    shape: "S1k"
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                ExistingEnrollmentAction: {},
                FraudDetectionConfig: {
                    type: "structure",
                    members: {
                        FraudDetectionAction: {},
                        RiskThreshold: {
                            type: "integer"
                        },
                        WatchlistIds: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DomainSummaries"
        },
        ListFraudsterRegistrationJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobSummaries"
        },
        ListFraudsters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FraudsterSummaries"
        },
        ListSpeakerEnrollmentJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobSummaries"
        },
        ListSpeakers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SpeakerSummaries"
        },
        ListWatchlists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "WatchlistSummaries"
        }
    }
};

AWS.apiLoader.services["wisdom"] = {};

AWS.Wisdom = AWS.Service.defineService("wisdom", [ "2020-10-19" ]);

AWS.apiLoader.services["wisdom"]["2020-10-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-19",
        endpointPrefix: "wisdom",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Connect Wisdom Service",
        serviceId: "Wisdom",
        signatureVersion: "v4",
        signingName: "wisdom",
        uid: "wisdom-2020-10-19"
    },
    operations: {
        CreateAssistant: {
            http: {
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    tags: {
                        shape: "S7"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        CreateAssistantAssociation: {
            http: {
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "association", "associationType" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    association: {
                        type: "structure",
                        members: {
                            knowledgeBaseId: {}
                        },
                        union: true
                    },
                    associationType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        CreateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "name", "uploadId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "Sr"
                    },
                    name: {},
                    overrideLinkOutUri: {},
                    tags: {
                        shape: "S7"
                    },
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "Sw"
                    }
                }
            },
            idempotent: true
        },
        CreateKnowledgeBase: {
            http: {
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    knowledgeBaseType: {},
                    name: {},
                    renderingConfiguration: {
                        shape: "S13"
                    },
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    sourceConfiguration: {
                        shape: "S14"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S18"
                    }
                }
            },
            idempotent: true
        },
        CreateQuickResponse: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "content", "knowledgeBaseId", "name" ],
                members: {
                    channels: {
                        shape: "S1b"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    content: {
                        shape: "S1d"
                    },
                    contentType: {},
                    description: {},
                    groupingConfiguration: {
                        shape: "S1h"
                    },
                    isActive: {
                        type: "boolean"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    language: {},
                    name: {},
                    shortcutKey: {},
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    quickResponse: {
                        shape: "S1q"
                    }
                }
            },
            idempotent: true
        },
        CreateSession: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "name" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1w"
                    }
                }
            },
            idempotent: true
        },
        DeleteAssistant: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAssistantAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteContent: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteImportJob: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "importJobId", "knowledgeBaseId" ],
                members: {
                    importJobId: {
                        location: "uri",
                        locationName: "importJobId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteKnowledgeBase: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteQuickResponse: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "quickResponseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    quickResponseId: {
                        location: "uri",
                        locationName: "quickResponseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAssistant: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetAssistantAssociation: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetContent: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "Sw"
                    }
                }
            }
        },
        GetContentSummary: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentSummary: {
                        shape: "S2i"
                    }
                }
            }
        },
        GetImportJob: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importJobId", "knowledgeBaseId" ],
                members: {
                    importJobId: {
                        location: "uri",
                        locationName: "importJobId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importJob: {
                        shape: "S2l"
                    }
                }
            }
        },
        GetKnowledgeBase: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S18"
                    }
                }
            }
        },
        GetQuickResponse: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "quickResponseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    quickResponseId: {
                        location: "uri",
                        locationName: "quickResponseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    quickResponse: {
                        shape: "S1q"
                    }
                }
            }
        },
        GetRecommendations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    waitTimeSeconds: {
                        location: "querystring",
                        locationName: "waitTimeSeconds",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recommendations" ],
                members: {
                    recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "document", "recommendationId" ],
                            members: {
                                document: {
                                    shape: "S32"
                                },
                                recommendationId: {},
                                relevanceLevel: {},
                                relevanceScore: {
                                    type: "double"
                                },
                                type: {}
                            }
                        }
                    },
                    triggers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "data", "id", "recommendationIds", "source", "type" ],
                            members: {
                                data: {
                                    type: "structure",
                                    members: {
                                        query: {
                                            type: "structure",
                                            members: {
                                                text: {
                                                    shape: "S3h"
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                },
                                id: {},
                                recommendationIds: {
                                    shape: "S3i"
                                },
                                source: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        GetSession: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1w"
                    }
                }
            }
        },
        ListAssistantAssociations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantAssociationSummaries" ],
                members: {
                    assistantAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
                            members: {
                                assistantArn: {},
                                assistantAssociationArn: {},
                                assistantAssociationId: {},
                                assistantId: {},
                                associationData: {
                                    shape: "So"
                                },
                                associationType: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssistants: {
            http: {
                method: "GET",
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantSummaries" ],
                members: {
                    assistantSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                description: {},
                                integrationConfiguration: {
                                    shape: "Sf"
                                },
                                name: {},
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                },
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContents: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S3y"
                    },
                    nextToken: {}
                }
            }
        },
        ListImportJobs: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "importJobSummaries" ],
                members: {
                    importJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdTime", "importJobId", "importJobType", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "status", "uploadId" ],
                            members: {
                                createdTime: {
                                    shape: "S10"
                                },
                                externalSourceConfiguration: {
                                    shape: "S2m"
                                },
                                importJobId: {},
                                importJobType: {},
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                lastModifiedTime: {
                                    shape: "S10"
                                },
                                metadata: {
                                    shape: "Sr"
                                },
                                status: {},
                                uploadId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKnowledgeBases: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBaseSummaries" ],
                members: {
                    knowledgeBaseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
                            members: {
                                description: {},
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                knowledgeBaseType: {},
                                name: {},
                                renderingConfiguration: {
                                    shape: "S13"
                                },
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                sourceConfiguration: {
                                    shape: "S14"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListQuickResponses: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "quickResponseSummaries" ],
                members: {
                    nextToken: {},
                    quickResponseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "contentType", "createdTime", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "name", "quickResponseArn", "quickResponseId", "status" ],
                            members: {
                                channels: {
                                    shape: "S1b"
                                },
                                contentType: {},
                                createdTime: {
                                    shape: "S10"
                                },
                                description: {},
                                isActive: {
                                    type: "boolean"
                                },
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                lastModifiedBy: {},
                                lastModifiedTime: {
                                    shape: "S10"
                                },
                                name: {},
                                quickResponseArn: {},
                                quickResponseId: {},
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S7"
                    }
                }
            }
        },
        NotifyRecommendationsReceived: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "recommendationIds", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    recommendationIds: {
                        shape: "S3i"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                message: {},
                                recommendationId: {}
                            }
                        }
                    },
                    recommendationIds: {
                        shape: "S3i"
                    }
                }
            },
            idempotent: true
        },
        QueryAssistant: {
            http: {
                requestUri: "/assistants/{assistantId}/query",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "queryText" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    queryText: {
                        shape: "S3h"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    nextToken: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "document", "resultId" ],
                            members: {
                                document: {
                                    shape: "S32"
                                },
                                relevanceScore: {
                                    type: "double"
                                },
                                resultId: {}
                            }
                        }
                    }
                }
            }
        },
        RemoveKnowledgeBaseTemplateUri: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "searchExpression" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S4p"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S3y"
                    },
                    nextToken: {}
                }
            }
        },
        SearchQuickResponses: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/search/quickResponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "searchExpression" ],
                members: {
                    attributes: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        type: "structure",
                        members: {
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "operator" ],
                                    members: {
                                        includeNoExistence: {
                                            type: "boolean"
                                        },
                                        name: {},
                                        operator: {},
                                        values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            orderOnField: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    name: {},
                                    order: {}
                                }
                            },
                            queries: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "operator", "values" ],
                                    members: {
                                        allowFuzziness: {
                                            type: "boolean"
                                        },
                                        name: {},
                                        operator: {},
                                        priority: {},
                                        values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    nextToken: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "contentType", "contents", "createdTime", "isActive", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "name", "quickResponseArn", "quickResponseId", "status" ],
                            members: {
                                attributesInterpolated: {
                                    shape: "S5g"
                                },
                                attributesNotInterpolated: {
                                    shape: "S5g"
                                },
                                channels: {
                                    shape: "S1b"
                                },
                                contentType: {},
                                contents: {
                                    shape: "S1r"
                                },
                                createdTime: {
                                    shape: "S10"
                                },
                                description: {},
                                groupingConfiguration: {
                                    shape: "S1h"
                                },
                                isActive: {
                                    type: "boolean"
                                },
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                language: {},
                                lastModifiedBy: {},
                                lastModifiedTime: {
                                    shape: "S10"
                                },
                                name: {},
                                quickResponseArn: {},
                                quickResponseId: {},
                                shortcutKey: {},
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    }
                }
            }
        },
        SearchSessions: {
            http: {
                requestUri: "/assistants/{assistantId}/searchSessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "searchExpression" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S4p"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "sessionSummaries" ],
                members: {
                    nextToken: {},
                    sessionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "sessionArn", "sessionId" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                sessionArn: {},
                                sessionId: {}
                            }
                        }
                    }
                }
            }
        },
        StartContentUpload: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/upload",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentType", "knowledgeBaseId" ],
                members: {
                    contentType: {},
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    presignedUrlTimeToLive: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "headersToInclude", "uploadId", "url", "urlExpiry" ],
                members: {
                    headersToInclude: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    uploadId: {},
                    url: {
                        shape: "Sz"
                    },
                    urlExpiry: {
                        shape: "S10"
                    }
                }
            }
        },
        StartImportJob: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/importJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importJobType", "knowledgeBaseId", "uploadId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    externalSourceConfiguration: {
                        shape: "S2m"
                    },
                    importJobType: {},
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "Sr"
                    },
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    importJob: {
                        shape: "S2l"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "Sr"
                    },
                    overrideLinkOutUri: {},
                    removeOverrideLinkOutUri: {
                        type: "boolean"
                    },
                    revisionId: {},
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "Sw"
                    }
                }
            }
        },
        UpdateKnowledgeBaseTemplateUri: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "templateUri" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    templateUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S18"
                    }
                }
            }
        },
        UpdateQuickResponse: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "quickResponseId" ],
                members: {
                    channels: {
                        shape: "S1b"
                    },
                    content: {
                        shape: "S1d"
                    },
                    contentType: {},
                    description: {},
                    groupingConfiguration: {
                        shape: "S1h"
                    },
                    isActive: {
                        type: "boolean"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    language: {},
                    name: {},
                    quickResponseId: {
                        location: "uri",
                        locationName: "quickResponseId"
                    },
                    removeDescription: {
                        type: "boolean"
                    },
                    removeGroupingConfiguration: {
                        type: "boolean"
                    },
                    removeShortcutKey: {
                        type: "boolean"
                    },
                    shortcutKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    quickResponse: {
                        shape: "S1q"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                kmsKeyId: {}
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "structure",
            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
            members: {
                assistantArn: {},
                assistantId: {},
                description: {},
                integrationConfiguration: {
                    shape: "Sf"
                },
                name: {},
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                status: {},
                tags: {
                    shape: "S7"
                },
                type: {}
            }
        },
        Sf: {
            type: "structure",
            members: {
                topicIntegrationArn: {}
            }
        },
        Sn: {
            type: "structure",
            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
            members: {
                assistantArn: {},
                assistantAssociationArn: {},
                assistantAssociationId: {},
                assistantId: {},
                associationData: {
                    shape: "So"
                },
                associationType: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        So: {
            type: "structure",
            members: {
                knowledgeBaseAssociation: {
                    type: "structure",
                    members: {
                        knowledgeBaseArn: {},
                        knowledgeBaseId: {}
                    }
                }
            },
            union: true
        },
        Sr: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title", "url", "urlExpiry" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                linkOutUri: {},
                metadata: {
                    shape: "Sr"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {},
                url: {
                    shape: "Sz"
                },
                urlExpiry: {
                    shape: "S10"
                }
            }
        },
        Sz: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "timestamp",
            timestampFormat: "unixTimestamp"
        },
        S13: {
            type: "structure",
            members: {
                templateUri: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                appIntegrations: {
                    type: "structure",
                    required: [ "appIntegrationArn" ],
                    members: {
                        appIntegrationArn: {},
                        objectFields: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            union: true
        },
        S18: {
            type: "structure",
            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
            members: {
                description: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                knowledgeBaseType: {},
                lastContentModificationTime: {
                    shape: "S10"
                },
                name: {},
                renderingConfiguration: {
                    shape: "S13"
                },
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                sourceConfiguration: {
                    shape: "S14"
                },
                status: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        S1d: {
            type: "structure",
            members: {
                content: {
                    shape: "S1e"
                }
            },
            union: true
        },
        S1e: {
            type: "string",
            sensitive: true
        },
        S1h: {
            type: "structure",
            members: {
                criteria: {
                    type: "string",
                    sensitive: true
                },
                values: {
                    type: "list",
                    member: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            required: [ "contentType", "createdTime", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "name", "quickResponseArn", "quickResponseId", "status" ],
            members: {
                channels: {
                    shape: "S1b"
                },
                contentType: {},
                contents: {
                    shape: "S1r"
                },
                createdTime: {
                    shape: "S10"
                },
                description: {},
                groupingConfiguration: {
                    shape: "S1h"
                },
                isActive: {
                    type: "boolean"
                },
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                language: {},
                lastModifiedBy: {},
                lastModifiedTime: {
                    shape: "S10"
                },
                name: {},
                quickResponseArn: {},
                quickResponseId: {},
                shortcutKey: {},
                status: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1r: {
            type: "structure",
            members: {
                markdown: {
                    shape: "S1s"
                },
                plainText: {
                    shape: "S1s"
                }
            }
        },
        S1s: {
            type: "structure",
            members: {
                content: {
                    shape: "S1e"
                }
            },
            union: true
        },
        S1w: {
            type: "structure",
            required: [ "name", "sessionArn", "sessionId" ],
            members: {
                description: {},
                integrationConfiguration: {
                    type: "structure",
                    members: {
                        topicIntegrationArn: {}
                    }
                },
                name: {},
                sessionArn: {},
                sessionId: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S2i: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                metadata: {
                    shape: "Sr"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {}
            }
        },
        S2l: {
            type: "structure",
            required: [ "createdTime", "importJobId", "importJobType", "knowledgeBaseArn", "knowledgeBaseId", "lastModifiedTime", "status", "uploadId", "url", "urlExpiry" ],
            members: {
                createdTime: {
                    shape: "S10"
                },
                externalSourceConfiguration: {
                    shape: "S2m"
                },
                failedRecordReport: {
                    shape: "Sz"
                },
                importJobId: {},
                importJobType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                lastModifiedTime: {
                    shape: "S10"
                },
                metadata: {
                    shape: "Sr"
                },
                status: {},
                uploadId: {},
                url: {
                    shape: "Sz"
                },
                urlExpiry: {
                    shape: "S10"
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "configuration", "source" ],
            members: {
                configuration: {
                    type: "structure",
                    members: {
                        connectConfiguration: {
                            type: "structure",
                            members: {
                                instanceId: {}
                            }
                        }
                    },
                    union: true
                },
                source: {}
            }
        },
        S32: {
            type: "structure",
            required: [ "contentReference" ],
            members: {
                contentReference: {
                    type: "structure",
                    members: {
                        contentArn: {},
                        contentId: {},
                        knowledgeBaseArn: {},
                        knowledgeBaseId: {}
                    }
                },
                excerpt: {
                    shape: "S34"
                },
                title: {
                    shape: "S34"
                }
            }
        },
        S34: {
            type: "structure",
            members: {
                highlights: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            beginOffsetInclusive: {
                                type: "integer"
                            },
                            endOffsetExclusive: {
                                type: "integer"
                            }
                        }
                    }
                },
                text: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S3h: {
            type: "string",
            sensitive: true
        },
        S3i: {
            type: "list",
            member: {}
        },
        S3y: {
            type: "list",
            member: {
                shape: "S2i"
            }
        },
        S4p: {
            type: "structure",
            required: [ "filters" ],
            members: {
                filters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "field", "operator", "value" ],
                        members: {
                            field: {},
                            operator: {},
                            value: {}
                        }
                    }
                }
            }
        },
        S5g: {
            type: "list",
            member: {},
            sensitive: true
        }
    },
    paginators: {
        ListAssistantAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantAssociationSummaries"
        },
        ListAssistants: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantSummaries"
        },
        ListContents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        ListImportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "importJobSummaries"
        },
        ListKnowledgeBases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "knowledgeBaseSummaries"
        },
        ListQuickResponses: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "quickResponseSummaries"
        },
        QueryAssistant: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "results"
        },
        SearchContent: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        SearchQuickResponses: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "results"
        },
        SearchSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sessionSummaries"
        }
    }
};

AWS.apiLoader.services["account"] = {};

AWS.Account = AWS.Service.defineService("account", [ "2021-02-01" ]);

AWS.apiLoader.services["account"]["2021-02-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-02-01",
        endpointPrefix: "account",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Account",
        serviceId: "Account",
        signatureVersion: "v4",
        signingName: "account",
        uid: "account-2021-02-01"
    },
    operations: {
        DeleteAlternateContact: {
            http: {
                requestUri: "/deleteAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {}
                }
            },
            idempotent: true
        },
        DisableRegion: {
            http: {
                requestUri: "/disableRegion",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RegionName" ],
                members: {
                    AccountId: {},
                    RegionName: {}
                }
            }
        },
        EnableRegion: {
            http: {
                requestUri: "/enableRegion",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RegionName" ],
                members: {
                    AccountId: {},
                    RegionName: {}
                }
            }
        },
        GetAlternateContact: {
            http: {
                requestUri: "/getAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AlternateContact: {
                        type: "structure",
                        members: {
                            AlternateContactType: {},
                            EmailAddress: {
                                shape: "Sa"
                            },
                            Name: {
                                shape: "Sb"
                            },
                            PhoneNumber: {
                                shape: "Sc"
                            },
                            Title: {
                                shape: "Sd"
                            }
                        }
                    }
                }
            }
        },
        GetContactInformation: {
            http: {
                requestUri: "/getContactInformation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactInformation: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetRegionOptStatus: {
            http: {
                requestUri: "/getRegionOptStatus",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "RegionName" ],
                members: {
                    AccountId: {},
                    RegionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegionName: {},
                    RegionOptStatus: {}
                }
            }
        },
        ListRegions: {
            http: {
                requestUri: "/listRegions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccountId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    RegionOptStatusContains: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Regions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegionName: {},
                                RegionOptStatus: {}
                            }
                        }
                    }
                }
            }
        },
        PutAlternateContact: {
            http: {
                requestUri: "/putAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType", "EmailAddress", "Name", "PhoneNumber", "Title" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {},
                    EmailAddress: {
                        shape: "Sa"
                    },
                    Name: {
                        shape: "Sb"
                    },
                    PhoneNumber: {
                        shape: "Sc"
                    },
                    Title: {
                        shape: "Sd"
                    }
                }
            },
            idempotent: true
        },
        PutContactInformation: {
            http: {
                requestUri: "/putContactInformation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ContactInformation" ],
                members: {
                    AccountId: {},
                    ContactInformation: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sa: {
            type: "string",
            sensitive: true
        },
        Sb: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "structure",
            required: [ "AddressLine1", "City", "CountryCode", "FullName", "PhoneNumber", "PostalCode" ],
            members: {
                AddressLine1: {
                    shape: "Sh"
                },
                AddressLine2: {
                    shape: "Sh"
                },
                AddressLine3: {
                    shape: "Sh"
                },
                City: {
                    type: "string",
                    sensitive: true
                },
                CompanyName: {
                    type: "string",
                    sensitive: true
                },
                CountryCode: {
                    type: "string",
                    sensitive: true
                },
                DistrictOrCounty: {
                    type: "string",
                    sensitive: true
                },
                FullName: {
                    type: "string",
                    sensitive: true
                },
                PhoneNumber: {
                    type: "string",
                    sensitive: true
                },
                PostalCode: {
                    type: "string",
                    sensitive: true
                },
                StateOrRegion: {
                    type: "string",
                    sensitive: true
                },
                WebsiteUrl: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sh: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListRegions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Regions"
        }
    }
};

AWS.apiLoader.services["cloudcontrol"] = {};

AWS.CloudControl = AWS.Service.defineService("cloudcontrol", [ "2021-09-30" ]);

AWS.apiLoader.services["cloudcontrol"]["2021-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-30",
        endpointPrefix: "cloudcontrolapi",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "CloudControlApi",
        serviceFullName: "AWS Cloud Control API",
        serviceId: "CloudControl",
        signatureVersion: "v4",
        signingName: "cloudcontrolapi",
        targetPrefix: "CloudApiService",
        uid: "cloudcontrol-2021-09-30"
    },
    operations: {
        CancelResourceRequest: {
            input: {
                type: "structure",
                required: [ "RequestToken" ],
                members: {
                    RequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        CreateResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "DesiredState" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DesiredState: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        GetResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TypeName: {},
                    ResourceDescription: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetResourceRequestStatus: {
            input: {
                type: "structure",
                required: [ "RequestToken" ],
                members: {
                    RequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        ListResourceRequests: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ResourceRequestStatusFilter: {
                        type: "structure",
                        members: {
                            Operations: {
                                type: "list",
                                member: {}
                            },
                            OperationStatuses: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceRequestStatusSummaries: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResources: {
            input: {
                type: "structure",
                required: [ "TypeName" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceModel: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TypeName: {},
                    ResourceDescriptions: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        UpdateResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier", "PatchDocument" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Identifier: {},
                    PatchDocument: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                TypeName: {},
                Identifier: {},
                RequestToken: {},
                Operation: {},
                OperationStatus: {},
                EventTime: {
                    type: "timestamp"
                },
                ResourceModel: {
                    shape: "Sa"
                },
                StatusMessage: {},
                ErrorCode: {},
                RetryAfter: {
                    type: "timestamp"
                }
            }
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "structure",
            members: {
                Identifier: {},
                Properties: {
                    shape: "Sa"
                }
            }
        }
    },
    paginators: {
        ListResourceRequests: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceRequestStatusSummaries"
        },
        ListResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceDescriptions"
        }
    },
    waiters: {
        ResourceRequestSuccess: {
            description: "Wait until resource operation request is successful",
            delay: 5,
            maxAttempts: 24,
            operation: "GetResourceRequestStatus",
            acceptors: [ {
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                state: "success",
                expected: "SUCCESS"
            }, {
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                state: "failure",
                expected: "CANCEL_COMPLETE"
            } ]
        }
    }
};

AWS.apiLoader.services["grafana"] = {};

AWS.Grafana = AWS.Service.defineService("grafana", [ "2020-08-18" ]);

AWS.apiLoader.services["grafana"]["2020-08-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-18",
        endpointPrefix: "grafana",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Managed Grafana",
        serviceId: "grafana",
        signatureVersion: "v4",
        signingName: "grafana",
        uid: "grafana-2020-08-18"
    },
    operations: {
        AssociateLicense: {
            http: {
                requestUri: "/workspaces/{workspaceId}/licenses/{licenseType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "licenseType", "workspaceId" ],
                members: {
                    licenseType: {
                        location: "uri",
                        locationName: "licenseType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateWorkspace: {
            http: {
                requestUri: "/workspaces",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "accountAccessType", "authenticationProviders", "permissionType" ],
                members: {
                    accountAccessType: {},
                    authenticationProviders: {
                        shape: "S8"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    configuration: {
                        jsonvalue: true
                    },
                    grafanaVersion: {},
                    networkAccessControl: {
                        shape: "Sj"
                    },
                    organizationRoleName: {
                        shape: "Sq"
                    },
                    permissionType: {},
                    stackSetName: {},
                    tags: {
                        shape: "Sw"
                    },
                    vpcConfiguration: {
                        shape: "Sz"
                    },
                    workspaceDataSources: {
                        shape: "Sc"
                    },
                    workspaceDescription: {
                        shape: "Se"
                    },
                    workspaceName: {
                        shape: "Si"
                    },
                    workspaceNotificationDestinations: {
                        shape: "So"
                    },
                    workspaceOrganizationalUnits: {
                        shape: "Sr"
                    },
                    workspaceRoleArn: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        CreateWorkspaceApiKey: {
            http: {
                requestUri: "/workspaces/{workspaceId}/apikeys",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "keyName", "keyRole", "secondsToLive", "workspaceId" ],
                members: {
                    keyName: {},
                    keyRole: {},
                    secondsToLive: {
                        type: "integer"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "key", "keyName", "workspaceId" ],
                members: {
                    key: {
                        type: "string",
                        sensitive: true
                    },
                    keyName: {},
                    workspaceId: {}
                }
            }
        },
        DeleteWorkspace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        DeleteWorkspaceApiKey: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/apikeys/{keyName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "keyName", "workspaceId" ],
                members: {
                    keyName: {
                        location: "uri",
                        locationName: "keyName"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "keyName", "workspaceId" ],
                members: {
                    keyName: {},
                    workspaceId: {}
                }
            }
        },
        DescribeWorkspace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        DescribeWorkspaceAuthentication: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/authentication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "authentication" ],
                members: {
                    authentication: {
                        shape: "S1n"
                    }
                }
            }
        },
        DescribeWorkspaceConfiguration: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuration" ],
                members: {
                    configuration: {
                        jsonvalue: true
                    },
                    grafanaVersion: {}
                }
            }
        },
        DisassociateLicense: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/licenses/{licenseType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "licenseType", "workspaceId" ],
                members: {
                    licenseType: {
                        location: "uri",
                        locationName: "licenseType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        ListPermissions: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    groupId: {
                        location: "querystring",
                        locationName: "groupId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    userType: {
                        location: "querystring",
                        locationName: "userType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "permissions" ],
                members: {
                    nextToken: {},
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "role", "user" ],
                            members: {
                                role: {},
                                user: {
                                    shape: "S2f"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListVersions: {
            http: {
                method: "GET",
                requestUri: "/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    workspaceId: {
                        location: "querystring",
                        locationName: "workspace-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    grafanaVersions: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListWorkspaces: {
            http: {
                method: "GET",
                requestUri: "/workspaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaces" ],
                members: {
                    nextToken: {},
                    workspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "authentication", "created", "endpoint", "grafanaVersion", "id", "modified", "status" ],
                            members: {
                                authentication: {
                                    shape: "S7"
                                },
                                created: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Se"
                                },
                                endpoint: {},
                                grafanaVersion: {},
                                id: {},
                                modified: {
                                    type: "timestamp"
                                },
                                name: {
                                    shape: "Si"
                                },
                                notificationDestinations: {
                                    shape: "So"
                                },
                                status: {},
                                tags: {
                                    shape: "Sw"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdatePermissions: {
            http: {
                method: "PATCH",
                requestUri: "/workspaces/{workspaceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "updateInstructionBatch", "workspaceId" ],
                members: {
                    updateInstructionBatch: {
                        type: "list",
                        member: {
                            shape: "S2y"
                        }
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errors" ],
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "causedBy", "code", "message" ],
                            members: {
                                causedBy: {
                                    shape: "S2y"
                                },
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateWorkspace: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    accountAccessType: {},
                    networkAccessControl: {
                        shape: "Sj"
                    },
                    organizationRoleName: {
                        shape: "Sq"
                    },
                    permissionType: {},
                    removeNetworkAccessConfiguration: {
                        type: "boolean"
                    },
                    removeVpcConfiguration: {
                        type: "boolean"
                    },
                    stackSetName: {},
                    vpcConfiguration: {
                        shape: "Sz"
                    },
                    workspaceDataSources: {
                        shape: "Sc"
                    },
                    workspaceDescription: {
                        shape: "Se"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    workspaceName: {
                        shape: "Si"
                    },
                    workspaceNotificationDestinations: {
                        shape: "So"
                    },
                    workspaceOrganizationalUnits: {
                        shape: "Sr"
                    },
                    workspaceRoleArn: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        UpdateWorkspaceAuthentication: {
            http: {
                requestUri: "/workspaces/{workspaceId}/authentication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "authenticationProviders", "workspaceId" ],
                members: {
                    authenticationProviders: {
                        shape: "S8"
                    },
                    samlConfiguration: {
                        shape: "S1r"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "authentication" ],
                members: {
                    authentication: {
                        shape: "S1n"
                    }
                }
            }
        },
        UpdateWorkspaceConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/configuration",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "configuration", "workspaceId" ],
                members: {
                    configuration: {
                        jsonvalue: true
                    },
                    grafanaVersion: {},
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "authentication", "created", "dataSources", "endpoint", "grafanaVersion", "id", "modified", "status" ],
            members: {
                accountAccessType: {},
                authentication: {
                    shape: "S7"
                },
                created: {
                    type: "timestamp"
                },
                dataSources: {
                    shape: "Sc"
                },
                description: {
                    shape: "Se"
                },
                endpoint: {},
                freeTrialConsumed: {
                    type: "boolean"
                },
                freeTrialExpiration: {
                    type: "timestamp"
                },
                grafanaVersion: {},
                id: {},
                licenseExpiration: {
                    type: "timestamp"
                },
                licenseType: {},
                modified: {
                    type: "timestamp"
                },
                name: {
                    shape: "Si"
                },
                networkAccessControl: {
                    shape: "Sj"
                },
                notificationDestinations: {
                    shape: "So"
                },
                organizationRoleName: {
                    shape: "Sq"
                },
                organizationalUnits: {
                    shape: "Sr"
                },
                permissionType: {},
                stackSetName: {},
                status: {},
                tags: {
                    shape: "Sw"
                },
                vpcConfiguration: {
                    shape: "Sz"
                },
                workspaceRoleArn: {
                    shape: "S14"
                }
            }
        },
        S7: {
            type: "structure",
            required: [ "providers" ],
            members: {
                providers: {
                    shape: "S8"
                },
                samlConfigurationStatus: {}
            }
        },
        S8: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "list",
            member: {}
        },
        Se: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "structure",
            required: [ "prefixListIds", "vpceIds" ],
            members: {
                prefixListIds: {
                    type: "list",
                    member: {}
                },
                vpceIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        So: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "string",
            sensitive: true
        },
        Sr: {
            type: "list",
            member: {},
            sensitive: true
        },
        Sw: {
            type: "map",
            key: {},
            value: {}
        },
        Sz: {
            type: "structure",
            required: [ "securityGroupIds", "subnetIds" ],
            members: {
                securityGroupIds: {
                    type: "list",
                    member: {}
                },
                subnetIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S14: {
            type: "string",
            sensitive: true
        },
        S1n: {
            type: "structure",
            required: [ "providers" ],
            members: {
                awsSso: {
                    type: "structure",
                    members: {
                        ssoClientId: {}
                    }
                },
                providers: {
                    shape: "S8"
                },
                saml: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        configuration: {
                            shape: "S1r"
                        },
                        status: {}
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "idpMetadata" ],
            members: {
                allowedOrganizations: {
                    type: "list",
                    member: {}
                },
                assertionAttributes: {
                    type: "structure",
                    members: {
                        email: {},
                        groups: {},
                        login: {},
                        name: {},
                        org: {},
                        role: {}
                    }
                },
                idpMetadata: {
                    type: "structure",
                    members: {
                        url: {},
                        xml: {}
                    },
                    union: true
                },
                loginValidityDuration: {
                    type: "integer"
                },
                roleValues: {
                    type: "structure",
                    members: {
                        admin: {
                            shape: "S20"
                        },
                        editor: {
                            shape: "S20"
                        }
                    }
                }
            }
        },
        S20: {
            type: "list",
            member: {},
            sensitive: true
        },
        S2f: {
            type: "structure",
            required: [ "id", "type" ],
            members: {
                id: {},
                type: {}
            }
        },
        S2y: {
            type: "structure",
            required: [ "action", "role", "users" ],
            members: {
                action: {},
                role: {},
                users: {
                    type: "list",
                    member: {
                        shape: "S2f"
                    }
                }
            }
        }
    },
    paginators: {
        ListPermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "permissions"
        },
        ListVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "grafanaVersions"
        },
        ListWorkspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workspaces"
        }
    }
};

AWS.apiLoader.services["panorama"] = {};

AWS.Panorama = AWS.Service.defineService("panorama", [ "2019-07-24" ]);

AWS.apiLoader.services["panorama"]["2019-07-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-24",
        endpointPrefix: "panorama",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Panorama",
        serviceFullName: "AWS Panorama",
        serviceId: "Panorama",
        signatureVersion: "v4",
        signingName: "panorama",
        uid: "panorama-2019-07-24"
    },
    operations: {
        CreateApplicationInstance: {
            http: {
                requestUri: "/application-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DefaultRuntimeContextDevice", "ManifestPayload" ],
                members: {
                    ApplicationInstanceIdToReplace: {},
                    DefaultRuntimeContextDevice: {},
                    Description: {},
                    ManifestOverridesPayload: {
                        shape: "S5"
                    },
                    ManifestPayload: {
                        shape: "S7"
                    },
                    Name: {},
                    RuntimeRoleArn: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {}
                }
            }
        },
        CreateJobForDevices: {
            http: {
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceIds", "JobType" ],
                members: {
                    DeviceIds: {
                        type: "list",
                        member: {}
                    },
                    DeviceJobConfig: {
                        type: "structure",
                        members: {
                            OTAJobConfig: {
                                type: "structure",
                                required: [ "ImageVersion" ],
                                members: {
                                    AllowMajorVersionUpdate: {
                                        type: "boolean"
                                    },
                                    ImageVersion: {}
                                }
                            }
                        }
                    },
                    JobType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Jobs" ],
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceId: {},
                                JobId: {}
                            }
                        }
                    }
                }
            }
        },
        CreateNodeFromTemplateJob: {
            http: {
                requestUri: "/packages/template-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "NodeName", "OutputPackageName", "OutputPackageVersion", "TemplateParameters", "TemplateType" ],
                members: {
                    JobTags: {
                        shape: "Ss"
                    },
                    NodeDescription: {},
                    NodeName: {},
                    OutputPackageName: {},
                    OutputPackageVersion: {},
                    TemplateParameters: {
                        shape: "Sy"
                    },
                    TemplateType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            }
        },
        CreatePackage: {
            http: {
                requestUri: "/packages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageName" ],
                members: {
                    PackageName: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StorageLocation" ],
                members: {
                    Arn: {},
                    PackageId: {},
                    StorageLocation: {
                        shape: "S17"
                    }
                }
            }
        },
        CreatePackageImportJob: {
            http: {
                requestUri: "/packages/import-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ClientToken", "InputConfig", "JobType", "OutputConfig" ],
                members: {
                    ClientToken: {},
                    InputConfig: {
                        shape: "S1c"
                    },
                    JobTags: {
                        shape: "Ss"
                    },
                    JobType: {},
                    OutputConfig: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            }
        },
        DeleteDevice: {
            http: {
                method: "DELETE",
                requestUri: "/devices/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {}
                }
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{PackageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId" ],
                members: {
                    ForceDelete: {
                        location: "querystring",
                        locationName: "ForceDelete",
                        type: "boolean"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterPackageVersion: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion", "PatchVersion" ],
                members: {
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "uri",
                        locationName: "PatchVersion"
                    },
                    UpdatedLatestPatchVersion: {
                        location: "querystring",
                        locationName: "UpdatedLatestPatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplicationInstance: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInstanceId: {},
                    ApplicationInstanceIdToReplace: {},
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DefaultRuntimeContextDevice: {},
                    DefaultRuntimeContextDeviceName: {},
                    Description: {},
                    HealthStatus: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    RuntimeContextStates: {
                        shape: "S21"
                    },
                    RuntimeRoleArn: {},
                    Status: {},
                    StatusDescription: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DescribeApplicationInstanceDetails: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInstanceId: {},
                    ApplicationInstanceIdToReplace: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DefaultRuntimeContextDevice: {},
                    Description: {},
                    ManifestOverridesPayload: {
                        shape: "S5"
                    },
                    ManifestPayload: {
                        shape: "S7"
                    },
                    Name: {}
                }
            }
        },
        DescribeDevice: {
            http: {
                method: "GET",
                requestUri: "/devices/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AlternateSoftwares: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Version: {}
                            }
                        }
                    },
                    Arn: {},
                    Brand: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    CurrentNetworkingStatus: {
                        type: "structure",
                        members: {
                            Ethernet0Status: {
                                shape: "S2j"
                            },
                            Ethernet1Status: {
                                shape: "S2j"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            NtpStatus: {
                                type: "structure",
                                members: {
                                    ConnectionStatus: {},
                                    IpAddress: {},
                                    NtpServerName: {}
                                }
                            }
                        }
                    },
                    CurrentSoftware: {},
                    Description: {},
                    DeviceAggregatedStatus: {},
                    DeviceConnectionStatus: {},
                    DeviceId: {},
                    LatestAlternateSoftware: {},
                    LatestDeviceJob: {
                        shape: "S2u"
                    },
                    LatestSoftware: {},
                    LeaseExpirationTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NetworkingConfiguration: {
                        shape: "S2y"
                    },
                    ProvisioningStatus: {},
                    SerialNumber: {},
                    Tags: {
                        shape: "Sb"
                    },
                    Type: {}
                }
            }
        },
        DescribeDeviceJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DeviceArn: {},
                    DeviceId: {},
                    DeviceName: {},
                    DeviceType: {},
                    ImageVersion: {},
                    JobId: {},
                    JobType: {},
                    Status: {}
                }
            }
        },
        DescribeNode: {
            http: {
                method: "GET",
                requestUri: "/nodes/{NodeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "NodeId" ],
                members: {
                    NodeId: {
                        location: "uri",
                        locationName: "NodeId"
                    },
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Category", "CreatedTime", "Description", "LastUpdatedTime", "Name", "NodeId", "NodeInterface", "OwnerAccount", "PackageId", "PackageName", "PackageVersion", "PatchVersion" ],
                members: {
                    AssetName: {},
                    Category: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NodeId: {},
                    NodeInterface: {
                        type: "structure",
                        required: [ "Inputs", "Outputs" ],
                        members: {
                            Inputs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DefaultValue: {},
                                        Description: {},
                                        MaxConnections: {
                                            type: "integer"
                                        },
                                        Name: {},
                                        Type: {}
                                    }
                                }
                            },
                            Outputs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Description: {},
                                        Name: {},
                                        Type: {}
                                    }
                                }
                            }
                        }
                    },
                    OwnerAccount: {},
                    PackageArn: {},
                    PackageId: {},
                    PackageName: {},
                    PackageVersion: {},
                    PatchVersion: {}
                }
            }
        },
        DescribeNodeFromTemplateJob: {
            http: {
                method: "GET",
                requestUri: "/packages/template-job/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreatedTime", "JobId", "LastUpdatedTime", "NodeName", "OutputPackageName", "OutputPackageVersion", "Status", "StatusMessage", "TemplateParameters", "TemplateType" ],
                members: {
                    CreatedTime: {
                        type: "timestamp"
                    },
                    JobId: {},
                    JobTags: {
                        shape: "Ss"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    NodeDescription: {},
                    NodeName: {},
                    OutputPackageName: {},
                    OutputPackageVersion: {},
                    Status: {},
                    StatusMessage: {},
                    TemplateParameters: {
                        shape: "Sy"
                    },
                    TemplateType: {}
                }
            }
        },
        DescribePackage: {
            http: {
                method: "GET",
                requestUri: "/packages/metadata/{PackageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId" ],
                members: {
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreatedTime", "PackageId", "PackageName", "StorageLocation", "Tags" ],
                members: {
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    PackageId: {},
                    PackageName: {},
                    ReadAccessPrincipalArns: {
                        shape: "S3z"
                    },
                    StorageLocation: {
                        shape: "S17"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    WriteAccessPrincipalArns: {
                        shape: "S3z"
                    }
                }
            }
        },
        DescribePackageImportJob: {
            http: {
                method: "GET",
                requestUri: "/packages/import-jobs/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreatedTime", "InputConfig", "JobId", "JobType", "LastUpdatedTime", "Output", "OutputConfig", "Status", "StatusMessage" ],
                members: {
                    ClientToken: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    InputConfig: {
                        shape: "S1c"
                    },
                    JobId: {},
                    JobTags: {
                        shape: "Ss"
                    },
                    JobType: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Output: {
                        type: "structure",
                        required: [ "OutputS3Location", "PackageId", "PackageVersion", "PatchVersion" ],
                        members: {
                            OutputS3Location: {
                                type: "structure",
                                required: [ "BucketName", "ObjectKey" ],
                                members: {
                                    BucketName: {},
                                    ObjectKey: {}
                                }
                            },
                            PackageId: {},
                            PackageVersion: {},
                            PatchVersion: {}
                        }
                    },
                    OutputConfig: {
                        shape: "S1j"
                    },
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        DescribePackageVersion: {
            http: {
                method: "GET",
                requestUri: "/packages/metadata/{PackageId}/versions/{PackageVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion" ],
                members: {
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "querystring",
                        locationName: "PatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IsLatestPatch", "PackageId", "PackageName", "PackageVersion", "PatchVersion", "Status" ],
                members: {
                    IsLatestPatch: {
                        type: "boolean"
                    },
                    OwnerAccount: {},
                    PackageArn: {},
                    PackageId: {},
                    PackageName: {},
                    PackageVersion: {},
                    PatchVersion: {},
                    RegisteredTime: {
                        type: "timestamp"
                    },
                    Status: {},
                    StatusDescription: {}
                }
            }
        },
        ListApplicationInstanceDependencies: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}/package-dependencies",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    PackageObjects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "PackageVersion", "PatchVersion" ],
                            members: {
                                Name: {},
                                PackageVersion: {},
                                PatchVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListApplicationInstanceNodeInstances: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}/node-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NodeInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CurrentStatus", "NodeInstanceId" ],
                            members: {
                                CurrentStatus: {},
                                NodeId: {},
                                NodeInstanceId: {},
                                NodeName: {},
                                PackageName: {},
                                PackagePatchVersion: {},
                                PackageVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListApplicationInstances: {
            http: {
                method: "GET",
                requestUri: "/application-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    StatusFilter: {
                        location: "querystring",
                        locationName: "statusFilter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationInstanceId: {},
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DefaultRuntimeContextDevice: {},
                                DefaultRuntimeContextDeviceName: {},
                                Description: {},
                                HealthStatus: {},
                                Name: {},
                                RuntimeContextStates: {
                                    shape: "S21"
                                },
                                Status: {},
                                StatusDescription: {},
                                Tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceAggregatedStatusFilter: {
                        location: "querystring",
                        locationName: "DeviceAggregatedStatusFilter"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NameFilter: {
                        location: "querystring",
                        locationName: "NameFilter"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SortBy: {
                        location: "querystring",
                        locationName: "SortBy"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "SortOrder"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Devices" ],
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Brand: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                CurrentSoftware: {},
                                Description: {},
                                DeviceAggregatedStatus: {},
                                DeviceId: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                LatestDeviceJob: {
                                    shape: "S2u"
                                },
                                LeaseExpirationTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                ProvisioningStatus: {},
                                Tags: {
                                    shape: "Sb"
                                },
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevicesJobs: {
            http: {
                method: "GET",
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "querystring",
                        locationName: "DeviceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DeviceId: {},
                                DeviceName: {},
                                JobId: {},
                                JobType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNodeFromTemplateJobs: {
            http: {
                method: "GET",
                requestUri: "/packages/template-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "NodeFromTemplateJobs" ],
                members: {
                    NextToken: {},
                    NodeFromTemplateJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                JobId: {},
                                NodeName: {},
                                Status: {},
                                StatusMessage: {},
                                TemplateType: {}
                            }
                        }
                    }
                }
            }
        },
        ListNodes: {
            http: {
                method: "GET",
                requestUri: "/nodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        location: "querystring",
                        locationName: "category"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "ownerAccount"
                    },
                    PackageName: {
                        location: "querystring",
                        locationName: "packageName"
                    },
                    PackageVersion: {
                        location: "querystring",
                        locationName: "packageVersion"
                    },
                    PatchVersion: {
                        location: "querystring",
                        locationName: "patchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Nodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Category", "CreatedTime", "Name", "NodeId", "PackageId", "PackageName", "PackageVersion", "PatchVersion" ],
                            members: {
                                Category: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                Name: {},
                                NodeId: {},
                                OwnerAccount: {},
                                PackageArn: {},
                                PackageId: {},
                                PackageName: {},
                                PackageVersion: {},
                                PatchVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListPackageImportJobs: {
            http: {
                method: "GET",
                requestUri: "/packages/import-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "PackageImportJobs" ],
                members: {
                    NextToken: {},
                    PackageImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                JobId: {},
                                JobType: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    }
                }
            }
        },
        ListPackages: {
            http: {
                method: "GET",
                requestUri: "/packages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Packages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                PackageId: {},
                                PackageName: {},
                                Tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ProvisionDevice: {
            http: {
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Description: {},
                    Name: {},
                    NetworkingConfiguration: {
                        shape: "S2y"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "Status" ],
                members: {
                    Arn: {},
                    Certificates: {
                        type: "blob"
                    },
                    DeviceId: {},
                    IotThingName: {},
                    Status: {}
                }
            }
        },
        RegisterPackageVersion: {
            http: {
                method: "PUT",
                requestUri: "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion", "PatchVersion" ],
                members: {
                    MarkLatest: {
                        type: "boolean"
                    },
                    OwnerAccount: {},
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "uri",
                        locationName: "PatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveApplicationInstance: {
            http: {
                method: "DELETE",
                requestUri: "/application-instances/{ApplicationInstanceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SignalApplicationInstanceNodeInstances: {
            http: {
                method: "PUT",
                requestUri: "/application-instances/{ApplicationInstanceId}/node-signals",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId", "NodeSignals" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    },
                    NodeSignals: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NodeInstanceId", "Signal" ],
                            members: {
                                NodeInstanceId: {},
                                Signal: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDeviceMetadata: {
            http: {
                method: "PUT",
                requestUri: "/devices/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    Description: {},
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                PayloadData: {}
            },
            union: true
        },
        S7: {
            type: "structure",
            members: {
                PayloadData: {}
            },
            union: true
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ResourceType", "Tags" ],
                members: {
                    ResourceType: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        Sy: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        S17: {
            type: "structure",
            required: [ "BinaryPrefixLocation", "Bucket", "GeneratedPrefixLocation", "ManifestPrefixLocation", "RepoPrefixLocation" ],
            members: {
                BinaryPrefixLocation: {},
                Bucket: {},
                GeneratedPrefixLocation: {},
                ManifestPrefixLocation: {},
                RepoPrefixLocation: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                PackageVersionInputConfig: {
                    type: "structure",
                    required: [ "S3Location" ],
                    members: {
                        S3Location: {
                            type: "structure",
                            required: [ "BucketName", "ObjectKey" ],
                            members: {
                                BucketName: {},
                                ObjectKey: {},
                                Region: {}
                            }
                        }
                    }
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                PackageVersionOutputConfig: {
                    type: "structure",
                    required: [ "PackageName", "PackageVersion" ],
                    members: {
                        MarkLatest: {
                            type: "boolean"
                        },
                        PackageName: {},
                        PackageVersion: {}
                    }
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DesiredState", "DeviceReportedStatus", "DeviceReportedTime", "RuntimeContextName" ],
                members: {
                    DesiredState: {},
                    DeviceReportedStatus: {},
                    DeviceReportedTime: {
                        type: "timestamp"
                    },
                    RuntimeContextName: {}
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                ConnectionStatus: {},
                HwAddress: {},
                IpAddress: {}
            }
        },
        S2u: {
            type: "structure",
            members: {
                ImageVersion: {},
                JobType: {},
                Status: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                Ethernet0: {
                    shape: "S2z"
                },
                Ethernet1: {
                    shape: "S2z"
                },
                Ntp: {
                    type: "structure",
                    required: [ "NtpServers" ],
                    members: {
                        NtpServers: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S2z: {
            type: "structure",
            required: [ "ConnectionType" ],
            members: {
                ConnectionType: {},
                StaticIpConnectionInfo: {
                    type: "structure",
                    required: [ "DefaultGateway", "Dns", "IpAddress", "Mask" ],
                    members: {
                        DefaultGateway: {},
                        Dns: {
                            type: "list",
                            member: {}
                        },
                        IpAddress: {},
                        Mask: {}
                    }
                }
            }
        },
        S3z: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListApplicationInstanceDependencies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListApplicationInstanceNodeInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListApplicationInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDevicesJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodeFromTemplateJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackageImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["chimesdkmeetings"] = {};

AWS.ChimeSDKMeetings = AWS.Service.defineService("chimesdkmeetings", [ "2021-07-15" ]);

AWS.apiLoader.services["chimesdkmeetings"]["2021-07-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-15",
        endpointPrefix: "meetings-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Meetings",
        serviceId: "Chime SDK Meetings",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-meetings-2021-07-15"
    },
    operations: {
        BatchCreateAttendee: {
            http: {
                requestUri: "/meetings/{MeetingId}/attendees?operation=batch-create"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "Attendees" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "S9"
                    },
                    Errors: {
                        shape: "Sc"
                    }
                }
            }
        },
        BatchUpdateAttendeeCapabilitiesExcept: {
            http: {
                method: "PUT",
                requestUri: "/meetings/{MeetingId}/attendees/capabilities?operation=batch-update-except",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "ExcludedAttendeeIds", "Capabilities" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    ExcludedAttendeeIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AttendeeId" ],
                            members: {
                                AttendeeId: {}
                            }
                        }
                    },
                    Capabilities: {
                        shape: "S6"
                    }
                }
            }
        },
        CreateAttendee: {
            http: {
                requestUri: "/meetings/{MeetingId}/attendees"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "ExternalUserId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    ExternalUserId: {
                        shape: "S5"
                    },
                    Capabilities: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateMeeting: {
            http: {
                requestUri: "/meetings"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "MediaRegion", "ExternalMeetingId" ],
                members: {
                    ClientRequestToken: {
                        shape: "Sl",
                        idempotencyToken: true
                    },
                    MediaRegion: {},
                    MeetingHostId: {
                        shape: "S5"
                    },
                    ExternalMeetingId: {
                        shape: "Sn"
                    },
                    NotificationsConfiguration: {
                        shape: "So"
                    },
                    MeetingFeatures: {
                        shape: "Sq"
                    },
                    PrimaryMeetingId: {},
                    TenantIds: {
                        shape: "Su"
                    },
                    Tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S11"
                    }
                }
            }
        },
        CreateMeetingWithAttendees: {
            http: {
                requestUri: "/meetings?operation=create-attendees"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "MediaRegion", "ExternalMeetingId", "Attendees" ],
                members: {
                    ClientRequestToken: {
                        shape: "Sl",
                        idempotencyToken: true
                    },
                    MediaRegion: {},
                    MeetingHostId: {
                        shape: "S5"
                    },
                    ExternalMeetingId: {
                        shape: "Sn"
                    },
                    MeetingFeatures: {
                        shape: "Sq"
                    },
                    NotificationsConfiguration: {
                        shape: "So"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    PrimaryMeetingId: {},
                    TenantIds: {
                        shape: "Su"
                    },
                    Tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S11"
                    },
                    Attendees: {
                        shape: "S9"
                    },
                    Errors: {
                        shape: "Sc"
                    }
                }
            }
        },
        DeleteAttendee: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    }
                }
            }
        },
        DeleteMeeting: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{MeetingId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            }
        },
        GetAttendee: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetMeeting: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}"
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S11"
                    }
                }
            }
        },
        ListAttendees: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}/attendees",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "S9"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sw"
                    }
                }
            }
        },
        StartMeetingTranscription: {
            http: {
                requestUri: "/meetings/{MeetingId}/transcription?operation=start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TranscriptionConfiguration" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    TranscriptionConfiguration: {
                        type: "structure",
                        members: {
                            EngineTranscribeSettings: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    VocabularyFilterMethod: {},
                                    VocabularyFilterName: {},
                                    VocabularyName: {},
                                    Region: {},
                                    EnablePartialResultsStabilization: {
                                        type: "boolean"
                                    },
                                    PartialResultsStability: {},
                                    ContentIdentificationType: {},
                                    ContentRedactionType: {},
                                    PiiEntityTypes: {},
                                    LanguageModelName: {},
                                    IdentifyLanguage: {
                                        type: "boolean"
                                    },
                                    LanguageOptions: {},
                                    PreferredLanguage: {},
                                    VocabularyNames: {},
                                    VocabularyFilterNames: {}
                                }
                            },
                            EngineTranscribeMedicalSettings: {
                                type: "structure",
                                required: [ "LanguageCode", "Specialty", "Type" ],
                                members: {
                                    LanguageCode: {},
                                    Specialty: {},
                                    Type: {},
                                    VocabularyName: {},
                                    Region: {},
                                    ContentIdentificationType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        StopMeetingTranscription: {
            http: {
                requestUri: "/meetings/{MeetingId}/transcription?operation=stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAttendeeCapabilities: {
            http: {
                method: "PUT",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}/capabilities"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId", "Capabilities" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    },
                    Capabilities: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Sa"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "ExternalUserId" ],
            members: {
                ExternalUserId: {
                    shape: "S5"
                },
                Capabilities: {
                    shape: "S6"
                }
            }
        },
        S5: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "structure",
            required: [ "Audio", "Video", "Content" ],
            members: {
                Audio: {},
                Video: {},
                Content: {}
            }
        },
        S9: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        Sa: {
            type: "structure",
            members: {
                ExternalUserId: {
                    shape: "S5"
                },
                AttendeeId: {},
                JoinToken: {
                    type: "string",
                    sensitive: true
                },
                Capabilities: {
                    shape: "S6"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ExternalUserId: {
                        shape: "S5"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "structure",
            members: {
                LambdaFunctionArn: {
                    shape: "Sp"
                },
                SnsTopicArn: {
                    shape: "Sp"
                },
                SqsQueueArn: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Sq: {
            type: "structure",
            members: {
                Audio: {
                    type: "structure",
                    members: {
                        EchoReduction: {}
                    }
                }
            }
        },
        Su: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                MeetingId: {},
                MeetingHostId: {
                    shape: "S5"
                },
                ExternalMeetingId: {
                    shape: "Sn"
                },
                MediaRegion: {},
                MediaPlacement: {
                    type: "structure",
                    members: {
                        AudioHostUrl: {},
                        AudioFallbackUrl: {},
                        SignalingUrl: {},
                        TurnControlUrl: {},
                        ScreenDataUrl: {},
                        ScreenViewingUrl: {},
                        ScreenSharingUrl: {},
                        EventIngestionUrl: {}
                    }
                },
                MeetingFeatures: {
                    shape: "Sq"
                },
                PrimaryMeetingId: {},
                TenantIds: {
                    shape: "Su"
                },
                MeetingArn: {}
            }
        }
    },
    paginators: {
        ListAttendees: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["resiliencehub"] = {};

AWS.Resiliencehub = AWS.Service.defineService("resiliencehub", [ "2020-04-30" ]);

AWS.apiLoader.services["resiliencehub"]["2020-04-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-04-30",
        endpointPrefix: "resiliencehub",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Resilience Hub",
        serviceId: "resiliencehub",
        signatureVersion: "v4",
        signingName: "resiliencehub",
        uid: "resiliencehub-2020-04-30"
    },
    operations: {
        AddDraftAppVersionResourceMappings: {
            http: {
                requestUri: "/add-draft-app-version-resource-mappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "resourceMappings" ],
                members: {
                    appArn: {},
                    resourceMappings: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "resourceMappings" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    resourceMappings: {
                        shape: "S3"
                    }
                }
            }
        },
        BatchUpdateRecommendationStatus: {
            http: {
                requestUri: "/batch-update-recommendation-status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "requestEntries" ],
                members: {
                    appArn: {},
                    requestEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "excluded", "item", "referenceId" ],
                            members: {
                                entryId: {},
                                excludeReason: {},
                                excluded: {
                                    type: "boolean"
                                },
                                item: {
                                    shape: "Sj"
                                },
                                referenceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "failedEntries", "successfulEntries" ],
                members: {
                    appArn: {},
                    failedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "errorMessage" ],
                            members: {
                                entryId: {},
                                errorMessage: {}
                            }
                        }
                    },
                    successfulEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "excluded", "item", "referenceId" ],
                            members: {
                                entryId: {},
                                excludeReason: {},
                                excluded: {
                                    type: "boolean"
                                },
                                item: {
                                    shape: "Sj"
                                },
                                referenceId: {}
                            }
                        }
                    }
                }
            }
        },
        CreateApp: {
            http: {
                requestUri: "/create-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    assessmentSchedule: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    eventSubscriptions: {
                        shape: "Sw"
                    },
                    name: {},
                    permissionModel: {
                        shape: "Sz"
                    },
                    policyArn: {},
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S18"
                    }
                }
            }
        },
        CreateAppVersionAppComponent: {
            http: {
                requestUri: "/create-app-version-app-component",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "name", "type" ],
                members: {
                    additionalInfo: {
                        shape: "S1g"
                    },
                    appArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    id: {},
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appComponent: {
                        shape: "S1l"
                    },
                    appVersion: {}
                }
            }
        },
        CreateAppVersionResource: {
            http: {
                requestUri: "/create-app-version-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appComponents", "logicalResourceId", "physicalResourceId", "resourceType" ],
                members: {
                    additionalInfo: {
                        shape: "S1g"
                    },
                    appArn: {},
                    appComponents: {
                        shape: "S1n"
                    },
                    awsAccountId: {},
                    awsRegion: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    logicalResourceId: {
                        shape: "S1o"
                    },
                    physicalResourceId: {},
                    resourceName: {},
                    resourceType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    physicalResource: {
                        shape: "S1r"
                    }
                }
            }
        },
        CreateRecommendationTemplate: {
            http: {
                requestUri: "/create-recommendation-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn", "name" ],
                members: {
                    assessmentArn: {},
                    bucketName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    format: {},
                    name: {},
                    recommendationIds: {
                        shape: "S1w"
                    },
                    recommendationTypes: {
                        shape: "S1y"
                    },
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendationTemplate: {
                        shape: "S21"
                    }
                }
            }
        },
        CreateResiliencyPolicy: {
            http: {
                requestUri: "/create-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policy", "policyName", "tier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    dataLocationConstraint: {},
                    policy: {
                        shape: "S26"
                    },
                    policyDescription: {},
                    policyName: {},
                    tags: {
                        shape: "S14"
                    },
                    tier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy" ],
                members: {
                    policy: {
                        shape: "S2c"
                    }
                }
            }
        },
        DeleteApp: {
            http: {
                requestUri: "/delete-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {}
                }
            }
        },
        DeleteAppAssessment: {
            http: {
                requestUri: "/delete-app-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentArn", "assessmentStatus" ],
                members: {
                    assessmentArn: {},
                    assessmentStatus: {}
                }
            }
        },
        DeleteAppInputSource: {
            http: {
                requestUri: "/delete-app-input-source",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    eksSourceClusterNamespace: {
                        shape: "S2k"
                    },
                    sourceArn: {},
                    terraformSource: {
                        shape: "S2m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    appArn: {},
                    appInputSource: {
                        shape: "S2p"
                    }
                }
            }
        },
        DeleteAppVersionAppComponent: {
            http: {
                requestUri: "/delete-app-version-app-component",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "id" ],
                members: {
                    appArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appComponent: {
                        shape: "S1l"
                    },
                    appVersion: {}
                }
            }
        },
        DeleteAppVersionResource: {
            http: {
                requestUri: "/delete-app-version-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    awsAccountId: {},
                    awsRegion: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    logicalResourceId: {
                        shape: "S1o"
                    },
                    physicalResourceId: {},
                    resourceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    physicalResource: {
                        shape: "S1r"
                    }
                }
            }
        },
        DeleteRecommendationTemplate: {
            http: {
                requestUri: "/delete-recommendation-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recommendationTemplateArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    recommendationTemplateArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "recommendationTemplateArn", "status" ],
                members: {
                    recommendationTemplateArn: {},
                    status: {}
                }
            }
        },
        DeleteResiliencyPolicy: {
            http: {
                requestUri: "/delete-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    policyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    policyArn: {}
                }
            }
        },
        DescribeApp: {
            http: {
                requestUri: "/describe-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S18"
                    }
                }
            }
        },
        DescribeAppAssessment: {
            http: {
                requestUri: "/describe-app-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assessment" ],
                members: {
                    assessment: {
                        shape: "S33"
                    }
                }
            }
        },
        DescribeAppVersion: {
            http: {
                requestUri: "/describe-app-version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    additionalInfo: {
                        shape: "S1g"
                    },
                    appArn: {},
                    appVersion: {}
                }
            }
        },
        DescribeAppVersionAppComponent: {
            http: {
                requestUri: "/describe-app-version-app-component",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion", "id" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appComponent: {
                        shape: "S1l"
                    },
                    appVersion: {}
                }
            }
        },
        DescribeAppVersionResource: {
            http: {
                requestUri: "/describe-app-version-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    awsAccountId: {},
                    awsRegion: {},
                    logicalResourceId: {
                        shape: "S1o"
                    },
                    physicalResourceId: {},
                    resourceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    physicalResource: {
                        shape: "S1r"
                    }
                }
            }
        },
        DescribeAppVersionResourcesResolutionStatus: {
            http: {
                requestUri: "/describe-app-version-resources-resolution-status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    resolutionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "resolutionId", "status" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    errorMessage: {},
                    resolutionId: {},
                    status: {}
                }
            }
        },
        DescribeAppVersionTemplate: {
            http: {
                requestUri: "/describe-app-version-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appTemplateBody", "appVersion" ],
                members: {
                    appArn: {},
                    appTemplateBody: {},
                    appVersion: {}
                }
            }
        },
        DescribeDraftAppVersionResourcesImportStatus: {
            http: {
                requestUri: "/describe-draft-app-version-resources-import-status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "status", "statusChangeTime" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    errorMessage: {},
                    status: {},
                    statusChangeTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeResiliencyPolicy: {
            http: {
                requestUri: "/describe-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    policyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy" ],
                members: {
                    policy: {
                        shape: "S2c"
                    }
                }
            }
        },
        ImportResourcesToDraftAppVersion: {
            http: {
                requestUri: "/import-resources-to-draft-app-version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    eksSources: {
                        shape: "S43"
                    },
                    importStrategy: {},
                    sourceArns: {
                        shape: "S47"
                    },
                    terraformSources: {
                        shape: "S48"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "status" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    eksSources: {
                        shape: "S43"
                    },
                    sourceArns: {
                        shape: "S47"
                    },
                    status: {},
                    terraformSources: {
                        shape: "S48"
                    }
                }
            }
        },
        ListAlarmRecommendations: {
            http: {
                requestUri: "/list-alarm-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "alarmRecommendations" ],
                members: {
                    alarmRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "recommendationId", "referenceId", "type" ],
                            members: {
                                appComponentName: {
                                    deprecated: true,
                                    deprecatedMessage: "An alarm recommendation can be attached to multiple Application Components, hence this property will be replaced by the new property 'appComponentNames'."
                                },
                                appComponentNames: {
                                    shape: "S1n"
                                },
                                description: {},
                                items: {
                                    shape: "S4h"
                                },
                                name: {},
                                prerequisite: {},
                                recommendationId: {},
                                recommendationStatus: {},
                                referenceId: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppAssessmentComplianceDrifts: {
            http: {
                requestUri: "/list-app-assessment-compliance-drifts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "complianceDrifts" ],
                members: {
                    complianceDrifts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                actualReferenceId: {},
                                actualValue: {
                                    shape: "S34"
                                },
                                appId: {},
                                appVersion: {},
                                diffType: {},
                                driftType: {},
                                entityId: {},
                                entityType: {},
                                expectedReferenceId: {},
                                expectedValue: {
                                    shape: "S34"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppAssessments: {
            http: {
                method: "GET",
                requestUri: "/list-app-assessments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    appArn: {
                        location: "querystring",
                        locationName: "appArn"
                    },
                    assessmentName: {
                        location: "querystring",
                        locationName: "assessmentName"
                    },
                    assessmentStatus: {
                        location: "querystring",
                        locationName: "assessmentStatus",
                        type: "list",
                        member: {}
                    },
                    complianceStatus: {
                        location: "querystring",
                        locationName: "complianceStatus"
                    },
                    invoker: {
                        location: "querystring",
                        locationName: "invoker"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    reverseOrder: {
                        location: "querystring",
                        locationName: "reverseOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentSummaries" ],
                members: {
                    assessmentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assessmentArn", "assessmentStatus" ],
                            members: {
                                appArn: {},
                                appVersion: {},
                                assessmentArn: {},
                                assessmentName: {},
                                assessmentStatus: {},
                                complianceStatus: {},
                                cost: {
                                    shape: "S37"
                                },
                                driftStatus: {},
                                endTime: {
                                    type: "timestamp"
                                },
                                invoker: {},
                                message: {},
                                resiliencyScore: {
                                    type: "double"
                                },
                                startTime: {
                                    type: "timestamp"
                                },
                                versionName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppComponentCompliances: {
            http: {
                requestUri: "/list-app-component-compliances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "componentCompliances" ],
                members: {
                    componentCompliances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                appComponentName: {},
                                compliance: {
                                    shape: "S34"
                                },
                                cost: {
                                    shape: "S37"
                                },
                                message: {},
                                resiliencyScore: {
                                    shape: "S3c"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppComponentRecommendations: {
            http: {
                requestUri: "/list-app-component-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "componentRecommendations" ],
                members: {
                    componentRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appComponentName", "configRecommendations", "recommendationStatus" ],
                            members: {
                                appComponentName: {},
                                configRecommendations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "optimizationType", "referenceId" ],
                                        members: {
                                            appComponentName: {},
                                            compliance: {
                                                shape: "S34"
                                            },
                                            cost: {
                                                shape: "S37"
                                            },
                                            description: {},
                                            haArchitecture: {},
                                            name: {},
                                            optimizationType: {},
                                            recommendationCompliance: {
                                                type: "map",
                                                key: {},
                                                value: {
                                                    type: "structure",
                                                    required: [ "expectedComplianceStatus" ],
                                                    members: {
                                                        expectedComplianceStatus: {},
                                                        expectedRpoDescription: {},
                                                        expectedRpoInSecs: {
                                                            type: "integer"
                                                        },
                                                        expectedRtoDescription: {},
                                                        expectedRtoInSecs: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            referenceId: {},
                                            suggestedChanges: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    }
                                },
                                recommendationStatus: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppInputSources: {
            http: {
                requestUri: "/list-app-input-sources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appInputSources" ],
                members: {
                    appInputSources: {
                        type: "list",
                        member: {
                            shape: "S2p"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppVersionAppComponents: {
            http: {
                requestUri: "/list-app-version-app-components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appComponents: {
                        shape: "S1s"
                    },
                    appVersion: {},
                    nextToken: {}
                }
            }
        },
        ListAppVersionResourceMappings: {
            http: {
                requestUri: "/list-app-version-resource-mappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "resourceMappings" ],
                members: {
                    nextToken: {},
                    resourceMappings: {
                        shape: "S3"
                    }
                }
            }
        },
        ListAppVersionResources: {
            http: {
                requestUri: "/list-app-version-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resolutionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "physicalResources", "resolutionId" ],
                members: {
                    nextToken: {},
                    physicalResources: {
                        type: "list",
                        member: {
                            shape: "S1r"
                        }
                    },
                    resolutionId: {}
                }
            }
        },
        ListAppVersions: {
            http: {
                requestUri: "/list-app-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    endTime: {
                        type: "timestamp"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    startTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appVersions" ],
                members: {
                    appVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appVersion" ],
                            members: {
                                appVersion: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                identifier: {
                                    type: "long"
                                },
                                versionName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListApps: {
            http: {
                method: "GET",
                requestUri: "/list-apps",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    appArn: {
                        location: "querystring",
                        locationName: "appArn"
                    },
                    fromLastAssessmentTime: {
                        location: "querystring",
                        locationName: "fromLastAssessmentTime",
                        type: "timestamp"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    reverseOrder: {
                        location: "querystring",
                        locationName: "reverseOrder",
                        type: "boolean"
                    },
                    toLastAssessmentTime: {
                        location: "querystring",
                        locationName: "toLastAssessmentTime",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appSummaries" ],
                members: {
                    appSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appArn", "creationTime", "name" ],
                            members: {
                                appArn: {},
                                assessmentSchedule: {},
                                complianceStatus: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                driftStatus: {},
                                lastAppComplianceEvaluationTime: {
                                    type: "timestamp"
                                },
                                name: {},
                                resiliencyScore: {
                                    type: "double"
                                },
                                rpoInSecs: {
                                    type: "integer"
                                },
                                rtoInSecs: {
                                    type: "integer"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecommendationTemplates: {
            http: {
                method: "GET",
                requestUri: "/list-recommendation-templates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {
                        location: "querystring",
                        locationName: "assessmentArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    recommendationTemplateArn: {
                        location: "querystring",
                        locationName: "recommendationTemplateArn"
                    },
                    reverseOrder: {
                        location: "querystring",
                        locationName: "reverseOrder",
                        type: "boolean"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    recommendationTemplates: {
                        type: "list",
                        member: {
                            shape: "S21"
                        }
                    }
                }
            }
        },
        ListResiliencyPolicies: {
            http: {
                method: "GET",
                requestUri: "/list-resiliency-policies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    policyName: {
                        location: "querystring",
                        locationName: "policyName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resiliencyPolicies" ],
                members: {
                    nextToken: {},
                    resiliencyPolicies: {
                        shape: "S61"
                    }
                }
            }
        },
        ListSopRecommendations: {
            http: {
                requestUri: "/list-sop-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "sopRecommendations" ],
                members: {
                    nextToken: {},
                    sopRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "recommendationId", "referenceId", "serviceType" ],
                            members: {
                                appComponentName: {},
                                description: {},
                                items: {
                                    shape: "S4h"
                                },
                                name: {},
                                prerequisite: {},
                                recommendationId: {},
                                recommendationStatus: {},
                                referenceId: {},
                                serviceType: {}
                            }
                        }
                    }
                }
            }
        },
        ListSuggestedResiliencyPolicies: {
            http: {
                method: "GET",
                requestUri: "/list-suggested-resiliency-policies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resiliencyPolicies" ],
                members: {
                    nextToken: {},
                    resiliencyPolicies: {
                        shape: "S61"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S14"
                    }
                }
            }
        },
        ListTestRecommendations: {
            http: {
                requestUri: "/list-test-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "testRecommendations" ],
                members: {
                    nextToken: {},
                    testRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "referenceId" ],
                            members: {
                                appComponentName: {},
                                dependsOnAlarms: {
                                    type: "list",
                                    member: {}
                                },
                                description: {},
                                intent: {},
                                items: {
                                    shape: "S4h"
                                },
                                name: {},
                                prerequisite: {},
                                recommendationId: {},
                                recommendationStatus: {},
                                referenceId: {},
                                risk: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListUnsupportedAppVersionResources: {
            http: {
                requestUri: "/list-unsupported-app-version-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resolutionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "resolutionId", "unsupportedResources" ],
                members: {
                    nextToken: {},
                    resolutionId: {},
                    unsupportedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "logicalResourceId", "physicalResourceId", "resourceType" ],
                            members: {
                                logicalResourceId: {
                                    shape: "S1o"
                                },
                                physicalResourceId: {
                                    shape: "S8"
                                },
                                resourceType: {},
                                unsupportedResourceStatus: {}
                            }
                        }
                    }
                }
            }
        },
        PublishAppVersion: {
            http: {
                requestUri: "/publish-app-version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    versionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    identifier: {
                        type: "long"
                    },
                    versionName: {}
                }
            }
        },
        PutDraftAppVersionTemplate: {
            http: {
                requestUri: "/put-draft-app-version-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appTemplateBody" ],
                members: {
                    appArn: {},
                    appTemplateBody: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    appArn: {},
                    appVersion: {}
                }
            }
        },
        RemoveDraftAppVersionResourceMappings: {
            http: {
                requestUri: "/remove-draft-app-version-resource-mappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    appRegistryAppNames: {
                        shape: "S6s"
                    },
                    eksSourceNames: {
                        shape: "S6t"
                    },
                    logicalStackNames: {
                        shape: "S6t"
                    },
                    resourceGroupNames: {
                        shape: "S6s"
                    },
                    resourceNames: {
                        shape: "S6s"
                    },
                    terraformSourceNames: {
                        shape: "S6t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    appArn: {},
                    appVersion: {}
                }
            }
        },
        ResolveAppVersionResources: {
            http: {
                requestUri: "/resolve-app-version-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "resolutionId", "status" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    resolutionId: {},
                    status: {}
                }
            }
        },
        StartAppAssessment: {
            http: {
                requestUri: "/start-app-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion", "assessmentName" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    assessmentName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessment" ],
                members: {
                    assessment: {
                        shape: "S33"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApp: {
            http: {
                requestUri: "/update-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    assessmentSchedule: {},
                    clearResiliencyPolicyArn: {
                        type: "boolean"
                    },
                    description: {},
                    eventSubscriptions: {
                        shape: "Sw"
                    },
                    permissionModel: {
                        shape: "Sz"
                    },
                    policyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S18"
                    }
                }
            }
        },
        UpdateAppVersion: {
            http: {
                requestUri: "/update-app-version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    additionalInfo: {
                        shape: "S1g"
                    },
                    appArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    additionalInfo: {
                        shape: "S1g"
                    },
                    appArn: {},
                    appVersion: {}
                }
            }
        },
        UpdateAppVersionAppComponent: {
            http: {
                requestUri: "/update-app-version-app-component",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "id" ],
                members: {
                    additionalInfo: {
                        shape: "S1g"
                    },
                    appArn: {},
                    id: {},
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appComponent: {
                        shape: "S1l"
                    },
                    appVersion: {}
                }
            }
        },
        UpdateAppVersionResource: {
            http: {
                requestUri: "/update-app-version-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    additionalInfo: {
                        shape: "S1g"
                    },
                    appArn: {},
                    appComponents: {
                        shape: "S1n"
                    },
                    awsAccountId: {},
                    awsRegion: {},
                    excluded: {
                        type: "boolean"
                    },
                    logicalResourceId: {
                        shape: "S1o"
                    },
                    physicalResourceId: {},
                    resourceName: {},
                    resourceType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    physicalResource: {
                        shape: "S1r"
                    }
                }
            }
        },
        UpdateResiliencyPolicy: {
            http: {
                requestUri: "/update-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    dataLocationConstraint: {},
                    policy: {
                        shape: "S26"
                    },
                    policyArn: {},
                    policyDescription: {},
                    policyName: {},
                    tier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy" ],
                members: {
                    policy: {
                        shape: "S2c"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "mappingType", "physicalResourceId" ],
                members: {
                    appRegistryAppName: {},
                    eksSourceName: {},
                    logicalStackName: {},
                    mappingType: {},
                    physicalResourceId: {
                        shape: "S8"
                    },
                    resourceGroupName: {},
                    resourceName: {},
                    terraformSourceName: {}
                }
            }
        },
        S8: {
            type: "structure",
            required: [ "identifier", "type" ],
            members: {
                awsAccountId: {},
                awsRegion: {},
                identifier: {},
                type: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                resourceId: {},
                targetAccountId: {},
                targetRegion: {}
            }
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventType", "name" ],
                members: {
                    eventType: {},
                    name: {},
                    snsTopicArn: {}
                }
            }
        },
        Sz: {
            type: "structure",
            required: [ "type" ],
            members: {
                crossAccountRoleArns: {
                    type: "list",
                    member: {}
                },
                invokerRoleName: {},
                type: {}
            }
        },
        S14: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S18: {
            type: "structure",
            required: [ "appArn", "creationTime", "name" ],
            members: {
                appArn: {},
                assessmentSchedule: {},
                complianceStatus: {},
                creationTime: {
                    type: "timestamp"
                },
                description: {},
                driftStatus: {},
                eventSubscriptions: {
                    shape: "Sw"
                },
                lastAppComplianceEvaluationTime: {
                    type: "timestamp"
                },
                lastDriftEvaluationTime: {
                    type: "timestamp"
                },
                lastResiliencyScoreEvaluationTime: {
                    type: "timestamp"
                },
                name: {},
                permissionModel: {
                    shape: "Sz"
                },
                policyArn: {},
                resiliencyScore: {
                    type: "double"
                },
                rpoInSecs: {
                    type: "integer"
                },
                rtoInSecs: {
                    type: "integer"
                },
                status: {},
                tags: {
                    shape: "S14"
                }
            }
        },
        S1g: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        S1l: {
            type: "structure",
            required: [ "name", "type" ],
            members: {
                additionalInfo: {
                    shape: "S1g"
                },
                id: {},
                name: {},
                type: {}
            }
        },
        S1n: {
            type: "list",
            member: {}
        },
        S1o: {
            type: "structure",
            required: [ "identifier" ],
            members: {
                eksSourceName: {},
                identifier: {},
                logicalStackName: {},
                resourceGroupName: {},
                terraformSourceName: {}
            }
        },
        S1r: {
            type: "structure",
            required: [ "logicalResourceId", "physicalResourceId", "resourceType" ],
            members: {
                additionalInfo: {
                    shape: "S1g"
                },
                appComponents: {
                    shape: "S1s"
                },
                excluded: {
                    type: "boolean"
                },
                logicalResourceId: {
                    shape: "S1o"
                },
                parentResourceName: {},
                physicalResourceId: {
                    shape: "S8"
                },
                resourceName: {},
                resourceType: {},
                sourceType: {}
            }
        },
        S1s: {
            type: "list",
            member: {
                shape: "S1l"
            }
        },
        S1w: {
            type: "list",
            member: {}
        },
        S1y: {
            type: "list",
            member: {}
        },
        S21: {
            type: "structure",
            required: [ "assessmentArn", "format", "name", "recommendationTemplateArn", "recommendationTypes", "status" ],
            members: {
                appArn: {},
                assessmentArn: {},
                endTime: {
                    type: "timestamp"
                },
                format: {},
                message: {},
                name: {},
                needsReplacements: {
                    type: "boolean"
                },
                recommendationIds: {
                    shape: "S1w"
                },
                recommendationTemplateArn: {},
                recommendationTypes: {
                    shape: "S1y"
                },
                startTime: {
                    type: "timestamp"
                },
                status: {},
                tags: {
                    shape: "S14"
                },
                templatesLocation: {
                    type: "structure",
                    members: {
                        bucket: {},
                        prefix: {}
                    }
                }
            }
        },
        S26: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "rpoInSecs", "rtoInSecs" ],
                members: {
                    rpoInSecs: {
                        type: "integer"
                    },
                    rtoInSecs: {
                        type: "integer"
                    }
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                creationTime: {
                    type: "timestamp"
                },
                dataLocationConstraint: {},
                estimatedCostTier: {},
                policy: {
                    shape: "S26"
                },
                policyArn: {},
                policyDescription: {},
                policyName: {},
                tags: {
                    shape: "S14"
                },
                tier: {}
            }
        },
        S2k: {
            type: "structure",
            required: [ "eksClusterArn", "namespace" ],
            members: {
                eksClusterArn: {},
                namespace: {}
            }
        },
        S2m: {
            type: "structure",
            required: [ "s3StateFileUrl" ],
            members: {
                s3StateFileUrl: {}
            }
        },
        S2p: {
            type: "structure",
            required: [ "importType" ],
            members: {
                eksSourceClusterNamespace: {
                    shape: "S2k"
                },
                importType: {},
                resourceCount: {
                    type: "integer"
                },
                sourceArn: {},
                sourceName: {},
                terraformSource: {
                    shape: "S2m"
                }
            }
        },
        S33: {
            type: "structure",
            required: [ "assessmentArn", "assessmentStatus", "invoker" ],
            members: {
                appArn: {},
                appVersion: {},
                assessmentArn: {},
                assessmentName: {},
                assessmentStatus: {},
                compliance: {
                    shape: "S34"
                },
                complianceStatus: {},
                cost: {
                    shape: "S37"
                },
                driftStatus: {},
                endTime: {
                    type: "timestamp"
                },
                invoker: {},
                message: {},
                policy: {
                    shape: "S2c"
                },
                resiliencyScore: {
                    shape: "S3c"
                },
                resourceErrorsDetails: {
                    type: "structure",
                    members: {
                        hasMoreErrors: {
                            type: "boolean"
                        },
                        resourceErrors: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    logicalResourceId: {},
                                    physicalResourceId: {},
                                    reason: {}
                                }
                            }
                        }
                    }
                },
                startTime: {
                    type: "timestamp"
                },
                tags: {
                    shape: "S14"
                },
                versionName: {}
            }
        },
        S34: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "complianceStatus" ],
                members: {
                    achievableRpoInSecs: {
                        type: "integer"
                    },
                    achievableRtoInSecs: {
                        type: "integer"
                    },
                    complianceStatus: {},
                    currentRpoInSecs: {
                        type: "integer"
                    },
                    currentRtoInSecs: {
                        type: "integer"
                    },
                    message: {},
                    rpoDescription: {},
                    rpoReferenceId: {},
                    rtoDescription: {},
                    rtoReferenceId: {}
                }
            }
        },
        S37: {
            type: "structure",
            required: [ "amount", "currency", "frequency" ],
            members: {
                amount: {
                    type: "double"
                },
                currency: {},
                frequency: {}
            }
        },
        S3c: {
            type: "structure",
            required: [ "disruptionScore", "score" ],
            members: {
                componentScore: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            excludedCount: {
                                type: "long"
                            },
                            outstandingCount: {
                                type: "long"
                            },
                            possibleScore: {
                                type: "double"
                            },
                            score: {
                                type: "double"
                            }
                        }
                    }
                },
                disruptionScore: {
                    type: "map",
                    key: {},
                    value: {
                        type: "double"
                    }
                },
                score: {
                    type: "double"
                }
            }
        },
        S43: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eksClusterArn", "namespaces" ],
                members: {
                    eksClusterArn: {},
                    namespaces: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S47: {
            type: "list",
            member: {}
        },
        S48: {
            type: "list",
            member: {
                shape: "S2m"
            }
        },
        S4h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    alreadyImplemented: {
                        type: "boolean"
                    },
                    excludeReason: {},
                    excluded: {
                        type: "boolean"
                    },
                    resourceId: {},
                    targetAccountId: {},
                    targetRegion: {}
                }
            }
        },
        S61: {
            type: "list",
            member: {
                shape: "S2c"
            }
        },
        S6s: {
            type: "list",
            member: {}
        },
        S6t: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAlarmRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppAssessmentComplianceDrifts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppAssessments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppComponentCompliances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppComponentRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppInputSources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppVersionAppComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppVersionResourceMappings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppVersionResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListApps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListRecommendationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResiliencyPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSopRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSuggestedResiliencyPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTestRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListUnsupportedAppVersionResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["migrationhubstrategy"] = {};

AWS.MigrationHubStrategy = AWS.Service.defineService("migrationhubstrategy", [ "2020-02-19" ]);

AWS.apiLoader.services["migrationhubstrategy"]["2020-02-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-02-19",
        endpointPrefix: "migrationhub-strategy",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Migration Hub Strategy Recommendations",
        serviceId: "MigrationHubStrategy",
        signatureVersion: "v4",
        signingName: "migrationhub-strategy",
        uid: "migrationhubstrategy-2020-02-19"
    },
    operations: {
        GetApplicationComponentDetails: {
            http: {
                method: "GET",
                requestUri: "/get-applicationcomponent-details/{applicationComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationComponentId" ],
                members: {
                    applicationComponentId: {
                        location: "uri",
                        locationName: "applicationComponentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationComponentDetail: {
                        shape: "S4"
                    },
                    associatedApplications: {
                        shape: "S1b"
                    },
                    associatedServerIds: {
                        type: "list",
                        member: {}
                    },
                    moreApplicationResource: {
                        type: "boolean"
                    }
                }
            }
        },
        GetApplicationComponentStrategies: {
            http: {
                method: "GET",
                requestUri: "/get-applicationcomponent-strategies/{applicationComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationComponentId" ],
                members: {
                    applicationComponentId: {
                        location: "uri",
                        locationName: "applicationComponentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationComponentStrategies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                isPreferred: {
                                    type: "boolean"
                                },
                                recommendation: {
                                    shape: "Sq"
                                },
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        GetAssessment: {
            http: {
                method: "GET",
                requestUri: "/get-assessment/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentTargets: {
                        shape: "S1m"
                    },
                    dataCollectionDetails: {
                        type: "structure",
                        members: {
                            completionTime: {
                                type: "timestamp"
                            },
                            failed: {
                                type: "integer"
                            },
                            inProgress: {
                                type: "integer"
                            },
                            servers: {
                                type: "integer"
                            },
                            startTime: {
                                type: "timestamp"
                            },
                            status: {},
                            statusMessage: {},
                            success: {
                                type: "integer"
                            }
                        }
                    },
                    id: {}
                }
            }
        },
        GetImportFileTask: {
            http: {
                method: "GET",
                requestUri: "/get-import-file-task/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    completionTime: {
                        type: "timestamp"
                    },
                    id: {},
                    importName: {},
                    inputS3Bucket: {},
                    inputS3Key: {},
                    numberOfRecordsFailed: {
                        type: "integer"
                    },
                    numberOfRecordsSuccess: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    status: {},
                    statusReportS3Bucket: {},
                    statusReportS3Key: {}
                }
            }
        },
        GetLatestAssessmentId: {
            http: {
                method: "GET",
                requestUri: "/get-latest-assessment-id",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        GetPortfolioPreferences: {
            http: {
                method: "GET",
                requestUri: "/get-portfolio-preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    applicationMode: {},
                    applicationPreferences: {
                        shape: "S23"
                    },
                    databasePreferences: {
                        shape: "S2e"
                    },
                    prioritizeBusinessGoals: {
                        shape: "S2q"
                    }
                }
            }
        },
        GetPortfolioSummary: {
            http: {
                method: "GET",
                requestUri: "/get-portfolio-summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    assessmentSummary: {
                        type: "structure",
                        members: {
                            antipatternReportS3Object: {
                                shape: "S6"
                            },
                            antipatternReportStatus: {},
                            antipatternReportStatusMessage: {},
                            lastAnalyzedTimestamp: {
                                type: "timestamp"
                            },
                            listAntipatternSeveritySummary: {
                                shape: "Sk"
                            },
                            listApplicationComponentStatusSummary: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        count: {
                                            type: "integer"
                                        },
                                        srcCodeOrDbAnalysisStatus: {}
                                    }
                                }
                            },
                            listApplicationComponentStrategySummary: {
                                shape: "S2y"
                            },
                            listApplicationComponentSummary: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        appType: {},
                                        count: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            listServerStatusSummary: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        count: {
                                            type: "integer"
                                        },
                                        runTimeAssessmentStatus: {}
                                    }
                                }
                            },
                            listServerStrategySummary: {
                                shape: "S2y"
                            },
                            listServerSummary: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ServerOsType: {},
                                        count: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetRecommendationReportDetails: {
            http: {
                method: "GET",
                requestUri: "/get-recommendation-report-details/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    recommendationReportDetails: {
                        type: "structure",
                        members: {
                            completionTime: {
                                type: "timestamp"
                            },
                            s3Bucket: {},
                            s3Keys: {
                                type: "list",
                                member: {}
                            },
                            startTime: {
                                type: "timestamp"
                            },
                            status: {},
                            statusMessage: {}
                        }
                    }
                }
            }
        },
        GetServerDetails: {
            http: {
                method: "GET",
                requestUri: "/get-server-details/{serverId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serverId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    serverId: {
                        location: "uri",
                        locationName: "serverId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associatedApplications: {
                        shape: "S1b"
                    },
                    nextToken: {},
                    serverDetail: {
                        shape: "S3k"
                    }
                }
            }
        },
        GetServerStrategies: {
            http: {
                method: "GET",
                requestUri: "/get-server-strategies/{serverId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serverId" ],
                members: {
                    serverId: {
                        location: "uri",
                        locationName: "serverId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    serverStrategies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                isPreferred: {
                                    type: "boolean"
                                },
                                numberOfApplicationComponents: {
                                    type: "integer"
                                },
                                recommendation: {
                                    shape: "Sq"
                                },
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        ListAnalyzableServers: {
            http: {
                requestUri: "/list-analyzable-servers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sort: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    analyzableServers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                hostname: {},
                                ipAddress: {},
                                source: {},
                                vmId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListApplicationComponents: {
            http: {
                requestUri: "/list-applicationcomponents",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    applicationComponentCriteria: {},
                    filterValue: {},
                    groupIdFilter: {
                        shape: "S49"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sort: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationComponentInfos: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCollectors: {
            http: {
                method: "GET",
                requestUri: "/list-collectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Collectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                collectorHealth: {},
                                collectorId: {},
                                collectorVersion: {},
                                configurationSummary: {
                                    type: "structure",
                                    members: {
                                        ipAddressBasedRemoteInfoList: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    authType: {},
                                                    ipAddressConfigurationTimeStamp: {},
                                                    osType: {}
                                                }
                                            }
                                        },
                                        pipelineInfoList: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    pipelineConfigurationTimeStamp: {},
                                                    pipelineType: {}
                                                }
                                            }
                                        },
                                        remoteSourceCodeAnalysisServerInfo: {
                                            type: "structure",
                                            members: {
                                                remoteSourceCodeAnalysisServerConfigurationTimestamp: {}
                                            }
                                        },
                                        vcenterBasedRemoteInfoList: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    osType: {},
                                                    vcenterConfigurationTimeStamp: {}
                                                }
                                            }
                                        },
                                        versionControlInfoList: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    versionControlConfigurationTimeStamp: {},
                                                    versionControlType: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                hostName: {},
                                ipAddress: {},
                                lastActivityTimeStamp: {},
                                registeredTimeStamp: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImportFileTask: {
            http: {
                method: "GET",
                requestUri: "/list-import-file-task",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    taskInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                completionTime: {
                                    type: "timestamp"
                                },
                                id: {},
                                importName: {},
                                inputS3Bucket: {},
                                inputS3Key: {},
                                numberOfRecordsFailed: {
                                    type: "integer"
                                },
                                numberOfRecordsSuccess: {
                                    type: "integer"
                                },
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                statusReportS3Bucket: {},
                                statusReportS3Key: {}
                            }
                        }
                    }
                }
            }
        },
        ListServers: {
            http: {
                requestUri: "/list-servers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterValue: {},
                    groupIdFilter: {
                        shape: "S49"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    serverCriteria: {},
                    sort: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    serverInfos: {
                        type: "list",
                        member: {
                            shape: "S3k"
                        }
                    }
                }
            }
        },
        PutPortfolioPreferences: {
            http: {
                requestUri: "/put-portfolio-preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    applicationMode: {},
                    applicationPreferences: {
                        shape: "S23"
                    },
                    databasePreferences: {
                        shape: "S2e"
                    },
                    prioritizeBusinessGoals: {
                        shape: "S2q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartAssessment: {
            http: {
                requestUri: "/start-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    assessmentDataSourceType: {},
                    assessmentTargets: {
                        shape: "S1m"
                    },
                    s3bucketForAnalysisData: {},
                    s3bucketForReportData: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentId: {}
                }
            }
        },
        StartImportFileTask: {
            http: {
                requestUri: "/start-import-file-task",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "S3Bucket", "name", "s3key" ],
                members: {
                    S3Bucket: {},
                    dataSourceType: {},
                    groupId: {
                        shape: "S49"
                    },
                    name: {},
                    s3bucketForReportData: {},
                    s3key: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        StartRecommendationReportGeneration: {
            http: {
                requestUri: "/start-recommendation-report-generation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    groupIdFilter: {
                        shape: "S49"
                    },
                    outputFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        StopAssessment: {
            http: {
                requestUri: "/stop-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplicationComponentConfig: {
            http: {
                requestUri: "/update-applicationcomponent-config/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationComponentId" ],
                members: {
                    appType: {},
                    applicationComponentId: {},
                    configureOnly: {
                        type: "boolean"
                    },
                    inclusionStatus: {},
                    secretsManagerKey: {
                        type: "string",
                        sensitive: true
                    },
                    sourceCodeList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                location: {},
                                projectName: {},
                                sourceVersion: {},
                                versionControl: {}
                            }
                        }
                    },
                    strategyOption: {
                        shape: "S5t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServerConfig: {
            http: {
                requestUri: "/update-server-config/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serverId" ],
                members: {
                    serverId: {},
                    strategyOption: {
                        shape: "S5t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                analysisStatus: {},
                antipatternReportS3Object: {
                    shape: "S6"
                },
                antipatternReportStatus: {},
                antipatternReportStatusMessage: {},
                appType: {},
                appUnitError: {
                    type: "structure",
                    members: {
                        appUnitErrorCategory: {}
                    }
                },
                associatedServerId: {},
                databaseConfigDetail: {
                    type: "structure",
                    members: {
                        secretName: {}
                    }
                },
                id: {},
                inclusionStatus: {},
                lastAnalyzedTimestamp: {
                    type: "timestamp"
                },
                listAntipatternSeveritySummary: {
                    shape: "Sk"
                },
                moreServerAssociationExists: {
                    type: "boolean"
                },
                name: {},
                osDriver: {},
                osVersion: {},
                recommendationSet: {
                    shape: "Sq"
                },
                resourceSubType: {},
                resultList: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            analysisStatus: {
                                type: "structure",
                                members: {
                                    runtimeAnalysisStatus: {},
                                    srcCodeOrDbAnalysisStatus: {}
                                },
                                union: true
                            },
                            analysisType: {},
                            antipatternReportResultList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        analyzerName: {
                                            type: "structure",
                                            members: {
                                                binaryAnalyzerName: {},
                                                runTimeAnalyzerName: {},
                                                sourceCodeAnalyzerName: {}
                                            },
                                            union: true
                                        },
                                        antiPatternReportS3Object: {
                                            shape: "S6"
                                        },
                                        antipatternReportStatus: {},
                                        antipatternReportStatusMessage: {}
                                    }
                                }
                            },
                            statusMessage: {}
                        }
                    }
                },
                runtimeStatus: {},
                runtimeStatusMessage: {},
                sourceCodeRepositories: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            branch: {},
                            projectName: {},
                            repository: {},
                            versionControlType: {}
                        }
                    }
                },
                statusMessage: {}
            }
        },
        S6: {
            type: "structure",
            members: {
                s3Bucket: {},
                s3key: {}
            }
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    count: {
                        type: "integer"
                    },
                    severity: {}
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                strategy: {},
                targetDestination: {},
                transformationTool: {
                    type: "structure",
                    members: {
                        description: {},
                        name: {},
                        tranformationToolInstallationLink: {}
                    }
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    name: {}
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "condition", "name", "values" ],
                members: {
                    condition: {},
                    name: {},
                    values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                managementPreference: {
                    type: "structure",
                    members: {
                        awsManagedResources: {
                            type: "structure",
                            required: [ "targetDestination" ],
                            members: {
                                targetDestination: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        noPreference: {
                            type: "structure",
                            required: [ "targetDestination" ],
                            members: {
                                targetDestination: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        selfManageResources: {
                            type: "structure",
                            required: [ "targetDestination" ],
                            members: {
                                targetDestination: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                databaseManagementPreference: {},
                databaseMigrationPreference: {
                    type: "structure",
                    members: {
                        heterogeneous: {
                            type: "structure",
                            required: [ "targetDatabaseEngine" ],
                            members: {
                                targetDatabaseEngine: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        homogeneous: {
                            type: "structure",
                            members: {
                                targetDatabaseEngine: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        noPreference: {
                            type: "structure",
                            required: [ "targetDatabaseEngine" ],
                            members: {
                                targetDatabaseEngine: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                businessGoals: {
                    type: "structure",
                    members: {
                        licenseCostReduction: {
                            type: "integer"
                        },
                        modernizeInfrastructureWithCloudNativeTechnologies: {
                            type: "integer"
                        },
                        reduceOperationalOverheadWithManagedServices: {
                            type: "integer"
                        },
                        speedOfMigration: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S2y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    count: {
                        type: "integer"
                    },
                    strategy: {}
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                antipatternReportS3Object: {
                    shape: "S6"
                },
                antipatternReportStatus: {},
                antipatternReportStatusMessage: {},
                applicationComponentStrategySummary: {
                    shape: "S2y"
                },
                dataCollectionStatus: {},
                id: {},
                lastAnalyzedTimestamp: {
                    type: "timestamp"
                },
                listAntipatternSeveritySummary: {
                    shape: "Sk"
                },
                name: {},
                recommendationSet: {
                    shape: "Sq"
                },
                serverError: {
                    type: "structure",
                    members: {
                        serverErrorCategory: {}
                    }
                },
                serverType: {},
                statusMessage: {},
                systemInfo: {
                    type: "structure",
                    members: {
                        cpuArchitecture: {},
                        fileSystemType: {},
                        networkInfoList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "interfaceName", "ipAddress", "macAddress", "netMask" ],
                                members: {
                                    interfaceName: {},
                                    ipAddress: {},
                                    macAddress: {},
                                    netMask: {}
                                }
                            }
                        },
                        osInfo: {
                            type: "structure",
                            members: {
                                type: {},
                                version: {}
                            }
                        }
                    }
                }
            }
        },
        S49: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        S5t: {
            type: "structure",
            members: {
                isPreferred: {
                    type: "boolean"
                },
                strategy: {},
                targetDestination: {},
                toolName: {}
            }
        }
    },
    paginators: {
        GetServerDetails: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "associatedApplications"
        },
        ListAnalyzableServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "analyzableServers"
        },
        ListApplicationComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applicationComponentInfos"
        },
        ListCollectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "Collectors"
        },
        ListImportFileTask: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "taskInfos"
        },
        ListServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "serverInfos"
        }
    }
};

AWS.apiLoader.services["appconfigdata"] = {};

AWS.AppConfigData = AWS.Service.defineService("appconfigdata", [ "2021-11-11" ]);

AWS.apiLoader.services["appconfigdata"]["2021-11-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-11-11",
        endpointPrefix: "appconfigdata",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceFullName: "AWS AppConfig Data",
        serviceId: "AppConfigData",
        signatureVersion: "v4",
        signingName: "appconfig",
        uid: "appconfigdata-2021-11-11"
    },
    operations: {
        GetLatestConfiguration: {
            http: {
                method: "GET",
                requestUri: "/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConfigurationToken" ],
                members: {
                    ConfigurationToken: {
                        location: "querystring",
                        locationName: "configuration_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPollConfigurationToken: {
                        location: "header",
                        locationName: "Next-Poll-Configuration-Token"
                    },
                    NextPollIntervalInSeconds: {
                        location: "header",
                        locationName: "Next-Poll-Interval-In-Seconds",
                        type: "integer"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Configuration: {
                        type: "blob",
                        sensitive: true
                    },
                    VersionLabel: {
                        location: "header",
                        locationName: "Version-Label"
                    }
                },
                payload: "Configuration"
            }
        },
        StartConfigurationSession: {
            http: {
                requestUri: "/configurationsessions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "ConfigurationProfileIdentifier" ],
                members: {
                    ApplicationIdentifier: {},
                    EnvironmentIdentifier: {},
                    ConfigurationProfileIdentifier: {},
                    RequiredMinimumPollIntervalInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InitialConfigurationToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["drs"] = {};

AWS.Drs = AWS.Service.defineService("drs", [ "2020-02-26" ]);

AWS.apiLoader.services["drs"]["2020-02-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-02-26",
        endpointPrefix: "drs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "drs",
        serviceFullName: "Elastic Disaster Recovery Service",
        serviceId: "drs",
        signatureVersion: "v4",
        signingName: "drs",
        uid: "drs-2020-02-26"
    },
    operations: {
        AssociateSourceNetworkStack: {
            http: {
                requestUri: "/AssociateSourceNetworkStack",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "cfnStackName", "sourceNetworkID" ],
                members: {
                    cfnStackName: {
                        shape: "S2"
                    },
                    sourceNetworkID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateExtendedSourceServer: {
            http: {
                requestUri: "/CreateExtendedSourceServer",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "sourceServerArn" ],
                members: {
                    sourceServerArn: {},
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceServer: {
                        shape: "S1b"
                    }
                }
            }
        },
        CreateLaunchConfigurationTemplate: {
            http: {
                requestUri: "/CreateLaunchConfigurationTemplate",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    exportBucketArn: {},
                    launchDisposition: {},
                    launchIntoSourceInstance: {
                        type: "boolean"
                    },
                    licensing: {
                        shape: "S2i"
                    },
                    postLaunchEnabled: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S14"
                    },
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    launchConfigurationTemplate: {
                        shape: "S2l"
                    }
                }
            }
        },
        CreateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/CreateReplicationConfigurationTemplate",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "associateDefaultSecurityGroup", "bandwidthThrottling", "createPublicIP", "dataPlaneRouting", "defaultLargeStagingDiskType", "ebsEncryption", "pitPolicy", "replicationServerInstanceType", "replicationServersSecurityGroupsIDs", "stagingAreaSubnetId", "stagingAreaTags", "useDedicatedReplicationServer" ],
                members: {
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    autoReplicateNewDisks: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    pitPolicy: {
                        shape: "S2r"
                    },
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S2v"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S14"
                    },
                    tags: {
                        shape: "S14"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S2y"
            }
        },
        CreateSourceNetwork: {
            http: {
                requestUri: "/CreateSourceNetwork",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "originAccountID", "originRegion", "vpcID" ],
                members: {
                    originAccountID: {},
                    originRegion: {},
                    tags: {
                        shape: "S14"
                    },
                    vpcID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceNetworkID: {}
                }
            }
        },
        DeleteJob: {
            http: {
                requestUri: "/DeleteJob",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    jobID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteLaunchAction: {
            http: {
                requestUri: "/DeleteLaunchAction",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "actionId", "resourceId" ],
                members: {
                    actionId: {},
                    resourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLaunchConfigurationTemplate: {
            http: {
                requestUri: "/DeleteLaunchConfigurationTemplate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "launchConfigurationTemplateID" ],
                members: {
                    launchConfigurationTemplateID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRecoveryInstance: {
            http: {
                requestUri: "/DeleteRecoveryInstance",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            }
        },
        DeleteReplicationConfigurationTemplate: {
            http: {
                requestUri: "/DeleteReplicationConfigurationTemplate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    replicationConfigurationTemplateID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSourceNetwork: {
            http: {
                requestUri: "/DeleteSourceNetwork",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "sourceNetworkID" ],
                members: {
                    sourceNetworkID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSourceServer: {
            http: {
                requestUri: "/DeleteSourceServer",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeJobLogItems: {
            http: {
                requestUri: "/DescribeJobLogItems",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    jobID: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                event: {},
                                eventData: {
                                    type: "structure",
                                    members: {
                                        conversionProperties: {
                                            type: "structure",
                                            members: {
                                                dataTimestamp: {},
                                                forceUefi: {
                                                    type: "boolean"
                                                },
                                                rootVolumeName: {},
                                                volumeToConversionMap: {
                                                    type: "map",
                                                    key: {},
                                                    value: {
                                                        type: "map",
                                                        key: {},
                                                        value: {}
                                                    }
                                                },
                                                volumeToVolumeSize: {
                                                    type: "map",
                                                    key: {},
                                                    value: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        },
                                        conversionServerID: {},
                                        eventResourceData: {
                                            type: "structure",
                                            members: {
                                                sourceNetworkData: {
                                                    type: "structure",
                                                    members: {
                                                        sourceNetworkID: {},
                                                        sourceVpc: {},
                                                        stackName: {},
                                                        targetVpc: {}
                                                    }
                                                }
                                            },
                                            union: true
                                        },
                                        rawError: {},
                                        sourceServerID: {},
                                        targetInstanceID: {}
                                    }
                                },
                                logDateTime: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeJobs: {
            http: {
                requestUri: "/DescribeJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            fromDate: {},
                            jobIDs: {
                                type: "list",
                                member: {}
                            },
                            toDate: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeLaunchConfigurationTemplates: {
            http: {
                requestUri: "/DescribeLaunchConfigurationTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    launchConfigurationTemplateIDs: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S2l"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRecoveryInstances: {
            http: {
                requestUri: "/DescribeRecoveryInstances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            recoveryInstanceIDs: {
                                type: "list",
                                member: {}
                            },
                            sourceServerIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                agentVersion: {},
                                arn: {},
                                dataReplicationInfo: {
                                    type: "structure",
                                    members: {
                                        dataReplicationError: {
                                            type: "structure",
                                            members: {
                                                error: {},
                                                rawError: {}
                                            }
                                        },
                                        dataReplicationInitiation: {
                                            type: "structure",
                                            members: {
                                                startDateTime: {},
                                                steps: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            name: {},
                                                            status: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        dataReplicationState: {},
                                        etaDateTime: {},
                                        lagDuration: {},
                                        replicatedDisks: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    backloggedStorageBytes: {
                                                        type: "long"
                                                    },
                                                    deviceName: {},
                                                    replicatedStorageBytes: {
                                                        type: "long"
                                                    },
                                                    rescannedStorageBytes: {
                                                        type: "long"
                                                    },
                                                    totalStorageBytes: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        },
                                        stagingAvailabilityZone: {}
                                    }
                                },
                                ec2InstanceID: {},
                                ec2InstanceState: {},
                                failback: {
                                    type: "structure",
                                    members: {
                                        agentLastSeenByServiceDateTime: {},
                                        elapsedReplicationDuration: {},
                                        failbackClientID: {},
                                        failbackClientLastSeenByServiceDateTime: {},
                                        failbackInitiationTime: {},
                                        failbackJobID: {},
                                        failbackLaunchType: {},
                                        failbackToOriginalServer: {
                                            type: "boolean"
                                        },
                                        firstByteDateTime: {},
                                        state: {}
                                    }
                                },
                                isDrill: {
                                    type: "boolean"
                                },
                                jobID: {},
                                originAvailabilityZone: {},
                                originEnvironment: {},
                                pointInTimeSnapshotDateTime: {},
                                recoveryInstanceID: {},
                                recoveryInstanceProperties: {
                                    type: "structure",
                                    members: {
                                        cpus: {
                                            shape: "S23"
                                        },
                                        disks: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    bytes: {
                                                        type: "long"
                                                    },
                                                    ebsVolumeID: {},
                                                    internalDeviceName: {}
                                                }
                                            }
                                        },
                                        identificationHints: {
                                            shape: "S27"
                                        },
                                        lastUpdatedDateTime: {},
                                        networkInterfaces: {
                                            shape: "S29"
                                        },
                                        os: {
                                            shape: "S2c"
                                        },
                                        ramBytes: {
                                            type: "long"
                                        }
                                    }
                                },
                                sourceServerID: {},
                                tags: {
                                    shape: "S14"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRecoverySnapshots: {
            http: {
                requestUri: "/DescribeRecoverySnapshots",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            fromDateTime: {},
                            toDateTime: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    order: {},
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "expectedTimestamp", "snapshotID", "sourceServerID" ],
                            members: {
                                ebsSnapshots: {
                                    type: "list",
                                    member: {}
                                },
                                expectedTimestamp: {},
                                snapshotID: {},
                                sourceServerID: {},
                                timestamp: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeReplicationConfigurationTemplates: {
            http: {
                requestUri: "/DescribeReplicationConfigurationTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    replicationConfigurationTemplateIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S2y"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSourceNetworks: {
            http: {
                requestUri: "/DescribeSourceNetworks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            originAccountID: {},
                            originRegion: {},
                            sourceNetworkIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S5d"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSourceServers: {
            http: {
                requestUri: "/DescribeSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            hardwareId: {},
                            sourceServerIDs: {
                                type: "list",
                                member: {}
                            },
                            stagingAccountIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DisconnectRecoveryInstance: {
            http: {
                requestUri: "/DisconnectRecoveryInstance",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            }
        },
        DisconnectSourceServer: {
            http: {
                requestUri: "/DisconnectSourceServer",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S1b"
            }
        },
        ExportSourceNetworkCfnTemplate: {
            http: {
                requestUri: "/ExportSourceNetworkCfnTemplate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceNetworkID" ],
                members: {
                    sourceNetworkID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    s3DestinationUrl: {}
                }
            }
        },
        GetFailbackReplicationConfiguration: {
            http: {
                requestUri: "/GetFailbackReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            },
            output: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    bandwidthThrottling: {
                        type: "long"
                    },
                    name: {},
                    recoveryInstanceID: {},
                    usePrivateIP: {
                        type: "boolean"
                    }
                }
            }
        },
        GetLaunchConfiguration: {
            http: {
                requestUri: "/GetLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5w"
            }
        },
        GetReplicationConfiguration: {
            http: {
                requestUri: "/GetReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S60"
            }
        },
        InitializeService: {
            http: {
                requestUri: "/InitializeService",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListExtensibleSourceServers: {
            http: {
                requestUri: "/ListExtensibleSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "stagingAccountID" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    stagingAccountID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                hostname: {},
                                tags: {
                                    shape: "S14"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLaunchActions: {
            http: {
                requestUri: "/ListLaunchActions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceId" ],
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            actionIds: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStagingAccounts: {
            http: {
                method: "GET",
                requestUri: "/ListStagingAccounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountID: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S14"
                    }
                }
            }
        },
        PutLaunchAction: {
            http: {
                requestUri: "/PutLaunchAction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "actionCode", "actionId", "actionVersion", "active", "category", "description", "name", "optional", "order", "resourceId" ],
                members: {
                    actionCode: {},
                    actionId: {},
                    actionVersion: {},
                    active: {
                        type: "boolean"
                    },
                    category: {},
                    description: {},
                    name: {},
                    optional: {
                        type: "boolean"
                    },
                    order: {
                        type: "integer"
                    },
                    parameters: {
                        shape: "Ss"
                    },
                    resourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    actionCode: {},
                    actionId: {},
                    actionVersion: {},
                    active: {
                        type: "boolean"
                    },
                    category: {},
                    description: {},
                    name: {},
                    optional: {
                        type: "boolean"
                    },
                    order: {
                        type: "integer"
                    },
                    parameters: {
                        shape: "Ss"
                    },
                    resourceId: {},
                    type: {}
                }
            }
        },
        RetryDataReplication: {
            http: {
                requestUri: "/RetryDataReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                },
                deprecated: true,
                deprecatedMessage: "WARNING: RetryDataReplication is deprecated"
            },
            output: {
                shape: "S1b"
            },
            deprecated: true,
            deprecatedMessage: "WARNING: RetryDataReplication is deprecated"
        },
        ReverseReplication: {
            http: {
                requestUri: "/ReverseReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    reversedDirectionSourceServerArn: {}
                }
            }
        },
        StartFailbackLaunch: {
            http: {
                requestUri: "/StartFailbackLaunch",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceIDs" ],
                members: {
                    recoveryInstanceIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S5"
                    }
                }
            }
        },
        StartRecovery: {
            http: {
                requestUri: "/StartRecovery",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServers" ],
                members: {
                    isDrill: {
                        type: "boolean"
                    },
                    sourceServers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceServerID" ],
                            members: {
                                recoverySnapshotID: {},
                                sourceServerID: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S5"
                    }
                }
            }
        },
        StartReplication: {
            http: {
                requestUri: "/StartReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceServer: {
                        shape: "S1b"
                    }
                }
            }
        },
        StartSourceNetworkRecovery: {
            http: {
                requestUri: "/StartSourceNetworkRecovery",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceNetworks" ],
                members: {
                    deployAsNew: {
                        type: "boolean"
                    },
                    sourceNetworks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceNetworkID" ],
                            members: {
                                cfnStackName: {
                                    shape: "S2"
                                },
                                sourceNetworkID: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S5"
                    }
                }
            }
        },
        StartSourceNetworkReplication: {
            http: {
                requestUri: "/StartSourceNetworkReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceNetworkID" ],
                members: {
                    sourceNetworkID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceNetwork: {
                        shape: "S5d"
                    }
                }
            }
        },
        StopFailback: {
            http: {
                requestUri: "/StopFailback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            }
        },
        StopReplication: {
            http: {
                requestUri: "/StopReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceServer: {
                        shape: "S1b"
                    }
                }
            }
        },
        StopSourceNetworkReplication: {
            http: {
                requestUri: "/StopSourceNetworkReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceNetworkID" ],
                members: {
                    sourceNetworkID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceNetwork: {
                        shape: "S5d"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S14"
                    }
                }
            },
            idempotent: true
        },
        TerminateRecoveryInstances: {
            http: {
                requestUri: "/TerminateRecoveryInstances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceIDs" ],
                members: {
                    recoveryInstanceIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S5"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            idempotent: true
        },
        UpdateFailbackReplicationConfiguration: {
            http: {
                requestUri: "/UpdateFailbackReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    bandwidthThrottling: {
                        type: "long"
                    },
                    name: {},
                    recoveryInstanceID: {},
                    usePrivateIP: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateLaunchConfiguration: {
            http: {
                requestUri: "/UpdateLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    launchDisposition: {},
                    launchIntoInstanceProperties: {
                        shape: "S5x"
                    },
                    licensing: {
                        shape: "S2i"
                    },
                    name: {},
                    postLaunchEnabled: {
                        type: "boolean"
                    },
                    sourceServerID: {},
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                shape: "S5w"
            },
            idempotent: true
        },
        UpdateLaunchConfigurationTemplate: {
            http: {
                requestUri: "/UpdateLaunchConfigurationTemplate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchConfigurationTemplateID" ],
                members: {
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    exportBucketArn: {},
                    launchConfigurationTemplateID: {},
                    launchDisposition: {},
                    launchIntoSourceInstance: {
                        type: "boolean"
                    },
                    licensing: {
                        shape: "S2i"
                    },
                    postLaunchEnabled: {
                        type: "boolean"
                    },
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    launchConfigurationTemplate: {
                        shape: "S2l"
                    }
                }
            }
        },
        UpdateReplicationConfiguration: {
            http: {
                requestUri: "/UpdateReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    autoReplicateNewDisks: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    name: {},
                    pitPolicy: {
                        shape: "S2r"
                    },
                    replicatedDisks: {
                        shape: "S61"
                    },
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S2v"
                    },
                    sourceServerID: {},
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S14"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S60"
            },
            idempotent: true
        },
        UpdateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/UpdateReplicationConfigurationTemplate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    arn: {},
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    autoReplicateNewDisks: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    pitPolicy: {
                        shape: "S2r"
                    },
                    replicationConfigurationTemplateID: {},
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S2v"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S14"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S2y"
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "structure",
            required: [ "jobID" ],
            members: {
                arn: {},
                creationDateTime: {},
                endDateTime: {},
                initiatedBy: {},
                jobID: {},
                participatingResources: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            launchStatus: {},
                            participatingResourceID: {
                                type: "structure",
                                members: {
                                    sourceNetworkID: {}
                                },
                                union: true
                            }
                        }
                    }
                },
                participatingServers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            launchActionsStatus: {
                                type: "structure",
                                members: {
                                    runs: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                action: {
                                                    shape: "Sj"
                                                },
                                                failureReason: {},
                                                runId: {},
                                                status: {}
                                            }
                                        }
                                    },
                                    ssmAgentDiscoveryDatetime: {}
                                }
                            },
                            launchStatus: {},
                            recoveryInstanceID: {},
                            sourceServerID: {}
                        }
                    }
                },
                status: {},
                tags: {
                    shape: "S14"
                },
                type: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                actionCode: {},
                actionId: {},
                actionVersion: {},
                active: {
                    type: "boolean"
                },
                category: {},
                description: {},
                name: {},
                optional: {
                    type: "boolean"
                },
                order: {
                    type: "integer"
                },
                parameters: {
                    shape: "Ss"
                },
                type: {}
            }
        },
        Ss: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    type: {},
                    value: {}
                }
            }
        },
        S14: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S1b: {
            type: "structure",
            members: {
                agentVersion: {},
                arn: {},
                dataReplicationInfo: {
                    type: "structure",
                    members: {
                        dataReplicationError: {
                            type: "structure",
                            members: {
                                error: {},
                                rawError: {}
                            }
                        },
                        dataReplicationInitiation: {
                            type: "structure",
                            members: {
                                nextAttemptDateTime: {},
                                startDateTime: {},
                                steps: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            status: {}
                                        }
                                    }
                                }
                            }
                        },
                        dataReplicationState: {},
                        etaDateTime: {},
                        lagDuration: {},
                        replicatedDisks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    backloggedStorageBytes: {
                                        type: "long"
                                    },
                                    deviceName: {},
                                    replicatedStorageBytes: {
                                        type: "long"
                                    },
                                    rescannedStorageBytes: {
                                        type: "long"
                                    },
                                    totalStorageBytes: {
                                        type: "long"
                                    }
                                }
                            }
                        },
                        stagingAvailabilityZone: {}
                    }
                },
                lastLaunchResult: {},
                lifeCycle: {
                    type: "structure",
                    members: {
                        addedToServiceDateTime: {},
                        elapsedReplicationDuration: {},
                        firstByteDateTime: {},
                        lastLaunch: {
                            type: "structure",
                            members: {
                                initiated: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {},
                                        jobID: {},
                                        type: {}
                                    }
                                },
                                status: {}
                            }
                        },
                        lastSeenByServiceDateTime: {}
                    }
                },
                recoveryInstanceId: {},
                replicationDirection: {},
                reversedDirectionSourceServerArn: {},
                sourceCloudProperties: {
                    type: "structure",
                    members: {
                        originAccountID: {},
                        originAvailabilityZone: {},
                        originRegion: {}
                    }
                },
                sourceNetworkID: {},
                sourceProperties: {
                    type: "structure",
                    members: {
                        cpus: {
                            shape: "S23"
                        },
                        disks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    bytes: {
                                        type: "long"
                                    },
                                    deviceName: {}
                                }
                            }
                        },
                        identificationHints: {
                            shape: "S27"
                        },
                        lastUpdatedDateTime: {},
                        networkInterfaces: {
                            shape: "S29"
                        },
                        os: {
                            shape: "S2c"
                        },
                        ramBytes: {
                            type: "long"
                        },
                        recommendedInstanceType: {},
                        supportsNitroInstances: {
                            type: "boolean"
                        }
                    }
                },
                sourceServerID: {},
                stagingArea: {
                    type: "structure",
                    members: {
                        errorMessage: {},
                        stagingAccountID: {},
                        stagingSourceServerArn: {},
                        status: {}
                    }
                },
                tags: {
                    shape: "S14"
                }
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    cores: {
                        type: "long"
                    },
                    modelName: {}
                }
            }
        },
        S27: {
            type: "structure",
            members: {
                awsInstanceID: {},
                fqdn: {},
                hostname: {},
                vmWareUuid: {}
            }
        },
        S29: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ips: {
                        type: "list",
                        member: {}
                    },
                    isPrimary: {
                        type: "boolean"
                    },
                    macAddress: {}
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                fullString: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                osByol: {
                    type: "boolean"
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                arn: {},
                copyPrivateIp: {
                    type: "boolean"
                },
                copyTags: {
                    type: "boolean"
                },
                exportBucketArn: {},
                launchConfigurationTemplateID: {},
                launchDisposition: {},
                launchIntoSourceInstance: {
                    type: "boolean"
                },
                licensing: {
                    shape: "S2i"
                },
                postLaunchEnabled: {
                    type: "boolean"
                },
                tags: {
                    shape: "S14"
                },
                targetInstanceTypeRightSizingMethod: {}
            }
        },
        S2r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "interval", "retentionDuration", "units" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    interval: {
                        type: "integer"
                    },
                    retentionDuration: {
                        type: "integer"
                    },
                    ruleID: {
                        type: "long"
                    },
                    units: {}
                }
            }
        },
        S2v: {
            type: "list",
            member: {}
        },
        S2y: {
            type: "structure",
            required: [ "replicationConfigurationTemplateID" ],
            members: {
                arn: {},
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                autoReplicateNewDisks: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                pitPolicy: {
                    shape: "S2r"
                },
                replicationConfigurationTemplateID: {},
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S2v"
                },
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "S14"
                },
                tags: {
                    shape: "S14"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                }
            }
        },
        S5d: {
            type: "structure",
            members: {
                arn: {},
                cfnStackName: {
                    shape: "S2"
                },
                lastRecovery: {
                    type: "structure",
                    members: {
                        apiCallDateTime: {
                            type: "timestamp",
                            timestampFormat: "iso8601"
                        },
                        jobID: {},
                        lastRecoveryResult: {}
                    }
                },
                launchedVpcID: {},
                replicationStatus: {},
                replicationStatusDetails: {
                    type: "string",
                    sensitive: true
                },
                sourceAccountID: {},
                sourceNetworkID: {},
                sourceRegion: {},
                sourceVpcID: {},
                tags: {
                    shape: "S14"
                }
            }
        },
        S5w: {
            type: "structure",
            members: {
                copyPrivateIp: {
                    type: "boolean"
                },
                copyTags: {
                    type: "boolean"
                },
                ec2LaunchTemplateID: {},
                launchDisposition: {},
                launchIntoInstanceProperties: {
                    shape: "S5x"
                },
                licensing: {
                    shape: "S2i"
                },
                name: {},
                postLaunchEnabled: {
                    type: "boolean"
                },
                sourceServerID: {},
                targetInstanceTypeRightSizingMethod: {}
            }
        },
        S5x: {
            type: "structure",
            members: {
                launchIntoEC2InstanceID: {}
            }
        },
        S60: {
            type: "structure",
            members: {
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                autoReplicateNewDisks: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                name: {},
                pitPolicy: {
                    shape: "S2r"
                },
                replicatedDisks: {
                    shape: "S61"
                },
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S2v"
                },
                sourceServerID: {},
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "S14"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                }
            }
        },
        S61: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    deviceName: {},
                    iops: {
                        type: "long"
                    },
                    isBootDisk: {
                        type: "boolean"
                    },
                    optimizedStagingDiskType: {},
                    stagingDiskType: {},
                    throughput: {
                        type: "long"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeJobLogItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeLaunchConfigurationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeRecoveryInstances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeRecoverySnapshots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeReplicationConfigurationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeSourceNetworks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeSourceServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListExtensibleSourceServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListLaunchActions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListStagingAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accounts"
        }
    }
};

AWS.apiLoader.services["migrationhubrefactorspaces"] = {};

AWS.MigrationHubRefactorSpaces = AWS.Service.defineService("migrationhubrefactorspaces", [ "2021-10-26" ]);

AWS.apiLoader.services["migrationhubrefactorspaces"]["2021-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-10-26",
        endpointPrefix: "refactor-spaces",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Migration Hub Refactor Spaces",
        serviceId: "Migration Hub Refactor Spaces",
        signatureVersion: "v4",
        signingName: "refactor-spaces",
        uid: "migration-hub-refactor-spaces-2021-10-26"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/environments/{EnvironmentIdentifier}/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier", "Name", "ProxyType", "VpcId" ],
                members: {
                    ApiGatewayProxy: {
                        shape: "S2"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    Name: {},
                    ProxyType: {},
                    Tags: {
                        shape: "S9"
                    },
                    VpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayProxy: {
                        shape: "S2"
                    },
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ProxyType: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    VpcId: {}
                }
            }
        },
        CreateEnvironment: {
            http: {
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "NetworkFabricType" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Name: {},
                    NetworkFabricType: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NetworkFabricType: {},
                    OwnerAccountId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        CreateRoute: {
            http: {
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "RouteType", "ServiceIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DefaultRoute: {
                        type: "structure",
                        members: {
                            ActivationState: {}
                        }
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteType: {},
                    ServiceIdentifier: {},
                    Tags: {
                        shape: "S9"
                    },
                    UriPathRoute: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    OwnerAccountId: {},
                    RouteId: {},
                    RouteType: {},
                    ServiceId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    UriPathRoute: {
                        shape: "Su"
                    }
                }
            }
        },
        CreateService: {
            http: {
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EndpointType", "EnvironmentIdentifier", "Name" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    EndpointType: {},
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    LambdaEndpoint: {
                        shape: "S14"
                    },
                    Name: {},
                    Tags: {
                        shape: "S9"
                    },
                    UrlEndpoint: {
                        shape: "S17"
                    },
                    VpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EndpointType: {},
                    EnvironmentId: {},
                    LambdaEndpoint: {
                        shape: "S14"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ServiceId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    UrlEndpoint: {
                        shape: "S17"
                    },
                    VpcId: {}
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/resourcepolicy/{Identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRoute: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "RouteIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteIdentifier: {
                        location: "uri",
                        locationName: "RouteIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    RouteId: {},
                    ServiceId: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteService: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services/{ServiceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "ServiceIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    ServiceIdentifier: {
                        location: "uri",
                        locationName: "ServiceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    ServiceId: {},
                    State: {}
                }
            },
            idempotent: true
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayProxy: {
                        type: "structure",
                        members: {
                            ApiGatewayId: {},
                            EndpointType: {},
                            NlbArn: {},
                            NlbName: {},
                            ProxyUrl: {},
                            StageName: {},
                            VpcLinkId: {}
                        }
                    },
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ProxyType: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    VpcId: {}
                }
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NetworkFabricType: {},
                    OwnerAccountId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    TransitGatewayId: {}
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/resourcepolicy/{Identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRoute: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "RouteIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteIdentifier: {
                        location: "uri",
                        locationName: "RouteIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppendSourcePath: {
                        type: "boolean"
                    },
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    IncludeChildPaths: {
                        type: "boolean"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Methods: {
                        shape: "Sw"
                    },
                    OwnerAccountId: {},
                    PathResourceToId: {
                        shape: "S29"
                    },
                    RouteId: {},
                    RouteType: {},
                    ServiceId: {},
                    SourcePath: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        GetService: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services/{ServiceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "ServiceIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    ServiceIdentifier: {
                        location: "uri",
                        locationName: "ServiceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EndpointType: {},
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    LambdaEndpoint: {
                        type: "structure",
                        members: {
                            Arn: {}
                        }
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ServiceId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    UrlEndpoint: {
                        type: "structure",
                        members: {
                            HealthUrl: {},
                            Url: {}
                        }
                    },
                    VpcId: {}
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiGatewayProxy: {
                                    type: "structure",
                                    members: {
                                        ApiGatewayId: {},
                                        EndpointType: {},
                                        NlbArn: {},
                                        NlbName: {},
                                        ProxyUrl: {},
                                        StageName: {},
                                        VpcLinkId: {}
                                    }
                                },
                                ApplicationId: {},
                                Arn: {},
                                CreatedByAccountId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                OwnerAccountId: {},
                                ProxyType: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                },
                                VpcId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEnvironmentVpcs: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/vpcs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EnvironmentVpcList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                CidrBlocks: {
                                    type: "list",
                                    member: {}
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                EnvironmentId: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                VpcId: {},
                                VpcName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EnvironmentSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                NetworkFabricType: {},
                                OwnerAccountId: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                },
                                TransitGatewayId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRoutes: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RouteSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppendSourcePath: {
                                    type: "boolean"
                                },
                                ApplicationId: {},
                                Arn: {},
                                CreatedByAccountId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                IncludeChildPaths: {
                                    type: "boolean"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Methods: {
                                    shape: "Sw"
                                },
                                OwnerAccountId: {},
                                PathResourceToId: {
                                    shape: "S29"
                                },
                                RouteId: {},
                                RouteType: {},
                                ServiceId: {},
                                SourcePath: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListServices: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ServiceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                Arn: {},
                                CreatedByAccountId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                EndpointType: {},
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                LambdaEndpoint: {
                                    type: "structure",
                                    members: {
                                        Arn: {}
                                    }
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                OwnerAccountId: {},
                                ServiceId: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                },
                                UrlEndpoint: {
                                    type: "structure",
                                    members: {
                                        HealthUrl: {},
                                        Url: {}
                                    }
                                },
                                VpcId: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        PutResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/resourcepolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Policy", "ResourceArn" ],
                members: {
                    Policy: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateRoute: {
            http: {
                method: "PATCH",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ActivationState", "ApplicationIdentifier", "EnvironmentIdentifier", "RouteIdentifier" ],
                members: {
                    ActivationState: {},
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteIdentifier: {
                        location: "uri",
                        locationName: "RouteIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    RouteId: {},
                    ServiceId: {},
                    State: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                EndpointType: {},
                StageName: {}
            }
        },
        S9: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Su: {
            type: "structure",
            required: [ "ActivationState", "SourcePath" ],
            members: {
                ActivationState: {},
                AppendSourcePath: {
                    type: "boolean"
                },
                IncludeChildPaths: {
                    type: "boolean"
                },
                Methods: {
                    shape: "Sw"
                },
                SourcePath: {}
            }
        },
        Sw: {
            type: "list",
            member: {}
        },
        S14: {
            type: "structure",
            required: [ "Arn" ],
            members: {
                Arn: {}
            }
        },
        S17: {
            type: "structure",
            required: [ "Url" ],
            members: {
                HealthUrl: {},
                Url: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                AccountId: {},
                AdditionalDetails: {
                    type: "map",
                    key: {},
                    value: {}
                },
                Code: {},
                Message: {},
                ResourceIdentifier: {},
                ResourceType: {}
            }
        },
        S29: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ApplicationSummaryList"
        },
        ListEnvironmentVpcs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EnvironmentVpcList"
        },
        ListEnvironments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EnvironmentSummaryList"
        },
        ListRoutes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RouteSummaryList"
        },
        ListServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ServiceSummaryList"
        }
    }
};

AWS.apiLoader.services["evidently"] = {};

AWS.Evidently = AWS.Service.defineService("evidently", [ "2021-02-01" ]);

AWS.apiLoader.services["evidently"]["2021-02-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-02-01",
        endpointPrefix: "evidently",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CloudWatch Evidently",
        serviceId: "Evidently",
        signatureVersion: "v4",
        signingName: "evidently",
        uid: "evidently-2021-02-01"
    },
    operations: {
        BatchEvaluateFeature: {
            http: {
                requestUri: "/projects/{project}/evaluations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project", "requests" ],
                members: {
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    requests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityId", "feature" ],
                            members: {
                                entityId: {},
                                evaluationContext: {
                                    jsonvalue: true
                                },
                                feature: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityId", "feature" ],
                            members: {
                                details: {
                                    jsonvalue: true
                                },
                                entityId: {},
                                feature: {},
                                project: {},
                                reason: {},
                                value: {
                                    shape: "Sd"
                                },
                                variation: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        CreateExperiment: {
            http: {
                requestUri: "/projects/{project}/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "metricGoals", "name", "project", "treatments" ],
                members: {
                    description: {},
                    metricGoals: {
                        shape: "Sk"
                    },
                    name: {},
                    onlineAbConfig: {
                        shape: "St"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    samplingRate: {
                        type: "long"
                    },
                    segment: {},
                    tags: {
                        shape: "Sz"
                    },
                    treatments: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "experiment" ],
                members: {
                    experiment: {
                        shape: "S16"
                    }
                }
            },
            idempotent: true
        },
        CreateFeature: {
            http: {
                requestUri: "/projects/{project}/features",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "project", "variations" ],
                members: {
                    defaultVariation: {},
                    description: {},
                    entityOverrides: {
                        shape: "S1n"
                    },
                    evaluationStrategy: {},
                    name: {},
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    tags: {
                        shape: "Sz"
                    },
                    variations: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    feature: {
                        shape: "S1s"
                    }
                }
            }
        },
        CreateLaunch: {
            http: {
                requestUri: "/projects/{project}/launches",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "groups", "name", "project" ],
                members: {
                    description: {},
                    groups: {
                        shape: "S23"
                    },
                    metricMonitors: {
                        shape: "S26"
                    },
                    name: {},
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    scheduledSplitsConfig: {
                        shape: "S29"
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "launch" ],
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    appConfigResource: {
                        shape: "S2u"
                    },
                    dataDelivery: {
                        type: "structure",
                        members: {
                            cloudWatchLogs: {
                                shape: "S2x"
                            },
                            s3Destination: {
                                shape: "S2z"
                            }
                        }
                    },
                    description: {},
                    name: {},
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        },
        CreateSegment: {
            http: {
                requestUri: "/segments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "pattern" ],
                members: {
                    description: {},
                    name: {},
                    pattern: {
                        jsonvalue: true
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        shape: "S3e"
                    }
                }
            }
        },
        DeleteExperiment: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}/experiments/{experiment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteFeature: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}/features/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "feature", "project" ],
                members: {
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteLaunch: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}/launches/{launch}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSegment: {
            http: {
                method: "DELETE",
                requestUri: "/segments/{segment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        location: "uri",
                        locationName: "segment"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        EvaluateFeature: {
            http: {
                requestUri: "/projects/{project}/evaluations/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "entityId", "feature", "project" ],
                members: {
                    entityId: {},
                    evaluationContext: {
                        jsonvalue: true
                    },
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        jsonvalue: true
                    },
                    reason: {},
                    value: {
                        shape: "Sd"
                    },
                    variation: {}
                }
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        GetExperiment: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/experiments/{experiment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S16"
                    }
                }
            }
        },
        GetExperimentResults: {
            http: {
                requestUri: "/projects/{project}/experiments/{experiment}/results",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "metricNames", "project", "treatmentNames" ],
                members: {
                    baseStat: {},
                    endTime: {
                        type: "timestamp"
                    },
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    metricNames: {
                        type: "list",
                        member: {}
                    },
                    period: {
                        type: "long"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    reportNames: {
                        type: "list",
                        member: {}
                    },
                    resultStats: {
                        type: "list",
                        member: {}
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    treatmentNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {},
                    reports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                content: {
                                    jsonvalue: true
                                },
                                metricName: {},
                                reportName: {},
                                treatmentName: {}
                            }
                        }
                    },
                    resultsData: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                metricName: {},
                                resultStat: {},
                                treatmentName: {},
                                values: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    timestamps: {
                        type: "list",
                        member: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        GetFeature: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/features/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "feature", "project" ],
                members: {
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "feature" ],
                members: {
                    feature: {
                        shape: "S1s"
                    }
                }
            }
        },
        GetLaunch: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/launches/{launch}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        },
        GetSegment: {
            http: {
                method: "GET",
                requestUri: "/segments/{segment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        location: "uri",
                        locationName: "segment"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        shape: "S3e"
                    }
                }
            }
        },
        ListExperiments: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiments: {
                        type: "list",
                        member: {
                            shape: "S16"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFeatures: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/features",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    features: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdTime", "evaluationStrategy", "lastUpdatedTime", "name", "status" ],
                            members: {
                                arn: {},
                                createdTime: {
                                    type: "timestamp"
                                },
                                defaultVariation: {},
                                evaluationRules: {
                                    shape: "S1u"
                                },
                                evaluationStrategy: {},
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                name: {},
                                project: {},
                                status: {},
                                tags: {
                                    shape: "Sz"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLaunches: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/launches",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launches: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status" ],
                            members: {
                                activeExperimentCount: {
                                    type: "long"
                                },
                                activeLaunchCount: {
                                    type: "long"
                                },
                                arn: {},
                                createdTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                experimentCount: {
                                    type: "long"
                                },
                                featureCount: {
                                    type: "long"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                launchCount: {
                                    type: "long"
                                },
                                name: {},
                                status: {},
                                tags: {
                                    shape: "Sz"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListSegmentReferences: {
            http: {
                method: "GET",
                requestUri: "/segments/{segment}/references",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "segment", "type" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    segment: {
                        location: "uri",
                        locationName: "segment"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    referencedBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type" ],
                            members: {
                                arn: {},
                                endTime: {},
                                lastUpdatedOn: {},
                                name: {},
                                startTime: {},
                                status: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListSegments: {
            http: {
                method: "GET",
                requestUri: "/segments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    segments: {
                        type: "list",
                        member: {
                            shape: "S3e"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sz"
                    }
                }
            }
        },
        PutProjectEvents: {
            http: {
                requestUri: "/events/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "events", "project" ],
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "data", "timestamp", "type" ],
                            members: {
                                data: {
                                    jsonvalue: true
                                },
                                timestamp: {
                                    type: "timestamp"
                                },
                                type: {}
                            }
                        }
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                eventId: {}
                            }
                        }
                    },
                    failedEventCount: {
                        type: "integer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        StartExperiment: {
            http: {
                requestUri: "/projects/{project}/experiments/{experiment}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analysisCompleteTime", "experiment", "project" ],
                members: {
                    analysisCompleteTime: {
                        type: "timestamp"
                    },
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    startedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StartLaunch: {
            http: {
                requestUri: "/projects/{project}/launches/{launch}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "launch" ],
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        StopExperiment: {
            http: {
                requestUri: "/projects/{project}/experiments/{experiment}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    desiredState: {},
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StopLaunch: {
            http: {
                requestUri: "/projects/{project}/launches/{launch}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    desiredState: {},
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TestSegmentPattern: {
            http: {
                requestUri: "/test-segment-pattern",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "pattern", "payload" ],
                members: {
                    pattern: {
                        jsonvalue: true
                    },
                    payload: {
                        jsonvalue: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "match" ],
                members: {
                    match: {
                        type: "boolean"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateExperiment: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/experiments/{experiment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    description: {},
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    metricGoals: {
                        shape: "Sk"
                    },
                    onlineAbConfig: {
                        shape: "St"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    removeSegment: {
                        type: "boolean"
                    },
                    samplingRate: {
                        type: "long"
                    },
                    segment: {},
                    treatments: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "experiment" ],
                members: {
                    experiment: {
                        shape: "S16"
                    }
                }
            }
        },
        UpdateFeature: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/features/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "feature", "project" ],
                members: {
                    addOrUpdateVariations: {
                        shape: "S1p"
                    },
                    defaultVariation: {},
                    description: {},
                    entityOverrides: {
                        shape: "S1n"
                    },
                    evaluationStrategy: {},
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    removeVariations: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "feature" ],
                members: {
                    feature: {
                        shape: "S1s"
                    }
                }
            }
        },
        UpdateLaunch: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/launches/{launch}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    description: {},
                    groups: {
                        shape: "S23"
                    },
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    metricMonitors: {
                        shape: "S26"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    scheduledSplitsConfig: {
                        shape: "S29"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "launch" ],
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        UpdateProject: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    appConfigResource: {
                        shape: "S2u"
                    },
                    description: {},
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        },
        UpdateProjectDataDelivery: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/data-delivery",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    cloudWatchLogs: {
                        shape: "S2x"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    s3Destination: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "structure",
            members: {
                boolValue: {
                    type: "boolean"
                },
                doubleValue: {
                    type: "double"
                },
                longValue: {
                    type: "long"
                },
                stringValue: {}
            },
            union: true
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "metricDefinition" ],
                members: {
                    desiredChange: {},
                    metricDefinition: {
                        shape: "Sn"
                    }
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "entityIdKey", "name", "valueKey" ],
            members: {
                entityIdKey: {},
                eventPattern: {
                    jsonvalue: true
                },
                name: {},
                unitLabel: {},
                valueKey: {}
            }
        },
        St: {
            type: "structure",
            members: {
                controlTreatmentName: {},
                treatmentWeights: {
                    shape: "Sv"
                }
            }
        },
        Sv: {
            type: "map",
            key: {},
            value: {
                type: "long"
            }
        },
        Sz: {
            type: "map",
            key: {},
            value: {}
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                required: [ "feature", "name", "variation" ],
                members: {
                    description: {},
                    feature: {},
                    name: {},
                    variation: {}
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status", "type" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                description: {},
                execution: {
                    type: "structure",
                    members: {
                        endedTime: {
                            type: "timestamp"
                        },
                        startedTime: {
                            type: "timestamp"
                        }
                    }
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                metricGoals: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "metricDefinition" ],
                        members: {
                            desiredChange: {},
                            metricDefinition: {
                                shape: "S1c"
                            }
                        }
                    }
                },
                name: {},
                onlineAbDefinition: {
                    type: "structure",
                    members: {
                        controlTreatmentName: {},
                        treatmentWeights: {
                            shape: "Sv"
                        }
                    }
                },
                project: {},
                randomizationSalt: {},
                samplingRate: {
                    type: "long"
                },
                schedule: {
                    type: "structure",
                    members: {
                        analysisCompleteTime: {
                            type: "timestamp"
                        }
                    }
                },
                segment: {},
                status: {},
                statusReason: {},
                tags: {
                    shape: "Sz"
                },
                treatments: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            description: {},
                            featureVariations: {
                                shape: "S1k"
                            },
                            name: {}
                        }
                    }
                },
                type: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                entityIdKey: {},
                eventPattern: {
                    jsonvalue: true
                },
                name: {},
                unitLabel: {},
                valueKey: {}
            }
        },
        S1k: {
            type: "map",
            key: {},
            value: {}
        },
        S1n: {
            type: "map",
            key: {},
            value: {}
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {
                        shape: "Sd"
                    }
                }
            }
        },
        S1s: {
            type: "structure",
            required: [ "arn", "createdTime", "evaluationStrategy", "lastUpdatedTime", "name", "status", "valueType", "variations" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                defaultVariation: {},
                description: {},
                entityOverrides: {
                    shape: "S1n"
                },
                evaluationRules: {
                    shape: "S1u"
                },
                evaluationStrategy: {},
                lastUpdatedTime: {
                    type: "timestamp"
                },
                name: {},
                project: {},
                status: {},
                tags: {
                    shape: "Sz"
                },
                valueType: {},
                variations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            value: {
                                shape: "Sd"
                            }
                        }
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "type" ],
                members: {
                    name: {},
                    type: {}
                }
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                required: [ "feature", "name", "variation" ],
                members: {
                    description: {},
                    feature: {},
                    name: {},
                    variation: {}
                }
            }
        },
        S26: {
            type: "list",
            member: {
                type: "structure",
                required: [ "metricDefinition" ],
                members: {
                    metricDefinition: {
                        shape: "Sn"
                    }
                }
            }
        },
        S29: {
            type: "structure",
            required: [ "steps" ],
            members: {
                steps: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "groupWeights", "startTime" ],
                        members: {
                            groupWeights: {
                                shape: "S2c"
                            },
                            segmentOverrides: {
                                shape: "S2d"
                            },
                            startTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        S2c: {
            type: "map",
            key: {},
            value: {
                type: "long"
            }
        },
        S2d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "evaluationOrder", "segment", "weights" ],
                members: {
                    evaluationOrder: {
                        type: "long"
                    },
                    segment: {},
                    weights: {
                        shape: "S2c"
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status", "type" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                description: {},
                execution: {
                    type: "structure",
                    members: {
                        endedTime: {
                            type: "timestamp"
                        },
                        startedTime: {
                            type: "timestamp"
                        }
                    }
                },
                groups: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "featureVariations", "name" ],
                        members: {
                            description: {},
                            featureVariations: {
                                shape: "S1k"
                            },
                            name: {}
                        }
                    }
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                metricMonitors: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "metricDefinition" ],
                        members: {
                            metricDefinition: {
                                shape: "S1c"
                            }
                        }
                    }
                },
                name: {},
                project: {},
                randomizationSalt: {},
                scheduledSplitsDefinition: {
                    type: "structure",
                    members: {
                        steps: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "startTime" ],
                                members: {
                                    groupWeights: {
                                        shape: "S2c"
                                    },
                                    segmentOverrides: {
                                        shape: "S2d"
                                    },
                                    startTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                },
                status: {},
                statusReason: {},
                tags: {
                    shape: "Sz"
                },
                type: {}
            }
        },
        S2u: {
            type: "structure",
            members: {
                applicationId: {},
                environmentId: {}
            }
        },
        S2x: {
            type: "structure",
            members: {
                logGroup: {}
            }
        },
        S2z: {
            type: "structure",
            members: {
                bucket: {},
                prefix: {}
            }
        },
        S34: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status" ],
            members: {
                activeExperimentCount: {
                    type: "long"
                },
                activeLaunchCount: {
                    type: "long"
                },
                appConfigResource: {
                    type: "structure",
                    required: [ "applicationId", "configurationProfileId", "environmentId" ],
                    members: {
                        applicationId: {},
                        configurationProfileId: {},
                        environmentId: {}
                    }
                },
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                dataDelivery: {
                    type: "structure",
                    members: {
                        cloudWatchLogs: {
                            type: "structure",
                            members: {
                                logGroup: {}
                            }
                        },
                        s3Destination: {
                            type: "structure",
                            members: {
                                bucket: {},
                                prefix: {}
                            }
                        }
                    }
                },
                description: {},
                experimentCount: {
                    type: "long"
                },
                featureCount: {
                    type: "long"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                launchCount: {
                    type: "long"
                },
                name: {},
                status: {},
                tags: {
                    shape: "Sz"
                }
            }
        },
        S3e: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "pattern" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                description: {},
                experimentCount: {
                    type: "long"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                launchCount: {
                    type: "long"
                },
                name: {},
                pattern: {
                    jsonvalue: true
                },
                tags: {
                    shape: "Sz"
                }
            }
        }
    },
    paginators: {
        ListExperiments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "experiments"
        },
        ListFeatures: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "features"
        },
        ListLaunches: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "launches"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "projects"
        },
        ListSegmentReferences: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "referencedBy"
        },
        ListSegments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "segments"
        }
    }
};

AWS.apiLoader.services["inspector2"] = {};

AWS.Inspector2 = AWS.Service.defineService("inspector2", [ "2020-06-08" ]);

AWS.apiLoader.services["inspector2"]["2020-06-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-06-08",
        endpointPrefix: "inspector2",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Inspector2",
        serviceFullName: "Inspector2",
        serviceId: "Inspector2",
        signatureVersion: "v4",
        signingName: "inspector2",
        uid: "inspector2-2020-06-08"
    },
    operations: {
        AssociateMember: {
            http: {
                requestUri: "/members/associate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            }
        },
        BatchGetAccountStatus: {
            http: {
                requestUri: "/status/batch/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts" ],
                members: {
                    accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "resourceState", "state" ],
                            members: {
                                accountId: {},
                                resourceState: {
                                    type: "structure",
                                    required: [ "ec2", "ecr" ],
                                    members: {
                                        ec2: {
                                            shape: "Sa"
                                        },
                                        ecr: {
                                            shape: "Sa"
                                        },
                                        lambda: {
                                            shape: "Sa"
                                        },
                                        lambdaCode: {
                                            shape: "Sa"
                                        }
                                    }
                                },
                                state: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    failedAccounts: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchGetCodeSnippet: {
            http: {
                requestUri: "/codesnippet/batchget",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "findingArns" ],
                members: {
                    findingArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    codeSnippetResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                codeSnippet: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "content", "lineNumber" ],
                                        members: {
                                            content: {},
                                            lineNumber: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                endLine: {
                                    type: "integer"
                                },
                                findingArn: {},
                                startLine: {
                                    type: "integer"
                                },
                                suggestedFixes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            code: {},
                                            description: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "errorMessage", "findingArn" ],
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                findingArn: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetFindingDetails: {
            http: {
                requestUri: "/findings/details/batch/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "findingArns" ],
                members: {
                    findingArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "errorMessage", "findingArn" ],
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                findingArn: {}
                            }
                        }
                    },
                    findingDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                cisaData: {
                                    shape: "S16"
                                },
                                cwes: {
                                    shape: "S1a"
                                },
                                epssScore: {
                                    type: "double"
                                },
                                evidences: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            evidenceDetail: {},
                                            evidenceRule: {},
                                            severity: {}
                                        }
                                    }
                                },
                                exploitObserved: {
                                    shape: "S1i"
                                },
                                findingArn: {},
                                referenceUrls: {
                                    shape: "S1l"
                                },
                                riskScore: {
                                    type: "integer"
                                },
                                tools: {
                                    type: "list",
                                    member: {}
                                },
                                ttps: {
                                    shape: "S1q"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchGetFreeTrialInfo: {
            http: {
                requestUri: "/freetrialinfo/batchget",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountIds" ],
                members: {
                    accountIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts", "failedAccounts" ],
                members: {
                    accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "freeTrialInfo" ],
                            members: {
                                accountId: {},
                                freeTrialInfo: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "end", "start", "status", "type" ],
                                        members: {
                                            end: {
                                                type: "timestamp"
                                            },
                                            start: {
                                                type: "timestamp"
                                            },
                                            status: {},
                                            type: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    failedAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "code", "message" ],
                            members: {
                                accountId: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetMemberEc2DeepInspectionStatus: {
            http: {
                requestUri: "/ec2deepinspectionstatus/member/batch/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S29"
                    },
                    failedAccountIds: {
                        shape: "S2c"
                    }
                }
            }
        },
        BatchUpdateMemberEc2DeepInspectionStatus: {
            http: {
                requestUri: "/ec2deepinspectionstatus/member/batch/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountIds" ],
                members: {
                    accountIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "activateDeepInspection" ],
                            members: {
                                accountId: {},
                                activateDeepInspection: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S29"
                    },
                    failedAccountIds: {
                        shape: "S2c"
                    }
                }
            }
        },
        CancelFindingsReport: {
            http: {
                requestUri: "/reporting/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {}
                }
            }
        },
        CancelSbomExport: {
            http: {
                requestUri: "/sbomexport/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            },
            idempotent: true
        },
        CreateFilter: {
            http: {
                requestUri: "/filters/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "action", "filterCriteria", "name" ],
                members: {
                    action: {},
                    description: {},
                    filterCriteria: {
                        shape: "S2r"
                    },
                    name: {},
                    reason: {},
                    tags: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        CreateFindingsReport: {
            http: {
                requestUri: "/reporting/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reportFormat", "s3Destination" ],
                members: {
                    filterCriteria: {
                        shape: "S2r"
                    },
                    reportFormat: {},
                    s3Destination: {
                        shape: "S3h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        },
        CreateSbomExport: {
            http: {
                requestUri: "/sbomexport/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reportFormat", "s3Destination" ],
                members: {
                    reportFormat: {},
                    resourceFilterCriteria: {
                        shape: "S3l"
                    },
                    s3Destination: {
                        shape: "S3h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            },
            idempotent: true
        },
        DeleteFilter: {
            http: {
                requestUri: "/filters/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                requestUri: "/organizationconfiguration/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    autoEnable: {
                        shape: "S3y"
                    },
                    maxAccountLimitReached: {
                        type: "boolean"
                    }
                }
            }
        },
        Disable: {
            http: {
                requestUri: "/disable",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5"
                    },
                    resourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts" ],
                members: {
                    accounts: {
                        shape: "S43"
                    },
                    failedAccounts: {
                        shape: "Se"
                    }
                }
            }
        },
        DisableDelegatedAdminAccount: {
            http: {
                requestUri: "/delegatedadminaccounts/disable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    delegatedAdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    delegatedAdminAccountId: {}
                }
            }
        },
        DisassociateMember: {
            http: {
                requestUri: "/members/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            }
        },
        Enable: {
            http: {
                requestUri: "/enable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceTypes" ],
                members: {
                    accountIds: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    resourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts" ],
                members: {
                    accounts: {
                        shape: "S43"
                    },
                    failedAccounts: {
                        shape: "Se"
                    }
                }
            }
        },
        EnableDelegatedAdminAccount: {
            http: {
                requestUri: "/delegatedadminaccounts/enable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    delegatedAdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    delegatedAdminAccountId: {}
                }
            }
        },
        GetConfiguration: {
            http: {
                requestUri: "/configuration/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ecrConfiguration: {
                        type: "structure",
                        members: {
                            rescanDurationState: {
                                type: "structure",
                                members: {
                                    rescanDuration: {},
                                    status: {},
                                    updatedAt: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDelegatedAdminAccount: {
            http: {
                requestUri: "/delegatedadminaccounts/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    delegatedAdmin: {
                        type: "structure",
                        members: {
                            accountId: {},
                            relationshipStatus: {}
                        }
                    }
                }
            }
        },
        GetEc2DeepInspectionConfiguration: {
            http: {
                requestUri: "/ec2deepinspectionconfiguration/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    errorMessage: {},
                    orgPackagePaths: {
                        shape: "S4s"
                    },
                    packagePaths: {
                        shape: "S4s"
                    },
                    status: {}
                }
            }
        },
        GetEncryptionKey: {
            http: {
                method: "GET",
                requestUri: "/encryptionkey/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceType", "scanType" ],
                members: {
                    resourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    scanType: {
                        location: "querystring",
                        locationName: "scanType"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "kmsKeyId" ],
                members: {
                    kmsKeyId: {}
                }
            }
        },
        GetFindingsReportStatus: {
            http: {
                requestUri: "/reporting/status/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    reportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    destination: {
                        shape: "S3h"
                    },
                    errorCode: {},
                    errorMessage: {},
                    filterCriteria: {
                        shape: "S2r"
                    },
                    reportId: {},
                    status: {}
                }
            }
        },
        GetMember: {
            http: {
                requestUri: "/members/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S56"
                    }
                }
            }
        },
        GetSbomExport: {
            http: {
                requestUri: "/sbomexport/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    errorCode: {},
                    errorMessage: {},
                    filterCriteria: {
                        shape: "S3l"
                    },
                    format: {},
                    reportId: {},
                    s3Destination: {
                        shape: "S3h"
                    },
                    status: {}
                }
            },
            idempotent: true
        },
        ListAccountPermissions: {
            http: {
                requestUri: "/accountpermissions/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    service: {}
                }
            },
            output: {
                type: "structure",
                required: [ "permissions" ],
                members: {
                    nextToken: {},
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "operation", "service" ],
                            members: {
                                operation: {},
                                service: {}
                            }
                        }
                    }
                }
            }
        },
        ListCoverage: {
            http: {
                requestUri: "/coverage/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        shape: "S5i"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    coveredResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "resourceId", "resourceType", "scanType" ],
                            members: {
                                accountId: {},
                                lastScannedAt: {
                                    type: "timestamp"
                                },
                                resourceId: {},
                                resourceMetadata: {
                                    type: "structure",
                                    members: {
                                        ec2: {
                                            type: "structure",
                                            members: {
                                                amiId: {},
                                                platform: {},
                                                tags: {
                                                    shape: "S3c"
                                                }
                                            }
                                        },
                                        ecrImage: {
                                            type: "structure",
                                            members: {
                                                tags: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        },
                                        ecrRepository: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                scanFrequency: {}
                                            }
                                        },
                                        lambdaFunction: {
                                            type: "structure",
                                            members: {
                                                functionName: {},
                                                functionTags: {
                                                    shape: "S3c"
                                                },
                                                layers: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                runtime: {}
                                            }
                                        }
                                    }
                                },
                                resourceType: {},
                                scanStatus: {
                                    type: "structure",
                                    required: [ "reason", "statusCode" ],
                                    members: {
                                        reason: {},
                                        statusCode: {}
                                    }
                                },
                                scanType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCoverageStatistics: {
            http: {
                requestUri: "/coverage/statistics/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        shape: "S5i"
                    },
                    groupBy: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "totalCounts" ],
                members: {
                    countsByGroup: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                count: {
                                    type: "long"
                                },
                                groupKey: {}
                            }
                        }
                    },
                    nextToken: {},
                    totalCounts: {
                        type: "long"
                    }
                }
            }
        },
        ListDelegatedAdminAccounts: {
            http: {
                requestUri: "/delegatedadminaccounts/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    delegatedAdminAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFilters: {
            http: {
                requestUri: "/filters/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {},
                    arns: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "action", "arn", "createdAt", "criteria", "name", "ownerId", "updatedAt" ],
                            members: {
                                action: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                criteria: {
                                    shape: "S2r"
                                },
                                description: {},
                                name: {},
                                ownerId: {},
                                reason: {},
                                tags: {
                                    shape: "S3c"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFindingAggregations: {
            http: {
                requestUri: "/findings/aggregation/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "aggregationType" ],
                members: {
                    accountIds: {
                        shape: "S2s"
                    },
                    aggregationRequest: {
                        type: "structure",
                        members: {
                            accountAggregation: {
                                type: "structure",
                                members: {
                                    findingType: {},
                                    resourceType: {},
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            amiAggregation: {
                                type: "structure",
                                members: {
                                    amis: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            awsEcrContainerAggregation: {
                                type: "structure",
                                members: {
                                    architectures: {
                                        shape: "S2s"
                                    },
                                    imageShas: {
                                        shape: "S2s"
                                    },
                                    imageTags: {
                                        shape: "S2s"
                                    },
                                    repositories: {
                                        shape: "S2s"
                                    },
                                    resourceIds: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            ec2InstanceAggregation: {
                                type: "structure",
                                members: {
                                    amis: {
                                        shape: "S2s"
                                    },
                                    instanceIds: {
                                        shape: "S2s"
                                    },
                                    instanceTags: {
                                        shape: "S33"
                                    },
                                    operatingSystems: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            findingTypeAggregation: {
                                type: "structure",
                                members: {
                                    findingType: {},
                                    resourceType: {},
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            imageLayerAggregation: {
                                type: "structure",
                                members: {
                                    layerHashes: {
                                        shape: "S2s"
                                    },
                                    repositories: {
                                        shape: "S2s"
                                    },
                                    resourceIds: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            lambdaFunctionAggregation: {
                                type: "structure",
                                members: {
                                    functionNames: {
                                        shape: "S2s"
                                    },
                                    functionTags: {
                                        shape: "S33"
                                    },
                                    resourceIds: {
                                        shape: "S2s"
                                    },
                                    runtimes: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            lambdaLayerAggregation: {
                                type: "structure",
                                members: {
                                    functionNames: {
                                        shape: "S2s"
                                    },
                                    layerArns: {
                                        shape: "S2s"
                                    },
                                    resourceIds: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            packageAggregation: {
                                type: "structure",
                                members: {
                                    packageNames: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            repositoryAggregation: {
                                type: "structure",
                                members: {
                                    repositories: {
                                        shape: "S2s"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            titleAggregation: {
                                type: "structure",
                                members: {
                                    findingType: {},
                                    resourceType: {},
                                    sortBy: {},
                                    sortOrder: {},
                                    titles: {
                                        shape: "S2s"
                                    },
                                    vulnerabilityIds: {
                                        shape: "S2s"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    aggregationType: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "aggregationType" ],
                members: {
                    aggregationType: {},
                    nextToken: {},
                    responses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountAggregation: {
                                    type: "structure",
                                    members: {
                                        accountId: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                amiAggregation: {
                                    type: "structure",
                                    required: [ "ami" ],
                                    members: {
                                        accountId: {},
                                        affectedInstances: {
                                            type: "long"
                                        },
                                        ami: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                awsEcrContainerAggregation: {
                                    type: "structure",
                                    required: [ "resourceId" ],
                                    members: {
                                        accountId: {},
                                        architecture: {},
                                        imageSha: {},
                                        imageTags: {
                                            type: "list",
                                            member: {}
                                        },
                                        repository: {},
                                        resourceId: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                ec2InstanceAggregation: {
                                    type: "structure",
                                    required: [ "instanceId" ],
                                    members: {
                                        accountId: {},
                                        ami: {},
                                        instanceId: {},
                                        instanceTags: {
                                            shape: "S3c"
                                        },
                                        networkFindings: {
                                            type: "long"
                                        },
                                        operatingSystem: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                findingTypeAggregation: {
                                    type: "structure",
                                    members: {
                                        accountId: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                imageLayerAggregation: {
                                    type: "structure",
                                    required: [ "accountId", "layerHash", "repository", "resourceId" ],
                                    members: {
                                        accountId: {},
                                        layerHash: {},
                                        repository: {},
                                        resourceId: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                lambdaFunctionAggregation: {
                                    type: "structure",
                                    required: [ "resourceId" ],
                                    members: {
                                        accountId: {},
                                        functionName: {},
                                        lambdaTags: {
                                            shape: "S3c"
                                        },
                                        lastModifiedAt: {
                                            type: "timestamp"
                                        },
                                        resourceId: {},
                                        runtime: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                lambdaLayerAggregation: {
                                    type: "structure",
                                    required: [ "accountId", "functionName", "layerArn", "resourceId" ],
                                    members: {
                                        accountId: {},
                                        functionName: {},
                                        layerArn: {},
                                        resourceId: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                packageAggregation: {
                                    type: "structure",
                                    required: [ "packageName" ],
                                    members: {
                                        accountId: {},
                                        packageName: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                repositoryAggregation: {
                                    type: "structure",
                                    required: [ "repository" ],
                                    members: {
                                        accountId: {},
                                        affectedImages: {
                                            type: "long"
                                        },
                                        repository: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        }
                                    }
                                },
                                titleAggregation: {
                                    type: "structure",
                                    required: [ "title" ],
                                    members: {
                                        accountId: {},
                                        severityCounts: {
                                            shape: "S7t"
                                        },
                                        title: {},
                                        vulnerabilityId: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/findings/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        shape: "S2r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sortCriteria: {
                        type: "structure",
                        required: [ "field", "sortOrder" ],
                        members: {
                            field: {},
                            sortOrder: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "awsAccountId", "description", "findingArn", "firstObservedAt", "lastObservedAt", "remediation", "resources", "severity", "status", "type" ],
                            members: {
                                awsAccountId: {},
                                codeVulnerabilityDetails: {
                                    type: "structure",
                                    required: [ "cwes", "detectorId", "detectorName", "filePath" ],
                                    members: {
                                        cwes: {
                                            type: "list",
                                            member: {}
                                        },
                                        detectorId: {},
                                        detectorName: {},
                                        detectorTags: {
                                            type: "list",
                                            member: {}
                                        },
                                        filePath: {
                                            type: "structure",
                                            required: [ "endLine", "fileName", "filePath", "startLine" ],
                                            members: {
                                                endLine: {
                                                    type: "integer"
                                                },
                                                fileName: {},
                                                filePath: {},
                                                startLine: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        referenceUrls: {
                                            type: "list",
                                            member: {}
                                        },
                                        ruleId: {},
                                        sourceLambdaLayerArn: {}
                                    }
                                },
                                description: {},
                                epss: {
                                    type: "structure",
                                    members: {
                                        score: {
                                            type: "double"
                                        }
                                    }
                                },
                                exploitAvailable: {},
                                exploitabilityDetails: {
                                    type: "structure",
                                    members: {
                                        lastKnownExploitAt: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                findingArn: {},
                                firstObservedAt: {
                                    type: "timestamp"
                                },
                                fixAvailable: {},
                                inspectorScore: {
                                    type: "double"
                                },
                                inspectorScoreDetails: {
                                    type: "structure",
                                    members: {
                                        adjustedCvss: {
                                            type: "structure",
                                            required: [ "score", "scoreSource", "scoringVector", "version" ],
                                            members: {
                                                adjustments: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "metric", "reason" ],
                                                        members: {
                                                            metric: {},
                                                            reason: {}
                                                        }
                                                    }
                                                },
                                                cvssSource: {},
                                                score: {
                                                    type: "double"
                                                },
                                                scoreSource: {},
                                                scoringVector: {},
                                                version: {}
                                            }
                                        }
                                    }
                                },
                                lastObservedAt: {
                                    type: "timestamp"
                                },
                                networkReachabilityDetails: {
                                    type: "structure",
                                    required: [ "networkPath", "openPortRange", "protocol" ],
                                    members: {
                                        networkPath: {
                                            type: "structure",
                                            members: {
                                                steps: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "componentId", "componentType" ],
                                                        members: {
                                                            componentId: {},
                                                            componentType: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        openPortRange: {
                                            type: "structure",
                                            required: [ "begin", "end" ],
                                            members: {
                                                begin: {
                                                    type: "integer"
                                                },
                                                end: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        protocol: {}
                                    }
                                },
                                packageVulnerabilityDetails: {
                                    type: "structure",
                                    required: [ "source", "vulnerabilityId" ],
                                    members: {
                                        cvss: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "baseScore", "scoringVector", "source", "version" ],
                                                members: {
                                                    baseScore: {
                                                        type: "double"
                                                    },
                                                    scoringVector: {},
                                                    source: {},
                                                    version: {}
                                                }
                                            }
                                        },
                                        referenceUrls: {
                                            type: "list",
                                            member: {}
                                        },
                                        relatedVulnerabilities: {
                                            type: "list",
                                            member: {}
                                        },
                                        source: {},
                                        sourceUrl: {},
                                        vendorCreatedAt: {
                                            type: "timestamp"
                                        },
                                        vendorSeverity: {},
                                        vendorUpdatedAt: {
                                            type: "timestamp"
                                        },
                                        vulnerabilityId: {},
                                        vulnerablePackages: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name", "version" ],
                                                members: {
                                                    arch: {},
                                                    epoch: {
                                                        type: "integer"
                                                    },
                                                    filePath: {},
                                                    fixedInVersion: {},
                                                    name: {},
                                                    packageManager: {},
                                                    release: {},
                                                    remediation: {},
                                                    sourceLambdaLayerArn: {},
                                                    sourceLayerHash: {},
                                                    version: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                remediation: {
                                    type: "structure",
                                    members: {
                                        recommendation: {
                                            type: "structure",
                                            members: {
                                                Url: {},
                                                text: {}
                                            }
                                        }
                                    }
                                },
                                resources: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "id", "type" ],
                                        members: {
                                            details: {
                                                type: "structure",
                                                members: {
                                                    awsEc2Instance: {
                                                        type: "structure",
                                                        members: {
                                                            iamInstanceProfileArn: {},
                                                            imageId: {},
                                                            ipV4Addresses: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            ipV6Addresses: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            keyName: {},
                                                            launchedAt: {
                                                                type: "timestamp"
                                                            },
                                                            platform: {},
                                                            subnetId: {},
                                                            type: {},
                                                            vpcId: {}
                                                        }
                                                    },
                                                    awsEcrContainerImage: {
                                                        type: "structure",
                                                        required: [ "imageHash", "registry", "repositoryName" ],
                                                        members: {
                                                            architecture: {},
                                                            author: {},
                                                            imageHash: {},
                                                            imageTags: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            platform: {},
                                                            pushedAt: {
                                                                type: "timestamp"
                                                            },
                                                            registry: {},
                                                            repositoryName: {}
                                                        }
                                                    },
                                                    awsLambdaFunction: {
                                                        type: "structure",
                                                        required: [ "codeSha256", "executionRoleArn", "functionName", "runtime", "version" ],
                                                        members: {
                                                            architectures: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            codeSha256: {},
                                                            executionRoleArn: {},
                                                            functionName: {},
                                                            lastModifiedAt: {
                                                                type: "timestamp"
                                                            },
                                                            layers: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            packageType: {},
                                                            runtime: {},
                                                            version: {},
                                                            vpcConfig: {
                                                                type: "structure",
                                                                members: {
                                                                    securityGroupIds: {
                                                                        type: "list",
                                                                        member: {}
                                                                    },
                                                                    subnetIds: {
                                                                        type: "list",
                                                                        member: {}
                                                                    },
                                                                    vpcId: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            id: {},
                                            partition: {},
                                            region: {},
                                            tags: {
                                                shape: "S3c"
                                            },
                                            type: {}
                                        }
                                    }
                                },
                                severity: {},
                                status: {},
                                title: {},
                                type: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                requestUri: "/members/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    onlyAssociated: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        type: "list",
                        member: {
                            shape: "S56"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S3c"
                    }
                }
            }
        },
        ListUsageTotals: {
            http: {
                requestUri: "/usage/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    totals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                usage: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            currency: {},
                                            estimatedMonthlyCost: {
                                                type: "double"
                                            },
                                            total: {
                                                type: "double"
                                            },
                                            type: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ResetEncryptionKey: {
            http: {
                method: "PUT",
                requestUri: "/encryptionkey/reset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceType", "scanType" ],
                members: {
                    resourceType: {},
                    scanType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        SearchVulnerabilities: {
            http: {
                requestUri: "/vulnerabilities/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filterCriteria" ],
                members: {
                    filterCriteria: {
                        type: "structure",
                        required: [ "vulnerabilityIds" ],
                        members: {
                            vulnerabilityIds: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "vulnerabilities" ],
                members: {
                    nextToken: {},
                    vulnerabilities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id" ],
                            members: {
                                atigData: {
                                    type: "structure",
                                    members: {
                                        firstSeen: {
                                            type: "timestamp"
                                        },
                                        lastSeen: {
                                            type: "timestamp"
                                        },
                                        targets: {
                                            type: "list",
                                            member: {}
                                        },
                                        ttps: {
                                            shape: "S1q"
                                        }
                                    }
                                },
                                cisaData: {
                                    shape: "S16"
                                },
                                cvss2: {
                                    type: "structure",
                                    members: {
                                        baseScore: {
                                            type: "double"
                                        },
                                        scoringVector: {}
                                    }
                                },
                                cvss3: {
                                    type: "structure",
                                    members: {
                                        baseScore: {
                                            type: "double"
                                        },
                                        scoringVector: {}
                                    }
                                },
                                cwes: {
                                    shape: "S1a"
                                },
                                description: {},
                                detectionPlatforms: {
                                    type: "list",
                                    member: {}
                                },
                                epss: {
                                    type: "structure",
                                    members: {
                                        score: {
                                            type: "double"
                                        }
                                    }
                                },
                                exploitObserved: {
                                    shape: "S1i"
                                },
                                id: {},
                                referenceUrls: {
                                    shape: "S1l"
                                },
                                relatedVulnerabilities: {
                                    type: "list",
                                    member: {}
                                },
                                source: {},
                                sourceUrl: {},
                                vendorCreatedAt: {
                                    type: "timestamp"
                                },
                                vendorSeverity: {},
                                vendorUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfiguration: {
            http: {
                requestUri: "/configuration/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ecrConfiguration" ],
                members: {
                    ecrConfiguration: {
                        type: "structure",
                        required: [ "rescanDuration" ],
                        members: {
                            rescanDuration: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEc2DeepInspectionConfiguration: {
            http: {
                requestUri: "/ec2deepinspectionconfiguration/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    activateDeepInspection: {
                        type: "boolean"
                    },
                    packagePaths: {
                        shape: "S4s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorMessage: {},
                    orgPackagePaths: {
                        shape: "S4s"
                    },
                    packagePaths: {
                        shape: "S4s"
                    },
                    status: {}
                }
            }
        },
        UpdateEncryptionKey: {
            http: {
                method: "PUT",
                requestUri: "/encryptionkey/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "kmsKeyId", "resourceType", "scanType" ],
                members: {
                    kmsKeyId: {},
                    resourceType: {},
                    scanType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateFilter: {
            http: {
                requestUri: "/filters/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filterArn" ],
                members: {
                    action: {},
                    description: {},
                    filterArn: {},
                    filterCriteria: {
                        shape: "S2r"
                    },
                    name: {},
                    reason: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        UpdateOrgEc2DeepInspectionConfiguration: {
            http: {
                requestUri: "/ec2deepinspectionconfiguration/org/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "orgPackagePaths" ],
                members: {
                    orgPackagePaths: {
                        shape: "S4s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                requestUri: "/organizationconfiguration/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "autoEnable" ],
                members: {
                    autoEnable: {
                        shape: "S3y"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "autoEnable" ],
                members: {
                    autoEnable: {
                        shape: "S3y"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "structure",
            required: [ "errorCode", "errorMessage", "status" ],
            members: {
                errorCode: {},
                errorMessage: {},
                status: {}
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "accountId", "errorCode", "errorMessage" ],
                members: {
                    accountId: {},
                    errorCode: {},
                    errorMessage: {},
                    resourceStatus: {
                        shape: "Sg"
                    },
                    status: {}
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "ec2", "ecr" ],
            members: {
                ec2: {},
                ecr: {},
                lambda: {},
                lambdaCode: {}
            }
        },
        S16: {
            type: "structure",
            members: {
                action: {},
                dateAdded: {
                    type: "timestamp"
                },
                dateDue: {
                    type: "timestamp"
                }
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1i: {
            type: "structure",
            members: {
                firstSeen: {
                    type: "timestamp"
                },
                lastSeen: {
                    type: "timestamp"
                }
            }
        },
        S1l: {
            type: "list",
            member: {}
        },
        S1q: {
            type: "list",
            member: {}
        },
        S29: {
            type: "list",
            member: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {},
                    errorMessage: {},
                    status: {}
                }
            }
        },
        S2c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {},
                    ec2ScanStatus: {},
                    errorMessage: {}
                }
            }
        },
        S2r: {
            type: "structure",
            members: {
                awsAccountId: {
                    shape: "S2s"
                },
                codeVulnerabilityDetectorName: {
                    shape: "S2s"
                },
                codeVulnerabilityDetectorTags: {
                    shape: "S2s"
                },
                codeVulnerabilityFilePath: {
                    shape: "S2s"
                },
                componentId: {
                    shape: "S2s"
                },
                componentType: {
                    shape: "S2s"
                },
                ec2InstanceImageId: {
                    shape: "S2s"
                },
                ec2InstanceSubnetId: {
                    shape: "S2s"
                },
                ec2InstanceVpcId: {
                    shape: "S2s"
                },
                ecrImageArchitecture: {
                    shape: "S2s"
                },
                ecrImageHash: {
                    shape: "S2s"
                },
                ecrImagePushedAt: {
                    shape: "S2w"
                },
                ecrImageRegistry: {
                    shape: "S2s"
                },
                ecrImageRepositoryName: {
                    shape: "S2s"
                },
                ecrImageTags: {
                    shape: "S2s"
                },
                epssScore: {
                    shape: "S2y"
                },
                exploitAvailable: {
                    shape: "S2s"
                },
                findingArn: {
                    shape: "S2s"
                },
                findingStatus: {
                    shape: "S2s"
                },
                findingType: {
                    shape: "S2s"
                },
                firstObservedAt: {
                    shape: "S2w"
                },
                fixAvailable: {
                    shape: "S2s"
                },
                inspectorScore: {
                    shape: "S2y"
                },
                lambdaFunctionExecutionRoleArn: {
                    shape: "S2s"
                },
                lambdaFunctionLastModifiedAt: {
                    shape: "S2w"
                },
                lambdaFunctionLayers: {
                    shape: "S2s"
                },
                lambdaFunctionName: {
                    shape: "S2s"
                },
                lambdaFunctionRuntime: {
                    shape: "S2s"
                },
                lastObservedAt: {
                    shape: "S2w"
                },
                networkProtocol: {
                    shape: "S2s"
                },
                portRange: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            beginInclusive: {
                                type: "integer"
                            },
                            endInclusive: {
                                type: "integer"
                            }
                        }
                    }
                },
                relatedVulnerabilities: {
                    shape: "S2s"
                },
                resourceId: {
                    shape: "S2s"
                },
                resourceTags: {
                    shape: "S33"
                },
                resourceType: {
                    shape: "S2s"
                },
                severity: {
                    shape: "S2s"
                },
                title: {
                    shape: "S2s"
                },
                updatedAt: {
                    shape: "S2w"
                },
                vendorSeverity: {
                    shape: "S2s"
                },
                vulnerabilityId: {
                    shape: "S2s"
                },
                vulnerabilitySource: {
                    shape: "S2s"
                },
                vulnerablePackages: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            architecture: {
                                shape: "S2t"
                            },
                            epoch: {
                                shape: "S2z"
                            },
                            name: {
                                shape: "S2t"
                            },
                            release: {
                                shape: "S2t"
                            },
                            sourceLambdaLayerArn: {
                                shape: "S2t"
                            },
                            sourceLayerHash: {
                                shape: "S2t"
                            },
                            version: {
                                shape: "S2t"
                            }
                        }
                    }
                }
            }
        },
        S2s: {
            type: "list",
            member: {
                shape: "S2t"
            }
        },
        S2t: {
            type: "structure",
            required: [ "comparison", "value" ],
            members: {
                comparison: {},
                value: {}
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    endInclusive: {
                        type: "timestamp"
                    },
                    startInclusive: {
                        type: "timestamp"
                    }
                }
            }
        },
        S2y: {
            type: "list",
            member: {
                shape: "S2z"
            }
        },
        S2z: {
            type: "structure",
            members: {
                lowerInclusive: {
                    type: "double"
                },
                upperInclusive: {
                    type: "double"
                }
            }
        },
        S33: {
            type: "list",
            member: {
                type: "structure",
                required: [ "comparison", "key" ],
                members: {
                    comparison: {},
                    key: {},
                    value: {}
                }
            }
        },
        S3c: {
            type: "map",
            key: {},
            value: {}
        },
        S3h: {
            type: "structure",
            required: [ "bucketName", "kmsKeyArn" ],
            members: {
                bucketName: {},
                keyPrefix: {},
                kmsKeyArn: {}
            }
        },
        S3l: {
            type: "structure",
            members: {
                accountId: {
                    shape: "S3m"
                },
                ec2InstanceTags: {
                    shape: "S3q"
                },
                ecrImageTags: {
                    shape: "S3m"
                },
                ecrRepositoryName: {
                    shape: "S3m"
                },
                lambdaFunctionName: {
                    shape: "S3m"
                },
                lambdaFunctionTags: {
                    shape: "S3q"
                },
                resourceId: {
                    shape: "S3m"
                },
                resourceType: {
                    shape: "S3m"
                }
            }
        },
        S3m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "comparison", "value" ],
                members: {
                    comparison: {},
                    value: {}
                }
            }
        },
        S3q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "comparison", "key" ],
                members: {
                    comparison: {},
                    key: {},
                    value: {}
                }
            }
        },
        S3y: {
            type: "structure",
            required: [ "ec2", "ecr" ],
            members: {
                ec2: {
                    type: "boolean"
                },
                ecr: {
                    type: "boolean"
                },
                lambda: {
                    type: "boolean"
                },
                lambdaCode: {
                    type: "boolean"
                }
            }
        },
        S43: {
            type: "list",
            member: {
                type: "structure",
                required: [ "accountId", "resourceStatus", "status" ],
                members: {
                    accountId: {},
                    resourceStatus: {
                        shape: "Sg"
                    },
                    status: {}
                }
            }
        },
        S4s: {
            type: "list",
            member: {}
        },
        S56: {
            type: "structure",
            members: {
                accountId: {},
                delegatedAdminAccountId: {},
                relationshipStatus: {},
                updatedAt: {
                    type: "timestamp"
                }
            }
        },
        S5i: {
            type: "structure",
            members: {
                accountId: {
                    shape: "S5j"
                },
                ec2InstanceTags: {
                    shape: "S5n"
                },
                ecrImageTags: {
                    shape: "S5j"
                },
                ecrRepositoryName: {
                    shape: "S5j"
                },
                lambdaFunctionName: {
                    shape: "S5j"
                },
                lambdaFunctionRuntime: {
                    shape: "S5j"
                },
                lambdaFunctionTags: {
                    shape: "S5n"
                },
                lastScannedAt: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            endInclusive: {
                                type: "timestamp"
                            },
                            startInclusive: {
                                type: "timestamp"
                            }
                        }
                    }
                },
                resourceId: {
                    shape: "S5j"
                },
                resourceType: {
                    shape: "S5j"
                },
                scanStatusCode: {
                    shape: "S5j"
                },
                scanStatusReason: {
                    shape: "S5j"
                },
                scanType: {
                    shape: "S5j"
                }
            }
        },
        S5j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "comparison", "value" ],
                members: {
                    comparison: {},
                    value: {}
                }
            }
        },
        S5n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "comparison", "key" ],
                members: {
                    comparison: {},
                    key: {},
                    value: {}
                }
            }
        },
        S7t: {
            type: "structure",
            members: {
                all: {
                    type: "long"
                },
                critical: {
                    type: "long"
                },
                high: {
                    type: "long"
                },
                medium: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        ListAccountPermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "permissions"
        },
        ListCoverage: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "coveredResources"
        },
        ListCoverageStatistics: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "countsByGroup"
        },
        ListDelegatedAdminAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "delegatedAdminAccounts"
        },
        ListFilters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "filters"
        },
        ListFindingAggregations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "responses"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListUsageTotals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "totals"
        },
        SearchVulnerabilities: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "vulnerabilities"
        }
    }
};

AWS.apiLoader.services["rbin"] = {};

AWS.Rbin = AWS.Service.defineService("rbin", [ "2021-06-15" ]);

AWS.apiLoader.services["rbin"]["2021-06-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-06-15",
        endpointPrefix: "rbin",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Recycle Bin",
        serviceId: "rbin",
        signatureVersion: "v4",
        signingName: "rbin",
        uid: "rbin-2021-06-15"
    },
    operations: {
        CreateRule: {
            http: {
                requestUri: "/rules",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "RetentionPeriod", "ResourceType" ],
                members: {
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    Tags: {
                        shape: "S6"
                    },
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    },
                    LockConfiguration: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    Tags: {
                        shape: "S6"
                    },
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {},
                    LockConfiguration: {
                        shape: "Sf"
                    },
                    LockState: {},
                    RuleArn: {}
                }
            }
        },
        DeleteRule: {
            http: {
                method: "DELETE",
                requestUri: "/rules/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetRule: {
            http: {
                method: "GET",
                requestUri: "/rules/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    Description: {},
                    ResourceType: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {},
                    LockConfiguration: {
                        shape: "Sf"
                    },
                    LockState: {},
                    LockEndTime: {
                        type: "timestamp"
                    },
                    RuleArn: {}
                }
            }
        },
        ListRules: {
            http: {
                requestUri: "/list-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceType" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    },
                    LockState: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Identifier: {},
                                Description: {},
                                RetentionPeriod: {
                                    shape: "S2"
                                },
                                LockState: {},
                                RuleArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        LockRule: {
            http: {
                method: "PATCH",
                requestUri: "/rules/{identifier}/lock",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier", "LockConfiguration" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    LockConfiguration: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    Description: {},
                    ResourceType: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {},
                    LockConfiguration: {
                        shape: "Sf"
                    },
                    LockState: {},
                    RuleArn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UnlockRule: {
            http: {
                method: "PATCH",
                requestUri: "/rules/{identifier}/unlock",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    Description: {},
                    ResourceType: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {},
                    LockConfiguration: {
                        shape: "Sf"
                    },
                    LockState: {},
                    LockEndTime: {
                        type: "timestamp"
                    },
                    RuleArn: {}
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRule: {
            http: {
                method: "PATCH",
                requestUri: "/rules/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {},
                    LockState: {},
                    LockEndTime: {
                        type: "timestamp"
                    },
                    RuleArn: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "RetentionPeriodValue", "RetentionPeriodUnit" ],
            members: {
                RetentionPeriodValue: {
                    type: "integer"
                },
                RetentionPeriodUnit: {}
            }
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ResourceTagKey" ],
                members: {
                    ResourceTagKey: {},
                    ResourceTagValue: {}
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "UnlockDelay" ],
            members: {
                UnlockDelay: {
                    type: "structure",
                    required: [ "UnlockDelayValue", "UnlockDelayUnit" ],
                    members: {
                        UnlockDelayValue: {
                            type: "integer"
                        },
                        UnlockDelayUnit: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Rules"
        }
    }
};

AWS.apiLoader.services["rum"] = {};

AWS.RUM = AWS.Service.defineService("rum", [ "2018-05-10" ]);

AWS.apiLoader.services["rum"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "rum",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "CloudWatch RUM",
        serviceId: "RUM",
        signatureVersion: "v4",
        signingName: "rum",
        uid: "rum-2018-05-10"
    },
    operations: {
        BatchCreateRumMetricDefinitions: {
            http: {
                requestUri: "/rummetrics/{AppMonitorName}/metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorName", "Destination", "MetricDefinitions" ],
                members: {
                    AppMonitorName: {
                        location: "uri",
                        locationName: "AppMonitorName"
                    },
                    Destination: {},
                    DestinationArn: {},
                    MetricDefinitions: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ErrorCode", "ErrorMessage", "MetricDefinition" ],
                            members: {
                                ErrorCode: {},
                                ErrorMessage: {},
                                MetricDefinition: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    MetricDefinitions: {
                        shape: "Sj"
                    }
                }
            },
            idempotent: true
        },
        BatchDeleteRumMetricDefinitions: {
            http: {
                method: "DELETE",
                requestUri: "/rummetrics/{AppMonitorName}/metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorName", "Destination", "MetricDefinitionIds" ],
                members: {
                    AppMonitorName: {
                        location: "uri",
                        locationName: "AppMonitorName"
                    },
                    Destination: {
                        location: "querystring",
                        locationName: "destination"
                    },
                    DestinationArn: {
                        location: "querystring",
                        locationName: "destinationArn"
                    },
                    MetricDefinitionIds: {
                        shape: "Sn",
                        location: "querystring",
                        locationName: "metricDefinitionIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ErrorCode", "ErrorMessage", "MetricDefinitionId" ],
                            members: {
                                ErrorCode: {},
                                ErrorMessage: {},
                                MetricDefinitionId: {}
                            }
                        }
                    },
                    MetricDefinitionIds: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        BatchGetRumMetricDefinitions: {
            http: {
                method: "GET",
                requestUri: "/rummetrics/{AppMonitorName}/metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorName", "Destination" ],
                members: {
                    AppMonitorName: {
                        location: "uri",
                        locationName: "AppMonitorName"
                    },
                    Destination: {
                        location: "querystring",
                        locationName: "destination"
                    },
                    DestinationArn: {
                        location: "querystring",
                        locationName: "destinationArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricDefinitions: {
                        shape: "Sj"
                    },
                    NextToken: {}
                }
            }
        },
        CreateAppMonitor: {
            http: {
                requestUri: "/appmonitor",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Domain", "Name" ],
                members: {
                    AppMonitorConfiguration: {
                        shape: "Sv"
                    },
                    CustomEvents: {
                        shape: "S15"
                    },
                    CwLogEnabled: {
                        type: "boolean"
                    },
                    Domain: {},
                    Name: {},
                    Tags: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            },
            idempotent: true
        },
        DeleteAppMonitor: {
            http: {
                method: "DELETE",
                requestUri: "/appmonitor/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRumMetricsDestination: {
            http: {
                method: "DELETE",
                requestUri: "/rummetrics/{AppMonitorName}/metricsdestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorName", "Destination" ],
                members: {
                    AppMonitorName: {
                        location: "uri",
                        locationName: "AppMonitorName"
                    },
                    Destination: {
                        location: "querystring",
                        locationName: "destination"
                    },
                    DestinationArn: {
                        location: "querystring",
                        locationName: "destinationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAppMonitor: {
            http: {
                method: "GET",
                requestUri: "/appmonitor/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppMonitor: {
                        type: "structure",
                        members: {
                            AppMonitorConfiguration: {
                                shape: "Sv"
                            },
                            Created: {},
                            CustomEvents: {
                                shape: "S15"
                            },
                            DataStorage: {
                                type: "structure",
                                members: {
                                    CwLog: {
                                        type: "structure",
                                        members: {
                                            CwLogEnabled: {
                                                type: "boolean"
                                            },
                                            CwLogGroup: {}
                                        }
                                    }
                                }
                            },
                            Domain: {},
                            Id: {},
                            LastModified: {},
                            Name: {},
                            State: {},
                            Tags: {
                                shape: "S18"
                            }
                        }
                    }
                }
            }
        },
        GetAppMonitorData: {
            http: {
                requestUri: "/appmonitor/{Name}/data",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "TimeRange" ],
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NextToken: {},
                    TimeRange: {
                        type: "structure",
                        required: [ "After" ],
                        members: {
                            After: {
                                type: "long"
                            },
                            Before: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Events: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListAppMonitors: {
            http: {
                requestUri: "/appmonitors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppMonitorSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Created: {},
                                Id: {},
                                LastModified: {},
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRumMetricsDestinations: {
            http: {
                method: "GET",
                requestUri: "/rummetrics/{AppMonitorName}/metricsdestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorName" ],
                members: {
                    AppMonitorName: {
                        location: "uri",
                        locationName: "AppMonitorName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Destinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Destination: {},
                                DestinationArn: {},
                                IamRoleArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S18"
                    }
                }
            }
        },
        PutRumEvents: {
            http: {
                requestUri: "/appmonitors/{Id}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorDetails", "BatchId", "Id", "RumEvents", "UserDetails" ],
                members: {
                    AppMonitorDetails: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            version: {}
                        }
                    },
                    BatchId: {},
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    RumEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "details", "id", "timestamp", "type" ],
                            members: {
                                details: {
                                    jsonvalue: true
                                },
                                id: {},
                                metadata: {
                                    jsonvalue: true
                                },
                                timestamp: {
                                    type: "timestamp"
                                },
                                type: {}
                            }
                        }
                    },
                    UserDetails: {
                        type: "structure",
                        members: {
                            sessionId: {},
                            userId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        PutRumMetricsDestination: {
            http: {
                requestUri: "/rummetrics/{AppMonitorName}/metricsdestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorName", "Destination" ],
                members: {
                    AppMonitorName: {
                        location: "uri",
                        locationName: "AppMonitorName"
                    },
                    Destination: {},
                    DestinationArn: {},
                    IamRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAppMonitor: {
            http: {
                method: "PATCH",
                requestUri: "/appmonitor/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    AppMonitorConfiguration: {
                        shape: "Sv"
                    },
                    CustomEvents: {
                        shape: "S15"
                    },
                    CwLogEnabled: {
                        type: "boolean"
                    },
                    Domain: {},
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRumMetricDefinition: {
            http: {
                method: "PATCH",
                requestUri: "/rummetrics/{AppMonitorName}/metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorName", "Destination", "MetricDefinition", "MetricDefinitionId" ],
                members: {
                    AppMonitorName: {
                        location: "uri",
                        locationName: "AppMonitorName"
                    },
                    Destination: {},
                    DestinationArn: {},
                    MetricDefinition: {
                        shape: "S6"
                    },
                    MetricDefinitionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "Name" ],
            members: {
                DimensionKeys: {
                    shape: "S7"
                },
                EventPattern: {},
                Name: {},
                Namespace: {},
                UnitLabel: {},
                ValueKey: {}
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MetricDefinitionId", "Name" ],
                members: {
                    DimensionKeys: {
                        shape: "S7"
                    },
                    EventPattern: {},
                    MetricDefinitionId: {},
                    Name: {},
                    Namespace: {},
                    UnitLabel: {},
                    ValueKey: {}
                }
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "structure",
            members: {
                AllowCookies: {
                    type: "boolean"
                },
                EnableXRay: {
                    type: "boolean"
                },
                ExcludedPages: {
                    shape: "Sx"
                },
                FavoritePages: {
                    type: "list",
                    member: {}
                },
                GuestRoleArn: {},
                IdentityPoolId: {},
                IncludedPages: {
                    shape: "Sx"
                },
                SessionSampleRate: {
                    type: "double"
                },
                Telemetries: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sx: {
            type: "list",
            member: {}
        },
        S15: {
            type: "structure",
            members: {
                Status: {}
            }
        },
        S18: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        BatchGetRumMetricDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MetricDefinitions"
        },
        GetAppMonitorData: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Events"
        },
        ListAppMonitors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AppMonitorSummaries"
        },
        ListRumMetricsDestinations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Destinations"
        }
    }
};

AWS.apiLoader.services["backupgateway"] = {};

AWS.BackupGateway = AWS.Service.defineService("backupgateway", [ "2021-01-01" ]);

AWS.apiLoader.services["backupgateway"]["2021-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-01",
        endpointPrefix: "backup-gateway",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS Backup Gateway",
        serviceId: "Backup Gateway",
        signatureVersion: "v4",
        signingName: "backup-gateway",
        targetPrefix: "BackupOnPremises_v20210101",
        uid: "backup-gateway-2021-01-01"
    },
    operations: {
        AssociateGatewayToServer: {
            input: {
                type: "structure",
                required: [ "GatewayArn", "ServerArn" ],
                members: {
                    GatewayArn: {},
                    ServerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        CreateGateway: {
            input: {
                type: "structure",
                required: [ "ActivationKey", "GatewayDisplayName", "GatewayType" ],
                members: {
                    ActivationKey: {},
                    GatewayDisplayName: {},
                    GatewayType: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        DeleteGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            },
            idempotent: true
        },
        DeleteHypervisor: {
            input: {
                type: "structure",
                required: [ "HypervisorArn" ],
                members: {
                    HypervisorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            },
            idempotent: true
        },
        DisassociateGatewayFromServer: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        GetBandwidthRateLimitSchedule: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BandwidthRateLimitIntervals: {
                        shape: "Sm"
                    },
                    GatewayArn: {}
                }
            }
        },
        GetGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateway: {
                        type: "structure",
                        members: {
                            GatewayArn: {},
                            GatewayDisplayName: {},
                            GatewayType: {},
                            HypervisorId: {},
                            LastSeenTime: {
                                type: "timestamp"
                            },
                            MaintenanceStartTime: {
                                type: "structure",
                                required: [ "HourOfDay", "MinuteOfHour" ],
                                members: {
                                    DayOfMonth: {
                                        type: "integer"
                                    },
                                    DayOfWeek: {
                                        type: "integer"
                                    },
                                    HourOfDay: {
                                        type: "integer"
                                    },
                                    MinuteOfHour: {
                                        type: "integer"
                                    }
                                }
                            },
                            NextUpdateAvailabilityTime: {
                                type: "timestamp"
                            },
                            VpcEndpoint: {}
                        }
                    }
                }
            }
        },
        GetHypervisor: {
            input: {
                type: "structure",
                required: [ "HypervisorArn" ],
                members: {
                    HypervisorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Hypervisor: {
                        type: "structure",
                        members: {
                            Host: {},
                            HypervisorArn: {},
                            KmsKeyArn: {},
                            LastSuccessfulMetadataSyncTime: {
                                type: "timestamp"
                            },
                            LatestMetadataSyncStatus: {},
                            LatestMetadataSyncStatusMessage: {},
                            LogGroupArn: {},
                            Name: {},
                            State: {}
                        }
                    }
                }
            }
        },
        GetHypervisorPropertyMappings: {
            input: {
                type: "structure",
                required: [ "HypervisorArn" ],
                members: {
                    HypervisorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {},
                    IamRoleArn: {},
                    VmwareToAwsTagMappings: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetVirtualMachine: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VirtualMachine: {
                        type: "structure",
                        members: {
                            HostName: {},
                            HypervisorId: {},
                            LastBackupDate: {
                                type: "timestamp"
                            },
                            Name: {},
                            Path: {},
                            ResourceArn: {},
                            VmwareTags: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        VmwareCategory: {},
                                        VmwareTagDescription: {},
                                        VmwareTagName: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ImportHypervisorConfiguration: {
            input: {
                type: "structure",
                required: [ "Host", "Name" ],
                members: {
                    Host: {},
                    KmsKeyArn: {},
                    Name: {},
                    Password: {
                        shape: "S1p"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    Username: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            }
        },
        ListGateways: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GatewayArn: {},
                                GatewayDisplayName: {},
                                GatewayType: {},
                                HypervisorId: {},
                                LastSeenTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHypervisors: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Hypervisors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Host: {},
                                HypervisorArn: {},
                                KmsKeyArn: {},
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        ListVirtualMachines: {
            input: {
                type: "structure",
                members: {
                    HypervisorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    VirtualMachines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                HostName: {},
                                HypervisorId: {},
                                LastBackupDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Path: {},
                                ResourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        PutBandwidthRateLimitSchedule: {
            input: {
                type: "structure",
                required: [ "BandwidthRateLimitIntervals", "GatewayArn" ],
                members: {
                    BandwidthRateLimitIntervals: {
                        shape: "Sm"
                    },
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            },
            idempotent: true
        },
        PutHypervisorPropertyMappings: {
            input: {
                type: "structure",
                required: [ "HypervisorArn", "IamRoleArn", "VmwareToAwsTagMappings" ],
                members: {
                    HypervisorArn: {},
                    IamRoleArn: {},
                    VmwareToAwsTagMappings: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            },
            idempotent: true
        },
        PutMaintenanceStartTime: {
            input: {
                type: "structure",
                required: [ "GatewayArn", "HourOfDay", "MinuteOfHour" ],
                members: {
                    DayOfMonth: {
                        type: "integer"
                    },
                    DayOfWeek: {
                        type: "integer"
                    },
                    GatewayArn: {},
                    HourOfDay: {
                        type: "integer"
                    },
                    MinuteOfHour: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        StartVirtualMachinesMetadataSync: {
            input: {
                type: "structure",
                required: [ "HypervisorArn" ],
                members: {
                    HypervisorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceARN: {}
                }
            }
        },
        TestHypervisorConfiguration: {
            input: {
                type: "structure",
                required: [ "GatewayArn", "Host" ],
                members: {
                    GatewayArn: {},
                    Host: {},
                    Password: {
                        shape: "S1p"
                    },
                    Username: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceARN: {}
                }
            }
        },
        UpdateGatewayInformation: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {},
                    GatewayDisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        UpdateGatewaySoftwareNow: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        UpdateHypervisor: {
            input: {
                type: "structure",
                required: [ "HypervisorArn" ],
                members: {
                    Host: {},
                    HypervisorArn: {},
                    LogGroupArn: {},
                    Name: {},
                    Password: {
                        shape: "S1p"
                    },
                    Username: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DaysOfWeek", "EndHourOfDay", "EndMinuteOfHour", "StartHourOfDay", "StartMinuteOfHour" ],
                members: {
                    AverageUploadRateLimitInBitsPerSec: {
                        type: "long"
                    },
                    DaysOfWeek: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    },
                    EndHourOfDay: {
                        type: "integer"
                    },
                    EndMinuteOfHour: {
                        type: "integer"
                    },
                    StartHourOfDay: {
                        type: "integer"
                    },
                    StartMinuteOfHour: {
                        type: "integer"
                    }
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AwsTagKey", "AwsTagValue", "VmwareCategory", "VmwareTagName" ],
                members: {
                    AwsTagKey: {},
                    AwsTagValue: {},
                    VmwareCategory: {},
                    VmwareTagName: {}
                }
            }
        },
        S1p: {
            type: "string",
            sensitive: true
        },
        S1q: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListGateways: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Gateways"
        },
        ListHypervisors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Hypervisors"
        },
        ListVirtualMachines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "VirtualMachines"
        }
    }
};

AWS.apiLoader.services["iottwinmaker"] = {};

AWS.IoTTwinMaker = AWS.Service.defineService("iottwinmaker", [ "2021-11-29" ]);

AWS.apiLoader.services["iottwinmaker"]["2021-11-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-11-29",
        endpointPrefix: "iottwinmaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS IoT TwinMaker",
        serviceId: "IoTTwinMaker",
        signatureVersion: "v4",
        signingName: "iottwinmaker",
        uid: "iottwinmaker-2021-11-29"
    },
    operations: {
        BatchPutPropertyValues: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entity-properties",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "entries" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    entries: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errorEntries" ],
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errors" ],
                            members: {
                                errors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "errorCode", "errorMessage", "entry" ],
                                        members: {
                                            errorCode: {},
                                            errorMessage: {},
                                            entry: {
                                                shape: "S4"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        CancelMetadataTransferJob: {
            http: {
                method: "PUT",
                requestUri: "/metadata-transfer-jobs/{metadataTransferJobId}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "metadataTransferJobId" ],
                members: {
                    metadataTransferJobId: {
                        location: "uri",
                        locationName: "metadataTransferJobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "metadataTransferJobId", "arn", "updateDateTime", "status" ],
                members: {
                    metadataTransferJobId: {},
                    arn: {},
                    updateDateTime: {
                        type: "timestamp"
                    },
                    status: {
                        shape: "Sw"
                    },
                    progress: {
                        shape: "S11"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateComponentType: {
            http: {
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "componentTypeId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    isSingleton: {
                        type: "boolean"
                    },
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    },
                    description: {},
                    propertyDefinitions: {
                        shape: "S15"
                    },
                    extendsFrom: {
                        shape: "S1d"
                    },
                    functions: {
                        shape: "S1e"
                    },
                    tags: {
                        shape: "S1l"
                    },
                    propertyGroups: {
                        shape: "S1o"
                    },
                    componentTypeName: {},
                    compositeComponentTypes: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime", "state" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateEntity: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entities",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "entityName" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    entityId: {},
                    entityName: {},
                    description: {},
                    components: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                description: {},
                                componentTypeId: {},
                                properties: {
                                    shape: "S21"
                                },
                                propertyGroups: {
                                    shape: "S24"
                                }
                            }
                        }
                    },
                    compositeComponents: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                description: {},
                                properties: {
                                    shape: "S21"
                                },
                                propertyGroups: {
                                    shape: "S24"
                                }
                            }
                        }
                    },
                    parentEntityId: {},
                    tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entityId", "arn", "creationDateTime", "state" ],
                members: {
                    entityId: {},
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateMetadataTransferJob: {
            http: {
                requestUri: "/metadata-transfer-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sources", "destination" ],
                members: {
                    metadataTransferJobId: {},
                    description: {},
                    sources: {
                        shape: "S2c"
                    },
                    destination: {
                        shape: "S2t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "metadataTransferJobId", "arn", "creationDateTime", "status" ],
                members: {
                    metadataTransferJobId: {},
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    status: {
                        shape: "Sw"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateScene: {
            http: {
                requestUri: "/workspaces/{workspaceId}/scenes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "sceneId", "contentLocation" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    sceneId: {},
                    contentLocation: {},
                    description: {},
                    capabilities: {
                        shape: "S31"
                    },
                    tags: {
                        shape: "S1l"
                    },
                    sceneMetadata: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateSyncJob: {
            http: {
                requestUri: "/workspaces/{workspaceId}/sync-jobs/{syncSource}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "syncSource", "syncRole" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    syncSource: {
                        location: "uri",
                        locationName: "syncSource"
                    },
                    syncRole: {},
                    tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime", "state" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateWorkspace: {
            http: {
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    description: {},
                    s3Location: {},
                    role: {},
                    tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteComponentType: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "componentTypeId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "state" ],
                members: {
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteEntity: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/entities/{entityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "entityId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    entityId: {
                        location: "uri",
                        locationName: "entityId"
                    },
                    isRecursive: {
                        location: "querystring",
                        locationName: "isRecursive",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "state" ],
                members: {
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteScene: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/scenes/{sceneId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "sceneId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    sceneId: {
                        location: "uri",
                        locationName: "sceneId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteSyncJob: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/sync-jobs/{syncSource}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "syncSource" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    syncSource: {
                        location: "uri",
                        locationName: "syncSource"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "state" ],
                members: {
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteWorkspace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    message: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ExecuteQuery: {
            http: {
                requestUri: "/queries/execution",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "queryStatement" ],
                members: {
                    workspaceId: {},
                    queryStatement: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    columnDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                type: {}
                            }
                        }
                    },
                    rows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                rowData: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {},
                                        document: true
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetComponentType: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "componentTypeId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaceId", "componentTypeId", "creationDateTime", "updateDateTime", "arn" ],
                members: {
                    workspaceId: {},
                    isSingleton: {
                        type: "boolean"
                    },
                    componentTypeId: {},
                    description: {},
                    propertyDefinitions: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S45"
                        }
                    },
                    extendsFrom: {
                        shape: "S1d"
                    },
                    functions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                requiredProperties: {
                                    shape: "S1g"
                                },
                                scope: {},
                                implementedBy: {
                                    shape: "S1i"
                                },
                                isInherited: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    },
                    arn: {},
                    isAbstract: {
                        type: "boolean"
                    },
                    isSchemaInitialized: {
                        type: "boolean"
                    },
                    status: {
                        shape: "S48"
                    },
                    propertyGroups: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "groupType", "propertyNames", "isInherited" ],
                            members: {
                                groupType: {},
                                propertyNames: {
                                    shape: "S1r"
                                },
                                isInherited: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    syncSource: {},
                    componentTypeName: {},
                    compositeComponentTypes: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                componentTypeId: {},
                                isInherited: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetEntity: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/entities/{entityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "entityId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    entityId: {
                        location: "uri",
                        locationName: "entityId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entityId", "entityName", "arn", "status", "workspaceId", "parentEntityId", "hasChildEntities", "creationDateTime", "updateDateTime" ],
                members: {
                    entityId: {},
                    entityName: {},
                    arn: {},
                    status: {
                        shape: "S48"
                    },
                    workspaceId: {},
                    description: {},
                    components: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                componentName: {},
                                description: {},
                                componentTypeId: {},
                                status: {
                                    shape: "S48"
                                },
                                definedIn: {},
                                properties: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "structure",
                                        members: {
                                            definition: {
                                                shape: "S45"
                                            },
                                            value: {
                                                shape: "Se"
                                            },
                                            areAllPropertyValuesReturned: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                propertyGroups: {
                                    shape: "S4j"
                                },
                                syncSource: {},
                                areAllPropertiesReturned: {
                                    type: "boolean"
                                },
                                compositeComponents: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        shape: "S4m"
                                    }
                                },
                                areAllCompositeComponentsReturned: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    parentEntityId: {},
                    hasChildEntities: {
                        type: "boolean"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    },
                    syncSource: {},
                    areAllComponentsReturned: {
                        type: "boolean"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetMetadataTransferJob: {
            http: {
                method: "GET",
                requestUri: "/metadata-transfer-jobs/{metadataTransferJobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "metadataTransferJobId" ],
                members: {
                    metadataTransferJobId: {
                        location: "uri",
                        locationName: "metadataTransferJobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "metadataTransferJobId", "arn", "sources", "destination", "metadataTransferJobRole", "creationDateTime", "updateDateTime", "status" ],
                members: {
                    metadataTransferJobId: {},
                    arn: {},
                    description: {},
                    sources: {
                        shape: "S2c"
                    },
                    destination: {
                        shape: "S2t"
                    },
                    metadataTransferJobRole: {},
                    reportUrl: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    },
                    status: {
                        shape: "Sw"
                    },
                    progress: {
                        shape: "S11"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetPricingPlan: {
            http: {
                method: "GET",
                requestUri: "/pricingplan",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "currentPricingPlan" ],
                members: {
                    currentPricingPlan: {
                        shape: "S4r"
                    },
                    pendingPricingPlan: {
                        shape: "S4r"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetPropertyValue: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entity-properties/value",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "selectedProperties", "workspaceId" ],
                members: {
                    componentName: {},
                    componentPath: {},
                    componentTypeId: {},
                    entityId: {},
                    selectedProperties: {
                        shape: "S4z"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    propertyGroupName: {},
                    tabularConditions: {
                        type: "structure",
                        members: {
                            orderBy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "propertyName" ],
                                    members: {
                                        order: {},
                                        propertyName: {}
                                    }
                                }
                            },
                            propertyFilters: {
                                shape: "S55"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    propertyValues: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "propertyReference" ],
                            members: {
                                propertyReference: {
                                    shape: "S5"
                                },
                                propertyValue: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    tabularPropertyValues: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Se"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetPropertyValueHistory: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entity-properties/history",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "selectedProperties" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    entityId: {},
                    componentName: {},
                    componentPath: {},
                    componentTypeId: {},
                    selectedProperties: {
                        shape: "S4z"
                    },
                    propertyFilters: {
                        shape: "S55"
                    },
                    startDateTime: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated and will throw an error in the future. Use startTime instead.",
                        type: "timestamp"
                    },
                    endDateTime: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated and will throw an error in the future. Use endTime instead.",
                        type: "timestamp"
                    },
                    interpolation: {
                        type: "structure",
                        members: {
                            interpolationType: {},
                            intervalInSeconds: {
                                type: "long"
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    orderByTime: {},
                    startTime: {},
                    endTime: {}
                }
            },
            output: {
                type: "structure",
                required: [ "propertyValues" ],
                members: {
                    propertyValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityPropertyReference" ],
                            members: {
                                entityPropertyReference: {
                                    shape: "S5"
                                },
                                values: {
                                    type: "list",
                                    member: {
                                        shape: "Sc"
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetScene: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/scenes/{sceneId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "sceneId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    sceneId: {
                        location: "uri",
                        locationName: "sceneId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaceId", "sceneId", "contentLocation", "arn", "creationDateTime", "updateDateTime" ],
                members: {
                    workspaceId: {},
                    sceneId: {},
                    contentLocation: {},
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    },
                    description: {},
                    capabilities: {
                        shape: "S31"
                    },
                    sceneMetadata: {
                        shape: "S33"
                    },
                    generatedSceneMetadata: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    error: {
                        type: "structure",
                        members: {
                            code: {},
                            message: {}
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetSyncJob: {
            http: {
                method: "GET",
                requestUri: "/sync-jobs/{syncSource}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "syncSource" ],
                members: {
                    syncSource: {
                        location: "uri",
                        locationName: "syncSource"
                    },
                    workspaceId: {
                        location: "querystring",
                        locationName: "workspace"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "workspaceId", "syncSource", "syncRole", "status", "creationDateTime", "updateDateTime" ],
                members: {
                    arn: {},
                    workspaceId: {},
                    syncSource: {},
                    syncRole: {},
                    status: {
                        shape: "S5t"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetWorkspace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaceId", "arn", "creationDateTime", "updateDateTime" ],
                members: {
                    workspaceId: {},
                    arn: {},
                    description: {},
                    linkedServices: {
                        shape: "S5x"
                    },
                    s3Location: {},
                    role: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListComponentTypes: {
            http: {
                requestUri: "/workspaces/{workspaceId}/component-types-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                extendsFrom: {},
                                namespace: {},
                                isAbstract: {
                                    type: "boolean"
                                }
                            },
                            union: true
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaceId", "componentTypeSummaries" ],
                members: {
                    workspaceId: {},
                    componentTypeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "componentTypeId", "creationDateTime", "updateDateTime" ],
                            members: {
                                arn: {},
                                componentTypeId: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                status: {
                                    shape: "S48"
                                },
                                componentTypeName: {}
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListComponents: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entities/{entityId}/components-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "entityId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    entityId: {
                        location: "uri",
                        locationName: "entityId"
                    },
                    componentPath: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "componentSummaries" ],
                members: {
                    componentSummaries: {
                        type: "list",
                        member: {
                            shape: "S4m"
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListEntities: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entities-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                parentEntityId: {},
                                componentTypeId: {},
                                externalId: {}
                            },
                            union: true
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    entitySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityId", "entityName", "arn", "status", "creationDateTime", "updateDateTime" ],
                            members: {
                                entityId: {},
                                entityName: {},
                                arn: {},
                                parentEntityId: {},
                                status: {
                                    shape: "S48"
                                },
                                description: {},
                                hasChildEntities: {
                                    type: "boolean"
                                },
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListMetadataTransferJobs: {
            http: {
                requestUri: "/metadata-transfer-jobs-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceType", "destinationType" ],
                members: {
                    sourceType: {},
                    destinationType: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                workspaceId: {},
                                state: {}
                            },
                            union: true
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "metadataTransferJobSummaries" ],
                members: {
                    metadataTransferJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "metadataTransferJobId", "arn", "creationDateTime", "updateDateTime", "status" ],
                            members: {
                                metadataTransferJobId: {},
                                arn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "Sw"
                                },
                                progress: {
                                    shape: "S11"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListProperties: {
            http: {
                requestUri: "/workspaces/{workspaceId}/properties-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "entityId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    componentName: {},
                    componentPath: {},
                    entityId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "propertySummaries" ],
                members: {
                    propertySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "propertyName" ],
                            members: {
                                definition: {
                                    shape: "S45"
                                },
                                propertyName: {},
                                value: {
                                    shape: "Se"
                                },
                                areAllPropertyValuesReturned: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListScenes: {
            http: {
                requestUri: "/workspaces/{workspaceId}/scenes-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sceneSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sceneId", "contentLocation", "arn", "creationDateTime", "updateDateTime" ],
                            members: {
                                sceneId: {},
                                contentLocation: {},
                                arn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                },
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListSyncJobs: {
            http: {
                requestUri: "/workspaces/{workspaceId}/sync-jobs-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    syncJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                workspaceId: {},
                                syncSource: {},
                                status: {
                                    shape: "S5t"
                                },
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListSyncResources: {
            http: {
                requestUri: "/workspaces/{workspaceId}/sync-jobs/{syncSource}/resources-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "syncSource" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    syncSource: {
                        location: "uri",
                        locationName: "syncSource"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                state: {},
                                resourceType: {},
                                resourceId: {},
                                externalId: {}
                            },
                            union: true
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    syncResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                externalId: {},
                                resourceId: {},
                                status: {
                                    type: "structure",
                                    members: {
                                        state: {},
                                        error: {
                                            shape: "Sy"
                                        }
                                    }
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/tags-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    resourceARN: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1l"
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListWorkspaces: {
            http: {
                requestUri: "/workspaces-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    workspaceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "workspaceId", "arn", "creationDateTime", "updateDateTime" ],
                            members: {
                                workspaceId: {},
                                arn: {},
                                description: {},
                                linkedServices: {
                                    shape: "S5x"
                                },
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {},
                    tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {
                        location: "querystring",
                        locationName: "resourceARN"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateComponentType: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "componentTypeId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    isSingleton: {
                        type: "boolean"
                    },
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    },
                    description: {},
                    propertyDefinitions: {
                        shape: "S15"
                    },
                    extendsFrom: {
                        shape: "S1d"
                    },
                    functions: {
                        shape: "S1e"
                    },
                    propertyGroups: {
                        shape: "S1o"
                    },
                    componentTypeName: {},
                    compositeComponentTypes: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaceId", "arn", "componentTypeId", "state" ],
                members: {
                    workspaceId: {},
                    arn: {},
                    componentTypeId: {},
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateEntity: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/entities/{entityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "entityId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    entityId: {
                        location: "uri",
                        locationName: "entityId"
                    },
                    entityName: {},
                    description: {},
                    componentUpdates: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                updateType: {},
                                description: {},
                                componentTypeId: {},
                                propertyUpdates: {
                                    shape: "S21"
                                },
                                propertyGroupUpdates: {
                                    shape: "S24"
                                }
                            }
                        }
                    },
                    compositeComponentUpdates: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                updateType: {},
                                description: {},
                                propertyUpdates: {
                                    shape: "S21"
                                },
                                propertyGroupUpdates: {
                                    shape: "S24"
                                }
                            }
                        }
                    },
                    parentEntityUpdate: {
                        type: "structure",
                        required: [ "updateType" ],
                        members: {
                            updateType: {},
                            parentEntityId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "updateDateTime", "state" ],
                members: {
                    updateDateTime: {
                        type: "timestamp"
                    },
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdatePricingPlan: {
            http: {
                requestUri: "/pricingplan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "pricingMode" ],
                members: {
                    pricingMode: {},
                    bundleNames: {
                        shape: "S4t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "currentPricingPlan" ],
                members: {
                    currentPricingPlan: {
                        shape: "S4r"
                    },
                    pendingPricingPlan: {
                        shape: "S4r"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateScene: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/scenes/{sceneId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId", "sceneId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    sceneId: {
                        location: "uri",
                        locationName: "sceneId"
                    },
                    contentLocation: {},
                    description: {},
                    capabilities: {
                        shape: "S31"
                    },
                    sceneMetadata: {
                        shape: "S33"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "updateDateTime" ],
                members: {
                    updateDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateWorkspace: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    description: {},
                    role: {},
                    s3Location: {}
                }
            },
            output: {
                type: "structure",
                required: [ "updateDateTime" ],
                members: {
                    updateDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "entityPropertyReference" ],
            members: {
                entityPropertyReference: {
                    shape: "S5"
                },
                propertyValues: {
                    type: "list",
                    member: {
                        shape: "Sc"
                    }
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "propertyName" ],
            members: {
                componentName: {},
                componentPath: {},
                externalIdProperty: {
                    type: "map",
                    key: {},
                    value: {}
                },
                entityId: {},
                propertyName: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "value" ],
            members: {
                timestamp: {
                    deprecated: true,
                    deprecatedMessage: "This field is deprecated and will throw an error in the future. Use time instead.",
                    type: "timestamp"
                },
                value: {
                    shape: "Se"
                },
                time: {}
            }
        },
        Se: {
            type: "structure",
            members: {
                booleanValue: {
                    type: "boolean"
                },
                doubleValue: {
                    type: "double"
                },
                integerValue: {
                    type: "integer"
                },
                longValue: {
                    type: "long"
                },
                stringValue: {},
                listValue: {
                    shape: "Sj"
                },
                mapValue: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "Se"
                    }
                },
                relationshipValue: {
                    type: "structure",
                    members: {
                        targetEntityId: {},
                        targetComponentName: {}
                    }
                },
                expression: {}
            }
        },
        Sj: {
            type: "list",
            member: {
                shape: "Se"
            }
        },
        Sw: {
            type: "structure",
            members: {
                state: {},
                error: {
                    shape: "Sy"
                },
                queuedPosition: {
                    type: "integer"
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                code: {},
                message: {}
            }
        },
        S11: {
            type: "structure",
            members: {
                totalCount: {
                    type: "integer"
                },
                succeededCount: {
                    type: "integer"
                },
                skippedCount: {
                    type: "integer"
                },
                failedCount: {
                    type: "integer"
                }
            }
        },
        S15: {
            type: "map",
            key: {},
            value: {
                shape: "S16"
            }
        },
        S16: {
            type: "structure",
            members: {
                dataType: {
                    shape: "S17"
                },
                isRequiredInEntity: {
                    type: "boolean"
                },
                isExternalId: {
                    type: "boolean"
                },
                isStoredExternally: {
                    type: "boolean"
                },
                isTimeSeries: {
                    type: "boolean"
                },
                defaultValue: {
                    shape: "Se"
                },
                configuration: {
                    shape: "S1a"
                },
                displayName: {}
            }
        },
        S17: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                nestedType: {
                    shape: "S17"
                },
                allowedValues: {
                    shape: "Sj"
                },
                unitOfMeasure: {},
                relationship: {
                    type: "structure",
                    members: {
                        targetComponentTypeId: {},
                        relationshipType: {}
                    }
                }
            }
        },
        S1a: {
            type: "map",
            key: {},
            value: {}
        },
        S1d: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    requiredProperties: {
                        shape: "S1g"
                    },
                    scope: {},
                    implementedBy: {
                        shape: "S1i"
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1i: {
            type: "structure",
            members: {
                lambda: {
                    type: "structure",
                    required: [ "arn" ],
                    members: {
                        arn: {}
                    }
                },
                isNative: {
                    type: "boolean"
                }
            }
        },
        S1l: {
            type: "map",
            key: {},
            value: {}
        },
        S1o: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    groupType: {},
                    propertyNames: {
                        shape: "S1r"
                    }
                }
            }
        },
        S1r: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    componentTypeId: {}
                }
            }
        },
        S21: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    definition: {
                        shape: "S16"
                    },
                    value: {
                        shape: "Se"
                    },
                    updateType: {}
                }
            }
        },
        S24: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    groupType: {},
                    propertyNames: {
                        shape: "S1r"
                    },
                    updateType: {}
                }
            }
        },
        S2c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "type" ],
                members: {
                    type: {},
                    s3Configuration: {
                        type: "structure",
                        required: [ "location" ],
                        members: {
                            location: {}
                        }
                    },
                    iotSiteWiseConfiguration: {
                        type: "structure",
                        members: {
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        filterByAssetModel: {
                                            type: "structure",
                                            members: {
                                                assetModelId: {},
                                                assetModelExternalId: {},
                                                includeOffspring: {
                                                    type: "boolean"
                                                },
                                                includeAssets: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        filterByAsset: {
                                            type: "structure",
                                            members: {
                                                assetId: {},
                                                assetExternalId: {},
                                                includeOffspring: {
                                                    type: "boolean"
                                                },
                                                includeAssetModel: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                }
                            }
                        }
                    },
                    iotTwinMakerConfiguration: {
                        type: "structure",
                        required: [ "workspace" ],
                        members: {
                            workspace: {},
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        filterByComponentType: {
                                            type: "structure",
                                            required: [ "componentTypeId" ],
                                            members: {
                                                componentTypeId: {}
                                            }
                                        },
                                        filterByEntity: {
                                            type: "structure",
                                            required: [ "entityId" ],
                                            members: {
                                                entityId: {}
                                            }
                                        }
                                    },
                                    union: true
                                }
                            }
                        }
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                s3Configuration: {
                    type: "structure",
                    required: [ "location" ],
                    members: {
                        location: {}
                    }
                },
                iotTwinMakerConfiguration: {
                    type: "structure",
                    required: [ "workspace" ],
                    members: {
                        workspace: {}
                    }
                }
            }
        },
        S31: {
            type: "list",
            member: {}
        },
        S33: {
            type: "map",
            key: {},
            value: {}
        },
        S45: {
            type: "structure",
            required: [ "dataType", "isTimeSeries", "isRequiredInEntity", "isExternalId", "isStoredExternally", "isImported", "isFinal", "isInherited" ],
            members: {
                dataType: {
                    shape: "S17"
                },
                isTimeSeries: {
                    type: "boolean"
                },
                isRequiredInEntity: {
                    type: "boolean"
                },
                isExternalId: {
                    type: "boolean"
                },
                isStoredExternally: {
                    type: "boolean"
                },
                isImported: {
                    type: "boolean"
                },
                isFinal: {
                    type: "boolean"
                },
                isInherited: {
                    type: "boolean"
                },
                defaultValue: {
                    shape: "Se"
                },
                configuration: {
                    shape: "S1a"
                },
                displayName: {}
            }
        },
        S48: {
            type: "structure",
            members: {
                state: {},
                error: {
                    shape: "Sy"
                }
            }
        },
        S4j: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "groupType", "propertyNames", "isInherited" ],
                members: {
                    groupType: {},
                    propertyNames: {
                        shape: "S1r"
                    },
                    isInherited: {
                        type: "boolean"
                    }
                }
            }
        },
        S4m: {
            type: "structure",
            required: [ "componentName", "componentTypeId", "status" ],
            members: {
                componentName: {},
                componentTypeId: {},
                definedIn: {},
                description: {},
                propertyGroups: {
                    shape: "S4j"
                },
                status: {
                    shape: "S48"
                },
                syncSource: {},
                componentPath: {}
            }
        },
        S4r: {
            type: "structure",
            required: [ "effectiveDateTime", "pricingMode", "updateDateTime", "updateReason" ],
            members: {
                billableEntityCount: {
                    type: "long"
                },
                bundleInformation: {
                    type: "structure",
                    required: [ "bundleNames" ],
                    members: {
                        bundleNames: {
                            shape: "S4t"
                        },
                        pricingTier: {}
                    }
                },
                effectiveDateTime: {
                    type: "timestamp"
                },
                pricingMode: {},
                updateDateTime: {
                    type: "timestamp"
                },
                updateReason: {}
            }
        },
        S4t: {
            type: "list",
            member: {}
        },
        S4z: {
            type: "list",
            member: {}
        },
        S55: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    propertyName: {},
                    operator: {},
                    value: {
                        shape: "Se"
                    }
                }
            }
        },
        S5t: {
            type: "structure",
            members: {
                state: {},
                error: {
                    shape: "Sy"
                }
            }
        },
        S5x: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ExecuteQuery: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetPropertyValue: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetPropertyValueHistory: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListComponentTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListEntities: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListMetadataTransferJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListProperties: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListScenes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSyncJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSyncResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListWorkspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["workspacesweb"] = {};

AWS.WorkSpacesWeb = AWS.Service.defineService("workspacesweb", [ "2020-07-08" ]);

AWS.apiLoader.services["workspacesweb"]["2020-07-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-08",
        endpointPrefix: "workspaces-web",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon WorkSpaces Web",
        serviceId: "WorkSpaces Web",
        signatureVersion: "v4",
        signingName: "workspaces-web",
        uid: "workspaces-web-2020-07-08"
    },
    operations: {
        AssociateBrowserSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn", "portalArn" ],
                members: {
                    browserSettingsArn: {
                        location: "querystring",
                        locationName: "browserSettingsArn"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "browserSettingsArn", "portalArn" ],
                members: {
                    browserSettingsArn: {},
                    portalArn: {}
                }
            },
            idempotent: true
        },
        AssociateIpAccessSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/ipAccessSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ipAccessSettingsArn", "portalArn" ],
                members: {
                    ipAccessSettingsArn: {
                        location: "querystring",
                        locationName: "ipAccessSettingsArn"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ipAccessSettingsArn", "portalArn" ],
                members: {
                    ipAccessSettingsArn: {},
                    portalArn: {}
                }
            },
            idempotent: true
        },
        AssociateNetworkSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn", "portalArn" ],
                members: {
                    networkSettingsArn: {
                        location: "querystring",
                        locationName: "networkSettingsArn"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "networkSettingsArn", "portalArn" ],
                members: {
                    networkSettingsArn: {},
                    portalArn: {}
                }
            },
            idempotent: true
        },
        AssociateTrustStore: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn", "trustStoreArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    },
                    trustStoreArn: {
                        location: "querystring",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn", "trustStoreArn" ],
                members: {
                    portalArn: {},
                    trustStoreArn: {}
                }
            },
            idempotent: true
        },
        AssociateUserAccessLoggingSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/userAccessLoggingSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn", "userAccessLoggingSettingsArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    },
                    userAccessLoggingSettingsArn: {
                        location: "querystring",
                        locationName: "userAccessLoggingSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn", "userAccessLoggingSettingsArn" ],
                members: {
                    portalArn: {},
                    userAccessLoggingSettingsArn: {}
                }
            },
            idempotent: true
        },
        AssociateUserSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn", "userSettingsArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    },
                    userSettingsArn: {
                        location: "querystring",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn", "userSettingsArn" ],
                members: {
                    portalArn: {},
                    userSettingsArn: {}
                }
            },
            idempotent: true
        },
        CreateBrowserSettings: {
            http: {
                requestUri: "/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserPolicy" ],
                members: {
                    additionalEncryptionContext: {
                        shape: "Sf"
                    },
                    browserPolicy: {
                        shape: "Sh"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    customerManagedKey: {},
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserSettingsArn: {}
                }
            }
        },
        CreateIdentityProvider: {
            http: {
                requestUri: "/identityProviders",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderDetails", "identityProviderName", "identityProviderType", "portalArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    identityProviderDetails: {
                        shape: "Sq"
                    },
                    identityProviderName: {
                        shape: "Sr"
                    },
                    identityProviderType: {},
                    portalArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    identityProviderArn: {}
                }
            }
        },
        CreateIpAccessSettings: {
            http: {
                requestUri: "/ipAccessSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ipRules" ],
                members: {
                    additionalEncryptionContext: {
                        shape: "Sf"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    customerManagedKey: {},
                    description: {
                        shape: "Sw"
                    },
                    displayName: {
                        shape: "Sx"
                    },
                    ipRules: {
                        shape: "Sy"
                    },
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ipAccessSettingsArn" ],
                members: {
                    ipAccessSettingsArn: {}
                }
            }
        },
        CreateNetworkSettings: {
            http: {
                requestUri: "/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "securityGroupIds", "subnetIds", "vpcId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    securityGroupIds: {
                        shape: "S13"
                    },
                    subnetIds: {
                        shape: "S15"
                    },
                    tags: {
                        shape: "Sk"
                    },
                    vpcId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    networkSettingsArn: {}
                }
            }
        },
        CreatePortal: {
            http: {
                requestUri: "/portals",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    additionalEncryptionContext: {
                        shape: "Sf"
                    },
                    authenticationType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    customerManagedKey: {},
                    displayName: {
                        shape: "Sx"
                    },
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn", "portalEndpoint" ],
                members: {
                    portalArn: {},
                    portalEndpoint: {}
                }
            }
        },
        CreateTrustStore: {
            http: {
                requestUri: "/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "certificateList" ],
                members: {
                    certificateList: {
                        shape: "S1e"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {}
                }
            }
        },
        CreateUserAccessLoggingSettings: {
            http: {
                requestUri: "/userAccessLoggingSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "kinesisStreamArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    kinesisStreamArn: {},
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "userAccessLoggingSettingsArn" ],
                members: {
                    userAccessLoggingSettingsArn: {}
                }
            }
        },
        CreateUserSettings: {
            http: {
                requestUri: "/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "copyAllowed", "downloadAllowed", "pasteAllowed", "printAllowed", "uploadAllowed" ],
                members: {
                    additionalEncryptionContext: {
                        shape: "Sf"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    cookieSynchronizationConfiguration: {
                        shape: "S1l"
                    },
                    copyAllowed: {},
                    customerManagedKey: {},
                    disconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    downloadAllowed: {},
                    idleDisconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    pasteAllowed: {},
                    printAllowed: {},
                    tags: {
                        shape: "Sk"
                    },
                    uploadAllowed: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    userSettingsArn: {}
                }
            }
        },
        DeleteBrowserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/browserSettings/{browserSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserSettingsArn: {
                        location: "uri",
                        locationName: "browserSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteIdentityProvider: {
            http: {
                method: "DELETE",
                requestUri: "/identityProviders/{identityProviderArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    identityProviderArn: {
                        location: "uri",
                        locationName: "identityProviderArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteIpAccessSettings: {
            http: {
                method: "DELETE",
                requestUri: "/ipAccessSettings/{ipAccessSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ipAccessSettingsArn" ],
                members: {
                    ipAccessSettingsArn: {
                        location: "uri",
                        locationName: "ipAccessSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteNetworkSettings: {
            http: {
                method: "DELETE",
                requestUri: "/networkSettings/{networkSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    networkSettingsArn: {
                        location: "uri",
                        locationName: "networkSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePortal: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteTrustStore: {
            http: {
                method: "DELETE",
                requestUri: "/trustStores/{trustStoreArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteUserAccessLoggingSettings: {
            http: {
                method: "DELETE",
                requestUri: "/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userAccessLoggingSettingsArn" ],
                members: {
                    userAccessLoggingSettingsArn: {
                        location: "uri",
                        locationName: "userAccessLoggingSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteUserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/userSettings/{userSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    userSettingsArn: {
                        location: "uri",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateBrowserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateIpAccessSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/ipAccessSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateNetworkSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateTrustStore: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateUserAccessLoggingSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/userAccessLoggingSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateUserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetBrowserSettings: {
            http: {
                method: "GET",
                requestUri: "/browserSettings/{browserSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserSettingsArn: {
                        location: "uri",
                        locationName: "browserSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    browserSettings: {
                        shape: "S2p"
                    }
                }
            }
        },
        GetIdentityProvider: {
            http: {
                method: "GET",
                requestUri: "/identityProviders/{identityProviderArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    identityProviderArn: {
                        location: "uri",
                        locationName: "identityProviderArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProvider: {
                        shape: "S2t"
                    }
                }
            }
        },
        GetIpAccessSettings: {
            http: {
                method: "GET",
                requestUri: "/ipAccessSettings/{ipAccessSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ipAccessSettingsArn" ],
                members: {
                    ipAccessSettingsArn: {
                        location: "uri",
                        locationName: "ipAccessSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ipAccessSettings: {
                        shape: "S2w"
                    }
                }
            }
        },
        GetNetworkSettings: {
            http: {
                method: "GET",
                requestUri: "/networkSettings/{networkSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    networkSettingsArn: {
                        location: "uri",
                        locationName: "networkSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSettings: {
                        shape: "S30"
                    }
                }
            }
        },
        GetPortal: {
            http: {
                method: "GET",
                requestUri: "/portals/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    portal: {
                        shape: "S33"
                    }
                }
            }
        },
        GetPortalServiceProviderMetadata: {
            http: {
                method: "GET",
                requestUri: "/portalIdp/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {},
                    serviceProviderSamlMetadata: {}
                }
            }
        },
        GetTrustStore: {
            http: {
                method: "GET",
                requestUri: "/trustStores/{trustStoreArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    trustStore: {
                        type: "structure",
                        required: [ "trustStoreArn" ],
                        members: {
                            associatedPortalArns: {
                                shape: "S2q"
                            },
                            trustStoreArn: {}
                        }
                    }
                }
            }
        },
        GetTrustStoreCertificate: {
            http: {
                method: "GET",
                requestUri: "/trustStores/{trustStoreArn+}/certificate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "thumbprint", "trustStoreArn" ],
                members: {
                    thumbprint: {
                        location: "querystring",
                        locationName: "thumbprint"
                    },
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    certificate: {
                        type: "structure",
                        members: {
                            body: {
                                type: "blob"
                            },
                            issuer: {},
                            notValidAfter: {
                                type: "timestamp"
                            },
                            notValidBefore: {
                                type: "timestamp"
                            },
                            subject: {},
                            thumbprint: {}
                        }
                    },
                    trustStoreArn: {}
                }
            }
        },
        GetUserAccessLoggingSettings: {
            http: {
                method: "GET",
                requestUri: "/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userAccessLoggingSettingsArn" ],
                members: {
                    userAccessLoggingSettingsArn: {
                        location: "uri",
                        locationName: "userAccessLoggingSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userAccessLoggingSettings: {
                        shape: "S3l"
                    }
                }
            }
        },
        GetUserSettings: {
            http: {
                method: "GET",
                requestUri: "/userSettings/{userSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    userSettingsArn: {
                        location: "uri",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userSettings: {
                        shape: "S3o"
                    }
                }
            }
        },
        ListBrowserSettings: {
            http: {
                method: "GET",
                requestUri: "/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    browserSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "browserSettingsArn" ],
                            members: {
                                browserSettingsArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIdentityProviders: {
            http: {
                method: "GET",
                requestUri: "/portals/{portalArn+}/identityProviders",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProviders: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "identityProviderArn" ],
                            members: {
                                identityProviderArn: {},
                                identityProviderName: {
                                    shape: "Sr"
                                },
                                identityProviderType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIpAccessSettings: {
            http: {
                method: "GET",
                requestUri: "/ipAccessSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ipAccessSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ipAccessSettingsArn" ],
                            members: {
                                creationDate: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Sw"
                                },
                                displayName: {
                                    shape: "Sx"
                                },
                                ipAccessSettingsArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworkSettings: {
            http: {
                method: "GET",
                requestUri: "/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "networkSettingsArn" ],
                            members: {
                                networkSettingsArn: {},
                                vpcId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPortals: {
            http: {
                method: "GET",
                requestUri: "/portals",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    portals: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "portalArn" ],
                            members: {
                                authenticationType: {},
                                browserSettingsArn: {},
                                browserType: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                displayName: {
                                    shape: "Sx"
                                },
                                ipAccessSettingsArn: {},
                                networkSettingsArn: {},
                                portalArn: {},
                                portalEndpoint: {},
                                portalStatus: {},
                                rendererType: {},
                                trustStoreArn: {},
                                userAccessLoggingSettingsArn: {},
                                userSettingsArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        ListTrustStoreCertificates: {
            http: {
                method: "GET",
                requestUri: "/trustStores/{trustStoreArn+}/certificates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    certificateList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                issuer: {},
                                notValidAfter: {
                                    type: "timestamp"
                                },
                                notValidBefore: {
                                    type: "timestamp"
                                },
                                subject: {},
                                thumbprint: {}
                            }
                        }
                    },
                    nextToken: {},
                    trustStoreArn: {}
                }
            }
        },
        ListTrustStores: {
            http: {
                method: "GET",
                requestUri: "/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    trustStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                trustStoreArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListUserAccessLoggingSettings: {
            http: {
                method: "GET",
                requestUri: "/userAccessLoggingSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    userAccessLoggingSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "userAccessLoggingSettingsArn" ],
                            members: {
                                kinesisStreamArn: {},
                                userAccessLoggingSettingsArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListUserSettings: {
            http: {
                method: "GET",
                requestUri: "/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    userSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "userSettingsArn" ],
                            members: {
                                cookieSynchronizationConfiguration: {
                                    shape: "S1l"
                                },
                                copyAllowed: {},
                                disconnectTimeoutInMinutes: {
                                    type: "integer"
                                },
                                downloadAllowed: {},
                                idleDisconnectTimeoutInMinutes: {
                                    type: "integer"
                                },
                                pasteAllowed: {},
                                printAllowed: {},
                                uploadAllowed: {},
                                userSettingsArn: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateBrowserSettings: {
            http: {
                method: "PATCH",
                requestUri: "/browserSettings/{browserSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserPolicy: {
                        shape: "Sh"
                    },
                    browserSettingsArn: {
                        location: "uri",
                        locationName: "browserSettingsArn"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "browserSettings" ],
                members: {
                    browserSettings: {
                        shape: "S2p"
                    }
                }
            }
        },
        UpdateIdentityProvider: {
            http: {
                method: "PATCH",
                requestUri: "/identityProviders/{identityProviderArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    identityProviderArn: {
                        location: "uri",
                        locationName: "identityProviderArn"
                    },
                    identityProviderDetails: {
                        shape: "Sq"
                    },
                    identityProviderName: {
                        shape: "Sr"
                    },
                    identityProviderType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "identityProvider" ],
                members: {
                    identityProvider: {
                        shape: "S2t"
                    }
                }
            }
        },
        UpdateIpAccessSettings: {
            http: {
                method: "PATCH",
                requestUri: "/ipAccessSettings/{ipAccessSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ipAccessSettingsArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "Sw"
                    },
                    displayName: {
                        shape: "Sx"
                    },
                    ipAccessSettingsArn: {
                        location: "uri",
                        locationName: "ipAccessSettingsArn"
                    },
                    ipRules: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ipAccessSettings" ],
                members: {
                    ipAccessSettings: {
                        shape: "S2w"
                    }
                }
            }
        },
        UpdateNetworkSettings: {
            http: {
                method: "PATCH",
                requestUri: "/networkSettings/{networkSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    networkSettingsArn: {
                        location: "uri",
                        locationName: "networkSettingsArn"
                    },
                    securityGroupIds: {
                        shape: "S13"
                    },
                    subnetIds: {
                        shape: "S15"
                    },
                    vpcId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "networkSettings" ],
                members: {
                    networkSettings: {
                        shape: "S30"
                    }
                }
            }
        },
        UpdatePortal: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    authenticationType: {},
                    displayName: {
                        shape: "Sx"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    portal: {
                        shape: "S33"
                    }
                }
            },
            idempotent: true
        },
        UpdateTrustStore: {
            http: {
                method: "PATCH",
                requestUri: "/trustStores/{trustStoreArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    certificatesToAdd: {
                        shape: "S1e"
                    },
                    certificatesToDelete: {
                        type: "list",
                        member: {}
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {}
                }
            }
        },
        UpdateUserAccessLoggingSettings: {
            http: {
                method: "PATCH",
                requestUri: "/userAccessLoggingSettings/{userAccessLoggingSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userAccessLoggingSettingsArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    kinesisStreamArn: {},
                    userAccessLoggingSettingsArn: {
                        location: "uri",
                        locationName: "userAccessLoggingSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "userAccessLoggingSettings" ],
                members: {
                    userAccessLoggingSettings: {
                        shape: "S3l"
                    }
                }
            }
        },
        UpdateUserSettings: {
            http: {
                method: "PATCH",
                requestUri: "/userSettings/{userSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    cookieSynchronizationConfiguration: {
                        shape: "S1l"
                    },
                    copyAllowed: {},
                    disconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    downloadAllowed: {},
                    idleDisconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    pasteAllowed: {},
                    printAllowed: {},
                    uploadAllowed: {},
                    userSettingsArn: {
                        location: "uri",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "userSettings" ],
                members: {
                    userSettings: {
                        shape: "S3o"
                    }
                }
            }
        }
    },
    shapes: {
        Sf: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "string",
            sensitive: true
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "Sm"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                },
                sensitive: true
            }
        },
        Sm: {
            type: "string",
            sensitive: true
        },
        Sq: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sr: {
            type: "string",
            sensitive: true
        },
        Sw: {
            type: "string",
            sensitive: true
        },
        Sx: {
            type: "string",
            sensitive: true
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ipRange" ],
                members: {
                    description: {
                        shape: "Sw"
                    },
                    ipRange: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            sensitive: true
        },
        S13: {
            type: "list",
            member: {}
        },
        S15: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "list",
            member: {
                type: "blob"
            }
        },
        S1l: {
            type: "structure",
            required: [ "allowlist" ],
            members: {
                allowlist: {
                    shape: "S1m"
                },
                blocklist: {
                    shape: "S1m"
                }
            },
            sensitive: true
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {},
                    name: {},
                    path: {}
                }
            }
        },
        S2p: {
            type: "structure",
            required: [ "browserSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S2q"
                },
                browserPolicy: {
                    shape: "Sh"
                },
                browserSettingsArn: {}
            }
        },
        S2q: {
            type: "list",
            member: {}
        },
        S2t: {
            type: "structure",
            required: [ "identityProviderArn" ],
            members: {
                identityProviderArn: {},
                identityProviderDetails: {
                    shape: "Sq"
                },
                identityProviderName: {
                    shape: "Sr"
                },
                identityProviderType: {}
            }
        },
        S2w: {
            type: "structure",
            required: [ "ipAccessSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S2q"
                },
                creationDate: {
                    type: "timestamp"
                },
                description: {
                    shape: "Sw"
                },
                displayName: {
                    shape: "Sx"
                },
                ipAccessSettingsArn: {},
                ipRules: {
                    shape: "Sy"
                }
            }
        },
        S30: {
            type: "structure",
            required: [ "networkSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S2q"
                },
                networkSettingsArn: {},
                securityGroupIds: {
                    shape: "S13"
                },
                subnetIds: {
                    shape: "S15"
                },
                vpcId: {}
            }
        },
        S33: {
            type: "structure",
            required: [ "portalArn" ],
            members: {
                authenticationType: {},
                browserSettingsArn: {},
                browserType: {},
                creationDate: {
                    type: "timestamp"
                },
                displayName: {
                    shape: "Sx"
                },
                ipAccessSettingsArn: {},
                networkSettingsArn: {},
                portalArn: {},
                portalEndpoint: {},
                portalStatus: {},
                rendererType: {},
                statusReason: {},
                trustStoreArn: {},
                userAccessLoggingSettingsArn: {},
                userSettingsArn: {}
            }
        },
        S3l: {
            type: "structure",
            required: [ "userAccessLoggingSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S2q"
                },
                kinesisStreamArn: {},
                userAccessLoggingSettingsArn: {}
            }
        },
        S3o: {
            type: "structure",
            required: [ "userSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S2q"
                },
                cookieSynchronizationConfiguration: {
                    shape: "S1l"
                },
                copyAllowed: {},
                disconnectTimeoutInMinutes: {
                    type: "integer"
                },
                downloadAllowed: {},
                idleDisconnectTimeoutInMinutes: {
                    type: "integer"
                },
                pasteAllowed: {},
                printAllowed: {},
                uploadAllowed: {},
                userSettingsArn: {}
            }
        }
    },
    paginators: {
        ListBrowserSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListIdentityProviders: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListIpAccessSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListNetworkSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPortals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTrustStoreCertificates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTrustStores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListUserAccessLoggingSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListUserSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["amplifyuibuilder"] = {};

AWS.AmplifyUIBuilder = AWS.Service.defineService("amplifyuibuilder", [ "2021-08-11" ]);

AWS.apiLoader.services["amplifyuibuilder"]["2021-08-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-11",
        endpointPrefix: "amplifyuibuilder",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Amplify UI Builder",
        serviceId: "AmplifyUIBuilder",
        signatureVersion: "v4",
        signingName: "amplifyuibuilder",
        uid: "amplifyuibuilder-2021-08-11"
    },
    operations: {
        CreateComponent: {
            http: {
                requestUri: "/app/{appId}/environment/{environmentName}/components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "componentToCreate" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    componentToCreate: {
                        type: "structure",
                        required: [ "name", "componentType", "properties", "variants", "overrides", "bindingProperties" ],
                        members: {
                            name: {},
                            sourceId: {},
                            componentType: {},
                            properties: {
                                shape: "S6"
                            },
                            children: {
                                shape: "Se"
                            },
                            variants: {
                                shape: "Sk"
                            },
                            overrides: {
                                shape: "Sn"
                            },
                            bindingProperties: {
                                shape: "Sp"
                            },
                            collectionProperties: {
                                shape: "Sv"
                            },
                            tags: {
                                shape: "S11"
                            },
                            events: {
                                shape: "Sg"
                            },
                            schemaVersion: {}
                        }
                    }
                },
                payload: "componentToCreate"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S15"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        CreateForm: {
            http: {
                requestUri: "/app/{appId}/environment/{environmentName}/forms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "formToCreate" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    formToCreate: {
                        type: "structure",
                        required: [ "name", "dataType", "formActionType", "fields", "style", "sectionalElements", "schemaVersion" ],
                        members: {
                            name: {},
                            dataType: {
                                shape: "S1b"
                            },
                            formActionType: {},
                            fields: {
                                shape: "S1e"
                            },
                            style: {
                                shape: "S20"
                            },
                            sectionalElements: {
                                shape: "S22"
                            },
                            schemaVersion: {},
                            cta: {
                                shape: "S24"
                            },
                            tags: {
                                shape: "S11"
                            },
                            labelDecorator: {}
                        }
                    }
                },
                payload: "formToCreate"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S29"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        CreateTheme: {
            http: {
                requestUri: "/app/{appId}/environment/{environmentName}/themes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "themeToCreate" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    themeToCreate: {
                        type: "structure",
                        required: [ "name", "values" ],
                        members: {
                            name: {},
                            values: {
                                shape: "S2d"
                            },
                            overrides: {
                                shape: "S2d"
                            },
                            tags: {
                                shape: "S11"
                            }
                        }
                    }
                },
                payload: "themeToCreate"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S2h"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        DeleteComponent: {
            http: {
                method: "DELETE",
                requestUri: "/app/{appId}/environment/{environmentName}/components/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        DeleteForm: {
            http: {
                method: "DELETE",
                requestUri: "/app/{appId}/environment/{environmentName}/forms/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        DeleteTheme: {
            http: {
                method: "DELETE",
                requestUri: "/app/{appId}/environment/{environmentName}/themes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        ExchangeCodeForToken: {
            http: {
                requestUri: "/tokens/{provider}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "provider", "request" ],
                members: {
                    provider: {
                        location: "uri",
                        locationName: "provider"
                    },
                    request: {
                        type: "structure",
                        required: [ "code", "redirectUri" ],
                        members: {
                            code: {
                                shape: "S2o"
                            },
                            redirectUri: {},
                            clientId: {
                                shape: "S2o"
                            }
                        }
                    }
                },
                payload: "request"
            },
            output: {
                type: "structure",
                required: [ "accessToken", "expiresIn", "refreshToken" ],
                members: {
                    accessToken: {
                        shape: "S2o"
                    },
                    expiresIn: {
                        type: "integer"
                    },
                    refreshToken: {
                        shape: "S2o"
                    }
                }
            }
        },
        ExportComponents: {
            http: {
                method: "GET",
                requestUri: "/export/app/{appId}/environment/{environmentName}/components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            shape: "S15"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ExportForms: {
            http: {
                method: "GET",
                requestUri: "/export/app/{appId}/environment/{environmentName}/forms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            shape: "S29"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ExportThemes: {
            http: {
                method: "GET",
                requestUri: "/export/app/{appId}/environment/{environmentName}/themes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetCodegenJob: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/codegen-jobs/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S32"
                    }
                },
                payload: "job"
            }
        },
        GetComponent: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/components/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    component: {
                        shape: "S15"
                    }
                },
                payload: "component"
            }
        },
        GetForm: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/forms/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    form: {
                        shape: "S29"
                    }
                },
                payload: "form"
            }
        },
        GetMetadata: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/metadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "features" ],
                members: {
                    features: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        GetTheme: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/themes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    theme: {
                        shape: "S2h"
                    }
                },
                payload: "theme"
            }
        },
        ListCodegenJobs: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/codegen-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appId", "environmentName", "id" ],
                            members: {
                                appId: {},
                                environmentName: {},
                                id: {},
                                createdAt: {
                                    shape: "S17"
                                },
                                modifiedAt: {
                                    shape: "S17"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListComponents: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appId", "environmentName", "id", "name", "componentType" ],
                            members: {
                                appId: {},
                                environmentName: {},
                                id: {},
                                name: {},
                                componentType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListForms: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/forms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appId", "dataType", "environmentName", "formActionType", "id", "name" ],
                            members: {
                                appId: {},
                                dataType: {
                                    shape: "S1b"
                                },
                                environmentName: {},
                                formActionType: {},
                                id: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListThemes: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/themes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appId", "environmentName", "id", "name" ],
                            members: {
                                appId: {},
                                environmentName: {},
                                id: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutMetadataFlag: {
            http: {
                method: "PUT",
                requestUri: "/app/{appId}/environment/{environmentName}/metadata/features/{featureName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "featureName", "body" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    featureName: {
                        location: "uri",
                        locationName: "featureName"
                    },
                    body: {
                        type: "structure",
                        required: [ "newValue" ],
                        members: {
                            newValue: {}
                        }
                    }
                },
                payload: "body"
            }
        },
        RefreshToken: {
            http: {
                requestUri: "/tokens/{provider}/refresh",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "provider", "refreshTokenBody" ],
                members: {
                    provider: {
                        location: "uri",
                        locationName: "provider"
                    },
                    refreshTokenBody: {
                        type: "structure",
                        required: [ "token" ],
                        members: {
                            token: {
                                shape: "S2o"
                            },
                            clientId: {
                                shape: "S2o"
                            }
                        }
                    }
                },
                payload: "refreshTokenBody"
            },
            output: {
                type: "structure",
                required: [ "accessToken", "expiresIn" ],
                members: {
                    accessToken: {
                        shape: "S2o"
                    },
                    expiresIn: {
                        type: "integer"
                    }
                }
            }
        },
        StartCodegenJob: {
            http: {
                requestUri: "/app/{appId}/environment/{environmentName}/codegen-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "codegenJobToCreate" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    codegenJobToCreate: {
                        type: "structure",
                        required: [ "renderConfig" ],
                        members: {
                            renderConfig: {
                                shape: "S33"
                            },
                            genericDataSchema: {
                                shape: "S3d"
                            },
                            autoGenerateForms: {
                                type: "boolean"
                            },
                            features: {
                                shape: "S3v"
                            },
                            tags: {
                                shape: "S11"
                            }
                        }
                    }
                },
                payload: "codegenJobToCreate"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S32"
                    }
                },
                payload: "entity"
            }
        },
        UpdateComponent: {
            http: {
                method: "PATCH",
                requestUri: "/app/{appId}/environment/{environmentName}/components/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id", "updatedComponent" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    updatedComponent: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            sourceId: {},
                            componentType: {},
                            properties: {
                                shape: "S6"
                            },
                            children: {
                                shape: "Se"
                            },
                            variants: {
                                shape: "Sk"
                            },
                            overrides: {
                                shape: "Sn"
                            },
                            bindingProperties: {
                                shape: "Sp"
                            },
                            collectionProperties: {
                                shape: "Sv"
                            },
                            events: {
                                shape: "Sg"
                            },
                            schemaVersion: {}
                        }
                    }
                },
                payload: "updatedComponent"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S15"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        UpdateForm: {
            http: {
                method: "PATCH",
                requestUri: "/app/{appId}/environment/{environmentName}/forms/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id", "updatedForm" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    updatedForm: {
                        type: "structure",
                        members: {
                            name: {},
                            dataType: {
                                shape: "S1b"
                            },
                            formActionType: {},
                            fields: {
                                shape: "S1e"
                            },
                            style: {
                                shape: "S20"
                            },
                            sectionalElements: {
                                shape: "S22"
                            },
                            schemaVersion: {},
                            cta: {
                                shape: "S24"
                            },
                            labelDecorator: {}
                        }
                    }
                },
                payload: "updatedForm"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S29"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        UpdateTheme: {
            http: {
                method: "PATCH",
                requestUri: "/app/{appId}/environment/{environmentName}/themes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id", "updatedTheme" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    updatedTheme: {
                        type: "structure",
                        required: [ "values" ],
                        members: {
                            id: {},
                            name: {},
                            values: {
                                shape: "S2d"
                            },
                            overrides: {
                                shape: "S2d"
                            }
                        }
                    }
                },
                payload: "updatedTheme"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S2h"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {
                shape: "S7"
            }
        },
        S7: {
            type: "structure",
            members: {
                value: {},
                bindingProperties: {
                    shape: "S8"
                },
                collectionBindingProperties: {
                    shape: "S8"
                },
                defaultValue: {},
                model: {},
                bindings: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "element", "property" ],
                        members: {
                            element: {},
                            property: {}
                        }
                    }
                },
                event: {},
                userAttribute: {},
                concat: {
                    type: "list",
                    member: {
                        shape: "S7"
                    }
                },
                condition: {
                    type: "structure",
                    members: {
                        property: {},
                        field: {},
                        operator: {},
                        operand: {},
                        then: {
                            shape: "S7"
                        },
                        else: {
                            shape: "S7"
                        },
                        operandType: {}
                    }
                },
                configured: {
                    type: "boolean"
                },
                type: {},
                importedValue: {},
                componentName: {},
                property: {}
            }
        },
        S8: {
            type: "structure",
            required: [ "property" ],
            members: {
                property: {},
                field: {}
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "componentType", "name", "properties" ],
                members: {
                    componentType: {},
                    name: {},
                    properties: {
                        shape: "S6"
                    },
                    children: {
                        shape: "Se"
                    },
                    events: {
                        shape: "Sg"
                    },
                    sourceId: {}
                }
            }
        },
        Sg: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    action: {},
                    parameters: {
                        type: "structure",
                        members: {
                            type: {
                                shape: "S7"
                            },
                            url: {
                                shape: "S7"
                            },
                            anchor: {
                                shape: "S7"
                            },
                            target: {
                                shape: "S7"
                            },
                            global: {
                                shape: "S7"
                            },
                            model: {},
                            id: {
                                shape: "S7"
                            },
                            fields: {
                                shape: "S6"
                            },
                            state: {
                                type: "structure",
                                required: [ "componentName", "property", "set" ],
                                members: {
                                    componentName: {},
                                    property: {},
                                    set: {
                                        shape: "S7"
                                    }
                                }
                            }
                        }
                    },
                    bindingEvent: {}
                }
            }
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    variantValues: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    overrides: {
                        shape: "Sn"
                    }
                }
            }
        },
        Sn: {
            type: "map",
            key: {},
            value: {
                type: "map",
                key: {},
                value: {}
            }
        },
        Sp: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    type: {},
                    bindingProperties: {
                        type: "structure",
                        members: {
                            model: {},
                            field: {},
                            predicates: {
                                shape: "Ss"
                            },
                            userAttribute: {},
                            bucket: {},
                            key: {},
                            defaultValue: {},
                            slotName: {}
                        }
                    },
                    defaultValue: {}
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                shape: "St"
            }
        },
        St: {
            type: "structure",
            members: {
                or: {
                    shape: "Ss"
                },
                and: {
                    shape: "Ss"
                },
                field: {},
                operator: {},
                operand: {},
                operandType: {}
            }
        },
        Sv: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "model" ],
                members: {
                    model: {},
                    sort: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "field", "direction" ],
                            members: {
                                field: {},
                                direction: {}
                            }
                        }
                    },
                    predicate: {
                        shape: "St"
                    },
                    identifiers: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S11: {
            type: "map",
            key: {},
            value: {}
        },
        S15: {
            type: "structure",
            required: [ "appId", "environmentName", "id", "name", "componentType", "properties", "variants", "overrides", "bindingProperties", "createdAt" ],
            members: {
                appId: {},
                environmentName: {},
                sourceId: {},
                id: {},
                name: {},
                componentType: {},
                properties: {
                    shape: "S6"
                },
                children: {
                    shape: "Se"
                },
                variants: {
                    shape: "Sk"
                },
                overrides: {
                    shape: "Sn"
                },
                bindingProperties: {
                    shape: "Sp"
                },
                collectionProperties: {
                    shape: "Sv"
                },
                createdAt: {
                    shape: "S17"
                },
                modifiedAt: {
                    shape: "S17"
                },
                tags: {
                    shape: "S11"
                },
                events: {
                    shape: "Sg"
                },
                schemaVersion: {}
            }
        },
        S17: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1b: {
            type: "structure",
            required: [ "dataSourceType", "dataTypeName" ],
            members: {
                dataSourceType: {},
                dataTypeName: {}
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    label: {},
                    position: {
                        shape: "S1g"
                    },
                    excluded: {
                        type: "boolean"
                    },
                    inputType: {
                        type: "structure",
                        required: [ "type" ],
                        members: {
                            type: {},
                            required: {
                                type: "boolean"
                            },
                            readOnly: {
                                type: "boolean"
                            },
                            placeholder: {},
                            defaultValue: {},
                            descriptiveText: {},
                            defaultChecked: {
                                type: "boolean"
                            },
                            defaultCountryCode: {},
                            valueMappings: {
                                type: "structure",
                                required: [ "values" ],
                                members: {
                                    values: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "value" ],
                                            members: {
                                                displayValue: {
                                                    shape: "S1m"
                                                },
                                                value: {
                                                    shape: "S1m"
                                                }
                                            }
                                        }
                                    },
                                    bindingProperties: {
                                        type: "map",
                                        key: {},
                                        value: {
                                            type: "structure",
                                            members: {
                                                type: {},
                                                bindingProperties: {
                                                    type: "structure",
                                                    members: {
                                                        model: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            name: {},
                            minValue: {
                                type: "float"
                            },
                            maxValue: {
                                type: "float"
                            },
                            step: {
                                type: "float"
                            },
                            value: {},
                            isArray: {
                                type: "boolean"
                            },
                            fileUploaderConfig: {
                                type: "structure",
                                required: [ "accessLevel", "acceptedFileTypes" ],
                                members: {
                                    accessLevel: {},
                                    acceptedFileTypes: {
                                        shape: "S1v"
                                    },
                                    showThumbnails: {
                                        type: "boolean"
                                    },
                                    isResumable: {
                                        type: "boolean"
                                    },
                                    maxFileCount: {
                                        type: "integer"
                                    },
                                    maxSize: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    validations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "type" ],
                            members: {
                                type: {},
                                strValues: {
                                    shape: "S1v"
                                },
                                numValues: {
                                    type: "list",
                                    member: {
                                        type: "integer"
                                    }
                                },
                                validationMessage: {}
                            }
                        }
                    }
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                fixed: {},
                rightOf: {},
                below: {}
            },
            union: true
        },
        S1m: {
            type: "structure",
            members: {
                value: {},
                bindingProperties: {
                    type: "structure",
                    required: [ "property" ],
                    members: {
                        property: {},
                        field: {}
                    }
                },
                concat: {
                    type: "list",
                    member: {
                        shape: "S1m"
                    }
                }
            }
        },
        S1v: {
            type: "list",
            member: {}
        },
        S20: {
            type: "structure",
            members: {
                horizontalGap: {
                    shape: "S21"
                },
                verticalGap: {
                    shape: "S21"
                },
                outerPadding: {
                    shape: "S21"
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                tokenReference: {},
                value: {}
            },
            union: true
        },
        S22: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "type" ],
                members: {
                    type: {},
                    position: {
                        shape: "S1g"
                    },
                    text: {},
                    level: {
                        type: "integer"
                    },
                    orientation: {},
                    excluded: {
                        type: "boolean"
                    }
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                position: {},
                clear: {
                    shape: "S26"
                },
                cancel: {
                    shape: "S26"
                },
                submit: {
                    shape: "S26"
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                excluded: {
                    type: "boolean"
                },
                children: {},
                position: {
                    shape: "S1g"
                }
            }
        },
        S29: {
            type: "structure",
            required: [ "appId", "environmentName", "id", "name", "formActionType", "style", "dataType", "fields", "sectionalElements", "schemaVersion" ],
            members: {
                appId: {},
                environmentName: {},
                id: {},
                name: {},
                formActionType: {},
                style: {
                    shape: "S20"
                },
                dataType: {
                    shape: "S1b"
                },
                fields: {
                    shape: "S1e"
                },
                sectionalElements: {
                    shape: "S22"
                },
                schemaVersion: {},
                tags: {
                    shape: "S11"
                },
                cta: {
                    shape: "S24"
                },
                labelDecorator: {}
            }
        },
        S2d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            value: {},
                            children: {
                                shape: "S2d"
                            }
                        }
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            required: [ "appId", "environmentName", "id", "name", "createdAt", "values" ],
            members: {
                appId: {},
                environmentName: {},
                id: {},
                name: {},
                createdAt: {
                    shape: "S17"
                },
                modifiedAt: {
                    shape: "S17"
                },
                values: {
                    shape: "S2d"
                },
                overrides: {
                    shape: "S2d"
                },
                tags: {
                    shape: "S11"
                }
            }
        },
        S2o: {
            type: "string",
            sensitive: true
        },
        S32: {
            type: "structure",
            required: [ "id", "appId", "environmentName" ],
            members: {
                id: {},
                appId: {},
                environmentName: {},
                renderConfig: {
                    shape: "S33"
                },
                genericDataSchema: {
                    shape: "S3d"
                },
                autoGenerateForms: {
                    type: "boolean"
                },
                features: {
                    shape: "S3v"
                },
                status: {},
                statusMessage: {},
                asset: {
                    type: "structure",
                    members: {
                        downloadUrl: {}
                    }
                },
                tags: {
                    shape: "S11"
                },
                createdAt: {
                    shape: "S17"
                },
                modifiedAt: {
                    shape: "S17"
                },
                dependencies: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            supportedVersion: {},
                            isSemVer: {
                                type: "boolean"
                            },
                            reason: {}
                        }
                    }
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                react: {
                    type: "structure",
                    members: {
                        module: {},
                        target: {},
                        script: {},
                        renderTypeDeclarations: {
                            type: "boolean"
                        },
                        inlineSourceMap: {
                            type: "boolean"
                        },
                        apiConfiguration: {
                            type: "structure",
                            members: {
                                graphQLConfig: {
                                    type: "structure",
                                    required: [ "typesFilePath", "queriesFilePath", "mutationsFilePath", "subscriptionsFilePath", "fragmentsFilePath" ],
                                    members: {
                                        typesFilePath: {},
                                        queriesFilePath: {},
                                        mutationsFilePath: {},
                                        subscriptionsFilePath: {},
                                        fragmentsFilePath: {}
                                    }
                                },
                                dataStoreConfig: {
                                    type: "structure",
                                    members: {}
                                },
                                noApiConfig: {
                                    type: "structure",
                                    members: {}
                                }
                            },
                            union: true
                        },
                        dependencies: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                }
            },
            union: true
        },
        S3d: {
            type: "structure",
            required: [ "dataSourceType", "models", "enums", "nonModels" ],
            members: {
                dataSourceType: {},
                models: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "fields", "primaryKeys" ],
                        members: {
                            fields: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "S3i"
                                }
                            },
                            isJoinTable: {
                                type: "boolean"
                            },
                            primaryKeys: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                enums: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "values" ],
                        members: {
                            values: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                nonModels: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "fields" ],
                        members: {
                            fields: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "S3i"
                                }
                            }
                        }
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            required: [ "dataType", "dataTypeValue", "required", "readOnly", "isArray" ],
            members: {
                dataType: {},
                dataTypeValue: {},
                required: {
                    type: "boolean"
                },
                readOnly: {
                    type: "boolean"
                },
                isArray: {
                    type: "boolean"
                },
                relationship: {
                    type: "structure",
                    required: [ "type", "relatedModelName" ],
                    members: {
                        type: {},
                        relatedModelName: {},
                        relatedModelFields: {
                            type: "list",
                            member: {}
                        },
                        canUnlinkAssociatedModel: {
                            type: "boolean"
                        },
                        relatedJoinFieldName: {},
                        relatedJoinTableName: {},
                        belongsToFieldOnRelatedModel: {},
                        associatedFields: {
                            type: "list",
                            member: {}
                        },
                        isHasManyIndex: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S3v: {
            type: "structure",
            members: {
                isRelationshipSupported: {
                    type: "boolean"
                },
                isNonModelSupported: {
                    type: "boolean"
                }
            }
        }
    },
    paginators: {
        ExportComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "entities"
        },
        ExportForms: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "entities"
        },
        ExportThemes: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "entities"
        },
        ListCodegenJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "entities"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "entities"
        },
        ListForms: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "entities"
        },
        ListThemes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "entities"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["keyspaces"] = {};

AWS.Keyspaces = AWS.Service.defineService("keyspaces", [ "2022-02-10" ]);

AWS.apiLoader.services["keyspaces"]["2022-02-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-02-10",
        endpointPrefix: "cassandra",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Keyspaces",
        serviceId: "Keyspaces",
        signatureVersion: "v4",
        signingName: "cassandra",
        targetPrefix: "KeyspacesService",
        uid: "keyspaces-2022-02-10"
    },
    operations: {
        CreateKeyspace: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    keyspaceName: {},
                    tags: {
                        shape: "S3"
                    },
                    replicationSpecification: {
                        type: "structure",
                        required: [ "replicationStrategy" ],
                        members: {
                            replicationStrategy: {},
                            regionList: {
                                shape: "S9"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            }
        },
        CreateTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName", "schemaDefinition" ],
                members: {
                    keyspaceName: {},
                    tableName: {},
                    schemaDefinition: {
                        shape: "Sf"
                    },
                    comment: {
                        shape: "Sq"
                    },
                    capacitySpecification: {
                        shape: "Ss"
                    },
                    encryptionSpecification: {
                        shape: "Sv"
                    },
                    pointInTimeRecovery: {
                        shape: "Sy"
                    },
                    ttl: {
                        shape: "S10"
                    },
                    defaultTimeToLive: {
                        type: "integer"
                    },
                    tags: {
                        shape: "S3"
                    },
                    clientSideTimestamps: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            }
        },
        DeleteKeyspace: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    keyspaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName" ],
                members: {
                    keyspaceName: {},
                    tableName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetKeyspace: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    keyspaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "keyspaceName", "resourceArn", "replicationStrategy" ],
                members: {
                    keyspaceName: {},
                    resourceArn: {},
                    replicationStrategy: {},
                    replicationRegions: {
                        shape: "S9"
                    }
                }
            }
        },
        GetTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName" ],
                members: {
                    keyspaceName: {},
                    tableName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "keyspaceName", "tableName", "resourceArn" ],
                members: {
                    keyspaceName: {},
                    tableName: {},
                    resourceArn: {},
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    status: {},
                    schemaDefinition: {
                        shape: "Sf"
                    },
                    capacitySpecification: {
                        type: "structure",
                        required: [ "throughputMode" ],
                        members: {
                            throughputMode: {},
                            readCapacityUnits: {
                                type: "long"
                            },
                            writeCapacityUnits: {
                                type: "long"
                            },
                            lastUpdateToPayPerRequestTimestamp: {
                                type: "timestamp"
                            }
                        }
                    },
                    encryptionSpecification: {
                        shape: "Sv"
                    },
                    pointInTimeRecovery: {
                        type: "structure",
                        required: [ "status" ],
                        members: {
                            status: {},
                            earliestRestorableTimestamp: {
                                type: "timestamp"
                            }
                        }
                    },
                    ttl: {
                        shape: "S10"
                    },
                    defaultTimeToLive: {
                        type: "integer"
                    },
                    comment: {
                        shape: "Sq"
                    },
                    clientSideTimestamps: {
                        shape: "S13"
                    }
                }
            }
        },
        ListKeyspaces: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "keyspaces" ],
                members: {
                    nextToken: {},
                    keyspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "keyspaceName", "resourceArn", "replicationStrategy" ],
                            members: {
                                keyspaceName: {},
                                resourceArn: {},
                                replicationStrategy: {},
                                replicationRegions: {
                                    shape: "S9"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTables: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    keyspaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "keyspaceName", "tableName", "resourceArn" ],
                            members: {
                                keyspaceName: {},
                                tableName: {},
                                resourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tags: {
                        shape: "S3"
                    }
                }
            }
        },
        RestoreTable: {
            input: {
                type: "structure",
                required: [ "sourceKeyspaceName", "sourceTableName", "targetKeyspaceName", "targetTableName" ],
                members: {
                    sourceKeyspaceName: {},
                    sourceTableName: {},
                    targetKeyspaceName: {},
                    targetTableName: {},
                    restoreTimestamp: {
                        type: "timestamp"
                    },
                    capacitySpecificationOverride: {
                        shape: "Ss"
                    },
                    encryptionSpecificationOverride: {
                        shape: "Sv"
                    },
                    pointInTimeRecoveryOverride: {
                        shape: "Sy"
                    },
                    tagsOverride: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "restoredTableARN" ],
                members: {
                    restoredTableARN: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName" ],
                members: {
                    keyspaceName: {},
                    tableName: {},
                    addColumns: {
                        shape: "Sg"
                    },
                    capacitySpecification: {
                        shape: "Ss"
                    },
                    encryptionSpecification: {
                        shape: "Sv"
                    },
                    pointInTimeRecovery: {
                        shape: "Sy"
                    },
                    ttl: {
                        shape: "S10"
                    },
                    defaultTimeToLive: {
                        type: "integer"
                    },
                    clientSideTimestamps: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S9: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            required: [ "allColumns", "partitionKeys" ],
            members: {
                allColumns: {
                    shape: "Sg"
                },
                partitionKeys: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {}
                        }
                    }
                },
                clusteringKeys: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "orderBy" ],
                        members: {
                            name: {},
                            orderBy: {}
                        }
                    }
                },
                staticColumns: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {}
                        }
                    }
                }
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    type: {}
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "message" ],
            members: {
                message: {}
            }
        },
        Ss: {
            type: "structure",
            required: [ "throughputMode" ],
            members: {
                throughputMode: {},
                readCapacityUnits: {
                    type: "long"
                },
                writeCapacityUnits: {
                    type: "long"
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                kmsKeyIdentifier: {}
            }
        },
        Sy: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        },
        S10: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        },
        S13: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        }
    },
    paginators: {
        ListKeyspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "keyspaces"
        },
        ListTables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tables"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tags"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["billingconductor"] = {};

AWS.Billingconductor = AWS.Service.defineService("billingconductor", [ "2021-07-30" ]);

AWS.apiLoader.services["billingconductor"]["2021-07-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-30",
        endpointPrefix: "billingconductor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWSBillingConductor",
        serviceId: "billingconductor",
        signatureVersion: "v4",
        signingName: "billingconductor",
        uid: "billingconductor-2021-07-30"
    },
    operations: {
        AssociateAccounts: {
            http: {
                requestUri: "/associate-accounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "AccountIds" ],
                members: {
                    Arn: {},
                    AccountIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        AssociatePricingRules: {
            http: {
                method: "PUT",
                requestUri: "/associate-pricing-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "PricingRuleArns" ],
                members: {
                    Arn: {},
                    PricingRuleArns: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        BatchAssociateResourcesToCustomLineItem: {
            http: {
                method: "PUT",
                requestUri: "/batch-associate-resources-to-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TargetArn", "ResourceArns" ],
                members: {
                    TargetArn: {},
                    ResourceArns: {
                        type: "list",
                        member: {}
                    },
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfullyAssociatedResources: {
                        shape: "Si"
                    },
                    FailedAssociatedResources: {
                        shape: "Si"
                    }
                }
            },
            idempotent: true
        },
        BatchDisassociateResourcesFromCustomLineItem: {
            http: {
                method: "PUT",
                requestUri: "/batch-disassociate-resources-from-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TargetArn", "ResourceArns" ],
                members: {
                    TargetArn: {},
                    ResourceArns: {
                        type: "list",
                        member: {}
                    },
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfullyDisassociatedResources: {
                        shape: "Sq"
                    },
                    FailedDisassociatedResources: {
                        shape: "Sq"
                    }
                }
            },
            idempotent: true
        },
        CreateBillingGroup: {
            http: {
                requestUri: "/create-billing-group",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "AccountGrouping", "ComputationPreference" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "Su"
                    },
                    AccountGrouping: {
                        type: "structure",
                        required: [ "LinkedAccountIds" ],
                        members: {
                            LinkedAccountIds: {
                                shape: "S3"
                            },
                            AutoAssociate: {
                                type: "boolean"
                            }
                        }
                    },
                    ComputationPreference: {
                        shape: "Sx"
                    },
                    PrimaryAccountId: {},
                    Description: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        CreateCustomLineItem: {
            http: {
                requestUri: "/create-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "Description", "BillingGroupArn", "ChargeDetails" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "S15"
                    },
                    Description: {
                        shape: "S16"
                    },
                    BillingGroupArn: {},
                    BillingPeriodRange: {
                        shape: "Sf"
                    },
                    Tags: {
                        shape: "S10"
                    },
                    ChargeDetails: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Flat: {
                                type: "structure",
                                required: [ "ChargeValue" ],
                                members: {
                                    ChargeValue: {
                                        type: "double"
                                    }
                                }
                            },
                            Percentage: {
                                type: "structure",
                                required: [ "PercentageValue" ],
                                members: {
                                    PercentageValue: {
                                        type: "double"
                                    },
                                    AssociatedValues: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            Type: {},
                            LineItemFilters: {
                                shape: "S1e"
                            }
                        }
                    },
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        CreatePricingPlan: {
            http: {
                requestUri: "/create-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "S1m"
                    },
                    Description: {
                        shape: "S1n"
                    },
                    PricingRuleArns: {
                        type: "list",
                        member: {}
                    },
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        CreatePricingRule: {
            http: {
                requestUri: "/create-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Type" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "S1r"
                    },
                    Description: {
                        shape: "S1s"
                    },
                    Scope: {},
                    Type: {},
                    ModifierPercentage: {
                        type: "double"
                    },
                    Service: {},
                    Tags: {
                        shape: "S10"
                    },
                    BillingEntity: {},
                    Tiering: {
                        type: "structure",
                        required: [ "FreeTier" ],
                        members: {
                            FreeTier: {
                                type: "structure",
                                required: [ "Activated" ],
                                members: {
                                    Activated: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    UsageType: {},
                    Operation: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeleteBillingGroup: {
            http: {
                requestUri: "/delete-billing-group",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeleteCustomLineItem: {
            http: {
                requestUri: "/delete-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeletePricingPlan: {
            http: {
                requestUri: "/delete-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeletePricingRule: {
            http: {
                requestUri: "/delete-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DisassociateAccounts: {
            http: {
                requestUri: "/disassociate-accounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "AccountIds" ],
                members: {
                    Arn: {},
                    AccountIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DisassociatePricingRules: {
            http: {
                method: "PUT",
                requestUri: "/disassociate-pricing-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "PricingRuleArns" ],
                members: {
                    Arn: {},
                    PricingRuleArns: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        GetBillingGroupCostReport: {
            http: {
                requestUri: "/get-billing-group-cost-report",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    BillingPeriodRange: {
                        type: "structure",
                        required: [ "InclusiveStartBillingPeriod", "ExclusiveEndBillingPeriod" ],
                        members: {
                            InclusiveStartBillingPeriod: {},
                            ExclusiveEndBillingPeriod: {}
                        }
                    },
                    GroupBy: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingGroupCostReportResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                AWSCost: {},
                                ProformaCost: {},
                                Margin: {},
                                MarginPercentage: {},
                                Currency: {},
                                Attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Key: {},
                                            Value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountAssociations: {
            http: {
                requestUri: "/list-account-associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Association: {},
                            AccountId: {},
                            AccountIds: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkedAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                BillingGroupArn: {},
                                AccountName: {
                                    type: "string",
                                    sensitive: true
                                },
                                AccountEmail: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListBillingGroupCostReports: {
            http: {
                requestUri: "/list-billing-group-cost-reports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            BillingGroupArns: {
                                shape: "S38"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingGroupCostReports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                AWSCost: {},
                                ProformaCost: {},
                                Margin: {},
                                MarginPercentage: {},
                                Currency: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListBillingGroups: {
            http: {
                requestUri: "/list-billing-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Arns: {
                                shape: "S38"
                            },
                            PricingPlan: {},
                            Statuses: {
                                type: "list",
                                member: {}
                            },
                            AutoAssociate: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "Su"
                                },
                                Arn: {},
                                Description: {
                                    shape: "Sz"
                                },
                                PrimaryAccountId: {},
                                ComputationPreference: {
                                    shape: "Sx"
                                },
                                Size: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                },
                                Status: {},
                                StatusReason: {},
                                AccountGrouping: {
                                    type: "structure",
                                    members: {
                                        AutoAssociate: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomLineItemVersions: {
            http: {
                requestUri: "/list-custom-line-item-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            BillingPeriodRange: {
                                type: "structure",
                                members: {
                                    StartBillingPeriod: {},
                                    EndBillingPeriod: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomLineItemVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "S15"
                                },
                                ChargeDetails: {
                                    shape: "S3u"
                                },
                                CurrencyCode: {},
                                Description: {
                                    shape: "S16"
                                },
                                ProductCode: {},
                                BillingGroupArn: {},
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                },
                                AssociationSize: {
                                    type: "long"
                                },
                                StartBillingPeriod: {},
                                EndBillingPeriod: {},
                                Arn: {},
                                StartTime: {
                                    type: "long"
                                },
                                AccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomLineItems: {
            http: {
                requestUri: "/list-custom-line-items",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Names: {
                                type: "list",
                                member: {
                                    shape: "S15"
                                }
                            },
                            BillingGroups: {
                                shape: "S38"
                            },
                            Arns: {
                                type: "list",
                                member: {}
                            },
                            AccountIds: {
                                shape: "S3"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomLineItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {
                                    shape: "S15"
                                },
                                ChargeDetails: {
                                    shape: "S3u"
                                },
                                CurrencyCode: {},
                                Description: {
                                    shape: "S16"
                                },
                                ProductCode: {},
                                BillingGroupArn: {},
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                },
                                AssociationSize: {
                                    type: "long"
                                },
                                AccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingPlans: {
            http: {
                requestUri: "/list-pricing-plans",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Arns: {
                                shape: "S49"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "S1m"
                                },
                                Arn: {},
                                Description: {
                                    shape: "S1n"
                                },
                                Size: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingPlansAssociatedWithPricingRule: {
            http: {
                requestUri: "/list-pricing-plans-associated-with-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PricingRuleArn" ],
                members: {
                    BillingPeriod: {},
                    PricingRuleArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingRuleArn: {},
                    PricingPlanArns: {
                        shape: "S49"
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingRules: {
            http: {
                requestUri: "/list-pricing-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Arns: {
                                shape: "S4k"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "S1r"
                                },
                                Arn: {},
                                Description: {
                                    shape: "S1s"
                                },
                                Scope: {},
                                Type: {},
                                ModifierPercentage: {
                                    type: "double"
                                },
                                Service: {},
                                AssociatedPricingPlanCount: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                },
                                BillingEntity: {},
                                Tiering: {
                                    type: "structure",
                                    required: [ "FreeTier" ],
                                    members: {
                                        FreeTier: {
                                            type: "structure",
                                            required: [ "Activated" ],
                                            members: {
                                                Activated: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                },
                                UsageType: {},
                                Operation: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingRulesAssociatedToPricingPlan: {
            http: {
                requestUri: "/list-pricing-rules-associated-to-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PricingPlanArn" ],
                members: {
                    BillingPeriod: {},
                    PricingPlanArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingPlanArn: {},
                    PricingRuleArns: {
                        shape: "S4k"
                    },
                    NextToken: {}
                }
            }
        },
        ListResourcesAssociatedToCustomLineItem: {
            http: {
                requestUri: "/list-resources-associated-to-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    BillingPeriod: {},
                    Arn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Relationship: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssociatedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Relationship: {},
                                EndBillingPeriod: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S10"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBillingGroup: {
            http: {
                requestUri: "/update-billing-group",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "Su"
                    },
                    Status: {},
                    ComputationPreference: {
                        shape: "Sx"
                    },
                    Description: {
                        shape: "Sz"
                    },
                    AccountGrouping: {
                        shape: "S58"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {
                        shape: "Su"
                    },
                    Description: {
                        shape: "Sz"
                    },
                    PrimaryAccountId: {},
                    PricingPlanArn: {},
                    Size: {
                        type: "long"
                    },
                    LastModifiedTime: {
                        type: "long"
                    },
                    Status: {},
                    StatusReason: {},
                    AccountGrouping: {
                        shape: "S58"
                    }
                }
            },
            idempotent: true
        },
        UpdateCustomLineItem: {
            http: {
                requestUri: "/update-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S15"
                    },
                    Description: {
                        shape: "S16"
                    },
                    ChargeDetails: {
                        type: "structure",
                        members: {
                            Flat: {
                                type: "structure",
                                required: [ "ChargeValue" ],
                                members: {
                                    ChargeValue: {
                                        type: "double"
                                    }
                                }
                            },
                            Percentage: {
                                type: "structure",
                                required: [ "PercentageValue" ],
                                members: {
                                    PercentageValue: {
                                        type: "double"
                                    }
                                }
                            },
                            LineItemFilters: {
                                shape: "S1e"
                            }
                        }
                    },
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    BillingGroupArn: {},
                    Name: {
                        shape: "S15"
                    },
                    Description: {
                        shape: "S16"
                    },
                    ChargeDetails: {
                        shape: "S3u"
                    },
                    LastModifiedTime: {
                        type: "long"
                    },
                    AssociationSize: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        },
        UpdatePricingPlan: {
            http: {
                method: "PUT",
                requestUri: "/update-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1m"
                    },
                    Description: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1m"
                    },
                    Description: {
                        shape: "S1n"
                    },
                    Size: {
                        type: "long"
                    },
                    LastModifiedTime: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        },
        UpdatePricingRule: {
            http: {
                method: "PUT",
                requestUri: "/update-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1r"
                    },
                    Description: {
                        shape: "S1s"
                    },
                    Type: {},
                    ModifierPercentage: {
                        type: "double"
                    },
                    Tiering: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1r"
                    },
                    Description: {
                        shape: "S1s"
                    },
                    Scope: {},
                    Type: {},
                    ModifierPercentage: {
                        type: "double"
                    },
                    Service: {},
                    AssociatedPricingPlanCount: {
                        type: "long"
                    },
                    LastModifiedTime: {
                        type: "long"
                    },
                    BillingEntity: {},
                    Tiering: {
                        shape: "S5j"
                    },
                    UsageType: {},
                    Operation: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S8: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            required: [ "InclusiveStartBillingPeriod" ],
            members: {
                InclusiveStartBillingPeriod: {},
                ExclusiveEndBillingPeriod: {}
            }
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    Error: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                Message: {},
                Reason: {}
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    Error: {
                        shape: "Sk"
                    }
                }
            }
        },
        Su: {
            type: "string",
            sensitive: true
        },
        Sx: {
            type: "structure",
            required: [ "PricingPlanArn" ],
            members: {
                PricingPlanArn: {}
            }
        },
        Sz: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "map",
            key: {},
            value: {}
        },
        S15: {
            type: "string",
            sensitive: true
        },
        S16: {
            type: "string",
            sensitive: true
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Attribute", "MatchOption", "Values" ],
                members: {
                    Attribute: {},
                    MatchOption: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1m: {
            type: "string",
            sensitive: true
        },
        S1n: {
            type: "string",
            sensitive: true
        },
        S1r: {
            type: "string",
            sensitive: true
        },
        S1s: {
            type: "string",
            sensitive: true
        },
        S38: {
            type: "list",
            member: {}
        },
        S3u: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Flat: {
                    type: "structure",
                    required: [ "ChargeValue" ],
                    members: {
                        ChargeValue: {
                            type: "double"
                        }
                    }
                },
                Percentage: {
                    type: "structure",
                    required: [ "PercentageValue" ],
                    members: {
                        PercentageValue: {
                            type: "double"
                        }
                    }
                },
                Type: {},
                LineItemFilters: {
                    shape: "S1e"
                }
            }
        },
        S49: {
            type: "list",
            member: {}
        },
        S4k: {
            type: "list",
            member: {}
        },
        S58: {
            type: "structure",
            members: {
                AutoAssociate: {
                    type: "boolean"
                }
            }
        },
        S5j: {
            type: "structure",
            required: [ "FreeTier" ],
            members: {
                FreeTier: {
                    type: "structure",
                    required: [ "Activated" ],
                    members: {
                        Activated: {
                            type: "boolean"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListAccountAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "LinkedAccounts"
        },
        ListBillingGroupCostReports: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "BillingGroupCostReports"
        },
        ListBillingGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "BillingGroups"
        },
        ListCustomLineItems: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CustomLineItems"
        },
        ListCustomLineItemVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CustomLineItemVersions"
        },
        ListPricingPlans: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod" ],
            output_token: "NextToken",
            result_key: "PricingPlans"
        },
        ListPricingPlansAssociatedWithPricingRule: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod", "PricingRuleArn" ],
            output_token: "NextToken",
            result_key: "PricingPlanArns"
        },
        ListPricingRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod" ],
            output_token: "NextToken",
            result_key: "PricingRules"
        },
        ListPricingRulesAssociatedToPricingPlan: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod", "PricingPlanArn" ],
            output_token: "NextToken",
            result_key: "PricingRuleArns"
        },
        ListResourcesAssociatedToCustomLineItem: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "Arn" ],
            output_token: "NextToken",
            result_key: "AssociatedResources"
        }
    },
    waiters: {}
};

